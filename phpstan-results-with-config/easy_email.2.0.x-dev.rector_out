modules/contrib/easy_email/easy_email.install
modules/contrib/easy_email/easy_email.module
modules/contrib/easy_email/easy_email.page.inc
modules/contrib/easy_email/modules/easy_email_commerce/easy_email_commerce.module
modules/contrib/easy_email/modules/easy_email_override/easy_email_override.install
modules/contrib/easy_email/modules/easy_email_override/easy_email_override.module
modules/contrib/easy_email/modules/easy_email_override/src/EmailOverrideHtmlRouteProvider.php
modules/contrib/easy_email/modules/easy_email_override/src/EmailOverrideListBuilder.php
modules/contrib/easy_email/modules/easy_email_override/src/Entity/EmailOverride.php
modules/contrib/easy_email/modules/easy_email_override/src/Entity/EmailOverrideInterface.php
modules/contrib/easy_email/modules/easy_email_override/src/Form/EmailOverrideDeleteForm.php
modules/contrib/easy_email/modules/easy_email_override/src/Form/EmailOverrideForm.php
modules/contrib/easy_email/modules/easy_email_override/src/Plugin/Email/Email.php
modules/contrib/easy_email/modules/easy_email_override/src/Plugin/Email/EmailInterface.php
modules/contrib/easy_email/modules/easy_email_override/src/Service/DeclaredEmailManager.php
modules/contrib/easy_email/modules/easy_email_override/src/Service/DeclaredEmailManagerInterface.php
modules/contrib/easy_email/modules/easy_email_override/src/Service/MailManager.php
modules/contrib/easy_email/src/Controller/EasyEmailController.php
modules/contrib/easy_email/src/EasyEmailAccessControlHandler.php
modules/contrib/easy_email/src/EasyEmailHtmlRouteProvider.php
modules/contrib/easy_email/src/EasyEmailListBuilder.php
modules/contrib/easy_email/src/EasyEmailStorage.php
modules/contrib/easy_email/src/EasyEmailStorageInterface.php
modules/contrib/easy_email/src/EasyEmailTranslationHandler.php
modules/contrib/easy_email/src/EasyEmailTypeHtmlRouteProvider.php
modules/contrib/easy_email/src/EasyEmailTypeListBuilder.php
modules/contrib/easy_email/src/Entity/EasyEmail.php
modules/contrib/easy_email/src/Entity/EasyEmailInterface.php
modules/contrib/easy_email/src/Entity/EasyEmailType.php
modules/contrib/easy_email/src/Entity/EasyEmailTypeInterface.php
modules/contrib/easy_email/src/Entity/EasyEmailViewsData.php
modules/contrib/easy_email/src/Event/EasyEmailEvent.php
modules/contrib/easy_email/src/Event/EasyEmailEvents.php
modules/contrib/easy_email/src/Form/EasyEmailDeleteForm.php
modules/contrib/easy_email/src/Form/EasyEmailForm.php
modules/contrib/easy_email/src/Form/EasyEmailRevisionDeleteForm.php
modules/contrib/easy_email/src/Form/EasyEmailRevisionRevertForm.php
modules/contrib/easy_email/src/Form/EasyEmailRevisionRevertTranslationForm.php
modules/contrib/easy_email/src/Form/EasyEmailTypeDeleteForm.php
modules/contrib/easy_email/src/Form/EasyEmailTypeForm.php
modules/contrib/easy_email/src/Service/EmailAttachmentEvaluator.php
modules/contrib/easy_email/src/Service/EmailAttachmentEvaluatorInterface.php
modules/contrib/easy_email/src/Service/EmailHandler.php
modules/contrib/easy_email/src/Service/EmailHandlerInterface.php
modules/contrib/easy_email/src/Service/EmailTokenEvaluator.php
modules/contrib/easy_email/src/Service/EmailTokenEvaluatorInterface.php
modules/contrib/easy_email/src/Service/EmailUserEvaluator.php
modules/contrib/easy_email/src/Service/EmailUserEvaluatorInterface.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailSendTest.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailTemplateCreateTest.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailTemplatePreviewTest.php
modules/contrib/easy_email/tests/src/Functional/EasyEmailTestBase.php

32 files with changes
=====================

1) modules/contrib/easy_email/tests/src/Functional/EasyEmailTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\easy_email\Functional;

+use Drupal\user\UserInterface;
+use Drupal\filter\FilterFormatInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EntityStorageException;
 use Behat\Mink\Element\NodeElement;
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   ];

   /**
-   * @var \Drupal\filter\FilterFormatInterface
+   * @var FilterFormatInterface
    */
   protected $htmlFormat;

@@ @@
    */
   protected $defaultTheme = 'stark';

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Redirect all emails to the test_mail_collector.
@@ @@
    * @param array $values
    * @param bool $save
    *
-   * @return \Drupal\easy_email\Entity\EasyEmailTypeInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return EasyEmailTypeInterface
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createTemplate($values = [], $save = TRUE) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $email_template_storage */
+    /** @var EntityStorageInterface $email_template_storage */
     $email_template_storage = \Drupal::entityTypeManager()->getStorage('easy_email_type');
     $template = $email_template_storage->create($values);
     if ($save) {
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailTypeInterface $easy_email_type
+   * @param EasyEmailTypeInterface $easy_email_type
    * @param string $field_name
    * @param string $label
    */
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailTypeInterface $easy_email_type
+   * @param EasyEmailTypeInterface $easy_email_type
    * @param string $field_name
    */
   protected function removeField(EasyEmailTypeInterface $easy_email_type, $field_name) {
@@ @@
   }

   /**
-   * @param \Behat\Mink\Element\NodeElement $iframe
+   * @param NodeElement $iframe
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/easy_email/tests/src/Functional/EasyEmailTemplatePreviewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\easy_email\Functional;

+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Config\ImmutableConfig;
 /**
  * Class EasyEmailTemplatePreviewTest
  *
@@ @@
   /**
    * Tests template preview with all fields
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testPreviewAllFields() {
     $template = $this->createTemplate([
@@ @@
       'field_bcc_user[0][target_id]' => $user3->getAccountName() . ' (' . $user3->id() . ')',
     ], 'Preview');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Sender"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests template preview with a HTML body and generating a plain text body
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testPreviewHtmlAndGeneratePlain() {
     $template = $this->createTemplate([
@@ @@
       'field_bcc_user[0][target_id]' => $user3->getAccountName() . ' (' . $user3->id() . ')',
     ], 'Preview');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Sender"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests template preview with a HTML body and an inbox preview
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testPreviewHtmlWithInboxPreview() {
     $template = $this->createTemplate([
@@ @@
       'field_bcc_user[0][target_id]' => $user3->getAccountName() . ' (' . $user3->id() . ')',
     ], 'Preview');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Sender"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests template preview with only a plain text body and an inbox preview
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testPreviewPlainTextOnlyWithInboxPreview() {
     $template = $this->createTemplate([
@@ @@
       'field_bcc_user[0][target_id]' => $user3->getAccountName() . ' (' . $user3->id() . ')',
     ], 'Preview');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Sender"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests template preview with only a plain text body
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testPreviewPlainOnly() {
     $template = $this->createTemplate([
@@ @@
       'field_bcc_user[0][target_id]' => $user3->getAccountName() . ' (' . $user3->id() . ')',
     ], 'Preview');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Sender"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests template preview with only a HTML body
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testPreviewHtmlOnly() {
     $template = $this->createTemplate([
@@ @@
       'field_bcc_user[0][target_id]' => $user3->getAccountName() . ' (' . $user3->id() . ')',
     ], 'Preview');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Sender"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests template preview with unsafe tokens
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testPreviewUnsafeTokens() {
     $template = $this->createTemplate([
@@ @@
       'field_bcc_user[0][target_id]' => $user3->getAccountName() . ' (' . $user3->id() . ')',
     ], 'Preview');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
     $this->assertSession()->elementTextContains('css', '[data-drupal-selector="header-Sender"] span.value', $site_config->get('mail'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/easy_email/tests/src/Functional/EasyEmailTemplateCreateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\easy_email\Functional;

-
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Class EasyEmailTemplateCreateTest
  *
@@ @@
   /**
    * Tests template create/edit form with default fields
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateDefaultsTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no plain text body field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoPlainTextTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no HTML body field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoHtmlTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no recipient reference field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoRecipientsTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no CC reference field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoCCUidTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no CC text field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoCCAddressTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no BCC reference field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoBCCUidTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no BCC text field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoBCCAddressTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no From Name field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoFromNameTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no From Address field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoFromAddressTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no Reply To field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoReplyToAddressTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no Reply To field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoFromOrReplyToAddressTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no dynamic attachments field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoDynamicAttachmentsTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no attachments file reference field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoAttachmentFilesTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no inbox preview field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoInboxPreviewTemplate() {
     $template = $this->createTemplate([
@@ @@
   /**
    * Tests template create/edit form with no unique key field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testCreateNoUniqueKeyTemplate() {
     $template = $this->createTemplate([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/easy_email/tests/src/Functional/EasyEmailSendTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\easy_email\Functional;

+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\easy_email\Entity\EasyEmailInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\file\FileInterface;
 /**
  * Class EasyEmailSendTest
  *
@@ @@
   /**
    * Tests sending email with an HTML and Plain Text version
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendHtmlAndPlainText() {
     $template = $this->createTemplate([
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
       ->load($email_id);

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()
       ->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests email saving without sending.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSaveWithoutSend() {
     $template_id = 'test_no_send';
@@ @@
     $this->assertSession()->pageTextContains('Created new email.');
     $this->assertSession()->pageTextNotContains('Email sent.');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()
       ->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests email sending with customized text at send time.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithCustomizedEmail() {
     $template_id = 'test_customized';
@@ @@
     $this->assertSession()->pageTextContains('Created new email.');
     $this->assertSession()->pageTextContains('Email sent.');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()
       ->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests email sending with plain text version generated from HTML version
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendHtmlGeneratePlainText() {
     $template_id = 'test_plain_text_generated';
@@ @@
     $this->assertSession()->pageTextContains('Created new email.');
     $this->assertSession()->pageTextContains('Email sent.');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()
       ->elementTextContains('css', '[data-drupal-selector="inbox-preview"] .body-preview', 'This is a test email (HTML) for user account ' . $user1->getDisplayName() . '.');
@@ @@
   /**
    * Tests email sending with plain text version only
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendPlainOnly() {
     $template_id = 'test_plain_text_only';
@@ @@
   /**
    * Tests email sending with HTML version only
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendHtmlOnly() {
     $template_id = 'test_html_only';
@@ @@
   /**
    * Tests email sending without a CC address field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithoutCcAddress() {
     $template_id = 'test_without_cc_address';
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     \Drupal::entityTypeManager()->getStorage('easy_email')->resetCache();
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
@@ @@
   /**
    * Tests email sending without a CC UID field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithoutCcUid() {
     $template_id = 'test_without_cc_uid';
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     \Drupal::entityTypeManager()->getStorage('easy_email')->resetCache();
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
@@ @@
   /**
    * Tests email sending without a BCC address field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithoutBccAddress() {
     $template_id = 'test_without_bcc_address';
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     \Drupal::entityTypeManager()->getStorage('easy_email')->resetCache();
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
@@ @@
   /**
    * Tests email sending without a BCC UID field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithoutBccUid() {
     $template_id = 'test_without_bcc_uid';
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     \Drupal::entityTypeManager()->getStorage('easy_email')->resetCache();
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
@@ @@
   /**
    * Tests email sending without a Recipient UID field
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithoutRecipientUid() {
     $template_id = 'test_without_recipient_uid';
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     \Drupal::entityTypeManager()->getStorage('easy_email')->resetCache();
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
@@ @@
   /**
    * Tests email sending with attachments that are not saved to the log.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithAttachmentsNotSaved() {
     $template_id = 'test_attachments_not_saved';
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     \Drupal::entityTypeManager()->getStorage('easy_email')->resetCache();
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
@@ @@
   /**
    * Tests email sending with attachments that are saved.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithAttachmentsSaved() {
     $template_id = 'test_attachments_saved';
@@ @@

     $url = explode('/', $this->getSession()->getCurrentUrl());
     $email_id = array_pop($url);
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email_entity */
+    /** @var EasyEmailInterface $email_entity */
     \Drupal::entityTypeManager()->getStorage('easy_email')->resetCache();
     $email_entity = \Drupal::entityTypeManager()
       ->getStorage('easy_email')
@@ @@

     $attachments = $email_entity->getAttachments();
     $this->assertEquals(2, count($attachments));
-    /** @var \Drupal\file\FileInterface $attachment */
+    /** @var FileInterface $attachment */
     $attachment = array_shift($attachments);
     $this->assertEquals('druplicon.png', $attachment->getFilename());
     $this->assertEquals('image/png', $attachment->getMimeType());
@@ @@
   /**
    * Tests email sending with unsafe tokens.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendWithUnsafeTokens() {
     $template_id = 'test_unsafe_tokens';
@@ @@
     $this->assertSession()->pageTextContains('Created new email.');
     $this->assertSession()->pageTextContains('Email sent.');

-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $this->assertSession()
       ->elementTextContains('css', '[data-drupal-selector="header-Return-Path"] span.value', $site_config->get('mail'));
@@ @@
   /**
    * Tests email sending with a unique key to prevent duplicates
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendDuplicateCheck() {
     $template_id = 'test_unique_key';
@@ @@
   /**
    * Tests email sending without a unique key to prevent duplicates
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendNoDuplicateCheck() {
     $template_id = 'test_without_unique_key';
@@ @@
   /**
    * Tests email sending without a unique key field to prevent duplicates
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testSendNoKeyField() {
     $template_id = 'test_without_unique_key';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/easy_email/src/Service/EmailUserEvaluatorInterface.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * Evaluates the recipient user accounts for the entity email.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    */
   public function evaluateUsers(EasyEmailInterface $email);

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/easy_email/src/Service/EmailUserEvaluator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Service;

+use Drupal\user\UserStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\easy_email\Entity\EasyEmailInterface;
 use Drupal\easy_email\Event\EasyEmailEvent;
@@ @@
 class EmailUserEvaluator implements EmailUserEvaluatorInterface {

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * EmailUserEvaluator constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EventDispatcherInterface $eventDispatcher
+   * @param EntityTypeManagerInterface $entityTypeManager
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EventDispatcherInterface $eventDispatcher, EntityTypeManagerInterface $entityTypeManager) {
     $this->eventDispatcher = $eventDispatcher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/easy_email/src/Service/EmailTokenEvaluatorInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Evaluate the tokens in entity email fields.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    */
   public function evaluateTokens(EasyEmailInterface $email);

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    * @param array|string $values
    * @param bool $unique
    *
@@ @@
   public function replaceTokens(EasyEmailInterface $email, $values, $unique = FALSE);

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *
    * @return bool
    */
@@ @@

   /**
    * @param string $text
-   * @param \Drupal\Core\Session\AccountInterface $recipient
+   * @param AccountInterface $recipient
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/easy_email/src/Service/EmailTokenEvaluator.php:13

    ---------- begin diff ----------
@@ @@
 class EmailTokenEvaluator implements EmailTokenEvaluatorInterface {

   /**
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs the EmailTokenEvaluator
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
-   * @param \Drupal\Core\Utility\Token $token
+   * @param EventDispatcherInterface $eventDispatcher
+   * @param Token $token
    */
   public function __construct(EventDispatcherInterface $eventDispatcher, Token $token) {
     $this->token = $token;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/easy_email/src/Service/EmailHandlerInterface.php:11

    ---------- begin diff ----------
@@ @@
    * @param array $values
    *   The initial values for the entity email.
    *
-   * @return \Drupal\easy_email\Entity\EasyEmailInterface
+   * @return EasyEmailInterface
    */
   public function createEmail($values = []);

@@ @@
   /**
    * Check if a duplicate for this email exists by unique key.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *   The email entity to check
    *
    * @return bool
@@ @@
   /**
    * Sends an email entity.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *   The email entity to send
    * @param array $params
    *   The initial params array
@@ @@
   public function sendEmail(EasyEmailInterface $email, $params = [], $send_duplicate = FALSE);

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    * @param array $params
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/easy_email/src/Service/EmailHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Service;

+use Drupal\easy_email\EasyEmailStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\easy_email\Entity\EasyEmailTypeInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\easy_email\EasyEmailStorageInterface
+   * @var EasyEmailStorageInterface
    */
   protected $emailStorage;

   /**
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $emailTypeStorage;

   /**
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $emailViewBuilder;

   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

   /**
-   * @var \Drupal\easy_email\Service\EmailTokenEvaluatorInterface
+   * @var EmailTokenEvaluatorInterface
    */
   protected $tokenEvaluator;

   /**
-   * @var \Drupal\easy_email\Service\EmailUserEvaluatorInterface
+   * @var EmailUserEvaluatorInterface
    */
   protected $userEvaluator;

   /**
-   * @var \Drupal\easy_email\Service\EmailAttachmentEvaluatorInterface
+   * @var EmailAttachmentEvaluatorInterface
    */
   protected $attachmentEvaluator;

@@ @@
   protected $renderedPreviews;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * EmailHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Mail\MailManagerInterface $mailManager
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Drupal\easy_email\Service\EmailTokenEvaluatorInterface $tokenEvaluator
-   * @param \Drupal\easy_email\Service\EmailUserEvaluatorInterface $userEvaluator
-   * @param \Drupal\easy_email\Service\EmailAttachmentEvaluatorInterface $attachmentEvaluator
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param MailManagerInterface $mailManager
+   * @param LanguageManagerInterface $languageManager
+   * @param RendererInterface $renderer
+   * @param TimeInterface $time
+   * @param EmailTokenEvaluatorInterface $tokenEvaluator
+   * @param EmailUserEvaluatorInterface $userEvaluator
+   * @param EmailAttachmentEvaluatorInterface $attachmentEvaluator
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, MailManagerInterface $mailManager, LanguageManagerInterface $languageManager, RendererInterface $renderer, TimeInterface $time, EmailTokenEvaluatorInterface $tokenEvaluator, EmailUserEvaluatorInterface $userEvaluator, EmailAttachmentEvaluatorInterface $attachmentEvaluator, EventDispatcherInterface $eventDispatcher) {
     $this->languageManager = $languageManager;
@@ @@

     $params = $this->generateEmailParams($email, $params);

-    /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $email_type */
+    /** @var EasyEmailTypeInterface $email_type */
     $email_type = $this->emailTypeStorage->load($email->bundle());
     $save_attachments_to = FALSE;
     if ($email_type->getSaveAttachment()) {
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    * @param array $params
    *
    * @return array
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    * @param array $params
    *
    * @return array
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *
    * @return bool
    */
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *
    * @return bool
    */
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *
    * @return bool
    */
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *
    * @return array
    */
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *
    * @return array
    */
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *
    * @return bool
    */
   protected function shouldGeneratePlainBody(EasyEmailInterface $email) {
-    /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $email_type */
+    /** @var EasyEmailTypeInterface $email_type */
     $email_type = $this->emailTypeStorage->load($email->bundle());
     return $email_type->getGenerateBodyPlain();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/easy_email/src/Service/EmailAttachmentEvaluatorInterface.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * Evaluate the attachments in entity email fields.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *   The email entity
    * @param string|bool $save_attachment_to
    *   URI of the destination directory to save the dynamic file attachments,
    *   FALSE to bypass saving dynamic attachments.
-   *
    */
   public function evaluateAttachments(EasyEmailInterface $email, $save_attachment_to = FALSE);

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/easy_email/src/Service/EmailAttachmentEvaluator.php:14

    ---------- begin diff ----------
@@ @@
 class EmailAttachmentEvaluator implements EmailAttachmentEvaluatorInterface {

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

   /**
-   * @var \Drupal\Core\ProxyClass\File\MimeType\MimeTypeGuesser
+   * @var MimeTypeGuesser
    */
   protected $mimeTypeGuesser;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs the EmailTokenEvaluator
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
-   * @param \Drupal\Core\ProxyClass\File\MimeType\MimeTypeGuesser $mimeTypeGuesser
+   * @param EventDispatcherInterface $eventDispatcher
+   * @param FileSystemInterface $fileSystem
+   * @param MimeTypeGuesser $mimeTypeGuesser
    */
   public function __construct(EventDispatcherInterface $eventDispatcher, FileSystemInterface $fileSystem, MimeTypeGuesser $mimeTypeGuesser) {
     $this->fileSystem = $fileSystem;
@@ @@
   }

   /**
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
-   * @param \Drupal\file\FileInterface $file
+   * @param EasyEmailInterface $email
+   * @param FileInterface $file
    */
   protected function saveAttachment(EasyEmailInterface $email, $source, $dest_directory) {
     \Drupal::service('file_system')->prepareDirectory($dest_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
-    $file_entity = file_save_data(file_get_contents($source), $dest_directory . '/' . $this->fileSystem->basename($source));
+    $file_entity = \Drupal::service('file.repository')->writeData(file_get_contents($source), $dest_directory . '/' . $this->fileSystem->basename($source));
     $email->addAttachment($file_entity->id());
   }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/easy_email/src/Form/EasyEmailTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Form;

+use Drupal\easy_email\Entity\EasyEmailTypeInterface;
+use Drupal\easy_email\Entity\EasyEmailInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * EasyEmailTypeForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    */
   public function __construct(MessengerInterface $messenger) {
     $this->messenger = $messenger;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $easy_email_type */
+    /** @var EasyEmailTypeInterface $easy_email_type */
     $easy_email_type = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@
       return $form;
     }

-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $easy_email */
+    /** @var EasyEmailInterface $easy_email */
     $easy_email = $this->entityTypeManager->getStorage('easy_email')->create([
       'type' => $easy_email_type->id(),
     ]);
@@ @@
         '#description' => $this->t('Warning: this can take up a lot of space in both the database and file system.'),
         '#default_value' => $easy_email_type->getSaveAttachment(),
       ];
-      /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+      /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
       $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
       $scheme_options = $stream_wrapper_manager->getNames(StreamWrapperInterface::WRITE_VISIBLE);

@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $easy_email_type */
+    /** @var EasyEmailTypeInterface $easy_email_type */
     $easy_email_type = $this->entity;

     if ($easy_email_type->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/easy_email/src/Form/EasyEmailRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new EasyEmailRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Email storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(EasyEmailInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $default_revision */
+    /** @var EasyEmailInterface $default_revision */
     $latest_revision = $this->EasyEmailStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/easy_email/src/Form/EasyEmailRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Email revision.
    *
-   * @var \Drupal\easy_email\Entity\EasyEmailInterface
+   * @var EasyEmailInterface
    */
   protected $revision;

@@ @@
   /**
    * The Email storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $EasyEmailStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new EasyEmailRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Email storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $revision
+   * @param EasyEmailInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\easy_email\Entity\EasyEmailInterface
+   * @return EasyEmailInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(EasyEmailInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/easy_email/src/Form/EasyEmailRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Form;

+use Drupal\easy_email\Entity\EasyEmailInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Email revision.
    *
-   * @var \Drupal\easy_email\Entity\EasyEmailInterface
+   * @var EasyEmailInterface
    */
   protected $revision;

@@ @@
   /**
    * The Email storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $EasyEmailStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new EasyEmailRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/easy_email/src/Form/EasyEmailForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Form;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\easy_email\Service\EmailHandlerInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a EasyEmailForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, PrivateTempStoreFactory $temp_store_factory, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ @@
    * Set the form state values from the custom form into the entity.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param EasyEmailInterface $entity
    */
   protected function setValuesFromFormState(array $form, FormStateInterface $form_state) {
@@ @@
    * Form submit handler for previewing an easy email type template.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function preview(array $form, FormStateInterface $form_state) {
     $this->setValuesFromFormState($form, $form_state);
@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $this->setValuesFromFormState($form, $form_state);

-    /** @var \Drupal\easy_email\Service\EmailHandlerInterface $email_handler */
+    /** @var EmailHandlerInterface $email_handler */
     $email_handler = \Drupal::service('easy_email.handler');
     if (!$this->isEntityTypePreview() && $email_handler->duplicateExists($this->entity)) {
       $form_state->setError($form, $this->t('Email matching unique key already exists.'));
@@ @@
   public function save(array $form, FormStateInterface $form_state) {
     $this->setValuesFromFormState($form, $form_state);

-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $entity */
+    /** @var EasyEmailInterface $entity */
     $entity = $this->entity;

     // Save as a new revision if requested to do so.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/easy_email/src/Event/EasyEmailEvent.php:12

    ---------- begin diff ----------
@@ @@
 class EasyEmailEvent extends Event {

   /**
-   * @var \Drupal\easy_email\Entity\EasyEmailInterface
+   * @var EasyEmailInterface
    */
   protected $email;

@@ @@
   /**
    * Constructs a new EasyEmailEvent.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $email
+   * @param EasyEmailInterface $email
    *   The entity email
    */
   public function __construct(EasyEmailInterface $email) {
@@ @@
   /**
    * Gets the entity email.
    *
-   * @return \Drupal\easy_email\Entity\EasyEmailInterface
+   * @return EasyEmailInterface
    *   The entity email
    */
   public function getEmail(): EasyEmailInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/easy_email/src/Entity/EasyEmailInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Entity;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Returns the entity creator's user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The creator user entity.
    */
   public function getCreator();
@@ @@
   /**
    * Sets the entity creator's user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The creator user entity.
    *
    * @return $this
@@ @@
   /**
    * Returns the entity recipients' user entities.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   The recipient user entities.
    */
   public function getRecipients();
@@ @@
   /**
    * Sets the entity recipients' user entities.
    *
-   * @param \Drupal\user\UserInterface[] $accounts
+   * @param UserInterface[] $accounts
    *   The recipient user entities.
    *
    * @return $this
@@ @@
   /**
    * Returns the entity CC user entities.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   The CC user entities.
    */
   public function getCC();
@@ @@
   /**
    * Sets the entity CC user entities.
    *
-   * @param \Drupal\user\UserInterface[] $accounts
+   * @param UserInterface[] $accounts
    *   The CC user entities.
    *
    * @return $this
@@ @@
   /**
    * Returns the entity BCC user entities.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   The BCC user entities.
    */
   public function getBCC();
@@ @@
   /**
    * Sets the entity BCC user entities.
    *
-   * @param \Drupal\user\UserInterface[] $accounts
+   * @param UserInterface[] $accounts
    *   The BCC user entities.
    *
    * @return $this
@@ @@
   /**
    * Returns the entity file attachment entities.
    *
-   * @return \Drupal\file\FileInterface[]
+   * @return FileInterface[]
    *   The file attachment entities.
    */
   public function getAttachments();
@@ @@
   /**
    * Sets the entity file attachment entities.
    *
-   * @param \Drupal\file\FileInterface $files
+   * @param FileInterface $files
    *   The file attachment entities.
    *
    * @return $this
@@ @@
   /**
    * Gets the Email revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/easy_email/src/Entity/EasyEmail.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Entity;

+use Drupal\easy_email\EasyEmailStorageInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
+use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\RevisionableContentEntityBase;
@@ @@
    * {@inheritdoc}
    */
   public static function preCreate(EntityStorageInterface $storage_controller, array &$values) {
-    /** @var \Drupal\easy_email\EasyEmailStorageInterface $storage_controller */
+    /** @var EasyEmailStorageInterface $storage_controller */
     parent::preCreate($storage_controller, $values);

-    /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $easy_email_type */
+    /** @var EasyEmailTypeInterface $easy_email_type */
     $easy_email_type = $storage_controller->getEmailTypeStorage()->load($values['type']);

     $values += [
@@ @@
   }

   /**
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemList $field_item_list
+   * @param EntityReferenceFieldItemList $field_item_list
    *
    * @return int[]
    *   The entity IDs
@@ @@
   }

   /**
-   * @param \Drupal\Core\Field\FieldItemList $field_item_list
+   * @param FieldItemList $field_item_list
    *
    * @return string[]|null
    *   The string values from the field list
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/easy_email/src/EasyEmailStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   /**
    * Gets the Entity Email Type storage
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    */
   public function getEmailTypeStorage();

@@ @@
   /**
    * Gets a list of Email revision IDs for a specific Email.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $entity
+   * @param EasyEmailInterface $entity
    *   The Email entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Email author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $entity
+   * @param EasyEmailInterface $entity
    *   The Email entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Email with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/easy_email/src/EasyEmailStorage.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new EasyEmailStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend to be used.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache = NULL, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, EntityTypeManagerInterface $entity_type_manager = NULL, EventDispatcherInterface $event_dispatcher = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/easy_email/src/EasyEmailListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email;

+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
     $recipients = $entity->getRecipientAddresses();
     $row['recipient'] = !empty($recipients) ? implode(', ', $recipients) : '';

-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = \Drupal::service('date.formatter');
     $row['created'] = $date_formatter->format($entity->getCreatedTime(), 'short');
     $row['sent'] = $entity->isSent() ? $date_formatter->format($entity->getSentTime(), 'short') : '';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/easy_email/src/EasyEmailHtmlRouteProvider.php:105

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/easy_email/src/EasyEmailAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email;

+use Drupal\easy_email\Entity\EasyEmailInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\easy_email\Entity\EasyEmailInterface $entity */
+    /** @var EasyEmailInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view all email entities')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/easy_email/src/Controller/EasyEmailController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email\Controller;

+use Drupal\Core\Entity\EntityFormBuilderInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
 class EasyEmailController extends ControllerBase implements ContainerInjectionInterface {

   /**
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

   /**
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * EasyEmailController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param RequestStack $requestStack
+   * @param FormBuilderInterface $formBuilder
    */
   public function __construct(RequestStack $requestStack, FormBuilderInterface $formBuilder) {
     $this->requestStack = $requestStack;
@@ @@
     $email = \Drupal::entityTypeManager()->getStorage('easy_email')->create([
       'type' => $easy_email_type->id(),
     ]);
-    /** @var \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder */
+    /** @var EntityFormBuilderInterface $entity_form_builder */
     $entity_form_builder = \Drupal::service('entity.form_builder');
     $form = $entity_form_builder->getForm($email, 'default', ['easy_email_type_preview' => TRUE]);
     return $form;
@@ @@
   /**
    * Generates an overview table of older revisions of a Email .
    *
-   * @param \Drupal\easy_email\Entity\EasyEmailInterface $easy_email
+   * @param EasyEmailInterface $easy_email
    *   A Email  object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/easy_email/modules/easy_email_override/src/Service/MailManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email_override\Service;

+use Drupal\easy_email_override\Entity\EmailOverrideInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ @@
   /**
    * Decorated service object.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $decorated;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs the EmailManager object.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $decorated
+   * @param MailManagerInterface $decorated
    * @param \Traversable $namespaces
    * @param ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    */
   public function __construct(MailManagerInterface $decorated, \Traversable $namespaces, ModuleHandlerInterface $module_handler, RendererInterface $renderer) {
     parent::__construct('Plugin/Mail', $namespaces, $module_handler, 'Drupal\Core\Mail\MailInterface', 'Drupal\Core\Annotation\Mail');
@@ @@
    */
   public function mail($module, $key, $to, $langcode, $params = [], $reply = NULL, $send = TRUE) {
     $email_handler = \Drupal::service('easy_email.handler');
-    /** @var \Drupal\easy_email_override\Entity\EmailOverrideInterface[] $email_overrides */
+    /** @var EmailOverrideInterface[] $email_overrides */
     $email_overrides = \Drupal::entityTypeManager()
       ->getStorage('easy_email_override')
       ->loadByProperties([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/easy_email/modules/easy_email_override/src/Service/DeclaredEmailManager.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new EmailOverrideManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
    */
   public function __construct(ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/easy_email/modules/easy_email_override/src/Form/EmailOverrideForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\easy_email_override\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\easy_email_override\Entity\EmailOverrideInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class EmailOverrideForm extends EntityForm {

   /**
-   * @var \Drupal\easy_email_override\Service\DeclaredEmailManagerInterface
+   * @var DeclaredEmailManagerInterface
    */
   protected $emailManager;

   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $easyEmailTypeStorage;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * EmailOverrideForm constructor.
    *
-   * @param \Drupal\easy_email_override\Service\DeclaredEmailManagerInterface $emailManager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param DeclaredEmailManagerInterface $emailManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    * @param EntityFieldManagerInterface $entityFieldManager
    */
   public function __construct(DeclaredEmailManagerInterface $emailManager, EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager) {
@@ @@
    */
   protected function getEmailDefaultValue() {
     $default_value = NULL;
-    /** @var \Drupal\easy_email_override\Entity\EmailOverrideInterface $easy_email_override */
+    /** @var EmailOverrideInterface $easy_email_override */
     $easy_email_override = $this->entity;
     $module = $easy_email_override->getModule();
     $key = $easy_email_override->getKey();
@@ @@
   protected function getMappingDefaultValue($source_id) {
     $default_value = NULL;

-    /** @var \Drupal\easy_email_override\Entity\EmailOverrideInterface $easy_email_override */
+    /** @var EmailOverrideInterface $easy_email_override */
     $easy_email_override = $this->entity;

     $mappings = $easy_email_override->getParamMap();
@@ @@

     $form['#tree'] = TRUE;

-    /** @var \Drupal\easy_email_override\Entity\EmailOverrideInterface $easy_email_override */
+    /** @var EmailOverrideInterface $easy_email_override */
     $easy_email_override = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\easy_email_override\Entity\EmailOverrideInterface $easy_email_override */
+    /** @var EmailOverrideInterface $easy_email_override */
     $easy_email_override = $this->entity;
     $is_new = $easy_email_override->isNew();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/easy_email/modules/easy_email_commerce/easy_email_commerce.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ @@
  * Implements hook_tokens().
  */
 function easy_email_commerce_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
   /** @var \Drupal\commerce_order\OrderTotalSummaryInterface $order_total_summary */
   $order_total_summary = \Drupal::service('commerce_order.order_total_summary');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


31) modules/contrib/easy_email/easy_email.page.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\easy_email\Entity\EasyEmailInterface;
+use Drupal\easy_email\Entity\EasyEmailTypeInterface;
+use Drupal\easy_email\Service\EmailHandlerInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Link;
 /**
@@ @@
  */
 function template_preprocess_easy_email(array &$variables) {
   // Fetch EasyEmail Entity Object.
-  /** @var \Drupal\easy_email\Entity\EasyEmailInterface $easy_email */
+  /** @var EasyEmailInterface $easy_email */
   $easy_email = $variables['elements']['#easy_email'];

   // Helpful $content variable for templates.
@@ @@
     ]);
   }

-  /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $easy_email_type */
+  /** @var EasyEmailTypeInterface $easy_email_type */
   $easy_email_type = \Drupal::entityTypeManager()->getStorage('easy_email_type')->load($easy_email->bundle());

   if ($easy_email->hasField('body_plain') && (!empty($easy_email_type->getGenerateBodyPlain()) || !empty($easy_email->getPlainBody()))) {
@@ @@

   $variables['headers'] = [];

-  /** @var \Drupal\easy_email\Service\EmailHandlerInterface $email_handler */
+  /** @var EmailHandlerInterface $email_handler */
   $email_handler = \Drupal::service('easy_email.handler');

   $message = $email_handler->preview($easy_email);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


32) modules/contrib/easy_email/easy_email.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
+use Drupal\easy_email\Entity\EasyEmailInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\easy_email\Service\EmailHandlerInterface;
+use Drupal\easy_email\Service\EmailAttachmentEvaluatorInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Render\RenderContext;
 use Drupal\Core\Url;
@@ @@
     $message['send'] = FALSE;
   }

-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
   if (isset($params['headers'])) {
     $message['headers'] = array_merge($message['headers'], $params['headers']);
@@ @@
 }

 function template_preprocess_easy_email_body_html(array &$variables) {
-  /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email */
+  /** @var EasyEmailInterface $email */
   $email = $variables['easy_email'];
   $html_body = $email->getHtmlBody();
   if (!empty($html_body)) {
@@ @@


 function template_preprocess_easy_email_body_plain(array &$variables) {
-  /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email */
+  /** @var EasyEmailInterface $email */
   $email = $variables['easy_email'];
   $plain_body = $email->getPlainBody();
   if (!empty($plain_body)) {
@@ @@
 }

 function template_preprocess_easy_email_body_inbox_preview(array &$variables) {
-  /** @var \Drupal\easy_email\Entity\EasyEmailInterface $email */
+  /** @var EasyEmailInterface $email */
   $email = $variables['easy_email'];
   $inbox_preview = $email->getInboxPreview();
   $variables['body'] = [
@@ @@
 }

 function template_preprocess_easy_email_inbox_preview_view(array &$variables) {
-  /** @var \Drupal\easy_email\Entity\EasyEmailInterface $easy_email */
+  /** @var EasyEmailInterface $easy_email */
   $easy_email = $variables['easy_email'];
   $inbox_preview = $easy_email->getInboxPreview();
   if (!$easy_email->hasField('body_html') || empty($inbox_preview)) {
@@ @@
     $from = $easy_email->getFromAddress();
   }
   if (empty($from)) {
-    /** @var \Drupal\Core\Config\ImmutableConfig $site_config */
+    /** @var ImmutableConfig $site_config */
     $site_config = \Drupal::config('system.site');
     $from = $site_config->get('name');
   }
@@ @@
  */
 function template_preprocess_easy_email_type_preview(array &$variables) {
   // Fetch EasyEmail Entity Object.
-  /** @var \Drupal\easy_email\Entity\EasyEmailInterface $easy_email */
+  /** @var EasyEmailInterface $easy_email */
   $easy_email = $variables['easy_email'];

   if ($easy_email->hasField('body_html') && !empty($easy_email->getHtmlBody())) {
@@ @@
       ]);
   }

-  /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $easy_email_type */
+  /** @var EasyEmailTypeInterface $easy_email_type */
   $easy_email_type = \Drupal::entityTypeManager()->getStorage('easy_email_type')->load($easy_email->bundle());

   if ($easy_email->hasField('body_plain') && (!empty($easy_email_type->getGenerateBodyPlain()) || !empty($easy_email->getPlainBody()))) {
@@ @@

   $variables['headers'] = [];

-  /** @var \Drupal\easy_email\Service\EmailHandlerInterface $email_handler */
+  /** @var EmailHandlerInterface $email_handler */
   $email_handler = \Drupal::service('easy_email.handler');

   $message = $email_handler->preview($easy_email);
@@ @@

   $attachments = [];

-  /** @var \Drupal\easy_email\Service\EmailAttachmentEvaluatorInterface $attachment_evalutator */
+  /** @var EmailAttachmentEvaluatorInterface $attachment_evalutator */
   $attachment_evalutator = \Drupal::service('easy_email.attachment_evaluator');
   $attachment_evalutator->evaluateAttachments($easy_email, FALSE);
   foreach ($easy_email->getEvaluatedAttachments() as $file) {
@@ @@

 function easy_email_entity_insert(EntityInterface $entity) {
   if ($entity->getEntityTypeId() == 'easy_email_type' && !\Drupal::isConfigSyncing()) {
-    /** @var \Drupal\easy_email\Entity\EasyEmailTypeInterface $entity */
+    /** @var EasyEmailTypeInterface $entity */
     easy_email_field_add_key_field($entity);
     easy_email_field_add_recipient_uid_field($entity);
     easy_email_field_add_cc_uid_field($entity);
@@ @@
     ->setDisplayConfigurable('form', TRUE)
     ->setDisplayConfigurable('view', TRUE);

-  /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+  /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
   $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
   $scheme_options = $stream_wrapper_manager->getNames(StreamWrapperInterface::WRITE_VISIBLE);
   if (!empty($scheme_options['private'])) {
@@ @@
  *
  * Borrowed from Drupal Commerce: ConfigurableFieldManager class
  *
- * @param \Drupal\Core\Field\BaseFieldDefinition $field_definition
+ * @param BaseFieldDefinition $field_definition
  *   The field definition.
  * @param bool $lock
  *   Whether the created field should be locked.
@@ @@
  *   Thrown when given an incomplete field definition (missing name,
  *   target entity type ID, or target bundle).
  * @throws \RuntimeException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function easy_email_create_field(BaseFieldDefinition $field_definition, $lock = TRUE) {
   $field_name = $field_definition->getName();
@@ @@
  * @param string $display_context
  *   The display context ('view' or 'form').
  *
- * @return \Drupal\Core\Entity\Display\EntityDisplayInterface
+ * @return EntityDisplayInterface
  *   The entity display.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function easy_email_get_entity_display($entity_type, $bundle, $display_context) {
   if (!in_array($display_context, ['view', 'form'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 32 files have been changed by Rector                                      

