modules/contrib/entity_information/entity_information.module
modules/contrib/entity_information/src/Annotation/EntityInformation.php
modules/contrib/entity_information/src/Controller/EntityInformationController.php
modules/contrib/entity_information/src/EntityInformationHelperTrait.php
modules/contrib/entity_information/src/EntityInformationManager.php
modules/contrib/entity_information/src/EntityTypeInfo.php
modules/contrib/entity_information/src/Form/SettingsForm.php
modules/contrib/entity_information/src/Plugin/Derivative/EntityInformationLocalTask.php
modules/contrib/entity_information/src/Plugin/EntityInformation/EntityInformationMenuLink.php
modules/contrib/entity_information/src/Plugin/EntityInformation/EntityInformationPathAlias.php
modules/contrib/entity_information/src/Plugin/EntityInformationInterface.php
modules/contrib/entity_information/src/Routing/RouteSubscriber.php
modules/contrib/entity_information/tests/src/Functional/EntityInformationAccessTest.php

12 files with changes
=====================

1) modules/contrib/entity_information/tests/src/Functional/EntityInformationAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_information\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A regular user with 'access content' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * A regular user with 'access content' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user_with_permission;

@@ @@
   /**
    * Test access to the entity information page.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testEntityInformationAccess(): void {
     // Create the user with the right permission.
@@ @@
   /**
    * Test access to the entity information page.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testSettingsAccess(): void {
     // Create the user with the right permission.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_information/src/Routing/RouteSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity information manager service.
    *
-   * @var \Drupal\entity_information\EntityInformationManager
+   * @var EntityInformationManager
    */
   protected $entityInformationManager;

@@ @@
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\entity_information\EntityInformationManager $entity_information_manager
+   * @param EntityInformationManager $entity_information_manager
    *   The entity information manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, EntityInformationManager $entity_information_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_information/src/Plugin/EntityInformationInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a renderable array for the field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The field's host entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_information/src/Plugin/EntityInformation/EntityInformationPathAlias.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_information\Plugin\EntityInformation;

+use Drupal\path_alias\Entity\PathAlias;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
@@ @@
     // Build the table rows.
     $destination = $this->getDestinationArray();
     $rows = [];
-    /** @var \Drupal\path_alias\Entity\PathAlias[] $path_aliases */
+    /** @var PathAlias[] $path_aliases */
     foreach ($path_aliases as $path_alias) {
       $row = [];
       $url = $entity->toUrl('canonical', ['language' => $entity->language()]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_information/src/Plugin/EntityInformation/EntityInformationMenuLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_information\Plugin\EntityInformation;

+use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
+use Drupal\system\Entity\Menu;
 use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Menu\MenuLinkManagerInterface;
@@ @@
   /**
    * The menu link manager service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager
+   * @param MenuLinkManagerInterface $menu_link_manager
    *   The menu link manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MenuLinkManagerInterface $menu_link_manager) {
@@ @@
     // Build the table rows.
     $destination = $this->getDestinationArray();
     $rows = [];
-    /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent[] $menu_link_content_items */
+    /** @var MenuLinkContent[] $menu_link_content_items */
     foreach ($menu_link_content_items as $menu_link_item) {
       $row = [];

@@ @@
       $menu_link_content = reset($menu_link_content_by_uuid);

       // Get the menu entity.
-      /** @var \Drupal\system\Entity\Menu $menu */
+      /** @var Menu $menu */
       $menu = $this->entityTypeManager()->getStorage('menu')->load($menu_link_content->getMenuName());

       // Compile the table row and add some operations.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_information/src/Plugin/Derivative/EntityInformationLocalTask.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity information manager service.
    *
-   * @var \Drupal\entity_information\EntityInformationManager
+   * @var EntityInformationManager
    */
   protected $entityInformationManager;

@@ @@
   /**
    * Creates an EntityInformationLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_information\EntityInformationManager $entity_information_manager
+   * @param EntityInformationManager $entity_information_manager
    *   The entity information manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityInformationManager $entity_information_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_information/src/Form/SettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Entity information manager.
    *
-   * @var \Drupal\entity_information\EntityInformationManager
+   * @var EntityInformationManager
    */
   protected $entityInformationManager;

@@ @@
   /**
    * Constructs an entity information SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\entity_information\EntityInformationManager $entity_information_manager
+   * @param EntityInformationManager $entity_information_manager
    *   Entity information manager.
    */
   public function __construct(ConfigFactory $config_factory, EntityInformationManager $entity_information_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_information/src/EntityTypeInfo.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_information;

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * Manipulates entity type information.
  *
@@ @@
    *
    * This is an alter hook bridge.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The master entity type list to alter.
    *
    * @see hook_entity_type_alter()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/entity_information/src/EntityInformationManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_information;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Get the entity based on the type and ID from the request.
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface|null
+   * @return bool|EntityInterface|null
    *   The entity from the request or NULL.
    */
   public function pluggedEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_information/src/EntityInformationHelperTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Wraps the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The module handler.
    */
   public function entityTypeManager(): EntityTypeManagerInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/entity_information/src/Controller/EntityInformationController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity information manager service.
    *
-   * @var \Drupal\entity_information\EntityInformationManager|null
+   * @var EntityInformationManager|null
    */
   protected $entityInformationManager;

@@ @@
   /**
    * EntityInformationController constructor.
    *
-   * @param \Drupal\entity_information\EntityInformationManager|null $entity_information_manager
+   * @param EntityInformationManager|null $entity_information_manager
    */
   public function __construct(EntityInformationManager $entity_information_manager) {
     $this->entityInformationManager = $entity_information_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_information/src/Annotation/EntityInformation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_information\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 12 files have been changed by Rector                                      

