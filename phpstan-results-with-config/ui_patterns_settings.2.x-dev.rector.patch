diff --git a/src/Annotation/UiPatternsSettingType.php b/src/Annotation/UiPatternsSettingType.php
index 935630a..9253af6 100644
--- a/src/Annotation/UiPatternsSettingType.php
+++ b/src/Annotation/UiPatternsSettingType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class UiPatternsSettingType extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/ConfigManager.php b/src/ConfigManager.php
index 27b6c30..b29f893 100644
--- a/src/ConfigManager.php
+++ b/src/ConfigManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 
 /**
@@ -14,7 +15,7 @@ class ConfigManager {
   /**
    * The config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;
 
@@ -35,7 +36,7 @@ class ConfigManager {
   /**
    * Constructs a new Fast404ExceptionHtmlSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/Element/PatternSettings.php b/src/Element/PatternSettings.php
index 9aafdff..4cb1a56 100644
--- a/src/Element/PatternSettings.php
+++ b/src/Element/PatternSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings\Element;
 
+use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\Core\Template\Attribute;
 use Drupal\ui_patterns\UiPatterns;
@@ -41,7 +42,7 @@ class PatternSettings implements TrustedCallbackInterface {
     $alter_context = [];
     $context = $element['#context'];
     $pattern_id = $element['#id'];
-    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+    /** @var ContentEntityBase $entity */
     $entity = $context->getProperty('entity');
     if ($context->getType() === 'layout' && $entity !== NULL) {
       $mappings = UiPatternsSettings::getConfigManager()->findVariantMappings($entity->getEntityTypeId());
diff --git a/src/Form/SettingsFormBuilder.php b/src/Form/SettingsFormBuilder.php
index a01dd3d..4186d87 100644
--- a/src/Form/SettingsFormBuilder.php
+++ b/src/Form/SettingsFormBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings\Form;
 
+use Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Render\Element\Form;
@@ -32,7 +33,7 @@ class SettingsFormBuilder {
     $request = \Drupal::request();
     $entity_type_id = $request->attributes->get('entity_type_id');
     if (empty($entity_type_id)) {
-      /** @var \Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage $section_storage */
+      /** @var DefaultsSectionStorage $section_storage */
       $section_storage = $request->attributes->get('section_storage');
       if ($section_storage !== NULL) {
         $entity_type_id = explode('.', $section_storage->getStorageId())[0];
@@ -70,7 +71,7 @@ class SettingsFormBuilder {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param array $configuration
    *   The pattern configuration.
@@ -188,7 +189,7 @@ class SettingsFormBuilder {
    *   The id of the variant select field.
    * @param array $fieldset
    *   The fieldset.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    */
   private static function buildVariantsForm($select_selector, array &$fieldset, PatternDefinition $definition) {
diff --git a/src/Plugin/EnumerationSettingTypeBase.php b/src/Plugin/EnumerationSettingTypeBase.php
index 4d47476..2852499 100644
--- a/src/Plugin/EnumerationSettingTypeBase.php
+++ b/src/Plugin/EnumerationSettingTypeBase.php
@@ -23,7 +23,7 @@ abstract class EnumerationSettingTypeBase extends PatternSettingTypeBase {
   /**
    * Returns the enumeration type.
    *
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition setting.
    *
    * @return string
@@ -50,7 +50,7 @@ abstract class EnumerationSettingTypeBase extends PatternSettingTypeBase {
   /**
    * Returns the enumeration options.
    *
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *  The pattern definition.
    *
    * @return mixed
diff --git a/src/Plugin/LanguageCheckboxesSettingTypeBase.php b/src/Plugin/LanguageCheckboxesSettingTypeBase.php
index 9e947a3..724b806 100644
--- a/src/Plugin/LanguageCheckboxesSettingTypeBase.php
+++ b/src/Plugin/LanguageCheckboxesSettingTypeBase.php
@@ -26,7 +26,7 @@ class LanguageCheckboxesSettingTypeBase extends EnumerationSettingTypeBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected LanguageManagerInterface $languageManager;
 
diff --git a/src/Plugin/PatternSettingTypeBase.php b/src/Plugin/PatternSettingTypeBase.php
index 301544f..a0b7460 100644
--- a/src/Plugin/PatternSettingTypeBase.php
+++ b/src/Plugin/PatternSettingTypeBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ui_patterns_settings\Plugin;
 
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\ui_patterns\Definition\PatternDefinition;
+use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -34,35 +37,35 @@ abstract class PatternSettingTypeBase extends PluginBase implements
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\ui_patterns\Definition\PatternDefinition
+   * @var PatternDefinition
    */
   private $patternDefinition;
 
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @var PatternDefinitionSetting
    */
   private $patternSettingDefinition;
 
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -107,7 +110,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements
   /**
    * Return pattern setting definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @return PatternDefinitionSetting
    *   Pattern setting definition.
    */
   protected function getPatternSettingDefinition() {
@@ -130,7 +133,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements
       $container->get('module_handler'),
       $container->get('entity_type.manager')
     );
-    /** @var \Drupal\Core\StringTranslation\TranslationInterface $translation */
+    /** @var TranslationInterface $translation */
     $translation = $container->get('string_translation');
 
     $plugin->setStringTranslation($translation);
@@ -235,7 +238,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements
    *   The form definition array for the settings configuration form.
    * @param string $value
    *   The stored default value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return array
@@ -266,7 +269,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements
    *
    * @param array $element
    *   The element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The form.
@@ -316,7 +319,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements
    *
    * @param array $input
    *   The input field.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    * @param string $form_type
    *   The form type. Either layouts_display or display.
@@ -396,7 +399,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements
    *
    * @param array $element
    *   The form field.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The pattern definition.
    * @param mixed $form
    *   The form.
diff --git a/src/Plugin/PatternSettingTypeInterface.php b/src/Plugin/PatternSettingTypeInterface.php
index 49bf7c3..9472b65 100644
--- a/src/Plugin/PatternSettingTypeInterface.php
+++ b/src/Plugin/PatternSettingTypeInterface.php
@@ -19,7 +19,7 @@ interface PatternSettingTypeInterface extends ConfigurableInterface {
    *   The form definition array for the settings configuration form.
    * @param string $value
    *   The stored default value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    * @param string $form_type
    *   The form type. Either layout or layouts_display or display.
@@ -38,7 +38,7 @@ interface PatternSettingTypeInterface extends ConfigurableInterface {
    *   Context informations.
    *   Keys:
    *    - entity.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return string
@@ -62,7 +62,7 @@ interface PatternSettingTypeInterface extends ConfigurableInterface {
   /**
    * Returns the processed setting variable for an exposed field.
    *
-   * @param \Drupal\Core\Field\FieldItemList $field
+   * @param FieldItemList $field
    *   The stored value.
    *
    * @return mixed
@@ -87,7 +87,7 @@ interface PatternSettingTypeInterface extends ConfigurableInterface {
   /**
    * Alter the storage of a connected field storage.
    *
-   * @param \Drupal\field\Entity\FieldStorageConfig $storage_config
+   * @param FieldStorageConfig $storage_config
    *   The storage type.
    */
   public function alterFieldStorage(FieldStorageConfig $storage_config);
@@ -105,7 +105,7 @@ interface PatternSettingTypeInterface extends ConfigurableInterface {
    *
    * @param string $value
    *   The value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    * @param array $element
    *   The render element.
diff --git a/src/Plugin/TokenSettingTypeBase.php b/src/Plugin/TokenSettingTypeBase.php
index 3412078..28ad299 100644
--- a/src/Plugin/TokenSettingTypeBase.php
+++ b/src/Plugin/TokenSettingTypeBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings\Plugin;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Utility\Token;
 use Drupal\Core\Entity\EntityMalformedException;
@@ -16,7 +17,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;
 
@@ -65,7 +66,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
 
     if (is_string($value)) {
       $token_data = [];
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = isset($context['entity']) ? $context['entity'] : NULL;
       if ($entity !== NULL) {
         $token_data[$entity->getEntityTypeId()] = $entity;
@@ -87,7 +88,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
   /**
    * Sets the token service.
    *
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
    *
    * @return self
@@ -101,7 +102,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
   /**
    * Gets the token service.
    *
-   * @return \Drupal\Core\Utility\Token
+   * @return Token
    *   The token service.
    */
   public function getTokenService() {
diff --git a/src/UiPatternsSettings.php b/src/UiPatternsSettings.php
index f2b25a8..a2785e3 100644
--- a/src/UiPatternsSettings.php
+++ b/src/UiPatternsSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings;
 
+use Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\ui_patterns\Definition\PatternDefinition;
@@ -19,14 +20,14 @@ class UiPatternsSettings {
   /**
    * Cached pattern definition settings.
    *
-   * @var \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting[]
+   * @var PatternDefinitionSetting[]
    */
   private static $settings;
 
   /**
    * Get pattern manager setting instance.
    *
-   * @return \Drupal\ui_patterns_settings\UiPatternsSettingsManager
+   * @return UiPatternsSettingsManager
    *   UI Patterns setting manager instance.
    */
   public static function getManager() {
@@ -36,7 +37,7 @@ class UiPatternsSettings {
   /**
    * Get config manager instance.
    *
-   * @return \Drupal\ui_patterns_settings\ConfigManager
+   * @return ConfigManager
    *   UI Patterns setting config manager.
    */
   public static function getConfigManager() {
@@ -46,9 +47,9 @@ class UiPatternsSettings {
   /**
    * Preprocess exposed settings variables.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    *
    * @return array
@@ -84,7 +85,7 @@ class UiPatternsSettings {
    *   The variant.
    * @param bool $preview
    *   Is preview.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity of the pattern. Useful for dynamic settings.
    *
    * @return array
@@ -167,7 +168,7 @@ class UiPatternsSettings {
    * Returns a list of all exposed pattern setting definitions
    * filtered by the provided field storage type.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param string $field_storage_type
    *   The field storage type.
@@ -210,7 +211,7 @@ class UiPatternsSettings {
   /**
    * Get pattern configuration for a pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The definition.
    * @param string $variant
    *   The pattern variant.
@@ -241,7 +242,7 @@ class UiPatternsSettings {
   /**
    * Get setting definition for a pattern and a setting name.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param string $setting_name
    *   The setting name.
@@ -254,10 +255,10 @@ class UiPatternsSettings {
   /**
    * Get setting definitions for a pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting[]
+   * @return PatternDefinitionSetting[]
    *   Setting pattern definitons.
    */
   public static function getPatternDefinitionSettings(PatternDefinition $definition) {
@@ -279,12 +280,12 @@ class UiPatternsSettings {
   /**
    * Create setting type plugin.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $pattern_definition
+   * @param PatternDefinition $pattern_definition
    *   The pattern definition.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $setting_defintion
+   * @param PatternDefinitionSetting $setting_defintion
    *   The setting definition.
    *
-   * @return \Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface
+   * @return PatternSettingTypeInterface
    *   UI Patterns setting manager instance.
    */
   public static function createSettingType(PatternDefinition $pattern_definition, PatternDefinitionSetting $setting_defintion) {
diff --git a/src/UiPatternsSettingsManager.php b/src/UiPatternsSettingsManager.php
index 73f131d..ef7daa1 100644
--- a/src/UiPatternsSettingsManager.php
+++ b/src/UiPatternsSettingsManager.php
@@ -30,7 +30,7 @@ class UiPatternsSettingsManager extends DefaultPluginManager implements PluginMa
   /**
    * Returns TRUE if a variant token can configured.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $pattern_definition
+   * @param PatternDefinition $pattern_definition
    *   The pattern definition.
    *
    * @return bool
diff --git a/tests/src/Functional/UiPatternsSettingsRenderTest.php b/tests/src/Functional/UiPatternsSettingsRenderTest.php
index de83dde..f0322d0 100644
--- a/tests/src/Functional/UiPatternsSettingsRenderTest.php
+++ b/tests/src/Functional/UiPatternsSettingsRenderTest.php
@@ -95,14 +95,16 @@ class UiPatternsSettingsRenderTest extends BrowserTestBase {
     $edit = [
       'ds_layout' => 'pattern_foo_settings',
     ];
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');
 
     // Fill settings.
     $edit = [];
     foreach ($mappings as $key => $mapping) {
       $edit['layout_configuration[pattern][settings]' . $key] = $mapping['input'];
     }
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');
 
     // Check values.
     $this->drupalGet('/node/' . $created_node->id());
diff --git a/ui_patterns_settings.module b/ui_patterns_settings.module
index 892238c..7f2a14f 100644
--- a/ui_patterns_settings.module
+++ b/ui_patterns_settings.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\media_library\MediaLibraryUiBuilder;
+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Contains ui_patterns_settings.module.
@@ -33,7 +35,7 @@ function ui_patterns_settings_build_media_edit_button($media_id) {
     'media_library_edit_entity_id' => $media_id,
   ];
   $edit_url = Url::fromUserInput(str_replace('{media}', $media_id, $edit_template) . '?' . UrlHelper::buildQuery($edit_url_query_params));
-  $dialog_options = \Drupal\media_library\MediaLibraryUiBuilder::dialogOptions();
+  $dialog_options = MediaLibraryUiBuilder::dialogOptions();
   return [
     '#type' => 'link',
     '#title' => '',
@@ -85,7 +87,7 @@ function ui_patterns_settings_preprocess_media_library_element(&$variables) {
  * Implements hook_form_field_storage_config_edit_form_alter().
  */
 function ui_patterns_settings_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
+  /** @var FieldStorageConfig $entity */
   $entity = $form_state->getFormObject()->getEntity();
   array_unshift($form['actions']['submit']['#submit'], 'ui_patterns_settings_form_field_storage_config_edit_form_submit');
 
@@ -125,7 +127,7 @@ function ui_patterns_settings_form_field_storage_config_edit_form_alter(&$form,
  */
 function ui_patterns_settings_form_field_storage_config_edit_form_submit(array $form, FormStateInterface $form_state) {
   $settings = $form_state->getValue('settings');
-  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
+  /** @var FieldStorageConfig $entity */
   $entity = $form_state->getFormObject()->getEntity();
 
   if (isset($settings['use_pattern']) && $settings['use_pattern'] === 1) {
@@ -141,7 +143,7 @@ function ui_patterns_settings_form_field_storage_config_edit_form_submit(array $
  * Implements hook_entity_field_storage_info_alter().
  */
 function ui_patterns_settings_entity_field_storage_info_alter(&$fields, EntityTypeInterface $entity_type) {
-  /** @var \Drupal\field\Entity\FieldStorageConfig $field */
+  /** @var FieldStorageConfig $field */
   foreach ($fields as $field) {
     if ($field instanceof FieldStorageConfig) {
       if (($mapping = UiPatternsSettings::getConfigManager()
@@ -176,7 +178,7 @@ function ui_patterns_settings_entity_field_storage_info_alter(&$fields, EntityTy
 /**
  * The storage config.
  *
- * @param \Drupal\field\Entity\FieldStorageConfig $storage_config
+ * @param FieldStorageConfig $storage_config
  *   The field storage config.
  *
  * @return string[]
@@ -303,7 +305,7 @@ function ui_patterns_settings_is_layout_builder_route() {
  * Implements hook_layout_alter().
  */
 function ui_patterns_settings_layout_alter(&$definitions) {
-  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
+  /** @var LayoutDefinition $definition */
   foreach ($definitions as $definition) {
     if ($definition->getClass() == '\Drupal\ui_patterns_layouts\Plugin\Layout\PatternLayout') {
       $definition->setClass(PatternSettingsLayout::class);
