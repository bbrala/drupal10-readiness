modules/contrib/fivestar/fivestar.api.php
modules/contrib/fivestar/fivestar.install
modules/contrib/fivestar/fivestar.module
modules/contrib/fivestar/includes/fivestar.theme.inc
modules/contrib/fivestar/src/Element/Fivestar.php
modules/contrib/fivestar/src/Form/FivestarForm.php
modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/FivestarFormatterBase.php
modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/PercentageFormatter.php
modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/RatingFormatter.php
modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/StarsFormatter.php
modules/contrib/fivestar/src/Plugin/Field/FieldType/FivestarItem.php
modules/contrib/fivestar/src/Plugin/Field/FieldWidget/FivestarWidgetBase.php
modules/contrib/fivestar/src/Plugin/Field/FieldWidget/SelectWidget.php
modules/contrib/fivestar/src/Plugin/Field/FieldWidget/StarsWidget.php
modules/contrib/fivestar/src/VoteManager.php
modules/contrib/fivestar/src/VoteResultManager.php
modules/contrib/fivestar/src/WidgetManager.php
modules/contrib/fivestar/tests/modules/fivestar_widget_provider/fivestar_widget_provider.module
modules/contrib/fivestar/tests/src/Functional/FivestarTest.php
modules/contrib/fivestar/tests/src/FunctionalJavascript/FivestarAjaxTestBase.php
modules/contrib/fivestar/tests/src/Kernel/HookFivestarWidgetsAlterTest.php
modules/contrib/fivestar/tests/src/Kernel/HookFivestarWidgetsTest.php
modules/contrib/fivestar/tests/src/Traits/FivestarTestTrait.php

15 files with changes
=====================

1) modules/contrib/fivestar/tests/src/Kernel/HookFivestarWidgetsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fivestar\Kernel;

+use Drupal\fivestar\WidgetManager;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The Fivestar widget manager.
    *
-   * @var \Drupal\fivestar\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->widgetManager = $this->container->get('fivestar.widget_manager');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fivestar/tests/src/Kernel/HookFivestarWidgetsAlterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fivestar\Kernel;

+use Drupal\fivestar\WidgetManager;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The Fivestar widget manager.
    *
-   * @var \Drupal\fivestar\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->widgetManager = $this->container->get('fivestar.widget_manager');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/fivestar/tests/src/FunctionalJavascript/FivestarAjaxTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fivestar\FunctionalJavascript;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\fivestar\Traits\FivestarTestTrait;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $displayRepository;

@@ @@
   /**
    * A user with permission to administer Fivestar.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A user with permission to vote.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $voterUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create content type for testing.
@@ @@
       'name' => 'Rated content type',
     ]);

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $displayRepository */
+    /** @var EntityDisplayRepositoryInterface $displayRepository */
     $this->displayRepository = \Drupal::service('entity_display.repository');

     // Create users with different permissions.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fivestar/tests/src/Functional/FivestarTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fivestar\Functional;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Tests\fivestar\Traits\FivestarTestTrait;
@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $displayRepository;

@@ @@
   /**
    * A user with permission to administer Fivestar.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A user with permission to vote.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $voterUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create content type for testing.
@@ @@
       'name' => 'Rated content type',
     ]);

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $displayRepository */
+    /** @var EntityDisplayRepositoryInterface $displayRepository */
     $this->displayRepository = \Drupal::service('entity_display.repository');

     // Create users with different permissions.
@@ @@
     // Rate the test_node_type.
     $this->drupalLogin($this->voterUser);
     $this->drupalGet('node/' . $node->id());
-    $this->assertRaw('No votes yet', 'Fivestar field has no votes.');
+    $this->assertSession()->responseContains('No votes yet');
     $this->assertEmpty($this->xpath("//form[contains(@class, 'fivestar-widget')]"));

     // Check if node with attached fivestar field can be save.
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/fivestar/src/WidgetManager.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new VoteManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/fivestar/src/VoteResultManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The vote result manager.
    *
-   * @var \Drupal\votingapi\VoteResultFunctionManager
+   * @var VoteResultFunctionManager
    */
   protected $voteResultManager;

@@ @@
   /**
    * Constructs a new VoteResultManager object.
    *
-   * @param \Drupal\votingapi\VoteResultFunctionManager $vote_result_manager
+   * @param VoteResultFunctionManager $vote_result_manager
    *   The vote result manager.
    */
   public function __construct(VoteResultFunctionManager $vote_result_manager) {
@@ @@
   /**
    * Get votes for passed entity based on vote type.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    * @param string $vote_type
    *
    * @return array
@@ @@
   /**
    * Get all votes results for passed entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *
    * @return array
    */
@@ @@
   /**
    * Recalculate votes results.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    */
   public function recalculateResults(FieldableEntityInterface $entity) {
     $this->voteResultManager->recalculateResults(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/fivestar/src/VoteManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fivestar;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\votingapi\Entity\Vote;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The vote storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $voteStorage;

@@ @@
   /**
    * Constructs a new VoteManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user) {
@@ @@
   /**
    * Add vote.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    * @param int $rating
    * @param string $vote_type
    * @param int|null $uid
    *
-   * @return \Drupal\votingapi\Entity\Vote
+   * @return Vote
    */
   public function addVote(FieldableEntityInterface $entity, $rating, $vote_type = 'vote', $uid = NULL) {
     $uid = is_numeric($uid) ? $uid : $this->currentUser->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/fivestar/src/Plugin/Field/FieldWidget/FivestarWidgetBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Fivestar widget manager.
    *
-   * @var \Drupal\fivestar\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin ID for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\fivestar\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   The widget manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, WidgetManager $widget_manager, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/fivestar/src/Plugin/Field/FieldType/FivestarItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fivestar\Plugin\Field\FieldType;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * Get target entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    * @param array $field_settings
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface|null
+   * @return FieldableEntityInterface|null
    */
   public function getTargetEntity(FieldableEntityInterface $entity, array $field_settings) {
     if ($field_settings['enable_voting_target'] !== TRUE) {
@@ @@
    * current user. For "Rating mode editing" mode - if entity have method
    * "getOwner" use entity owner, otherwise the current user has to be used.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity from which try to get owner.
    * @param string $rating_mode
    *   Determines under what conditions a user can leave a review.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The account of the vote owner.
    */
   protected function getVoteOwner(FieldableEntityInterface $entity, $rating_mode) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/StarsFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fivestar\Plugin\Field\FieldFormatter;

+use Drupal\fivestar\Plugin\Field\FieldType\FivestarItem;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
@@ @@
     ] + $this->getSettings();

     if (!$items->isEmpty()) {
-      /** @var \Drupal\fivestar\Plugin\Field\FieldType\FivestarItem $item */
+      /** @var FivestarItem $item */
       foreach ($items as $delta => $item) {
         $context = [
           'entity' => $entity,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/RatingFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fivestar\Plugin\Field\FieldFormatter;

+use Drupal\fivestar\Plugin\Field\FieldType\FivestarItem;
 use Drupal\Core\Field\FieldItemListInterface;

 /**
@@ @@

     $elements = [];
     if (!$items->isEmpty()) {
-      /** @var \Drupal\fivestar\Plugin\Field\FieldType\FivestarItem $item */
+      /** @var FivestarItem $item */
       foreach ($items as $delta => $item) {
         $value = $item->getValue();
         $rating[] = $value['rating'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/PercentageFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fivestar\Plugin\Field\FieldFormatter;

+use Drupal\fivestar\Plugin\Field\FieldType\FivestarItem;
 use Drupal\Core\Field\FieldItemListInterface;

 /**
@@ @@

     $elements = [];
     if (!$items->isEmpty()) {
-      /** @var \Drupal\fivestar\Plugin\Field\FieldType\FivestarItem $item */
+      /** @var FivestarItem $item */
       foreach ($items as $delta => $item) {
         $value = $item->getValue();
         $rating[] = $value['rating'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/fivestar/src/Plugin/Field/FieldFormatter/FivestarFormatterBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The widget manager.
    *
-   * @var \Drupal\fivestar\WidgetManager
+   * @var WidgetManager
    */
   protected $widgetManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\fivestar\WidgetManager $widget_manager
+   * @param WidgetManager $widget_manager
    *   The widget manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, WidgetManager $widget_manager, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/fivestar/src/Form/FivestarForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The fivestar.vote_result_manager service.
    *
-   * @var \Drupal\fivestar\VoteResultManager
+   * @var VoteResultManager
    */
   protected $resultManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/fivestar/fivestar.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * A simple n-star voting widget, usable in other forms.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function fivestar_form_field_ui_field_edit_form_alter(&$form, $form_state) {
-  /** @var Drupal\field\FieldStorageConfigInterface $field */
+  /** @var FieldStorageConfigInterface $field */
   $field = $form['#field'];
   if ($field->getType() == 'fivestar') {
     // Multiple values is not supported with Fivestar.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

