diff --git a/mass_password_change.info.yml b/mass_password_change.info.yml
index 50dd22d..b57d088 100644
--- a/mass_password_change.info.yml
+++ b/mass_password_change.info.yml
@@ -1,8 +1,7 @@
 name: 'Mass Password Change'
 description: 'Massive password change or reset.'
 
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 type: module
 
 dependencies:
diff --git a/src/Form/MassPasswordChangeConfirm.php b/src/Form/MassPasswordChangeConfirm.php
index d7fd2a2..558ee8c 100644
--- a/src/Form/MassPasswordChangeConfirm.php
+++ b/src/Form/MassPasswordChangeConfirm.php
@@ -17,23 +17,23 @@ class MassPasswordChangeConfirm extends ConfirmFormBase {
   /**
    * The temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * Constructs a new MassPasswordChangeConfirm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store factory.
-   * @param \Drupal\user\UserStorageInterface $userStorage
+   * @param UserStorageInterface $userStorage
    *   The user storage.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, UserStorageInterface $userStorage) {
diff --git a/src/Form/MassPasswordResetConfirm.php b/src/Form/MassPasswordResetConfirm.php
index d68645b..a333823 100644
--- a/src/Form/MassPasswordResetConfirm.php
+++ b/src/Form/MassPasswordResetConfirm.php
@@ -17,23 +17,23 @@ class MassPasswordResetConfirm extends ConfirmFormBase {
   /**
    * The temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * Constructs a new MassPasswordResetConfirm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store factory.
-   * @param \Drupal\user\UserStorageInterface $userStorage
+   * @param UserStorageInterface $userStorage
    *   The user storage.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, UserStorageInterface $userStorage) {
diff --git a/src/Plugin/Action/MassPasswordChange.php b/src/Plugin/Action/MassPasswordChange.php
index 7b2227d..373a4cb 100644
--- a/src/Plugin/Action/MassPasswordChange.php
+++ b/src/Plugin/Action/MassPasswordChange.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mass_password_change\Plugin\Action;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -23,7 +24,7 @@ class MassPasswordChange extends ActionBase implements ContainerFactoryPluginInt
   /**
    * Private TempStore Factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
@@ -36,7 +37,7 @@ class MassPasswordChange extends ActionBase implements ContainerFactoryPluginInt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   Private TempStore Factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $tempStoreFactory) {
@@ -60,7 +61,7 @@ class MassPasswordChange extends ActionBase implements ContainerFactoryPluginInt
    * {@inheritdoc}
    */
   public function access($user, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     // Prevent uid=1 user or disallow current user.
     return ($user->id() != 1) && ($user->id() != $account->id());
   }
@@ -69,7 +70,7 @@ class MassPasswordChange extends ActionBase implements ContainerFactoryPluginInt
    * {@inheritdoc}
    */
   public function executeMultiple(array $accounts) {
-    /** @var \Drupal\user\UserInterface[] $accounts */
+    /** @var UserInterface[] $accounts */
     $this->tempStoreFactory->get('mass_password_change')->set('password_change', $accounts);
   }
 
@@ -77,7 +78,7 @@ class MassPasswordChange extends ActionBase implements ContainerFactoryPluginInt
    * {@inheritdoc}
    */
   public function execute($account = NULL) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $this->executeMultiple([$account]);
   }
 
diff --git a/src/Plugin/Action/MassPasswordReset.php b/src/Plugin/Action/MassPasswordReset.php
index 3867aff..d5ec46f 100644
--- a/src/Plugin/Action/MassPasswordReset.php
+++ b/src/Plugin/Action/MassPasswordReset.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mass_password_change\Plugin\Action;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -23,7 +24,7 @@ class MassPasswordReset extends ActionBase implements ContainerFactoryPluginInte
   /**
    * Private TempStore Factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
@@ -36,7 +37,7 @@ class MassPasswordReset extends ActionBase implements ContainerFactoryPluginInte
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   Private TempStore Factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $tempStoreFactory) {
@@ -60,7 +61,7 @@ class MassPasswordReset extends ActionBase implements ContainerFactoryPluginInte
    * {@inheritdoc}
    */
   public function access($user, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     // Prevent uid=1 user or disallow current user, blocked user.
     return ($user->id() != 1) && ($user->id() != $account->id()) && !$user->isBlocked();
   }
@@ -69,7 +70,7 @@ class MassPasswordReset extends ActionBase implements ContainerFactoryPluginInte
    * {@inheritdoc}
    */
   public function executeMultiple(array $accounts) {
-    /** @var \Drupal\user\UserInterface[] $accounts */
+    /** @var UserInterface[] $accounts */
     $this->tempStoreFactory->get('mass_password_change')->set('password_reset', $accounts);
   }
 
@@ -77,7 +78,7 @@ class MassPasswordReset extends ActionBase implements ContainerFactoryPluginInte
    * {@inheritdoc}
    */
   public function execute($account = NULL) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $this->executeMultiple([$account]);
   }
 
diff --git a/tests/src/Functional/MassPasswordChange.php b/tests/src/Functional/MassPasswordChange.php
index 7f82b4a..bdb4758 100644
--- a/tests/src/Functional/MassPasswordChange.php
+++ b/tests/src/Functional/MassPasswordChange.php
@@ -19,8 +19,11 @@ class MassPasswordChange extends MassPasswordTestBase {
       'action' => 'mass_password_change_action',
       "user_bulk_form[$admin_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText('No access to execute Change password the selected user(s) on the User admin.');
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No access to execute Change password the selected user(s) on the User admin.');
   }
 
   /**
@@ -33,8 +36,11 @@ class MassPasswordChange extends MassPasswordTestBase {
       'action' => 'mass_password_change_action',
       "user_bulk_form[$current_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Change password the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Change password the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
   }
 
   /**
@@ -51,12 +57,18 @@ class MassPasswordChange extends MassPasswordTestBase {
       $weight = $this->getUserWeightFromAccountsArray($this->accounts, $uid);
       $edit["user_bulk_form[$weight]"] = TRUE;
     }
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');
     // Check confirmation text.
-    $this->assertText('Are you sure you want to change password these user accounts?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Are you sure you want to change password these user accounts?');
     // Check user names.
     foreach ($accounts as $account) {
-      $this->assertText($account->getAccountName());
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
     // Generate new password and submit confirmation form.
     $new_password = $this->randomString();
@@ -64,7 +76,7 @@ class MassPasswordChange extends MassPasswordTestBase {
       'password[pass1]' => $new_password,
       'password[pass2]' => $new_password,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Change password');
+    $this->submitForm($edit, 'Change password');
     // Check new passwords.
     foreach ($accounts as $account) {
       $this->drupalLogout();
@@ -73,9 +85,12 @@ class MassPasswordChange extends MassPasswordTestBase {
         'name' => $account->getAccountName(),
         'pass' => $new_password,
       ];
-      $this->drupalPostForm(NULL, $edit, 'Log in');
-      $this->assertUrl('/user/' . $account->id());
-      $this->assertText($account->getAccountName());
+      $this->submitForm($edit, 'Log in');
+      $this->assertSession()->addressEquals('/user/' . $account->id());
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
   }
 
diff --git a/tests/src/Functional/MassPasswordReset.php b/tests/src/Functional/MassPasswordReset.php
index 9c3c488..862e2fc 100644
--- a/tests/src/Functional/MassPasswordReset.php
+++ b/tests/src/Functional/MassPasswordReset.php
@@ -25,8 +25,11 @@ class MassPasswordReset extends MassPasswordTestBase {
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$admin_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText('No access to execute Password reset the selected user(s) on the User admin.');
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No access to execute Password reset the selected user(s) on the User admin.');
   }
 
   /**
@@ -39,8 +42,11 @@ class MassPasswordReset extends MassPasswordTestBase {
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$current_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
   }
 
   /**
@@ -57,14 +63,20 @@ class MassPasswordReset extends MassPasswordTestBase {
       $weight = $this->getUserWeightFromAccountsArray($this->accounts, $uid);
       $edit["user_bulk_form[$weight]"] = TRUE;
     }
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');
     // Check confirmation text.
-    $this->assertText('Are you sure you want to reset password these user accounts?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Are you sure you want to reset password these user accounts?');
     // Check user names.
     foreach ($accounts as $account) {
-      $this->assertText($account->getAccountName());
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
-    $this->drupalPostForm(NULL, [], 'Password reset');
+    $this->submitForm([], 'Password reset');
     // Check password reset urls from email.
     $emails = $this->drupalGetMails();
     $reset_urls = [];
@@ -90,8 +102,11 @@ class MassPasswordReset extends MassPasswordTestBase {
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $blocked_account->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $blocked_account->getAccountName()));
   }
 
   /**
diff --git a/tests/src/Functional/MassPasswordTestBase.php b/tests/src/Functional/MassPasswordTestBase.php
index f5eff33..f421cba 100644
--- a/tests/src/Functional/MassPasswordTestBase.php
+++ b/tests/src/Functional/MassPasswordTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\mass_password_change\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -19,21 +20,21 @@ class MassPasswordTestBase extends BrowserTestBase {
   /**
    * The user for the test.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * Array with generated accounts.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $accounts;
 
   /**
    * Set up a privileged user.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create roles.
     $roles = [];
@@ -65,14 +66,14 @@ class MassPasswordTestBase extends BrowserTestBase {
   /**
    * Get User objects from current Accounts (/admin/people) page.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   Accounts array.
    */
   public function getUserObjectsFromAccountsPage() {
     $accounts = [];
     $domElements = $this->getSession()->getPage()->findAll('css', '.views-field-name a.username');
     foreach ($domElements as $domElement) {
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = user_load_by_name($domElement->getText());
       $accounts[$account->id()] = $account;
     }
@@ -82,7 +83,7 @@ class MassPasswordTestBase extends BrowserTestBase {
   /**
    * Get weight from accounts array.
    *
-   * @param \Drupal\user\UserInterface[] $accounts
+   * @param UserInterface[] $accounts
    *   User objects.
    * @param int $uid
    *   Searched user Id.
