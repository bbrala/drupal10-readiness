modules/contrib/synonyms/modules/synonyms_autocomplete/src/Controller/EntityAutocomplete.php
modules/contrib/synonyms/modules/synonyms_autocomplete/src/Element/SynonymsEntityAutocomplete.php
modules/contrib/synonyms/modules/synonyms_autocomplete/src/Form/SettingsForm.php
modules/contrib/synonyms/modules/synonyms_autocomplete/src/Plugin/Field/FieldWidget/EntityReferenceSynonymsAutocomplete.php
modules/contrib/synonyms/modules/synonyms_autocomplete/src/SynonymsService/Behavior/AutocompleteService.php
modules/contrib/synonyms/modules/synonyms_autocomplete/tests/src/Functional/AdminFunctionalityTest.php
modules/contrib/synonyms/modules/synonyms_list_field/src/Field/SynonymsFieldItemList.php
modules/contrib/synonyms/modules/synonyms_list_field/src/Form/SettingsForm.php
modules/contrib/synonyms/modules/synonyms_list_field/synonyms_list_field.module
modules/contrib/synonyms/modules/synonyms_list_field/tests/src/Functional/AdminFunctionalityTest.php
modules/contrib/synonyms/modules/synonyms_search/src/SynonymsService/Behavior/SearchService.php
modules/contrib/synonyms/modules/synonyms_search/synonyms_search.module
modules/contrib/synonyms/modules/synonyms_search/tests/src/Functional/AdminFunctionalityTest.php
modules/contrib/synonyms/modules/synonyms_select/src/Element/SynonymsEntitySelect.php
modules/contrib/synonyms/modules/synonyms_select/src/Form/SettingsForm.php
modules/contrib/synonyms/modules/synonyms_select/src/Plugin/Field/FieldWidget/EntityReferenceSynonymsSelect.php
modules/contrib/synonyms/modules/synonyms_select/src/SynonymsService/Behavior/SelectService.php
modules/contrib/synonyms/modules/synonyms_select/tests/src/Functional/AdminFunctionalityTest.php
modules/contrib/synonyms/modules/synonyms_views_argument_validator/src/Plugin/Derivative/ViewsSynonymsEntityArgumentValidator.php
modules/contrib/synonyms/modules/synonyms_views_argument_validator/src/Plugin/views/argument_validator/SynonymsEntity.php
modules/contrib/synonyms/modules/synonyms_views_field/synonyms_views_field.module
modules/contrib/synonyms/modules/synonyms_views_filter/src/Plugin/views/filter/SynonymsEntity.php
modules/contrib/synonyms/modules/synonyms_views_filter/synonyms_views_filter.module
modules/contrib/synonyms/src/Annotation/Provider.php
modules/contrib/synonyms/src/BehaviorInterface/BehaviorInterface.php
modules/contrib/synonyms/src/BehaviorInterface/WidgetInterface.php
modules/contrib/synonyms/src/Controller/SynonymConfigController.php
modules/contrib/synonyms/src/Entity/Synonym.php
modules/contrib/synonyms/src/Form/BehaviorForm.php
modules/contrib/synonyms/src/Form/SettingsForm.php
modules/contrib/synonyms/src/Form/SynonymDeleteForm.php
modules/contrib/synonyms/src/Form/SynonymForm.php
modules/contrib/synonyms/src/ParamConverter/EntityTypeParamConverter.php
modules/contrib/synonyms/src/Plugin/Derivative/EntityReferenceField.php
modules/contrib/synonyms/src/Plugin/Derivative/Field.php
modules/contrib/synonyms/src/Plugin/Synonyms/Provider/AbstractProvider.php
modules/contrib/synonyms/src/Plugin/Synonyms/Provider/BaseField.php
modules/contrib/synonyms/src/Plugin/Synonyms/Provider/EntityReferenceField.php
modules/contrib/synonyms/src/Plugin/Synonyms/Provider/Field.php
modules/contrib/synonyms/src/ProviderInterface/ConfigurationInterface.php
modules/contrib/synonyms/src/ProviderInterface/ConfigurationTrait.php
modules/contrib/synonyms/src/ProviderInterface/FindInterface.php
modules/contrib/synonyms/src/ProviderInterface/FindTrait.php
modules/contrib/synonyms/src/ProviderInterface/FormatWordingInterface.php
modules/contrib/synonyms/src/ProviderInterface/FormatWordingTrait.php
modules/contrib/synonyms/src/ProviderInterface/GetInterface.php
modules/contrib/synonyms/src/ProviderInterface/GetTrait.php
modules/contrib/synonyms/src/ProviderInterface/ProviderInterface.php
modules/contrib/synonyms/src/ProviderPluginCollection.php
modules/contrib/synonyms/src/ProviderPluginManager.php
modules/contrib/synonyms/src/SynonymInterface.php
modules/contrib/synonyms/src/SynonymsService/BehaviorService.php
modules/contrib/synonyms/src/SynonymsService/FieldTypeToSynonyms.php
modules/contrib/synonyms/src/SynonymsService/ProviderService.php
modules/contrib/synonyms/synonyms.api.php
modules/contrib/synonyms/synonyms.install
modules/contrib/synonyms/synonyms.module
modules/contrib/synonyms/tests/src/Functional/AdminFunctionalityTest.php

29 files with changes
=====================

1) modules/contrib/synonyms/src/SynonymsService/ProviderService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms\SynonymsService;

+use Drupal\synonyms\Entity\Synonym;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Retrieve a list of entity synonyms.
    *
-   * @param Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity for which to conduct the search.
    *
    * @return string[]
@@ @@
    *   Single bundle or an array of them for which to conduct the search. If
    *   null is given, then no restrictions are applied on bundle level.
    *
-   * @return \Drupal\synonyms\Entity\Synonym[]
+   * @return Synonym[]
    *   The array of enabled synonym providers
    */
   public function getSynonymConfigEntities($entity_type, $bundle) {
@@ @@
   /**
    * Lookup entity IDs by the $condition.
    *
-   * @param \Drupal\Core\Database\Query\Condition $condition
+   * @param Condition $condition
    *   Condition which defines what to search for.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type within which to search.
    * @param string|array $bundle
    *   Either single bundle string or array of such within which to search. NULL
@@ @@
   /**
    * Try finding entities by their name or synonym.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   What entity type is being searched.
    * @param string $name
    *   The look up keyword (the supposed name or synonym).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/synonyms/src/SynonymsService/FieldTypeToSynonyms.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/synonyms/src/SynonymsService/BehaviorService.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Add a new discovered behavior service.
    *
-   * @param \Drupal\synonyms\BehaviorInterface\BehaviorInterface $behavior_service
+   * @param BehaviorInterface $behavior_service
    *   Behavior service object that was discovered and should be added into the
    *   list of known ones.
    * @param string $id
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/synonyms/src/SynonymInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms;

+use Drupal\synonyms\ProviderInterface\ProviderInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;

@@ @@
   /**
    * Get instance of the synonyms provider plugin that is set up in this entity.
    *
-   * @return \Drupal\synonyms\ProviderInterface\ProviderInterface
+   * @return ProviderInterface
    *   Initiated synonyms provider instance that corresponds to this
    *   configuration entity
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/synonyms/src/ProviderPluginCollection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms;

+use Drupal\synonyms\ProviderInterface\ProviderInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;

 /**
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\synonyms\ProviderInterface\ProviderInterface
+   * @return ProviderInterface
    *   The return value
    */
   public function &get($instance_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/synonyms/src/ProviderInterface/GetTrait.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Fetch synonyms from an entity.
    *
-   * @param Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity whose synonyms should be fetched.
    *
    * @return string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/synonyms/src/ProviderInterface/GetInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Fetch synonyms from an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity whose synonyms should be fetched.
    *
    * @return string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/synonyms/src/ProviderInterface/FormatWordingInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param string $synonym
    *   Synonym that should be formatted.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity to which this synonym belongs.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which it all happens.
    * @param string $service_id
    *   The caller widget's service id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/synonyms/src/ProviderInterface/FindTrait.php:15

    ---------- begin diff ----------
@@ @@
    * column names in $condition for you, so you do not have to worry about
    * internal processing of $condition object.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition to be processed.
    * @param string $synonym_column
    *   Actual name of the column where synonyms are kept in text.
@@ @@
    * result: what entities are matched by the provided condition through what
    * synonyms.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition that defines what to search for. Apart from normal SQL
    *   conditions as known in Drupal, it may contain the following placeholders:
    *   - FindInterface::COLUMN_SYNONYM_PLACEHOLDER: to denote
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/synonyms/src/ProviderInterface/FindInterface.php:29

    ---------- begin diff ----------
@@ @@
    * column names in $condition for you, so you do not have to worry about
    * internal processing of $condition object.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition to be processed.
    * @param string $synonym_column
    *   Actual name of the column where synonyms are kept in text.
@@ @@
    * result: what entities are matched by the provided condition through what
    * synonyms.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   Condition that defines what to search for. Apart from normal SQL
    *   conditions as known in Drupal, it may contain the following placeholders:
    *   - FindInterface::COLUMN_SYNONYM_PLACEHOLDER: to denote
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/synonyms/src/ProviderInterface/ConfigurationInterface.php:17

    ---------- begin diff ----------
@@ @@
    *   Form into which your configuration form will be embedded. You are
    *   supposed to extend this array with additional configuration form elements
    *   that your provider needs.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object that corresponds to this form.
    * @param array $configuration
    *   Array of existing configuration for your provider. Normally you would use
    *   it as a source of default values for your configuration form elements.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which the form is being built.
    *
    * @return array
@@ @@
    * @param array $form
    *   Your configuration form as it was built in
    *   static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that corresponds to this form. You should rise form validation
    *   errors on this form state, should you discover any in user input.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which the form is being built.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state, SynonymInterface $synonym_config);
@@ @@
    * @param array $form
    *   Your configuration form as it was built in
    *   static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that corresponds to this form.
-   * @param \Drupal\synonyms\SynonymInterface $synonym_config
+   * @param SynonymInterface $synonym_config
    *   Synonym config entity in the context of which the form is being built.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/synonyms/src/Plugin/Synonyms/Provider/Field.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms\Plugin\Synonyms\Provider;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\ConditionInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The field type to synonyms.
    *
-   * @var \Drupal\synonyms\SynonymsService\FieldTypeToSynonyms
+   * @var FieldTypeToSynonyms
    */
   protected $fieldTypeToSynonyms;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Retrieve the field definition against which this plugin is configured.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   Field definition against which this plugin is configured.
    */
   protected function getFieldDefinition() {
@@ @@
   /**
    * We need to be able to extract SQL query object.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   The return value
    */
   public function getSqlQuery() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/synonyms/src/Plugin/Synonyms/Provider/EntityReferenceField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms\Plugin\Synonyms\Provider;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\ConditionInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Retrieve the field definition against which this plugin is configured.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   Field definition against which this plugin is configured.
    */
   protected function getFieldDefinition() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/synonyms/src/Plugin/Synonyms/Provider/BaseField.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The field type to synonyms.
    *
-   * @var \Drupal\synonyms\SynonymsService\FieldTypeToSynonyms
+   * @var FieldTypeToSynonyms
    */
   protected $fieldTypeToSynonyms;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/synonyms/src/Plugin/Synonyms/Provider/AbstractProvider.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/synonyms/src/Plugin/Derivative/Field.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The field type to synonyms.
    *
-   * @var \Drupal\synonyms\SynonymsService\FieldTypeToSynonyms
+   * @var FieldTypeToSynonyms
    */
   protected $fieldTypeToSynonyms;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/synonyms/src/Plugin/Derivative/EntityReferenceField.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/synonyms/src/ParamConverter/EntityTypeParamConverter.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/synonyms/src/Form/SynonymForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms\Form;

+use Drupal\synonyms\SynonymInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The synonym entity.
    *
-   * @var \Drupal\synonyms\SynonymInterface
+   * @var SynonymInterface
    */
   protected $entity;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The synonyms provider plugin manager.
    *
-   * @var \Drupal\synonyms\ProviderPluginManager
+   * @var ProviderPluginManager
    */
   protected $synonymsProviderPluginManager;

@@ @@
   /**
    * Entity type that is being edited/added.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $controlledEntityType;

@@ @@
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * SynonymForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\synonyms\ProviderPluginManager $synonyms_provider_plugin_manager
+   * @param ProviderPluginManager $synonyms_provider_plugin_manager
    *   The synonyms provider plugin_manager.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ProviderPluginManager $synonyms_provider_plugin_manager, ContainerInterface $container) {
@@ @@
    *   Name of the nested form element for which to create a sub form state.
    * @param array $form
    *   Full form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Full form state out of which to create sub form state.
    *
-   * @return \Drupal\Core\Form\SubformState
+   * @return SubformState
    *   Sub form state object generated based on the input arguments
    */
   protected function getSubFormState($element_name, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/synonyms/src/Form/BehaviorForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms\Form;

+use Drupal\synonyms\SynonymInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The behavior configuration.
    *
-   * @var \Drupal\synonyms\SynonymInterface
+   * @var SynonymInterface
    */
   protected $config;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The behavior service.
    *
-   * @var \Drupal\synonyms\SynonymsService\BehaviorService
+   * @var BehaviorService
    */
   protected $behaviorService;

@@ @@
   /**
    * Entity type that is being managed.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * BehaviorForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\synonyms\SynonymsService\BehaviorService $behavior_service
+   * @param BehaviorService $behavior_service
    *   The behavior service.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, BehaviorService $behavior_service, ContainerInterface $container) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/synonyms/src/Entity/Synonym.php:67

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin collection that stores synonym provider plugins.
    *
-   * @var \Drupal\synonyms\ProviderPluginCollection
+   * @var ProviderPluginCollection
    */
   protected $pluginCollection;

@@ @@
   /**
    * Gets the plugin collections used by this entity.
    *
-   * @return \Drupal\synonyms\ProviderPluginCollection
+   * @return ProviderPluginCollection
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ @@
   /**
    * Encapsulates the creation of entity's LazyPluginCollection.
    *
-   * @return \Drupal\synonyms\ProviderPluginCollection
+   * @return ProviderPluginCollection
    *   The entity's plugin collection.
    */
   protected function getPluginCollection() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/synonyms/src/Controller/SynonymConfigController.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The synonyms behavior service.
    *
-   * @var \Drupal\synonyms\SynonymsService\BehaviorService
+   * @var BehaviorService
    */
   protected $behaviorService;

@@ @@
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;

@@ @@
   /**
    * SynonymConfigController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\synonyms\SynonymsService\BehaviorService $behavior_service
+   * @param BehaviorService $behavior_service
    *   The behavior service.
-   * @param \Drupal\synonyms\SynonymsService\ProviderService $provider_service
+   * @param ProviderService $provider_service
    *   The provider service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info, BehaviorService $behavior_service, ProviderService $provider_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/synonyms/modules/synonyms_views_filter/src/Plugin/views/filter/SynonymsEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\synonyms_views_filter\Plugin\views\filter;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The synonyms behavior service.
    *
-   * @var \Drupal\synonyms\SynonymsService\BehaviorService
+   * @var BehaviorService
    */
   protected $behaviorService;

@@ @@
   /**
    * Get entity storage of the entity type this filter is set up to use.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The return value
    */
   protected function getEntityStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/synonyms/modules/synonyms_views_argument_validator/src/Plugin/Derivative/ViewsSynonymsEntityArgumentValidator.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/synonyms/modules/synonyms_select/src/SynonymsService/Behavior/SelectService.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/synonyms/modules/synonyms_search/synonyms_search.module:58

    ---------- begin diff ----------
@@ @@
 /**
  * Mark all search index dependent on a given synonym config for reindexing.
  *
- * @param \Drupal\synonyms\SynonymInterface $synonym
+ * @param SynonymInterface $synonym
  *   Synonym config whose dependent search index should be marked
  *   for reindexing.
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


27) modules/contrib/synonyms/modules/synonyms_search/src/SynonymsService/Behavior/SearchService.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;

@@ @@
   /**
    * Mark all search index dependent on a given entity for reindexing.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity whose dependent search index should be marked for reindexing.
    */
   public function entityMarkForReindex(ContentEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/synonyms/modules/synonyms_autocomplete/src/SynonymsService/Behavior/AutocompleteService.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The key value.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValue;

@@ @@
   /**
    * The entity reference selection handler plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The synonyms provider service.
    *
-   * @var \Drupal\synonyms\SynonymsService\ProviderService
+   * @var ProviderService
    */
   protected $providerService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/synonyms/modules/synonyms_autocomplete/src/Controller/EntityAutocomplete.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The autocomplete service.
    *
-   * @var \Drupal\synonyms_autocomplete\SynonymsService\Behavior\AutocompleteService
+   * @var AutocompleteService
    */
   protected $autocompleteService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 29 files have been changed by Rector                                      

