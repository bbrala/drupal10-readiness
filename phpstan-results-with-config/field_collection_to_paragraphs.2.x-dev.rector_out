modules/contrib/field_collection_to_paragraphs/field_collection_to_paragraphs.module
modules/contrib/field_collection_to_paragraphs/src/EventSubscriber/EntityChangeMigrationSubscriber.php
modules/contrib/field_collection_to_paragraphs/src/EventSubscriber/EntityDisplayMigrationSubscriber.php
modules/contrib/field_collection_to_paragraphs/src/FieldCollectionVersionTrait.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/FieldCollectionItemMigration.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/FieldCollectionItemParentSourceMigration.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/FieldCollectionMigrationSourceTrait.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/process/ParagraphsFieldName.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/process/ParagraphsHandlerSettings.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/BaseDrupal8EntitySource.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/BaseDrupal8Source.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionItem.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionItemFieldEntityDisplay.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionItemFieldEntityFormDisplay.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionItemFieldInstance.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionItemFieldStorage.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParagraphType.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentEntityDisplay.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentEntityFormDisplay.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentEntityInstance.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentEntityStorage.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentNode.php
modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentTaxonomyTerm.php
modules/contrib/field_collection_to_paragraphs/tests/src/Functional/SiteStillWorks.php

11 files with changes
=====================

1) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentTaxonomyTerm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection_to_paragraphs\Plugin\migrate\source\d8;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\field_collection_to_paragraphs\Plugin\migrate\FieldCollectionMigrationSourceTrait;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, StateInterface $state, MigrationPluginManagerInterface $migration_manager, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $migration, $state, $migration_manager, $entity_type_manager);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    * @throws \Exception
    */
   public function prepareRow(Row $row) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionParentNode.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection_to_paragraphs\Plugin\migrate\source\d8;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\field_collection_to_paragraphs\Plugin\migrate\FieldCollectionMigrationSourceTrait;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, StateInterface $state, MigrationPluginManagerInterface $migration_manager, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $migration, $state, $migration_manager, $entity_type_manager);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function query() {
     $query = $this->select('node', 'n')
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    * @throws \Exception
    */
   public function prepareRow(Row $row) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/FieldCollectionItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection_to_paragraphs\Plugin\migrate\source\d8;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\migrate\MigrateSkipRowException;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, StateInterface $state, MigrationPluginManagerInterface $migration_manager, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $migration, $state, $migration_manager, $entity_type_manager);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    * @throws \Exception
    */
   public function prepareRow(Row $row) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/BaseDrupal8Source.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Filter the current query by the collection types configuration.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The select query.
    */
   protected function filterCollectionTypes(SelectInterface $query) {
@@ @@
   /**
    * Unserialize the current row's data.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The current row.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/source/d8/BaseDrupal8EntitySource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection_to_paragraphs\Plugin\migrate\source\d8;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
   /**
    * The migration manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationManager;

@@ @@
   /**
    * The entity storage instance.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\Drupal\Core\Entity\Sql\SqlEntityStorageInterface
+   * @var EntityStorageInterface|SqlEntityStorageInterface
    */
   protected $entityStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration instance.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The Drupal state.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_manager
+   * @param MigrationPluginManagerInterface $migration_manager
    *   The migration manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, StateInterface $state, MigrationPluginManagerInterface $migration_manager, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/process/ParagraphsHandlerSettings.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateSkipProcessException
+   * @throws MigrateSkipProcessException
    */
   public function transform($value, MigrateExecutableInterface $migrate_executable, Row $row, $destination_property) {
     if (!is_string($value)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/process/ParagraphsFieldName.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    */
   public function transform($value, MigrateExecutableInterface $migrate_executable, Row $row, $destination_property) {
     if (!is_string($value)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/FieldCollectionMigrationSourceTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection_to_paragraphs\Plugin\migrate;

+use Drupal\migrate\Plugin\migrate\id_map\Sql;
 use Drupal\migrate\Plugin\migrate\destination\Entity;
 use Drupal\migrate\Plugin\MigrationInterface;

@@ @@
   /**
    * Get the destination entity type.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration to check.
    *
    * @return string
@@ @@
   /**
    * Get the source ID to destination ID mapping for a single migration.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration instance.
    * @param bool $ignore_empty_destinations
    *   Whether to ignore empty destinations when mapping them.
@@ @@
       $destination_id_fields[$field] = $column_name;
     }

-    /** @var \Drupal\migrate\Plugin\migrate\id_map\Sql $mapping */
+    /** @var Sql $mapping */
     $mapping = $migration->getIdMap();
     $query = $mapping->getDatabase()->select($mapping->mapTableName(), 'map')
       ->fields('map', $column_names);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/field_collection_to_paragraphs/src/Plugin/migrate/FieldCollectionItemMigration.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The migration plugin manager.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $source_plugin_manager
+   * @param MigratePluginManagerInterface $source_plugin_manager
    *   The source migration plugin manager.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $process_plugin_manager
+   * @param MigratePluginManagerInterface $process_plugin_manager
    *   The process migration plugin manager.
-   * @param \Drupal\migrate\Plugin\MigrateDestinationPluginManager $destination_plugin_manager
+   * @param MigrateDestinationPluginManager $destination_plugin_manager
    *   The destination migration plugin manager.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $idmap_plugin_manager
+   * @param MigratePluginManagerInterface $idmap_plugin_manager
    *   The ID map migration plugin manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationPluginManagerInterface $migration_plugin_manager, MigratePluginManagerInterface $source_plugin_manager, MigratePluginManagerInterface $process_plugin_manager, MigrateDestinationPluginManager $destination_plugin_manager, MigratePluginManagerInterface $idmap_plugin_manager, EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/field_collection_to_paragraphs/src/EventSubscriber/EntityDisplayMigrationSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection_to_paragraphs\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\migrate\Event\MigrateEvents;
 use Drupal\migrate\Event\MigratePostRowSaveEvent;
@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * EntityDisplayMigrationSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
    */
   public function __construct(EntityDisplayRepositoryInterface $entity_display_repository) {
@@ @@
   /**
    * Event subscriber for acting upon updated migration row entries.
    *
-   * @param \Drupal\migrate\Event\MigratePostRowSaveEvent $event
+   * @param MigratePostRowSaveEvent $event
    *   The post row save event.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function postRowSave(MigratePostRowSaveEvent $event) {
     $migration = $event->getMigration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/field_collection_to_paragraphs/src/EventSubscriber/EntityChangeMigrationSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a EntityChangeMigrationSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Event subscriber for acting upon updated migration row entries.
    *
-   * @param \Drupal\migrate\Event\MigratePostRowSaveEvent $event
+   * @param MigratePostRowSaveEvent $event
    *   The post row save event.
    */
   public function postRowSave(MigratePostRowSaveEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 11 files have been changed by Rector                                      

