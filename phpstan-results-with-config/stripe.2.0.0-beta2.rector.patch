diff --git a/modules/stripe_examples/src/EventSubscriber/StripeExamplesEventSubscriber.php b/modules/stripe_examples/src/EventSubscriber/StripeExamplesEventSubscriber.php
index db35390..204c6fa 100644
--- a/modules/stripe_examples/src/EventSubscriber/StripeExamplesEventSubscriber.php
+++ b/modules/stripe_examples/src/EventSubscriber/StripeExamplesEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stripe_examples\EventSubscriber;
 
+use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\stripe\Event\StripeEvents;
 use Drupal\stripe\Event\StripePaymentEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -28,7 +29,7 @@ class StripeExamplesEventSubscriber implements EventSubscriberInterface {
   /**
    * React to a config object being saved.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Config crud event.
    */
   public function updatePayment(StripePaymentEvent $event) {
diff --git a/modules/stripe_examples/src/Form/SimpleCheckoutForm.php b/modules/stripe_examples/src/Form/SimpleCheckoutForm.php
index 343f0b0..eb158ad 100644
--- a/modules/stripe_examples/src/Form/SimpleCheckoutForm.php
+++ b/modules/stripe_examples/src/Form/SimpleCheckoutForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stripe_examples\Form;
 
+use Stripe\StripeClient;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -98,7 +99,7 @@ class SimpleCheckoutForm extends FormBase {
     $config = \Drupal::config('stripe.settings');
     $apikeySecret = $config->get('apikey.' . $config->get('environment') . '.secret');
     // Quick test of subscription creation
-    $stripe = new \Stripe\StripeClient($apikeySecret);
+    $stripe = new StripeClient($apikeySecret);
 
     // $customer = $stripe->customer->create([
     //   'customer' => 'cus_J4sMTZH5VcpNxu',
diff --git a/src/Controller/StripeWebhookController.php b/src/Controller/StripeWebhookController.php
index b4ec107..5bd46c7 100644
--- a/src/Controller/StripeWebhookController.php
+++ b/src/Controller/StripeWebhookController.php
@@ -22,14 +22,14 @@ class StripeWebhookController extends ControllerBase {
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Creates a new instance.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -40,7 +40,7 @@ class StripeWebhookController extends ControllerBase {
    * When this controller is created,
    * it will get the di_example.talk service and store it.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    *
    * @return static
@@ -93,7 +93,7 @@ class StripeWebhookController extends ControllerBase {
 
     // Dispatch the webhook event.
     $this->eventDispatcher
-      ->dispatch(StripeEvents::WEBHOOK, new StripeWebhookEvent($event));
+      ->dispatch(new StripeWebhookEvent($event), StripeEvents::WEBHOOK);
 
     return new Response('OK', Response::HTTP_OK);
   }
diff --git a/src/Element/StripeBase.php b/src/Element/StripeBase.php
index af73ce7..2638bb5 100644
--- a/src/Element/StripeBase.php
+++ b/src/Element/StripeBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stripe\Element;
 
+use Stripe\StripeClient;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Render\Element\FormElement;
@@ -94,7 +95,7 @@ abstract class StripeBase extends FormElement {
       return $element;
     }
 
-    $stripe = new \Stripe\StripeClient($apikeySecret);
+    $stripe = new StripeClient($apikeySecret);
 
     $id = $element['#id'];
     $wrapper_id = 'stripe-' . implode('-', $element['#parents']) . '-wrapper';
@@ -248,7 +249,7 @@ abstract class StripeBase extends FormElement {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitStripeElementCallback(array $form, FormStateInterface $form_state) {
@@ -261,7 +262,7 @@ abstract class StripeBase extends FormElement {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -296,7 +297,7 @@ abstract class StripeBase extends FormElement {
       $settings['total'] = $total;
 
       if ($payment_intent) {
-        $stripe = new \Stripe\StripeClient($apikeySecret);
+        $stripe = new StripeClient($apikeySecret);
         $stripe->paymentIntents->update(
           $payment_intent,
           ['amount' => $total['amount']]
diff --git a/src/Event/StripePaymentEvent.php b/src/Event/StripePaymentEvent.php
index b1a16ba..229c825 100644
--- a/src/Event/StripePaymentEvent.php
+++ b/src/Event/StripePaymentEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\stripe\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a stripe event for webhook.
@@ -20,7 +20,7 @@ class StripePaymentEvent extends Event {
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   private $formState;
 
@@ -57,7 +57,7 @@ class StripePaymentEvent extends Event {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The current state of the form. The arguments that
    *   \Drupal::formBuilder()->getForm() was originally called with are
    *   available in the array $form_state->getBuildInfo()['args'].
@@ -81,7 +81,7 @@ class StripePaymentEvent extends Event {
   /**
    * Get the form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The form state.
    */
   public function getFormState(): FormStateInterface {
diff --git a/src/Event/StripeWebhookEvent.php b/src/Event/StripeWebhookEvent.php
index d1d60d3..af87105 100644
--- a/src/Event/StripeWebhookEvent.php
+++ b/src/Event/StripeWebhookEvent.php
@@ -3,12 +3,11 @@
 namespace Drupal\stripe\Event;
 
 use Stripe\Event as StripeEvent;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Wraps a stripe event for webhook.
  */
-class StripeWebhookEvent extends Event {
+class StripeWebhookEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Stripe API event object.
