modules/contrib/media_avportal/media_avportal.install
modules/contrib/media_avportal/media_avportal.module
modules/contrib/media_avportal/media_avportal.post_update.php
modules/contrib/media_avportal/src/AvPortalClient.php
modules/contrib/media_avportal/src/AvPortalClientFactory.php
modules/contrib/media_avportal/src/AvPortalClientFactoryInterface.php
modules/contrib/media_avportal/src/AvPortalClientInterface.php
modules/contrib/media_avportal/src/AvPortalMediaUpdater.php
modules/contrib/media_avportal/src/AvPortalResource.php
modules/contrib/media_avportal/src/Commands/AvPortalCommands.php
modules/contrib/media_avportal/src/Plugin/Field/FieldFormatter/AvPortalPhotoFormatter.php
modules/contrib/media_avportal/src/Plugin/Field/FieldFormatter/AvPortalPhotoResponsiveFormatter.php
modules/contrib/media_avportal/src/Plugin/Field/FieldFormatter/AvPortalVideoFormatter.php
modules/contrib/media_avportal/src/Plugin/Field/FieldWidget/AvPortalWidget.php
modules/contrib/media_avportal/src/Plugin/Validation/Constraint/AvPortalResourceConstraint.php
modules/contrib/media_avportal/src/Plugin/Validation/Constraint/AvPortalResourceConstraintValidator.php
modules/contrib/media_avportal/src/Plugin/media/Source/MediaAvPortalPhotoSource.php
modules/contrib/media_avportal/src/Plugin/media/Source/MediaAvPortalSourceBase.php
modules/contrib/media_avportal/src/Plugin/media/Source/MediaAvPortalSourceInterface.php
modules/contrib/media_avportal/src/Plugin/media/Source/MediaAvPortalVideoSource.php
modules/contrib/media_avportal/src/StreamWrapper/AvPortalPhotoStreamWrapper.php
modules/contrib/media_avportal/tests/modules/media_avportal_mock/src/AvPortalClientMiddleware.php
modules/contrib/media_avportal/tests/modules/media_avportal_mock/src/AvPortalMockEvent.php
modules/contrib/media_avportal/tests/modules/media_avportal_mock/src/EventSubscriber/AvPortalMockEventSubscriber.php
modules/contrib/media_avportal/tests/modules/media_avportal_mock/src/HistoryMiddleware.php
modules/contrib/media_avportal/tests/src/FunctionalJavascript/MediaAvPortalCreateContentTest.php
modules/contrib/media_avportal/tests/src/Kernel/AvPortalClientTest.php
modules/contrib/media_avportal/tests/src/Kernel/AvPortalPullMediaTest.php
modules/contrib/media_avportal/tests/src/Kernel/AvPortalStreamWrapperTest.php
modules/contrib/media_avportal/tests/src/Unit/AvPortalClientTest.php
modules/contrib/media_avportal/tests/src/Unit/AvPortalResourceTest.php

21 files with changes
=====================

1) modules/contrib/media_avportal/tests/src/Unit/AvPortalClientTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_avportal\src\Unit;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\media_avportal\AvPortalClient;
@@ @@
   /**
    * A config factory service implementation.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var ConfigFactoryInterface|MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * A cache backend service implementation.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var CacheBackendInterface|MockObject
    */
   protected $cacheBackend;

@@ @@
   /**
    * A time service implementation.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var TimeInterface|MockObject
    */
   protected $time;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->configFactory = $this->getConfigFactoryStub([
@@ @@
       ],
     ]);

-    $this->cacheBackend = $this->getMockBuilder(CacheBackendInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheBackend = $this->createMock(CacheBackendInterface::class);

-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
   }

   /**
@@ @@
    * @dataProvider invalidQueryOptionsDataProvider
    */
   public function testInvalidQueryOptions(array $input, string $message) {
-    $http_client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(Client::class);

     $client = new AvPortalClient($http_client, $this->configFactory, $this->cacheBackend, $this->time, FALSE);
     $this->expectException(\InvalidArgumentException::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_avportal/tests/src/Kernel/AvPortalStreamWrapperTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['media_avportal']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/media_avportal/tests/src/Kernel/AvPortalPullMediaTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_avportal\src\Kernel;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\media\Kernel\MediaKernelTestBase;
@@ @@
       ->condition('mid', $outdated_media->id())
       ->execute();

-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $media_storage */
+    /** @var SqlContentEntityStorage $media_storage */
     $media_storage = $this->container->get('entity_type.manager')->getStorage('media');
     $media_storage->resetCache();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/media_avportal/tests/src/Kernel/AvPortalClientTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['media_avportal']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/media_avportal/tests/src/FunctionalJavascript/MediaAvPortalCreateContentTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_avportal\FunctionalJavascript;

+use Drupal\media\MediaInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;

@@ @@

     $media_storage = \Drupal::entityTypeManager()->getStorage('media');

-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $media_storage->load(1);
     $this->assertEquals($media->label(), 'Midday press briefing from 25/10/2018');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/media_avportal/tests/modules/media_avportal_mock/src/EventSubscriber/AvPortalMockEventSubscriber.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the default resource JSON on the event.
    *
-   * @param \Drupal\media_avportal_mock\AvPortalMockEvent $event
+   * @param AvPortalMockEvent $event
    *   The event.
    */
   public function setMockResources(AvPortalMockEvent $event) {
     $resources = $event->getResources();
-    foreach (glob(drupal_get_path('module', 'media_avportal_mock') . '/responses/resources/*.json') as $file) {
+    foreach (glob(\Drupal::service('extension.list.module')->getPath('media_avportal_mock') . '/responses/resources/*.json') as $file) {
       $ref = str_replace('.json', '', basename($file));
       $resources[$ref] = file_get_contents($file);
     }
@@ @@
     $event->setResources($resources);

     $searches = $event->getSearches();
-    foreach (glob(drupal_get_path('module', 'media_avportal_mock') . '/responses/searches/*.json') as $file) {
+    foreach (glob(\Drupal::service('extension.list.module')->getPath('media_avportal_mock') . '/responses/searches/*.json') as $file) {
       $ref = str_replace('.json', '', basename($file));
       if (!isset($searches[$ref])) {
         // We only add the default search if another subscriber did not yet
@@ @@
     }
     $event->setSearches($searches);
     if (!$event->getDefault('video')) {
-      $event->setDefault(file_get_contents(drupal_get_path('module', 'media_avportal_mock') . '/responses/video-default.json'), 'video');
+      $event->setDefault(file_get_contents(\Drupal::service('extension.list.module')->getPath('media_avportal_mock') . '/responses/video-default.json'), 'video');
     }
     if (!$event->getDefault('all')) {
-      $event->setDefault(file_get_contents(drupal_get_path('module', 'media_avportal_mock') . '/responses/all-default.json'), 'all');
+      $event->setDefault(file_get_contents(\Drupal::service('extension.list.module')->getPath('media_avportal_mock') . '/responses/all-default.json'), 'all');
     }
     if (!$event->getDefault('photo')) {
-      $event->setDefault(file_get_contents(drupal_get_path('module', 'media_avportal_mock') . '/responses/photo-default.json'), 'photo');
+      $event->setDefault(file_get_contents(\Drupal::service('extension.list.module')->getPath('media_avportal_mock') . '/responses/photo-default.json'), 'photo');
     }
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/media_avportal/tests/modules/media_avportal_mock/src/AvPortalMockEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal_mock;

+use Symfony\Contracts\EventDispatcher\Event;
 use Psr\Http\Message\RequestInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event used to collect the mocking JSON data.
@@ @@
   /**
    * The Guzzle request.
    *
-   * @var \Psr\Http\Message\RequestInterface
+   * @var RequestInterface
    */
   protected $request;

@@ @@
   /**
    * AvPortalMockEvent constructor.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   The Guzzle request.
    * @param array $resources
    *   The resources JSON data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/media_avportal/tests/modules/media_avportal_mock/src/AvPortalClientMiddleware.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * AvPortalClientMiddleware constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $configFactory, EventDispatcherInterface $eventDispatcher) {
@@ @@

         // AV Portal thumbnails.
         if ($uri->getHost() === 'defiris.ec.streamcloud.be' || strpos($uri->getPath(), 'avservices/avs/files/video6/repository/prod/photo/store/')) {
-          $thumbnail = file_get_contents(drupal_get_path('module', 'media') . '/images/icons/no-thumbnail.png');
+          $thumbnail = file_get_contents(\Drupal::service('extension.list.module')->getPath('media') . '/images/icons/no-thumbnail.png');
           $response = new Response(200, [], $thumbnail);
           return new FulfilledPromise($response);
         }
@@ @@
   /**
    * Creates responses from pre-saved JSON data.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   The Guzzle request.
    *
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    *   The Guzzle promise.
    */
   protected function createServicePromise(RequestInterface $request): PromiseInterface {
     // Dispatch event to gather the JSON data for responses.
     $event = new AvPortalMockEvent($request);
-    $event = $this->eventDispatcher->dispatch(AvPortalMockEvent::AV_PORTAL_MOCK_EVENT, $event);
+    $event = $this->eventDispatcher->dispatch($event, AvPortalMockEvent::AV_PORTAL_MOCK_EVENT);

     $uri = $request->getUri();
     $query = $uri->getQuery();
@@ @@
    * @param string $ref
    *   The resource reference.
    *
-   * @return \GuzzleHttp\Promise\FulfilledPromise
+   * @return FulfilledPromise
    *   The middleware promise.
    */
   protected function createIndividualResourcePromise(array $resources, string $ref): PromiseInterface {
@@ @@
    * @param array $params
    *   The request parameters that contain the pagination info.
    *
-   * @return \GuzzleHttp\Promise\FulfilledPromise
+   * @return FulfilledPromise
    *   The middleware promise.
    */
   protected function createPaginatedJsonPromise(string $json, array $params): PromiseInterface {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


9) modules/contrib/media_avportal/src/StreamWrapper/AvPortalPhotoStreamWrapper.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal\StreamWrapper;

+use Drupal\media_avportal\AvPortalClientInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\remote_stream_wrapper\StreamWrapper\HttpStreamWrapper;
@@ @@
   /**
    * The AV Portal client.
    *
-   * @var \Drupal\media_avportal\AvPortalClientInterface
+   * @var AvPortalClientInterface
    */
   protected $client;

@@ @@
   /**
    * The AV Portal configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $configuration;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/media_avportal/src/Plugin/media/Source/MediaAvPortalSourceBase.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The logger channel for media.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The AV Portal client.
    *
-   * @var \Drupal\media_avportal\AvPortalClientInterface
+   * @var AvPortalClientInterface
    */
   protected $avPortalClient;

@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel for media.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\media_avportal\AvPortalClientInterface $avPortalClient
+   * @param AvPortalClientInterface $avPortalClient
    *   The AV Portal client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file handler.
    *
    * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ @@
    * If the thumbnail is not already locally stored, this method will attempt
    * to download it.
    *
-   * @param \Drupal\media_avportal\AvPortalResource $resource
+   * @param AvPortalResource $resource
    *   The resource object.
    *
    * @return string|null
@@ @@
   /**
    * Imports a remote thumbnail as an unmanaged file.
    *
-   * @param \Drupal\media_avportal\AvPortalResource $resource
+   * @param AvPortalResource $resource
    *   The AV Portal resource.
    * @param string $local_thumbnail_uri
    *   The local thumbnail URI.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/media_avportal/src/Plugin/Validation/Constraint/AvPortalResourceConstraintValidator.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal\Plugin\Validation\Constraint;

+use Drupal\media\MediaInterface;
+use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalVideoSource;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\media_avportal\AvPortalClientInterface;
 use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalSourceInterface;
@@ @@
   /**
    * The AV portal client.
    *
-   * @var \Drupal\media_avportal\AvPortalClientInterface
+   * @var AvPortalClientInterface
    */
   protected $avPortalClient;

@@ @@
   /**
    * Constructs a new AvPortalResourceConstraintValidator.
    *
-   * @param \Drupal\media_avportal\AvPortalClientInterface $avPortalClient
+   * @param AvPortalClientInterface $avPortalClient
    *   The AV portal client.
    */
   public function __construct(AvPortalClientInterface $avPortalClient) {
@@ @@
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint) {
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $items->getEntity();
-    /** @var \Drupal\media_avportal\Plugin\media\Source\MediaAvPortalVideoSource $source */
+    /** @var MediaAvPortalVideoSource $source */
     $source = $media->getSource();

     if (!($source instanceof MediaAvPortalSourceInterface)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/media_avportal/src/Plugin/Field/FieldWidget/AvPortalWidget.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The media source for the field.
    *
-   * @var \Drupal\media_avportal\Plugin\media\Source\MediaAvPortalSourceInterface
+   * @var MediaAvPortalSourceInterface
    */
   protected $source;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @see self::formElement()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/media_avportal/src/Plugin/Field/FieldFormatter/AvPortalVideoFormatter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal\Plugin\Field\FieldFormatter;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemInterface;
@@ @@
   /**
    * The AV Portal client.
    *
-   * @var \Drupal\media_avportal\AvPortalClientInterface
+   * @var AvPortalClientInterface
    */
   protected $avPortalClient;

@@ @@
   /**
    * The AV Portal settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    *   The plugin ID for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\media_avportal\AvPortalClientInterface $avPortalClient
+   * @param AvPortalClientInterface $avPortalClient
    *   The AV Portal client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    *
    * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ @@
   /**
    * Renders a single field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The individual field item.
    * @param string $langcode
    *   The language that should be used to render the field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/media_avportal/src/Plugin/Field/FieldFormatter/AvPortalPhotoResponsiveFormatter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal\Plugin\Field\FieldFormatter;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The AV Portal client.
    *
-   * @var \Drupal\media_avportal\AvPortalClientInterface
+   * @var AvPortalClientInterface
    */
   protected $avPortalClient;

@@ @@
   /**
    * The AV Portal settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;

@@ @@
    *   The plugin ID for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\media_avportal\AvPortalClientInterface $avportal_client
+   * @param AvPortalClientInterface $avportal_client
    *   The AV Portal client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    *
    * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ @@
    */
   public function settingsForm(array $form, FormStateInterface $form_state): array {
     $responsive_image_options = [];
-    /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface[] $responsive_image_styles */
+    /** @var ResponsiveImageStyleInterface[] $responsive_image_styles */
     $responsive_image_styles = $this->entityTypeManager->getStorage('responsive_image_style')->loadMultiple();
     foreach ($responsive_image_styles as $machine_name => $responsive_image_style) {
       if ($responsive_image_style->hasImageStyleMappings()) {
@@ @@
   /**
    * Renders a single field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The individual field item.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/media_avportal/src/Plugin/Field/FieldFormatter/AvPortalPhotoFormatter.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal\Plugin\Field\FieldFormatter;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\image\ImageStyleStorageInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The AV Portal client.
    *
-   * @var \Drupal\media_avportal\AvPortalClientInterface
+   * @var AvPortalClientInterface
    */
   protected $avPortalClient;

@@ @@
   /**
    * The AV Portal settings config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin ID for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\media_avportal\AvPortalClientInterface $avportal_client
+   * @param AvPortalClientInterface $avportal_client
    *   The AV Portal client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
    * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ @@
   /**
    * Renders a single field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The individual field item.
    *
    * @return array
@@ @@
     // The image styles are a dependency of this formatter.
     // @see \Drupal\image\Plugin\Field\FieldFormatter\ImageFormatter.
     $style_id = $this->getSetting('image_style');
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($style_id && $style = $this->entityTypeManager->getStorage('image_style')->load($style_id)) {
       $dependencies[$style->getConfigDependencyKey()][] = $style->getConfigDependencyName();
     }
@@ @@
     // and a replacement is specified.
     // @see \Drupal\image\Plugin\Field\FieldFormatter\ImageFormatter.
     $style_id = $this->getSetting('image_style');
-    /** @var \Drupal\image\ImageStyleStorageInterface $storage */
+    /** @var ImageStyleStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('image_style');
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($style_id && $style = $storage->load($style_id)) {
       if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
         $replacement_id = $storage->getReplacementId($style_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/media_avportal/src/Commands/AvPortalCommands.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The AV Portal pull media service.
    *
-   * @var \Drupal\media_avportal\AvPortalMediaUpdater
+   * @var AvPortalMediaUpdater
    */
   protected $avPortalMediaUpdater;

@@ @@
   /**
    * Media AV Portal commands constructor.
    *
-   * @param \Drupal\media_avportal\AvPortalMediaUpdater $avPortalMediaUpdater
+   * @param AvPortalMediaUpdater $avPortalMediaUpdater
    *   The service that update existing media.
    */
   public function __construct(AvPortalMediaUpdater $avPortalMediaUpdater) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/media_avportal/src/AvPortalMediaUpdater.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal;

+use Drupal\media\Entity\Media;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerChannelFactory;

@@ @@
   /**
    * Creates a new AvPortalMediaUpdater objects.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
    *   The logger channel factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_channel_factory) {
@@ @@
    *   Array of media ids.
    */
   public function refreshMappedFields(array $media_ids = NULL): void {
-    /** @var \Drupal\media\Entity\Media[] $medias */
+    /** @var Media[] $medias */
     $medias = $this->entityTypeManager->getStorage('media')->loadMultiple($media_ids);
     foreach ($medias as $entity) {
       if ($entity->getSource()->getPluginDefinition()['provider'] === 'media_avportal') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/media_avportal/src/AvPortalClientInterface.php:28

    ---------- begin diff ----------
@@ @@
    * @param string $ref
    *   The reference identifier.
    *
-   * @return \Drupal\media_avportal\AvPortalResource|null
+   * @return AvPortalResource|null
    *   The resource.
    */
   public function getResource(string $ref): ?AvPortalResource;
@@ @@
   /**
    * Returns the thumbnail file of a given resource.
    *
-   * @param \Drupal\media_avportal\AvPortalResource $resource
+   * @param AvPortalResource $resource
    *   The resource.
    *
    * @return null|string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/media_avportal/src/AvPortalClientFactoryInterface.php:14

    ---------- begin diff ----------
@@ @@
    * @param array $config
    *   An array of configuration options for the client.
    *
-   * @return \Drupal\media_avportal\AvPortalClientInterface
+   * @return AvPortalClientInterface
    *   A new client instance.
    */
   public function getClient(array $config = []): AvPortalClientInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/media_avportal/src/AvPortalClientFactory.php:21

    ---------- begin diff ----------
@@ @@
    *   - use_cache: whether or not to cache the AV Portal responses. Defaults
    *     to TRUE.
    *
-   * @return \Drupal\media_avportal\AvPortalClientInterface
+   * @return AvPortalClientInterface
    *   A new client instance.
    */
   public function getClient(array $config = []): AvPortalClientInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/media_avportal/src/AvPortalClient.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_avportal;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * The module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs an AvPortalClient object.
    *
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   The HTTP client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    * @param bool $useCaches
    *   If the client should use caches for storing and retrieving responses.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 21 files have been changed by Rector                                      

