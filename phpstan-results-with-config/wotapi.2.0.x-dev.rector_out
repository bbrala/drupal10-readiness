modules/contrib/wotapi/src/Access/EntityAccessChecker.php
modules/contrib/wotapi/src/Access/RelationshipFieldAccess.php
modules/contrib/wotapi/src/Annotation/WotapiAction.php
modules/contrib/wotapi/src/Annotation/WotapiActionParameterDefinition.php
modules/contrib/wotapi/src/Context/FieldResolver.php
modules/contrib/wotapi/src/Controller/DiscoveryController.php
modules/contrib/wotapi/src/Controller/EntityResource.php
modules/contrib/wotapi/src/Controller/HttpController.php
modules/contrib/wotapi/src/DependencyInjection/Compiler/RegisterSerializationClassesCompilerPass.php
modules/contrib/wotapi/src/Encoder/JsonEncoder.php
modules/contrib/wotapi/src/Entity/EntityValidationTrait.php
modules/contrib/wotapi/src/Entity/Property.php
modules/contrib/wotapi/src/Entity/PropertyInterface.php
modules/contrib/wotapi/src/Entity/PropertyType.php
modules/contrib/wotapi/src/Entity/PropertyTypeInterface.php
modules/contrib/wotapi/src/Entity/PropertyViewsData.php
modules/contrib/wotapi/src/Entity/Thing.php
modules/contrib/wotapi/src/Entity/ThingInterface.php
modules/contrib/wotapi/src/Entity/ThingType.php
modules/contrib/wotapi/src/Entity/ThingTypeInterface.php
modules/contrib/wotapi/src/Entity/ThingViewsData.php
modules/contrib/wotapi/src/EventSubscriber/DefaultExceptionSubscriber.php
modules/contrib/wotapi/src/EventSubscriber/ResourceResponseSubscriber.php
modules/contrib/wotapi/src/EventSubscriber/WotApiRequestValidator.php
modules/contrib/wotapi/src/Exception/EntityAccessDeniedHttpException.php
modules/contrib/wotapi/src/Exception/UnprocessableHttpEntityException.php
modules/contrib/wotapi/src/Exception/WotapiActionException.php
modules/contrib/wotapi/src/ExecutableWithParamsInterface.php
modules/contrib/wotapi/src/Form/PropertyDeleteForm.php
modules/contrib/wotapi/src/Form/PropertyForm.php
modules/contrib/wotapi/src/Form/PropertySettingsForm.php
modules/contrib/wotapi/src/Form/PropertyTypeDeleteForm.php
modules/contrib/wotapi/src/Form/PropertyTypeForm.php
modules/contrib/wotapi/src/Form/ThingDeleteForm.php
modules/contrib/wotapi/src/Form/ThingForm.php
modules/contrib/wotapi/src/Form/ThingSettingsForm.php
modules/contrib/wotapi/src/Form/ThingTypeDeleteForm.php
modules/contrib/wotapi/src/Form/ThingTypeForm.php
modules/contrib/wotapi/src/Handler.php
modules/contrib/wotapi/src/HandlerInterface.php
modules/contrib/wotapi/src/Normalizer/AnnotationNormalizer.php
modules/contrib/wotapi/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php
modules/contrib/wotapi/src/Normalizer/FieldItemNormalizer.php
modules/contrib/wotapi/src/Normalizer/FieldNormalizer.php
modules/contrib/wotapi/src/Normalizer/HttpExceptionNormalizer.php
modules/contrib/wotapi/src/Normalizer/LinkCollectionNormalizer.php
modules/contrib/wotapi/src/Normalizer/NormalizerBase.php
modules/contrib/wotapi/src/Normalizer/PropertiesFieldNormalizer.php
modules/contrib/wotapi/src/Normalizer/ResourceIdentifierNormalizer.php
modules/contrib/wotapi/src/Normalizer/ResourceObjectNormalizer.php
modules/contrib/wotapi/src/Normalizer/UnprocessableHttpEntityExceptionNormalizer.php
modules/contrib/wotapi/src/Normalizer/Value/CacheableNormalization.php
modules/contrib/wotapi/src/Normalizer/Value/CacheableOmission.php
modules/contrib/wotapi/src/Normalizer/Value/HttpExceptionNormalizerValue.php
modules/contrib/wotapi/src/Normalizer/WotApiDocumentTopLevelNormalizer.php
modules/contrib/wotapi/src/Object/Error.php
modules/contrib/wotapi/src/Object/ParameterBag.php
modules/contrib/wotapi/src/Object/Request.php
modules/contrib/wotapi/src/Object/Response.php
modules/contrib/wotapi/src/ParamConverter/EntityUuidConverter.php
modules/contrib/wotapi/src/ParamConverter/ResourceTypeConverter.php
modules/contrib/wotapi/src/ParameterDefinitionInterface.php
modules/contrib/wotapi/src/ParameterFactoryInterface.php
modules/contrib/wotapi/src/Plugin/Field/FieldFormatter/WotapiActionDefaultFormatter.php
modules/contrib/wotapi/src/Plugin/Field/FieldType/WotapiActionItem.php
modules/contrib/wotapi/src/Plugin/Field/FieldWidget/WotapiActionDefaultWidget.php
modules/contrib/wotapi/src/Plugin/WotapiActionBase.php
modules/contrib/wotapi/src/Plugin/WotapiActionManager.php
modules/contrib/wotapi/src/PropertyAccessControlHandler.php
modules/contrib/wotapi/src/PropertyListBuilder.php
modules/contrib/wotapi/src/PropertyTypeListBuilder.php
modules/contrib/wotapi/src/ResourceResponse.php
modules/contrib/wotapi/src/ResourceType/ResourceType.php
modules/contrib/wotapi/src/ResourceType/ResourceTypeRepository.php
modules/contrib/wotapi/src/ResourceType/ResourceTypeRepositoryInterface.php
modules/contrib/wotapi/src/Routing/EarlyFormatSetter.php
modules/contrib/wotapi/src/Routing/RouteEnhancer.php
modules/contrib/wotapi/src/Routing/Routes.php
modules/contrib/wotapi/src/Serializer/Serializer.php
modules/contrib/wotapi/src/Shaper/RpcRequestFactory.php
modules/contrib/wotapi/src/ThingAccessControlHandler.php
modules/contrib/wotapi/src/ThingListBuilder.php
modules/contrib/wotapi/src/ThingTypeListBuilder.php
modules/contrib/wotapi/src/WotApiResource/Data.php
modules/contrib/wotapi/src/WotApiResource/ErrorCollection.php
modules/contrib/wotapi/src/WotApiResource/LabelOnlyResourceObject.php
modules/contrib/wotapi/src/WotApiResource/Link.php
modules/contrib/wotapi/src/WotApiResource/LinkCollection.php
modules/contrib/wotapi/src/WotApiResource/OmittedData.php
modules/contrib/wotapi/src/WotApiResource/RelationshipData.php
modules/contrib/wotapi/src/WotApiResource/ResourceIdentifier.php
modules/contrib/wotapi/src/WotApiResource/ResourceIdentifierInterface.php
modules/contrib/wotapi/src/WotApiResource/ResourceIdentifierTrait.php
modules/contrib/wotapi/src/WotApiResource/ResourceObject.php
modules/contrib/wotapi/src/WotApiResource/ResourceObjectData.php
modules/contrib/wotapi/src/WotApiResource/WotApiDocumentTopLevel.php
modules/contrib/wotapi/src/WotApiSpec.php
modules/contrib/wotapi/src/WotapiActionInterface.php
modules/contrib/wotapi/src/WotapiServiceProvider.php
modules/contrib/wotapi/wotapi.install
modules/contrib/wotapi/wotapi.module

62 files with changes
=====================

1) modules/contrib/wotapi/wotapi.module:318

    ---------- begin diff ----------
@@ @@
  * Implement hook_entity_presave().
  * Change the default widget form entity_reference to IEF if the target is Thing property.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function wotapi_property_entity_presave(EntityInterface $entity) {
   if ($entity instanceof FieldConfigInterface && !$entity->isDeleted() && !$entity->isSyncing()) {
-    /** @var \Drupal\field\FieldConfigInterface $entity */
+    /** @var FieldConfigInterface $entity */
     if ($entity->getType() === 'entity_reference' && $entity->getSetting('target_type') === 'wotapi_property') {
       // TODO don't hard code EntityFormDisplay type -- default.
       $display_form_id = $entity->getTargetEntityTypeId() . '.' . $entity->getTargetBundle() . '.default';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/wotapi/src/WotApiResource/WotApiDocumentTopLevel.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The data to normalize.
    *
-   * @var \Drupal\wotapi\WotApiResource\ResourceIdentifierInterface|\Drupal\wotapi\WotApiResource\Data|\Drupal\wotapi\WotApiResource\ErrorCollection|\Drupal\Core\Field\EntityReferenceFieldItemListInterface
+   * @var ResourceIdentifierInterface|Data|ErrorCollection|EntityReferenceFieldItemListInterface
    */
   protected $data;

@@ @@
   /**
    * The links.
    *
-   * @var \Drupal\wotapi\WotApiResource\LinkCollection
+   * @var LinkCollection
    */
   protected $links;

@@ @@
   /**
    * Instantiates a WotApiDocumentTopLevel object.
    *
-   * @param \Drupal\wotapi\WotApiResource\ResourceIdentifierInterface|\Drupal\wotapi\WotApiResource\Data|\Drupal\wotapi\WotApiResource\ErrorCollection|\Drupal\Core\Field\EntityReferenceFieldItemListInterface $data
+   * @param ResourceIdentifierInterface|Data|ErrorCollection|EntityReferenceFieldItemListInterface $data
    *   The data to normalize. It can be either a ResourceObject, or a stand-in
    *   for one, or a collection of the same.
-   * @param \Drupal\wotapi\WotApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   A collection of links to resources related to the top-level document.
    */
   public function __construct($data, LinkCollection $links) {
@@ @@
   /**
    * Gets the data.
    *
-   * @return \Drupal\wotapi\WotApiResource\ResourceObject|\Drupal\wotapi\WotApiResource\Data|\Drupal\wotapi\WotApiResource\LabelOnlyResourceObject|\Drupal\wotapi\WotApiResource\ErrorCollection
+   * @return ResourceObject|Data|LabelOnlyResourceObject|ErrorCollection
    *   The data.
    */
   public function getData() {
@@ @@
   /**
    * Gets the links.
    *
-   * @return \Drupal\wotapi\WotApiResource\LinkCollection
+   * @return LinkCollection
    *   The top-level links.
    */
   public function getLinks() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/wotapi/src/WotApiResource/ResourceObjectData.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * ResourceObjectData constructor.
    *
-   * @param \Drupal\wotapi\WotApiResource\ResourceObject[]|\Drupal\wotapi\Exception\EntityAccessDeniedHttpException[] $data
+   * @param ResourceObject[]|EntityAccessDeniedHttpException[] $data
    *   Resource objects that are the primary data for the response.
    * @param int $cardinality
    *   The number of resources that this collection may contain.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/wotapi/src/WotApiResource/ResourceObject.php:35

    ---------- begin diff ----------
@@ @@
    * do not have real fields, so in that case, this will be an array of values
    * for config entity attributes.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface[]|mixed[]
+   * @var FieldItemListInterface[]|mixed[]
    */
   protected $fields;

@@ @@
   /**
    * The resource object's links.
    *
-   * @var \Drupal\wotapi\WotApiResource\LinkCollection
+   * @var LinkCollection
    */
   protected $links;

@@ @@
    * Field_switch(source_field)
    *   - target:$this(OnOffProperty)
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $source_field;

@@ @@
   /**
    * ResourceObject constructor.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   The cacheability for the resource object.
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type of the resource object.
    * @param string $id
    *   The resource object's ID.
    * @param array $fields
    *   An array of the resource object's fields, keyed by public field name.
-   * @param \Drupal\wotapi\WotApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   The links for the resource object.
    */
   public function __construct(CacheableDependencyInterface $cacheability, ResourceType $resource_type, $id, array $fields, LinkCollection $links) {
@@ @@
   /**
    * Creates a new ResourceObject from an entity.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type of the resource object.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be represented by this resource object.
-   * @param \Drupal\wotapi\WotApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   (optional) Any links for the resource object, if a `self` link is not
    *   provided, one will be automatically added if the resource is locatable
    *   and is not an internal entity.
@@ @@
    * @param string $public_field_name
    *   A public field name.
    *
-   * @return mixed|\Drupal\Core\Field\FieldItemListInterface|null
+   * @return mixed|FieldItemListInterface|null
    *   The field or NULL if the resource object does not have the given field.
    *
    * @see ::extractFields()
@@ @@
   /**
    * Gets the ResourceObject's links.
    *
-   * @return \Drupal\wotapi\WotApiResource\LinkCollection
+   * @return LinkCollection
    *   The resource object's links.
    */
   public function getLinks() {
@@ @@
   /**
    * Gets the ResourceObject's thing.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface
+   * @return FieldItemListInterface
    *   The resource object's $source_field.
    */
   public function getSourceField() {
@@ @@
   /**
    * Sets thing; useful for value object constructors.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $source_field
+   * @param FieldItemListInterface $source_field
    *   The resource object's $source_field.
    *
    * @return $this
@@ @@
   /**
    * Gets a Url for the ResourceObject.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL for the identified resource object.
    *
    * @throws \LogicException
@@ @@
   /**
    * Extracts the entity's fields.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type of the given entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity from which fields should be extracted.
    *
-   * @return mixed|\Drupal\Core\Field\FieldItemListInterface[]
+   * @return mixed|FieldItemListInterface[]
    *   If the resource object represents a content entity, the fields will be
    *   objects satisfying FieldItemListInterface. If it represents a config
    *   entity, the fields will be scalar values or arrays.
@@ @@
   /**
    * Builds a LinkCollection for the given entity.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type of the given entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build links.
-   * @param \Drupal\wotapi\WotApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   (optional) Any extra links for the resource object, if a `self` link is
    *   not provided, one will be automatically added if the resource is
    *   locatable and is not an internal entity.
    *
-   * @return \Drupal\wotapi\WotApiResource\LinkCollection
+   * @return LinkCollection
    *   The built links.
    */
   protected static function buildLinksFromEntity(ResourceType $resource_type, EntityInterface $entity, LinkCollection $links) {
@@ @@
   /**
    * Extracts a content entity's fields.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type of the given entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The config entity from which fields should be extracted.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface[]
+   * @return FieldItemListInterface[]
    *   The fields extracted from a content entity.
    */
   protected static function extractContentEntityFields(ResourceType $resource_type, ContentEntityInterface $entity) {
@@ @@
   /**
    * Determines the entity type's (internal) label field name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity from which fields should be extracted.
    *
    * @return string
@@ @@
   /**
    * Extracts a config entity's fields.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type of the given entity.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The config entity from which fields should be extracted.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/wotapi/src/WotApiResource/ResourceIdentifierTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\WotApiResource;

+use Drupal\wotapi\ResourceType\ResourceType;
 /**
  * Used to associate an object like an exception to a particular resource.
  *
@@ @@
   /**
    * A ResourceIdentifier object.
    *
-   * @var \Drupal\wotapi\WotApiResource\ResourceIdentifier
+   * @var ResourceIdentifier
    */
   protected $resourceIdentifier;

@@ @@
   /**
    * The WOT:API resource type of of the identified resource object.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceType
+   * @var ResourceType
    */
   protected $resourceType;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/wotapi/src/WotApiResource/ResourceIdentifierInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\WotApiResource;

+use Drupal\wotapi\ResourceType\ResourceType;
 /**
  * An interface for identifying a related resource.
  *
@@ @@
   /**
    * Gets the resource identifier's WOT:API resource type.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType
+   * @return ResourceType
    *   The WOT:API resource type.
    */
   public function getResourceType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/wotapi/src/WotApiResource/ResourceIdentifier.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * The WOT:API resource type.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceType
+   * @var ResourceType
    */
   protected $resourceType;

@@ @@
   /**
    * ResourceIdentifier constructor.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType|string $resource_type
+   * @param ResourceType|string $resource_type
    *   The WOT:API resource type or a WOT:API resource type name.
    * @param string $id
    *   The resource ID.
@@ @@
   /**
    * Creates a ResourceIdentifier object.
    *
-   * @param \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $item
+   * @param EntityReferenceItem $item
    *   The entity reference field item from which to create the relationship.
    * @param int $arity
    *   (optional) The arity of the relationship.
@@ @@
   /**
    * Creates an array of ResourceIdentifier objects.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items
+   * @param EntityReferenceFieldItemListInterface $items
    *   The entity reference field items from which to create the relationship
    *   array.
    *
@@ @@
   /**
    * Creates an array of ResourceIdentifier objects with arity on every value.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items
+   * @param EntityReferenceFieldItemListInterface $items
    *   The entity reference field items from which to create the relationship
    *   array.
    *
@@ @@
   /**
    * Creates a ResourceIdentifier object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity from which to create the resource identifier.
    *
    * @return self
@@ @@
   /**
    * Helper method to determine which field item property contains an entity.
    *
-   * @param \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $item
+   * @param EntityReferenceItem $item
    *   The entity reference item for which to determine the entity property
    *   name.
    *
@@ @@
   /**
    * Creates a ResourceIdentifier for a NULL or FALSE entity reference item.
    *
-   * @param \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $item
+   * @param EntityReferenceItem $item
    *   The entity reference field item.
    *
    * @return self
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/wotapi/src/WotApiResource/RelationshipData.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * RelationshipData constructor.
    *
-   * @param \Drupal\wotapi\WotApiResource\ResourceIdentifier[] $data
+   * @param ResourceIdentifier[] $data
    *   Resource objects that are the primary data for the response.
    * @param int $cardinality
    *   The number of ResourceIdentifiers that this collection may contain.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/wotapi/src/WotApiResource/OmittedData.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * OmittedData constructor.
    *
-   * @param \Drupal\wotapi\Exception\EntityAccessDeniedHttpException[] $data
+   * @param EntityAccessDeniedHttpException[] $data
    *   Resource objects that are the primary data for the response.
    *
    * @see \Drupal\wotapi\WotApiResource\Data::__construct
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/wotapi/src/WotApiResource/LinkCollection.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The links in the collection, keyed by unique strings.
    *
-   * @var \Drupal\wotapi\WotApiResource\Link[]
+   * @var Link[]
    */
   protected $links;

@@ @@
    * All links objects exist within a context object. Links form a relationship
    * between a source IRI and target IRI. A context is the link's source.
    *
-   * @var \Drupal\wotapi\WotApiResource\WotApiDocumentTopLevel|\Drupal\wotapi\WotApiResource\ResourceObject
+   * @var WotApiDocumentTopLevel|ResourceObject
    *
    * @see https://tools.ietf.org/html/rfc8288#section-3.2
    */
@@ @@
   /**
    * LinkCollection constructor.
    *
-   * @param \Drupal\wotapi\WotApiResource\Link[] $links
+   * @param Link[] $links
    *   An associated array of key names and WOT:API Link objects.
-   * @param \Drupal\wotapi\WotApiResource\WotApiDocumentTopLevel|\Drupal\wotapi\WotApiResource\ResourceObject $context
+   * @param WotApiDocumentTopLevel|ResourceObject $context
    *   (internal use only) The context object. Use the self::withContext()
    *   method to establish a context. This should be done automatically when
    *   a LinkCollection is passed into a context object.
@@ @@
    * @param string $key
    *   A key for the link. If the key already exists and the link shares an href
    *   with an existing link with that key, those links will be merged together.
-   * @param \Drupal\wotapi\WotApiResource\Link $new_link
+   * @param Link $new_link
    *   The link to insert.
    *
    * @return static
@@ @@
   /**
    * Establishes a new context for a LinkCollection.
    *
-   * @param \Drupal\wotapi\WotApiResource\WotApiDocumentTopLevel|\Drupal\wotapi\WotApiResource\ResourceObject $context
+   * @param WotApiDocumentTopLevel|ResourceObject $context
    *   The new context object.
    *
    * @return static
@@ @@
   /**
    * Gets the LinkCollection's context object.
    *
-   * @return \Drupal\wotapi\WotApiResource\WotApiDocumentTopLevel|\Drupal\wotapi\WotApiResource\ResourceObject
+   * @return WotApiDocumentTopLevel|ResourceObject
    *   The LinkCollection's context.
    */
   public function getContext() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/wotapi/src/WotApiResource/Link.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The link URI.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $uri;

@@ @@
   /**
    * WOT:API Link constructor.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheability
+   * @param CacheableMetadata $cacheability
    *   Any cacheability metadata associated with the link. For example, a
    *   'call-to-action' link might reference a registration resource if an event
    *   has vacancies or a wait-list resource otherwise. Therefore, the link's
    *   cacheability might be depend on a certain entity's values other than the
    *   entity on which the link will appear.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The Url object for the link.
    * @param string[] $link_relation_types
    *   An array of registered or extension RFC8288 link relation types.
@@ @@
   /**
    * Gets the link's URI.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The link's URI as a Url object.
    */
   public function getUri() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/wotapi/src/WotApiResource/LabelOnlyResourceObject.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity represented by this resource object.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Gets the decorated entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The label for which to only normalize its label.
    */
   public function getEntity() {
@@ @@
   /**
    * Sets the underlying entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    */
   protected function setEntity(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/wotapi/src/WotApiResource/ErrorCollection.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP exceptions.
    *
-   * @var \Symfony\Component\HttpKernel\Exception\HttpExceptionInterface[]
+   * @var HttpExceptionInterface[]
    */
   protected $errors;

@@ @@
   /**
    * Instantiates an ErrorCollection object.
    *
-   * @param \Symfony\Component\HttpKernel\Exception\HttpExceptionInterface[] $errors
+   * @param HttpExceptionInterface[] $errors
    *   The errors.
    */
   public function __construct(array $errors) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/wotapi/src/WotApiResource/Data.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\WotApiResource;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\wotapi\Exception\EntityAccessDeniedHttpException;

@@ @@
   /**
    * Various representations of WOT:API objects.
    *
-   * @var \Drupal\wotapi\WotApiResource\ResourceIdentifierInterface[]
+   * @var ResourceIdentifierInterface[]
    */
   protected $data;

@@ @@
   /**
    * Instantiates a Data object.
    *
-   * @param \Drupal\wotapi\WotApiResource\ResourceIdentifierInterface[] $data
+   * @param ResourceIdentifierInterface[] $data
    *   The resources or resource identifiers for the collection.
    * @param int $cardinality
    *   The number of resources that this collection may contain. Related
@@ @@
   /**
    * Returns the collection as an array.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The array of entities.
    */
   public function toArray() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/wotapi/src/ThingAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi;

+use Drupal\wotapi\Entity\ThingInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\wotapi\Entity\ThingInterface $entity */
+    /** @var ThingInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view thing entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/wotapi/src/Serializer/Serializer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Serializer;

+use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
 use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Symfony\Component\Serializer\Serializer as SymfonySerializer;

@@ @@
   /**
    * A normalizer to fall back on when WOT:API cannot normalize an object.
    *
-   * @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface
+   * @var NormalizerInterface|DenormalizerInterface
    */
   protected $fallbackNormalizer;

@@ @@
    * This normalizer will be attempted when WOT:API has no applicable
    * normalizer.
    *
-   * @param \Symfony\Component\Serializer\Normalizer\NormalizerInterface $normalizer
+   * @param NormalizerInterface $normalizer
    *   The secondary normalizer.
    */
   public function setFallbackNormalizer(NormalizerInterface $normalizer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/wotapi/src/Routing/Routes.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * The WOT:API resource type repository.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * Instantiates a Routes object.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The WOT:API resource type repository.
    * @param string[] $authentication_providers
    *   The authentication providers, keyed by ID.
@@ @@
   /**
    * Gets applicable resource routes for a WOT:API resource type.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type for which to get the routes.
    * @param string $path_prefix
    *   The root path prefix.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   A collection of routes for the given resource type.
    */
   protected static function getRoutesForResourceType(ResourceType $resource_type, $path_prefix) {
@@ @@
   /**
    * Gets a route collection for the given resource type.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type for which the route collection should be created.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   The route collection.
    */
   protected static function getIndividualRoutesForResourceType(ResourceType $resource_type) {
@@ @@
    * overrides any previous values. Therefore, it is tedious to add a single
    * parameter while keeping those that are already set.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to which the parameter is to be added.
    * @param string $name
    *   The name of the parameter.
@@ @@
   /**
    * Get a unique route name for the WOT:API resource type and route type.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type for which the route collection should be created.
    * @param string $route_type
    *   The route type. E.g. 'individual' or 'collection'.
@@ @@
   /**
    * Determines if an array of resource types has any non-internal ones.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The resource types to check.
    *
    * @return bool
@@ @@
   /**
    * Determines if an array of resource types lists non-internal "file" ones.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The resource types to check.
    *
    * @return bool
@@ @@
    *   An array of parameters. These may be obtained from a route's
    *   parameter defaults or from a request object.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType|null
+   * @return ResourceType|null
    *   The resource type, NULL if one cannot be found from the given parameters.
    */
   public static function getResourceTypeNameFromParameters(array $parameters) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/wotapi/src/ResourceType/ResourceTypeRepositoryInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Gets all WOT:API resource types.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType[]
+   * @return ResourceType[]
    *   The set of all WOT:API resource types in this Drupal instance.
    */
   public function all();
@@ @@
    *   The ID for the bundle to find. If the entity type does not have a bundle,
    *   then the entity type ID again.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType
+   * @return ResourceType
    *   The requested WOT:API resource type, if it exists. NULL otherwise.
    *
    * @see \Drupal\Core\Entity\EntityInterface::bundle()
@@ @@
    * @param string $type_name
    *   The public typename of a WOT:API resource.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType|null
+   * @return ResourceType|null
    *   The resource type, or NULL if none found.
    */
   public function getByTypeName($type_name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/wotapi/src/ResourceType/ResourceTypeRepository.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The bundle manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The static cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $staticCache;

@@ @@
   /**
    * Instantiates a ResourceTypeRepository object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $static_cache
+   * @param CacheBackendInterface $static_cache
    *   The static cache backend.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_bundle_info, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $static_cache) {
@@ @@
   /**
    * Creates a ResourceType value object for the given entity type + bundle.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to create a WOT:API resource type for.
    * @param string $bundle
    *   The entity type bundle to create a WOT:API resource type for.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType
+   * @return ResourceType
    *   A WOT:API resource type.
    */
   protected function createResourceType(EntityTypeInterface $entity_type, $bundle) {
@@ @@
    *
    * @param string[] $field_names
    *   All field names on a bundle of the given entity type.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type for which to get the field mapping.
    * @param string $bundle
    *   The bundle to assess.
@@ @@
   /**
    * Gets all field names for a given entity type and bundle.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type for which to get all field names.
    * @param string $bundle
    *   The bundle for which to get all field names.
@@ @@
   /**
    * Whether an entity type + bundle maps to a mutable resource type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to assess.
    * @param string $bundle
    *   The bundle to assess.
@@ @@
   /**
    * Whether an entity type + bundle maps to a locatable resource type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to assess.
    * @param string $bundle
    *   The bundle to assess.
@@ @@
   /**
    * Whether an entity type is a versionable resource type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to assess.
    *
    * @return bool
@@ @@
    *
    * This method has no affect after being called once.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type repository.
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   A list of WOT:API resource types.
    *
    * @return array
@@ @@
   /**
    * Get relatable resource types from a field definition.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition from which to calculate relatable WOT:API resource
    *   types.
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   A list of WOT:API resource types.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType[]
+   * @return ResourceType[]
    *   The WOT:API resource types with which the given field may have a
    *   relationship.
    */
@@ @@
   /**
    * Determines if a given field definition is a reference field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition to inspect.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/wotapi/src/PropertyAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi;

+use Drupal\wotapi\Entity\PropertyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\wotapi\Entity\PropertyInterface $entity */
+    /** @var PropertyInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view property entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/wotapi/src/Plugin/WotapiActionManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/wotapi/src/Plugin/WotapiActionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Plugin;

+use Drupal\wotapi\Object\Request;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\wotapi\ExecutableWithParamsInterface;
@@ @@
   /**
    * The RPC request for the current invocation.
    *
-   * @var \Drupal\wotapi\Object\Request
+   * @var Request
    */
   private $rpcRequest;

@@ @@
   /**
    * The RPC request for the current invocation.
    *
-   * @return \Drupal\wotapi\Object\Request
+   * @return Request
    *   The request object.
    */
   protected function currentRequest() {
@@ @@
   /**
    * The RPC method definition for the current invocation.
    *
-   * @return \Drupal\wotapi\WotapiActionInterface
+   * @return WotapiActionInterface
    *   The method definitionm.
    */
   protected function methodDefinition() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/wotapi/src/ParameterFactoryInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * An array representing the JSON Schema for acceptable input to the factory.
    *
-   * @param \Drupal\wotapi\ParameterDefinitionInterface $parameter_definition
+   * @param ParameterDefinitionInterface $parameter_definition
    *   A parameter definition for the method parameter being constructed.
    *
    * @return array
@@ @@
    * class, but not the container itself. Every call to this method must return
    * a new instance of this class; that is, it may not implement a singleton.
    *
-   * @param \Drupal\wotapi\ParameterDefinitionInterface $definition
+   * @param ParameterDefinitionInterface $definition
    *   The parameter definition for parameters of this type.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
    */
   public static function create(ParameterDefinitionInterface $definition, ContainerInterface $container);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/wotapi/src/ParameterDefinitionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Interface to implement a parameter definition.
  */
@@ @@
   /**
    * The description of the parameter for the method.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The description.
    */
   public function getDescription();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/wotapi/src/ParamConverter/ResourceTypeConverter.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The WOT:API resource type repository.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * ResourceTypeConverter constructor.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The WOT:API resource type repository.
    */
   public function __construct(ResourceTypeRepositoryInterface $resource_type_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/wotapi/src/ParamConverter/EntityUuidConverter.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Injects the language manager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager to get the current content language.
    */
   public function setLanguageManager(LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/wotapi/src/Object/Response.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The error.
    *
-   * @var \Drupal\wotapi\Object\Error
+   * @var Error
    */
   protected $error;

@@ @@
    *   The response ID. Must match the ID of the generating request.
    * @param mixed $result
    *   A result value. Must not be provided if an error is to be provided.
-   * @param \Drupal\wotapi\Object\Error $error
+   * @param Error $error
    *   An error object if the response resulted in an error. Must not be
    *   provided if a result was provided.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/wotapi/src/Object/Request.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The request parameters, if any.
    *
-   * @var \Drupal\wotapi\Object\ParameterBag|null
+   * @var ParameterBag|null
    */
   protected $params;

@@ @@
    *   Indicates if the request is part of a batch or not.
    * @param mixed|false $id
    *   A string, number or NULL ID. FALSE for notification requests.
-   * @param \Drupal\wotapi\Object\ParameterBag|null $params
+   * @param ParameterBag|null $params
    *   The request parameters, if any.
    */
   public function __construct($acton, $in_batch = FALSE, $id = FALSE, ParameterBag $params = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/wotapi/src/Object/Error.php:65

    ---------- begin diff ----------
@@ @@
    * @param mixed $data
    *   (optional) A primitive or structured value that contains additional
    *   information about the error. This may be omitted.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   (optional) A cacheable dependency.
    */
   public function __construct($code, $message, $data = NULL, CacheableDependencyInterface $cacheability = NULL) {
@@ @@
    *
    * @param mixed $data
    *   More specific information about the error.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   (optional) A cacheable dependency.
    *
    * @return static
@@ @@
    *
    * @param string $method_name
    *   The name of the missing method.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   (optional) A cacheable dependency.
    *
    * @return static
@@ @@
    *
    * @param mixed $data
    *   More specific information about the error.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   (optional) A cacheable dependency.
    *
    * @return static
@@ @@
    *
    * @param mixed $data
    *   More specific information about the error.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   (optional) A cacheable dependency.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/wotapi/src/Normalizer/WotApiDocumentTopLevelNormalizer.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The WOT:API resource type repository.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * Constructs a WotApiDocumentTopLevelNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The WOT:API resource type repository.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ResourceTypeRepositoryInterface $resource_type_repository) {
@@ @@
   /**
    * Normalizes an error collection.
    *
-   * @param \Drupal\wotapi\WotApiResource\WotApiDocumentTopLevel $document
+   * @param WotApiDocumentTopLevel $document
    *   The document to normalize.
    * @param string $format
    *   The normalization format.
@@ @@
    * @param array $context
    *   The normalization context.
    *
-   * @return \Drupal\wotapi\Normalizer\Value\CacheableNormalization
+   * @return CacheableNormalization
    *   The normalized document.
    *
    * @todo: refactor this to use CacheableNormalization::aggregate in https://www.drupal.org/project/wotapi/issues/3036284.
@@ @@
   /**
    * Normalizes an entity reference field, i.e. a relationship document.
    *
-   * @param \Drupal\wotapi\WotApiResource\WotApiDocumentTopLevel $document
+   * @param WotApiDocumentTopLevel $document
    *   The document to normalize.
    * @param string $format
    *   The normalization format.
@@ @@
    * @param array $context
    *   The normalization context.
    *
-   * @return \Drupal\wotapi\Normalizer\Value\CacheableNormalization
+   * @return CacheableNormalization
    *   The normalized document.
    *
    * @todo: remove this in https://www.drupal.org/project/wotapi/issues/3036285.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/wotapi/src/Normalizer/Value/CacheableOmission.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * CacheableOmission constructor.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   Cacheability related to the omission of the normalization. For example,
    *   if a field is omitted because of an access result that varies by the
    *   `user.permissions` cache context, we need to associate that information
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/wotapi/src/Normalizer/Value/CacheableNormalization.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * CacheableNormalization constructor.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $cacheability
+   * @param CacheableDependencyInterface $cacheability
    *   The cacheability metadata for the normalized data.
    * @param array|string|int|float|bool|null $normalization
    *   The normalized data. This value must not contain any
@@ @@
   /**
    * Converts the object to a CacheableOmission if the normalization is empty.
    *
-   * @return self|\Drupal\wotapi\Normalizer\Value\CacheableOmission
+   * @return self|CacheableOmission
    *   A CacheableOmission if the normalization is considered empty, self
    *   otherwise.
    */
@@ @@
   /**
    * Gets a new CacheableNormalization with an additional dependency.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $dependency
+   * @param CacheableDependencyInterface $dependency
    *   The new cacheable dependency.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/wotapi/src/Normalizer/UnprocessableHttpEntityExceptionNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Normalizer;

+use Symfony\Component\Validator\ConstraintViolation;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\wotapi\Exception\UnprocessableHttpEntityException;
 use Symfony\Component\HttpKernel\Exception\HttpException;
@@ @@
     $violations = $exception->getViolations();
     $entity_violations = $violations->getEntityViolations();
     foreach ($entity_violations as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+      /** @var ConstraintViolation $violation */
       $error['detail'] = 'Entity is not valid: '
         . $violation->getMessage();
       $error['source']['pointer'] = '/data';
@@ @@
         ->getCardinality();

       foreach ($field_violations as $violation) {
-        /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+        /** @var ConstraintViolation $violation */
         $error['detail'] = $violation->getPropertyPath() . ': '
           . PlainTextOutput::renderFromHtml($violation->getMessage());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/wotapi/src/Normalizer/ResourceObjectNormalizer.php:198

    ---------- begin diff ----------
@@ @@
    * @param string $format
    *   The serialization format.
    *
-   * @return \Drupal\wotapi\Normalizer\Value\CacheableNormalization
+   * @return CacheableNormalization
    *   The normalized value.
    */
   protected function serializeField($field, array $context, $format) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/wotapi/src/Normalizer/ResourceIdentifierNormalizer.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * RelationshipNormalizer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/wotapi/src/Normalizer/PropertiesFieldNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Normalizer;

+use Drupal\wotapi\ResourceType\ResourceType;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Gets the links for the relationship.
    *
-   * @param \Drupal\wotapi\WotApiResource\ResourceObject $relationship_context
+   * @param ResourceObject $relationship_context
    *   The WOT:API resource object context of the relationship.
    * @param string $relationship_field_name
    *   The internal relationship field name.
@@ @@
   /**
    * Determines if a given list of resource types contains a non-internal type.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The WOT:API resource types to evaluate.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/wotapi/src/Normalizer/LinkCollectionNormalizer.php:80

    ---------- begin diff ----------
@@ @@
   /**
    * Hashes a link by its href.
    *
-   * @param \Drupal\wotapi\WotApiResource\Link $link
+   * @param Link $link
    *   A link to be hashed.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/wotapi/src/Normalizer/HttpExceptionNormalizer.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The current user making the request.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * HttpExceptionNormalizer constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(AccountInterface $current_user) {
@@ @@
   /**
    * Builds the normalized WOT:API error objects for the response.
    *
-   * @param \Symfony\Component\HttpKernel\Exception\HttpException $exception
+   * @param HttpException $exception
    *   The Exception.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/wotapi/src/Normalizer/FieldNormalizer.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Helper function to normalize field items.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field object.
    * @param string $format
    *   The format.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/wotapi/src/Normalizer/FieldItemNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Normalizer;

+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldItemInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * FieldItemNormalizer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * catch it, and pass it to the value object that WOT:API uses.
    */
   public function normalize($field_item, $format = NULL, array $context = []) {
-    /** @var \Drupal\Core\TypedData\TypedDataInterface $property */
+    /** @var TypedDataInterface $property */
     $values = [];
     $context[CacheableNormalizerInterface::SERIALIZATION_CONTEXT_CACHEABILITY] = new CacheableMetadata();
     if (!empty($field_item->getProperties(TRUE))) {
@@ @@
   /**
    * Gets a field item instance for use with SerializedColumnNormalizerTrait.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type of the entity being denormalized.
-   * @param \Drupal\Core\Field\TypedData\FieldItemDataDefinitionInterface $item_definition
+   * @param FieldItemDataDefinitionInterface $item_definition
    *   The field item definition of the instance to get.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldItemInstance(ResourceType $resource_type, FieldItemDataDefinitionInterface $item_definition) {
     if ($bundle_key = $this->entityTypeManager->getDefinition($resource_type->getEntityTypeId())
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/wotapi/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Normalizer;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\wotapi\Exception\EntityAccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\HttpException;
@@ @@

     if ($exception instanceof EntityAccessDeniedHttpException) {
       $error = $exception->getError();
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $error['entity'];
       $pointer = $error['pointer'];
       $reason = $error['reason'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/wotapi/src/Normalizer/AnnotationNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Normalizer;

+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Drupal\Component\Annotation\AnnotationInterface;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\wotapi\Annotation\WotapiAction;
@@ @@
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface
+   * @var NormalizerInterface
    */
   protected $serializer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/wotapi/src/HandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi;

+use Drupal\wotapi\Object\Request;
+use Drupal\wotapi\Exception\WotapiActionException;
 use Drupal\Core\Session\AccountInterface;

 /**
@@ @@
   /**
    * Executes a batch of remote procedure calls.
    *
-   * @param \Drupal\wotapi\Object\Request[] $requests
+   * @param Request[] $requests
    *   The JSON-RPC requests.
    *
    * @return array
    *   The JSON-RPC responses, if any. Notifications are not returned.
    *
-   * @throws \Drupal\wotapi\Exception\WotapiActionException
+   * @throws WotapiActionException
    */
   public function batch(array $requests);

@@ @@
    * @param string $name
    *   The method name for which support should be determined.
    *
-   * @return \Drupal\wotapi\WotapiActionInterface|null
+   * @return WotapiActionInterface|null
    *   The method definition.
    */
   public function getAction($name);
@@ @@
   /**
    * The methods which are available to the given account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional). The account for which to get available methods. Defaults to
    *   the current user.
    *
-   * @return \Drupal\wotapi\WotapiActionInterface[]
+   * @return WotapiActionInterface[]
    *   The methods.
    */
   public function availableActions(AccountInterface $account = NULL);
@@ @@
   /**
    * The methods supported by the handler.
    *
-   * @return \Drupal\wotapi\WotapiActionInterface[]
+   * @return WotapiActionInterface[]
    *   The methods.
    */
   public function supportedActions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


44) modules/contrib/wotapi/src/Handler.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The JSON-RPC method plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $methodManager;

@@ @@
   /**
    * Handler constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $method_manager
+   * @param PluginManagerInterface $method_manager
    *   The plugin manager for the JSON RPC methods.
    */
   public function __construct(PluginManagerInterface $method_manager) {
@@ @@
   /**
    * Executes an RPC call and returns a JSON-RPC response.
    *
-   * @param \Drupal\wotapi\Object\Request $request
+   * @param Request $request
    *   The JSON-RPC request.
    *
-   * @return \Drupal\wotapi\Object\Response|null
+   * @return Response|null
    *   The JSON-RPC response.
    */
   protected function doRequest(Request $request) {
@@ @@
   /**
    * Gets an anonymous function which executes the RPC method.
    *
-   * @param \Drupal\wotapi\Object\Request $request
+   * @param Request $request
    *   The JSON-RPC request.
    *
-   * @return \Drupal\wotapi\Object\Response|null
+   * @return Response|null
    *   The JSON-RPC response.
    *
-   * @throws \Drupal\wotapi\Exception\WotapiActionException
+   * @throws WotapiActionException
    */
   protected function doExecution(Request $request) {
     if ($action = $this->getAction($request->getAction())) {
@@ @@
   /**
    * Gets an executable instance of an RPC method.
    *
-   * @param \Drupal\wotapi\WotapiActionInterface $method
+   * @param WotapiActionInterface $method
    *   The method definition.
    * @param array $configuration
    *   Method configuration.
@@ @@
    * @return object
    *   The executable method.
    *
-   * @throws \Drupal\wotapi\Exception\WotapiActionException
+   * @throws WotapiActionException
    *   In case of error.
    */
   protected function getExecutable(WotapiActionInterface $method, array $configuration) {
@@ @@
   /**
    * Check execution access.
    *
-   * @param \Drupal\wotapi\WotapiActionInterface $method
+   * @param WotapiActionInterface $method
    *   The method for which to check access.
    *
-   * @throws \Drupal\wotapi\Exception\WotapiActionException
+   * @throws WotapiActionException
    */
   protected function checkAccess(WotapiActionInterface $method) {
     // TODO: Add cacheability metadata here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


45) modules/contrib/wotapi/src/Form/ThingSettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/wotapi/src/Form/PropertyTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Form;

+use Drupal\wotapi\Entity\PropertyTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\wotapi\Entity\PropertyTypeInterface $wotapi_property_type */
+    /** @var PropertyTypeInterface $wotapi_property_type */
     $wotapi_property_type = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/wotapi/src/Form/PropertySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/wotapi/src/ExecutableWithParamsInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Executes the action with the parameters passed in.
    *
-   * @param \Drupal\wotapi\Object\ParameterBag $params
+   * @param ParameterBag $params
    *   The parameters.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


49) modules/contrib/wotapi/src/Exception/WotapiActionException.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The JSON-RPC error response for the exception.
    *
-   * @var \Drupal\wotapi\Object\Response
+   * @var Response
    *   The RPC response object.
    */
   protected $response;
@@ @@
   /**
    * JsonRpcException constructor.
    *
-   * @param \Drupal\wotapi\Object\Response $response
+   * @param Response $response
    *   The JSON-RPC error response object for the exception.
    * @param \Throwable $previous
    *   The previous exception.
@@ @@
   /**
    * The appropriate JSON-RPC error response for the exception.
    *
-   * @return \Drupal\wotapi\Object\Response
+   * @return Response
    *   The RPC response object.
    */
   public function getResponse() {
@@ @@
   /**
    * Constructs a JsonRpcException from an arbitrary error object.
    *
-   * @param \Drupal\wotapi\Object\Error $error
+   * @param Error $error
    *   The error which caused the exception.
    * @param mixed $id
    *   The request ID, if available.
@@ @@
   /**
    * Helper to build a JSON-RPC response object.
    *
-   * @param \Drupal\wotapi\Object\Error $error
+   * @param Error $error
    *   The error object.
    * @param mixed $id
    *   The request ID.
    *
-   * @return \Drupal\wotapi\Object\Response
+   * @return Response
    *   The RPC response object.
    */
   protected static function buildResponse(Error $error, $id = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/wotapi/src/Exception/UnprocessableHttpEntityException.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The constraint violations associated with this exception.
    *
-   * @var \Drupal\Core\Entity\EntityConstraintViolationListInterface
+   * @var EntityConstraintViolationListInterface
    */
   protected $violations;

@@ @@
   /**
    * Gets the constraint violations associated with this exception.
    *
-   * @return \Drupal\Core\Entity\EntityConstraintViolationListInterface
+   * @return EntityConstraintViolationListInterface
    *   The constraint violations.
    */
   public function getViolations() {
@@ @@
   /**
    * Sets the constraint violations associated with this exception.
    *
-   * @param \Drupal\Core\Entity\EntityConstraintViolationListInterface $violations
+   * @param EntityConstraintViolationListInterface $violations
    *   The constraint violations.
    */
   public function setViolations(EntityConstraintViolationListInterface $violations) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/wotapi/src/Exception/EntityAccessDeniedHttpException.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * EntityAccessDeniedHttpException constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity, or NULL when an entity is being created.
-   * @param \Drupal\Core\Access\AccessResultInterface $entity_access
+   * @param AccessResultInterface $entity_access
    *   The access result.
    * @param string $pointer
    *   (optional) The pointer.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/wotapi/src/EventSubscriber/WotApiRequestValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\wotapi\ResourceResponse;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\wotapi\WotApiSpec;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Drupal\Core\Http\Exception\CacheableBadRequestHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
   /**
    * Validates WOT:API requests.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     if ($request->getRequestFormat() !== 'api_json') {
       return;
@@ @@
   /**
    * Validates custom (implementation-specific) query parameter names.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request for which to validate WOT:API query parameters.
    *
-   * @return \Drupal\wotapi\ResourceResponse|null
+   * @return ResourceResponse|null
    *   A WOT:API resource response.
    *
    * @see http://jsonapi.org/format/#query-parameters
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


53) modules/contrib/wotapi/src/EventSubscriber/ResourceResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\wotapi\Normalizer\Value\CacheableNormalization;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\Serializer\SerializerInterface;

@@ @@
   /**
    * The serializer.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
   /**
    * Constructs a ResourceResponseSubscriber object.
    *
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer.
    */
   public function __construct(SerializerInterface $serializer) {
@@ @@
   /**
    * Serializes ResourceResponse responses' data, and removes that data.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof ResourceResponse) {
       return;
@@ @@
    * contexts), so instead, allow those to "leak" and collect them here in
    * a render context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\wotapi\ResourceResponse $response
+   * @param ResourceResponse $response
    *   The response from the WOT:API resource.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer to use.
    * @param string|null $format
    *   The response format, or NULL in case the response does not need a format,
@@ @@
   /**
    * Generates a top-level WOT:API normalization context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request from which the context can be derived.
    *
    * @return array
@@ @@
    * requires deserializing the PHP data when reading this response object from
    * cache, which can be very costly, and is unnecessary.
    *
-   * @param \Drupal\wotapi\ResourceResponse $response
+   * @param ResourceResponse $response
    *   A fully rendered resource response.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request for which this response is generated.
    *
-   * @return \Drupal\Core\Cache\CacheableResponse|\Symfony\Component\HttpFoundation\Response
+   * @return CacheableResponse|Response
    *   The flattened response.
    */
   protected static function flattenResponse(ResourceResponse $response, Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/wotapi/src/EventSubscriber/DefaultExceptionSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\wotapi\WotApiResource\ErrorCollection;
 use Drupal\wotapi\WotApiResource\WotApiDocumentTopLevel;
 use Drupal\wotapi\WotApiResource\LinkCollection;
@@ @@
 use Drupal\wotapi\ResourceResponse;
 use Drupal\wotapi\Routing\Routes;
 use Drupal\serialization\EventSubscriber\DefaultExceptionSubscriber as SerializationDefaultExceptionSubscriber;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpException;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     if (!$this->isWotApiExceptionEvent($event)) {
       return;
     }
-    if (($exception = $event->getException()) && !$exception instanceof HttpException) {
+    if (($exception = $event->getThrowable()) && !$exception instanceof HttpException) {
       $exception = new HttpException(500, $exception->getMessage(), $exception);
-      $event->setException($exception);
+      $event->setThrowable($exception);
     }

     $this->setEventResponse($event, $exception->getStatusCode());
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setEventResponse(GetResponseForExceptionEvent $event, $status) {
+  protected function setEventResponse(ExceptionEvent $event, $status) {
     /* @var \Symfony\Component\HttpKernel\Exception\HttpException $exception */
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     $response = new ResourceResponse(new WotApiDocumentTopLevel(new ErrorCollection([$exception]), new LinkCollection([])), $exception->getStatusCode(), $exception->getHeaders());
     $response->addCacheableDependency($exception);
     $event->setResponse($response);
@@ @@
    * The WOT:API format is supported if the format is explicitly set or the
    * request is for a known WOT:API route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $exception_event
+   * @param ExceptionEvent $exception_event
    *   The exception event.
    *
    * @return bool
    *   TRUE if it needs to be formatted using WOT:API. FALSE otherwise.
    */
-  protected function isWotApiExceptionEvent(GetResponseForExceptionEvent $exception_event) {
+  protected function isWotApiExceptionEvent(ExceptionEvent $exception_event) {
     $request = $exception_event->getRequest();
     $parameters = $request->attributes->all();
     return $request->getRequestFormat() === 'api_json' || (bool) Routes::getResourceTypeNameFromParameters($parameters);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/wotapi/src/Entity/EntityValidationTrait.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Verifies that an entity does not violate any validation constraints.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string[] $field_names
    *   (optional) An array of field names. If specified, filters the violations
@@ @@
    *   list to include only this set of fields. Defaults to NULL,
    *   which means that all violations will be reported.
    *
-   * @throws \Drupal\wotapi\Exception\UnprocessableHttpEntityException
+   * @throws UnprocessableHttpEntityException
    *   Thrown when violations remain after filtering.
    *
    * @see \Drupal\rest\Plugin\rest\resource\EntityResourceValidationTrait::validate()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


56) modules/contrib/wotapi/src/DependencyInjection/Compiler/RegisterSerializationClassesCompilerPass.php:55

    ---------- begin diff ----------
@@ @@
    * ID: 'serializer' -> 'wotapi.serializer'
    * Tag: 'normalizer' -> 'wotapi_normalizer'
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container to process.
    */
   public function process(ContainerBuilder $container) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/wotapi/src/Controller/EntityResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Controller;

+use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
+use Drupal\Core\Http\Exception\CacheableBadRequestHttpException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\wotapi\Object\Request as ActionRequest;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Serialization\Json;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * The resource type repository.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The WOT:API entity access checker.
    *
-   * @var \Drupal\wotapi\Access\EntityAccessChecker
+   * @var EntityAccessChecker
    */
   protected $entityAccessChecker;

@@ @@
   /**
    * The WOT:API field resolver.
    *
-   * @var \Drupal\wotapi\Context\FieldResolver
+   * @var FieldResolver
    */
   protected $fieldResolver;

@@ @@
   /**
    * The WOT:API serializer.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface
+   * @var SerializerInterface|DenormalizerInterface
    */
   protected $serializer;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * Instantiates a EntityResource object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity type field manager.
-   * @param \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The WOT:API resource type repository.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\wotapi\Access\EntityAccessChecker $entity_access_checker
+   * @param EntityAccessChecker $entity_access_checker
    *   The WOT:API entity access checker.
-   * @param \Drupal\wotapi\Context\FieldResolver $field_resolver
+   * @param FieldResolver $field_resolver
    *   The WOT:API field resolver.
-   * @param \Symfony\Component\Serializer\SerializerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface $serializer
+   * @param SerializerInterface|DenormalizerInterface $serializer
    *   The WOT:API serializer.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user account.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $field_manager, ResourceTypeRepositoryInterface $resource_type_repository, RendererInterface $renderer, EntityRepositoryInterface $entity_repository, EntityAccessChecker $entity_access_checker, FieldResolver $field_resolver, SerializerInterface $serializer, TimeInterface $time, AccountInterface $user) {
@@ @@
   /**
    * Gets the individual entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The loaded entity.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    *
-   * @throws \Drupal\wotapi\Exception\EntityAccessDeniedHttpException
+   * @throws EntityAccessDeniedHttpException
    *   Thrown when access to the entity is not allowed.
    */
   public function getIndividual(EntityInterface $entity, Request $request) {
@@ @@
   /**
    * Gets the collection of entities.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type for the request to be served.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    *
-   * @throws \Drupal\Core\Http\Exception\CacheableBadRequestHttpException
+   * @throws CacheableBadRequestHttpException
    *   Thrown when filtering on a config entity which does not support it.
    */
   public function getCollection(ResourceType $resource_type, Request $request) {
@@ @@
   /**
    * Gets the related resource.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type for the request to be served.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The requested entity.
    * @param string $related
    *   The related field name.
@@ @@
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function getRelated(ResourceType $resource_type, FieldableEntityInterface $entity, $related, Request $request) {
@@ @@
   /**
    * Gets the relationship of an entity.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The base WOT:API resource type for the request to be served.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The requested entity.
    * @param string $related
    *   The related field name.
@@ @@
    * @param int $response_code
    *   The response code. Defaults to 200.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function getProperties(ResourceType $resource_type, FieldableEntityInterface $entity, $related, Request $request, $response_code = 200) {
@@ @@
   /**
    * Gets the relationship of an entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The requested entity.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function getThingProperties(FieldableEntityInterface $entity, Request $request) {
@@ @@
   /**
    * Gets the relationship of an entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The requested entity.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function getThingActions(FieldableEntityInterface $entity, Request $request) {
@@ @@
   /**
    * Gets the relationship of an entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The requested entity.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function postThingActions(FieldableEntityInterface $entity, Request $request) {
@@ @@
   /**
    * Loads the entity targeted by a resource identifier.
    *
-   * @param \Drupal\wotapi\WotApiResource\ResourceIdentifier $resource_identifier
+   * @param ResourceIdentifier $resource_identifier
    *   A resource identifier.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity targeted by a resource identifier.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException | \Drupal\Core\Entity\EntityStorageException
+   * @throws BadRequestHttpException|EntityStorageException
    *   Thrown if the given resource identifier targets a resource type or
    *   resource which does not exist.
    */
@@ @@
    *   The response code.
    * @param array $headers
    *   An array of response headers.
-   * @param \Drupal\wotapi\WotApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   The URLs to which to link. A 'self' link is added automatically.
    * @param array $meta
    *   (optional) The top-level metadata.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   protected function buildWrappedResponse($data, Request $request, $response_code = 200, array $headers = [], LinkCollection $links = NULL) {
@@ @@
   /**
    * Respond with an entity collection.
    *
-   * @param \Drupal\wotapi\WotApiResource\ResourceObjectData $primary_data
+   * @param ResourceObjectData $primary_data
    *   The collection of entities.
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The request object.
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The base WOT:API resource type for the request to be served.
    *
-   * @return \Drupal\wotapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function respondWithCollection(ResourceObjectData $primary_data, Request $request, ResourceType $resource_type) {

@@ @@
   /**
    * Build a collection of the entities to respond with and access objects.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage to load the entities from.
    * @param int[] $ids
    *   An array of entity IDs, keyed by revision ID if the entity type is
@@ @@
   /**
    * Checks if the given entity exists.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to test existence.
    *
    * @return bool
    *   Whether the entity already has been created.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function entityExists(EntityInterface $entity) {
     $entity_storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


58) modules/contrib/wotapi/src/Controller/DiscoveryController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The JSON-RPC handler.
    *
-   * @var \Drupal\wotapi\HandlerInterface
+   * @var HandlerInterface
    */
   protected $handler;

@@ @@
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
   /**
    * List the available methods.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   The response object.
    */
   public function actions() {
@@ @@
   /**
    * Gets all accessible methods for the RPC handler.
    *
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $cacheability
+   * @param RefinableCacheableDependencyInterface $cacheability
    *   The cacheability information for the current request.
    *
-   * @return \Drupal\wotapi\WotapiActionInterface[]
+   * @return WotapiActionInterface[]
    *   The methods.
    */
   protected function getAvailableActions(RefinableCacheableDependencyInterface $cacheability) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/wotapi/src/Context/FieldResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Context;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * The entity type bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The WOT:API resource type repository service.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Creates a FieldResolver instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The bundle info service.
-   * @param \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The resource type repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ResourceTypeRepositoryInterface $resource_type_repository, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Get all item definitions from a set of resources types by a field name.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The resource types on which the field might exist.
    * @param string $field_name
    *   The field for which to retrieve field item definitions.
    *
-   * @return \Drupal\Core\TypedData\ComplexDataDefinitionInterface[]
+   * @return ComplexDataDefinitionInterface[]
    *   The found field item definitions.
    */
   protected function getFieldItemDefinitions(array $resource_types, $field_name) {
@@ @@
   /**
    * Resolves the UUID field name for a resource type.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type for which to get the UUID field name.
    *
    * @return string
@@ @@
    *
    * @param string $field_name
    *   The external field name.
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The resource types from which to get an internal name.
    *
    * @return string
@@ @@
    *
    * @param string $external_name
    *   The external field or member name.
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The resource types to test.
    *
    * @return bool
@@ @@
   /**
    * Get the referenceable ResourceTypes for a set of field definitions.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface[] $definitions
+   * @param FieldDefinitionInterface[] $definitions
    *   The resource types on which the reference field might exist.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType[]
+   * @return ResourceType[]
    *   The referenceable target resource types.
    */
   protected function getReferenceableResourceTypes(array $definitions) {
@@ @@
   /**
    * Build a list of resource types depending on which bundles are referenced.
    *
-   * @param \Drupal\Core\Field\TypedData\FieldItemDataDefinitionInterface $item_definition
+   * @param FieldItemDataDefinitionInterface $item_definition
    *   The reference definition.
    *
-   * @return \Drupal\wotapi\ResourceType\ResourceType[]
+   * @return ResourceType[]
    *   The list of resource types.
    */
   protected function collectResourceTypesForReference(FieldItemDataDefinitionInterface $item_definition) {
@@ @@
   /**
    * Whether the given resources can be traversed to other resources.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType[] $resource_types
+   * @param ResourceType[] $resource_types
    *   The resources types to evaluate.
    *
    * @return bool
@@ @@
   /**
    * Gets all unique reference property names from the given field definitions.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface[] $candidate_definitions
+   * @param ComplexDataDefinitionInterface[] $candidate_definitions
    *   A list of targeted field item definitions specified by the path.
    *
    * @return string[]
@@ @@
   /**
    * Determines the reference property name for the remaining unresolved parts.
    *
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface[] $candidate_definitions
+   * @param ComplexDataDefinitionInterface[] $candidate_definitions
    *   A list of targeted field item definitions specified by the path.
    * @param string[] $remaining_parts
    *   The remaining path parts.
@@ @@
    *
    * @param string $part
    *   The path part.
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface[] $candidate_definitions
+   * @param ComplexDataDefinitionInterface[] $candidate_definitions
    *   A list of targeted field item definitions which are specified by the
    *   path.
    *
@@ @@
    *
    * @param string $part
    *   The path part.
-   * @param \Drupal\Core\TypedData\ComplexDataDefinitionInterface[] $candidate_definitions
+   * @param ComplexDataDefinitionInterface[] $candidate_definitions
    *   A list of targeted field item definitions which are specified by the
    *   path.
    *
@@ @@
   /**
    * Gets the field access result for the 'view' operation.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The WOT:API resource type on which the field exists.
    * @param string $internal_field_name
    *   The field name for which access should be checked.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The 'view' access result.
    */
   protected function getFieldAccess(ResourceType $resource_type, $internal_field_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


60) modules/contrib/wotapi/src/Annotation/WotapiActionParameterDefinition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\wotapi\ParameterDefinitionInterface;

 /**
@@ @@
   /**
    * A description of the parameter.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


61) modules/contrib/wotapi/src/Access/RelationshipFieldAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultReasonInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * The WOT:API entity access checker.
    *
-   * @var \Drupal\wotapi\Access\EntityAccessChecker
+   * @var EntityAccessChecker
    */
   protected $entityAccessChecker;

@@ @@
   /**
    * RelationshipFieldAccess constructor.
    *
-   * @param \Drupal\wotapi\Access\EntityAccessChecker $entity_access_checker
+   * @param EntityAccessChecker $entity_access_checker
    *   The WOT:API entity access checker.
    */
   public function __construct(EntityAccessChecker $entity_access_checker) {
@@ @@
   /**
    * Checks access to the relationship field on the given route.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming HTTP request object.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Request $request, Route $route, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


62) modules/contrib/wotapi/src/Access/EntityAccessChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wotapi\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Access\AccessResultReasonInterface;
 use Drupal\content_moderation\Access\LatestRevisionCheck;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The WOT:API resource type repository.
    *
-   * @var \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The router.
    *
-   * @var \Symfony\Component\Routing\RouterInterface
+   * @var RouterInterface
    */
   protected $router;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *
    * This will be NULL unless the node module is installed.
    *
-   * @var \Drupal\node\Access\NodeRevisionAccessCheck|null
+   * @var NodeRevisionAccessCheck|null
    */
   protected $nodeRevisionAccessCheck = NULL;

@@ @@
    * is a temporary measure. WOT:API should not need to be aware of the
    * Content Moderation module.
    *
-   * @var \Drupal\content_moderation\Access\LatestRevisionCheck
+   * @var LatestRevisionCheck
    */
   protected $latestRevisionCheck = NULL;

@@ @@
   /**
    * EntityAccessChecker constructor.
    *
-   * @param \Drupal\wotapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The WOT:API resource type repository.
-   * @param \Symfony\Component\Routing\RouterInterface $router
+   * @param RouterInterface $router
    *   The router.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(ResourceTypeRepositoryInterface $resource_type_repository, RouterInterface $router, AccountInterface $account, EntityRepositoryInterface $entity_repository) {
@@ @@
    *
    * This is only called when node module is installed.
    *
-   * @param \Drupal\node\Access\NodeRevisionAccessCheck $node_revision_access_check
+   * @param NodeRevisionAccessCheck $node_revision_access_check
    *   The node revision access check service.
    */
   public function setNodeRevisionAccessCheck(NodeRevisionAccessCheck $node_revision_access_check) {
@@ @@
    *
    * This is only called when content_moderation module is installed.
    *
-   * @param \Drupal\content_moderation\Access\LatestRevisionCheck $latest_revision_check
+   * @param LatestRevisionCheck $latest_revision_check
    *   The latest revision access check service provided by the
    *   content_moderation module.
    *
@@ @@
   /**
    * Get the object to normalize and the access based on the provided entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to test access for.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account with which access should be checked. Defaults to
    *   the current user.
    *
-   * @return \Drupal\wotapi\WotApiResource\ResourceObject|\Drupal\wotapi\WotApiResource\LabelOnlyResourceObject|\Drupal\wotapi\Exception\EntityAccessDeniedHttpException
+   * @return ResourceObject|LabelOnlyResourceObject|EntityAccessDeniedHttpException
    *   The ResourceObject, a LabelOnlyResourceObject or an
    *   EntityAccessDeniedHttpException object if neither is accessible. All
    *   three possible return values carry the access result cacheability.
@@ @@
   /**
    * Checks access to the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which access should be evaluated.
    * @param string $operation
    *   The entity operation for which access should be evaluated.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account with which access should be checked. Defaults to
    *   the current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|\Drupal\Core\Access\AccessResultReasonInterface
+   * @return AccessResultInterface|AccessResultReasonInterface
    *   The access check result.
    */
   public function checkEntityAccess(EntityInterface $entity, $operation, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [ERROR] Could not process                                                      
         "modules/contrib/wotapi/src/Shaper/RpcRequestFactory.php" file, due to: 
         "Analyze error: "Class Shaper\Transformation\TransformationBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/wotapi/src/Controller/HttpController.php" file, due to: 
         "Analyze error: "Class Shaper\Transformation\TransformationBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

