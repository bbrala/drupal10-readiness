diff --git a/flag_lists.module b/flag_lists.module
index b7c5c09..96c7a49 100644
--- a/flag_lists.module
+++ b/flag_lists.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Contains flag_lists.module.
@@ -199,7 +200,7 @@ function flag_lists_form_alter(&$form, FormStateInterface $form_state, $form_id)
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function flag_lists_save_submit(array &$form, FormStateInterface $form_state) {
@@ -289,7 +290,7 @@ function flag_lists_flag_action_access($action, FlagInterface $flag, AccountInte
  * Implements hook_entity_type_alter().
  */
 function flag_lists_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['flag']->setListBuilderClass('Drupal\flag_lists\FlagListsFlagListBuilder');
 }
 
diff --git a/flag_lists.tokens.inc b/flag_lists.tokens.inc
index 997c469..9c553c0 100644
--- a/flag_lists.tokens.inc
+++ b/flag_lists.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\flag_lists\Entity\FlaggingCollection;
 /**
  * @file
  * Flag lists module tokens support.
@@ -60,7 +61,7 @@ function flag_lists_tokens($type, $tokens, array $data, array $options, Bubbleab
 
   if ($type == 'flagging_collection' && !empty($data['flagging_collection'])) {
 
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $flc */
+    /** @var FlaggingCollection $flc */
     $flc = $data['flagging_collection'];
     foreach ($tokens as $name => $original) {
       switch ($name) {
diff --git a/modules/flag_lists_actions/flag_lists_actions.install b/modules/flag_lists_actions/flag_lists_actions.install
index 5c541d5..f6289fd 100644
--- a/modules/flag_lists_actions/flag_lists_actions.install
+++ b/modules/flag_lists_actions/flag_lists_actions.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Action\ActionManager;
 /**
  * @file
  * Contains install and updates for the flag_lists_actions.
@@ -17,7 +18,7 @@ function flag_lists_actions_install() {
   $count = 0;
 
   // The action plugin cache needs to detect the new flag.
-  /** @var \Drupal\Core\Action\ActionManager $action_manager */
+  /** @var ActionManager $action_manager */
   $action_manager = \Drupal::service('plugin.manager.action');
   $action_manager->clearCachedDefinitions();
 
diff --git a/modules/flag_lists_actions/flag_lists_actions.module b/modules/flag_lists_actions/flag_lists_actions.module
index 0431184..bf9aa75 100644
--- a/modules/flag_lists_actions/flag_lists_actions.module
+++ b/modules/flag_lists_actions/flag_lists_actions.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Action\ActionManager;
 /**
  * @file
  * Contains flag_lists_actions.module.
@@ -44,7 +46,7 @@ function flag_lists_actions_form_alter(&$form, FormStateInterface $form_state, $
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function flag_lists_actions_save_submit(array &$form, FormStateInterface $form_state) {
@@ -59,7 +61,7 @@ function flag_lists_actions_save_submit(array &$form, FormStateInterface $form_s
  * Implements hook_entity_type_build().
  */
 function flag_lists_actions_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['action']
     ->setListBuilderClass('Drupal\flag_lists_actions\FlagListsActionsActionListBuilder');
 }
@@ -67,7 +69,7 @@ function flag_lists_actions_entity_type_build(array &$entity_types) {
 /**
  * Prepare for saving the Action.
  *
- * @param \Drupal\flag_lists\Entity\FlaggingCollection $entity
+ * @param FlaggingCollection $entity
  *   The entity to create an Action for.
  */
 function flag_lists_actions_prepare(FlaggingCollection $entity) {
@@ -77,7 +79,7 @@ function flag_lists_actions_prepare(FlaggingCollection $entity) {
     return;
   }
   // The action plugin cache needs to detect the new flag.
-  /** @var \Drupal\Core\Action\ActionManager $action_manager */
+  /** @var ActionManager $action_manager */
   $action_manager = \Drupal::service('plugin.manager.action');
   $action_manager->clearCachedDefinitions();
 
diff --git a/modules/flag_lists_actions/src/Controller/FlagListsActionsController.php b/modules/flag_lists_actions/src/Controller/FlagListsActionsController.php
index 1254752..4ebfdb8 100644
--- a/modules/flag_lists_actions/src/Controller/FlagListsActionsController.php
+++ b/modules/flag_lists_actions/src/Controller/FlagListsActionsController.php
@@ -17,7 +17,7 @@ class FlagListsActionsController extends ControllerBase implements ContainerInje
   /**
    * Add Flag Lists Actions.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create the Actions for.
    */
   public static function createActions(EntityInterface $entity) {
@@ -61,7 +61,7 @@ class FlagListsActionsController extends ControllerBase implements ContainerInje
   /**
    * Delete Flag Lists Actions.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to delete the Actions for.
    */
   public static function deleteActions(EntityInterface $entity) {
diff --git a/modules/flag_lists_actions/src/FlagListsActionsActionListBuilder.php b/modules/flag_lists_actions/src/FlagListsActionsActionListBuilder.php
index 99154a8..4583bdf 100644
--- a/modules/flag_lists_actions/src/FlagListsActionsActionListBuilder.php
+++ b/modules/flag_lists_actions/src/FlagListsActionsActionListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists_actions;
 
+use Drupal\flag_lists\FlagListsService;
 use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -22,22 +23,22 @@ class FlagListsActionsActionListBuilder extends ActionListBuilder {
   /**
    * The Flag Lists Service.
    *
-   * @var \Drupal\flag_lists\FlagListsService
+   * @var FlagListsService
    */
   protected $flagListsService;
 
   /**
    * Constructs a new ActionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The action storage.
-   * @param \Drupal\Core\Action\ActionManager $action_manager
+   * @param ActionManager $action_manager
    *   The action plugin manager.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists_service
+   * @param FlagListsServiceInterface $flag_lists_service
    *   The Flag Lists service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ActionManager $action_manager, FlagListsServiceInterface $flag_lists_service, ConfigFactoryInterface $config_factory) {
diff --git a/src/Access/FlagListItemAccess.php b/src/Access/FlagListItemAccess.php
index 1fe09bb..45aad8d 100644
--- a/src/Access/FlagListItemAccess.php
+++ b/src/Access/FlagListItemAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
 
@@ -15,10 +16,10 @@ class FlagListItemAccess {
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function customAccess(AccountInterface $account) {
diff --git a/src/Access/FlagListItemAccessControlHandler.php b/src/Access/FlagListItemAccessControlHandler.php
index 2971348..55beb31 100644
--- a/src/Access/FlagListItemAccessControlHandler.php
+++ b/src/Access/FlagListItemAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Access;
 
+use Drupal\flag_lists\Entity\FlagListItemInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class FlagListItemAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\flag_lists\Entity\FlagListItemInterface $entity */
+    /** @var FlagListItemInterface $entity */
     switch ($operation) {
       case 'view':
         if ($account->id() == $entity->getOwner()->id()) {
diff --git a/src/Access/FlagListsAccessCheck.php b/src/Access/FlagListsAccessCheck.php
index 0479f93..357be8b 100644
--- a/src/Access/FlagListsAccessCheck.php
+++ b/src/Access/FlagListsAccessCheck.php
@@ -18,14 +18,14 @@ class FlagListsAccessCheck implements AccessInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ -35,11 +35,11 @@ class FlagListsAccessCheck implements AccessInterface {
   /**
    * Checks access to the 'flag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
diff --git a/src/Access/FlaggingCollectionAccessControlHandler.php b/src/Access/FlaggingCollectionAccessControlHandler.php
index 21fd9ba..edc9d34 100644
--- a/src/Access/FlaggingCollectionAccessControlHandler.php
+++ b/src/Access/FlaggingCollectionAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Access;
 
+use Drupal\flag_lists\Entity\FlaggingCollectionInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class FlaggingCollectionAccessControlHandler extends EntityAccessControlHandler
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface $entity */
+    /** @var FlaggingCollectionInterface $entity */
     switch ($operation) {
       case 'view':
         if ($account->id() == $entity->getOwner()->id()) {
diff --git a/src/Access/UnFlagListsAccessCheck.php b/src/Access/UnFlagListsAccessCheck.php
index 31626cc..f2fb4d7 100644
--- a/src/Access/UnFlagListsAccessCheck.php
+++ b/src/Access/UnFlagListsAccessCheck.php
@@ -18,14 +18,14 @@ class UnFlagListsAccessCheck implements AccessInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ -35,11 +35,11 @@ class UnFlagListsAccessCheck implements AccessInterface {
   /**
    * Checks access to the 'unflag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
diff --git a/src/Controller/ActionLinkController.php b/src/Controller/ActionLinkController.php
index c06e884..2f44dc0 100644
--- a/src/Controller/ActionLinkController.php
+++ b/src/Controller/ActionLinkController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -27,7 +28,7 @@ class ActionLinkController implements ContainerInjectionInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
@@ -41,18 +42,18 @@ class ActionLinkController implements ContainerInjectionInterface {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists
+   * @param FlagListsServiceInterface $flag_lists
    *   The flag lists service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The Renderer service.
    */
   public function __construct(
@@ -81,21 +82,21 @@ class ActionLinkController implements ContainerInjectionInterface {
    *
    * In addition to this it also handles the creation of a FlagListItem.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|null
+   * @return AjaxResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
    * @see \Drupal\flag_lists\Entity\FlagListItem
    */
   public function flag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);
 
     try {
@@ -119,21 +120,21 @@ class ActionLinkController implements ContainerInjectionInterface {
    * In addition to this it also handles the deletion of the
    * related FlagListItem's.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return AjaxResponse|RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
    * @see \Drupal\flag_lists\Entity\FlagListItem
    */
   public function unflag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);
 
     try {
@@ -157,16 +158,16 @@ class ActionLinkController implements ContainerInjectionInterface {
    * The response is different from the Flag modules
    * response as we add the flagging collection Id as well.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $flag_list
    *   The flag list from the link.
    * @param string $message
    *   (optional) The message to flash.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The response object.
    *
    * @see \Drupal\flag_lists\Entity\FlaggingCollection
diff --git a/src/Controller/ActionLinkHelper.php b/src/Controller/ActionLinkHelper.php
index a8305c9..9795f1b 100644
--- a/src/Controller/ActionLinkHelper.php
+++ b/src/Controller/ActionLinkHelper.php
@@ -23,7 +23,7 @@ class ActionLinkHelper implements ContainerInjectionInterface {
   /**
    * Constructor.
    *
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists
+   * @param FlagListsServiceInterface $flag_lists
    *   The flag lists service.
    */
   public function __construct(
@@ -44,7 +44,7 @@ class ActionLinkHelper implements ContainerInjectionInterface {
   /**
    * Helper function for flag ActionLinks.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to flag.
    * @param string $entity_id
    *   The entity id to add the flag list item to.
@@ -69,7 +69,7 @@ class ActionLinkHelper implements ContainerInjectionInterface {
   /**
    * Helper function for unflag ActionLinks.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to unflag.
    * @param string $entity_id
    *   The entity id to remove the flag list item from.
diff --git a/src/Controller/ActionLinkNoJsController.php b/src/Controller/ActionLinkNoJsController.php
index 0950e2d..d5195fc 100644
--- a/src/Controller/ActionLinkNoJsController.php
+++ b/src/Controller/ActionLinkNoJsController.php
@@ -25,32 +25,32 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * The flag lists service.
    *
-   * @var \Drupal\flag_lists\FlagListsServiceInterface
+   * @var FlagListsServiceInterface
    */
   protected $flagListsService;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists
+   * @param FlagListsServiceInterface $flag_lists
    *   The flag lists service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ -76,20 +76,20 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
    */
   public function flag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);
 
     try {
@@ -110,20 +110,20 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * Performs a unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    * @param string $flag_list
    *   The flag list from the link.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
    */
   public function unflag(FlagInterface $flag, $entity_id, $flag_list) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->flagService->getFlaggableById($flag, $entity_id);
 
     try {
@@ -144,12 +144,12 @@ class ActionLinkNoJsController implements ContainerInjectionInterface {
   /**
    * Generates a response after the flag has been updated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $message
    *   The message to display.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response object.
    */
   private function generateResponse(EntityInterface $entity, $message) {
diff --git a/src/Controller/FlaggingCollectionController.php b/src/Controller/FlaggingCollectionController.php
index cbd5712..57c2195 100644
--- a/src/Controller/FlaggingCollectionController.php
+++ b/src/Controller/FlaggingCollectionController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Controller;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -53,13 +54,13 @@ class FlaggingCollectionController extends ControllerBase implements ContainerIn
   /**
    * Generates an overview table of older revisions of a Flagging collection .
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $flagging_collection
+   * @param FlaggingCollectionInterface $flagging_collection
    *   A Flagging collection  object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(FlaggingCollectionInterface $flagging_collection) {
     $account = $this->currentUser();
diff --git a/src/Entity/FlaggingCollectionInterface.php b/src/Entity/FlaggingCollectionInterface.php
index 18c6b11..fb418f8 100644
--- a/src/Entity/FlaggingCollectionInterface.php
+++ b/src/Entity/FlaggingCollectionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -98,7 +99,7 @@ interface FlaggingCollectionInterface extends RevisionableInterface, RevisionLog
   /**
    * Gets the Flagging collection revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/EventSubscriber/FlagForListSubscriber.php b/src/EventSubscriber/FlagForListSubscriber.php
index f7752ca..29de192 100644
--- a/src/EventSubscriber/FlagForListSubscriber.php
+++ b/src/EventSubscriber/FlagForListSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\flag_lists\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\flag\Event\FlagEvents;
 
@@ -32,7 +32,7 @@ class FlagForListSubscriber implements EventSubscriberInterface {
   /**
    * This is called whenever the flag.entity_flagged event is dispatched.
    *
-   * @param Symfony\Component\EventDispatcher\Event $flag_event
+   * @param Event $flag_event
    *   The response event.
    */
   public function flagListsEntityFlagged(Event $flag_event) {
@@ -51,7 +51,7 @@ class FlagForListSubscriber implements EventSubscriberInterface {
   /**
    * This is called whenever the flag.entity_unflagged event is dispatched.
    *
-   * @param Symfony\Component\EventDispatcher\Event $flag_events
+   * @param Event $flag_events
    *   The response events.
    */
   public function flagListsEntityUnflagged(Event $flag_events) {
diff --git a/src/FlagListItemListBuilder.php b/src/FlagListItemListBuilder.php
index d685e07..ebb3768 100644
--- a/src/FlagListItemListBuilder.php
+++ b/src/FlagListItemListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists;
 
+use Drupal\flag_lists\Entity\FlagListItem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -28,7 +29,7 @@ class FlagListItemListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\flag_lists\Entity\FlagListItem $entity */
+    /** @var FlagListItem $entity */
     $account = \Drupal::currentUser()->getAccount();
     $entity_id = $entity->getConnectedEntityId();
     $connectedEntity = \Drupal::entityTypeManager()
diff --git a/src/FlagListsFlagLinkBuilder.php b/src/FlagListsFlagLinkBuilder.php
index 97fcef4..2a42ab4 100644
--- a/src/FlagListsFlagLinkBuilder.php
+++ b/src/FlagListsFlagLinkBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists;
 
+use Drupal\flag\FlagLinkBuilder;
 use Drupal\flag\FlagLinkBuilderInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Url;
@@ -18,23 +19,23 @@ class FlagListsFlagLinkBuilder implements
   /**
    * The original flag link builder.
    *
-   * @var \Drupal\flag\FlagLinkBuilder
+   * @var FlagLinkBuilder
    */
   protected $flagLinkBuilder;
 
   /**
    * The flag lists service.
    *
-   * @var \Drupal\flag_lists\FlagListsServiceInterface
+   * @var FlagListsServiceInterface
    */
   protected $flagListsService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagLinkBuilderInterface $link_builder
+   * @param FlagLinkBuilderInterface $link_builder
    *   The original FlagLinkBuilder.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists_service
+   * @param FlagListsServiceInterface $flag_lists_service
    *   The Flag Lists Service.
    */
   public function __construct(FlagLinkBuilderInterface $link_builder,
diff --git a/src/FlagListsFlagListBuilder.php b/src/FlagListsFlagListBuilder.php
index eefe223..448bfab 100644
--- a/src/FlagListsFlagListBuilder.php
+++ b/src/FlagListsFlagListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists;
 
+use Drupal\flag_lists\Entity\FlaggingCollection;
 use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -24,7 +25,7 @@ class FlagListsFlagListBuilder extends FlagListBuilder {
    *
    * The type Config Factory injected into the service.
    *
-   * @var Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    *   The Injected Config Factory.
    */
   protected $configFactory;
@@ -32,7 +33,7 @@ class FlagListsFlagListBuilder extends FlagListBuilder {
   /**
    * The Flag Lists service injected into the List Builder.
    *
-   * @var Drupal\flag_lists\FlagListsService
+   * @var FlagListsService
    *   The Injected Flag Lists Service.
    */
   protected $flagListsService;
@@ -54,13 +55,13 @@ class FlagListsFlagListBuilder extends FlagListBuilder {
    *
    * Constructor.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityType $entity_type
+   * @param ConfigEntityType $entity_type
    *   The entity type involved.
-   * @param Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param Drupal\flag_lists\FlagListsService $flag_lists_service
+   * @param FlagListsService $flag_lists_service
    *   The Flag Lists Service.
    */
   public function __construct(ConfigEntityType $entity_type,
@@ -88,8 +89,7 @@ class FlagListsFlagListBuilder extends FlagListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $entity */
-
+    /** @var FlaggingCollection $entity */
     $row['flagListUsage']['#markup'] = $this->t('-');
     $row['creator']['#markup'] = $this->t('-');
     $total = parent::buildRow($entity);
diff --git a/src/FlagListsService.php b/src/FlagListsService.php
index 55ede75..0794369 100644
--- a/src/FlagListsService.php
+++ b/src/FlagListsService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\flag_lists;
 
+use Drupal\flag_lists\Entity\FlaggingCollection;
+use Drupal\flag_lists\Entity\FlaggingCollectionType;
+use Drupal\flag_lists\Entity\FlagListItem;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 
@@ -18,23 +21,23 @@ class FlagListsService implements FlagListsServiceInterface {
   /**
    * The current user injected into the service.
    *
-   * @var Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
   /**
    * The type Entity Type Manager injected into the service.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Constructor.
    *
-   * @param Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(AccountInterface $current_user,
@@ -79,7 +82,7 @@ class FlagListsService implements FlagListsServiceInterface {
   /**
    * Get current user's Flagging Collections.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection[]
+   * @return FlaggingCollection[]
    *   An array of current User's Flagging Collections.
    */
   public function getUsersFlaggingCollections(
@@ -106,7 +109,7 @@ class FlagListsService implements FlagListsServiceInterface {
    * @param string $type
    *   The type, bundle, of the Flagging Collection.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection[]
+   * @return FlaggingCollection[]
    *   An array of the found Flagging Collections.
    */
   public function getAllFlaggingCollections($type = NULL) {
@@ -129,7 +132,7 @@ class FlagListsService implements FlagListsServiceInterface {
    *
    * NOT used nor tested!
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The wanted user's account.
    * @param string $entity_type
    *   The wanted entity type.
@@ -172,7 +175,7 @@ class FlagListsService implements FlagListsServiceInterface {
    * @param string $flag_id
    *   The flag Id of the Flagging Collection to load.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection
+   * @return FlaggingCollection
    *   The loaded Flagging Collection.
    */
   public function getFlaggingCollectionById($flag_id) {
@@ -198,7 +201,7 @@ class FlagListsService implements FlagListsServiceInterface {
    * @param int[] $ids
    *   The Ids of the Flag For Lists to load.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollection
+   * @return FlaggingCollection
    *   The loaded Flagging Collections.
    */
   protected function getFlaggingCollectionByIds(array $ids) {
@@ -211,7 +214,7 @@ class FlagListsService implements FlagListsServiceInterface {
    * @param string $type_id
    *   The Id of the Flagging Collection Type to load.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollectionType
+   * @return FlaggingCollectionType
    *   The loaded Flagging Collection Type
    */
   public function getFlaggingCollectionTypeById($type_id) {
@@ -221,7 +224,7 @@ class FlagListsService implements FlagListsServiceInterface {
   /**
    * Load all Flagging Collection Types.
    *
-   * @return Drupal\flag_lists\Entity\FlaggingCollectionType
+   * @return FlaggingCollectionType
    *   The loaded Flagging Collection Type
    */
   public function getAllFlaggingCollectionTypes() {
@@ -264,7 +267,7 @@ class FlagListsService implements FlagListsServiceInterface {
    * @param int[] $ids
    *   The Flag List Item ids to load.
    *
-   * @return Drupal\flag_lists\Entity\FlagListItem[]
+   * @return FlagListItem[]
    *   An array of Flag List Items.
    */
   public function getFlagListItems(array $ids) {
diff --git a/src/FlagTracker.php b/src/FlagTracker.php
index 6f1d5bf..d1815b0 100644
--- a/src/FlagTracker.php
+++ b/src/FlagTracker.php
@@ -19,7 +19,7 @@ class FlagTracker {
    *
    * @param array $form
    *   The form associative array.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formState array.
    */
   public static function save(array $form, FormStateInterface $form_state) {
@@ -44,7 +44,7 @@ class FlagTracker {
    *
    * @param array $form
    *   The form associative array.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formState array.
    * @param Drupal\flag_lists\FlagForList $flagTemplate
    *   The FlagForList to be update.
diff --git a/src/FlaggingCollectionHtmlRouteProvider.php b/src/FlaggingCollectionHtmlRouteProvider.php
index f5ce3e9..0e03226 100644
--- a/src/FlaggingCollectionHtmlRouteProvider.php
+++ b/src/FlaggingCollectionHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class FlaggingCollectionHtmlRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class FlaggingCollectionHtmlRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class FlaggingCollectionHtmlRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class FlaggingCollectionHtmlRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class FlaggingCollectionHtmlRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class FlaggingCollectionHtmlRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/FlaggingCollectionStorageInterface.php b/src/FlaggingCollectionStorageInterface.php
index b8c386e..4bc2c46 100644
--- a/src/FlaggingCollectionStorageInterface.php
+++ b/src/FlaggingCollectionStorageInterface.php
@@ -20,7 +20,7 @@ interface FlaggingCollectionStorageInterface extends ContentEntityStorageInterfa
   /**
    * Gets a list of Flagging collection revision IDs for a collection.
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $entity
+   * @param FlaggingCollectionInterface $entity
    *   The Flagging collection entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface FlaggingCollectionStorageInterface extends ContentEntityStorageInterfa
   /**
    * Gets a list of revision IDs owned by a given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface FlaggingCollectionStorageInterface extends ContentEntityStorageInterfa
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $entity
+   * @param FlaggingCollectionInterface $entity
    *   The Flagging collection entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface FlaggingCollectionStorageInterface extends ContentEntityStorageInterfa
   /**
    * Unsets the language for all Flagging collection with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/Form/FlagListItemDeleteForm.php b/src/Form/FlagListItemDeleteForm.php
index d9d0800..ff7af84 100644
--- a/src/Form/FlagListItemDeleteForm.php
+++ b/src/Form/FlagListItemDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -36,7 +37,7 @@ class FlagListItemDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $entity->delete();
     $message = $this->getDeletionMessage();
diff --git a/src/Form/FlagListItemForm.php b/src/Form/FlagListItemForm.php
index 28a51ed..9d74866 100644
--- a/src/Form/FlagListItemForm.php
+++ b/src/Form/FlagListItemForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Form;
 
+use Drupal\flag_lists\Entity\FlaggingCollection;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -16,7 +17,7 @@ class FlagListItemForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $entity */
+    /** @var FlaggingCollection $entity */
     $form = parent::buildForm($form, $form_state);
 
     return $form;
diff --git a/src/Form/FlagListsSettingForm.php b/src/Form/FlagListsSettingForm.php
index e2d4e4b..55f66b2 100644
--- a/src/Form/FlagListsSettingForm.php
+++ b/src/Form/FlagListsSettingForm.php
@@ -21,7 +21,7 @@ class FlagListsSettingForm extends ConfigFormBase {
   /**
    * The Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidator
+   * @var CacheTagsInvalidator
    *   The cache tags handler.
    */
   protected $cacheTagsInvalidator;
@@ -37,7 +37,7 @@ class FlagListsSettingForm extends ConfigFormBase {
   /**
    * The Entity Display Repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    *   The entity display repository.
    */
   protected $entityDisplayRepository;
@@ -87,7 +87,7 @@ class FlagListsSettingForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -124,7 +124,7 @@ class FlagListsSettingForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/FlaggingCollectionDeleteForm.php b/src/Form/FlaggingCollectionDeleteForm.php
index 1315019..e79b993 100644
--- a/src/Form/FlaggingCollectionDeleteForm.php
+++ b/src/Form/FlaggingCollectionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -48,7 +49,7 @@ class FlaggingCollectionDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $message = $this->getDeletionMessage();
 
diff --git a/src/Form/FlaggingCollectionForm.php b/src/Form/FlaggingCollectionForm.php
index 92db0e9..8d62fff 100644
--- a/src/Form/FlaggingCollectionForm.php
+++ b/src/Form/FlaggingCollectionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Form;
 
+use Drupal\flag_lists\Entity\FlaggingCollection;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityFormInterface;
@@ -17,7 +18,7 @@ class FlaggingCollectionForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollection $entity */
+    /** @var FlaggingCollection $entity */
     $form = parent::buildForm($form, $form_state);
 
     $flaglistService = \Drupal::service('flaglists');
diff --git a/src/Form/FlaggingCollectionRevisionDeleteForm.php b/src/Form/FlaggingCollectionRevisionDeleteForm.php
index ee346fa..fe2b377 100644
--- a/src/Form/FlaggingCollectionRevisionDeleteForm.php
+++ b/src/Form/FlaggingCollectionRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_lists\Form;
 
+use Drupal\flag_lists\Entity\FlaggingCollectionInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class FlaggingCollectionRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Flagging collection revision.
    *
-   * @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface
+   * @var FlaggingCollectionInterface
    */
   protected $revision;
 
   /**
    * The Flagging collection storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $flaggingCollectionStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new FlaggingCollectionRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
diff --git a/src/Form/FlaggingCollectionRevisionRevertForm.php b/src/Form/FlaggingCollectionRevisionRevertForm.php
index 141998f..689cef6 100644
--- a/src/Form/FlaggingCollectionRevisionRevertForm.php
+++ b/src/Form/FlaggingCollectionRevisionRevertForm.php
@@ -21,30 +21,30 @@ class FlaggingCollectionRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Flagging collection revision.
    *
-   * @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface
+   * @var FlaggingCollectionInterface
    */
   protected $revision;
 
   /**
    * The Flagging collection storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $flaggingCollectionStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new FlaggingCollectionRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Flagging collection storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -140,12 +140,12 @@ class FlaggingCollectionRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\flag_lists\Entity\FlaggingCollectionInterface $revision
+   * @param FlaggingCollectionInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\flag_lists\Entity\FlaggingCollectionInterface
+   * @return FlaggingCollectionInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(FlaggingCollectionInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/FlaggingCollectionRevisionRevertTranslationForm.php b/src/Form/FlaggingCollectionRevisionRevertTranslationForm.php
index 47eaa70..e4a564e 100644
--- a/src/Form/FlaggingCollectionRevisionRevertTranslationForm.php
+++ b/src/Form/FlaggingCollectionRevisionRevertTranslationForm.php
@@ -29,18 +29,18 @@ class FlaggingCollectionRevisionRevertTranslationForm extends FlaggingCollection
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new FlaggingCollectionRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Flagging collection storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -100,7 +100,7 @@ class FlaggingCollectionRevisionRevertTranslationForm extends FlaggingCollection
   protected function prepareRevertedRevision(FlaggingCollectionInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\flag_lists\Entity\FlaggingCollectionInterface $default_revision */
+    /** @var FlaggingCollectionInterface $default_revision */
     $latest_revision = $this->FlaggingCollectionStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/FlaggingCollectionSettingsForm.php b/src/Form/FlaggingCollectionSettingsForm.php
index 3e79ee5..7946f48 100644
--- a/src/Form/FlaggingCollectionSettingsForm.php
+++ b/src/Form/FlaggingCollectionSettingsForm.php
@@ -27,7 +27,7 @@ class FlaggingCollectionSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class FlaggingCollectionSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Permissions/FlagListsPermissionHandler.php b/src/Permissions/FlagListsPermissionHandler.php
index 3d08b98..c5e85b5 100644
--- a/src/Permissions/FlagListsPermissionHandler.php
+++ b/src/Permissions/FlagListsPermissionHandler.php
@@ -19,20 +19,20 @@ class FlagListsPermissionHandler extends PermissionHandler {
   /**
    * The Flag Lists Service.
    *
-   * @var \Drupal\flag_lists\FlagListsServiceInterface
+   * @var FlagListsServiceInterface
    */
   protected $flagListsService;
 
   /**
    * Constructs a new PermissionHandler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
-   * @param \Drupal\Core\Controller\ControllerResolverInterface $controller_resolver
+   * @param ControllerResolverInterface $controller_resolver
    *   The controller resolver.
-   * @param \Drupal\flag_lists\FlagListsServiceInterface $flag_lists_service
+   * @param FlagListsServiceInterface $flag_lists_service
    *   The Flag Lists Service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, TranslationInterface $string_translation, ControllerResolverInterface $controller_resolver, FlagListsServiceInterface $flag_lists_service) {
diff --git a/src/Plugin/views/field/FlaggingCollectionBulkForm.php b/src/Plugin/views/field/FlaggingCollectionBulkForm.php
index 8ed0ac8..dec2fdc 100644
--- a/src/Plugin/views/field/FlaggingCollectionBulkForm.php
+++ b/src/Plugin/views/field/FlaggingCollectionBulkForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\flag_lists\Plugin\views\field;
 
+use Drupal\flag_lists\FlagListsService;
+use Drupal\flag\FlagService;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -22,14 +24,14 @@ class FlaggingCollectionBulkForm extends BulkForm {
   /**
    * Flag Lists Service injected.
    *
-   * @var \Drupal\flag_lists\FlagListsService
+   * @var FlagListsService
    */
   private $flagListsService;
 
   /**
    * Flag Service injected.
    *
-   * @var \Drupal\flag\FlagService
+   * @var FlagService
    */
   private $flagService;
 
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index bee938f..f90c989 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flag_lists\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,14 +28,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ -45,7 +46,7 @@ class LoadTest extends BrowserTestBase {
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
