modules/contrib/telephone_type/src/Plugin/Field/FieldFormatter/TelephoneTypeLinkFormatter.php
modules/contrib/telephone_type/src/Plugin/Field/FieldType/TelephoneTypeItem.php
modules/contrib/telephone_type/src/Plugin/Field/FieldWidget/TelephoneTypeDefaultWidget.php
modules/contrib/telephone_type/src/Plugin/Validation/Constraint/TelephoneTypeValidationContraint.php
modules/contrib/telephone_type/src/Plugin/Validation/Constraint/TelephoneTypeValidationContraintValidator.php
modules/contrib/telephone_type/src/Validator.php
modules/contrib/telephone_type/telephone_type.install
modules/contrib/telephone_type/telephone_type.module
modules/contrib/telephone_type/tests/src/Functional/TelephoneFieldTest.php
modules/contrib/telephone_type/tests/src/Kernel/TelephoneTypeItemTest.php

3 files with changes
====================

1) modules/contrib/telephone_type/tests/src/Kernel/TelephoneTypeItemTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Protected Function setup.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a telephone field storage and field for validation.
@@ @@
     $entity = EntityTest::load($id);
     $this->assertTrue($entity->field_test instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_test[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_test->value, $value);
-    $this->assertEqual($entity->field_test->type, $type);
-    $this->assertEqual($entity->field_test[0]->value, $value);
-    $this->assertEqual($entity->field_test[0]->type, $type);
+    $this->assertEquals($entity->field_test->value, $value);
+    $this->assertEquals($entity->field_test->type, $type);
+    $this->assertEquals($entity->field_test[0]->value, $value);
+    $this->assertEquals($entity->field_test[0]->type, $type);

     // Verify changing the field value.
     $new_value = '+41' . rand(1000000, 9999999);
@@ @@
     $new_type = 'Cell';
     $entity->field_test->value = $new_value;
     $entity->field_test->type = $new_type;
-    $this->assertEqual($entity->field_test->value, $new_value);
-    $this->assertEqual($entity->field_test->type, $new_type);
+    $this->assertEquals($entity->field_test->value, $new_value);
+    $this->assertEquals($entity->field_test->type, $new_type);

     // Read changed entity and assert changed values.
     $entity->save();
     $entity = EntityTest::load($id);
-    $this->assertEqual($entity->field_test->value, $new_value);
-    $this->assertEqual($entity->field_test->type, $new_type);
+    $this->assertEquals($entity->field_test->value, $new_value);
+    $this->assertEquals($entity->field_test->type, $new_type);

     // Test sample item generation.
     $entity = EntityTest::create();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/telephone_type/tests/src/Functional/TelephoneFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\telephone_type\Functional;

+use Drupal\user\UserInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * A user with permission to create articles.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * Protected function setUp.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article']);
@@ @@
       'bundle' => 'article',
     ])->save();

-    entity_get_form_display('node', 'article', 'default')
+    \Drupal::service('entity_display.repository')->getFormDisplay('node', 'article', 'default')
       ->setComponent('field_telephone', [
         'type' => 'telephone_type_default',
         'settings' => [
@@ @@
       ])
       ->save();

-    entity_get_display('node', 'article', 'default')
+    \Drupal::service('entity_display.repository')->getViewDisplay('node', 'article', 'default')
       ->setComponent('field_telephone', [
         'type' => 'telephone_type_link',
         'weight' => 1,
@@ @@

     // Display creation form.
     $this->drupalGet('node/add/article');
-    $this->assertFieldByName("field_telephone[0][value]", '', 'Widget found.');
-    $this->assertRaw('placeholder="123-456-7890"');
+    $this->assertSession()->fieldValueEquals("field_telephone[0][value]", '');
+    $this->assertSession()->responseContains('placeholder="123-456-7890"');

     // Test basic entry of telephone field.
     $edit = [
@@ @@
       'field_telephone[0][value]' => "123456789",
     ];

-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw('<a href="tel:123456789">', 'A telephone link is provided on the article node page.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains('<a href="tel:123456789">');

     // Add number with a space in it. Need to ensure it is stripped on output.
     $edit = [
@@ @@
       'title[0][value]' => $this->randomMachineName(),
       'field_telephone[0][value]' => "1234 56789",
     ];
+    $this->drupalGet('node/add/article');

-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
-    $this->assertRaw('<a href="tel:123456789">', 'Telephone link is output with whitespace removed.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains('<a href="tel:123456789">');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertRawRector
 * EntityGetDisplayRector
 * EntityGetFormDisplayRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/telephone_type/src/Validator.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Phone Number util.
    *
-   * @var \libphonenumber\PhoneNumberUtil
+   * @var PhoneNumberUtil
    */
   public $phoneUtils;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

