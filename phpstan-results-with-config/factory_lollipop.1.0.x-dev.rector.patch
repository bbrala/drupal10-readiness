diff --git a/src/FactoryInterface.php b/src/FactoryInterface.php
index 18972b0..5721d72 100644
--- a/src/FactoryInterface.php
+++ b/src/FactoryInterface.php
@@ -26,7 +26,7 @@ interface FactoryInterface {
   /**
    * Resolve the factory by defining stuff.
    *
-   * @param \Drupal\factory_lollipop\FixtureFactory $lollipop
+   * @param FixtureFactory $lollipop
    *   Fixtures factory.
    *
    * @internal
diff --git a/src/FactoryType/EntityFieldEntityReferenceFactoryType.php b/src/FactoryType/EntityFieldEntityReferenceFactoryType.php
index 4f7f035..ae17f95 100644
--- a/src/FactoryType/EntityFieldEntityReferenceFactoryType.php
+++ b/src/FactoryType/EntityFieldEntityReferenceFactoryType.php
@@ -18,7 +18,7 @@ class EntityFieldEntityReferenceFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -27,7 +27,7 @@ class EntityFieldEntityReferenceFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -54,7 +54,7 @@ class EntityFieldEntityReferenceFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Entity field attributes to use for creation.
    *
-   * @return \Drupal\field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The newly created or already existing Entity Reference Field.
    *
    * @internal
diff --git a/src/FactoryType/EntityFieldFactoryType.php b/src/FactoryType/EntityFieldFactoryType.php
index b0b8a30..1a55d9b 100644
--- a/src/FactoryType/EntityFieldFactoryType.php
+++ b/src/FactoryType/EntityFieldFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\FieldConfigInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,7 +16,7 @@ class EntityFieldFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -24,7 +25,7 @@ class EntityFieldFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -51,10 +52,10 @@ class EntityFieldFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Entity field attributes to use for creation.
    *
-   * @return \Drupal\field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The newly created or already existing Entity Field.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    */
diff --git a/src/FactoryType/FactoryTypeInterface.php b/src/FactoryType/FactoryTypeInterface.php
index 55d7b07..726af9c 100644
--- a/src/FactoryType/FactoryTypeInterface.php
+++ b/src/FactoryType/FactoryTypeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Provides the base interface for Factory Type.
  *
@@ -34,7 +35,7 @@ interface FactoryTypeInterface {
    * @return mixed
    *   The newly created or already existing Drupal Entity|Object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    */
diff --git a/src/FactoryType/FileFactoryType.php b/src/FactoryType/FileFactoryType.php
index 5209db7..94ad144 100644
--- a/src/FactoryType/FileFactoryType.php
+++ b/src/FactoryType/FileFactoryType.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\File\FileSystem;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -17,30 +20,30 @@ class FileFactoryType implements FactoryTypeInterface {
   /**
    * The system file config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $systemFileConfig;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FileFactoryType object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileSystemInterface $file_system) {
@@ -53,7 +56,7 @@ class FileFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -80,10 +83,10 @@ class FileFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   File attributes to use for creation.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The new file object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function create(?object $attributes = NULL): FileInterface {
     $attributes = (array) $attributes;
diff --git a/src/FactoryType/MediaFactoryType.php b/src/FactoryType/MediaFactoryType.php
index fcb5121..6a07de0 100644
--- a/src/FactoryType/MediaFactoryType.php
+++ b/src/FactoryType/MediaFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\media\MediaInterface;
@@ -16,7 +17,7 @@ class MediaFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -25,7 +26,7 @@ class MediaFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -43,7 +44,7 @@ class MediaFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\media\MediaInterface $factory_object */
+    /** @var MediaInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -53,10 +54,10 @@ class MediaFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Media attributes to use for creation.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The new media object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function create(?object $attributes = NULL): MediaInterface {
     $attributes = (array) $attributes;
diff --git a/src/FactoryType/MediaTypeFactoryType.php b/src/FactoryType/MediaTypeFactoryType.php
index d4c79b3..252746b 100644
--- a/src/FactoryType/MediaTypeFactoryType.php
+++ b/src/FactoryType/MediaTypeFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
 use Drupal\media\MediaTypeInterface;
@@ -15,7 +16,7 @@ class MediaTypeFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -24,7 +25,7 @@ class MediaTypeFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -42,7 +43,7 @@ class MediaTypeFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\media\MediaTypeInterface $factory_object */
+    /** @var MediaTypeInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -52,10 +53,10 @@ class MediaTypeFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Media types attributes to use for creation.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   The newly created or already existing Media Type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    *
diff --git a/src/FactoryType/MenuFactoryType.php b/src/FactoryType/MenuFactoryType.php
index 95f1c43..7611f61 100644
--- a/src/FactoryType/MenuFactoryType.php
+++ b/src/FactoryType/MenuFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
 use Drupal\system\MenuInterface;
@@ -15,7 +16,7 @@ class MenuFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -24,7 +25,7 @@ class MenuFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -42,7 +43,7 @@ class MenuFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\system\MenuInterface $factory_object */
+    /** @var MenuInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -52,10 +53,10 @@ class MenuFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Menu attributes to use for creation.
    *
-   * @return \Drupal\system\MenuInterface
+   * @return MenuInterface
    *   The newly created or already existing Menu.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    */
@@ -79,7 +80,7 @@ class MenuFactoryType implements FactoryTypeInterface {
     $values = $attributes ?? [];
 
     // Create new Menu.
-    /** @var \Drupal\system\MenuInterface $menu */
+    /** @var MenuInterface $menu */
     $menu = $menu_storage->create($values + [
       'id' => $id,
       'label' => $label,
diff --git a/src/FactoryType/MenuLinkFactoryType.php b/src/FactoryType/MenuLinkFactoryType.php
index 46e7789..81a5c75 100644
--- a/src/FactoryType/MenuLinkFactoryType.php
+++ b/src/FactoryType/MenuLinkFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\menu_link_content\MenuLinkContentInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
@@ -15,7 +16,7 @@ class MenuLinkFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -24,7 +25,7 @@ class MenuLinkFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -42,7 +43,7 @@ class MenuLinkFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $factory_object */
+    /** @var MenuLinkContentInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -52,10 +53,10 @@ class MenuLinkFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Menu attributes to use for creation.
    *
-   * @return \Drupal\menu_link_content\MenuLinkContentInterface
+   * @return MenuLinkContentInterface
    *   The newly created or already existing Menu Link.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    */
@@ -85,7 +86,7 @@ class MenuLinkFactoryType implements FactoryTypeInterface {
     $values = $attributes ?? [];
 
     // Create new Menu.
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $link */
+    /** @var MenuLinkContentInterface $link */
     $link = $menu_link_content_storage->create($values + [
       'title' => $title,
     ]);
diff --git a/src/FactoryType/NodeFactoryType.php b/src/FactoryType/NodeFactoryType.php
index 51b1436..01d1e09 100644
--- a/src/FactoryType/NodeFactoryType.php
+++ b/src/FactoryType/NodeFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\node\NodeInterface;
@@ -16,7 +17,7 @@ class NodeFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -25,7 +26,7 @@ class NodeFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -43,7 +44,7 @@ class NodeFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\node\NodeInterface $factory_object */
+    /** @var NodeInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -53,10 +54,10 @@ class NodeFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Node attributes to use for creation.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The new node object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function create(?object $attributes = NULL): NodeInterface {
     $attributes = (array) $attributes;
diff --git a/src/FactoryType/NodeTypeFactoryType.php b/src/FactoryType/NodeTypeFactoryType.php
index 273f17e..45cc7fe 100644
--- a/src/FactoryType/NodeTypeFactoryType.php
+++ b/src/FactoryType/NodeTypeFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\node\NodeTypeInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
@@ -15,7 +16,7 @@ class NodeTypeFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -24,7 +25,7 @@ class NodeTypeFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -42,7 +43,7 @@ class NodeTypeFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\node\NodeTypeInterface $factory_object */
+    /** @var NodeTypeInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -52,10 +53,10 @@ class NodeTypeFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Node types attributes to use for creation.
    *
-   * @return \Drupal\node\NodeTypeInterface
+   * @return NodeTypeInterface
    *   The newly created or already existing Node Type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    */
diff --git a/src/FactoryType/RoleFactoryType.php b/src/FactoryType/RoleFactoryType.php
index 76fdbfc..4a125a6 100644
--- a/src/FactoryType/RoleFactoryType.php
+++ b/src/FactoryType/RoleFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
 use Drupal\factory_lollipop\Traits\UserCreationTrait;
@@ -17,7 +18,7 @@ class RoleFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -26,7 +27,7 @@ class RoleFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -44,7 +45,7 @@ class RoleFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\user\RoleInterface $factory_object */
+    /** @var RoleInterface $factory_object */
     return [$factory_object->id() => $factory_object->label()];
   }
 
@@ -54,10 +55,10 @@ class RoleFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Role attributes to use for creation.
    *
-   * @return \Drupal\user\RoleInterface
+   * @return RoleInterface
    *   The newly created or already existing Role.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    *
@@ -83,7 +84,7 @@ class RoleFactoryType implements FactoryTypeInterface {
     }
 
     // Create new role.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = $role_storage->create([
       'id' => $rid,
       'label' => $name,
diff --git a/src/FactoryType/TaxonomyTermFactoryType.php b/src/FactoryType/TaxonomyTermFactoryType.php
index e733634..385f632 100644
--- a/src/FactoryType/TaxonomyTermFactoryType.php
+++ b/src/FactoryType/TaxonomyTermFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\taxonomy\TermInterface;
@@ -16,7 +17,7 @@ class TaxonomyTermFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -25,7 +26,7 @@ class TaxonomyTermFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -43,7 +44,7 @@ class TaxonomyTermFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\taxonomy\TermInterface $factory_object */
+    /** @var TermInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -53,10 +54,10 @@ class TaxonomyTermFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   TaxonomyTerm attributes to use for creation.
    *
-   * @return \Drupal\taxonomy\TermInterface
+   * @return TermInterface
    *   The newly created or already existing Taxonomy Term.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    */
diff --git a/src/FactoryType/UserFactoryType.php b/src/FactoryType/UserFactoryType.php
index afeb3d0..417c369 100644
--- a/src/FactoryType/UserFactoryType.php
+++ b/src/FactoryType/UserFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
 use Drupal\factory_lollipop\Traits\UserCreationTrait;
@@ -17,7 +18,7 @@ class UserFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -26,7 +27,7 @@ class UserFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -44,7 +45,7 @@ class UserFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\user\UserInterface $factory_object */
+    /** @var UserInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -54,10 +55,10 @@ class UserFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   User attributes to use for creation.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The new node object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function create(?object $attributes = NULL): UserInterface {
     // Load the storage at the last moment to prevent requiring User module
@@ -70,7 +71,7 @@ class UserFactoryType implements FactoryTypeInterface {
     $mail = $attributes['mail'] ?? $name . '@example.com';
     $roles = $attributes['roles'] ?? [];
     $status = $attributes['status'] ?? 1;
-    $pass = $attributes['pass'] ?? user_password();
+    $pass = $attributes['pass'] ?? \Drupal::service('password_generator')->generate();
 
     // Prevent creation of already existing User.
     if ($uid) {
@@ -83,7 +84,7 @@ class UserFactoryType implements FactoryTypeInterface {
     $values = $attributes ?? [];
 
     // Create new User.
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $user_storage->create($values + [
       'uid' => $uid,
       'name' => $name,
diff --git a/src/FactoryType/VocabularyFactoryType.php b/src/FactoryType/VocabularyFactoryType.php
index bcebefa..36193c2 100644
--- a/src/FactoryType/VocabularyFactoryType.php
+++ b/src/FactoryType/VocabularyFactoryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop\FactoryType;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\taxonomy\VocabularyInterface;
 use Drupal\factory_lollipop\Traits\RandomGeneratorTrait;
@@ -15,7 +16,7 @@ class VocabularyFactoryType implements FactoryTypeInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;
 
@@ -24,7 +25,7 @@ class VocabularyFactoryType implements FactoryTypeInterface {
    *
    * This is only called when the factory is instantiated.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    */
   public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager): void {
@@ -42,7 +43,7 @@ class VocabularyFactoryType implements FactoryTypeInterface {
    * {@inheritdoc}
    */
   public function getIdentifier(object $factory_object) {
-    /** @var \Drupal\taxonomy\VocabularyInterface $factory_object */
+    /** @var VocabularyInterface $factory_object */
     return $factory_object->id();
   }
 
@@ -52,10 +53,10 @@ class VocabularyFactoryType implements FactoryTypeInterface {
    * @param object|null $attributes
    *   Vocabulary attributes to use for creation.
    *
-   * @return \Drupal\taxonomy\VocabularyInterface
+   * @return VocabularyInterface
    *   The newly created or already existing Vocabulary.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @internal
    */
diff --git a/src/FixtureFactory.php b/src/FixtureFactory.php
index 79a6e52..ed8f800 100644
--- a/src/FixtureFactory.php
+++ b/src/FixtureFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\factory_lollipop;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\factory_lollipop\Resolver\ChainFactoryResolver;
 use Drupal\factory_lollipop\Resolver\ChainFactoryTypeResolver;
 
@@ -20,23 +21,23 @@ class FixtureFactory {
   /**
    * The factory type resolver.
    *
-   * @var \Drupal\factory_lollipop\Resolver\ChainFactoryTypeResolver
+   * @var ChainFactoryTypeResolver
    */
   protected $chainFactoryTypeResolver;
 
   /**
    * The factories resolver.
    *
-   * @var \Drupal\factory_lollipop\Resolver\ChainFactoryResolver
+   * @var ChainFactoryResolver
    */
   protected $chainFactoryResolver;
 
   /**
    * Construct a new FixtureFactory object.
    *
-   * @param \Drupal\factory_lollipop\Resolver\ChainFactoryTypeResolver $chain_factory_type_resolver
+   * @param ChainFactoryTypeResolver $chain_factory_type_resolver
    *   The factory type resolver.
-   * @param \Drupal\factory_lollipop\Resolver\ChainFactoryResolver $chain_factory_resolver
+   * @param ChainFactoryResolver $chain_factory_resolver
    *   The factories resolver.
    */
   public function __construct(ChainFactoryTypeResolver $chain_factory_type_resolver, ChainFactoryResolver $chain_factory_resolver) {
@@ -77,7 +78,7 @@ class FixtureFactory {
    * @return mixed
    *   The newly created or already existing Drupal Entity|Object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function create(string $name, array $opts = []) {
     $factory_array = array_merge($this->getDefaultOptions($name), $opts);
diff --git a/src/Resolver/ChainFactoryResolver.php b/src/Resolver/ChainFactoryResolver.php
index 0d466b8..d380004 100644
--- a/src/Resolver/ChainFactoryResolver.php
+++ b/src/Resolver/ChainFactoryResolver.php
@@ -12,14 +12,14 @@ class ChainFactoryResolver {
   /**
    * The resolvers.
    *
-   * @var \Drupal\factory_lollipop\FactoryInterface[]
+   * @var FactoryInterface[]
    */
   protected $resolvers = [];
 
   /**
    * Constructs a new ChainFactoryResolver object.
    *
-   * @param \Drupal\factory_lollipop\FactoryInterface[] $resolvers
+   * @param FactoryInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
@@ -29,7 +29,7 @@ class ChainFactoryResolver {
   /**
    * Adds a Factory Type resolver.
    *
-   * @param \Drupal\factory_lollipop\FactoryInterface $resolver
+   * @param FactoryInterface $resolver
    *   The resolver.
    */
   public function addResolver(FactoryInterface $resolver): void {
@@ -39,7 +39,7 @@ class ChainFactoryResolver {
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\factory_lollipop\FactoryInterface[]
+   * @return FactoryInterface[]
    *   The resolvers.
    */
   public function getResolvers(): array {
diff --git a/src/Resolver/ChainFactoryTypeResolver.php b/src/Resolver/ChainFactoryTypeResolver.php
index feb5fa0..09619c4 100644
--- a/src/Resolver/ChainFactoryTypeResolver.php
+++ b/src/Resolver/ChainFactoryTypeResolver.php
@@ -12,14 +12,14 @@ class ChainFactoryTypeResolver {
   /**
    * The resolvers.
    *
-   * @var \Drupal\factory_lollipop\FactoryType\FactoryTypeInterface[]
+   * @var FactoryTypeInterface[]
    */
   protected $resolvers = [];
 
   /**
    * Constructs a new ChainFactoryTypeResolver object.
    *
-   * @param \Drupal\factory_lollipop\FactoryType\FactoryTypeInterface[] $resolvers
+   * @param FactoryTypeInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
@@ -29,7 +29,7 @@ class ChainFactoryTypeResolver {
   /**
    * Adds a Factory Type resolver.
    *
-   * @param \Drupal\factory_lollipop\FactoryType\FactoryTypeInterface $resolver
+   * @param FactoryTypeInterface $resolver
    *   The resolver.
    */
   public function addResolver(FactoryTypeInterface $resolver): void {
@@ -39,7 +39,7 @@ class ChainFactoryTypeResolver {
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\factory_lollipop\FactoryType\FactoryTypeInterface[]
+   * @return FactoryTypeInterface[]
    *   The resolvers.
    */
   public function getResolvers(): array {
diff --git a/src/Traits/RandomGeneratorTrait.php b/src/Traits/RandomGeneratorTrait.php
index bc4e388..16daaa1 100644
--- a/src/Traits/RandomGeneratorTrait.php
+++ b/src/Traits/RandomGeneratorTrait.php
@@ -18,7 +18,7 @@ trait RandomGeneratorTrait {
   /**
    * The random generator.
    *
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $randomGenerator;
 
@@ -119,7 +119,7 @@ trait RandomGeneratorTrait {
   /**
    * Gets the random generator for the utility methods.
    *
-   * @return \Drupal\Component\Utility\Random
+   * @return Random
    *   The random generator.
    */
   protected function getRandomGenerator() {
