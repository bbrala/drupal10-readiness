diff --git a/src/Annotation/UsageType.php b/src/Annotation/UsageType.php
index a09165e..61cc136 100644
--- a/src/Annotation/UsageType.php
+++ b/src/Annotation/UsageType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\usage_data\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class UsageType extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class UsageType extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Event/CollectExtraDataEvent.php b/src/Event/CollectExtraDataEvent.php
index e26c110..6155791 100644
--- a/src/Event/CollectExtraDataEvent.php
+++ b/src/Event/CollectExtraDataEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\usage_data\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event fired when collecting extra data to be passed to the ajax call.
diff --git a/src/Event/RecordingViewEvent.php b/src/Event/RecordingViewEvent.php
index dee4b32..43050dd 100644
--- a/src/Event/RecordingViewEvent.php
+++ b/src/Event/RecordingViewEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\usage_data\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event fired when a view record data is about to be stored.
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 089b640..cabc905 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -17,7 +17,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Usage type manager.
    *
-   * @var \Drupal\usage_data\Plugin\UsageTypeManagerInterface
+   * @var UsageTypeManagerInterface
    */
   protected UsageTypeManagerInterface $usageTypeManager;
 
@@ -31,18 +31,18 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
 
   /**
    * Creates a SettingsForm instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory class instance.
-   * @param \Drupal\usage_data\Plugin\UsageTypeManagerInterface $usageTypeManager
+   * @param UsageTypeManagerInterface $usageTypeManager
    *   The usage type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(ConfigFactoryInterface $config_factory, UsageTypeManagerInterface $usageTypeManager, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/QueueWorker/UsageDataRecords.php b/src/Plugin/QueueWorker/UsageDataRecords.php
index b8d19b8..eaba506 100644
--- a/src/Plugin/QueueWorker/UsageDataRecords.php
+++ b/src/Plugin/QueueWorker/UsageDataRecords.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\usage_data\Plugin\QueueWorker;
 
+use Drupal\usage_data\UsageDataDatabaseStorage;
 use Drupal\Core\Queue\QueueWorkerBase;
 
 /**
@@ -19,7 +20,7 @@ class UsageDataRecords extends QueueWorkerBase {
    * {@inheritdoc}
    */
   public function processItem($data) {
-    /** @var \Drupal\usage_data\UsageDataDatabaseStorage $databaseStorage */
+    /** @var UsageDataDatabaseStorage $databaseStorage */
     $databaseStorage = \Drupal::service('usage_data.storage.database');
     $databaseStorage->recordUsage($data);
   }
diff --git a/src/Plugin/UsageType/Legacy.php b/src/Plugin/UsageType/Legacy.php
index 8b30dc2..34979bb 100644
--- a/src/Plugin/UsageType/Legacy.php
+++ b/src/Plugin/UsageType/Legacy.php
@@ -29,7 +29,7 @@ class Legacy extends UsageTypePluginBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;
 
diff --git a/src/Plugin/UsageTypeManager.php b/src/Plugin/UsageTypeManager.php
index 616a013..590cd23 100644
--- a/src/Plugin/UsageTypeManager.php
+++ b/src/Plugin/UsageTypeManager.php
@@ -15,7 +15,7 @@ class UsageTypeManager extends DefaultPluginManager implements UsageTypeManagerI
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
@@ -25,11 +25,11 @@ class UsageTypeManager extends DefaultPluginManager implements UsageTypeManagerI
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
diff --git a/src/Plugin/UsageTypePluginBase.php b/src/Plugin/UsageTypePluginBase.php
index 8d871c2..9aa24b3 100644
--- a/src/Plugin/UsageTypePluginBase.php
+++ b/src/Plugin/UsageTypePluginBase.php
@@ -17,14 +17,14 @@ abstract class UsageTypePluginBase extends PluginBase implements UsageTypeInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected CurrentPathStack $currentPath;
 
@@ -37,9 +37,9 @@ abstract class UsageTypePluginBase extends PluginBase implements UsageTypeInterf
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPath
+   * @param CurrentPathStack $currentPath
    *   The current path service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, CurrentPathStack $currentPath) {
diff --git a/src/Plugin/views/field/UsageDataField.php b/src/Plugin/views/field/UsageDataField.php
index d40dd9a..adfed0e 100644
--- a/src/Plugin/views/field/UsageDataField.php
+++ b/src/Plugin/views/field/UsageDataField.php
@@ -19,7 +19,7 @@ class UsageDataField extends FieldPluginBase {
   /**
    * Usage Data database storage.
    *
-   * @var \Drupal\usage_data\UsageDataDatabaseStorage
+   * @var UsageDataDatabaseStorage
    */
   protected $usageDataDatabaseStorage;
 
@@ -32,7 +32,7 @@ class UsageDataField extends FieldPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\usage_data\UsageDataDatabaseStorage $usageDataDatabaseStorage
+   * @param UsageDataDatabaseStorage $usageDataDatabaseStorage
    *   Usage Data database storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UsageDataDatabaseStorage $usageDataDatabaseStorage) {
diff --git a/src/Plugin/views/sort/UsageDataSort.php b/src/Plugin/views/sort/UsageDataSort.php
index 57eaaad..0d95dc6 100644
--- a/src/Plugin/views/sort/UsageDataSort.php
+++ b/src/Plugin/views/sort/UsageDataSort.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\usage_data\Plugin\views\sort;
 
+use Drupal\usage_data\UsageDataStorageInterface;
+use Drupal\views\Plugin\ViewsHandlerManager;
 use Drupal\usage_data\Plugin\UsageTypeCountInterface;
 use Drupal\views\Plugin\views\sort\SortPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,14 +18,14 @@ class UsageDataSort extends SortPluginBase {
   /**
    * The usage storage.
    *
-   * @var \Drupal\usage_data\UsageDataStorageInterface
+   * @var UsageDataStorageInterface
    */
   protected $usageStorage;
 
   /**
    * The views handler join.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $viewsJoin;
 
diff --git a/src/UsageData.php b/src/UsageData.php
index a37dc3f..848f551 100644
--- a/src/UsageData.php
+++ b/src/UsageData.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\usage_data;
 
+use Drupal\usage_data\Plugin\UsageTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Url;
@@ -23,50 +24,50 @@ class UsageData implements UsageDataInterface {
   /**
    * Usage type manager.
    *
-   * @var \Drupal\usage_data\Plugin\UsageTypeManagerInterface
+   * @var UsageTypeManagerInterface
    */
   protected UsageTypeManagerInterface $usageTypeManager;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected Request $request;
 
   /**
    * Constructs a new usage data object.
    *
-   * @param \Drupal\usage_data\Plugin\UsageTypeManagerInterface $usageTypeManager
+   * @param UsageTypeManagerInterface $usageTypeManager
    *   The usage type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Used for dispatching social auth events.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(UsageTypeManagerInterface $usageTypeManager, EventDispatcherInterface $eventDispatcher, ConfigFactoryInterface $configFactory, ModuleHandlerInterface $moduleHandler, RequestStack $requestStack) {
@@ -84,7 +85,7 @@ class UsageData implements UsageDataInterface {
     $data = [];
     $activePluginDefinitions = $this->usageTypeManager->getActiveDefinitions();
     foreach ($activePluginDefinitions as $id => $definition) {
-      /** @var \Drupal\usage_data\Plugin\UsageTypeInterface $plugin */
+      /** @var UsageTypeInterface $plugin */
       $plugin = $this->usageTypeManager->createInstance($id);
       if ($parsed = $plugin->parseEvent($eventType, $entityTypeId, $entityId, $render, $additionalData)) {
         // Collect extra data event.
@@ -152,7 +153,7 @@ class UsageData implements UsageDataInterface {
    * {@inheritDoc}
    */
   public function getPostUrl() {
-    $path = drupal_get_path('module', 'usage_data');
+    $path = \Drupal::service('extension.list.module')->getPath('usage_data');
     return Url::fromUri('base:' . $path . '/usage_data.php')->toString();
   }
 
diff --git a/src/UsageDataDatabaseStorage.php b/src/UsageDataDatabaseStorage.php
index 6cebac7..bb7ed70 100644
--- a/src/UsageDataDatabaseStorage.php
+++ b/src/UsageDataDatabaseStorage.php
@@ -28,23 +28,23 @@ class UsageDataDatabaseStorage implements UsageDataStorageInterface {
   /**
    * The database connection used.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $connection;
 
   /**
    * The usage type manager.
    *
-   * @var \Drupal\usage_data\Plugin\UsageTypeManagerInterface
+   * @var UsageTypeManagerInterface
    */
   protected UsageTypeManagerInterface $usageTypeManager;
 
   /**
    * Constructs the database storage.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection for the node view storage.
-   * @param \Drupal\usage_data\Plugin\UsageTypeManagerInterface $usageTypeManager
+   * @param UsageTypeManagerInterface $usageTypeManager
    *   The usage type manager.
    */
   public function __construct(Connection $connection, UsageTypeManagerInterface $usageTypeManager) {
diff --git a/src/UsageDataInterface.php b/src/UsageDataInterface.php
index e51b263..fbe4ac4 100644
--- a/src/UsageDataInterface.php
+++ b/src/UsageDataInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\usage_data;
 
+use Drupal\Core\GeneratedUrl;
 /**
  * Interface definition for the main service.
  */
@@ -59,7 +60,7 @@ interface UsageDataInterface {
   /**
    * Helper to retrieve post path.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   The path to the tracking script.
    */
   public function getPostUrl();
diff --git a/src/UsageDataStorageInterface.php b/src/UsageDataStorageInterface.php
index 7b6e2c8..c920d34 100644
--- a/src/UsageDataStorageInterface.php
+++ b/src/UsageDataStorageInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\usage_data;
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Database\StatementInterface;
 /**
  * Usage Data storage interface.
  */
@@ -48,7 +50,7 @@ interface UsageDataStorageInterface {
    * @param string $entityId
    *   The optional entity id.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   The query for the usage type.
    */
   public function fetchUsageQuery($type, $eventType = NULL, $entityTypeId = NULL, $entityId = NULL);
@@ -69,7 +71,7 @@ interface UsageDataStorageInterface {
    * @param array $conditions
    *   Additional conditions to add to the query.
    *
-   * @return \Drupal\Core\Database\StatementInterface|mixed
+   * @return StatementInterface|mixed
    *   Either the executed query or the count.
    */
   public function fetchUsageData($type, $eventType = NULL, $entityTypeId = NULL, $entityId = NULL, $count = TRUE, array $conditions = []);
diff --git a/usage_data.info.yml b/usage_data.info.yml
index 6b50bb8..1205a4a 100644
--- a/usage_data.info.yml
+++ b/usage_data.info.yml
@@ -1,5 +1,5 @@
 name: 'Usage Data'
 type: module
 description: 'Logs site usage data for analysis and visualization.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 configure: usage_data.settings
diff --git a/usage_data.install b/usage_data.install
index b31b2aa..2b4506c 100644
--- a/usage_data.install
+++ b/usage_data.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\usage_data\UsageDataStorageInterface;
+use Drupal\usage_data\Plugin\UsageTypeManagerInterface;
 /**
  * @file
  * Install and update functions for the Work Horse Statistics module.
@@ -21,7 +23,7 @@ function usage_data_uninstall($is_syncing) {
  */
 function usage_data_update_9201() {
   $logger = \Drupal::logger('usage_data');
-  /** @var \Drupal\usage_data\UsageDataStorageInterface $usage_storage */
+  /** @var UsageDataStorageInterface $usage_storage */
   $usage_storage = \Drupal::service('usage_data.storage.database');
   $database = Database::getConnection();
   $schema = $database->schema();
@@ -33,7 +35,7 @@ function usage_data_update_9201() {
     'unsigned' => TRUE,
   ];
 
-  /** @var \Drupal\usage_data\Plugin\UsageTypeManagerInterface $usage_manager */
+  /** @var UsageTypeManagerInterface $usage_manager */
   $usage_manager = \Drupal::service('plugin.manager.usage_type');
   foreach ($usage_manager->getActiveDefinitions() as $definition) {
     $table_name = $usage_storage->tableName($definition['id']);
diff --git a/usage_data.module b/usage_data.module
index 4948534..7e31a00 100644
--- a/usage_data.module
+++ b/usage_data.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\views\ViewExecutable;
+use Drupal\usage_data\Plugin\UsageTypeManager;
+use Drupal\usage_data\UsageDataDatabaseStorage;
 /**
  * @file
  * Contains usage_data.module.
@@ -32,7 +35,7 @@ function usage_data_help($route_name, RouteMatchInterface $route_match) {
  * Implements hook_page_attachments().
  */
 function usage_data_page_attachments(array &$attachments) {
-  /** @var \Drupal\usage_data\UsageDataInterface $usage */
+  /** @var UsageDataInterface $usage */
   $usage = \Drupal::service('usage_data.usage');
   $attachments['#attached']['library'][] = 'usage_data/entity.statistics';
   $attachments['#attached']['drupalSettings']['usage_data']['url'] = $usage->getPostUrl();
@@ -43,7 +46,7 @@ function usage_data_page_attachments(array &$attachments) {
  */
 function usage_data_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
   if (!$entity->isNew()) {
-    /** @var \Drupal\usage_data\UsageDataInterface $usage */
+    /** @var UsageDataInterface $usage */
     $usage = \Drupal::service('usage_data.usage');
     $additionalData = [
       'view_mode' => $view_mode,
@@ -59,10 +62,10 @@ function usage_data_entity_view(array &$build, EntityInterface $entity, EntityVi
  * Implements hook_views_pre_render().
  */
 function usage_data_views_pre_render($view) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   if ($view->getDisplay()->hasPath()) {
 
-    /** @var \Drupal\usage_data\UsageDataInterface $usage */
+    /** @var UsageDataInterface $usage */
     $usage = \Drupal::service('usage_data.usage');
 
     // For views we are going to concatenate the view id and the display id and
@@ -75,7 +78,7 @@ function usage_data_views_pre_render($view) {
 
   // Track reload for Ajax enabled views.
   if (!empty($rows = $view->result) && $view->getDisplay()->ajaxEnabled() && !empty($rows[0]->_entity)) {
-    /** @var \Drupal\usage_data\UsageDataInterface $usage */
+    /** @var UsageDataInterface $usage */
     $usage = \Drupal::service('usage_data.usage');
     $view->element['#attached']['drupalSettings']['usage_data']['url'] = $usage->getPostUrl();
   }
@@ -89,7 +92,7 @@ function usage_data_preprocess_page(&$variables) {
 
   // Omit views/entity routes.
   if (!usage_data_is_entity_route() && strpos($route_name, 'view.') !== 0) {
-    /** @var \Drupal\usage_data\UsageDataInterface $usage */
+    /** @var UsageDataInterface $usage */
     $usage = \Drupal::service('usage_data.usage');
     if ($data = $usage->getUsageData(UsageDataInterface::EVENT_TYPE_VIEW, 'route:' . $route_name, NULL, $variables)) {
       $variables['#attached']['drupalSettings']['usage_data']['data'][$route_name] = $data;
@@ -112,7 +115,7 @@ function usage_data_file_download($uri) {
     ->accessCheck(FALSE)
     ->execute();
   $fid = $fids ? array_key_first($fids) : 0;
-  /** @var \Drupal\usage_data\UsageDataInterface $usage */
+  /** @var UsageDataInterface $usage */
   $usage = \Drupal::service('usage_data.usage');
   $render = [];
   $additionalData = [
@@ -145,10 +148,10 @@ function usage_data_entity_predelete(EntityInterface $entity) {
  * @todo change to joins for proper implementations.
  */
 function usage_data_views_data() {
-  /** @var \Drupal\usage_data\Plugin\UsageTypeManager $usageTypeManager */
+  /** @var UsageTypeManager $usageTypeManager */
   $usageTypeManager = \Drupal::service('plugin.manager.usage_type');
   $entityTypeManager = \Drupal::entityTypeManager();
-  /** @var \Drupal\usage_data\UsageDataDatabaseStorage $usageDataDatabaseStorage */
+  /** @var UsageDataDatabaseStorage $usageDataDatabaseStorage */
   $usageDataDatabaseStorage = \Drupal::service('usage_data.storage.database');
   $data = [];
   if (!empty($activePlugins = $usageTypeManager->getActiveDefinitions())) {
