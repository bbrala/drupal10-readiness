modules/contrib/role_toggle/role_toggle.module
modules/contrib/role_toggle/src/AccountProxyDecoratorBase.php
modules/contrib/role_toggle/src/RoleToggle.php
modules/contrib/role_toggle/src/RoleToggleCurrentUser.php
modules/contrib/role_toggle/src/RoleToggleForm.php
modules/contrib/role_toggle/src/RoleTogglePathProcessor.php
modules/contrib/role_toggle/tests/src/Functional/AdminPageTest.php

5 files with changes
====================

1) modules/contrib/role_toggle/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/role_toggle/src/RoleToggleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\role_toggle;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\FormInterface;
@@ @@
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/role_toggle/src/RoleToggleCurrentUser.php:11

    ---------- begin diff ----------
@@ @@
    *
    * Ensure this is done before any code can query roles.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    */
   protected function prepareAccount(AccountInterface $account) {
     if ($account instanceof UserInterface && empty($account->role_toggle_account_prepared)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/role_toggle/src/RoleToggle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\role_toggle;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ @@
   }

   /**
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return bool
    */
   public static function userAccess($role) {
@@ @@
   }

   /**
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return string
    */
   public static function permissionIdToToggle($role) {
@@ @@
   }

   /**
-   * @param \Drupal\user\RoleInterface $role
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @param RoleInterface $role
+   * @return TranslatableMarkup
    */
   public static function permissionLabel($role) {
     return t('Toggle role %role', array('%role' => $role->label()));
@@ @@
   /**
    * Get all applicable user roles.
    *
-   * @return \Drupal\user\RoleInterface[]
+   * @return RoleInterface[]
    */
   public static function configurableRoles() {
     $roles = user_roles();
@@ @@
   }

   /**
-   * @return \Drupal\user\RoleInterface[]
+   * @return RoleInterface[]
    */
   public static function togglableRoles() {
     return array_filter(self::configurableRoles(), function(RoleInterface $role) {
@@ @@
   /**
    * Check if a user can toggle a role.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return bool
    */
   public static function canToggle($role, AccountInterface $account = NULL) {
@@ @@
    *
    * @see \Drupal\user\RoleStorage::isPermissionInRoles
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param string $permissionId
    *
    * @return bool
@@ @@
   }

   /**
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    * @return bool
    */
   public static function canToggleAny(AccountInterface $account = NULL) {
@@ @@
   }

   /**
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return bool
    */
   public static function isEnabledRole($role) {
@@ @@
     ];

     if (static::canToggleAny($account)) {
-      /** @var \Drupal\Core\Form\FormBuilderInterface $form_builder */
+      /** @var FormBuilderInterface $form_builder */
       $form_builder = \Drupal::service('form_builder');
       $form = $form_builder->getForm(RoleToggleForm::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/role_toggle/src/AccountProxyDecoratorBase.php:7

    ---------- begin diff ----------
@@ @@
 abstract class AccountProxyDecoratorBase implements AccountProxyInterface {

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $decorated;

@@ @@
   /**
    * AccountProxyDecoratorBase constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $decorated
+   * @param AccountProxyInterface $decorated
    */
   public function __construct(AccountProxyInterface $decorated) {
     $this->decorated = $decorated;
@@ @@
   }

   /**
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    */
   public function getDecorated() {
     return $this->decorated;
@@ @@
   }

   /**
-   * @param \Drupal\Core\Session\AccountProxyInterface $decorated
+   * @param AccountProxyInterface $decorated
    */
   public function setDecorated(AccountProxyInterface $decorated) {
     $this->decorated = $decorated;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

