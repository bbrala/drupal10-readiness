modules/contrib/bookish_admin/bookish_admin.module
modules/contrib/bookish_admin/modules/bookish_ckeditor/src/Plugin/Filter/BookishOEmbedFilter.php
modules/contrib/bookish_admin/modules/bookish_ckeditor/tests/src/Kernel/BookishOEmbedFilterTest.php
modules/contrib/bookish_admin/modules/bookish_contact/bookish_contact.install
modules/contrib/bookish_admin/modules/bookish_image/bookish_image.module
modules/contrib/bookish_admin/modules/bookish_image/src/Ajax/BookishImageCKEditorCommand.php
modules/contrib/bookish_admin/modules/bookish_image/src/BookishImageFormTrait.php
modules/contrib/bookish_admin/modules/bookish_image/src/Controller/BookishImagePreview.php
modules/contrib/bookish_admin/modules/bookish_image/src/Form/BookishImageForm.php
modules/contrib/bookish_admin/modules/bookish_image/src/ParamConverter/BookishUuidConverter.php
modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Field/FieldFormatter/BookishImageFormatter.php
modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Field/FieldFormatter/BookishResponsiveImageFormatter.php
modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Field/FieldWidget/BookishImageWidget.php
modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Filter/BookishImageFilter.php
modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/ImageEffect/BookishImageCrop.php
modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/ImageEffect/BookishImageEffect.php
modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/ImageEffect/BookishImageScaleAndCrop.php
modules/contrib/bookish_admin/modules/bookish_image/tests/src/Kernel/BookishImageFilterTest.php
modules/contrib/bookish_admin/modules/bookish_image/tests/src/Kernel/BookishImageFormTest.php
modules/contrib/bookish_admin/modules/bookish_image/tests/src/Kernel/BookishImagePreviewTest.php
modules/contrib/bookish_admin/modules/bookish_speed/bookish_speed.module
modules/contrib/bookish_admin/modules/bookish_speed/src/BookishSpeedServiceProvider.php
modules/contrib/bookish_admin/modules/bookish_speed/src/EventSubscriber/ModifyHtmlSubscriber.php
modules/contrib/bookish_admin/modules/bookish_speed/src/Form/BookishSpeedSettingsForm.php
modules/contrib/bookish_admin/modules/bookish_tags/src/Plugin/Field/FieldWidget/BookishTagsWidget.php
modules/contrib/bookish_admin/modules/bookish_toolbar/bookish_toolbar.module
modules/contrib/bookish_admin/modules/bookish_yaml/bookish_yaml.module
modules/contrib/bookish_admin/src/Plugin/Field/FieldFormatter/BookishSummary.php
modules/contrib/bookish_admin/src/Plugin/Filter/BookishHeadingFilter.php

15 files with changes
=====================

1) modules/contrib/bookish_admin/modules/bookish_yaml/bookish_yaml.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FieldItemInterface;
 /**
  * @file
  * Contains hook implementations for the bookish_yaml module.
@@ @@
       ], TRUE)) {
         continue;
       }
-      /** @var \Drupal\Core\Field\FieldItemInterface $field_item */
+      /** @var FieldItemInterface $field_item */
       foreach ($field as $field_item) {
         $value = $field_item->getValue();
         $value['value'] = _bookish_yaml_process($value['value']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/bookish_admin/modules/bookish_tags/src/Plugin/Field/FieldWidget/BookishTagsWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_tags\Plugin\Field\FieldWidget;

+use Drupal\taxonomy\TermInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The key value factory.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValueFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The selection plugin manager.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_factory
    *   The key value factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_manager
+   * @param SelectionPluginManagerInterface $selection_manager
    *   The selection plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, KeyValueFactoryInterface $key_value_factory, AccountInterface $current_user, SelectionPluginManagerInterface $selection_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
     $entity = $items->getEntity();
-    /** @var \Drupal\taxonomy\TermInterface[] $referenced_entities */
+    /** @var TermInterface[] $referenced_entities */
     $referenced_entities = $items->referencedEntities();
     $default_value = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/bookish_admin/modules/bookish_speed/bookish_speed.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Asset\AssetResolver;
+use Drupal\Core\Asset\AssetCollectionGrouperInterface;
 /**
  * @file
  * Hook implementations for bookish_speed.
@@ @@
   $local_assets = &drupal_static(ModifyHtmlSubscriber::STATIC_KEY, []);
   $local_assets = [];

-  /** @var \Drupal\Core\Asset\AssetResolver $asset_resolver */
+  /** @var AssetResolver $asset_resolver */
   $asset_resolver = \Drupal::service('asset.resolver');
-  /** @var \Drupal\Core\Asset\AssetCollectionGrouperInterface $css_grouper */
+  /** @var AssetCollectionGrouperInterface $css_grouper */
   $css_grouper = \Drupal::service('asset.css.collection_grouper');
-  /** @var \Drupal\Core\Asset\AssetCollectionGrouperInterface $js_grouper */
+  /** @var AssetCollectionGrouperInterface $js_grouper */
   $js_grouper = \Drupal::service('asset.js.collection_grouper');

   // Get CSS assets.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/ImageEffect/BookishImageScaleAndCrop.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Plugin\ImageEffect;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Image\ImageInterface;
 use Drupal\image\Plugin\ImageEffect\ResizeImageEffect;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
     $height = $this->configuration['height'];
     $scale = max($width / $image->getWidth(), $height / $image->getHeight());

-    /** @var \Drupal\file\FileInterface[] $files */
+    /** @var FileInterface[] $files */
     $files = $this->entityTypeManager
       ->getStorage('file')
       ->loadByProperties([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/ImageEffect/BookishImageEffect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Plugin\ImageEffect;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Image\ImageInterface;
 use Drupal\image\ImageEffectBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function applyEffect(ImageInterface $image) {
-    /** @var \Drupal\system\Plugin\ImageToolkit\GDToolkit $toolkit */
+    /** @var GDToolkit $toolkit */
     $toolkit = $image->getToolkit();
     if (!($toolkit instanceof GDToolkit)) {
       return TRUE;
@@ @@
     if (!$resource) {
       return TRUE;
     }
-    /** @var \Drupal\file\FileInterface[] $files */
+    /** @var FileInterface[] $files */
     $files = $this->entityTypeManager
       ->getStorage('file')
       ->loadByProperties([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/ImageEffect/BookishImageCrop.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Plugin\ImageEffect;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Image\ImageInterface;
 use Drupal\image\Plugin\ImageEffect\ResizeImageEffect;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function applyEffect(ImageInterface $image) {
-    /** @var \Drupal\file\FileInterface[] $files */
+    /** @var FileInterface[] $files */
     $files = $this->entityTypeManager
       ->getStorage('file')
       ->loadByProperties([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Filter/BookishImageFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Plugin\Filter;

+use Drupal\image\Entity\ImageStyle;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository, ImageFactory $image_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
           continue;
         }
         $uuid = $node->getAttribute('data-entity-uuid');
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = $this->entityRepository->loadEntityByUuid('file', $uuid);
         if (!($file instanceof FileInterface)) {
           continue;
         }
-        /** @var \Drupal\image\Entity\ImageStyle $image_style */
+        /** @var ImageStyle $image_style */
         $image_style = $image_style_storage->load($node->getAttribute('data-bookish-image-style'));
         if (!$image_style) {
           continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Field/FieldWidget/BookishImageWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Plugin\Field\FieldWidget;

+use Drupal\file\FileInterface;
 use Drupal\bookish_image\BookishImageFormTrait;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
     $item['fids'] = $element['fids']['#value'];

     if (!empty($element['#files'])) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = reset($element['#files']);
       $element = static::buildImageForm($element, $unique_id, $file, \Drupal::service('image.factory'), ImageStyle::load('bookish_image_thumbnail'));
       $element['bookish_image']['bookish_image_data']['zoom']['#access'] = !!$element['#show_zoom'];
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
@@ @@
       return $element['preview'];
     }

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = reset($element['#files']);
     $image_data = json_decode($file->bookish_image_data->getString(), TRUE);
     $new_image_data = $form_state->getValue(array_merge($element['#parents'], [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Field/FieldFormatter/BookishResponsiveImageFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Plugin\Field\FieldFormatter;

+use Drupal\Core\Render\Renderer;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = parent::viewElements($items, $langcode);
     $files = $this->getEntitiesToView($items, $langcode);
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
     foreach ($elements as $delta => $element) {
       if (!isset($files[$delta])) {
         continue;
       }
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $files[$delta];
       $original_image = $this->imageFactory->get($file->getFileUri());
       if (!$original_image) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bookish_admin/modules/bookish_image/src/Plugin/Field/FieldFormatter/BookishImageFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Plugin\Field\FieldFormatter;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
       if (!isset($files[$delta])) {
         continue;
       }
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $files[$delta];
       $derivative_uri = $image_style->buildUri($file->getFileUri());
       if (!file_exists($derivative_uri)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bookish_admin/modules/bookish_image/src/Form/BookishImageForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_image\Form;

+use Drupal\image\Entity\ImageStyle;
+use Drupal\image\ImageStyleInterface;
 use Drupal\bookish_image\Ajax\BookishImageCKEditorCommand;
 use Drupal\bookish_image\BookishImageFormTrait;
 use Drupal\bookish_image\Plugin\ImageEffect\BookishImageScaleAndCrop;
@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new BookishImageForm object.
    *
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ImageFactory $image_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ @@

     $image_style = NULL;
     if ($image_style_name && $image_style_name !== 'none') {
-      /** @var \Drupal\image\Entity\ImageStyle $image_style */
+      /** @var ImageStyle $image_style */
       $image_style = $image_style_storage->load($image_style_name);
       if (!$image_style) {
         $this->messenger()->addError('Could not load an image style use with the preview.');
@@ @@
     $unique_id = $file->id() . '-modal';
     $preview_id = 'bookish-image-preview-' . $unique_id;

-    /** @var \Drupal\image\Entity\ImageStyle[] $image_styles */
+    /** @var ImageStyle[] $image_styles */
     $image_styles = $image_style_storage->loadMultiple();
     ksort($image_styles);
     $bookish_styles = [];
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public static function submitAjax(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $form['#file'];
     $url = $file->getFileUri();
-    /** @var \Drupal\image\ImageStyleInterface|NULL $image_style  */
+    /** @var ImageStyleInterface|NULL $image_style  */
     $image_style = $form['#image_style'];
     $image_style_name = NULL;
     if ($image_style) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public static function cancelAjax(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bookish_admin/modules/bookish_image/src/Controller/BookishImagePreview.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * Constructs a new BookishImagePreview object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
    */
   public function __construct(FileSystemInterface $file_system, ImageFactory $image_factory) {
@@ @@
   /**
    * Generates a temporary image style derivative using effect settings.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The image.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The contents of the preview image.
    */
   public function build(FileInterface $file, ImageStyleInterface $image_style, Request $request) {
@@ @@
   /**
    * Determines access to the preview and form routes.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The image.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An access result.
    */
   public static function access(FileInterface $file, ImageStyleInterface $image_style = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/bookish_admin/modules/bookish_image/src/BookishImageFormTrait.php:46

    ---------- begin diff ----------
@@ @@
    *   The form element, which may be nested.
    * @param string $unique_id
    *   A partial HTML ID that is unique to this form build.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The current image.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style.
    *
    * @return array
@@ @@
   /**
    * Builds the preview element.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The image.
-   * @param \Drupal\image\ImageStyleInterface|null $image_style
+   * @param ImageStyleInterface|null $image_style
    *   The image style.
    * @param array $image_data
    *   The current bookish_image_data.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/bookish_admin/modules/bookish_image/bookish_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\image\ImageStyleInterface;
 /**
  * @file
  * Hook implementations for bookish_image.
@@ @@
   if (empty($uri)) {
     return;
   }
-  /** @var \Drupal\image\ImageStyleInterface[] $image_styles */
+  /** @var ImageStyleInterface[] $image_styles */
   $image_styles = \Drupal::entityTypeManager()->getStorage('image_style')->loadMultiple();
   foreach ($image_styles as $image_style) {
     $image_style->flush($uri);
@@ @@
 /**
  * Updates a file object with the new bookish image data, without saving it.
  *
- * @param \Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   The file to update.
  * @param mixed $new_image_data
  *   The new image data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/bookish_admin/modules/bookish_ckeditor/src/Plugin/Filter/BookishOEmbedFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bookish_ckeditor\Plugin\Filter;

+use GuzzleHttp\Client;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ClientInterface $http_client) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

