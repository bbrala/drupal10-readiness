modules/contrib/media_fotoweb/media_fotoweb.module
modules/contrib/media_fotoweb/src/Annotation/FotowebImageFetcher.php
modules/contrib/media_fotoweb/src/Form/FotowebBrowserForm.php
modules/contrib/media_fotoweb/src/Form/FotowebSettingsForm.php
modules/contrib/media_fotoweb/src/FotowebClient.php
modules/contrib/media_fotoweb/src/FotowebClientFactory.php
modules/contrib/media_fotoweb/src/FotowebLoginManager.php
modules/contrib/media_fotoweb/src/FotowebLoginManagerInterface.php
modules/contrib/media_fotoweb/src/FotowebWidgetTrait.php
modules/contrib/media_fotoweb/src/ImageFetcherBase.php
modules/contrib/media_fotoweb/src/ImageFetcherInterface.php
modules/contrib/media_fotoweb/src/ImageFetcherManager.php
modules/contrib/media_fotoweb/src/MediaFotowebLibraryUiBuilder.php
modules/contrib/media_fotoweb/src/Plugin/EntityBrowser/Widget/FotowebSelection.php
modules/contrib/media_fotoweb/src/Plugin/ImageFetcher/OriginalImage.php
modules/contrib/media_fotoweb/src/Plugin/ImageFetcher/RenditionImage.php
modules/contrib/media_fotoweb/src/Plugin/media/Source/Fotoweb.php
modules/contrib/media_fotoweb/src/RenditionNegotiator.php
modules/contrib/media_fotoweb/tests/src/Unit/FotowebLoginManagerTest.php
modules/contrib/media_fotoweb/tests/src/Unit/RenditionImageFetcherTest.php
modules/contrib/media_fotoweb/tests/src/Unit/RenditionNegotiatorTest.php

19 files with changes
=====================

1) modules/contrib/media_fotoweb/tests/src/Unit/RenditionNegotiatorTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The rendition negotiator service.
    *
-   * @var \Drupal\media_fotoweb\RenditionNegotiator
+   * @var RenditionNegotiator
    */
   protected $renditionNegotiator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $configFactory = $this
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_fotoweb/tests/src/Unit/RenditionImageFetcherTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_fotoweb\Unit;

+use GuzzleHttp\Psr7\Request;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\media_fotoweb\FotowebClient;
 use Drupal\media_fotoweb\Plugin\ImageFetcher\RenditionImage;
@@ @@
   /**
    * The rendition negotiator service.
    *
-   * @var \Drupal\media_fotoweb\RenditionNegotiator
+   * @var RenditionNegotiator
    */
   protected $renditionNegotiator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $configFactory = $this
@@ @@
    *
    * @param array $responses
    *   An array of mocked responses.
-   * @param \GuzzleHttp\Handler\MockHandler|null $mockHandler
+   * @param MockHandler|null $mockHandler
    *   The guzzle mock handler.
    *
-   * @return \GuzzleHttp\Handler\MockHandler
+   * @return MockHandler
    *   The modified guzzle mock handler.
    */
   protected function buildMockHandler(array $responses, MockHandler $mockHandler = NULL) {
@@ @@

     // Verify that the expected preview image was requested.
     $transaction = array_pop($container);
-    /** @var \GuzzleHttp\Psr7\Request $request */
+    /** @var Request $request */
     $request = $transaction['request'];
     $requestPath = $request->getUri()->getPath();
     $this->assertEquals('/fotoweb/cache/5000/myimage.t5653107a.m1600.xuETTbu2auFn8DaBE75CwjFgVNCFnggG4aSibC7uXR88.jpg', $requestPath, 'The request path matches the expected preview.');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/media_fotoweb/tests/src/Unit/FotowebLoginManagerTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Fotoweb Login Manager service.
    *
-   * @var \Drupal\media_fotoweb\FotowebLoginManager
+   * @var FotowebLoginManager
    */
   protected $fotowebLoginManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $config_factory = $this
@@ @@
     $container->set('config.factory', $config_factory);

     // Create mocks.
-    $fieldItem = $this->getMockBuilder(FieldItemListInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fieldItem = $this->createMock(FieldItemListInterface::class);
     $fieldItem->expects($this->any())
       ->method('__get')
       ->with('value')
       ->willReturn('fotoweb_testuser');

-    $testUser = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $testUser = $this->createMock('Drupal\user\Entity\User');
     $testUser->expects($this->any())
       ->method('hasField')
       ->with('name')
@@ @@
     $username = 'fotoweb_testuser';
     // The login token uses time based components, so we are only checking
     // for the expected format.
-    $this->assertRegExp('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getUserLoginTokenFromUsername($username));
+    $this->assertMatchesRegularExpression('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getUserLoginTokenFromUsername($username));
   }

   /**
@@ @@
       ->method('id')
       ->will($this->returnValue(1));

-    $this->assertRegExp('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getLoginTokenFromAccount($account));
+    $this->assertMatchesRegularExpression('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getLoginTokenFromAccount($account));
   }

 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/media_fotoweb/src/RenditionNegotiator.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * RenditionNegotiator constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Return the best fit asset image path from a asset resource.
    *
-   * @param \Fotoweb\Representation\Asset $asset
+   * @param Asset $asset
    *   The Fotoweb asset.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/media_fotoweb/src/Plugin/media/Source/Fotoweb.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_fotoweb\Plugin\media\Source;

+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\media_fotoweb\ImageFetcherInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The Image Fetcher Plugin Manager.
    *
-   * @var \Drupal\media_fotoweb\ImageFetcherManager
+   * @var ImageFetcherManager
    */
   protected $imageFetcherManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\media_fotoweb\ImageFetcherManager $image_fetcher_manager
+   * @param ImageFetcherManager $image_fetcher_manager
    *   The Image Fetcher Plugin Manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem, Token $token, ImageFetcherManager $image_fetcher_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\media\MediaTypeInterface $bundle */
+    /** @var MediaTypeInterface $bundle */
     $bundle = $form_state->getFormObject()->getEntity();

     $form = parent::buildConfigurationForm($form, $form_state);
@@ @@
   /**
    * Build the local image field options.
    *
-   * @param \Drupal\media\MediaTypeInterface $bundle
+   * @param MediaTypeInterface $bundle
    *   The bundle of the configuration form.
    *
    * @return array
@@ @@
   /**
    * Returns the Thumbnail for a given media.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get a file for.
    *
    * @return string
@@ @@
   /**
    * Returns an associated file or creates a new one.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get a file for.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   A file entity or FALSE on failure.
    */
   protected function createOrGetFile(MediaInterface $media) {
@@ @@
   /**
    * Load an existing local file for the media.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get the existing file ID from.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   The existing file or FALSE if one was not found.
    */
   protected function getExistingFile(MediaInterface $media) {
     $file_field = $this->getLocalFileField($media);
     if ($media->hasField($file_field)) {
-      /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $file */
+      /** @var FileItem $file */
       $file_item = $media->get($file_field)->first();
       if (!empty($file_item->target_id)) {
         return $this->entityTypeManager->getStorage('file')
@@ @@
   /**
    * Creates a new file for a fotoweb asset.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    * @param int $replace
    *   Flag for dealing with existing files.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   The created file or FALSE on failure.
    */
   public function createNewFile(MediaInterface $media, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ @@
     $config = $this->configFactory->get('media_fotoweb.settings');
     $storageType = $config->get('file_storage_type');

-    /** @var \Drupal\media_fotoweb\ImageFetcherInterface $imageFetcher */
+    /** @var ImageFetcherInterface $imageFetcher */
     $imageFetcher = $this->imageFetcherManager->createInstance($storageType);
     $resourceUrl = $this->getMetadata($media, 'href');
     // For already stored media items we might get back a nested array
@@ @@
         }
     }

-    $file = file_save_data($data, $destination_path, $replace);
+    $file = \Drupal::service('file.repository')->writeData($data, $destination_path, $replace);

     return $file;
   }
@@ @@
   /**
    * Gets the file field being used to store the fotoweb asset.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get the mapped file field.
    *
    * @return bool|string
@@ @@
    *   The name of the file field on the media bundle or FALSE on failure.
    */
   protected function getLocalFileField(MediaInterface $media) {
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     $media_type = $this->entityTypeManager->getStorage('media_type')->load($media->bundle());
     $source = $media_type->getSource();
     return $source->getConfiguration()['local_image'];
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/media_fotoweb/src/Plugin/ImageFetcher/RenditionImage.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The rendition negotiator.
    *
-   * @var \Drupal\media_fotoweb\RenditionNegotiator
+   * @var RenditionNegotiator
    */
   protected $renditionNegotiator;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\media_fotoweb\FotowebClient $client
+   * @param FotowebClient $client
    *   The Fotoweb client.
-   * @param \Drupal\media_fotoweb\RenditionNegotiator $rendition_negotiator
+   * @param RenditionNegotiator $rendition_negotiator
    *   The rendition negotiator.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FotowebClient $client, RenditionNegotiator $rendition_negotiator
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/media_fotoweb/src/Plugin/ImageFetcher/OriginalImage.php:25

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\media_fotoweb\FotowebClient $client
+   * @param FotowebClient $client
    *   The Fotoweb client.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FotowebClient $client) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/media_fotoweb/src/MediaFotowebLibraryUiBuilder.php:20

    ---------- begin diff ----------
@@ @@
    * Makes $opener_resolver an optional parameter for installations that do not
    * use media_library.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\views\ViewExecutableFactory $views_executable_factory
+   * @param ViewExecutableFactory $views_executable_factory
    *   The views executable factory.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The currently active request object.
-   * @param \Drupal\media_library\OpenerResolverInterface|NULL $opener_resolver
+   * @param OpenerResolverInterface|NULL $opener_resolver
    *   The opener resolver.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RequestStack $request_stack, ViewExecutableFactory $views_executable_factory, FormBuilderInterface $form_builder, OpenerResolverInterface $opener_resolver = NULL) {
@@ @@
    * Fotoweb is made for selecting all assets via the Fotoweb Browser.
    * Therefore we remove the media items view and only keep the "form".
    *
-   * @param \Drupal\media_library\MediaLibraryState $state
+   * @param MediaLibraryState $state
    *   The current state of the media library, derived from the current request.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/media_fotoweb/src/ImageFetcherManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/media_fotoweb/src/ImageFetcherInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_fotoweb;

+use GuzzleHttp\Psr7\Response;
 use Drupal\Component\Plugin\PluginInspectionInterface;

 /**
@@ @@
   /**
    * Returns the response object.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    */
   public function getResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/media_fotoweb/src/ImageFetcherBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_fotoweb;

+use GuzzleHttp\Psr7\Response;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;

@@ @@
   /**
    * The Fotoweb client.
    *
-   * @var \Drupal\media_fotoweb\FotowebClient
+   * @var FotowebClient
    */
   protected $client;

@@ @@
   /**
    * The HTTP response of the fetched image.
    *
-   * @var \GuzzleHttp\Psr7\Response
+   * @var Response
    */
   protected $response;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/media_fotoweb/src/FotowebWidgetTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_fotoweb;

+use Drupal\media\MediaTypeInterface;
+use Drupal\media_fotoweb\Plugin\media\Source\Fotoweb;
+use Drupal\media\MediaInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     $entities = [];
     $selected = json_decode($form_state->getValue('fotoweb_selected', []));

-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     $media_type = $this->entityTypeManager->getStorage('media_type')
       ->load($entity_type_id);
-    /** @var \Drupal\media_fotoweb\Plugin\media\Source\Fotoweb $plugin */
+    /** @var Fotoweb $plugin */
     $plugin = $media_type->getSource();
     $source_field = $plugin->getConfiguration()['source_field'];

@@ @@
           $entities[] = $media;
         }
         else {
-          /** @var \Drupal\media\MediaInterface $media */
+          /** @var MediaInterface $media */
           $media = $this->entityTypeManager->getStorage('media')->create([
             'bundle' => $media_type->id(),
             $source_field => $asset->href,
@@ @@
    * @param object $asset
    *   The Fotoweb asset.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The selected media entity.
    */
   protected function loadAndSyncMedia($mid, object $asset) {
@@ @@
     $config = $this->configFactory->get('media_fotoweb.settings');
     $asset_update_type = $config->get('asset_update_type');

-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->entityTypeManager->getStorage('media')
       ->load(reset($mid));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/media_fotoweb/src/FotowebLoginManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the Fotoweb Login Token for a Drupal account.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The user proxy object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/media_fotoweb/src/FotowebLoginManager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new FotowebLoginManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Returns the user from a given account.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The given user account.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The user entity.
    */
   protected function getUserFromAccount(AccountProxyInterface $account) {
@@ @@
   /**
    * Returns the Fotoweb user name from a given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The given user.
    */
   protected function getFotowebUsernameFromUser(UserInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/media_fotoweb/src/FotowebClientFactory.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Creates the FotowebClient from configuration values.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
-   * @return \Drupal\media_fotoweb\FotowebClient
+   * @return FotowebClient
    *   The Fotoweb Client.
    */
   public static function create(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/media_fotoweb/src/FotowebClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_fotoweb;

+use GuzzleHttp\Command\ServiceClientInterface;
 use Fotoweb\FotowebClient as FotowebAPIClient;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The Guzzle Service Client.
    *
-   * @var \GuzzleHttp\Command\ServiceClientInterface
+   * @var ServiceClientInterface
    */
   public $client;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/media_fotoweb/src/Form/FotowebSettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The Fotoweb client.
    *
-   * @var \Drupal\media_fotoweb\FotowebClient
+   * @var FotowebClient
    */
   protected $fotowebClient;

@@ @@
   /**
    * The Image Fetcher Manager.
    *
-   * @var \Drupal\media_fotoweb\ImageFetcherManager
+   * @var ImageFetcherManager
    */
   protected $imageFetcherManager;

@@ @@
   /**
    * Constructs a FotowebSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\media_fotoweb\FotowebClient $fotoweb_client
+   * @param FotowebClient $fotoweb_client
    *   The Fotoweb client.
-   * @param \Drupal\media_fotoweb\ImageFetcherManager $image_fetcher_manager
+   * @param ImageFetcherManager $image_fetcher_manager
    *   The image fetcher manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager, FotowebClient $fotoweb_client, ImageFetcherManager $image_fetcher_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/media_fotoweb/src/Form/FotowebBrowserForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The Fotoweb login manager.
    *
-   * @var \Drupal\media_fotoweb\FotowebLoginManagerInterface
+   * @var FotowebLoginManagerInterface
    */
   protected $loginManager;

@@ @@
   /**
    * Constructs a AddFormBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\media_library\MediaLibraryUiBuilder $library_ui_builder
+   * @param MediaLibraryUiBuilder $library_ui_builder
    *   The media library UI builder.
-   * @param \Drupal\media_library\OpenerResolverInterface $opener_resolver
+   * @param OpenerResolverInterface $opener_resolver
    *   The opener resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory interface.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\media_fotoweb\FotowebLoginManagerInterface $login_manager
+   * @param FotowebLoginManagerInterface $login_manager
    *   The Fotoweb login manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MediaLibraryUiBuilder $library_ui_builder, OpenerResolverInterface $opener_resolver = NULL, ConfigFactoryInterface $config_factory, AccountInterface $current_user, FotowebLoginManagerInterface $login_manager) {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function addButtonSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/media_fotoweb/src/Annotation/FotowebImageFetcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_fotoweb\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [ERROR] Could not process                                                      
         "modules/contrib/media_fotoweb/src/Plugin/EntityBrowser/Widget/FotowebSel
         ection.php" file, due to:                                              
         "Analyze error: "Class Drupal\entity_browser\WidgetBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

