diff --git a/src/Resource/ViewsResource.php b/src/Resource/ViewsResource.php
index d729567..a5e9710 100644
--- a/src/Resource/ViewsResource.php
+++ b/src/Resource/ViewsResource.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\jsonapi_views\Resource;
 
+use Drupal\Core\Pager\PagerManagerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ -25,7 +28,7 @@ final class ViewsResource extends EntityResourceBase {
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -71,7 +74,7 @@ final class ViewsResource extends EntityResourceBase {
   /**
    * Get views pager.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   View executable.
    *
    * @return array
@@ -84,7 +87,7 @@ final class ViewsResource extends EntityResourceBase {
       return [$pager_links, count($view->result)];
     }
 
-    /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
+    /** @var PagerManagerInterface $pager_manager */
     $pager_manager = \Drupal::service('pager.manager');
     $element = $view->pager->getPagerId();
     $pager = $pager_manager->getPager($element);
@@ -142,14 +145,14 @@ final class ViewsResource extends EntityResourceBase {
   /**
    * Process the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function process(Request $request): ResourceResponse {
     $view = Views::getView($request->get('view'));
diff --git a/src/Routing/Routes.php b/src/Routing/Routes.php
index a004d53..d3a6df4 100644
--- a/src/Routing/Routes.php
+++ b/src/Routing/Routes.php
@@ -29,14 +29,14 @@ class Routes implements ContainerInjectionInterface {
   /**
    * Resource type bundle repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;
 
   /**
    * Entity type bundle info interface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
diff --git a/tests/src/Functional/JsonapiViewsResourceTest.php b/tests/src/Functional/JsonapiViewsResourceTest.php
index 4c43711..398adfa 100644
--- a/tests/src/Functional/JsonapiViewsResourceTest.php
+++ b/tests/src/Functional/JsonapiViewsResourceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\jsonapi_views\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Url;
@@ -24,7 +25,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
   /**
    * The account to use for authentication.
    *
-   * @var null|\Drupal\Core\Session\AccountInterface
+   * @var null|AccountInterface
    */
   protected $account;
 
@@ -138,7 +139,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     $this->assertIsArray($response_document['data']);
     $this->assertArrayNotHasKey('errors', $response_document);
     $this->assertCount(2, $response_document['data']);
-    $this->assertEqual(2, $response_document['meta']['count']);
+    $this->assertEquals(2, $response_document['meta']['count']);
     $this->assertCacheContext($headers, 'url.query_args:page');
     $this->assertCacheTags($headers, [
       'config:views.view.jsonapi_views_test_node_view',
@@ -156,7 +157,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     $this->assertIsArray($response_document['data']);
     $this->assertArrayNotHasKey('errors', $response_document);
     $this->assertCount(1, $response_document['data']);
-    $this->assertEqual(1, $response_document['meta']['count']);
+    $this->assertEquals(1, $response_document['meta']['count']);
     $this->assertSame($room->uuid(), $response_document['data'][0]['id']);
     $this->assertCacheContext($headers, 'url.query_args:page');
 
@@ -168,7 +169,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     $this->assertIsArray($response_document['data']);
     $this->assertArrayNotHasKey('errors', $response_document);
     $this->assertCount(1, $response_document['data']);
-    $this->assertEqual(1, $response_document['meta']['count']);
+    $this->assertEquals(1, $response_document['meta']['count']);
     $this->assertSame($location->uuid(), $response_document['data'][0]['id']);
     $this->assertCacheContext($headers, 'url.query_args:page');
 
@@ -247,7 +248,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     );
 
     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(9, $response_document['meta']['count']);
+    $this->assertEquals(9, $response_document['meta']['count']);
     $this->assertArrayHasKey('next', $response_document['links']);
     $this->assertSame(array_slice(array_keys($nodes['all']), 0, 5), array_map(static function (array $data) {
       return $data['id'];
@@ -371,7 +372,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     );
 
     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(9, $response_document['meta']['count']);
+    $this->assertEquals(9, $response_document['meta']['count']);
     $this->assertArrayHasKey('next', $response_document['links']);
     $this->assertSame(array_slice(array_keys($nodes['all']), 0, 5), array_map(static function (array $data) {
       return $data['id'];
@@ -406,7 +407,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     );
 
     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(5, $response_document['meta']['count']);
+    $this->assertEquals(5, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][0]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ -421,7 +422,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     );
 
     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][0]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ -437,7 +438,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     );
 
     $this->assertCount(5, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][1]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ -456,7 +457,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     );
 
     $this->assertCount(2, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertSame(array_keys($nodes['paged'][2]), array_map(static function (array $data) {
       return $data['id'];
     }, $response_document['data']));
@@ -475,7 +476,7 @@ class JsonapiViewsResourceTest extends ViewTestBase {
     );
 
     $this->assertCount(0, $response_document['data']);
-    $this->assertEqual(12, $response_document['meta']['count']);
+    $this->assertEquals(12, $response_document['meta']['count']);
     $this->assertArrayNotHasKey('next', $response_document['links']);
     $this->assertCacheContext($headers, 'url.query_args:page');
   }
