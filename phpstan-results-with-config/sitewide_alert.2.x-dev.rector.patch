diff --git a/modules/sitewide_alert_block/src/Plugin/Block/SitewideAlertBlock.php b/modules/sitewide_alert_block/src/Plugin/Block/SitewideAlertBlock.php
index e5e8349..15271b6 100644
--- a/modules/sitewide_alert_block/src/Plugin/Block/SitewideAlertBlock.php
+++ b/modules/sitewide_alert_block/src/Plugin/Block/SitewideAlertBlock.php
@@ -21,7 +21,7 @@ class SitewideAlertBlock extends BlockBase implements ContainerFactoryPluginInte
   /**
    * The alert placeholder rendering service.
    *
-   * @var \Drupal\sitewide_alert\SitewideAlertRendererInterface
+   * @var SitewideAlertRendererInterface
    */
   protected $renderer;
 
@@ -34,7 +34,7 @@ class SitewideAlertBlock extends BlockBase implements ContainerFactoryPluginInte
    *   Block plugin id.
    * @param mixed $plugin_definition
    *   Block plugin configuration.
-   * @param \Drupal\sitewide_alert\SitewideAlertRendererInterface $renderer
+   * @param SitewideAlertRendererInterface $renderer
    *   Alert placeholder rendering service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SitewideAlertRendererInterface $renderer) {
diff --git a/sitewide_alert.install b/sitewide_alert.install
index f5881ff..f8f1a67 100644
--- a/sitewide_alert.install
+++ b/sitewide_alert.install
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityType;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * @file
  * Install, update and uninstall functions for the sitewide_alert module.
@@ -76,7 +79,7 @@ function sitewide_alert_update_9002() {
  */
 function _sitewide_alert_rename_metadata_key(string $entity_type_id, string $target_field_name): void {
   // Change the Revision metadata key in the entity type.
-  /** @var \Drupal\Core\Entity\ContentEntityType $entity_type */
+  /** @var ContentEntityType $entity_type */
   $entity_type = \Drupal::entityDefinitionUpdateManager()->getEntityType($entity_type_id);
   $metadata_key = 'revision_log_message';
   $metadata_key_value = $entity_type->getRevisionMetadataKey($metadata_key);
@@ -86,7 +89,7 @@ function _sitewide_alert_rename_metadata_key(string $entity_type_id, string $tar
   }
   // Set the metadata key value.
   $entity_type->setRevisionMetadataKey($metadata_key, $target_field_name);
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $schema_repository */
   $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   // Store the changes in the last installed definition.
   $schema_repository->setLastInstalledDefinition($entity_type);
@@ -103,11 +106,11 @@ function _sitewide_alert_rename_metadata_key(string $entity_type_id, string $tar
  *   The target field name.
  */
 function _sitewide_alert_rename_field_storage_definition(string $entity_type_id, string $current_field_name, string $target_field_name): void {
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $schema_repository */
   $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $field_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
   $field_definition_changed = FALSE;
-  /** @var \Drupal\Core\Field\BaseFieldDefinition $target_field_definition */
+  /** @var BaseFieldDefinition $target_field_definition */
   $target_field_definition = NULL;
   if (isset($field_storage_definitions[$current_field_name])) {
     $target_field_definition = $field_storage_definitions[$current_field_name];
diff --git a/sitewide_alert.module b/sitewide_alert.module
index c2a32ca..175b665 100644
--- a/sitewide_alert.module
+++ b/sitewide_alert.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 /**
  * @file
  * Contains sitewide_alert.module.
@@ -39,7 +40,7 @@ function sitewide_alert_theme() {
  * Prepares sitewide alert variables for twig template.
  */
 function template_preprocess_sitewide_alert(&$variables) {
-  /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $sitewideAlert */
+  /** @var SitewideAlertInterface $sitewideAlert */
   $sitewideAlert = $variables['elements']['#sitewide_alert'];
   $variables['sitewide_alert'] = $sitewideAlert;
 
@@ -73,7 +74,7 @@ function template_preprocess_sitewide_alert(&$variables) {
  */
 function sitewide_alert_theme_suggestions_sitewide_alert(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $sitewideAlert */
+  /** @var SitewideAlertInterface $sitewideAlert */
   $sitewideAlert = $variables['elements']['#sitewide_alert'];
 
   $suggestions[] = 'sitewide_alert__' . $sitewideAlert->getStyle();
diff --git a/src/AlertStyleProvider.php b/src/AlertStyleProvider.php
index 129a224..5b4bb8e 100644
--- a/src/AlertStyleProvider.php
+++ b/src/AlertStyleProvider.php
@@ -46,7 +46,7 @@ class AlertStyleProvider {
    * @param string $class
    *   Class name to look up.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Renderable label for class.
    */
   public static function alertStyleName(string $class): TranslatableMarkup {
diff --git a/src/Controller/SitewideAlertController.php b/src/Controller/SitewideAlertController.php
index b1be12b..58f7af9 100644
--- a/src/Controller/SitewideAlertController.php
+++ b/src/Controller/SitewideAlertController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\sitewide_alert\Controller;
 
+use Drupal\Core\Render\Renderer;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -23,23 +27,23 @@ class SitewideAlertController extends ControllerBase implements ContainerInjecti
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Constructs a new SitewideAlertController.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer) {
@@ -66,8 +70,8 @@ class SitewideAlertController extends ControllerBase implements ContainerInjecti
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow(int $sitewide_alert_revision): array {
     $sitewide_alert = $this->entityTypeManager()->getStorage('sitewide_alert')
@@ -84,11 +88,11 @@ class SitewideAlertController extends ControllerBase implements ContainerInjecti
    * @param int $sitewide_alert_revision
    *   The Sitewide Alert revision ID.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle(int $sitewide_alert_revision): TranslatableMarkup {
     $sitewide_alert = $this->entityTypeManager()->getStorage('sitewide_alert')
@@ -102,15 +106,15 @@ class SitewideAlertController extends ControllerBase implements ContainerInjecti
   /**
    * Generates an overview table of older revisions of a Sitewide Alert.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $sitewide_alert
+   * @param SitewideAlertInterface $sitewide_alert
    *   A Sitewide Alert object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(SitewideAlertInterface $sitewide_alert): array {
     $account = $this->currentUser();
@@ -138,7 +142,7 @@ class SitewideAlertController extends ControllerBase implements ContainerInjecti
     $latest_revision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $revision */
+      /** @var SitewideAlertInterface $revision */
       $revision = $sitewide_alert_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
diff --git a/src/Controller/SitewideAlertsController.php b/src/Controller/SitewideAlertsController.php
index 055d476..da89fe1 100644
--- a/src/Controller/SitewideAlertsController.php
+++ b/src/Controller/SitewideAlertsController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\sitewide_alert\Controller;
 
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Controller\ControllerBase;
@@ -17,21 +20,21 @@ class SitewideAlertsController extends ControllerBase {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\sitewide_alert\SitewideAlertManager
+   * @var SitewideAlertManager
    */
   private $sitewideAlertManager;
 
   /**
    * Constructs a new SitewideAlertsController.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\sitewide_alert\SitewideAlertManager $sitewideAlertManager
+   * @param SitewideAlertManager $sitewideAlertManager
    *   The sitewide alert manager.
    */
   public function __construct(RendererInterface $renderer, SitewideAlertManager $sitewideAlertManager) {
@@ -52,11 +55,11 @@ class SitewideAlertsController extends ControllerBase {
   /**
    * Load.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Return Hello string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function load() {
     $response = new CacheableJsonResponse([]);
diff --git a/src/Entity/SitewideAlertInterface.php b/src/Entity/SitewideAlertInterface.php
index 63d5a7a..97f4635 100644
--- a/src/Entity/SitewideAlertInterface.php
+++ b/src/Entity/SitewideAlertInterface.php
@@ -82,7 +82,7 @@ interface SitewideAlertInterface extends ContentEntityInterface, RevisionLogInte
   /**
    * Gets the start date of this Sitewide Alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The date when this alert is scheduled to start, null otherwise;
    */
   public function getScheduledStartDateTime(): ?DrupalDateTime;
@@ -90,7 +90,7 @@ interface SitewideAlertInterface extends ContentEntityInterface, RevisionLogInte
   /**
    * Gets the end date of this Sitewide Alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The date when this alert is scheduled to end, null otherwise;
    */
   public function getScheduledEndDateTime(): ?DrupalDateTime;
diff --git a/src/Form/SitewideAlertConfigForm.php b/src/Form/SitewideAlertConfigForm.php
index 0a67fb9..afe0f75 100644
--- a/src/Form/SitewideAlertConfigForm.php
+++ b/src/Form/SitewideAlertConfigForm.php
@@ -17,16 +17,16 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class SitewideAlertConfigForm extends ConfigFormBase {
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private ModuleHandlerInterface $moduleHandler;
 
   /**
    * SitewideAlertConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler for determining which modules are installed.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $moduleHandler) {
diff --git a/src/Form/SitewideAlertForm.php b/src/Form/SitewideAlertForm.php
index d4bad39..ff26cd6 100644
--- a/src/Form/SitewideAlertForm.php
+++ b/src/Form/SitewideAlertForm.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\sitewide_alert\Form;
 
+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -22,20 +23,20 @@ class SitewideAlertForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
   /**
    * Constructs a new SitewideAlertForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, AccountProxyInterface $account) {
@@ -81,7 +82,7 @@ class SitewideAlertForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity */
+    /** @var SitewideAlertInterface $entity */
     $entity = $this->entity;
     $form = parent::buildForm($form, $form_state);
 
@@ -207,7 +208,7 @@ class SitewideAlertForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity */
+    /** @var SitewideAlertInterface $entity */
     $entity = $this->entity;
 
     // Set the dismissal timestamp.
diff --git a/src/Form/SitewideAlertRevisionDeleteForm.php b/src/Form/SitewideAlertRevisionDeleteForm.php
index dfd4b0f..6a7ff2e 100644
--- a/src/Form/SitewideAlertRevisionDeleteForm.php
+++ b/src/Form/SitewideAlertRevisionDeleteForm.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\sitewide_alert\Form;
 
+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -24,39 +25,39 @@ class SitewideAlertRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Sitewide Alert revision.
    *
-   * @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @var SitewideAlertInterface
    */
   protected $revision;
 
   /**
    * The Sitewide Alert storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sitewideAlertStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new SitewideAlertRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   Drupal's date formatter.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter) {
diff --git a/src/Form/SitewideAlertRevisionRevertForm.php b/src/Form/SitewideAlertRevisionRevertForm.php
index b81e3e1..beebb50 100644
--- a/src/Form/SitewideAlertRevisionRevertForm.php
+++ b/src/Form/SitewideAlertRevisionRevertForm.php
@@ -25,39 +25,39 @@ class SitewideAlertRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Sitewide Alert revision.
    *
-   * @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @var SitewideAlertInterface
    */
   protected $revision;
 
   /**
    * The Sitewide Alert storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sitewideAlertStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new SitewideAlertRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Sitewide Alert storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ -147,12 +147,12 @@ class SitewideAlertRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $revision
+   * @param SitewideAlertInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @return SitewideAlertInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(SitewideAlertInterface $revision, FormStateInterface $form_state): SitewideAlertInterface {
diff --git a/src/Form/SitewideAlertRevisionRevertTranslationForm.php b/src/Form/SitewideAlertRevisionRevertTranslationForm.php
index 42b8af1..4adeeaa 100644
--- a/src/Form/SitewideAlertRevisionRevertTranslationForm.php
+++ b/src/Form/SitewideAlertRevisionRevertTranslationForm.php
@@ -31,27 +31,27 @@ class SitewideAlertRevisionRevertTranslationForm extends SitewideAlertRevisionRe
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new SitewideAlertRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Sitewide Alert storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, TimeInterface $time) {
@@ -112,7 +112,7 @@ class SitewideAlertRevisionRevertTranslationForm extends SitewideAlertRevisionRe
   protected function prepareRevertedRevision(SitewideAlertInterface $revision, FormStateInterface $form_state): SitewideAlertInterface {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $latest_revision */
+    /** @var SitewideAlertInterface $latest_revision */
     $latest_revision = $this->sitewideAlertStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/SitewideAlertSettingsForm.php b/src/Form/SitewideAlertSettingsForm.php
index bcd9349..22aa980 100644
--- a/src/Form/SitewideAlertSettingsForm.php
+++ b/src/Form/SitewideAlertSettingsForm.php
@@ -29,7 +29,7 @@ class SitewideAlertSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
@@ -41,7 +41,7 @@ class SitewideAlertSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Plugin/Validation/Constraint/ScheduledDateProvidedConstraintValidator.php b/src/Plugin/Validation/Constraint/ScheduledDateProvidedConstraintValidator.php
index 53cc59a..7b4d3dc 100644
--- a/src/Plugin/Validation/Constraint/ScheduledDateProvidedConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/ScheduledDateProvidedConstraintValidator.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\sitewide_alert\Plugin\Validation\Constraint;
 
+use Symfony\Component\Validator\Context\ExecutionContextInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 
@@ -15,7 +16,7 @@ class ScheduledDateProvidedConstraintValidator extends ConstraintValidator {
   /**
    * Validator 2.5 and upwards compatible execution context.
    *
-   * @var \Symfony\Component\Validator\Context\ExecutionContextInterface
+   * @var ExecutionContextInterface
    */
   protected $context;
 
diff --git a/src/SitewideAlertAccessControlHandler.php b/src/SitewideAlertAccessControlHandler.php
index ba9c56b..975f97d 100644
--- a/src/SitewideAlertAccessControlHandler.php
+++ b/src/SitewideAlertAccessControlHandler.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\sitewide_alert;
 
+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -20,7 +21,7 @@ class SitewideAlertAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity */
+    /** @var SitewideAlertInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/SitewideAlertHtmlRouteProvider.php b/src/SitewideAlertHtmlRouteProvider.php
index f626f44..feb1740 100644
--- a/src/SitewideAlertHtmlRouteProvider.php
+++ b/src/SitewideAlertHtmlRouteProvider.php
@@ -56,10 +56,10 @@ class SitewideAlertHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type): ?Route {
@@ -82,10 +82,10 @@ class SitewideAlertHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type): ?Route {
@@ -108,10 +108,10 @@ class SitewideAlertHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type): ?Route {
@@ -134,10 +134,10 @@ class SitewideAlertHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type): ?Route {
@@ -160,10 +160,10 @@ class SitewideAlertHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type): ?Route {
@@ -186,10 +186,10 @@ class SitewideAlertHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type): ?Route {
diff --git a/src/SitewideAlertListBuilder.php b/src/SitewideAlertListBuilder.php
index 6e0249d..db9f3b9 100644
--- a/src/SitewideAlertListBuilder.php
+++ b/src/SitewideAlertListBuilder.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\sitewide_alert;
 
+use Drupal\sitewide_alert\Entity\SitewideAlert;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -30,7 +31,7 @@ class SitewideAlertListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlert $entity */
+    /** @var SitewideAlert $entity */
     $row['name'] = Link::createFromRoute(
       $entity->label(),
       'entity.sitewide_alert.canonical',
diff --git a/src/SitewideAlertManager.php b/src/SitewideAlertManager.php
index a0b9ec8..8ba9e27 100644
--- a/src/SitewideAlertManager.php
+++ b/src/SitewideAlertManager.php
@@ -4,6 +4,9 @@ declare(strict_types=1);
 
 namespace Drupal\sitewide_alert;
 
+use Drupal\sitewide_alert\Entity\SitewideAlertInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -16,14 +19,14 @@ class SitewideAlertManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -37,9 +40,9 @@ class SitewideAlertManager {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, TimeInterface $time) {
@@ -50,14 +53,14 @@ class SitewideAlertManager {
   /**
    * Returns all active sitewide alerts.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface[]
+   * @return SitewideAlertInterface[]
    *   Array of active sitewide alerts indexed by their ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function activeSitewideAlerts(): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface[] $sitewideAlerts */
+    /** @var SitewideAlertInterface[] $sitewideAlerts */
     $sitewideAlerts = $this->entityTypeManager
       ->getStorage('sitewide_alert')
       ->loadByProperties(['status' => 1]);
@@ -67,14 +70,14 @@ class SitewideAlertManager {
   /**
    * Returns all active and currently visible sitewide alerts.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface[]
+   * @return SitewideAlertInterface[]
    *   Array of active sitewide alerts indexed by their ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function activeVisibleSitewideAlerts(): array {
-    /** @var \Drupal\sitewide_alert\Entity\SitewideAlertInterface[] $activeVisibleSitewideAlerts */
+    /** @var SitewideAlertInterface[] $activeVisibleSitewideAlerts */
     $activeVisibleSitewideAlerts = $this->activeSitewideAlerts();
 
     // Remove any sitewide alerts that are scheduled and it is not time to show them.
@@ -91,11 +94,11 @@ class SitewideAlertManager {
   /**
    * The time of the next scheduled change of alerts.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   Time of next scheduled change of alerts; null if nothing is scheduled to change.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function nextScheduledChange(): ?DrupalDateTime {
     $nextExpiring = $this->soonestExpiringVisibleScheduledAlertDateTime();
@@ -119,11 +122,11 @@ class SitewideAlertManager {
   /**
    * Determines the datetime of the soonest expiring visible scheduled alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The datetime of the soonest expiring scheduled alert; null if none of the alerts are scheduled to expire.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function soonestExpiringVisibleScheduledAlertDateTime(): ?DrupalDateTime {
     /** @var \Drupal\Core\Datetime\DrupalDateTime||null $soonestScheduledEndDate */
@@ -154,14 +157,14 @@ class SitewideAlertManager {
   /**
    * Determines the datetime of the soonest expiring scheduled alert.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   The datetime of the soonest expiring scheduled alert; null if none of the alerts are scheduled to expire.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function soonestAppearingScheduledAlertDateTime(): ?DrupalDateTime {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|null $soonestScheduledEndDate */
+    /** @var DrupalDateTime|null $soonestScheduledEndDate */
     $soonestScheduledStartDate = NULL;
 
     foreach ($this->activeSitewideAlerts() as $sitewideAlert) {
diff --git a/src/SitewideAlertRenderer.php b/src/SitewideAlertRenderer.php
index 2c3dc43..a3f411d 100644
--- a/src/SitewideAlertRenderer.php
+++ b/src/SitewideAlertRenderer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sitewide_alert;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\AdminContext;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -17,32 +18,32 @@ class SitewideAlertRenderer implements SitewideAlertRendererInterface {
   /**
    * Module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;
 
   /**
    * The current active user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private AccountProxyInterface $currentUser;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory service.
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   Admin context service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(ConfigFactoryInterface $configFactory, AdminContext $adminContext, AccountProxyInterface $currentUser) {
diff --git a/src/SitewideAlertStorageInterface.php b/src/SitewideAlertStorageInterface.php
index 9ebb4df..85edf04 100644
--- a/src/SitewideAlertStorageInterface.php
+++ b/src/SitewideAlertStorageInterface.php
@@ -20,7 +20,7 @@ interface SitewideAlertStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Sitewide Alert revision IDs for a specific Sitewide Alert.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity
+   * @param SitewideAlertInterface $entity
    *   The Sitewide Alert entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface SitewideAlertStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Sitewide Alert author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface SitewideAlertStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\sitewide_alert\Entity\SitewideAlertInterface $entity
+   * @param SitewideAlertInterface $entity
    *   The Sitewide Alert entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface SitewideAlertStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Sitewide Alert with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index d850aae..f8a897b 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\sitewide_alert\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,7 +28,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
diff --git a/tests/src/Traits/SitewideAlertTestTrait.php b/tests/src/Traits/SitewideAlertTestTrait.php
index 3517c58..f0a4923 100644
--- a/tests/src/Traits/SitewideAlertTestTrait.php
+++ b/tests/src/Traits/SitewideAlertTestTrait.php
@@ -19,7 +19,7 @@ trait SitewideAlertTestTrait {
    * @param array $values
    *   Field values.
    *
-   * @return \Drupal\sitewide_alert\Entity\SitewideAlertInterface
+   * @return SitewideAlertInterface
    *   Created alert.
    */
   protected function createSiteWideAlert(array $values = []): SitewideAlertInterface {
