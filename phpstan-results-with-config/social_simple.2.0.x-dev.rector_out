modules/contrib/social_simple/modules/social_simple_per_node/social_simple_per_node.module
modules/contrib/social_simple/social_simple.install
modules/contrib/social_simple/social_simple.module
modules/contrib/social_simple/src/Plugin/Block/SocialSimpleBlock.php
modules/contrib/social_simple/src/SocialNetwork/EntityPrintPdf.php
modules/contrib/social_simple/src/SocialNetwork/Facebook.php
modules/contrib/social_simple/src/SocialNetwork/GooglePlus.php
modules/contrib/social_simple/src/SocialNetwork/Linkedin.php
modules/contrib/social_simple/src/SocialNetwork/Mail.php
modules/contrib/social_simple/src/SocialNetwork/PrintPage.php
modules/contrib/social_simple/src/SocialNetwork/SocialNetworkInterface.php
modules/contrib/social_simple/src/SocialNetwork/Twitter.php
modules/contrib/social_simple/src/SocialSimpleGenerator.php
modules/contrib/social_simple/src/SocialSimpleGeneratorInterface.php
modules/contrib/social_simple/src/SocialSimpleManager.php
modules/contrib/social_simple/src/SocialSimpleManagerInterface.php
modules/contrib/social_simple/tests/src/Functional/TestSocialSimpleTest.php
modules/contrib/social_simple/tests/src/Functional/TestSocialSimpleTestBase.php

14 files with changes
=====================

1) modules/contrib/social_simple/tests/src/Functional/TestSocialSimpleTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\social_simple\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
   /**
    * User with admin permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Advanced  User with permission on social share per node.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $advancedUser;

@@ @@
   /**
    * Standard User without permission on social share per node.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $normalUser;

@@ @@
   /**
    * Entity view display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $viewDisplay;

@@ @@
   /**
    * Entity form display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @var EntityFormDisplayInterface
    */
   protected $formDisplay;

@@ @@
   /**
    * A node created.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article;

@@ @@
   /**
    * A vocabulary created.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * A term created.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term1;

@@ @@
   /**
    * A term created.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create vocabulary and terms.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/social_simple/tests/src/Functional/TestSocialSimpleTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a super admin.
@@ @@
     $this->setComponentViewDisplay('node.article.default', 'node', 'article', 'default', 'social_simple_buttons');
     $this->drupalGet($bundle_path . '/display');
     $this->assertSession()->pageTextContains('Social simple buttons');
-    $this->assertText('Social simple buttons');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Social simple buttons');

     $this->drupalGet('/node/' . $this->article->id());
     $this->assertSession()->pageTextContains('Share on');
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/social_simple/src/SocialSimpleManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Adds another social network builder.
    *
-   * @param \Drupal\social_simple\SocialNetwork\SocialNetworkInterface $network
+   * @param SocialNetworkInterface $network
    *   The social network builder to add.
    * @param int $priority
    *   Priority of the social network builder.
@@ @@
    * @param string $network_id
    *   The network id.
    *
-   * @return \Drupal\social_simple\SocialNetwork\SocialNetworkInterface
+   * @return SocialNetworkInterface
    *   The social network service.
    */
   public function get($network_id);
@@ @@
   /**
    * Returns the sorted array of social network objects.
    *
-   * @return \Drupal\social_simple\SocialNetwork\SocialNetworkInterface[]
+   * @return SocialNetworkInterface[]
    *   An array of social network objects keyed by their id.
    */
   public function getSortedNetworks();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/social_simple/src/SocialSimpleManager.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *
    * Set to NULL if the array needs to be re-calculated.
    *
-   * @var \Drupal\social_simple\SocialNetwork\SocialNetworkInterface[]|null
+   * @var SocialNetworkInterface[]|null
    */
   protected $sortedNetworks;

@@ @@
   /**
    * Constructs a \Drupal\Core\Breadcrumb\BreadcrumbManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/social_simple/src/SocialSimpleGeneratorInterface.php:25

    ---------- begin diff ----------
@@ @@
    *   An array of social network name keyed with network id.
    * @param string $title
    *   The title to use for the share links.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    * @param array $options
    *   Additional options to pass as a query for the url built.
@@ @@
    *
    * @param array $networks
    *   An array of social network name keyed with network id.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    * @param array $options
    *   Additional options to pass as a query for the url built.
@@ @@
   /**
    * Get the title to share.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    *
    * @return string $title
@@ @@
   /**
    * Get the share url.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity if provided.
    *
    * @return string $url
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/social_simple/src/SocialSimpleGenerator.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Controller\TitleResolver definition.
    *
-   * @var \Drupal\Core\Controller\TitleResolver
+   * @var TitleResolver
    */
   protected $titleResolver;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Render\Renderer .
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Drupal\social_simple\SocialSimpleManagerInterface.
    *
-   * @var \Drupal\social_simple\SocialSimpleManagerInterface
+   * @var SocialSimpleManagerInterface
    */
   protected $socialSimpleManager;

@@ @@
   /**
    * Constructs a new SocialSimpleGenerator object.
    *
-   * @param \Drupal\Core\Controller\TitleResolver $title_resolver
+   * @param TitleResolver $title_resolver
    *   The title resolver service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Render\Renderer $renderer_service
+   * @param Renderer $renderer_service
    *   The renderer service.
-   * @param \Drupal\social_simple\SocialSimpleManagerInterface $social_simple_manager
+   * @param SocialSimpleManagerInterface $social_simple_manager
    *   The social simple manager.
    */
   public function __construct(TitleResolver $title_resolver, CurrentRouteMatch $current_route_match, RequestStack $request_stack, ConfigFactory $config_factory, Renderer $renderer_service, SocialSimpleManagerInterface $social_simple_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/social_simple/src/SocialNetwork/Twitter.php:91

    ---------- begin diff ----------
@@ @@
     if (!$entity instanceof NodeInterface) {
       return $options;
     }
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_type */
+    /** @var ConfigEntityInterface $entity_type */
     $entity_type = $entity->type->entity;
     if (!$entity_type instanceof ConfigEntityInterface) {
       return $options;
@@ @@
     if (!empty($key_value) && $entity->hasField($key_value)) {
       $referenced_entities = $entity->get($key_value)->referencedEntities();
       $labels = [];
-      /** @var \Drupal\Core\Entity\EntityInterface $referenced_entity */
+      /** @var EntityInterface $referenced_entity */
       foreach ($referenced_entities as $referenced_entity) {
         $labels[] = preg_replace('/\s+/', '', $referenced_entity->label());
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/social_simple/src/SocialNetwork/SocialNetworkInterface.php:18

    ---------- begin diff ----------
@@ @@
    *   The url to share.
    * @param string $title
    *   The page's title to share.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    * @param array $additional_options
    *   Additional options to pass as que query parameter to the social link.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/social_simple/src/SocialNetwork/PrintPage.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/social_simple/src/SocialNetwork/Mail.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Check if the mail button should use the forward module.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity which will be shared.
    *
    * @return boolean
@@ @@
     if (!$this->moduleHandler->moduleExists('forward')) {
       return FALSE;
     }
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity_type */
+    /** @var ConfigEntityInterface $entity_type */
     $entity_type = $entity->type->entity;
     if (!$entity_type instanceof ConfigEntityInterface) {
       return FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/social_simple/src/SocialNetwork/EntityPrintPdf.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new Entity Print Pdf object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/social_simple/src/Plugin/Block/SocialSimpleBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_simple\Plugin\Block;

+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Drupal\Core\Controller\TitleResolver definition.
    *
-   * @var \Drupal\Core\Controller\TitleResolver
+   * @var TitleResolver
    */
   protected $titleResolver;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The Social Simple Generator.
    *
-   * @var \Drupal\social_simple\SocialSimpleGenerator
+   * @var SocialSimpleGenerator
    */
   protected $socialSimpleGenerator;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Controller\TitleResolver $title_resolver
+   * @param TitleResolver $title_resolver
    *   The title resolver service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param \Drupal\social_simple\SocialSimpleGenerator $social_simple_generator
+   * @param SocialSimpleGenerator $social_simple_generator
    *   The social simple generator service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TitleResolver $title_resolver, RequestStack $request_stack, CurrentRouteMatch $current_route_match, SocialSimpleGenerator $social_simple_generator) {
@@ @@
    * {@inheritdoc}
    */
   public function getCacheTags() {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     if ($node = $this->currentRouteMatch->getParameter('node')) {
       return Cache::mergeTags(parent::getCacheTags(), $node->getCacheTags());
     }
-    /** @var \Drupal\taxonomy\TermInterface $taxonomy_term */
+    /** @var TermInterface $taxonomy_term */
     elseif ($taxonomy_term = $this->currentRouteMatch->getParameter('taxonomy_term')) {
       return Cache::mergeTags(parent::getCacheTags(), $taxonomy_term->getCacheTags());
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/social_simple/social_simple.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\NodeInterface;
+use Drupal\social_simple\SocialSimpleGenerator;
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * @file
  * Contains social.module..
@@ @@
 function social_simple_entity_extra_field_info() {
   $extra = [];

-  /** @var \Drupal\node\Entity\NodeType $bundle */
+  /** @var NodeType $bundle */
   foreach (NodeType::loadMultiple() as $bundle) {
     if ($bundle->getThirdPartySetting('social_simple', 'share', 0)) {
       $extra['node'][$bundle->Id()]['display']['social_simple_buttons'] = [
@@ @@
  */
 function social_simple_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
   if ($display->getComponent('social_simple_buttons')) {
-    /** @var \Drupal\node\NodeInterface $entity */
-
+    /** @var NodeInterface $entity */
     // Support social simple per node feature.
     if ($entity->hasField('social_share')) {
       if ($entity->social_share->value !== NULL && empty($entity->social_share->value)) {
@@ @@
         return;
       }
     }
-    /** @var \Drupal\social_simple\SocialSimpleGenerator $social_simple_generator */
+    /** @var SocialSimpleGenerator $social_simple_generator */
     $social_simple_generator = \Drupal::service('social_simple.generator');

-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = $entity->type->entity;
     $share = $node_type->getThirdPartySetting('social_simple', 'share', 0);
     $networks = $node_type->getThirdPartySetting('social_simple', 'networks', []);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function social_simple_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();

   $form['social_simple'] = [
@@ @@
     ],
   ];

-  /** @var \Drupal\social_simple\SocialSimpleGenerator $social_simple_generator */
+  /** @var SocialSimpleGenerator $social_simple_generator */
   $social_simple_generator = \Drupal::service('social_simple.generator');

   $form['social_simple']['social_simple_networks'] = [
@@ @@
   $options = [];
   $valid_field_type = ['entity_reference'];
   $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $type->id());
-  /** @var \Drupal\Core\Field\BaseFieldDefinition $field */
+  /** @var BaseFieldDefinition $field */
   foreach ($fields as $name => $field) {
     if (!empty($field->getTargetBundle()) && in_array($field->getType(), $valid_field_type)) {
       $options[$name] = $field->getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/social_simple/modules/social_simple_per_node/social_simple_per_node.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Node\NodeInterface;
+use Drupal\node\NodeTypeInterface;
 /**
  * @file
  * Contains social.module..
@@ @@
  * for this node.
  */
 function social_simple_per_node_form_node_form_alter(&$form, FormStateInterface &$form_state) {
-  /** @var \Drupal\Node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $node = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\node\NodeTypeInterface $node_type */
+  /** @var NodeTypeInterface $node_type */
   $node_type = $node->type->entity;
   $share = $node_type->getThirdPartySetting('social_simple', 'share', 0);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

