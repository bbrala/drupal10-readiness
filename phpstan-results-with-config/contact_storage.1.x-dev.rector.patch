diff --git a/contact_storage.install b/contact_storage.install
index b846595..6d0ef27 100644
--- a/contact_storage.install
+++ b/contact_storage.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 /**
  * @file
  * Contains install and update hooks.
@@ -43,7 +44,7 @@ function contact_storage_update_8001() {
  * Ensure fields are added.
  */
 function _contact_storage_ensure_fields() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('entity_field.manager');
 
   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
diff --git a/contact_storage.module b/contact_storage.module
index d340782..7d9a249 100644
--- a/contact_storage.module
+++ b/contact_storage.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\path_alias\PathAliasInterface;
+use Drupal\Core\Entity\ContentEntityForm;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains main module logic.
@@ -43,8 +46,7 @@ function contact_storage_help($route_name, RouteMatchInterface $route_match) {
  * Implements hook_form_FORM_ID_alter() for contact_form_form().
  */
 function contact_storage_form_contact_form_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\contact\ContactFormInterface $contact_form */
-
+  /** @var ContactFormInterface $contact_form */
   $form_object = $form_state->getFormObject();
   if (!in_array($form_object->getOperation(), ['edit', 'add'], TRUE)) {
     // Only alter the edit and add forms.
@@ -69,7 +71,7 @@ function contact_storage_form_contact_form_form_alter(&$form, FormStateInterface
         'path' => '/' . $contact_form->toUrl('canonical')->getInternalPath(),
       ]);
     if ($aliases) {
-      /** @var \Drupal\path_alias\PathAliasInterface $alias */
+      /** @var PathAliasInterface $alias */
       $alias = reset($aliases);
       $form_state->set('path_alias_id', $alias->id());
       $form['contact_storage_url_alias']['#default_value'] = $alias->getAlias();
@@ -141,7 +143,7 @@ function contact_storage_contact_form_form_builder($entity_type, ContactFormInte
  * @param array $form
  *   An associative array containing the structure of the form.
  *
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *   The current state of the form.
  */
 function contact_storage_contact_form_form_validate(&$form, FormStateInterface &$formState) {
@@ -159,7 +161,7 @@ function contact_storage_contact_form_form_validate(&$form, FormStateInterface &
  * @param array $form
  *   An associative array containing the structure of the form.
  *
- * @param \Drupal\Core\Form\FormStateInterface $formState
+ * @param FormStateInterface $formState
  *   The current state of the form.
  */
 function contact_storage_contact_form_form_submit(&$form, FormStateInterface &$formState) {
@@ -199,13 +201,13 @@ function contact_storage_contact_form_form_submit(&$form, FormStateInterface &$f
  * Implements hook_form_FORM_ID_alter() for contact_form_form().
  */
 function contact_storage_form_contact_message_form_alter(&$form, &$form_state, $form_id) {
-  /** @var \Drupal\Core\Entity\ContentEntityForm $form_object */
+  /** @var ContentEntityForm $form_object */
   $form_object = $form_state->getFormObject();
   /* @var \Drupal\contact\MessageInterface $contact_message */
   $contact_message = $form_object->getEntity();
 
   $contact_form = ContactForm::load($contact_message->bundle());
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_mode */
+  /** @var EntityFormDisplayInterface $form_mode */
   if ($form_object instanceof MessageForm) {
     if ($submit_text = $contact_form->getThirdPartySetting('contact_storage', 'submit_text', FALSE)) {
       $form['actions']['submit']['#value'] = $submit_text;
@@ -499,7 +501,7 @@ function contact_storage_field_widget_info_alter(&$info) {
  * Returns the number of times the current user has submitted the specified
  * form.
  *
- * @param Drupal\contact\ContactFormInterface $contact_form
+ * @param ContactFormInterface $contact_form
  *   The contact_form entity.
  *
  * @return int
diff --git a/src/ContactFormViewBuilder.php b/src/ContactFormViewBuilder.php
index b7f1ec7..cf67e27 100644
--- a/src/ContactFormViewBuilder.php
+++ b/src/ContactFormViewBuilder.php
@@ -24,41 +24,41 @@ class ContactFormViewBuilder implements EntityViewBuilderInterface, EntityHandle
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The contact settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The contact message storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $contactMessageStorage;
 
   /**
    * Constructs a new contact form view builder.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The contact settings config object.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $contact_message_storage
+   * @param EntityStorageInterface $contact_message_storage
    *   The contact message storage.
    */
   public function __construct(EntityFormBuilderInterface $entity_form_builder, RendererInterface $renderer, Config $config, EntityStorageInterface $contact_message_storage) {
diff --git a/src/Controller/ContactStorageController.php b/src/Controller/ContactStorageController.php
index 0848379..4240d0c 100644
--- a/src/Controller/ContactStorageController.php
+++ b/src/Controller/ContactStorageController.php
@@ -48,7 +48,7 @@ class ContactStorageController extends ContactController {
   /**
    * Route title callback.
    *
-   * @param \Drupal\contact\ContactFormInterface $contact_form
+   * @param ContactFormInterface $contact_form
    *   The contact form.
    *
    * @return string
@@ -61,7 +61,7 @@ class ContactStorageController extends ContactController {
   /**
    * Edit route title callback.
    *
-   * @param \Drupal\contact\ContactFormInterface $contact_form
+   * @param ContactFormInterface $contact_form
    *   The contact form.
    *
    * @return string
diff --git a/src/EventSubscriber/ContactStorageSettingsFormSave.php b/src/EventSubscriber/ContactStorageSettingsFormSave.php
index 9d45e52..65c97ca 100644
--- a/src/EventSubscriber/ContactStorageSettingsFormSave.php
+++ b/src/EventSubscriber/ContactStorageSettingsFormSave.php
@@ -14,7 +14,7 @@ class ContactStorageSettingsFormSave implements EventSubscriberInterface {
   /**
    * Invalidates the entity type definition cache whenever settings are changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
diff --git a/src/Form/ContactFormCloneForm.php b/src/Form/ContactFormCloneForm.php
index 22f637a..aefd19d 100644
--- a/src/Form/ContactFormCloneForm.php
+++ b/src/Form/ContactFormCloneForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\contact_storage\Form;
 
+use Drupal\contact\ContactFormInterface;
 use Drupal\contact\ContactFormEditForm;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
@@ -22,7 +23,7 @@ class ContactFormCloneForm extends ContactFormEditForm {
   /**
    * Entity Field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
@@ -40,11 +41,11 @@ class ContactFormCloneForm extends ContactFormEditForm {
   /**
    * Constructs a new ContactFormCloneForm object.
    *
-   * @param \Egulias\EmailValidator\EmailValidator $email_validator
+   * @param EmailValidator $email_validator
    *   Email validator.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   Entity field manager.
    */
   public function __construct(EmailValidator $email_validator, PathValidatorInterface $path_validator, EntityFieldManagerInterface $field_manager) {
@@ -89,7 +90,7 @@ class ContactFormCloneForm extends ContactFormEditForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\contact\ContactFormInterface $contact_form */
+    /** @var ContactFormInterface $contact_form */
     $contact_form = $this->entity;
     // Get the original ID.
     $original_id = $contact_form->getOriginalId();
diff --git a/src/MessageEditForm.php b/src/MessageEditForm.php
index d9b31c8..940855c 100644
--- a/src/MessageEditForm.php
+++ b/src/MessageEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\contact_storage;
 
+use Drupal\contact\MessageInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -14,7 +15,7 @@ class MessageEditForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\contact\MessageInterface $message */
+    /** @var MessageInterface $message */
     $message = $this->entity;
     $form = parent::form($form, $form_state);
 
diff --git a/src/Plugin/views/field/ContactForm.php b/src/Plugin/views/field/ContactForm.php
index e22e32f..acfbffe 100644
--- a/src/Plugin/views/field/ContactForm.php
+++ b/src/Plugin/views/field/ContactForm.php
@@ -19,7 +19,7 @@ class ContactForm extends FieldPluginBase {
   /**
    * The storage controller for contact forms.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $formStorage;
 
diff --git a/tests/src/Functional/BulkFormTest.php b/tests/src/Functional/BulkFormTest.php
index 27ba87f..5abe791 100644
--- a/tests/src/Functional/BulkFormTest.php
+++ b/tests/src/Functional/BulkFormTest.php
@@ -39,7 +39,7 @@ class BulkFormTest extends ContactStorageTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::Setup();
     // Create and login administrative user.
     $admin_user = $this->drupalCreateUser([
@@ -49,17 +49,26 @@ class BulkFormTest extends ContactStorageTestBase {
     // Create first valid contact form.
     $mail = 'simpletest@example.com';
     $this->addContactForm('test_id', 'test_label', $mail, TRUE);
-    $this->assertText('Contact form test_label has been added.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Contact form test_label has been added.');
     $this->drupalLogout();
 
     // Ensure that anonymous can submit site-wide contact form.
     user_role_grant_permissions(AccountInterface::ANONYMOUS_ROLE, ['access site-wide contact form']);
     $this->drupalGet('contact');
-    $this->assertText('Your email address');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your email address');
     // Submit contact form few times.
     for ($i = 1; $i <= 5; $i++) {
       $this->submitContact($this->randomMachineName(), $mail, $this->randomMachineName(), 'test_id', $this->randomMachineName());
-      $this->assertText('Your message has been sent.');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Your message has been sent.');
     }
   }
 
@@ -73,9 +82,13 @@ class BulkFormTest extends ContactStorageTestBase {
     $this->drupalLogin($this->drupalCreateUser(['administer contact forms']));
     $this->drupalGet('test-contact-message-bulk-form');
     $elements = $this->xpath('//select[@id="edit-action"]//option');
-    $this->assertIdentical(count($elements), 1, 'All contact message operations are found.');
-    $this->drupalPostForm('test-contact-message-bulk-form', [], t('Apply to selected items'));
-    $this->assertText('No message selected.');
+    $this->assertSame(count($elements), 1, 'All contact message operations are found.');
+    $this->drupalGet('test-contact-message-bulk-form');
+    $this->submitForm([], t('Apply to selected items'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No message selected.');
   }
 
 }
