modules/contrib/reader/reader.api.php
modules/contrib/reader/reader.module
modules/contrib/reader/src/Controller/ReaderController.php
modules/contrib/reader/src/EventSubscriber/ReaderAccessDeniedSubscriber.php
modules/contrib/reader/src/Form/ReaderCommentForm.php
modules/contrib/reader/src/Form/ReaderNodeForm.php
modules/contrib/reader/src/Form/ReaderSearchForm.php
modules/contrib/reader/src/Form/ReaderSettingsForm.php
modules/contrib/reader/src/Form/ReaderSettingsUserForm.php
modules/contrib/reader/src/Form/ReaderUserPasswordForm.php
modules/contrib/reader/src/Plugin/Block/Actions.php
modules/contrib/reader/src/Plugin/Block/Channels.php
modules/contrib/reader/src/Plugin/Block/CreateLinks.php
modules/contrib/reader/src/Plugin/Block/Search.php
modules/contrib/reader/src/ReaderBase.php
modules/contrib/reader/src/ReaderInterface.php
modules/contrib/reader/src/Routing/ReaderRouteSubscriber.php
modules/contrib/reader/src/Services/Reader.php
modules/contrib/reader/src/Services/ReaderFormAlter.php
modules/contrib/reader/src/Services/ReaderFormAlterInterface.php
modules/contrib/reader/src/Theme/ReaderThemeNegotiator.php
modules/contrib/reader/tests/modules/reader_test/src/Controller/ReaderTestController.php
modules/contrib/reader/tests/src/Functional/ReaderTest.php

17 files with changes
=====================

1) modules/contrib/reader/tests/src/Functional/ReaderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\reader\Functional;

+use Drupal\user\UserInterface;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A user with all permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * An authenticated user with reader permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authenticatedUser;

@@ @@
   /**
    * Test reader functionality.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testReader() {
     $assert_session = $this->assertSession();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/reader/tests/modules/reader_test/src/Controller/ReaderTestController.php:10

    ---------- begin diff ----------
@@ @@
    * Routing callback: return a feed.
    */
   public function feed() {
-    $content = file_get_contents(drupal_get_path('module', 'reader_test') . '/assets/rss_template.xml');
+    $content = file_get_contents(\Drupal::service('extension.list.module')->getPath('reader_test') . '/assets/rss_template.xml');
     $date1 = date('M Y', strtotime( "-1 month"));
     $date2 = date('M Y', strtotime( "-2 month"));
     $content = str_replace (["[MONTHYEAR1]", "[MONTHYEAR2]"] , [$date1, $date2], $content);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/reader/src/Services/ReaderFormAlterInterface.php:11

    ---------- begin diff ----------
@@ @@
    * Alter the node form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param FormStateInterface $form_state
+   * @param EntityInterface $entity
    */
   public function alterNodeForm(array &$form, FormStateInterface $form_state, EntityInterface $entity);

@@ @@
    * Alter the comment form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param FormStateInterface $form_state
+   * @param EntityInterface $entity
    */
   public function alterCommentForm(array &$form, FormStateInterface $form_state, EntityInterface $entity);

@@ @@
    * Alter the user login form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function alterLoginForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/reader/src/Services/ReaderFormAlter.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * ReaderPubFormAlter constructor
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param RouteMatchInterface $route_match
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ConfigFactoryInterface $config_factory
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
     $this->routeMatch = $route_match;
@@ @@
    * Submit callback.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitNodeForm(array $form, FormStateInterface $form_state) {
     $form_state->setRedirect('reader.content');
@@ @@
    * Submit callback after login.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @see alterLoginForm();
    */
@@ @@
    * Submit callback after reset login.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @see alterLoginForm();
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/reader/src/Services/Reader.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\reader\Services;

+use Drupal\Core\Datetime\DateFormatInterface;
+use Drupal\aggregator\ItemInterface;
+use Drupal\aggregator\FeedInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatInterface
+   * @var DateFormatInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The pager manager.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * ActivityPubFormAlter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
+   * @param PagerManagerInterface $pager_manager
    *   The pager manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFormBuilderInterface $entity_form_builder, ModuleHandlerInterface $module_handler, DateFormatterInterface $date_formatter, PagerManagerInterface $pager_manager, RequestStack $request_stack, AccountInterface $current_user) {
@@ @@
     $limit = Settings::get('reader_aggregator_items_per_page', 10);

     if ($this->moduleHandler->moduleExists('aggregator') && $this->currentUser->hasPermission('access reader')) {
-      /** @var \Drupal\aggregator\ItemInterface[] $posts */
-
+      /** @var ItemInterface[] $posts */
       $page = $this->requestStack->getCurrentRequest()->get('page', 0);

       if (empty($search)) {
@@ @@
         $posts = $this->searchAggregatorPosts($search, $limit);
       }
       foreach ($posts as $post) {
-        /** @var \Drupal\aggregator\FeedInterface $feed */
+        /** @var FeedInterface $feed */
         $feed = $this->entityTypeManager->getStorage('aggregator_feed')->load($post->getFeedId());
         $item = [];
         $item['_id'] = $post->id();
@@ @@
    * @param $search
    * @param $limit
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function searchAggregatorPosts($search, $limit) {
     $query = $this->entityTypeManager->getStorage('aggregator_item')->getQuery();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/reader/src/Routing/ReaderRouteSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * ReaderRouterSubscriber constructor
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Overrides user.login route with our custom login form.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    */
   public function alterRoutes(RouteCollection $collection) {
     // Change path of user login to overridden TFA login form if the tfa module
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/reader/src/ReaderBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\reader;

+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Link;
 use Drupal\Core\Url;

@@ @@
    *
    * @param $module
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    */
   protected function getSourcesListUrl($module) {
     return Url::fromRoute('reader.sources', ['module' => $module])->toString();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/reader/src/Plugin/Block/Search.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/reader/src/Plugin/Block/CreateLinks.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/reader/src/Plugin/Block/Channels.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/reader/src/Plugin/Block/Actions.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory, AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/reader/src/Form/ReaderSettingsUserForm.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * ReaderSettingsUserForm constructor
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, UserDataInterface $user_data) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/reader/src/Form/ReaderSettingsForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ReaderSettingsForm constructor
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/reader/src/Form/ReaderSearchForm.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * ReaderSearchForm constructor.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
    */
   public function __construct(UserDataInterface $user_data) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/reader/src/EventSubscriber/ReaderAccessDeniedSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Constructs a new redirect subscriber.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    */
   public function __construct(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/reader/src/Controller/ReaderController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\reader\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * ReaderController constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
    */
   public function __construct(DateFormatterInterface $date_formatter, EntityFieldManagerInterface $entity_field_manager, UserDataInterface $user_data) {
@@ @@
   /**
    * Returns the manifest.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function manifest() {

@@ @@
     $manifest['start_url'] = $url;
     $manifest['display'] = $pwa_display;
     $manifest['icons'][] = (object) [
-      'src' => file_create_url(drupal_get_path('theme', 'reader_theme') . '/images/icon.png'),
+      'src' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.theme')->getPath('reader_theme') . '/images/icon.png'),
       'sizes' => '192x192',
       'type' => 'image/png',
     ];
@@ @@
   /**
    * Home entry point for the reader.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
    * @return array
    */
@@ @@
   /**
    * Returns the timeline.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    * @param $module
    * @param $id
    * @param $is_home
@@ @@
   /**
    * Routing callback: search.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
    * @return array
    */
@@ @@
    * @param $action
    * @param $id
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function timelineAction($module, $action, $id) {

@@ @@
    * @param $id
    * @param $post_id
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function postAction($module, $action, $id, $post_id) {

@@ @@
    *
    * @return array $build
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function content() {
     $build = $rows = [];
@@ @@
    *
    * @param $content
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   protected function filterContent($content) {
     $filter_format_id = $this->config('reader.settings')->get('filter_format');
@@ @@
    *
    * @param $type
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   protected function getActionLinkLabel($type) {
     $label = $this->t('Unknown');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/reader/reader.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Reader functions.
@@ @@
  * Implements hook_entity_type_alter().
  */
 function reader_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   if (isset($entity_types['node'])) {
     $entity_types['node']->setFormClass('reader-add', '\Drupal\reader\Form\ReaderNodeForm');
     $entity_types['node']->setFormClass('reader-edit', '\Drupal\reader\Form\ReaderNodeForm');
@@ @@
  * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function reader_form_node_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $form_state->getFormObject()->getEntity();
   // @todo move the check, we always need to go in for the redirect
   if ($entity && \Drupal::config('reader.settings')->get('alter_node_form')) {
@@ @@
  * Implements hook_form_FORM_ID_alter() for \Drupal\user\Form\UserLoginForm.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function reader_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
   \Drupal::service('reader.form_alter')->alterLoginForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 17 files have been changed by Rector                                      

