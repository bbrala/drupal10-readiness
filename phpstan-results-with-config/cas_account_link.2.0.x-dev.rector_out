modules/contrib/cas_account_link/cas_account_link.module
modules/contrib/cas_account_link/src/Access/CasAccountLinkAccess.php
modules/contrib/cas_account_link/src/Event/CasAccountLinkEvents.php
modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkEmailCollisionEvent.php
modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkPostLinkEvent.php
modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkValidateEvent.php
modules/contrib/cas_account_link/src/Event/Subscriber/CasAccountLinkSubscriber.php
modules/contrib/cas_account_link/src/Form/CasAccountLinkForm.php
modules/contrib/cas_account_link/src/Form/CasAccountLinkSettingsForm.php
modules/contrib/cas_account_link/src/Routing/CasAccountLinkRouteSubscriber.php
modules/contrib/cas_account_link/tests/modules/cas_account_link_test/src/CasAccountLinkTestSubscriber.php
modules/contrib/cas_account_link/tests/src/Functional/CasAccountLinkSettingsFormTest.php
modules/contrib/cas_account_link/tests/src/Functional/CasAccountLinkTest.php

10 files with changes
=====================

1) modules/contrib/cas_account_link/tests/src/Functional/CasAccountLinkTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cas_account_link\Functional;

+use Drupal\user\UserInterface;
+use Drupal\externalauth\ExternalAuth;
+use Drupal\externalauth\AuthmapInterface;
 use Drupal\cas\Service\CasUserManager;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ @@
     $page->selectFieldOption('account_exist', 'no');
     $page->pressButton('Continue');

-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = user_load_by_name('beavis');
     // Check that the new account has been created and the user is logged in.
     $this->assertNotNull($account);
@@ @@
     $page->pressButton('Continue');
     $this->assertSession()->pageTextContains('Successfully finished');

-    /** @var \Drupal\externalauth\ExternalAuth $external_auth */
+    /** @var ExternalAuth $external_auth */
     $external_auth = \Drupal::service('externalauth.externalauth');

     // Check that the CAS account has been mapped to an account with a username
@@ @@
     $assert_session->pageTextContains('beavis_from_highland');
     $this->assertSession()->pageTextContains('Successfully finished');

-    /** @var \Drupal\externalauth\AuthmapInterface $authmap */
+    /** @var AuthmapInterface $authmap */
     $authmap = \Drupal::service('externalauth.authmap');
     // Check that the CAS and local accounts are paired.
     $authname = $authmap->get($local_account->id(), 'cas');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cas_account_link/tests/modules/cas_account_link_test/src/CasAccountLinkTestSubscriber.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a CasAccountLinkTestSubscriber object.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(StateInterface $state) {
@@ @@
   /**
    * Listens to CasAccountLinkEvents::POST_LINK event.
    *
-   * @param \Drupal\cas_account_link\Event\Events\CasAccountLinkPostLinkEvent $event
+   * @param CasAccountLinkPostLinkEvent $event
    *   The event object.
    */
   public function onPostLink(CasAccountLinkPostLinkEvent $event): void {
@@ @@
   /**
    * Listens to CasAccountLinkEvents::VALIDATE event.
    *
-   * @param \Drupal\cas_account_link\Event\Events\CasAccountLinkValidateEvent $event
+   * @param CasAccountLinkValidateEvent $event
    *   The event object.
    */
   public function onValidate(CasAccountLinkValidateEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/cas_account_link/src/Routing/CasAccountLinkRouteSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new route subscriber instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory interface.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cas_account_link/src/Form/CasAccountLinkSettingsForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * Constructs a new form instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteBuilderInterface $route_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cas_account_link/src/Form/CasAccountLinkForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\cas\CasPropertyBag;
+use Drupal\user\UserInterface;
 use Drupal\cas\Service\CasHelper;
 use Drupal\cas\Service\CasUserManager;
 use Drupal\cas_account_link\Event\CasAccountLinkEvents;
@@ @@
   /**
    * The private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;

@@ @@
   /**
    * The CAS user manager service.
    *
-   * @var \Drupal\cas\Service\CasUserManager
+   * @var CasUserManager
    */
   protected $casUserManager;

@@ @@
   /**
    * The CAS helper service.
    *
-   * @var \Drupal\cas\Service\CasHelper
+   * @var CasHelper
    */
   protected $casHelper;

@@ @@
   /**
    * The class resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * The external auth service.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $externalAuth;

@@ @@
   /**
    * The session service.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The user login form instance.
    *
-   * @var \Drupal\user\Form\UserLoginForm
+   * @var UserLoginForm
    */
   protected $loginForm;

@@ @@
   /**
    * Constructs a new form instance.
    *
-   * @param \Drupal\cas\Service\CasUserManager $cas_user_manager
+   * @param CasUserManager $cas_user_manager
    *   The CAS user manager service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_tempstore_factory
+   * @param PrivateTempStoreFactory $private_tempstore_factory
    *   The private temp store factory service.
-   * @param \Drupal\cas\Service\CasHelper $cas_helper
+   * @param CasHelper $cas_helper
    *   The CAS helper service.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver service.
-   * @param \Drupal\externalauth\ExternalAuthInterface $external_auth
+   * @param ExternalAuthInterface $external_auth
    *   The external auth service.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(CasUserManager $cas_user_manager, PrivateTempStoreFactory $private_tempstore_factory, CasHelper $cas_helper, ClassResolverInterface $class_resolver, ExternalAuthInterface $external_auth, SessionInterface $session, EventDispatcherInterface $event_dispatcher) {
@@ @@
     parent::validateForm($form, $form_state);

     if ($form_state->getValue('account_exist') === 'no') {
-      /** @var \Drupal\cas\CasPropertyBag $property_bag */
+      /** @var CasPropertyBag $property_bag */
       $property_bag = $this->privateTempStore->get('property_bag');
       $local_mail = $this->casUserManager->getEmailForNewAccount($property_bag);
       // Email collision.
@@ @@
       if (user_load_by_mail($local_mail)) {
         $email_collision_event = new CasAccountLinkEmailCollisionEvent($local_mail, $property_bag);
         $this->casHelper->log(LogLevel::DEBUG, 'Dispatching CasAccountLinkEvents::EMAIL_COLLISION.');
-        $this->eventDispatcher->dispatch(CasAccountLinkEvents::EMAIL_COLLISION, $email_collision_event);
+        $this->eventDispatcher->dispatch($email_collision_event, CasAccountLinkEvents::EMAIL_COLLISION);
         if (!$message = $email_collision_event->getErrorMessage()) {
           $message = $this->t('The email address %mail is already taken.', [
             '%mail' => $local_mail,
@@ @@
     // Let third party add their own validation.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching CasAccountLinkEvents::VALIDATE');
     $event = new CasAccountLinkValidateEvent($form, $form_state);
-    $this->eventDispatcher->dispatch(CasAccountLinkEvents::VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, CasAccountLinkEvents::VALIDATE);
   }

   /**
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state): void {
     /** @var string $ticket */
     $ticket = $this->privateTempStore->get('ticket');
-    /** @var \Drupal\cas\CasPropertyBag $property_bag */
+    /** @var CasPropertyBag $property_bag */
     $property_bag = $this->privateTempStore->get('property_bag');
     /** @var array $service_parameters */
     $service_parameters = $this->privateTempStore->get('service_parameters');
@@ @@
     }
     // Link the existing account.
     elseif ($is_local_account_selected) {
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = User::load($form_state->get('uid'));
       $authname = $property_bag->getUsername();
       $this->externalAuth->linkExistingAccount($authname, 'cas', $account);
@@ @@
     // redirect and/or their success status message.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching CasAccountLinkEvents::POST_LINK');
     $event = new CasAccountLinkPostLinkEvent($ticket, $property_bag, $service_parameters, $account, $is_local_account_selected);
-    $this->eventDispatcher->dispatch(CasAccountLinkEvents::POST_LINK, $event);
+    $this->eventDispatcher->dispatch($event, CasAccountLinkEvents::POST_LINK);

     // Third-party modules success message has precedence.
     if (!$success_message = $event->getSuccessMessage()) {
@@ @@
   /**
    * Returns the user login form instance.
    *
-   * @return \Drupal\user\Form\UserLoginForm
+   * @return UserLoginForm
    *   The user login form instance.
    */
   protected function getLoginForm(): UserLoginForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cas_account_link/src/Event/Subscriber/CasAccountLinkSubscriber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Event\Subscriber;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\cas\Event\CasPreRegisterEvent;
 use Drupal\cas\Event\CasPreUserLoadRedirectEvent;
 use Drupal\cas\Service\CasHelper;
@@ @@
   /**
    * The URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The CAS settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $casSettings;

@@ @@
   /**
    * The external authentication service.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $externalAuth;

@@ @@
   /**
    * The private tempstore.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempstore;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
   /**
    * Constructs a new event subscriber instance.
    *
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\externalauth\ExternalAuthInterface $external_auth
+   * @param ExternalAuthInterface $external_auth
    *   The external authentication service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_tempstore_factory
+   * @param PrivateTempStoreFactory $private_tempstore_factory
    *   The private tempstore factory service.
    * @param \Drupal\Core\Http\RequestStack $request_stack
    *   The current request.
@@ @@
   /**
    * Listens to CasHelper::EVENT_PRE_USER_LOAD_REDIRECT event.
    *
-   * @param \Drupal\cas\Event\CasPreUserLoadRedirectEvent $event
+   * @param CasPreUserLoadRedirectEvent $event
    *   The pre user load event object.
    */
   public function onRedirect(CasPreUserLoadRedirectEvent $event): void {
@@ @@
   /**
    * Assigns a new name to the user being registered if a local user exists.
    *
-   * @param \Drupal\cas\Event\CasPreRegisterEvent $event
+   * @param CasPreRegisterEvent $event
    *   The CAS pre user register event object.
    */
   public function handleDrupalUsernameCollision(CasPreRegisterEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkValidateEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Event\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Provides an event class for CasAccountLinkEvents::VALIDATE events.
@@ @@
   /**
    * The form state object.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
    *
    * @param array $form
    *   The form to be validated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function __construct(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Returns the form state object.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The the form state object.
    */
   public function getFormState(): FormStateInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkPostLinkEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Event\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas\CasPropertyBag;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Url;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Provides an event class for CasAccountLinkEvents::POST_LINK events.
@@ @@
   /**
    * The CAS property bag.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    */
   protected $casPropertyBag;

@@ @@
   /**
    * The local user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;

@@ @@
   /**
    * The translated success message.
    *
-   * @var \Drupal\Component\Render\MarkupInterface
+   * @var MarkupInterface
    */
   protected $successMessage;

@@ @@
   /**
    * The form redirect URL.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $redirectUrl;

@@ @@
    *
    * @param string $cas_ticket
    *   The CAS ticket.
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The CAS property bag.
    * @param array $cas_service_parameters
    *   The CAS service parameters.
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The local user account.
    * @param bool $local_account_selected
    *   The user selection: TRUE for 'yes', FALSE for 'no'.
@@ @@
   /**
    * Returns the CAS property bag.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The CAS property bag.
    */
   public function getCasPropertyBag(): CasPropertyBag {
@@ @@
   /**
    * Returns the local user account.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The local user account.
    */
   public function getAccount(): UserInterface {
@@ @@
   /**
    * Sets the success message as a translatable markup object.
    *
-   * @param \Drupal\Component\Render\MarkupInterface $success_message
+   * @param MarkupInterface $success_message
    *   The translated success message.
    *
    * @return $this
@@ @@
   /**
    * Returns the translated success message.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|null
+   * @return MarkupInterface|null
    *   The translated success message.
    */
   public function getSuccessMessage(): ?MarkupInterface {
@@ @@
   /**
    * Sets the form redirect URL.
    *
-   * @param \Drupal\Core\Url $redirect_url
+   * @param Url $redirect_url
    *   The form redirect URL.
    *
    * @return $this
@@ @@
   /**
    * Returns the form redirect URL.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The form redirect URL.
    */
   public function getRedirectUrl(): ?Url {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/cas_account_link/src/Event/Events/CasAccountLinkEmailCollisionEvent.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Event\Events;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\cas\CasPropertyBag;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Provides an event class for CasAccountLinkEvents::EMAIL_COLLISION events.
@@ @@
   /**
    * The CAS property bag.
    *
-   * @var \Drupal\cas\CasPropertyBag
+   * @var CasPropertyBag
    */
   protected $casPropertyBag;

@@ @@
   /**
    * The translated error message as a markup object or as a render array.
    *
-   * @var \Drupal\Component\Render\MarkupInterface|array
+   * @var MarkupInterface|array
    */
   protected $errorMessage;

@@ @@
    *
    * @param string $local_mail
    *   The proposed local email.
-   * @param \Drupal\cas\CasPropertyBag $cas_property_bag
+   * @param CasPropertyBag $cas_property_bag
    *   The CAS property bag.
    */
   public function __construct(string $local_mail, CasPropertyBag $cas_property_bag) {
@@ @@
   /**
    * Returns the CAS property bag.
    *
-   * @return \Drupal\cas\CasPropertyBag
+   * @return CasPropertyBag
    *   The CAS property bag.
    */
   public function getCasPropertyBag(): CasPropertyBag {
@@ @@
   /**
    * Sets the error message as a translatable markup object.
    *
-   * @param \Drupal\Component\Render\MarkupInterface|array $error_message
+   * @param MarkupInterface|array $error_message
    *   The translated error message as a translated markup or as a render array.
    *
    * @return $this
@@ @@
   /**
    * Returns the translated error message.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|array|null
+   * @return MarkupInterface|array|null
    *   A translated text as a markup object or a render array.
    */
   public function getErrorMessage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/cas_account_link/src/Access/CasAccountLinkAccess.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cas_account_link\Access;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The CAS settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $casSettings;

@@ @@
   /**
    * The private tempstore.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;

@@ @@
   /**
    * Construct a new access handler instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_tempstore_factory
+   * @param PrivateTempStoreFactory $private_tempstore_factory
    *   The private temp store factory service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PrivateTempStoreFactory $private_tempstore_factory) {
@@ @@
   /**
    * Checks the access to cas_account_link.form route.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result object.
    */
   public function access(AccountInterface $account): AccessResultInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 3 nodes were removed                                                 

 [OK] 10 files have been changed by Rector                                      

