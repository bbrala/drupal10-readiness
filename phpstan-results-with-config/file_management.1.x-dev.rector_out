modules/contrib/file_management/file_management.views.inc
modules/contrib/file_management/modules/file_management_view/file_management_view.install
modules/contrib/file_management/modules/file_management_view/src/Controller/FileManagementViewController.php
modules/contrib/file_management/src/Controller/FileManagementController.php
modules/contrib/file_management/src/FileManagement.php
modules/contrib/file_management/src/FileManagementInterface.php
modules/contrib/file_management/src/Form/FileManagementDeleteFileConfirmForm.php
modules/contrib/file_management/src/Form/FileManagementEditFileForm.php
modules/contrib/file_management/src/Plugin/views/field/FileManagementOperations.php

5 files with changes
====================

1) modules/contrib/file_management/src/Form/FileManagementEditFileForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
-
   protected $fileSystem;

   /**
    * The file_management service.
    *
-   * @var \Drupal\file_management\FileManagement;
+   * @var FileManagement ;
    */
-
   protected $fileManagement;

   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_management/src/Form/FileManagementDeleteFileConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_management\Form;

+use Drupal\file\FileInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The file to be deleted.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   (optional) The file to be deleted.
    */
   public function buildForm(array $form, FormStateInterface $form_state, $file = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_management/src/FileManagement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_management;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\file\FileInterface;
@@ @@
   /**
    * Generates a render array with file information from the given file entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity from which to get the information from.
    *
    * @return array
@@ @@
     // Build a link to the file.
     $link = Link::fromTextAndUrl(
       $file->getFilename(),
-      Url::fromUri(file_create_url($file->getFileUri()))
+      \Drupal::service('file_url_generator')->generate($file->getFileUri())
     )->toRenderable();
     $link = \Drupal::service('renderer')->render($link);

@@ @@
   /**
    * Checks if a given file is an image.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to check.
    *
    * @return bool
@@ @@
   /**
    * Finds all usages of a given file and returns the allowed file extensions.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to check for (global) allowed file extensions.
    *
    * @return array|bool
@@ @@
    *   an empty array if there are no restrictions
    *   and FALSE if there are no common allowed file extensions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public static function getAllowedFileExtensions(FileInterface $file) {
     $filtering = FALSE;
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/file_management/src/Controller/FileManagementController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Provides the file view page.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to edit.
    *
    * @return array
@@ @@
   /**
    * Provides the title for the file view page.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to edit.
    *
    * @return string
@@ @@
   /**
    * Provides the file edit page.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to edit.
    *
    * @return array
@@ @@
   /**
    * Provides the file edit page.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to edit.
    *
    * @return array
@@ @@
   /**
    * Provides the title for the file edit page.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to edit.
    *
    * @return string
@@ @@
   /**
    * Provides the title for the file edit page.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to edit.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/file_management/modules/file_management_view/src/Controller/FileManagementViewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_management_view\Controller;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\views\Views;

@@ @@
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function getFileUsageTitle($fid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

