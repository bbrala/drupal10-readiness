diff --git a/modules/entity_extender_node/tests/modules/entity_extender_node_lifecycle_test/src/Plugin/EntityExtender/NodeLifecycleTestEntityExtender.php b/modules/entity_extender_node/tests/modules/entity_extender_node_lifecycle_test/src/Plugin/EntityExtender/NodeLifecycleTestEntityExtender.php
index 1f39ee2..c40a861 100644
--- a/modules/entity_extender_node/tests/modules/entity_extender_node_lifecycle_test/src/Plugin/EntityExtender/NodeLifecycleTestEntityExtender.php
+++ b/modules/entity_extender_node/tests/modules/entity_extender_node_lifecycle_test/src/Plugin/EntityExtender/NodeLifecycleTestEntityExtender.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\entity_extender_node_lifecycle_test\Plugin\EntityExtender;
 
+use Drupal\node\NodeInterface;
 use Drupal\entity_extender\Plugin\EntityExtender\EntityExtender;
 use Drupal\entity_extender\Plugin\EntityExtender\EntityLifecycleInterface;
 
@@ -12,8 +13,8 @@ use Drupal\entity_extender\Plugin\EntityExtender\EntityLifecycleInterface;
  *
  * @EntityExtenderPlugin("node:node_lifecycle_test")
  *
- * @property \Drupal\node\NodeInterface $entity
- * @method \Drupal\node\NodeInterface getEntity()
+ * @property NodeInterface $entity
+ * @method NodeInterface getEntity()
  */
 class NodeLifecycleTestEntityExtender extends EntityExtender implements EntityLifecycleInterface {
 
diff --git a/src/Component/Memo.php b/src/Component/Memo.php
index 98d1863..5f24c17 100644
--- a/src/Component/Memo.php
+++ b/src/Component/Memo.php
@@ -135,7 +135,7 @@ trait Memo {
   /**
    * Wipes out memoized values of computations where an entity object was used.
    *
-   * @param \Drupal\Core\Session\AccountInterface|\Drupal\Core\Entity\EntityInterface|\Drupal\entity_extender\Plugin\EntityExtender\EntityExtender $input
+   * @param AccountInterface|EntityInterface|EntityExtender $input
    *   The object to invalidate the memoized values of computations where
    *   it was used.
    *
diff --git a/src/EntityExtenderManager.php b/src/EntityExtenderManager.php
index 892049f..adca3e3 100644
--- a/src/EntityExtenderManager.php
+++ b/src/EntityExtenderManager.php
@@ -27,21 +27,21 @@ class EntityExtenderManager extends DefaultPluginManager implements EntityExtend
   /**
    * An instance of the "entity_type.manager" service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * An instance of the "entity_extender.entity_type.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityTypeExtenderManagerInterface
+   * @var EntityTypeExtenderManagerInterface
    */
   protected EntityTypeExtenderManagerInterface $entityTypeExtenderManager;
 
   /**
    * An instance of the "entity_extender.entity_storage.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityStorageExtenderManagerInterface
+   * @var EntityStorageExtenderManagerInterface
    */
   protected EntityStorageExtenderManagerInterface $entityStorageExtenderManager;
 
@@ -50,15 +50,15 @@ class EntityExtenderManager extends DefaultPluginManager implements EntityExtend
    *
    * @param \Traversable $namespaces
    *   A list of namespaces to look the plugins at.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   An instance of the "cache.discovery" service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   An instance of the "module_handler" service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   An instance of the "entity_type.manager" service.
-   * @param \Drupal\entity_extender\EntityTypeExtenderManagerInterface $entity_type_extender_manager
+   * @param EntityTypeExtenderManagerInterface $entity_type_extender_manager
    *   An instance of the "entity_extender.entity_type.manager" service.
-   * @param \Drupal\entity_extender\EntityStorageExtenderManagerInterface $entity_storage_extender_manager
+   * @param EntityStorageExtenderManagerInterface $entity_storage_extender_manager
    *   An instance of the "entity_extender.entity_storage.manager" service.
    */
   public function __construct(
@@ -150,7 +150,7 @@ class EntityExtenderManager extends DefaultPluginManager implements EntityExtend
    *
    * @template T of EntityExtender
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create an extender for.
    * @param string[] $specs
    *   The list of fully-qualified class/interface names the extender must
diff --git a/src/EntityExtenderManagerInterface.php b/src/EntityExtenderManagerInterface.php
index 7c986da..0760984 100644
--- a/src/EntityExtenderManagerInterface.php
+++ b/src/EntityExtenderManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_extender;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -16,7 +18,7 @@ interface EntityExtenderManagerInterface extends PluginManagerInterface {
   /**
    * Returns an instance of the "entity_type.manager" service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   An instance of the "entity_type.manager" service.
    */
   public function getEntityTypeManager(): EntityTypeManagerInterface;
@@ -29,12 +31,12 @@ interface EntityExtenderManagerInterface extends PluginManagerInterface {
    * @param string|null $bundle
    *   The entity bundle.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   When the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   When the storage handler couldn't be loaded.
    */
   public function getStorage(string $entity_type_id, string $bundle = NULL): EntityStorageInterface;
@@ -44,7 +46,7 @@ interface EntityExtenderManagerInterface extends PluginManagerInterface {
    *
    * @template T of EntityExtender
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create an extender for.
    * @param class-string<T>|null $class
    *   The fully-qualified class name to create an instance of. It must extend
@@ -64,7 +66,7 @@ interface EntityExtenderManagerInterface extends PluginManagerInterface {
    *
    * @param class-string $spec
    *   The interface/class the extender must implement/extend.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to create an extender for.
    * @param class-string<T>|null $class
    *   The fully-qualified class name to create an instance of. It must extend
diff --git a/src/EntityTypeExtenderManagerInterface.php b/src/EntityTypeExtenderManagerInterface.php
index d4c364b..f6e4f76 100644
--- a/src/EntityTypeExtenderManagerInterface.php
+++ b/src/EntityTypeExtenderManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_extender;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 
 /**
@@ -12,7 +13,7 @@ interface EntityTypeExtenderManagerInterface extends PluginManagerInterface {
   /**
    * Extends entity types.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The associative array of entity type definitions.
    *
    * @see \entity_extender_entity_type_alter()
diff --git a/src/Plugin/EntityExtender/EntityAccessInterface.php b/src/Plugin/EntityExtender/EntityAccessInterface.php
index c20233f..5e554c0 100644
--- a/src/Plugin/EntityExtender/EntityAccessInterface.php
+++ b/src/Plugin/EntityExtender/EntityAccessInterface.php
@@ -21,10 +21,10 @@ interface EntityAccessInterface extends EntityExtenderHandlerInterface {
    * @param string $operation
    *   The operation access should be checked for. Usually
    *   one of "view", "view label", "update" or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check access for.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
    * @see \Drupal\Core\Entity\EntityAccessControlHandlerInterface::access()
diff --git a/src/Plugin/EntityExtender/EntityExtender.php b/src/Plugin/EntityExtender/EntityExtender.php
index 9afe7ad..077f6d9 100644
--- a/src/Plugin/EntityExtender/EntityExtender.php
+++ b/src/Plugin/EntityExtender/EntityExtender.php
@@ -25,21 +25,21 @@ abstract class EntityExtender extends PluginBase implements CacheableDependencyI
   /**
    * An instance of the entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;
 
   /**
    * A logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;
 
   /**
    * An instance of the "entity_extender.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityExtenderManagerInterface
+   * @var EntityExtenderManagerInterface
    */
   protected EntityExtenderManagerInterface $entityExtenderManager;
 
@@ -153,7 +153,7 @@ abstract class EntityExtender extends PluginBase implements CacheableDependencyI
    * @param string $field_name
    *   The name of the entity reference field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of referenced entities within a field.
    *
    * @throws \InvalidArgumentException
diff --git a/src/Plugin/EntityExtender/EntityFieldAccessInterface.php b/src/Plugin/EntityExtender/EntityFieldAccessInterface.php
index 6aa83e2..7bc8627 100644
--- a/src/Plugin/EntityExtender/EntityFieldAccessInterface.php
+++ b/src/Plugin/EntityExtender/EntityFieldAccessInterface.php
@@ -23,14 +23,14 @@ interface EntityFieldAccessInterface extends EntityExtenderHandlerInterface {
    * @param string $operation
    *   The operation access should be checked for. Usually
    *   one of "view" or "edit".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check access for.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values for which to check access.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
    * @see \Drupal\Core\Entity\EntityAccessControlHandlerInterface::fieldAccess()
diff --git a/src/Plugin/EntityExtender/EntityViewInterface.php b/src/Plugin/EntityExtender/EntityViewInterface.php
index 6147121..884dc62 100644
--- a/src/Plugin/EntityExtender/EntityViewInterface.php
+++ b/src/Plugin/EntityExtender/EntityViewInterface.php
@@ -19,7 +19,7 @@ interface EntityViewInterface extends EntityExtenderHandlerInterface {
    *
    * @param array $build
    *   The renderable data to modify.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity display.
    * @param string $view_mode
    *   The view mode an entity is to be rendered with.
diff --git a/src/Plugin/EntityTypeExtender/EntityHandlerTrait.php b/src/Plugin/EntityTypeExtender/EntityHandlerTrait.php
index 0678de7..c505409 100644
--- a/src/Plugin/EntityTypeExtender/EntityHandlerTrait.php
+++ b/src/Plugin/EntityTypeExtender/EntityHandlerTrait.php
@@ -19,7 +19,7 @@ trait EntityHandlerTrait {
   /**
    * An instance of the "entity_extender.manager" service.
    *
-   * @var \Drupal\entity_extender\EntityExtenderManagerInterface
+   * @var EntityExtenderManagerInterface
    */
   protected EntityExtenderManagerInterface $entityExtenderManager;
 
diff --git a/src/Plugin/EntityTypeExtender/EntityHandlerTraitAccess.php b/src/Plugin/EntityTypeExtender/EntityHandlerTraitAccess.php
index 3c10a31..ebc2b47 100644
--- a/src/Plugin/EntityTypeExtender/EntityHandlerTraitAccess.php
+++ b/src/Plugin/EntityTypeExtender/EntityHandlerTraitAccess.php
@@ -23,9 +23,9 @@ trait EntityHandlerTraitAccess {
    *
    * @param class-string $interface
    *   The interface the entity extender class must implement.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to construct the extender for.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account to check the access for.
    * @param bool $return_as_object
    *   The state of whether to return access check object or boolean.
@@ -33,7 +33,7 @@ trait EntityHandlerTraitAccess {
    *   The access checker that takes the `$extender` and `$account`
    *   parameters and must return the {@see AccessResultInterface}.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface|null
+   * @return bool|AccessResultInterface|null
    *   The access check result or `null` if there is no extender for
    *   an `$entity` or its extender class doesn't implement `$interface`.
    */
diff --git a/src/Plugin/EntityTypeExtender/EntityTypeExtender.php b/src/Plugin/EntityTypeExtender/EntityTypeExtender.php
index b648c50..fa9e7c9 100644
--- a/src/Plugin/EntityTypeExtender/EntityTypeExtender.php
+++ b/src/Plugin/EntityTypeExtender/EntityTypeExtender.php
@@ -32,7 +32,7 @@ abstract class EntityTypeExtender extends PluginBase implements ContainerFactory
   /**
    * Returns the list of handler to override.
    *
-   * @return \Drupal\entity_extender\Plugin\EntityTypeExtender\EntityHandlerDefinition[]
+   * @return EntityHandlerDefinition[]
    *   The list of handlers to override.
    */
   abstract public function getHandlers(): array;
@@ -40,7 +40,7 @@ abstract class EntityTypeExtender extends PluginBase implements ContainerFactory
   /**
    * Applies the modifications for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The default entity type definition to modify.
    *
    * @see \Drupal\entity_extender\EntityTypeExtenderManagerInterface::extend()
diff --git a/tests/src/Kernel/EntityExtenderKernelTest.php b/tests/src/Kernel/EntityExtenderKernelTest.php
index 4ed0861..29d1d83 100644
--- a/tests/src/Kernel/EntityExtenderKernelTest.php
+++ b/tests/src/Kernel/EntityExtenderKernelTest.php
@@ -254,7 +254,7 @@ abstract class EntityExtenderKernelTest extends KernelTestBase {
    * @param string $extender_plugin_class
    *   The extender's plugin class.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity type storage.
    *
    * @throws \Exception
diff --git a/tests/src/Unit/EntityExtenderUnitTest.php b/tests/src/Unit/EntityExtenderUnitTest.php
index 60ce0ee..7df6024 100644
--- a/tests/src/Unit/EntityExtenderUnitTest.php
+++ b/tests/src/Unit/EntityExtenderUnitTest.php
@@ -174,8 +174,8 @@ class EntityExtenderUnitTest extends UnitTestCase {
   /**
    * Tests entity extender manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \ReflectionException
    */
   public function testEntityExtenderManager(): void {
@@ -337,12 +337,12 @@ class EntityExtenderUnitTest extends UnitTestCase {
    *   The user ID.
    * @param int $calls_ok
    *   The number of expected successful extenders' instances.
-   * @param \Drupal\entity_extender\Annotation\EntityTypeExtenderPlugin[] $definitions_type_extenders
+   * @param EntityTypeExtenderPlugin[] $definitions_type_extenders
    *   The list of entity type extenders' plugins.
-   * @param \Drupal\entity_extender\Annotation\EntityStorageExtenderPlugin[]|null $definitions_storage_extenders
+   * @param EntityStorageExtenderPlugin[]|null $definitions_storage_extenders
    *   The list of entity storage extenders' plugins.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject|\Drupal\entity_extender\EntityExtenderManagerInterface
+   * @return MockObject|EntityExtenderManagerInterface
    *   The mock of the entity extender manager.
    */
   public function getEntityExtenderManager(int $user_id, int $calls_ok, array $definitions_type_extenders, array $definitions_storage_extenders = NULL): EntityExtenderManagerInterface {
@@ -427,12 +427,12 @@ class EntityExtenderUnitTest extends UnitTestCase {
    *
    * @param string $class
    *   The plugin manager class.
-   * @param \Drupal\Component\Annotation\PluginID[]|null $plugins
+   * @param PluginID[]|null $plugins
    *   The list of plugins.
    * @param array $arguments
    *   The list of manager's arguments.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The mock of a plugin manager.
    */
   protected function getPluginManager(string $class, ?array $plugins, array $arguments): MockObject {
@@ -480,7 +480,7 @@ class EntityExtenderUnitTest extends UnitTestCase {
    * @param array $specs
    *   The method calls specifications.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   The entity mock.
    */
   protected function getEntity(string $interface, array $specs): MockObject {
