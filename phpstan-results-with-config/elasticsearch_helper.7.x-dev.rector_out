modules/contrib/elasticsearch_helper/elasticsearch_helper.api.php
modules/contrib/elasticsearch_helper/elasticsearch_helper.install
modules/contrib/elasticsearch_helper/elasticsearch_helper.module
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/EventSubscriber/ReindexEventSubscriber.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/MultilingualContentIndex.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/SimpleNodeIndex.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/TimeBasedIndex.php
modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/Normalizer/NodeNormalizer.php
modules/contrib/elasticsearch_helper/src/Annotation/ElasticsearchIndex.php
modules/contrib/elasticsearch_helper/src/Commands/ElasticsearchHelperCommands.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataType.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataTypeRepository.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataTypeRepositoryInterface.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/DefinitionBase.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/FieldDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/IndexDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/MappingDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/SettingsDefinition.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/TypeTrait.php
modules/contrib/elasticsearch_helper/src/Elasticsearch/ObjectTrait.php
modules/contrib/elasticsearch_helper/src/ElasticsearchClientBuilder.php
modules/contrib/elasticsearch_helper/src/ElasticsearchClientVersion.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHelperQueue.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHelperQueueFactory.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHelperQueueFactoryDecorator.php
modules/contrib/elasticsearch_helper/src/ElasticsearchHost.php
modules/contrib/elasticsearch_helper/src/ElasticsearchLanguageAnalyzer.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestResult.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestResultInterface.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestWrapper.php
modules/contrib/elasticsearch_helper/src/ElasticsearchRequestWrapperInterface.php
modules/contrib/elasticsearch_helper/src/Event/DataTypeDefinitionBuildEvent.php
modules/contrib/elasticsearch_helper/src/Event/DataTypeEvents.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchEvents.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchHelperCallbackEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchHelperEvents.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationErrorEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestResultEvent.php
modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperations.php
modules/contrib/elasticsearch_helper/src/Event/OperationPermissionInterface.php
modules/contrib/elasticsearch_helper/src/Event/OperationPermissionTrait.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/LoggingEventSubscriber.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/MessagingEventSubscriber.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/QueueIndexEventSubscriber.php
modules/contrib/elasticsearch_helper/src/EventSubscriber/TypeEventSubscriber.php
modules/contrib/elasticsearch_helper/src/Form/ElasticsearchHelperSettingsForm.php
modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexBase.php
modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexInterface.php
modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexManager.php
modules/contrib/elasticsearch_helper/src/Plugin/QueueWorker/IndexingQueueWorker.php
modules/contrib/elasticsearch_helper/tests/modules/elasticsearch_helper_test/src/Plugin/ElasticsearchIndex/NodeIndex.php
modules/contrib/elasticsearch_helper/tests/modules/elasticsearch_helper_test/src/Plugin/ElasticsearchIndex/SimpleNodeIndex.php
modules/contrib/elasticsearch_helper/tests/modules/elasticsearch_helper_test/src/Plugin/Normalizer/NodeNormalizer.php
modules/contrib/elasticsearch_helper/tests/src/FunctionalJavascript/EntityOpsTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexMappingTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/QueueWorkerTest.php
modules/contrib/elasticsearch_helper/tests/src/Kernel/UniqueQueueTest.php
modules/contrib/elasticsearch_helper/tests/src/Unit/ElasticsearchClientVersionTest.php

41 files with changes
=====================

1) modules/contrib/elasticsearch_helper/tests/src/Unit/ElasticsearchClientVersionTest.php:66

    ---------- begin diff ----------
@@ @@
    * @covers ::getPatchVersion
    * @covers ::getVersionParts
    * @covers ::getVersion
+   * @doesNotPerformAssertions
    */
   public function testGetPatchVersion() {
     $result = ElasticsearchClientVersion::getPatchVersion();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/elasticsearch_helper/tests/src/Kernel/UniqueQueueTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['elasticsearch_helper']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/elasticsearch_helper/tests/src/Kernel/QueueWorkerTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
@@ @@

     // Process the queue items and ensure that index was updated too.
     $item = $queue->claimItem();
-    $this->assertEqual($node1->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
+    $this->assertEquals($node1->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
     $queue_worker->processItem($item->data);
     $queue->deleteItem($item);

     $item = $queue->claimItem();
-    $this->assertEqual($node2->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
+    $this->assertEquals($node2->id(), $item->data['entity_id'], 'Item in the queue is not same as created node entity');
     $queue_worker->processItem($item->data);
     $queue->deleteItem($item);
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['elasticsearch_helper']);
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
-    $this->assertEqual($response['hits']['hits'][0]['_source']['status'], TRUE, 'Status field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['status'], TRUE, 'Status field is found in document');
   }

   /**
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');

     // Update the node title.
     $new_title = $this->randomMachineName();
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $new_title, 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $new_title, 'Title field is found in document');
   }

   /**
@@ @@

     $response = $this->queryIndex($this->node->id());

-    $this->assertEqual($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');
+    $this->assertEquals($response['hits']['hits'][0]['_source']['title'], $this->node->getTitle(), 'Title field is found in document');

     // Delete node.
     $this->node->delete();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/elasticsearch_helper/tests/src/Kernel/IndexMappingTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['elasticsearch_helper']);
@@ @@
       $properties = $response[$index_name]['mappings']['node']['properties'];
     }

-    $this->assertEqual($properties['id']['type'], 'integer', 'ID field is found');
-    $this->assertEqual($properties['status']['type'], 'boolean', 'Status field is found');
-    $this->assertEqual($properties['title']['type'], 'text', 'Title field is found');
-    $this->assertEqual($properties['uuid']['type'], 'keyword', 'UUID field is found');
+    $this->assertEquals($properties['id']['type'], 'integer', 'ID field is found');
+    $this->assertEquals($properties['status']['type'], 'boolean', 'Status field is found');
+    $this->assertEquals($properties['title']['type'], 'text', 'Title field is found');
+    $this->assertEquals($properties['uuid']['type'], 'keyword', 'UUID field is found');
   }

   /**
@@ @@
       ]
     ];

-    $this->assertEqual($mapping_definition->toArray(), $expected);
+    $this->assertEquals($mapping_definition->toArray(), $expected);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/elasticsearch_helper/tests/modules/elasticsearch_helper_test/src/Plugin/Normalizer/NodeNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_test\Plugin\Normalizer;

+use Drupal\node\Entity\Node;
 use Drupal\serialization\Normalizer\ContentEntityNormalizer;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\node\Entity\Node $object */
-
+    /** @var Node $object */
     $data = [
       'id' => $object->id(),
       'uuid' => $object->uuid(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/elasticsearch_helper/src/Plugin/QueueWorker/IndexingQueueWorker.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The plugin manager for ElasticsearchIndex.
    *
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   private $elasticsearchIndexManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
    *   The plugin manager for our ElasticsearchIndex plugins.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ElasticsearchIndexManager $elasticsearch_index_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Plugin;

+use Drupal\Core\Queue\QueueWorkerInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Queue\QueueWorkerInterface
+   * @var QueueWorkerInterface
    */
   protected $queue;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager instance.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   Queue factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory, LoggerChannelFactoryInterface $logger_factory) {
@@ @@
   /**
    * Indexes the entity into any matching indices.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function indexEntity(EntityInterface $entity) {
     foreach ($this->getDefinitions() as $plugin) {
@@ @@
   /**
    * Deletes the entity from any matching indices.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function deleteEntity(EntityInterface $entity) {
     foreach ($this->getDefinitions() as $plugin) {
@@ @@
    * @param array $indices
    * @param array $context
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function reindex($indices = [], array $context = []) {
     foreach ($this->getDefinitions() as $definition) {
       if (empty($indices) || in_array($definition['id'], $indices)) {
-        /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin */
+        /** @var ElasticsearchIndexInterface $plugin */
         $plugin = $this->createInstance($definition['id']);
         $plugin->reindex($context);
       }
@@ @@
    * @param $entity_type
    * @param $bundle
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function reindexEntities($entity_type, $bundle = NULL) {
     $query = $this->entityTypeManager->getStorage($entity_type)->getQuery();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Plugin;

+use Drupal\elasticsearch_helper\Elasticsearch\Index\IndexDefinition;
+use Drupal\elasticsearch_helper\Elasticsearch\Index\MappingDefinition;
 use Drupal\Component\Plugin\PluginInspectionInterface;

 /**
@@ @@
    * @param array $context
    *   Additional context parameters.
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\Index\IndexDefinition|null
+   * @return IndexDefinition|null
    */
   public function getIndexDefinition(array $context = []);

@@ @@
    * @param array $context
    *   Additional context parameters.
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\Index\MappingDefinition|null
+   * @return MappingDefinition|null
    */
   public function getMappingDefinition(array $context = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/elasticsearch_helper/src/Plugin/ElasticsearchIndexBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Plugin;

+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ @@
   protected $client;

   /**
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   protected $indexPluginManager;

@@ @@
    * @param string $plugin_id
    * @param mixed $plugin_definition
    * @param \Elasticsearch\Client $client
-   * @param \Symfony\Component\Serializer\Serializer $serializer
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param Serializer $serializer
+   * @param LoggerInterface $logger
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Client $client, Serializer $serializer, LoggerInterface $logger) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ @@
   /**
    * Returns the event dispatcher.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    */
   protected function getEventDispatcher() {
     if (!$this->eventDispatcher) {
@@ @@
   /**
    * Returns Elasticsearch index plugin manager.
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @return ElasticsearchIndexManager
    */
   protected function getElasticsearchIndexPluginManager() {
     if (!$this->indexPluginManager) {
@@ @@
    * @param $operation
    * @param mixed|null $source
    *
-   * @return \Drupal\elasticsearch_helper\Event\ElasticsearchOperationEvent
+   * @return ElasticsearchOperationEvent
    */
   protected function dispatchOperationEvent($operation, $source = NULL) {
     $event = new ElasticsearchOperationEvent($operation, $this, $source);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION, $event);
+    $this->getEventDispatcher()->dispatch($event, ElasticsearchEvents::OPERATION);

     return $event;
   }
@@ @@
    *
    * @param \Throwable $error
    * @param $operation
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface|null $request_wrapper
+   * @param ElasticsearchRequestWrapperInterface|null $request_wrapper
    * @param mixed|null $source
    *
-   * @return \Drupal\elasticsearch_helper\Event\ElasticsearchOperationErrorEvent
+   * @return ElasticsearchOperationErrorEvent
    */
   protected function dispatchOperationErrorEvent(\Throwable $error, $operation, ElasticsearchRequestWrapperInterface $request_wrapper = NULL, $source = NULL) {
     $event = new ElasticsearchOperationErrorEvent($error, $operation, $this, $request_wrapper, $source);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_ERROR, $event);
+    $this->getEventDispatcher()->dispatch($event, ElasticsearchEvents::OPERATION_ERROR);

     return $event;
   }
@@ @@
    * @param array $request_params
    * @param mixed|null $source
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface
+   * @return ElasticsearchRequestWrapperInterface
    */
   protected function createRequest($operation, $callback, array $request_params, $source = NULL) {
     $event_dispatcher = $this->getEventDispatcher();
@@ @@
    * Creates a single index.
    *
    * @param $index_name
-   * @param \Drupal\elasticsearch_helper\Elasticsearch\Index\IndexDefinition $index_definition
+   * @param IndexDefinition $index_definition
    */
   public function createIndex($index_name, IndexDefinition $index_definition) {
     try {
@@ @@
           $params = [$entity_type, $bundle];

           $event = new ElasticsearchHelperCallbackEvent($operation, $callback, $params, $this);
-          $this->getEventDispatcher()->dispatch($operation, $event);
+          $this->getEventDispatcher()->dispatch($event, $operation);

           call_user_func_array($event->getCallback(), $event->getCallbackParameters());
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/elasticsearch_helper/src/Form/ElasticsearchHelperSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * ElasticsearchHelperSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    * @param \Elasticsearch\Client $elasticsearch_client
    *   The Elasticsearch client.
@@ @@
   /**
    * Returns a list of host configurations.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
    * Removes the host from the list.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function removeHost(array $form, FormStateInterface $form_state) {
     // Store submitted host values.
@@ @@
    * Adds new entry to the list of hosts.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function addHost(array $form, FormStateInterface $form_state) {
     // Store submitted host values.
@@ @@
   /**
    * Stores submitted host values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function copyHostValuesFromFormState(FormStateInterface $form_state) {
     // Filter out empty hosts.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/elasticsearch_helper/src/EventSubscriber/TypeEventSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Removes "type" parameter from the request if Elasticsearch server is >= 7.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationRequestEvent $event
+   * @param ElasticsearchOperationRequestEvent $event
    */
   public function onOperationRequest(ElasticsearchOperationRequestEvent $event) {
     if (ElasticsearchClientVersion::getMajorVersion() >= 7) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/elasticsearch_helper/src/EventSubscriber/QueueIndexEventSubscriber.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Suspends queue execution if no nodes are available.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationErrorEvent $event
+   * @param ElasticsearchOperationErrorEvent $event
    */
   public function onQueueIndexError(ElasticsearchOperationErrorEvent $event) {
     $index_with_queue = &drupal_static(IndexingQueueWorker::QUEUE_INDEXING_VAR_NAME);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/elasticsearch_helper/src/EventSubscriber/MessagingEventSubscriber.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Displays a message if throwable is thrown during Elasticsearch operation.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationErrorEvent $event
+   * @param ElasticsearchOperationErrorEvent $event
    */
   public function onOperationError(ElasticsearchOperationErrorEvent $event) {
     // Do not display messages when executed in the command line.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/elasticsearch_helper/src/EventSubscriber/LoggingEventSubscriber.php:15

    ---------- begin diff ----------
@@ @@
 class LoggingEventSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * LoggingEventSubscriber constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    */
   public function __construct(LoggerInterface $logger) {
     $this->logger = $logger;
@@ @@
   /**
    * Logs a message if throwable is thrown during Elasticsearch operation.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationErrorEvent $event
+   * @param ElasticsearchOperationErrorEvent $event
    */
   public function onOperationError(ElasticsearchOperationErrorEvent $event) {
     $operation = $event->getOperation();
@@ @@
   /**
    * Logs a message upon successful Elasticsearch operation.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationRequestResultEvent $event
+   * @param ElasticsearchOperationRequestResultEvent $event
    */
   public function onRequestResult(ElasticsearchOperationRequestResultEvent $event) {
     // Get request result body.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestResultEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Event;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface;
 use Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Elasticsearch operation request result event.
@@ @@
   /**
    * Elasticsearch request result.
    *
-   * @var \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface
+   * @var ElasticsearchRequestResultInterface
    */
   protected $requestResult;

@@ @@
   /**
    * ElasticsearchOperationRequestResultEvent constructor.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface $result
+   * @param ElasticsearchRequestResultInterface $result
    */
   public function __construct(ElasticsearchRequestResultInterface $result) {
     $this->requestResult = $result;
@@ @@
   /**
    * Returns Elasticsearch request result body.
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface
+   * @return ElasticsearchRequestResultInterface
    */
   public function getResult() {
     return $this->requestResult;
@@ @@
   /**
    * Returns Elasticsearch request wrapper instance.
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface
+   * @return ElasticsearchRequestWrapperInterface
    */
   public function getRequestWrapper() {
     return $this->getResult()->getRequestWrapper();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationRequestEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Elasticsearch operation request event.
@@ @@
   /**
    * Elasticsearch request wrapper instance.
    *
-   * @var \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface
+   * @var ElasticsearchRequestWrapperInterface
    */
   protected $requestWrapper;

@@ @@
   /**
    * ElasticsearchOperationRequestEvent constructor.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface $request_wrapper
+   * @param ElasticsearchRequestWrapperInterface $request_wrapper
    */
   public function __construct(ElasticsearchRequestWrapperInterface $request_wrapper) {
     $this->requestWrapper = $request_wrapper;
@@ @@
   /**
    * Returns Elasticsearch request wrapper instance.
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface
+   * @return ElasticsearchRequestWrapperInterface
    */
   public function getRequestWrapper() {
     return $this->requestWrapper;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Elasticsearch operation event.
@@ @@
   /**
    * Elasticsearch index plugin instance.
    *
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @var ElasticsearchIndexInterface
    */
   protected $pluginInstance;

@@ @@
    * ElasticsearchOperationEvent constructor.
    *
    * @param $operation
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin_instance
+   * @param ElasticsearchIndexInterface $plugin_instance
    * @param mixed|null $object
    */
   public function __construct($operation, ElasticsearchIndexInterface $plugin_instance, $object = NULL) {
@@ @@
   /**
    * Returns Elasticsearch index plugin instance.
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @return ElasticsearchIndexInterface
    */
   public function getPluginInstance() {
     return $this->pluginInstance;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchOperationErrorEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Elasticsearch operation error event.
@@ @@
   /**
    * Elasticsearch index plugin instance.
    *
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @var ElasticsearchIndexInterface
    */
   protected $pluginInstance;

@@ @@
    * Request wrapper instance will only be available for errors that were
    * thrown after request wrapper object has been created.
    *
-   * @var \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface|null
+   * @var ElasticsearchRequestWrapperInterface|null
    */
   protected $requestWrapper;

@@ @@
    *
    * @param \Throwable $error
    * @param $operation
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin_instance
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface $request_wrapper
+   * @param ElasticsearchIndexInterface $plugin_instance
+   * @param ElasticsearchRequestWrapperInterface $request_wrapper
    * @param mixed|null $object
    */
   public function __construct(\Throwable $error, $operation, ElasticsearchIndexInterface $plugin_instance, ElasticsearchRequestWrapperInterface $request_wrapper = NULL, $object = NULL) {
@@ @@
   /**
    * Returns Elasticsearch request wrapper instance.
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface|null
+   * @return ElasticsearchRequestWrapperInterface|null
    */
   public function getRequestWrapper() {
     return $this->requestWrapper;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/elasticsearch_helper/src/Event/ElasticsearchHelperCallbackEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Elasticsearch Helper callback event.
@@ @@
   /**
    * Elasticsearch index plugin instance.
    *
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @var ElasticsearchIndexInterface
    */
   protected $pluginInstance;

@@ @@
    * @param $operation
    * @param $callback
    * @param array $callback_parameters
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin_instance
+   * @param ElasticsearchIndexInterface $plugin_instance
    */
   public function __construct($operation, $callback, array $callback_parameters, ElasticsearchIndexInterface $plugin_instance) {
     $this->operation = $operation;
@@ @@
   /**
    * Returns Elasticsearch index plugin instance.
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @return ElasticsearchIndexInterface
    */
   public function getPluginInstance() {
     return $this->pluginInstance;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/elasticsearch_helper/src/Event/DataTypeDefinitionBuildEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class DataTypeDefinitionBuildEvent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/elasticsearch_helper/src/ElasticsearchRequestWrapperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper;

+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 /**
  * Defines Elasticsearch request wrapper interface.
  */
@@ @@
   /**
    * Returns Elasticsearch index plugin instance.
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @return ElasticsearchIndexInterface
    */
   public function getPluginInstance();

@@ @@
   /**
    * Executes the request and returns the request result instance.
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface
+   * @return ElasticsearchRequestResultInterface
    *
    * @throws \Throwable
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/elasticsearch_helper/src/ElasticsearchRequestWrapper.php:13

    ---------- begin diff ----------
@@ @@
 class ElasticsearchRequestWrapper implements ElasticsearchRequestWrapperInterface {

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Elasticsearch index plugin instance.
    *
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @var ElasticsearchIndexInterface
    */
   protected $pluginInstance;

@@ @@
   /**
    * ElasticsearchRequestWrapper constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    * @param $operation
    * @param $callback
    * @param array $callback_parameters
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin_instance
+   * @param ElasticsearchIndexInterface $plugin_instance
    * @param mixed|null $object
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, $operation, $callback, array $callback_parameters, ElasticsearchIndexInterface $plugin_instance, $object = NULL) {
@@ @@
   /**
    * Returns the event dispatcher.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    */
   protected function getEventDispatcher() {
     return $this->eventDispatcher;
@@ @@
     // Create request event.
     $request_event = new ElasticsearchOperationRequestEvent($this);
     // Dispatch the request event.
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_REQUEST, $request_event);
+    $this->getEventDispatcher()->dispatch($request_event, ElasticsearchEvents::OPERATION_REQUEST);

     // Execute the request.
     $result = $this->executeCallback();
@@ @@
   /**
    * Executes the callback and returns an instance of request result.
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface
+   * @return ElasticsearchRequestResultInterface
    */
   protected function executeCallback() {
     $result = call_user_func_array($this->getCallback(), $this->getCallbackParameters());
@@ @@
   /**
    * Dispatches request result event.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface $result
+   * @param ElasticsearchRequestResultInterface $result
    */
   protected function dispatchRequestResultEvent(ElasticsearchRequestResultInterface $result) {
     $result_event = new ElasticsearchOperationRequestResultEvent($result);
-    $this->getEventDispatcher()->dispatch(ElasticsearchEvents::OPERATION_REQUEST_RESULT, $result_event);
+    $this->getEventDispatcher()->dispatch($result_event, ElasticsearchEvents::OPERATION_REQUEST_RESULT);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/elasticsearch_helper/src/ElasticsearchRequestResultInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Returns Elasticsearch request wrapper instance.
    *
-   * @return \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface
+   * @return ElasticsearchRequestWrapperInterface
    */
   public function getRequestWrapper();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/elasticsearch_helper/src/ElasticsearchRequestResult.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Elasticsearch request wrapper instance.
    *
-   * @var \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface
+   * @var ElasticsearchRequestWrapperInterface
    */
   protected $requestWrapper;

@@ @@
   /**
    * ElasticsearchRequestResult constructor.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestWrapperInterface $request_wrapper
+   * @param ElasticsearchRequestWrapperInterface $request_wrapper
    * @param $result_body
    */
   public function __construct(ElasticsearchRequestWrapperInterface $request_wrapper, $result_body) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/elasticsearch_helper/src/ElasticsearchHelperQueueFactoryDecorator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The inner queue service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $innerService;

@@ @@
   /**
    * ElasticsearchHelperQueueFactoryDecorator constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $inner
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param QueueFactory $inner
+   * @param Settings $settings
    */
   public function __construct(QueueFactory $inner, Settings $settings) {
     parent::__construct($settings);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/elasticsearch_helper/src/ElasticsearchClientBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Elasticsearch\ClientBuilder;
@@ @@
 class ElasticsearchClientBuilder {

   /**
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
    * ElasticsearchClientBuilder constructor.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ConfigFactory $configFactory
+   * @param ModuleHandlerInterface $moduleHandler
    */
   public function __construct(ConfigFactory $configFactory, ModuleHandlerInterface $moduleHandler) {
     $this->config = $configFactory->get('elasticsearch_helper.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/MappingDefinition.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Mapping properties.
    *
-   * @var \Drupal\elasticsearch_helper\Elasticsearch\Index\FieldDefinition[]
+   * @var FieldDefinition[]
    */
   protected $properties = [];

@@ @@
    * Properties are fields of an object.
    *
    * @param $field_name
-   * @param \Drupal\elasticsearch_helper\Elasticsearch\Index\FieldDefinition $field
+   * @param FieldDefinition $field
    *
    * @return self
    */
@@ @@
   /**
    * Adds properties to the mapping.
    *
-   * @param \Drupal\elasticsearch_helper\Elasticsearch\Index\FieldDefinition[] $properties
+   * @param FieldDefinition[] $properties
    *
    * @return self
    */
@@ @@
    *
    * @param $property
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\Index\FieldDefinition|null
+   * @return FieldDefinition|null
    */
   public function getProperty($property) {
     return isset($this->properties[$property]) ? $this->properties[$property] : NULL;
@@ @@
   /**
    * Returns properties.
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\Index\FieldDefinition[]
+   * @return FieldDefinition[]
    */
   public function getProperties() {
     return $this->properties;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/IndexDefinition.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Index mapping definition.
    *
-   * @var \Drupal\elasticsearch_helper\Elasticsearch\Index\MappingDefinition
+   * @var MappingDefinition
    */
   protected $mappingDefinition;

@@ @@
   /**
    * Index settings definition.
    *
-   * @var \Drupal\elasticsearch_helper\Elasticsearch\Index\SettingsDefinition
+   * @var SettingsDefinition
    */
   protected $settingsDefinition;

@@ @@
   /**
    * Sets mapping definition.
    *
-   * @param \Drupal\elasticsearch_helper\Elasticsearch\Index\MappingDefinition $mapping_definition
+   * @param MappingDefinition $mapping_definition
    *
    * @return self
    */
@@ @@
   /**
    * Returns mapping definition instance.
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\Index\MappingDefinition
+   * @return MappingDefinition
    */
   public function getMappingDefinition() {
     return $this->mappingDefinition;
@@ @@
   /**
    * Sets index settings definition.
    *
-   * @param \Drupal\elasticsearch_helper\Elasticsearch\Index\SettingsDefinition $settings_definition
+   * @param SettingsDefinition $settings_definition
    *
    * @return self
    */
@@ @@
   /**
    * Returns index settings definition instance.
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\Index\SettingsDefinition
+   * @return SettingsDefinition
    */
   public function getSettingsDefinition() {
     return $this->settingsDefinition;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/elasticsearch_helper/src/Elasticsearch/Index/FieldDefinition.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Data type of the field.
    *
-   * @var \Drupal\elasticsearch_helper\Elasticsearch\DataType\DataType
+   * @var DataType
    */
   protected $data_type;

@@ @@
   /**
    * FieldDefinition constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Elasticsearch\DataType\DataType $type
+   * @param DataType $type
    * @param array $options
    *
    * @throws \InvalidArgumentException
@@ @@
   /**
    * Returns data type instance.
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\DataType\DataType
+   * @return DataType
    */
   public function getDataType() {
     return $this->data_type;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataTypeRepository.php:17

    ---------- begin diff ----------
@@ @@
   use CacheableDependencyTrait;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * DataTypeRepository constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
     $this->eventDispatcher = $event_dispatcher;
@@ @@

         // Allow modules to alter the definitions.
         $event = new DataTypeDefinitionBuildEvent($definitions);
-        $this->eventDispatcher->dispatch(DataTypeEvents::BUILD, $event);
+        $this->eventDispatcher->dispatch($event, DataTypeEvents::BUILD);

         // Store in cache.
         $this->cacheSet($this->cacheId, $event->getDataTypeDefinitions(), Cache::PERMANENT, $this->getCacheTags());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/elasticsearch_helper/src/Elasticsearch/DataType/DataType.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * Returns data type repository instance.
    *
-   * @return \Drupal\elasticsearch_helper\Elasticsearch\DataType\DataTypeRepositoryInterface
+   * @return DataTypeRepositoryInterface
    */
   public static function getDataTypeRepository() {
     return \Drupal::service('elasticsearch_helper.data_type_repository');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/elasticsearch_helper/src/Commands/ElasticsearchHelperCommands.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\elasticsearch_helper\Commands;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager;
 use Drush\Commands\DrushCommands;
@@ @@
   /**
    * ElasticsearchHelperCommands constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $manager
+   * @param ElasticsearchIndexManager $manager
    *   The Elasticsearch index plugin manager.
    */
   public function __construct(ElasticsearchIndexManager $manager) {
@@ @@
    * @default-fields id,label
    * @aliases eshl,elasticsearch-helper-list
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    */
   public function helperList() {
     $rows = [];
@@ @@
    * @command elasticsearch:helper:setup
    * @aliases eshs,elasticsearch-helper-setup
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function helperSetup($indices = NULL) {
     // Indices can be specified with a comma-separate value.
@@ @@
    * @command elasticsearch:helper:drop
    * @aliases eshd,elasticsearch-helper-drop
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function helperDrop($indices = NULL) {
     // Indices can be specified with a comma-separate value.
@@ @@
       $plugin_id = $plugin['id'];

       if (!$indices || in_array($plugin_id, $indices)) {
-        /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin */
+        /** @var ElasticsearchIndexInterface $plugin */
         $plugin = $this->elasticsearchPluginManager->createInstance($plugin_id);

         $rows = [];
@@ @@
    * @command elasticsearch:helper:reindex
    * @aliases eshr,elasticsearch-helper-reindex
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function helperReindex($indices = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/elasticsearch_helper/src/Annotation/ElasticsearchIndex.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


35) modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/Normalizer/NodeNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_example\Plugin\Normalizer;

+use Drupal\node\Entity\Node;
 use Drupal\serialization\Normalizer\ContentEntityNormalizer;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\node\Entity\Node $object */
-
+    /** @var Node $object */
     $data = [
       'id' => $object->id(),
       'uuid' => $object->uuid(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/TimeBasedIndex.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_example\Plugin\ElasticsearchIndex;

+use Drupal\node\Entity\Node;
 use Drupal\elasticsearch_helper\Elasticsearch\Index\FieldDefinition;
 use Drupal\elasticsearch_helper\Elasticsearch\Index\MappingDefinition;
 use Drupal\elasticsearch_helper\ElasticsearchClientVersion;
@@ @@
    * {@inheritdoc}
    */
   public function serialize($source, $context = []) {
-    /** @var \Drupal\node\Entity\Node $source */
-
+    /** @var Node $source */
     $data = parent::serialize($source);

     // Add the creation date.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/Plugin/ElasticsearchIndex/MultilingualContentIndex.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_example\Plugin\ElasticsearchIndex;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\elasticsearch_helper\Elasticsearch\Index\FieldDefinition;
 use Drupal\elasticsearch_helper\Elasticsearch\Index\MappingDefinition;
@@ @@
 class MultilingualContentIndex extends ElasticsearchIndexBase {

   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $language_manager;

@@ @@
    * @param $plugin_id
    * @param $plugin_definition
    * @param \Elasticsearch\Client $client
-   * @param \Symfony\Component\Serializer\Serializer $serializer
-   * @param \Psr\Log\LoggerInterface $logger
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param Serializer $serializer
+   * @param LoggerInterface $logger
+   * @param LanguageManagerInterface $language_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Client $client, Serializer $serializer, LoggerInterface $logger, LanguageManagerInterface $language_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $client, $serializer, $logger);
@@ @@
    * {@inheritdoc}
    */
   public function serialize($source, $context = []) {
-    /** @var \Drupal\node\NodeInterface $source */
-
+    /** @var NodeInterface $source */
     $data = parent::serialize($source, $context);

     // Add the language code to be used as a token.
@@ @@
    * {@inheritdoc}
    */
   public function index($source) {
-    /** @var \Drupal\node\NodeInterface $source */
+    /** @var NodeInterface $source */
     foreach ($source->getTranslationLanguages() as $langcode => $language) {
       $translation = $source->getTranslation($langcode);
       parent::index($translation);
@@ @@
    * {@inheritdoc}
    */
   public function delete($source) {
-    /** @var \Drupal\node\NodeInterface $source */
+    /** @var NodeInterface $source */
     foreach ($source->getTranslationLanguages() as $langcode => $language) {
       $translation = $source->getTranslation($langcode);
       parent::delete($translation);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/elasticsearch_helper/examples/elasticsearch_helper_example/src/EventSubscriber/ReindexEventSubscriber.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Replaces the callback to dummy callback.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchHelperCallbackEvent $event
+   * @param ElasticsearchHelperCallbackEvent $event
    */
   public function onReindex(ElasticsearchHelperCallbackEvent $event) {
     $plugin = $event->getPluginInstance();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/elasticsearch_helper/elasticsearch_helper.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager;
 /**
  * @file
  * This module provides tools to integrate elasticsearch with Drupal.
@@ @@
 function elasticsearch_helper_entity_insert(EntityInterface $entity) {
   $config = \Drupal::config('elasticsearch_helper.settings');

-  /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
+  /** @var ElasticsearchIndexManager $index_plugin_manager */
   $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');

   if ($config->get('defer_indexing')) {
@@ @@
  * Implements hook_entity_translation_delete().
  */
 function elasticsearch_helper_entity_translation_delete(EntityInterface $entity) {
-  /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
+  /** @var ElasticsearchIndexManager $index_plugin_manager */
   $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');
   $index_plugin_manager->deleteEntity($entity);
 }
@@ @@
  * Implements hook_modules_installed().
  */
 function elasticsearch_helper_modules_installed($modules) {
-  /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
+  /** @var ElasticsearchIndexManager $index_plugin_manager */
   $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');

   foreach ($index_plugin_manager->getDefinitions() as $plugin) {
@@ @@
  * Implements hook_module_preuninstall().
  */
 function elasticsearch_helper_module_preuninstall($module) {
-  /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
+  /** @var ElasticsearchIndexManager $index_plugin_manager */
   $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');

   foreach ($index_plugin_manager->getDefinitions() as $plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


40) modules/contrib/elasticsearch_helper/elasticsearch_helper.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleInterface;
 /**
  * @file
  * Installation functions for the Elasticsearch Helper module.
@@ @@
   $mistyped_permission = 'configured elasticsearch helper';
   $permission = 'configure elasticsearch helper';

-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission($mistyped_permission)) {
       $role->revokePermission($mistyped_permission);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


41) modules/contrib/elasticsearch_helper/elasticsearch_helper.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Elasticsearch\ClientBuilder;
 /**
  * @file
  * Hooks provided by the elasticsearch_helper module.
@@ @@
  * @param \Elasticsearch\ClientBuilder
  *   The ClientBuilder object.
  */
-function hook_elasticsearch_helper_client_builder_alter(\Elasticsearch\ClientBuilder $clientBuilder) {
+function hook_elasticsearch_helper_client_builder_alter(ClientBuilder $clientBuilder) {
   // Send log entries from the client directly to Drupal's log.
   $clientBuilder->setLogger(\Drupal::logger('elasticsearch'));
 }
@@ @@
 /**
  * Alters the entity query which selects entities for reindexing.
  *
- * @param \Drupal\Core\Entity\Query\QueryInterface $query
+ * @param QueryInterface $query
  *   Entity query instance.
  * @param $entity_type
  *   Type of entities which need to be re-indexed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 6 nodes were removed                                                 

 [OK] 41 files have been changed by Rector                                      

