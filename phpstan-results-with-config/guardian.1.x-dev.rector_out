modules/contrib/guardian/guardian.api.php
modules/contrib/guardian/guardian.install
modules/contrib/guardian/guardian.module
modules/contrib/guardian/src/EventSubscriber/GuardianSubscriber.php
modules/contrib/guardian/src/Form/GuardianSettingsForm.php
modules/contrib/guardian/src/GuardianManager.php
modules/contrib/guardian/src/GuardianManagerInterface.php
modules/contrib/guardian/tests/src/Functional/GuardedUsersTest.php

6 files with changes
====================

1) modules/contrib/guardian/tests/src/Functional/GuardedUsersTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * A guarded user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $guardedUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/guardian/src/GuardianManagerInterface.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Set default Guarded User values.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User object to set with default values.
    */
   public function setDefaultUserValues(UserInterface $user);
@@ @@
   /**
    * Check if Account has correct mail, init, pass values.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account object.
    *
    * @return bool
@@ @@
   /**
    * Check if Account has been active for minimum period.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account object.
    *
    * @return bool
@@ @@
   /**
    * Check if Account is a Guarded User.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account object.
    *
    * @return bool
@@ @@
   /**
    * Destroy all sessions of given Account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account object.
    */
   public function destroySession(AccountInterface $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/guardian/src/GuardianManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guardian;

+use Drupal\user\UserStorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The configuration object factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The account object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The session manager.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The email validator.
    *
-   * @var \Egulias\EmailValidator\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * GuardianManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The account object.
-   * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
+   * @param SessionManagerInterface $session_manager
    *   The session manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Egulias\EmailValidator\EmailValidator $email_validator
+   * @param EmailValidator $email_validator
    *   The email validator.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, MailManagerInterface $mail_manager, RequestStack $request_stack, AccountInterface $current_user, SessionManagerInterface $session_manager, TimeInterface $time, EmailValidator $email_validator, ModuleHandlerInterface $module_handler) {
@@ @@
     ];

     $guardian_mail = Settings::get('guardian_mail');
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->userStorage->load(1);

     $this->mailManager->mail('guardian', 'notification', $guardian_mail, $user->getPreferredLangcode(), $params, NULL, TRUE);
@@ @@
    * {@inheritdoc}
    */
   public function hasValidData(AccountInterface $account) {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->userStorage->load($account->id());

     if ($user && is_null($user->getPassword())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/guardian/src/EventSubscriber/GuardianSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guardian\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Url;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\guardian\GuardianManagerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 /**
@@ @@
   /**
    * Returns password reset page if the current Guarded User is invalid.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function checkUser(GetResponseEvent $event) {
+  public function checkUser(RequestEvent $event) {
     $current_path = Url::fromRoute('<current>');

     // Show message to guarded users that are logged out with force.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/guardian/guardian.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\guardian\GuardianManagerInterface;
+use Drupal\user\UserInterface;
 /**
  * @file
  * Contains guardian.module.
@@ @@
  * Implements hook_cron().
  */
 function guardian_cron() {
-  /** @var \Drupal\guardian\GuardianManagerInterface $guardian */
+  /** @var GuardianManagerInterface $guardian */
   $guardian = \Drupal::service('guardian.manager');

-  /** @var \Drupal\user\UserInterface[] $accounts */
+  /** @var UserInterface[] $accounts */
   $accounts = \Drupal::entityTypeManager()
     ->getStorage('user')
     ->loadMultiple($guardian->getGuardedUids());
@@ @@
  * Uid 1 can only be viewed or updated by uid 1.
  */
 function guardian_user_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\guardian\GuardianManagerInterface $guardian */
+  /** @var GuardianManagerInterface $guardian */
   $guardian = \Drupal::service('guardian.manager');

-  /** @var \Drupal\user\UserInterface $entity */
+  /** @var UserInterface $entity */
   if (!$guardian->isGuarded($entity)) {
     return AccessResult::neutral();
   }
@@ @@
  * @see \Drupal\user\ProfileForm::form()
  */
 function guardian_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\user\UserInterface $account */
+  /** @var UserInterface $account */
   $account = $form_state->getFormObject()->getEntity();

   if ($account->isNew()) {
@@ @@
     return;
   }

-  /** @var \Drupal\guardian\GuardianManagerInterface $guardian */
+  /** @var GuardianManagerInterface $guardian */
   $guardian = \Drupal::service('guardian.manager');

   if (!$guardian->isGuarded($account)) {
@@ @@
  * Implements hook_ENTITY_TYPE_presave().
  */
 function guardian_user_presave(EntityInterface $entity) {
-  /** @var \Drupal\guardian\GuardianManagerInterface $guardian */
+  /** @var GuardianManagerInterface $guardian */
   $guardian = \Drupal::service('guardian.manager');

-  /** @var \Drupal\user\UserInterface $entity */
+  /** @var UserInterface $entity */
   if ($guardian->isGuarded($entity)) {
     $guardian->setDefaultUserValues($entity);
   }
@@ @@
     return;
   }

-  /** @var \Drupal\guardian\GuardianManagerInterface $guardian */
+  /** @var GuardianManagerInterface $guardian */
   $guardian = \Drupal::service('guardian.manager');
   $users = \Drupal::entityTypeManager()
     ->getStorage('user')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/guardian/guardian.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\guardian\GuardianManagerInterface;
+use Drupal\user\UserInterface;
 /**
  * @file
  * Install, update and uninstall functions.
@@ @@
  * Implements hook_install().
  */
 function guardian_install() {
-  /** @var \Drupal\guardian\GuardianManagerInterface $guardian */
+  /** @var GuardianManagerInterface $guardian */
   $guardian = \Drupal::service('guardian.manager');

-  /** @var \Drupal\user\UserInterface[] $accounts */
+  /** @var UserInterface[] $accounts */
   $accounts = \Drupal::entityTypeManager()
     ->getStorage('user')
     ->loadMultiple($guardian->getGuardedUids());
@@ @@
  * Implements hook_uninstall().
  */
 function guardian_uninstall() {
-  /** @var \Drupal\guardian\GuardianManagerInterface $guardian */
+  /** @var GuardianManagerInterface $guardian */
   $guardian = \Drupal::service('guardian.manager');

   $guardian->notifyModuleState(FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

