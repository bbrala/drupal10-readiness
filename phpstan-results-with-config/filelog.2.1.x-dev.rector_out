modules/contrib/filelog/filelog.install
modules/contrib/filelog/filelog.module
modules/contrib/filelog/filelog.tokens.inc
modules/contrib/filelog/src/Crc32.php
modules/contrib/filelog/src/FileLogException.php
modules/contrib/filelog/src/LogFileManager.php
modules/contrib/filelog/src/LogFileManagerInterface.php
modules/contrib/filelog/src/LogMessage.php
modules/contrib/filelog/src/LogRotator.php
modules/contrib/filelog/src/Logger/FileLog.php
modules/contrib/filelog/src/ProxyClass/LogFileManager.php
modules/contrib/filelog/tests/src/Functional/FileLogSettingsTest.php
modules/contrib/filelog/tests/src/Unit/FileLogCrc32Test.php
modules/contrib/filelog/tests/src/Unit/FileLogRotationTest.php
modules/contrib/filelog/tests/src/Unit/FileLogTest.php
modules/contrib/filelog/tests/src/Unit/FileLogTestBase.php
modules/contrib/filelog/tests/src/Unit/FileLogTokenTest.php

12 files with changes
=====================

1) modules/contrib/filelog/tests/src/Unit/FileLogTokenTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The logger.log_message_parser service.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $logMessageParser;

@@ @@
   /**
    * A mock of the token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;

@@ @@
   /**
    * A mock of the date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * A mock of the user entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $userStorage;

@@ @@

     $this->logMessageParser = new LogMessageParser();

-    $this->token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock(Token::class);

     $this->dateFormatter = $this->createMock(DateFormatterInterface::class);
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
@@ @@
       $tokens[$name] = 'log:' . $name;
     }

-    $user = $this->getMockBuilder(User::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user = $this->createMock(User::class);

     $this->userStorage->expects(static::once())
       ->method('load')
@@ @@

     $options = [];

-    /** @var \Drupal\Core\Render\BubbleableMetadata $metadata */
+    /** @var BubbleableMetadata $metadata */
     $metadata = $this->createMock(BubbleableMetadata::class);

     // Mock the token service calls.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/filelog/tests/src/Unit/FileLogTestBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * A mock of the file_system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;

@@ @@
   /**
    * The virtual file system, for manipulating files in-memory.
    *
-   * @var \org\bovigo\vfs\vfsStreamDirectory
+   * @var vfsStreamDirectory
    */
   protected vfsStreamDirectory $virtualFileSystem;

@@ @@
   protected function setUp(): void {
     parent::setUp();
     $container = new ContainerBuilder();
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $swManager */
+    /** @var StreamWrapperManagerInterface $swManager */
     $swManager = $this->createMock(StreamWrapperManagerInterface::class);
     $settings = new Settings([]);
-    /** @var \Psr\Log\LoggerInterface $logger */
+    /** @var LoggerInterface $logger */
     $logger = $this->createMock(LoggerInterface::class);
     $this->fileSystem = new FileSystem($swManager, $settings, $logger);
     $container->set('file_system', $this->fileSystem);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/filelog/tests/src/Unit/FileLogTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\filelog\Unit;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\FileSecurity\FileSecurity;
 use Drupal\Core\Logger\LogMessageParser;
@@ @@
   /**
    * A mock of the token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;

@@ @@
   /**
    * The logger.log_message_parser service.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $logMessageParser;

@@ @@
   /**
    * A mock of the datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $this->token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock(Token::class);

     $this->token->method('replace')
       ->willReturnCallback([static::class, 'tokenReplace']);
@@ @@
    * @dataProvider providerFileLog
    */
   public function testFileLog(array $config, array $events, string $expected = ''): void {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+    /** @var ConfigFactoryInterface $configFactory */
     $configFactory = $this->getConfigFactoryStub(
       ['filelog.settings' => $config]
     );

-    /** @var \Drupal\Core\State\StateInterface|\PHPUnit\Framework\MockObject\MockObject $state */
+    /** @var StateInterface|MockObject $state */
     $state_data = ['filelog.rotation' => 0];
     $state = $this->createMock(StateInterface::class);
     $state->method('get')
@@ @@
    *   The formatted text.
    */
   public static function tokenReplace(string $text, array $data): string {
-    /** @var \Drupal\filelog\LogMessage $message */
+    /** @var LogMessage $message */
     $message = $data['log'];
     return strtr(
       $text,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/filelog/tests/src/Unit/FileLogRotationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\filelog\Unit;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\Core\Utility\Token;
@@ @@
   /**
    * A mock of the logfile service that provides the filename.
    *
-   * @var \Drupal\filelog\LogFileManagerInterface
+   * @var LogFileManagerInterface
    */
   protected LogFileManagerInterface $fileManager;

@@ @@
   /**
    * A mock of the token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;

@@ @@
   /**
    * A mock of the datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;

@@ @@
     // Force UTC time to avoid platform-specific effects.
     date_default_timezone_set('UTC');

-    $this->fileManager = $this
-      ->getMockBuilder(LogFileManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->fileManager = $this->createMock(LogFileManager::class);
     $this->fileManager
       ->method('getFileName')
       ->willReturn('vfs://filelog/' . LogFileManager::FILENAME);

-    $this->token = $this
-      ->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->token = $this->createMock(Token::class);
     $this->token
       ->method('replace')
       ->willReturnCallback([static::class, 'tokenReplace']);

-    $this->time = $this
-      ->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
     $this->time
       ->method('getRequestTime')
       ->willReturn(86401);
@@ @@
         'location' => $root,
       ],
     ];
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+    /** @var ConfigFactoryInterface $configFactory */
     $configFactory = $this->getConfigFactoryStub($configs);

     $state = $this->createMock(StateInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/filelog/tests/src/Functional/FileLogSettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\filelog\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Component\FileSecurity\FileSecurity;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\User;
@@ @@
   /**
    * A user permitted to change site configuration.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private User $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
    * @param string $error
    *   If the form submission is invalid, the expected error message.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    *
    * @covers ::filelog_form_system_logging_settings_alter
    * @covers ::filelog_logging_settings_validate
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/filelog/src/ProxyClass/LogFileManager.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected ContainerInterface $container;

@@ @@
   /**
    * Constructs a ProxyClass Drupal proxy object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    * @param string $drupal_proxy_original_service_id
    *   The service ID of the original service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/filelog/src/Logger/FileLog.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The filelog settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;

@@ @@
   /**
    * The state system, for updating the filelog.rotation timestamp.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;

@@ @@
   /**
    * The token system, for formatting the log messages.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;

@@ @@
   /**
    * The log message parser, for formatting the log messages.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $parser;

@@ @@
   /**
    * The time system.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;

@@ @@
   /**
    * The log-file manager, providing file-handling methods.
    *
-   * @var \Drupal\filelog\LogFileManagerInterface
+   * @var LogFileManagerInterface
    */
   protected LogFileManagerInterface $fileManager;

@@ @@
   /**
    * FileLog constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config.factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The logger.log_message_parser service.
-   * @param \Drupal\filelog\LogFileManagerInterface $fileManager
+   * @param LogFileManagerInterface $fileManager
    *   The filelog.file_manager service.
    */
   public function __construct(ConfigFactoryInterface $configFactory,
@@ @@
    * @return bool
    *   Returns TRUE if the log file is available for writing.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   protected function openFile(): bool {
     if ($this->logFile) {
@@ @@
    * @param string $entry
    *   The value to write. This should contain no newline characters.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   protected function write(string $entry): void {
     if (!fwrite($this->logFile, $entry . "\n")) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/filelog/src/LogRotator.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The filelog settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;

@@ @@
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;

@@ @@
   /**
    * The filelog.file_manager service.
    *
-   * @var \Drupal\filelog\LogFileManagerInterface
+   * @var LogFileManagerInterface
    */
   protected LogFileManagerInterface $fileManager;

@@ @@
   /**
    * The file_system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;

@@ @@
   /**
    * LogRotator constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config.factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Drupal\filelog\LogFileManagerInterface $fileManager
+   * @param LogFileManagerInterface $fileManager
    *   The filelog service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file_system service.
    */
   public function __construct(ConfigFactoryInterface $configFactory,
@@ @@
    * @return bool
    *   Returns TRUE if the rotation was successful.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   public function run(bool $force = FALSE): bool {
     if ($force || $this->shouldRun($this->time->getRequestTime())) {
@@ @@
   /**
    * Rotate the log file.
    *
-   * @throws \Drupal\filelog\FileLogException
+   * @throws FileLogException
    */
   protected function rotateFile(): bool {
     $logFile = $this->fileManager->getFileName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/filelog/src/LogMessage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\filelog;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\user\Entity\User;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * User who triggered the event.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;

@@ @@
     if (!isset(static::$levels)) {
       static::$levels = RfcLogLevel::getLevels();
       foreach (static::$levels as $id => $label) {
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+        /** @var TranslatableMarkup $label */
         static::$levels[$id] = $label->getUntranslatedString();
       }
     }
@@ @@
   /**
    * Get the user who triggered the message.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user object.
    */
   public function getUser(): UserInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/filelog/src/LogFileManager.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The filelog settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;

@@ @@
   /**
    * LogFileManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config_factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file_system service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/filelog/filelog.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\filelog\LogMessage;
 /**
  * @file
  * Builds placeholder replacement tokens for log messages.
@@ @@
 function filelog_tokens($type, array $tokens, array $data, array $options, BubbleableMetadata $metadata): array {
   $token_service = Drupal::token();

-  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_service */
+  /** @var DateFormatterInterface $date_service */
   $date_service = Drupal::service('date.formatter');

   $replacements = [];
@@ @@
     return [];
   }

-  /** @var \Drupal\filelog\LogMessage $message */
+  /** @var LogMessage $message */
   $message = $data['log'];

   foreach ($tokens as $name => $original) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/filelog/filelog.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\File\FileSystemInterface;
 /**
  * @file
  * Contains filelog.module.
@@ @@
  */
 function filelog_logging_settings_validate(array $form,
                                            FormStateInterface $formState): void {
-  /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+  /** @var FileSystemInterface $fileSystem */
   $fileSystem = Drupal::service('file_system');
   $streamWrapperManager = Drupal::service('stream_wrapper_manager');
   // Ignore the settings if logging is disabled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

