diff --git a/src/Annotation/LanguageSelectionPageCondition.php b/src/Annotation/LanguageSelectionPageCondition.php
index 59f6440..b91a431 100644
--- a/src/Annotation/LanguageSelectionPageCondition.php
+++ b/src/Annotation/LanguageSelectionPageCondition.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\language_selection_page\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Condition\Annotation\Condition;
 
 /**
@@ -20,7 +21,7 @@ class LanguageSelectionPageCondition extends Condition {
   /**
    * The description of the language selection page condition plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -36,7 +37,7 @@ class LanguageSelectionPageCondition extends Condition {
   /**
    * The human-readable name of the language selection page condition plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/LanguageSelectionPageController.php b/src/Controller/LanguageSelectionPageController.php
index c96c3ac..7ff1053 100644
--- a/src/Controller/LanguageSelectionPageController.php
+++ b/src/Controller/LanguageSelectionPageController.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\language_selection_page\Controller;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Url;
@@ -18,14 +19,14 @@ final class LanguageSelectionPageController extends ControllerBase {
   /**
    * The plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $pluginManager;
 
   /**
    * PageController constructor.
    *
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $plugin_manager
+   * @param ExecutableManagerInterface $plugin_manager
    *   The plugin manager service.
    */
   public function __construct(ExecutableManagerInterface $plugin_manager) {
@@ -91,7 +92,7 @@ final class LanguageSelectionPageController extends ControllerBase {
    * @param array $response
    *   The content array.
    *
-   * @return array|\Symfony\Component\HttpFoundation\Response
+   * @return array|Response
    *   A response or a render array.
    */
   public function getPageResponse(array $response) {
diff --git a/src/EventSubscriber/LanguageSelectionPageSubscriber.php b/src/EventSubscriber/LanguageSelectionPageSubscriber.php
index b73c152..df576bc 100644
--- a/src/EventSubscriber/LanguageSelectionPageSubscriber.php
+++ b/src/EventSubscriber/LanguageSelectionPageSubscriber.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\language_selection_page\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -14,7 +15,6 @@ use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationSelected;
 use Drupal\language_selection_page\Plugin\LanguageNegotiation\LanguageNegotiationLanguageSelectionPage;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -25,57 +25,57 @@ final class LanguageSelectionPageSubscriber implements EventSubscriberInterface
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   private $currentPath;
 
   /**
    * The event.
    *
-   * @var \Symfony\Component\HttpKernel\Event\FilterResponseEvent
+   * @var ResponseEvent
    */
   private $event;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;
 
   /**
    * The language negotiator.
    *
-   * @var \Drupal\language\LanguageNegotiatorInterface
+   * @var LanguageNegotiatorInterface
    */
   private $languageNegotiator;
 
   /**
    * The Language Selection Page condition plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   private $languageSelectionPageConditionManager;
 
   /**
    * Constructs a new class object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\language\LanguageNegotiatorInterface $language_negotiator
+   * @param LanguageNegotiatorInterface $language_negotiator
    *   The language negotiator.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $plugin_manager
+   * @param ExecutableManagerInterface $plugin_manager
    *   The language selection page condition plugin manager.
    */
   public function __construct(LanguageManagerInterface $language_manager, ConfigFactoryInterface $config_factory, LanguageNegotiatorInterface $language_negotiator, CurrentPathStack $current_path, ExecutableManagerInterface $plugin_manager) {
@@ -102,13 +102,13 @@ final class LanguageSelectionPageSubscriber implements EventSubscriberInterface
   /**
    * Event callback.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event object.
    *
    * @return bool
    *   Returns FALSE.
    */
-  public function redirectToLanguageSelectionPage(FilterResponseEvent $event) {
+  public function redirectToLanguageSelectionPage(ResponseEvent $event) {
     $this->event = $event;
     $config = $this->configFactory->get('language_selection_page.negotiation');
 
diff --git a/src/Form/NegotiationLanguageSelectionPageForm.php b/src/Form/NegotiationLanguageSelectionPageForm.php
index 787b285..60110eb 100644
--- a/src/Form/NegotiationLanguageSelectionPageForm.php
+++ b/src/Form/NegotiationLanguageSelectionPageForm.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\language_selection_page\Form;
 
+use Drupal\Core\Config\Config;
+use Drupal\language_selection_page\LanguageSelectionPageConditionInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -18,21 +20,21 @@ final class NegotiationLanguageSelectionPageForm extends ConfigFormBase implemen
   /**
    * The variable containing the conditions configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The Language Selection Page condition plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $languageSelectionPageConditionManager;
 
   /**
    * NegotiationLanguageSelectionPageForm constructor.
    *
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $plugin_manager
+   * @param ExecutableManagerInterface $plugin_manager
    *   The plugin manager.
    */
   public function __construct(ExecutableManagerInterface $plugin_manager) {
@@ -91,7 +93,7 @@ final class NegotiationLanguageSelectionPageForm extends ConfigFormBase implemen
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\language_selection_page\LanguageSelectionPageConditionInterface $condition */
+    /** @var LanguageSelectionPageConditionInterface $condition */
     foreach ($form_state->get(['conditions']) as $condition) {
       $condition->submitConfigurationForm($form, $form_state);
 
@@ -107,7 +109,7 @@ final class NegotiationLanguageSelectionPageForm extends ConfigFormBase implemen
 
     $this->config->save();
 
-    /** @var \Drupal\language_selection_page\LanguageSelectionPageConditionInterface $condition */
+    /** @var LanguageSelectionPageConditionInterface $condition */
     foreach ($form_state->get(['conditions']) as $condition) {
       $condition->postConfigSave($form, $form_state);
     }
@@ -124,7 +126,7 @@ final class NegotiationLanguageSelectionPageForm extends ConfigFormBase implemen
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\language_selection_page\LanguageSelectionPageConditionInterface $condition */
+    /** @var LanguageSelectionPageConditionInterface $condition */
     foreach ($form_state->get(['conditions']) as $condition) {
       $condition->validateConfigurationForm($form, $form_state);
     }
diff --git a/src/LanguageSelectionPageConditionInterface.php b/src/LanguageSelectionPageConditionInterface.php
index b02a6a2..64948cc 100644
--- a/src/LanguageSelectionPageConditionInterface.php
+++ b/src/LanguageSelectionPageConditionInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\language_selection_page;
 
+use Symfony\Component\HttpFoundation\Response;
 use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -25,10 +26,10 @@ interface LanguageSelectionPageConditionInterface extends ConditionInterface {
   /**
    * Alter the page response.
    *
-   * @param array|\Symfony\Component\HttpFoundation\Response $content
+   * @param array|Response $content
    *   The render array or a response.
    *
-   * @return array|\Symfony\Component\HttpFoundation\Response
+   * @return array|Response
    *   Returns a render array or a response.
    */
   public function alterPageResponse(&$content = []);
@@ -98,7 +99,7 @@ interface LanguageSelectionPageConditionInterface extends ConditionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormState object.
    */
   public function postConfigSave(array &$form, FormStateInterface $form_state);
diff --git a/src/LanguageSelectionPageConditionManager.php b/src/LanguageSelectionPageConditionManager.php
index a8c9972..48349f8 100644
--- a/src/LanguageSelectionPageConditionManager.php
+++ b/src/LanguageSelectionPageConditionManager.php
@@ -21,9 +21,9 @@ final class LanguageSelectionPageConditionManager extends DefaultPluginManager i
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   An object that implements CacheBackendInterface.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   An object that implements ModuleHandlerInterface.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Block/LanguageSelectionPageBlock.php b/src/Plugin/Block/LanguageSelectionPageBlock.php
index b347318..401f696 100644
--- a/src/Plugin/Block/LanguageSelectionPageBlock.php
+++ b/src/Plugin/Block/LanguageSelectionPageBlock.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\language_selection_page\Plugin\Block;
 
+use Drupal\Core\Executable\ExecutableInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -27,21 +28,21 @@ final class LanguageSelectionPageBlock extends BlockBase implements ContainerFac
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Language Selection Page condition plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $languageSelectionPageConditionManager;
 
   /**
    * The page controller.
    *
-   * @var \Drupal\language_selection_page\Controller\LanguageSelectionPageController
+   * @var LanguageSelectionPageController
    */
   protected $pageController;
 
@@ -54,11 +55,11 @@ final class LanguageSelectionPageBlock extends BlockBase implements ContainerFac
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $plugin_manager
+   * @param ExecutableManagerInterface $plugin_manager
    *   The language selection page condition plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\language_selection_page\Controller\LanguageSelectionPageController $page_controller
+   * @param LanguageSelectionPageController $page_controller
    *   The page controller.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ExecutableManagerInterface $plugin_manager, ConfigFactoryInterface $config_factory, LanguageSelectionPageController $page_controller) {
@@ -109,7 +110,7 @@ final class LanguageSelectionPageBlock extends BlockBase implements ContainerFac
     });
 
     foreach ($defs as $def) {
-      /** @var \Drupal\Core\Executable\ExecutableInterface $condition_plugin */
+      /** @var ExecutableInterface $condition_plugin */
       $condition_plugin = $manager->createInstance($def['id'], $config->get());
 
       if (!$manager->execute($condition_plugin)) {
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionBlacklistedPaths.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionBlacklistedPaths.php
index c41ace3..1c63dd4 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionBlacklistedPaths.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionBlacklistedPaths.php
@@ -29,41 +29,41 @@ final class LanguageSelectionPageConditionBlacklistedPaths extends LanguageSelec
   /**
    * An alias manager to find the alias for the current system path.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a RequestPath condition plugin.
    *
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   An alias manager to find the alias for the current system path.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionIgnoreNeutral.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionIgnoreNeutral.php
index 6985c4a..de6bc9b 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionIgnoreNeutral.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionIgnoreNeutral.php
@@ -27,14 +27,14 @@ final class LanguageSelectionPageConditionIgnoreNeutral extends LanguageSelectio
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * LanguageSelectionPageConditionIgnoreNeutral constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The Route Match object.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionLanguagePrefixes.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionLanguagePrefixes.php
index 318ed1d..8ddbf17 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionLanguagePrefixes.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionLanguagePrefixes.php
@@ -29,23 +29,23 @@ final class LanguageSelectionPageConditionLanguagePrefixes extends LanguageSelec
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a LanguageSelectionPageConditionLanguagePrefixes plugin.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionMethodIsValid.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionMethodIsValid.php
index afff5f4..c5564af 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionMethodIsValid.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionMethodIsValid.php
@@ -28,23 +28,23 @@ final class LanguageSelectionPageConditionMethodIsValid extends LanguageSelectio
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The current path.
    *
-   * @var \Drupal\language\LanguageNegotiatorInterface
+   * @var LanguageNegotiatorInterface
    */
   protected $languageNegotiator;
 
   /**
    * Constructs a LanguageCookieConditionPath plugin.
    *
-   * @param \Drupal\language\LanguageNegotiatorInterface $language_negotiator
+   * @param LanguageNegotiatorInterface $language_negotiator
    *   The language negotiator.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPath.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPath.php
index 82dfb9d..7200eb4 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPath.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPath.php
@@ -33,77 +33,77 @@ final class LanguageSelectionPageConditionPath extends LanguageSelectionPageCond
   /**
    * An alias manager to find the alias for the current system path.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The instantiated Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheConfig;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The Drupal messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * Constructs a LanguageSelectionPageConditionPath plugin.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_config
+   * @param CacheBackendInterface $cache_config
    *   A cache backend used to store configuration.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The drupal messenger.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPathIsValid.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPathIsValid.php
index e51b1e0..7e7e3cc 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPathIsValid.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionPathIsValid.php
@@ -27,32 +27,32 @@ final class LanguageSelectionPageConditionPathIsValid extends LanguageSelectionP
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a LanguageSelectionPageConditionPath plugin.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionType.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionType.php
index e7b084c..4f72482 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionType.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionType.php
@@ -30,41 +30,41 @@ final class LanguageSelectionPageConditionType extends LanguageSelectionPageCond
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
 
   /**
    * The main content renderer.
    *
-   * @var \Drupal\Core\Render\MainContent\MainContentRendererInterface
+   * @var MainContentRendererInterface
    */
   protected $mainContentRenderer;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a LanguageSelectionPageConditionType plugin.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route_match
+   * @param RouteMatchInterface $current_route_match
    *   The route match service.
-   * @param \Drupal\Core\Render\MainContent\MainContentRendererInterface $main_content_renderer
+   * @param MainContentRendererInterface $main_content_renderer
    *   The main content renderer service.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionXMLHTTPRequest.php b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionXMLHTTPRequest.php
index aa1fdab..27c1b7f 100644
--- a/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionXMLHTTPRequest.php
+++ b/src/Plugin/LanguageSelectionPageCondition/LanguageSelectionPageConditionXMLHTTPRequest.php
@@ -25,14 +25,14 @@ final class LanguageSelectionPageConditionXMLHTTPRequest extends LanguageSelecti
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a LanguageSelectionPageConditionPath plugin.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Routing/LanguageSelectionPageRouteController.php b/src/Routing/LanguageSelectionPageRouteController.php
index 56ac4d3..2ab7e6c 100644
--- a/src/Routing/LanguageSelectionPageRouteController.php
+++ b/src/Routing/LanguageSelectionPageRouteController.php
@@ -17,14 +17,14 @@ final class LanguageSelectionPageRouteController implements ContainerInjectionIn
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * NegotiationLanguageSelectionPageForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/tests/src/Functional/LanguageSelectionPageConditionTest.php b/tests/src/Functional/LanguageSelectionPageConditionTest.php
index 20e49ca..2ce0715 100644
--- a/tests/src/Functional/LanguageSelectionPageConditionTest.php
+++ b/tests/src/Functional/LanguageSelectionPageConditionTest.php
@@ -52,23 +52,26 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('search_form_block', ['label' => 'Search']);
     $admin = $this->drupalCreateUser([], NULL, TRUE);
     $this->drupalLogin($admin);
     $this->drupalCreateContentType(['type' => 'page']);
+    $this->drupalGet('admin/config/regional/language/add');
     // Create FR.
-    $this->drupalPostForm('admin/config/regional/language/add', [
+    $this->submitForm([
       'predefined_langcode' => 'fr',
     ], 'Add language');
+    $this->drupalGet('admin/config/regional/language/detection/url');
     // Set prefixes to en and fr.
-    $this->drupalPostForm('admin/config/regional/language/detection/url', [
+    $this->submitForm([
       'prefix[en]' => 'en',
       'prefix[fr]' => 'fr',
     ], 'Save configuration');
+    $this->drupalGet('admin/config/regional/language/detection');
     // Set up URL and language selection page methods.
-    $this->drupalPostForm('admin/config/regional/language/detection', [
+    $this->submitForm([
       'language_interface[enabled][language-selection-page]' => 1,
       'language_interface[enabled][language-url]' => 1,
     ], 'Save settings');
@@ -108,46 +111,44 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
 
     // Add node to blacklisted paths.
     $blacklisted_paths = '/admin/*' . \PHP_EOL . '/node/' . $node->id();
-    $this->drupalPostForm(
-      'admin/config/regional/language/detection/language_selection_page',
-      [
-        'blacklisted_paths' => $blacklisted_paths,
-      ],
-      'Save configuration'
-    );
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm([
+      'blacklisted_paths' => $blacklisted_paths,
+    ], 'Save configuration');
 
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageNotLoaded();
 
     // Add node to blacklisted paths (in the middle).
     $blacklisted_paths = '/admin/*' . \PHP_EOL . '/node/' . $node->id() . \PHP_EOL . '/bar';
-    $this->drupalPostForm(
-      'admin/config/regional/language/detection/language_selection_page',
-      [
-        'blacklisted_paths' => $blacklisted_paths,
-      ],
-      'Save configuration'
-    );
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm([
+      'blacklisted_paths' => $blacklisted_paths,
+    ], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     // @todo fix this test
     $this->assertLanguageSelectionPageNotLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Add string that contains node, but not node itself.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar' . \PHP_EOL . '/bar'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar' . \PHP_EOL . '/bar'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Add string that starts with node, but not node itself.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*' . \PHP_EOL . '/node/' . $node->id() . '/foobar'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Test front page.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*'], 'Save configuration');
     $this->drupalGet('<front>');
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('en/admin/config/regional/language/detection/language_selection_page');
 
-    $this->drupalPostForm('en/admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => '/admin/*' . \PHP_EOL . '<front>'], 'Save configuration');
+    $this->submitForm(['blacklisted_paths' => '/admin/*' . \PHP_EOL . '<front>'], 'Save configuration');
     $this->drupalGet('<front>');
     $this->assertLanguageSelectionPageNotLoaded();
 
@@ -161,9 +162,10 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $node = $this->drupalCreateNode();
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/url');
 
     // Set prefixes to fr only.
-    $this->drupalPostForm('admin/config/regional/language/detection/url', [
+    $this->submitForm([
       'prefix[en]' => '',
       'prefix[fr]' => 'fr',
     ], 'Save configuration');
@@ -173,7 +175,8 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     // Look for "You should add a path prefix to English language if you want
     // to have it enabled in the Language Selection Page.".
     $this->assertSession()->pageTextContains('language if you want to have it enabled in the Language Selection Page');
-    $this->drupalPostForm('admin/config/regional/language/detection/url', [
+    $this->drupalGet('admin/config/regional/language/detection/url');
+    $this->submitForm([
       'prefix[en]' => 'en',
       'prefix[fr]' => 'fr',
     ], 'Save configuration');
@@ -187,8 +190,9 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
    * Test the "ignore language neutral" condition.
    */
   public function testIgnoreLanguageNeutral() {
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
     // Enable ignore language paths.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['ignore_neutral' => 1], 'Save configuration');
+    $this->submitForm(['ignore_neutral' => 1], 'Save configuration');
 
     // Create translatable node.
     $translatable_node1 = $this->drupalCreateNode(['langcode' => 'fr']);
@@ -212,9 +216,10 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $this->assertLanguageSelectionPageNotLoaded();
     // Turn on translatability of the content type.
     $this->drupalPostform('admin/structure/types/manage/page', ['language_configuration[content_translation]' => 1], 'Save content type');
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
     // Disable ignore language paths.
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['ignore_neutral' => 0], 'Save configuration');
+    $this->submitForm(['ignore_neutral' => 0], 'Save configuration');
     $this->drupalGet('node/' . $untranslatable_node1->id());
     $this->assertLanguageSelectionPageLoaded();
 
@@ -241,10 +246,11 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
       'language-user',
       'language-user-admin',
     ], array_keys($definitions));
+    $this->drupalGet('admin/config/regional/language/detection');
 
     // Configure the test negotiator to come before the language selection
     // page and disable the URL negotiator.
-    $this->drupalPostForm('admin/config/regional/language/detection', [
+    $this->submitForm([
       'language_interface[enabled][language-selection-page-test-negotiator]' => 1,
       'language_interface[weight][language-selection-page-test-negotiator]' => -10,
       'language_interface[enabled][language-selection-page]' => 1,
@@ -270,7 +276,8 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
    */
   public function testPageTitle() {
     $title = 'adJKFD#@H5864193177';
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['title' => $title], 'Save configuration');
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm(['title' => $title], 'Save configuration');
     $node = $this->drupalCreateNode();
 
     $this->drupalGet('node/' . $node->id());
@@ -287,8 +294,9 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $node = $this->drupalCreateNode();
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['path' => '/test'], 'Save configuration');
+    $this->submitForm(['path' => '/test'], 'Save configuration');
     // @todo uncomment and fix
     /*
     $this->drupalGet('node/' . $node->id());
@@ -316,13 +324,15 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
     $node = $this->drupalCreateNode();
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
 
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['type' => 'block'], 'Save configuration');
+    $this->submitForm(['type' => 'block'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageNotLoaded();
     $this->assertSession()->pageTextNotContains('Language Selection Page block');
+    $this->drupalGet('admin/structure/block/add/language-selection-page/stark');
 
-    $this->drupalPostForm('admin/structure/block/add/language-selection-page/stark', ['region' => 'content'], 'Save block');
+    $this->submitForm(['region' => 'content'], 'Save block');
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->pageTextContains('Language Selection Page block');
     $this->assertLanguageSelectionPageLoaded();
@@ -334,20 +344,23 @@ final class LanguageSelectionPageConditionTest extends BrowserTestBase {
       '/admin*',
       '/node/' . $node->id(),
     ]);
-    $this->drupalPostForm('admin/config/regional/language/detection/language_selection_page', ['blacklisted_paths' => $blacklisted_paths], 'Save configuration');
+    $this->drupalGet('admin/config/regional/language/detection/language_selection_page');
+    $this->submitForm(['blacklisted_paths' => $blacklisted_paths], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->pageTextNotContains('Language Selection Page block');
     $this->assertLanguageSelectionPageNotLoaded();
     $this->resetConfiguration();
+    $this->drupalGet('en/admin/config/regional/language/detection/language_selection_page');
 
     // Test template only.
-    $this->drupalPostForm('en/admin/config/regional/language/detection/language_selection_page', ['type' => 'standalone'], 'Save configuration');
+    $this->submitForm(['type' => 'standalone'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
     $this->assertSession()->responseNotContains('<h2>Search</h2>');
+    $this->drupalGet('en/admin/config/regional/language/detection/language_selection_page');
 
     // Test template in theme.
-    $this->drupalPostForm('en/admin/config/regional/language/detection/language_selection_page', ['type' => 'embedded'], 'Save configuration');
+    $this->submitForm(['type' => 'embedded'], 'Save configuration');
     $this->drupalGet('node/' . $node->id());
     $this->assertLanguageSelectionPageLoaded();
     $this->assertSession()->responseContains('<h2>Search</h2>');
