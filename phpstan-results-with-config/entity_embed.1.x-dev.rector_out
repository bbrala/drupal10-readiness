modules/contrib/entity_embed/entity_embed.api.php
modules/contrib/entity_embed/entity_embed.install
modules/contrib/entity_embed/entity_embed.module
modules/contrib/entity_embed/src/Annotation/EntityEmbedDisplay.php
modules/contrib/entity_embed/src/Entity/EntityEmbedFakeEntity.php
modules/contrib/entity_embed/src/EntityEmbedBuilder.php
modules/contrib/entity_embed/src/EntityEmbedBuilderInterface.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayBase.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayInterface.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayManager.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/FieldFormatterEntityEmbedDisplayBase.php
modules/contrib/entity_embed/src/Exception/EntityNotFoundException.php
modules/contrib/entity_embed/src/Exception/RecursiveRenderingException.php
modules/contrib/entity_embed/src/Form/EntityEmbedDialog.php
modules/contrib/entity_embed/src/Plugin/CKEditorPlugin/DrupalEntity.php
modules/contrib/entity_embed/src/Plugin/Derivative/FieldFormatterDeriver.php
modules/contrib/entity_embed/src/Plugin/Derivative/ViewModeDeriver.php
modules/contrib/entity_embed/src/Plugin/EmbedType/Entity.php
modules/contrib/entity_embed/src/Plugin/Filter/EntityEmbedFilter.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/EntityReferenceFieldFormatter.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/FileFieldFormatter.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/ImageFieldFormatter.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImageDecorator.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/ViewModeFieldFormatter.php
modules/contrib/entity_embed/src/Twig/EntityEmbedTwigExtension.php
modules/contrib/entity_embed/tests/fixtures/update/entity_embed.update-hook-test.php
modules/contrib/entity_embed/tests/modules/entity_embed_test/entity_embed_test.module
modules/contrib/entity_embed/tests/modules/entity_embed_test/src/EntityEmbedTestTwigController.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedDialogTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedDisplayManagerTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedEntityBrowserTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedHooksTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTestBase.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTwigTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedUpdateHookTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityReferenceFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/Functional/FileFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/Functional/ImageFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/Functional/RecursionProtectionTest.php
modules/contrib/entity_embed/tests/src/Functional/ViewModeFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ButtonAdminTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ConfigurationUiTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ContentTranslationTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/EntityEmbedDialogTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/EntityEmbedTestBase.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ImageFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/MediaImageTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/SortableTestTrait.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterDisabledIntegrationsTest.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterLegacyTest.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterOverridesTest.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTest.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTestBase.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTranslationTest.php

39 files with changes
=====================

1) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTranslationTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     ConfigurableLanguage::createFromLangcode('pt-br')->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\Kernel;

+use Drupal\node\NodeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
@@ @@
   /**
    * The sample Node entity to embed.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $embeddedEntity;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('node', 'node_access');
@@ @@
    * @param string $langcode
    *   The language code of the text to be filtered.
    *
-   * @return \Drupal\filter\FilterProcessResult
+   * @return FilterProcessResult
    *   The filtered text, wrapped in a FilterProcessResult object, and possibly
    *   with associated assets, cacheability metadata and placeholders.
    *
@@ @@
    *   (optional) The filter plugin IDs to apply to the given text, in the order
    *   they are being requested to be executed.
    *
-   * @return \Drupal\filter\FilterProcessResult
+   * @return FilterProcessResult
    *   The filtered text, wrapped in a FilterProcessResult object, and possibly
    *   with associated assets, cacheability metadata and placeholders.
    *
@@ @@
     }

     $render_context = new RenderContext();
-    /** @var \Drupal\filter\FilterProcessResult $filter_result */
+    /** @var FilterProcessResult $filter_result */
     $filter_result = $this->container->get('renderer')->executeInRenderContext($render_context, function () use ($text, $filters, $langcode) {
       $metadata = new BubbleableMetadata();
       foreach ($filters as $filter) {
-        /** @var \Drupal\filter\FilterProcessResult $result */
+        /** @var FilterProcessResult $result */
         $result = $filter->process($text, $langcode);
         $metadata = $metadata->merge($result);
         $text = $result->getProcessedText();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig('system');
@@ @@
     $this->assertNotEmpty($deleted_embed_warning);
     $this->assertHasAttributes($deleted_embed_warning[0], [
       'alt' => $expected_missing_text,
-      'src' => file_url_transform_relative(file_create_url('core/modules/media/images/icons/no-thumbnail.png')),
+      'src' => \Drupal::service('file_url_generator')->generateString('core/modules/media/images/icons/no-thumbnail.png'),
       'title' => $expected_missing_text,
     ]);
   }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterOverridesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\Kernel;

+use Drupal\file\FileInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
@@ @@
   /**
    * The image file to use in tests.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $image;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('file', ['file_usage']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterLegacyTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig('system');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterDisabledIntegrationsTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig('system');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_embed/tests/src/FunctionalJavascript/MediaImageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\media\MediaInterface;
+use Drupal\node\NodeInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Component\Utility\Html;
 use Drupal\editor\Entity\Editor;
 use Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay\MediaImageDecorator;
@@ @@
   /**
    * The user to use during testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The sample Media entity to embed.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   protected $media;

@@ @@
   /**
    * A host entity with a body field to embed media in.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $host;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Note that media_install() grants 'view media' to all users by default.
@@ @@

   /**
    * Tests linkability of the CKEditor widget when `drupalimage` is disabled.
+   * @doesNotPerformAssertions
    */
   public function testCkeditorWidgetIsLinkableWhenDrupalImageIsAbsent() {
     // Remove the `drupalimage` plugin's `DrupalImage` button.
@@ @@
    * @param string $text
    *   The title attribute of the link to click.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function clickPathLinkByTitleAttribute($text) {
     $this->getSession()->switchToIFrame();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ImageFieldFormatterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\FunctionalJavascript;

+use Drupal\embed\Entity\EmbedButton;
+use Drupal\user\UserInterface;
+use Drupal\file\FileInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;
@@ @@
   /**
    * The test button.
    *
-   * @var Drupal\embed\Entity\EmbedButton
+   * @var EmbedButton
    */
   protected $button;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $image;

@@ @@
   /**
    * File created with invalid image.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $invalidImage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->button = $this->container->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_embed/tests/src/FunctionalJavascript/EntityEmbedDialogTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;

@@ @@
   /**
    * The test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * A test node to be used for embedding.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a page content type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ContentTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
@@ @@
   /**
    * The 'translator' user to use during testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $translator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->translator = $this->drupalCreateUser([
@@ @@
     $node_fr->save();

     \Drupal::service('file_system')->copy($this->root . '/core/misc/druplicon.png', 'public://Smeagol.jpg');
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create([
       'uri' => 'public://Smeagol.jpg',
       'uid' => $this->translator->id(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ConfigurationUiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\FunctionalJavascript;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $format = FilterFormat::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_embed/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A test node to be used for embedding.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->button = $this->container->get('entity_type.manager')
@@ @@
    * @param array $not_contains
    *   The strings the CKEditor instance is expected to not contain.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
    */
   protected function assertCkeditorUndoOrRedo($action, array $contains, array $not_contains) {
     if ($action !== 'undo' && $action !== 'redo') {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ButtonAdminTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;

@@ @@
   /**
    * The user to use during testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->container
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_embed/tests/src/Functional/ImageFieldFormatterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\Functional;

+use Drupal\file\FileInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Form\FormState;

@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $image;

@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->image = $this->getTestFile('image');
     $this->file = $this->getTestFile('text');
@@ @@
     // when embed is successful.
     $this->assertSession()->responseContains($alt_text);
     $this->assertSession()->responseNotContains('This placeholder should not be rendered.');
-    $this->assertSession()->linkByHrefExists(file_url_transform_relative(file_create_url($this->image->getFileUri())), 0, 'Link to the embedded image exists.');
+    $this->assertSession()->linkByHrefExists(\Drupal::service('file_url_generator')->generateString($this->image->getFileUri()), 0, 'Link to the embedded image exists.');

     // Embed all three field types in one, to ensure they all render correctly.
     $content = '<drupal-entity data-entity-type="node" data-entity-uuid="' . $this->node->uuid() . '" data-entity-embed-display="entity_reference:entity_reference_label"></drupal-entity>';
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_embed/tests/src/Functional/FileFieldFormatterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\Functional;

+use Drupal\file\FileInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Form\FormState;

@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->file = $this->getTestFile('text');
   }
@@ @@
     // Verify description of the embedded file exists in page.
     $this->assertSession()->responseContains($embed_settings['description']);
     $this->assertSession()->responseNotContains('This placeholder should not be rendered.');
-    $this->assertSession()->linkByHrefExists(file_url_transform_relative(file_create_url($this->file->getFileUri())), 0, 'Link to the embedded file exists.');
+    $this->assertSession()->linkByHrefExists(\Drupal::service('file_url_generator')->generateString($this->file->getFileUri()), 0, 'Link to the embedded file exists.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_embed/tests/src/Functional/EntityReferenceFieldFormatterTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a new menu entity which does not has a view controller.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedUpdateHookTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $button = $this->container
       ->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTwigTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     \Drupal::service('theme_installer')->install(['test_theme']);
   }
@@ @@
   public function testEntityEmbedTwigFunction() {
     // Test embedding a node using entity ID.
     $this->drupalGet('entity_embed_twig_test/id');
-    $this->assertText($this->node->body->value, 'Embedded node exists in page');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->node->body->value);

     // Test 'Label' Entity Embed Display plugin.
     $this->drupalGet('entity_embed_twig_test/label_plugin');
-    $this->assertText($this->node->title->value, 'Title of the embedded node exists in page.');
-    $this->assertNoText($this->node->body->value, 'Body of embedded node does not exists in page when "Label" plugin is used.');
-    $this->assertLinkByHref('node/' . $this->node->id(), 0, 'Link to the embedded node exists when "Label" plugin is used.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->node->title->value);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->node->body->value);
+    $this->assertSession()->linkByHrefExists('node/' . $this->node->id(), 0, 'Link to the embedded node exists when "Label" plugin is used.');

     // Test 'Label' Entity Embed Display plugin without linking to the node.
     $this->drupalGet('entity_embed_twig_test/label_plugin_no_link');
-    $this->assertText($this->node->title->value, 'Title of the embedded node exists in page.');
-    $this->assertNoText($this->node->body->value, 'Body of embedded node does not exists in page when "Label" plugin is used.');
-    $this->assertNoLinkByHref('node/' . $this->node->id(), 0, 'Link to the embedded node does not exists.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->node->title->value);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->node->body->value);
+    $this->assertSession()->linkByHrefNotExists('node/' . $this->node->id(), 0, 'Link to the embedded node does not exists.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertNoLinkByHrefRector
 * AssertNoTextRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * The test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * A test node to be used for embedding.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a page content type.
@@ @@
   /**
    * Retrieves a sample file of the specified type.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The test file created.
    */
   protected function getTestFile($type_name, $size = NULL) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedHooksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\Functional;

+use Drupal\Core\State\StateInterface;
 /**
  * Tests the hooks provided by entity_embed module.
  *
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->state = $this->container->get('state');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedDisplayManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_embed\Functional;

+use Drupal\embed\Entity\EmbedButton;
+use Drupal\file\FileInterface;
+use Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The test button that embeds image files.
    *
-   * @var \Drupal\embed\Entity\EmbedButton
+   * @var EmbedButton
    */
   protected $imageButton;

@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $image;

@@ @@
   /**
    * File created with invalid image.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $invalidImage;

@@ @@
   /**
    * The EntityEmbedDisplay plugin manager.
    *
-   * @var \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager
+   * @var EntityEmbedDisplayManager
    */
   protected $entityEmbedDisplayManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->imageButton = $this->container->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_embed/src/Twig/EntityEmbedTwigExtension.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity embed builder service.
    *
-   * @var \Drupal\entity_embed\EntityEmbedBuilderInterface
+   * @var EntityEmbedBuilderInterface
    */
   protected $builder;

@@ @@
   /**
    * Constructs a new EntityEmbedTwigExtension.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_embed\EntityEmbedBuilderInterface $builder
+   * @param EntityEmbedBuilderInterface $builder
    *   The Entity embed builder service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityEmbedBuilderInterface $builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImageDecorator.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated EntityEmbedDisplay class.
    *
-   * @var \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayInterface
+   * @var EntityEmbedDisplayInterface
    */
   private $decorated;

@@ @@
   /**
    * MediaImageDecorator constructor.
    *
-   * @param \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayInterface $decorated
+   * @param EntityEmbedDisplayInterface $decorated
    *   The decorated EntityEmbedDisplay plugin.
    */
   public function __construct(EntityEmbedDisplayInterface $decorated) {
@@ @@
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = $this->decorated->buildConfigurationForm($form, $form_state);

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->decorated->getEntityFromContext();

     if ($image_field = $this->getMediaImageSourceField($entity)) {
@@ @@
    * {@inheritdoc}
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->decorated->getEntityFromContext();
     if ($image_field = $this->getMediaImageSourceField($entity)) {
       $settings = $entity->{$image_field}->getItemDefinition()->getSettings();
@@ @@
   public function build() {
     $build = $this->decorated->build();

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->decorated->getEntityFromContext();

     if ($image_field = $this->getMediaImageSourceField($entity)) {
@@ @@
   /**
    * Get image field from source config.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Embedded entity.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/ImageFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay;

+use Drupal\file\FileInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FormatterPluginManager;
@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Checks if the image is valid.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Returns the access result.
    */
   protected function isValidImage() {
@@ @@

     // @todo needs cacheability metadata for getEntityFromContext.
     // @see \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayBase::getEntityFromContext()
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     if ($entity = $this->getEntityFromContext()) {
       // Loading large files is slow, make sure it is an image mime type before
       // doing that.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/EntityReferenceFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
       return $build;
     }

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getEntityFromContext();

     // There are a few concerns when rendering an embedded media entity:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/entity_embed/src/Plugin/Filter/EntityEmbedFilter.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity embed builder service.
    *
-   * @var \Drupal\entity_embed\EntityEmbedBuilderInterface
+   * @var EntityEmbedBuilderInterface
    */
   protected $builder;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\entity_embed\EntityEmbedBuilderInterface $builder
+   * @param EntityEmbedBuilderInterface $builder
    *   The entity embed builder service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, EntityEmbedBuilderInterface $builder, LoggerChannelFactoryInterface $logger_factory) {
@@ @@
           }
           if (!$entity instanceof EntityInterface) {
             $missing_text = $this->t('Missing @type.', ['@type' => $this->entityTypeManager->getDefinition($entity_type)->getSingularLabel()]);
-            $entity_output = '<img src="' . file_url_transform_relative(file_create_url('core/modules/media/images/icons/no-thumbnail.png')) . '" width="180" height="180" alt="' . $missing_text . '" title="' . $missing_text . '"/>';
+            $entity_output = '<img src="' . \Drupal::service('file_url_generator')->generateString('core/modules/media/images/icons/no-thumbnail.png') . '" width="180" height="180" alt="' . $missing_text . '" title="' . $missing_text . '"/>';
             throw new EntityNotFoundException(sprintf('Unable to load embedded %s entity %s.', $entity_type, $id));
           }
         }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/entity_embed/src/Plugin/EmbedType/Entity.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type repository service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The Entity Embed Display plugin manager.
    *
-   * @var \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager
+   * @var EntityEmbedDisplayManager
    */
   protected $displayPluginManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager $display_plugin_manager
+   * @param EntityEmbedDisplayManager $display_plugin_manager
    *   The plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeRepositoryInterface $entity_type_repository, EntityTypeBundleInfoInterface $bundle_info, EntityEmbedDisplayManager $display_plugin_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultIconUrl() {
-    return file_create_url(drupal_get_path('module', 'entity_embed') . '/js/plugins/drupalentity/entity.png');
+    return \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('entity_embed') . '/js/plugins/drupalentity/entity.png');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/entity_embed/src/Plugin/Derivative/ViewModeDeriver.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a ViewModeDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
    */
   public function __construct(EntityDisplayRepositoryInterface $entity_display_repository, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/entity_embed/src/Plugin/Derivative/FieldFormatterDeriver.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The manager for formatter plugins.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $formatterManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs new FieldFormatterEntityEmbedDisplayBase.
    *
-   * @param \Drupal\Core\Field\FormatterPluginManager $formatter_manager
+   * @param FormatterPluginManager $formatter_manager
    *   The field formatter plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
    */
   public function __construct(FormatterPluginManager $formatter_manager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_embed/src/Form/EntityEmbedDialog.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed\Form;

+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
@@ @@
   /**
    * The entity embed display manager.
    *
-   * @var \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager
+   * @var EntityEmbedDisplayManager
    */
   protected $entityEmbedDisplayManager;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a EntityEmbedDialog object.
    *
-   * @param \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager $entity_embed_display_manager
+   * @param EntityEmbedDisplayManager $entity_embed_display_manager
    *   The Module Handler.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The Form Builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityEmbedDisplayManager $entity_embed_display_manager, FormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler) {
@@ @@
    *   An array of HTML attributes, including at least `data-entity-type` and
    *   `data-entity-uuid`, and optionally `data-langcode`.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The requested entity, or NULL.
    */
   protected function loadEntityByAttributes(array $attributes) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor to which this dialog corresponds.
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The URL button to which this dialog corresponds.
    */
   public function buildForm(array $form, FormStateInterface $form_state, EditorInterface $editor = NULL, EmbedButtonInterface $embed_button = NULL) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
     // Entity element is calculated on every AJAX request/submit.
     // See self::buildForm().
     $entity_element = $form_state->get('entity_element');
-    /** @var \Drupal\embed\EmbedButtonInterface $embed_button */
+    /** @var EmbedButtonInterface $embed_button */
     $embed_button = $form_state->get('embed_button');
     $entity = $form_state->get('entity');

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *   The form structure.
    */
   public function buildReviewStep(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $form_state->get('entity');

     $form['#title'] = $this->t('Review selected @type', ['@type' => $entity->getEntityType()->getSingularLabel()]);
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
     // Entity element is calculated on every AJAX request/submit.
     // See self::buildForm().
     $entity_element = $form_state->get('entity_element');
-    /** @var \Drupal\embed\EmbedButtonInterface $embed_button */
+    /** @var EmbedButtonInterface $embed_button */
     $embed_button = $form_state->get('embed_button');
-    /** @var \Drupal\editor\EditorInterface $editor */
+    /** @var EditorInterface $editor */
     $editor = $form_state->get('editor');
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $form_state->get('entity');
     $values = $form_state->getValues();

@@ @@
         $entity_label = $entity->toLink($entity->label(), 'canonical', $options)->toString();
       }
       elseif ($entity->getEntityTypeId() == 'file') {
-        $entity_label = '<a href="' . file_create_url($entity->getFileUri()) . '" target="_blank">' . $entity->label() . '</a>';
+        $entity_label = '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($entity->getFileUri()) . '" target="_blank">' . $entity->label() . '</a>';
       }
       else {
         $entity_label = '<a href="' . $entity->toUrl()->toString() . '" target="_blank">' . $entity->label() . '</a>';
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateSelectStep(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateEmbedStep(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function updatePluginConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $step
    *   The next step name, such as 'select', 'review' or 'embed'.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitStep(array &$form, FormStateInterface $form_state, $step) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitSelectStep(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitAndShowSelect(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitAndShowReview(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitAndShowEmbed(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitEmbedStep(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Returns the allowed display plugins given an embed button and an entity.
    *
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The embed button.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ @@
   /**
    * Load the current entity browser and its settings from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function loadEntityBrowser(FormStateInterface $form_state) {
@@ @@
     $this->entityBrowser = NULL;
     $this->entityBrowserSettings = [];

-    /** @var \Drupal\embed\EmbedButtonInterface $embed_button */
+    /** @var EmbedButtonInterface $embed_button */
     $embed_button = $form_state->get('embed_button');

     if ($embed_button && $entity_browser_id = $embed_button->getTypePlugin()->getConfigurationValue('entity_browser')) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/entity_embed/src/EntityEmbedDisplay/FieldFormatterEntityEmbedDisplayBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed\EntityEmbedDisplay;

+use Drupal\Core\Field\FormatterInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
   /**
    * The field formatter plugin manager.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $formatterPluginManager;

@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager
+   * @var TypedDataManager
    */
   protected $typedDataManager;

@@ @@
   /**
    * The field definition.
    *
-   * @var \Drupal\Core\Field\BaseFieldDefinition
+   * @var BaseFieldDefinition
    */
   protected $fieldDefinition;

@@ @@
   /**
    * The field formatter.
    *
-   * @var \Drupal\Core\Field\FormatterInterface
+   * @var FormatterInterface
    */
   protected $fieldFormatter;

@@ @@
   /**
    * Get the FieldDefinition object required to render this field's formatter.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   The field definition.
    *
    * @see \Drupal\entity_embed\FieldFormatterEntityEmbedDisplayBase::build()
@@ @@
   /**
    * Checks if the field formatter is applicable.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Returns the access result.
    */
   protected function isApplicableFieldFormatter() {
@@ @@
   /**
    * Constructs a field formatter.
    *
-   * @return \Drupal\Core\Field\FormatterInterface
+   * @return FormatterInterface
    *   The formatter object.
    */
   public function getFieldFormatter() {
@@ @@
    * @param string $type
    *   The type of the field.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   A new field definition.
    */
   protected function createFieldDefinition($type) {
@@ @@
    * invoked via the constructor, and our services are injected after the
    * constructor are called.
    *
-   * @return \Drupal\Core\Field\FormatterPluginManager
+   * @return FormatterPluginManager
    */
   public function formatterPluginManager() {
     if (!isset($this->formatterPluginManager)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    * Provides a list of plugins that can be used for a certain entity and
    * filters out plugins that should be hidden in the UI.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed\EntityEmbedDisplay;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * This method allows base implementations to add general access restrictions
    * that should apply to all extending Entity Embed display plugins.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The user for which to check access, or NULL to check access
    *   for the current user. Defaults to NULL.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed\EntityEmbedDisplay;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ @@
    * on this, plus any of its subclasses. Right now, this is effectively a
    * global that breaks cacheability metadata.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity from the current context.
    */
   public function getEntityFromContext() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/entity_embed/src/EntityEmbedBuilderInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Builds the render array for an embedded entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be rendered.
    * @param array $context
    *   (optional) Array of context values, corresponding to the attributes on
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/entity_embed/src/EntityEmbedBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed;

+use Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayBase;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity embed display plugin manager service.
    *
-   * @var \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager
+   * @var EntityEmbedDisplayManager
    */
   protected $displayPluginManager;

@@ @@
   /**
    * Constructs a EntityEmbedBuilder object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayManager $display_manager
+   * @param EntityEmbedDisplayManager $display_manager
    *   The entity embed display plugin manager.
    */
   public function __construct(ModuleHandlerInterface $module_handler, EntityEmbedDisplayManager $display_manager) {
@@ @@
   /**
    * Builds the render array for an entity using an Entity Embed Display plugin.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be rendered.
    * @param string $plugin_id
    *   The Entity Embed Display plugin ID.
@@ @@
    */
   protected function buildEntityEmbedDisplayPlugin(EntityInterface $entity, $plugin_id, array $plugin_configuration = [], array $context = []) {
     // Build the Entity Embed Display plugin.
-    /** @var \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayBase $display */
+    /** @var EntityEmbedDisplayBase $display */
     $display = $this->displayPluginManager->createInstance($plugin_id, $plugin_configuration);
     $display->setContextValue('entity', $entity);
     $display->setAttributes($context);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/entity_embed/src/Annotation/EntityEmbedDisplay.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_embed\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the Entity Embed Display plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


38) modules/contrib/entity_embed/entity_embed.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\filter\Entity\FilterFormat;
+use Drupal\embed\Entity\EmbedButton;
 /**
  * @file
  * Framework for allowing entities to be embedded in CKEditor.
@@ @@
         }
       }

-      /** @var \Drupal\filter\Entity\FilterFormat $filter_format */
+      /** @var FilterFormat $filter_format */
       $filter_format = $form_state->getFormObject()->getEntity();

       $filter_html = $filter_format->filters()->get('filter_html');
@@ @@
         ->getStorage('embed_button')
         ->loadMultiple($buttons);

-      /** @var \Drupal\embed\Entity\EmbedButton $embed */
+      /** @var EmbedButton $embed */
       foreach ($embeds as $embed) {
         if ($embed->getTypeId() !== 'entity') {
           continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


39) modules/contrib/entity_embed/entity_embed.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Hooks provided by the Entity Embed module.
@@ @@
   $entity = $contexts['entity'];

   // For video and audio files, limit the available options to the media player.
-  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['audio', 'video'])) {
+  if ($entity instanceof FileInterface && in_array($entity->bundle(), ['audio', 'video'])) {
     $definitions = array_intersect_key($definitions, array_flip(['file:jwplayer_formatter']));
   }

   // For images, use the image formatter.
-  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['image'])) {
+  if ($entity instanceof FileInterface && in_array($entity->bundle(), ['image'])) {
     $definitions = array_intersect_key($definitions, array_flip(['image:image']));
   }

   // For nodes, use the default option.
-  if ($entity instanceof \Drupal\node\NodeInterface) {
+  if ($entity instanceof NodeInterface) {
     $definitions = array_intersect_key($definitions, array_flip(['entity_reference:entity_reference_entity_view']));
   }
 }
@@ @@
  *
  * @param array &$context
  *   The context array.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object.
  */
-function hook_entity_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_embed_context_alter(array &$context, EntityInterface $entity) {
   if (isset($context['overrides']) && is_array($context['overrides'])) {
     foreach ($context['overrides'] as $key => $value) {
       $entity->key = $value;
@@ @@
  *
  * @param array &$context
  *   The context array.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object.
  */
-function hook_ENTITY_TYPE_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_ENTITY_TYPE_embed_context_alter(array &$context, EntityInterface $entity) {
   if (isset($context['overrides']) && is_array($context['overrides'])) {
     foreach ($context['overrides'] as $key => $value) {
       $entity->key = $value;
@@ @@
  *
  * @param array &$build
  *   A renderable array representing the embedded entity content.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The embedded entity object.
  * @param array $context
  *   The context array.
  */
-function hook_entity_embed_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, array &$context) {
+function hook_entity_embed_alter(array &$build, EntityInterface $entity, array &$context) {
   // Remove the contextual links.
   if (isset($build['#contextual_links'])) {
     unset($build['#contextual_links']);
@@ @@
  *
  * @param array &$build
  *   A renderable array representing the embedded entity content.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The embedded entity object.
  * @param array $context
  *   The context array.
  */
-function hook_ENTITY_TYPE_embed_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, array &$context) {
+function hook_ENTITY_TYPE_embed_alter(array &$build, EntityInterface $entity, array &$context) {
   // Remove the contextual links.
   if (isset($build['#contextual_links'])) {
     unset($build['#contextual_links']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 39 files have been changed by Rector                                      

