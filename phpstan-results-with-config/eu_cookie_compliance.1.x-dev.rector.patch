diff --git a/eu_cookie_compliance.install b/eu_cookie_compliance.install
index a5d405b..5cafdf9 100644
--- a/eu_cookie_compliance.install
+++ b/eu_cookie_compliance.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\eu_cookie_compliance\CategoryStorageManager;
 /**
  * @file
  * Update scripts for the EU Cookie Compliance module.
@@ -600,7 +601,7 @@ function eu_cookie_compliance_update_8123(&$sandbox) {
   $fix_first_cookie_category = $config->get('fix_first_cookie_category');
   $select_all_categories_by_default = $config->get('select_all_categories_by_default');
   $languages = Drupal::languageManager()->getLanguages();
-  /** @var \Drupal\eu_cookie_compliance\CategoryStorageManager $storage */
+  /** @var CategoryStorageManager $storage */
   $storage = Drupal::entityTypeManager()->getStorage('cookie_category');
 
   $i = 0;
@@ -634,7 +635,7 @@ function eu_cookie_compliance_update_8123(&$sandbox) {
         ->getLanguageConfigOverride($langcode, 'eu_cookie_compliance.settings');
       $cookie_categories = $config_translation->get('cookie_categories');
       $cookie_categories = _eu_cookie_compliance_extract_category_key_label_description($cookie_categories);
-      /** @var \Drupal\eu_cookie_compliance\CategoryStorageManager $storage */
+      /** @var CategoryStorageManager $storage */
       $storage = Drupal::entityTypeManager()->getStorage('cookie_category');
 
       foreach ($cookie_categories as $machine_name => $category) {
diff --git a/eu_cookie_compliance.module b/eu_cookie_compliance.module
index 6270362..38c32fd 100644
--- a/eu_cookie_compliance.module
+++ b/eu_cookie_compliance.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Template\TwigEnvironment;
 /**
  * @file
  * The main file for the EU Cookie Compliance module.
@@ -181,7 +184,7 @@ function eu_cookie_compliance_page_attachments(&$variables) {
   if (!empty($config->get('disabled_javascripts'))) {
     if (is_readable($uri)) {
       if ((float) \Drupal::VERSION < 9.3) {
-        $url = file_url_transform_relative(file_create_url($uri));
+        $url = \Drupal::service('file_url_generator')->generateString($uri);
       }
       else {
         $url = \Drupal::service('file_url_generator')->generateString($uri);
@@ -289,8 +292,8 @@ function eu_cookie_compliance_page_attachments(&$variables) {
  * @return array
  *   The data needed for the cookie banner.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function eu_cookie_compliance_build_data() {
   $language = Drupal::languageManager()->getCurrentLanguage();
@@ -425,7 +428,7 @@ function eu_cookie_compliance_build_data() {
   $was_debugging = FALSE;
 
   /**
-   * @var Drupal\Core\Template\TwigEnvironment $twig_service
+   * @var TwigEnvironment $twig_service
    */
   $twig_service = Drupal::service('twig');
 
@@ -671,7 +674,7 @@ function _eu_cookie_compliance_extract_category_key_label_description($string) {
  */
 function eu_cookie_compliance_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if ($form_state->getFormObject() instanceof PersonalInformationFormInterface) {
-    /** @var \Drupal\eu_cookie_compliance\PersonalInformationFormInterface $form_object */
+    /** @var PersonalInformationFormInterface $form_object */
     $form_object = $form_state->getFormObject();
 
     $form_object->formInjectGdprCheckbox($form, $form_state);
@@ -684,7 +687,7 @@ function eu_cookie_compliance_form_alter(&$form, FormStateInterface $form_state,
  *
  * @param array $element
  *   Element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form State Interface.
  */
 function eu_cookie_compliance_validate_hex(array $element, FormStateInterface $form_state) {
@@ -933,7 +936,7 @@ function eu_cookie_compliance_module_set_weight() {
  */
 function _eu_cookie_compliance_convert_relative_uri(&$element) {
   if ((float) \Drupal::VERSION < 9.3) {
-    $element = preg_replace('/^\//', '', file_url_transform_relative(file_create_url($element)));
+    $element = preg_replace('/^\//', '', \Drupal::service('file_url_generator')->generateString($element));
   }
   else {
     $url = \Drupal::service('file_url_generator')->generateString($element);
diff --git a/eu_cookie_compliance.post_update.php b/eu_cookie_compliance.post_update.php
index 86a6921..cd2f0d9 100644
--- a/eu_cookie_compliance.post_update.php
+++ b/eu_cookie_compliance.post_update.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\RoleInterface;
 /**
  * @file
  * Post update functions for Eu Cookie Compliance.
@@ -16,7 +17,7 @@ use Drupal\user\Entity\Role;
  * Update permissions keys to standardize permission machine name.
  */
 function eu_cookie_compliance_post_update_permission_keys_to_lowercase() {
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission('administer EU Cookie Compliance popup')) {
       $role->revokePermission('administer EU Cookie Compliance popup');
diff --git a/src/Annotation/ConsentStorage.php b/src/Annotation/ConsentStorage.php
index a644377..2bb6e9a 100644
--- a/src/Annotation/ConsentStorage.php
+++ b/src/Annotation/ConsentStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eu_cookie_compliance\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -32,7 +33,7 @@ class ConsentStorage extends Plugin {
   /**
    * The human-readable name of the consent storage.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -43,7 +44,7 @@ class ConsentStorage extends Plugin {
    *
    * This will be shown when adding or configuring this consent storage.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/CategoryStorageManager.php b/src/CategoryStorageManager.php
index e78add9..b99575b 100644
--- a/src/CategoryStorageManager.php
+++ b/src/CategoryStorageManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eu_cookie_compliance;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\eu_cookie_compliance\Entity\CookieCategoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 
 /**
@@ -12,12 +14,12 @@ class CategoryStorageManager extends ConfigEntityStorage {
   /**
    * Load and return all active cookie categories.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   The loaded cookie categories.
    */
   public function getCookieCategories() {
     $categories = [];
-    /** @var \Drupal\eu_cookie_compliance\Entity\CookieCategoryInterface[] $category_entities */
+    /** @var CookieCategoryInterface[] $category_entities */
     $category_entities = $this->loadMultiple();
     foreach ($category_entities as $category_entity) {
       // Added this check to allow people to use domain access to change
@@ -48,7 +50,7 @@ class CategoryStorageManager extends ConfigEntityStorage {
    *   The next highest weight.
    */
   public function getCookieCategoryNextWeight() {
-    /** @var \Drupal\eu_cookie_compliance\Entity\CookieCategoryInterface[] $cookies */
+    /** @var CookieCategoryInterface[] $cookies */
     $cookies = $this->loadMultiple();
     $weight = -10;
 
diff --git a/src/Controller/AdminController.php b/src/Controller/AdminController.php
index b719683..fdd0ba4 100644
--- a/src/Controller/AdminController.php
+++ b/src/Controller/AdminController.php
@@ -14,10 +14,10 @@ class AdminController extends ControllerBase {
   /**
    * Access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Whether the user has access.
    */
   public function access(AccountInterface $account) {
diff --git a/src/Controller/CheckIfEuCountryJsController.php b/src/Controller/CheckIfEuCountryJsController.php
index eb909a7..edb4921 100644
--- a/src/Controller/CheckIfEuCountryJsController.php
+++ b/src/Controller/CheckIfEuCountryJsController.php
@@ -15,14 +15,14 @@ class CheckIfEuCountryJsController extends ControllerBase {
   /**
    * The Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * Creates a new VendorFileDownloadController instance.
    *
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The Module handler.
    */
   public function __construct(ModuleHandler $module_handler) {
@@ -41,7 +41,7 @@ class CheckIfEuCountryJsController extends ControllerBase {
   /**
    * Check if visitor is in the EU.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Whether the user is in EU.
    */
   public function content() {
diff --git a/src/Controller/StoreConsent.php b/src/Controller/StoreConsent.php
index ca39a39..0d9a8d9 100644
--- a/src/Controller/StoreConsent.php
+++ b/src/Controller/StoreConsent.php
@@ -16,23 +16,23 @@ class StoreConsent extends ControllerBase {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Consent Storage.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManager
+   * @var ConsentStorageManager
    */
   protected $consentStorage;
 
   /**
    * Constructs the SchemaListenerController object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManager $consent_storage
+   * @param ConsentStorageManager $consent_storage
    *   The consent storage.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConsentStorageManager $consent_storage) {
@@ -56,7 +56,7 @@ class StoreConsent extends ControllerBase {
    * @param string $target
    *   The target.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Result of action.
    */
   public function store($target) {
diff --git a/src/CookieCategoryListBuilder.php b/src/CookieCategoryListBuilder.php
index 5a6c160..b82c39c 100644
--- a/src/CookieCategoryListBuilder.php
+++ b/src/CookieCategoryListBuilder.php
@@ -14,7 +14,7 @@ class CookieCategoryListBuilder extends DraggableListBuilder {
   /**
    * The entity storage class.
    *
-   * @var \Drupal\eu_cookie_compliance\CategoryStorageManager
+   * @var CategoryStorageManager
    */
   protected $storage;
 
diff --git a/src/EventSubscriber/EuCookieComplianceConfigEventsSubscriber.php b/src/EventSubscriber/EuCookieComplianceConfigEventsSubscriber.php
index c8009a0..972bd02 100644
--- a/src/EventSubscriber/EuCookieComplianceConfigEventsSubscriber.php
+++ b/src/EventSubscriber/EuCookieComplianceConfigEventsSubscriber.php
@@ -33,7 +33,7 @@ class EuCookieComplianceConfigEventsSubscriber implements EventSubscriberInterfa
   /**
    * React to a config object being saved.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Config crud event.
    */
   public function configSave(ConfigCrudEvent $event) {
diff --git a/src/Form/CookieCategoryForm.php b/src/Form/CookieCategoryForm.php
index 1bc1277..3d9c321 100644
--- a/src/Form/CookieCategoryForm.php
+++ b/src/Form/CookieCategoryForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\eu_cookie_compliance\Form;
 
+use Drupal\eu_cookie_compliance\CategoryStorageManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,27 +20,27 @@ class CookieCategoryForm extends EntityForm {
   /**
    * The Cookie Category Storage Manager.
    *
-   * @var \Drupal\eu_cookie_compliance\CategoryStorageManager
+   * @var CategoryStorageManager
    */
   protected $categoryStorageManager;
 
   /**
    * EUCC Clear Cache Service.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\EuCcClearCache
+   * @var EuCcClearCache
    */
   protected $euccClearCache;
 
   /**
    * Constructs a CookieCategoryForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
-   * @param \Drupal\eu_cookie_compliance\Plugin\EuCcClearCache $eucc_clear_cache
+   * @param EuCcClearCache $eucc_clear_cache
    *   The EU CC Clear Cache service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EuCcClearCache $eucc_clear_cache) {
     $this->entityTypeManager = $entityTypeManager;
diff --git a/src/Form/EuCookieComplianceConfigForm.php b/src/Form/EuCookieComplianceConfigForm.php
index 1c5875f..a68fc0f 100644
--- a/src/Form/EuCookieComplianceConfigForm.php
+++ b/src/Form/EuCookieComplianceConfigForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\eu_cookie_compliance\Form;
 
+use Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\user\Entity\Role;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -28,79 +32,79 @@ class EuCookieComplianceConfigForm extends ConfigFormBase {
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;
 
   /**
    * The role storage.
    *
-   * @var \Drupal\user\RoleStorageInterface
+   * @var RoleStorageInterface
    */
   protected $roleStorage;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The filter format storage.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $filterFormatStorage;
 
   /**
    * The consent storage.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface
+   * @var ConsentStorageManagerInterface
    */
   protected $consentStorage;
 
   /**
    * The page cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cachePage;
 
   /**
    * The bootstraph cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBootstrap;
 
   /**
    * Constructs an EuCookieComplianceConfigForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator.
-   * @param \Drupal\Core\Routing\RequestContext $request_context
+   * @param RequestContext $request_context
    *   The request context.
-   * @param \Drupal\user\RoleStorageInterface $role_storage
+   * @param RoleStorageInterface $role_storage
    *   The role storage.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The filter format storage.
-   * @param \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManager $consent_storage
+   * @param ConsentStorageManager $consent_storage
    *   The Consent storage.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_bootstrap
+   * @param CacheBackendInterface $cache_bootstrap
    *   The bootstrap cache.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_page
+   * @param CacheBackendInterface $cache_page
    *   The page cache.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PathValidatorInterface $path_validator, RequestContext $request_context, RoleStorageInterface $role_storage, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, ConsentStorageManager $consent_storage, CacheBackendInterface $cache_bootstrap, CacheBackendInterface $cache_page) {
@@ -146,7 +150,7 @@ class EuCookieComplianceConfigForm extends ConfigFormBase {
   /**
    * Gets the roles to display in this form.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of role objects.
    */
   protected function getRoles() {
@@ -180,7 +184,7 @@ class EuCookieComplianceConfigForm extends ConfigFormBase {
     $consent_storage_options = [];
     $consent_storage_options['do_not_store'] = $this->t('Do not store');
     foreach ($plugin_definitions as $plugin_name => $plugin_definition) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $plugin_definition_name */
+      /** @var TranslatableMarkup $plugin_definition_name */
       $plugin_definition_name = $plugin_definition['name'];
       $consent_storage_options[$plugin_name] = $plugin_definition_name->render();
     }
@@ -204,7 +208,7 @@ class EuCookieComplianceConfigForm extends ConfigFormBase {
 
     foreach ($this->getRoles() as $role_name => $role) {
       // Exclude Admin roles.
-      /** @var \Drupal\user\Entity\Role $role */
+      /** @var Role $role */
       if (!$role->isAdmin()) {
         $role_names[$role_name] = $role->label();
         // Fetch permissions for the roles.
@@ -1165,7 +1169,7 @@ class EuCookieComplianceConfigForm extends ConfigFormBase {
     $allowlist_patterns = Settings::get('config_readonly_whitelist_patterns');
 
     foreach ($this->getRoles() as $role_name => $role) {
-      /** @var \Drupal\user\Entity\Role $role */
+      /** @var Role $role */
       if (!$role->isAdmin()) {
         $user_settings_allowlisted = !empty($allowlist_patterns) && in_array('user.role.' . $role_name, $allowlist_patterns);
         if (!$readonly_enabled || ($readonly_enabled && $user_settings_allowlisted)) {
@@ -1318,7 +1322,7 @@ class EuCookieComplianceConfigForm extends ConfigFormBase {
    *
    * @param array $element
    *   Element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function validatePopupLink(array $element, FormStateInterface $form_state) {
diff --git a/src/PersonalInformationFormInterface.php b/src/PersonalInformationFormInterface.php
index b3a2f5d..67db6bd 100644
--- a/src/PersonalInformationFormInterface.php
+++ b/src/PersonalInformationFormInterface.php
@@ -14,7 +14,7 @@ interface PersonalInformationFormInterface {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that accompanies the form.
    */
   public function formInjectGdprCheckbox(array &$form, FormStateInterface $form_state);
@@ -24,7 +24,7 @@ interface PersonalInformationFormInterface {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state with the submitted values.
    */
   public function formSubmitGdprCheckbox(array $form, FormStateInterface $form_state);
diff --git a/src/PersonalInformationFormTrait.php b/src/PersonalInformationFormTrait.php
index 01ddff0..90624b2 100644
--- a/src/PersonalInformationFormTrait.php
+++ b/src/PersonalInformationFormTrait.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\eu_cookie_compliance;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\eu_cookie_compliance\Plugin\ConsentStorageBase;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,14 +22,14 @@ trait PersonalInformationFormTrait {
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Consent storage manager service.
    *
-   * @var \Drupal\eu_cookie_compliance\Plugin\ConsentStorageManagerInterface
+   * @var ConsentStorageManagerInterface
    */
   protected $consentStorageManager;
 
@@ -33,7 +38,7 @@ trait PersonalInformationFormTrait {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state that accompanies the form.
    */
   public function formInjectGdprCheckbox(array &$form, FormStateInterface $form_state) {
@@ -64,7 +69,7 @@ trait PersonalInformationFormTrait {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state with the submitted values.
    */
   public function formSubmitGdprCheckbox(array $form, FormStateInterface $form_state) {
@@ -108,7 +113,7 @@ trait PersonalInformationFormTrait {
    * @param string $config_name
    *   Name of the config to get.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Config object.
    */
   protected function getConfig($config_name) {
@@ -118,10 +123,10 @@ trait PersonalInformationFormTrait {
   /**
    * Get active consent storage.
    *
-   * @return null|\Drupal\eu_cookie_compliance\Plugin\ConsentStorageBase
+   * @return null|ConsentStorageBase
    *   Consent storage object or NULL if one is not configured/available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getConsentStorage() {
     $storage_manager = $this->consentStorageManager ? $this->consentStorageManager : \Drupal::service('plugin.manager.eu_cookie_compliance.consent_storage');
diff --git a/src/Plugin/ConsentStorage/BasicConsentStorage.php b/src/Plugin/ConsentStorage/BasicConsentStorage.php
index bd9cf8e..6edb0fc 100644
--- a/src/Plugin/ConsentStorage/BasicConsentStorage.php
+++ b/src/Plugin/ConsentStorage/BasicConsentStorage.php
@@ -21,7 +21,7 @@ class BasicConsentStorage extends ConsentStorageBase {
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -34,9 +34,9 @@ class BasicConsentStorage extends ConsentStorageBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, TimeInterface $time) {
diff --git a/src/Plugin/ConsentStorageBase.php b/src/Plugin/ConsentStorageBase.php
index e82945f..01b040e 100644
--- a/src/Plugin/ConsentStorageBase.php
+++ b/src/Plugin/ConsentStorageBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\eu_cookie_compliance\Plugin;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Plugin\PluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -24,7 +27,7 @@ abstract class ConsentStorageBase extends PluginBase implements ConsentStorageIn
    * directly. See \Drupal\Core\Form\ConfigFormBase::config() for an example of
    * this.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -37,7 +40,7 @@ abstract class ConsentStorageBase extends PluginBase implements ConsentStorageIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory) {
@@ -89,8 +92,8 @@ abstract class ConsentStorageBase extends PluginBase implements ConsentStorageIn
    *   Returns the latest revision ID of the curreny privacy policy node, or
    *   FALSE if no priacy policy exists.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getCurrentPolicyNodeRevision() {
     $config = $this->configFactory->get('eu_cookie_compliance.settings');
@@ -98,7 +101,7 @@ abstract class ConsentStorageBase extends PluginBase implements ConsentStorageIn
     $cookie_policy_drupal_path = \Drupal::service('path_alias.manager')->getPathByAlias($cookie_policy_link, \Drupal::languageManager()->getCurrentLanguage()->getId());
     if (substr($cookie_policy_drupal_path, 0, 6) === '/node/') {
       $node_id = explode('/', $cookie_policy_drupal_path)[2];
-      /** @var \Drupal\node\Entity\Node $node */
+      /** @var Node $node */
       $node = \Drupal::entityTypeManager()->getStorage('node')->load($node_id);
 
       // Ensure the node has been loaded before accessing any properties.
diff --git a/src/Plugin/ConsentStorageManager.php b/src/Plugin/ConsentStorageManager.php
index b6b7f83..ff90b8f 100644
--- a/src/Plugin/ConsentStorageManager.php
+++ b/src/Plugin/ConsentStorageManager.php
@@ -22,9 +22,9 @@ class ConsentStorageManager extends DefaultPluginManager implements FallbackPlug
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/ConsentStorageManagerInterface.php b/src/Plugin/ConsentStorageManagerInterface.php
index c32845a..24a6c6f 100644
--- a/src/Plugin/ConsentStorageManagerInterface.php
+++ b/src/Plugin/ConsentStorageManagerInterface.php
@@ -15,7 +15,7 @@ interface ConsentStorageManagerInterface extends PluginManagerInterface {
    * @param array $configuration
    *   Export configuration (aka export options).
    *
-   * @return \Drupal\eu_cookie_compliance\Plugin\ConsentStorageInterface[]
+   * @return ConsentStorageInterface[]
    *   An array of all available eu_cookie_compliance consent plugin instances.
    */
   public function getInstances(array $configuration = []);
diff --git a/src/Plugin/EuCcClearCache.php b/src/Plugin/EuCcClearCache.php
index 4b8efc1..9ef2d40 100644
--- a/src/Plugin/EuCcClearCache.php
+++ b/src/Plugin/EuCcClearCache.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eu_cookie_compliance\Plugin;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandler;
@@ -18,14 +20,14 @@ class EuCcClearCache {
   /**
    * The MIME type guesser.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -39,33 +41,33 @@ class EuCcClearCache {
   /**
    * The theme extension list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   protected $themeExtensionList;
 
   /**
    * The render cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheRender;
 
   /**
    * Creates a new VendorFileDownloadController instance.
    *
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The Module handler.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $domain_storage
+   * @param EntityTypeManagerInterface $domain_storage
    *   The domain storage.
-   * @param \Drupal\Core\Extension\ThemeExtensionList $theme_extension_list
+   * @param ThemeExtensionList $theme_extension_list
    *   The theme extension list.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_render
+   * @param CacheBackendInterface $cache_render
    *   The cache interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ModuleHandler $module_handler, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $domain_storage, ThemeExtensionList $theme_extension_list, CacheBackendInterface $cache_render) {
     $this->moduleHandler = $module_handler;
@@ -96,8 +98,8 @@ class EuCcClearCache {
   /**
    * Clear cache.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function clearCache() {
     $languages = $this->languageManager->getLanguages();
