modules/contrib/queue_ui/queue_ui.drush.inc
modules/contrib/queue_ui/queue_ui.module
modules/contrib/queue_ui/src/Annotation/QueueUI.php
modules/contrib/queue_ui/src/Form/ConfirmClearForm.php
modules/contrib/queue_ui/src/Form/ConfirmItemDeleteForm.php
modules/contrib/queue_ui/src/Form/ConfirmItemReleaseForm.php
modules/contrib/queue_ui/src/Form/InspectForm.php
modules/contrib/queue_ui/src/Form/ItemDetailForm.php
modules/contrib/queue_ui/src/Form/OverviewForm.php
modules/contrib/queue_ui/src/Plugin/QueueUI/DatabaseQueue.php
modules/contrib/queue_ui/src/QueueUIBase.php
modules/contrib/queue_ui/src/QueueUIBatch.php
modules/contrib/queue_ui/src/QueueUIInterface.php
modules/contrib/queue_ui/src/QueueUIManager.php
modules/contrib/queue_ui/tests/src/Functional/WeightChangeTest.php

11 files with changes
=====================

1) modules/contrib/queue_ui/tests/src/Functional/WeightChangeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\queue_ui\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Test reordering defined workers.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
    */
   public function testWeightReordering() {
     $this->drupalLogin($this->createUser(['admin queue_ui']));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/queue_ui/src/QueueUIManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/queue_ui/src/QueueUIBatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Queue\DelayableQueueInterface;
 use Drupal\Core\Queue\DelayedRequeueException;
 use Drupal\Core\Queue\RequeueException;
@@ @@
    * @param $queue_name
    * @param $context
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public static function step($queue_name, &$context) {
     /** @var $queue_manager \Drupal\Core\Queue\QueueWorkerManagerInterface */
     $queue_manager = \Drupal::service('plugin.manager.queue_worker');
-    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+    /** @var QueueFactory $queue_factory */
     $queue_factory = \Drupal::service('queue');

     // Make sure every queue exists. There is no harm in trying to recreate
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/queue_ui/src/Plugin/QueueUI/DatabaseQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui\Plugin\QueueUI;

+use Drupal\Core\Database\Database;
+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Database\Database
+   * @var Database
    */
   private $database;

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    *
-   * @return \Drupal\Core\Plugin\ContainerFactoryPluginInterface|\Drupal\queue_ui\Plugin\QueueUI\DatabaseQueue
+   * @return ContainerFactoryPluginInterface|\Drupal\queue_ui\Plugin\QueueUI\DatabaseQueue
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
     $this->database = $database;
@@ @@
   /**
    * @param $queue_name
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|null
+   * @return StatementInterface|int|null
    */
   public function releaseItems($queue_name) {
     return $this->database->update('queue')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/queue_ui/src/Form/OverviewForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui\Form;

+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Extension\ModuleHandler;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The Drupal state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The Drupal module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $dbConnection;

   /**
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   private $queueWorkerManager;

   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * OverviewForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queueWorkerManager
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param QueueFactory $queue_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
+   * @param AccountInterface $current_user
+   * @param StateInterface $state
+   * @param ModuleHandlerInterface $module_handler
+   * @param QueueWorkerManagerInterface $queueWorkerManager
+   * @param QueueUIManager $queueUIManager
+   * @param MessengerInterface $messenger
    */
   public function __construct(QueueFactory $queue_factory, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user, StateInterface $state, ModuleHandlerInterface $module_handler, QueueWorkerManagerInterface $queueWorkerManager, QueueUIManager $queueUIManager, MessengerInterface $messenger) {
     $this->queueFactory = $queue_factory;
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ @@
    * We need this method, but each button has its own submit handler.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $form_state->cleanValues();
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitBulkForm(array &$form, FormStateInterface $form_state) {
     if (in_array($form_state->getValue('operation'), [
@@ @@
   /**
    * Process queue(s) with batch.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $queues
    */
   public function submitBatch(FormStateInterface $form_state, $queues) {
@@ @@
   /**
    * Option to remove lease timestamps.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $queues
    */
   public function submitRelease(FormStateInterface $form_state, $queues) {
@@ @@
   /**
    * Option to delete queue.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $queues
    */
   public function submitClear(FormStateInterface $form_state, $queues) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/queue_ui/src/Form/ItemDetailForm.php:13

    ---------- begin diff ----------
@@ @@
 class ItemDetailForm extends FormBase {

   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * InspectForm constructor.
    *
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(QueueUIManager $queueUIManager) {
     $this->queueUIManager = $queueUIManager;
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/queue_ui/src/Form/InspectForm.php:14

    ---------- begin diff ----------
@@ @@
 class InspectForm extends FormBase {

   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * InspectForm constructor.
    *
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(QueueUIManager $queueUIManager) {
     $this->queueUIManager = $queueUIManager;
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/queue_ui/src/Form/ConfirmItemReleaseForm.php:25

    ---------- begin diff ----------
@@ @@
   protected $queue_item;

   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * ConfirmItemReleaseForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param Messenger $messenger
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(Messenger $messenger, QueueUIManager $queueUIManager) {
     $this->messenger = $messenger;
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $queue_ui = $this->queueUIManager->fromQueueName($this->queue_name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/queue_ui/src/Form/ConfirmItemDeleteForm.php:25

    ---------- begin diff ----------
@@ @@
   protected $queue_item;

   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * ConfirmItemDeleteForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param Messenger $messenger
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(Messenger $messenger, QueueUIManager $queueUIManager) {
     $this->messenger = $messenger;
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $queue_ui = $this->queueUIManager->fromQueueName($this->queue_name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/queue_ui/src/Form/ConfirmClearForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * ConfirmClearForm constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param PrivateTempStoreFactory $temp_store_factory
+   * @param Messenger $messenger
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, Messenger $messenger) {
     $this->tempStoreFactory = $temp_store_factory;
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/queue_ui/queue_ui.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\queue_ui\QueueUIInterface;
 /**
  * Implements hook_drush_command().
  */
@@ @@
  * @param $queue_name
  */
 function _queue_ui_release_queue($queue_name) {
-  /** @var \Drupal\queue_ui\QueueUIInterface $queue_ui */
+  /** @var QueueUIInterface $queue_ui */
   $queue_ui = \Drupal::service('plugin.manager.queue_ui')->fromQueueName($queue_name);

   // Remove leases
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 11 files have been changed by Rector                                      

