modules/contrib/queue_ui/queue_ui.module
modules/contrib/queue_ui/queue_ui.post_update.php
modules/contrib/queue_ui/src/Annotation/QueueUI.php
modules/contrib/queue_ui/src/Commands/QueueUiCommands.php
modules/contrib/queue_ui/src/Controller/QueueProcessController.php
modules/contrib/queue_ui/src/Form/ConfirmClearForm.php
modules/contrib/queue_ui/src/Form/ConfirmItemDeleteForm.php
modules/contrib/queue_ui/src/Form/ConfirmItemReleaseForm.php
modules/contrib/queue_ui/src/Form/InspectForm.php
modules/contrib/queue_ui/src/Form/ItemDetailForm.php
modules/contrib/queue_ui/src/Form/OverviewForm.php
modules/contrib/queue_ui/src/Plugin/QueueUI/DatabaseQueue.php
modules/contrib/queue_ui/src/QueueUIBase.php
modules/contrib/queue_ui/src/QueueUIBatch.php
modules/contrib/queue_ui/src/QueueUIBatchInterface.php
modules/contrib/queue_ui/src/QueueUIInterface.php
modules/contrib/queue_ui/src/QueueUIManager.php
modules/contrib/queue_ui/src/QueueUIPermissions.php
modules/contrib/queue_ui/tests/src/Functional/WeightChangeTest.php

14 files with changes
=====================

1) modules/contrib/queue_ui/tests/src/Functional/WeightChangeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\queue_ui\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Test reordering defined workers.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
    */
   public function testWeightReordering() {
     $this->drupalLogin($this->createUser(['admin queue_ui']));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/queue_ui/src/QueueUIPermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui;

+use Drupal\Core\Queue\QueueWorkerManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Queue\QueueWorkerManager
+   * @var QueueWorkerManager
    */
   private $queueWorkerManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/queue_ui/src/QueueUIManager.php:22

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   The queue service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, QueueFactory $queue) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/queue_ui/src/QueueUIBatchInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * An interface for batch controller to process a queue.
  *
@@ @@
    * @param array $context
    *   An associative array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function step(string $queue_name, array &$context);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/queue_ui/src/QueueUIBatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui;

+use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Queue Manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;

@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   private $queueFactory;

@@ @@
   /**
    * Constructor of the Queue UI Batch service.
    *
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   Queue manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param mixed|\Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param mixed|QueueFactory $queue_factory
    *   Queue factory.
    */
   public function __construct(QueueWorkerManagerInterface $queue_manager, ModuleHandlerInterface $module_handler, MessengerInterface $messenger, $queue_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/queue_ui/src/Plugin/QueueUI/DatabaseQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui\Plugin\QueueUI;

+use Drupal\Core\Database\Database;
+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Database
+   * @var Database
    * It acts to encapsulate all control
    */
   private $database;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    * @param array $configuration
    *   The configuration to use.
@@ @@
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
    *
-   * @return \Drupal\Core\Plugin\ContainerFactoryPluginInterface|\Drupal\queue_ui\Plugin\QueueUI\DatabaseQueue
+   * @return ContainerFactoryPluginInterface|\Drupal\queue_ui\Plugin\QueueUI\DatabaseQueue
    *   Defines the default Drupal Queue UI backend
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
@@ @@
    * @param string $queueName
    *   The name of the queue being inspected.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|null
+   * @return StatementInterface|int|null
    *   return the value null
    */
   public function releaseItems($queueName) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/queue_ui/src/Form/OverviewForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui\Form;

+use Drupal\Core\Database\Connection;
+use Drupal\queue_ui\QueueUIInterface;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The Drupal state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The Drupal module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $dbConnection;

@@ @@
   /**
    * The queue plugin manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   private $queueWorkerManager;

@@ @@
   /**
    * The QueueUIManager.
    *
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

   /**
-   * @var \Drupal\queue_ui\QueueUIBatchInterface
+   * @var QueueUIBatchInterface
    */
   protected $queueUiBatch;

@@ @@
   /**
    * OverviewForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queueWorkerManager
+   * @param QueueWorkerManagerInterface $queueWorkerManager
    *   The queue plugin manager.
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    *   The QueueUIManager object.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\queue_ui\QueueUIBatchInterface $queue_ui_batch
+   * @param QueueUIBatchInterface $queue_ui_batch
    *   The batch service.
    */
   public function __construct(QueueFactory $queue_factory, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user, StateInterface $state, ModuleHandlerInterface $module_handler, QueueWorkerManagerInterface $queueWorkerManager, QueueUIManager $queueUIManager, MessengerInterface $messenger, QueueUIBatchInterface $queue_ui_batch) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    *
    * @return static
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitBulkForm(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Process queue(s) with batch.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $queues
    *   An array of queue information.
@@ @@
   /**
    * Option to remove lease timestamps.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $queues
    *   An array of queue information.
@@ @@
    */
   public function submitRelease(FormStateInterface $form_state, array $queues) {
     foreach ($queues as $queueName) {
-      /** @var \Drupal\queue_ui\QueueUIInterface $queue_ui */
+      /** @var QueueUIInterface $queue_ui */
       if ($queue_ui = $this->queueUIManager->fromQueueName($queueName)) {
         $num_updated = $queue_ui->releaseItems($queueName);

@@ @@
   /**
    * Option to delete queue.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $queues
    *   An array of queue information.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/queue_ui/src/Form/ItemDetailForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The QueueUIManager.
    *
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * InspectForm constructor.
    *
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    *   The QueueUIManager object.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The Renderer object.
-   * @param \Drupal\Core\Extension\ModuleHandler $moduleHandler
+   * @param ModuleHandler $moduleHandler
    *   The ModuleHandler object.
    */
   public function __construct(QueueUIManager $queueUIManager, Renderer $renderer, ModuleHandler $moduleHandler) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    *
    * @return static
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/queue_ui/src/Form/InspectForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The QueueUIManager.
    *
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * InspectForm constructor.
    *
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    *   The QueueUIManager object.
    */
   public function __construct(QueueUIManager $queueUIManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    *
    * @return static
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/queue_ui/src/Form/ConfirmItemReleaseForm.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The QueueUIManager.
    *
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * ConfirmItemReleaseForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    *   The QueueUIManager object.
    */
   public function __construct(Messenger $messenger, QueueUIManager $queueUIManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    *
    * @return static
@@ @@
    *
    * @param array $form
    *   The form is where the settings form is being included.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param bool $queueName
    *   The name of the queue being inspected.
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/queue_ui/src/Form/ConfirmItemDeleteForm.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The QueueUIManager.
    *
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;

@@ @@
   /**
    * ConfirmItemDeleteForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    *   The QueueUIManager object.
    */
   public function __construct(Messenger $messenger, QueueUIManager $queueUIManager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    *
    * @return static
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param bool $queueName
    *   The name of the queue being inspected.
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/queue_ui/src/Form/ConfirmClearForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   private $tempStoreFactory;

@@ @@
   /**
    * ConfirmClearForm constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, Messenger $messenger) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/queue_ui/src/Controller/QueueProcessController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui\Controller;

+use Drupal\queue_ui\QueueUIBatchInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
 class QueueProcessController implements ContainerInjectionInterface {

   /**
-   * @var \Drupal\queue_ui\QueueUIBatchInterface
+   * @var QueueUIBatchInterface
    */
   protected $batch;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/queue_ui/src/Commands/QueueUiCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\queue_ui\Commands;

+use Drush\Exceptions\UserAbortException;
+use Drupal\queue_ui\QueueUIInterface;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Queue\QueueWorkerManagerInterface;
 use Drupal\queue_ui\QueueUIBatchInterface;
@@ @@
   /**
    * Queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;

@@ @@
   /**
    * Queue UI manager.
    *
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   protected $queueUiManager;

@@ @@
   /**
    * Queue UI Batch service.
    *
-   * @var \Drupal\queue_ui\QueueUIBatchInterface
+   * @var QueueUIBatchInterface
    */
   protected $queueUiBatch;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   Queue worker manager.
-   * @param \Drupal\queue_ui\QueueUIManager $queue_ui_manager
+   * @param QueueUIManager $queue_ui_manager
    *   Queue UI manager.
-   * @param \Drupal\queue_ui\QueueUIBatchInterface $queue_ui_batch
+   * @param QueueUIBatchInterface $queue_ui_batch
    *   Queue UI Batch service.
    */
   public function __construct(QueueWorkerManagerInterface $queue_worker_manager, QueueUIManager $queue_ui_manager, QueueUIBatchInterface $queue_ui_batch) {
@@ @@
   /**
    * Get queue UI manager.
    *
-   * @return \Drupal\queue_ui\QueueUIManager
+   * @return QueueUIManager
    *   Queue UI manager.
    */
   public function queueUiManager(): QueueUIManager {
@@ @@
   /**
    * Get queue worker manager.
    *
-   * @return \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @return QueueWorkerManagerInterface
    *   Queue worker manager.
    */
   protected function queueWorkerManager(): QueueWorkerManagerInterface {
@@ @@
    * @command queue:release
    * @aliases qr,queue-release
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   public function release(string $queueName = NULL): void {
     // Require the choice name to be filled.
@@ @@
    *   The name of the queue being inspected.
    */
   protected function releaseQueue(string $queueName): void {
-    /** @var \Drupal\queue_ui\QueueUIInterface $queue_ui */
+    /** @var QueueUIInterface $queue_ui */
     $queue_ui = $this->queueUiManager()
       ->fromQueueName($queueName);

@@ @@
    * @return string
    *   The queue name.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   protected function queueChoice(string $queueName = NULL): string {
     // Queue name is not provided.
@@ @@
   /**
    * Helper function to start a batch process.
    *
-   * @param \Drupal\Core\Batch\BatchBuilder $batch
+   * @param BatchBuilder $batch
    *   The batch that needs to be processed.
    */
   protected function startBatch(BatchBuilder $batch): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 14 files have been changed by Rector                                      

