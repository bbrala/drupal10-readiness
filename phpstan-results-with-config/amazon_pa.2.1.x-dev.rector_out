modules/contrib/amazon_pa/amazon_pa.install
modules/contrib/amazon_pa/amazon_pa.module
modules/contrib/amazon_pa/amazon_pa_filter/amazon_pa_filter.module
modules/contrib/amazon_pa/amazon_pa_filter/src/Plugin/Filter/AmazonFilter.php
modules/contrib/amazon_pa/asin/asin.module
modules/contrib/amazon_pa/asin/asin.views.inc
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/Detail.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/GalleryLarge.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/GalleryMedium.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/GalleryMediumDetails.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/GallerySmall.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/PageUrl.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/Plaintext.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/SButton.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/ThumbnailLarge.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/ThumbnailMedium.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/ThumbnailMediumTitle.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/ThumbnailSmall.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldFormatter/Widget.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldType/AmazonField.php
modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldWidget/AmazonFieldWidget.php
modules/contrib/amazon_pa/asin/src/Plugin/views/field/AmazonImage.php
modules/contrib/amazon_pa/asin/tests/src/Kernel/Field/AsinFormatterTest.php
modules/contrib/amazon_pa/includes/amazon_pa.locales.inc
modules/contrib/amazon_pa/src/Controller/AmazonPAController.php
modules/contrib/amazon_pa/src/Form/AmazonPaDatabase.php
modules/contrib/amazon_pa/src/Form/AmazonPaSettings.php
modules/contrib/amazon_pa/src/Form/AmazonPaStorage.php
modules/contrib/amazon_pa/src/Form/AmazonPaTest.php
modules/contrib/amazon_pa/src/Utils/AmazonPaUtils.php
modules/contrib/amazon_pa/tests/src/Functional/AmazonPaRouteTest.php

8 files with changes
====================

1) modules/contrib/amazon_pa/tests/src/Functional/AmazonPaRouteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\amazon_pa\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A simple user with 'access content' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/amazon_pa/src/Utils/AmazonPaUtils.php:10

    ---------- begin diff ----------
@@ @@
    */
   private function amazon_pa_default_locales() {
     // Load default locales from includes/amazon_pa.locales.inc
-    require_once drupal_get_path('module', 'amazon_pa')
+    require_once \Drupal::service('extension.list.module')->getPath('amazon_pa')
       . '/includes/amazon_pa.locales.inc';
     $locales = _amazon_pa_load_locales();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/amazon_pa/asin/tests/src/Kernel/Field/AsinFormatterTest.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $amazon_pa_tables = [
@@ @@

   /**
    * Tests all text field formatters.
+   * @doesNotPerformAssertions
    */
   public function testFormatters() {
     $formatters = [
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/amazon_pa/asin/src/Plugin/views/field/AmazonImage.php:119

    ---------- begin diff ----------
@@ @@
   /**
    * Override init function to provide generic option to link to node.
    *
-   * @param \Drupal\views\ViewExecutable $view
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginBase $display
+   * @param ViewExecutable $view
+   * @param DisplayPluginBase $display
    * @param array|null $options
    */
   public function init(ViewExecutable $view, DisplayPluginBase $display, array &$options = NULL) {
@@ @@
   /**
    * @{inheritdoc}
    *
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *
-   * @return \Drupal\Core\Link|null
+   * @return Link|null
    */
   public function render(ResultRow $values) {
     $url = $this->getValue($values, 'url');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/amazon_pa/asin/src/Plugin/Field/FieldWidget/AmazonFieldWidget.php:89

    ---------- begin diff ----------
@@ @@
    * Validate the asin field.
    *
    * @param                                      $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validate($element, FormStateInterface $form_state) {
     $asin = $element['#value'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/amazon_pa/asin/asin.views.inc:516

    ---------- begin diff ----------
@@ @@
  * on the ASIN type to the amazon_item views base stuff.
  * //https://api.drupal.org/api/drupal/core!modules!views!views.api.php/function/hook_field_views_data/8.8.x
  *
- * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+ * @param FieldStorageConfigInterface $field_storage
  *
  * @return array
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/amazon_pa/amazon_pa_filter/src/Plugin/Filter/AmazonFilter.php:20

    ---------- begin diff ----------
@@ @@
    * @param string $text
    * @param string $langcode
    *
-   * @return \Drupal\filter\FilterProcessResult
+   * @return FilterProcessResult
    *
    * This is not a simple one. The filter has to check a lot of stuff
    * Amazon API also returns nothing at all if you input invalid ASINS
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/amazon_pa/amazon_pa.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Amazon\ProductAdvertisingAPI\v1\com\amazon\paapi5\v1\Item;
 /**
  * @file
  * Amazon Integration
@@ @@
  * Important: Only gets triggered if cache is not build or after cache clear
  *
  * @param array                                                  $build
- * @param \Drupal\Core\Entity\EntityInterface                    $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  * @param                                                        $view_mode
  */
-
-function amazon_pa_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
+function amazon_pa_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
   $update_one_view_enabled = \Drupal::config('amazon_pa.settings')->get('update.amazon_update_on_node_view');
   if($update_one_view_enabled == 1) {
     _amazon_pa_field_update_nodes($entity, TRUE);
@@ @@
  *
  * question: is there a better way to achive this?
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function amazon_pa_node_update(EntityInterface $entity) {
   $update_one_hook_update_enabled = \Drupal::config('amazon_pa.settings')->get('update.amazon_update_on_node_hook_save');
@@ @@
  */
 function _amazon_pa_default_locales() {
   // Load default locales from includes/amazon_pa.locales.inc
-  require_once drupal_get_path('module', 'amazon_pa')
+  require_once \Drupal::service('extension.list.module')->getPath('amazon_pa')
     . '/includes/amazon_pa.locales.inc';
   return _amazon_pa_load_locales();
 }
@@ @@
  * @param array $items
  *   Items value.
  *
- * @return \Amazon\ProductAdvertisingAPI\v1\com\amazon\paapi5\v1\Item[]
+ * @return Item[]
  *   Array of Amazon Item objects, keyed by ASIN.
  */
 function amazon_pa_parseResponse($items) {
@@ @@
 function amazon_pa_views_api() {
   return [
     'api'  => 3,
-    'path' => drupal_get_path('module', 'amazon_pa'),
+    'path' => \Drupal::service('extension.list.module')->getPath('amazon_pa'),
   ];
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

