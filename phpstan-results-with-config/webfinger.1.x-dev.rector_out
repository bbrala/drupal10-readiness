modules/contrib/webfinger/src/Controller/WebfingerController.php
modules/contrib/webfinger/src/Event/WebfingerResponseEvent.php
modules/contrib/webfinger/src/EventSubscriber/WebfingerProfileSubscriber.php
modules/contrib/webfinger/src/JsonRd.php
modules/contrib/webfinger/src/JsonRdLink.php
modules/contrib/webfinger/src/WebfingerEvents.php
modules/contrib/webfinger/src/WebfingerParameters.php
modules/contrib/webfinger/webfinger.module

4 files with changes
====================

1) modules/contrib/webfinger/src/WebfingerParameters.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The response cacheability metadata.
    *
-   * @var \Drupal\Core\Cache\CacheableMetadata
+   * @var CacheableMetadata
    */
   protected $responseCacheability;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Sets the response cacheability.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $response_cacheability
+   * @param CacheableMetadata $response_cacheability
    *   Collected cacheability for the response.
    */
   public function setResponseCacheability(CacheableMetadata $response_cacheability): self {
@@ @@
   /**
    * Sets the logger.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/webfinger/src/EventSubscriber/WebfingerProfileSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webfinger\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\webfinger\JsonRd;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a \Drupal\webfinger\EventSubscriber\WebfingerProfileSubscriber instance.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(AccountInterface $account, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger) {
@@ @@
   /**
    * Builds a profile response.
    *
-   * @param \Drupal\webfinger\Event\WebfingerResponseEvent $event
+   * @param WebfingerResponseEvent $event
    *   The event to process.
    */
   public function onBuildResponseBuildProfile(WebfingerResponseEvent $event) {
-    /** @var \Drupal\webfinger\JsonRd $json_rd */
+    /** @var JsonRd $json_rd */
     $json_rd = $event->getJsonRd();
     $request = $event->getRequest();
     $params = $event->getParams();
@@ @@
    *
    * @param string $name
    *   The name of a requested account.
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   A fully-loaded user object upon successful user load or FALSE if user
    *   cannot be loaded
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/webfinger/src/Event/WebfingerResponseEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webfinger\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\webfinger\JsonRd;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
   /**
    * The JSON resource descriptor.
    *
-   * @var \Drupal\webfinger\JsonRd
+   * @var JsonRd
    */
   protected $jsonRd;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The response cacheability metadata.
    *
-   * @var \Drupal\Core\Cache\CacheableMetadata
+   * @var CacheableMetadata
    */
   protected $responseCacheability;

@@ @@
   /**
    * Constructs a new WebfingerEvent.
    *
-   * @param \Drupal\webfinger\JsonRd $json_rd
+   * @param JsonRd $json_rd
    *   The JSON resource descriptor.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string[] $params
    *   The parsed request parameters.
-   * @param \Drupal\Core\Cache\CacheableMetadata $response_cacheability
+   * @param CacheableMetadata $response_cacheability
    *   Collects cacheability for the query.
    */
   public function __construct(JsonRd $json_rd, Request $request, array $params, CacheableMetadata $response_cacheability) {
@@ @@
   }

   /**
-   * Returns the JSON resource descriptor.
-   *
-   * @return \Drupal\webfinger\JsonRd $jsonRd
-   *   The JSON resource descriptor.
-   */
+  * Returns the JSON resource descriptor.
+  *
+   * @return JsonRd $jsonRd
+    The JSON resource descriptor.
+  */
   public function getJsonRd(): JsonRd {
     return $this->jsonRd;
   }

   /**
-   * Returns the current request.
-   *
-   * @return \Symfony\Component\HttpFoundation\Request $request
-   *   The current request.
-   */
+  * Returns the current request.
+  *
+   * @return Request $request
+    The current request.
+  */
   public function getRequest(): Request {
     return $this->request;
   }
@@ @@
   }

   /**
-   * Returns the response cacheability.
-   *
-   * @return \Drupal\Core\Cache\CacheableMetadata $responseCacheability
-   *   Collected cacheability for the response.
-   */
+  * Returns the response cacheability.
+  *
+   * @return CacheableMetadata $responseCacheability
+    Collected cacheability for the response.
+  */
   public function getResponseCacheability(): CacheableMetadata {
     return $this->responseCacheability;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/webfinger/src/Controller/WebfingerController.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The webfinger logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a \Drupal\aggregator\Controller\AggregatorController object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, LoggerInterface $logger) {
@@ @@
   /**
    * Handle request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Information about the current HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function handleRequest(Request $request) {
@@ @@

     $json_rd = new JsonRd();
     $event = new WebfingerResponseEvent($json_rd, $request, $params, $response_cacheability);
-    $this->eventDispatcher->dispatch(WebfingerEvents::WEBFINGER_BUILD_RESPONSE, $event);
+    $this->eventDispatcher->dispatch($event, WebfingerEvents::WEBFINGER_BUILD_RESPONSE);

     if (!empty($event->getJsonRd()->getLinks())) {
       $response = new CacheableJsonResponse($event->getJsonRd()->toArray());
@@ @@
   /**
    * Host meta routing callback.
    *
-   * @return \Drupal\Core\Cache\CacheableResponse
+   * @return CacheableResponse
    */
   public function hostMeta() {
     $response_cacheability = new CacheableMetadata();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 4 files have been changed by Rector                                       

