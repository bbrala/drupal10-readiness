modules/contrib/jsonapi_hypermedia/examples/Plugin/Derivative/EntityPublishedInterfaceLinkProviderDeriver.php
modules/contrib/jsonapi_hypermedia/examples/Plugin/Derivative/MutableResourceTypeLinkProviderDeriver.php
modules/contrib/jsonapi_hypermedia/examples/Plugin/jsonapi_hypermedia/LinkProvider/AuthenticationLinkProvider.php
modules/contrib/jsonapi_hypermedia/examples/Plugin/jsonapi_hypermedia/LinkProvider/EntityPublishedInterfaceLinkProvider.php
modules/contrib/jsonapi_hypermedia/examples/Plugin/jsonapi_hypermedia/LinkProvider/MutableResourceTypeLinkProvider.php
modules/contrib/jsonapi_hypermedia/examples/Plugin/jsonapi_hypermedia/LinkProvider/ResourceObjectEntityLoaderTrait.php
modules/contrib/jsonapi_hypermedia/src/AccessRestrictedLink.php
modules/contrib/jsonapi_hypermedia/src/Annotation/JsonapiHypermediaLinkProvider.php
modules/contrib/jsonapi_hypermedia/src/JsonapiHypermediaServiceProvider.php
modules/contrib/jsonapi_hypermedia/src/LinkProviderInterface.php
modules/contrib/jsonapi_hypermedia/src/Normalizer/JsonapiHypermediaImpostor/JsonapiHypermediaLinkCollectionNormalizer.php
modules/contrib/jsonapi_hypermedia/src/Plugin/LinkProviderBase.php
modules/contrib/jsonapi_hypermedia/src/Plugin/LinkProviderManager.php
modules/contrib/jsonapi_hypermedia/src/Plugin/LinkProviderManagerInterface.php
modules/contrib/jsonapi_hypermedia/tests/modules/jsonapi_hypermedia_test_link_providers/src/Plugin/Derivative/TestLinkProviderDeriver.php
modules/contrib/jsonapi_hypermedia/tests/modules/jsonapi_hypermedia_test_link_providers/src/Plugin/jsonapi_hypermedia/LinkProvider/TestLinkProvider.php
modules/contrib/jsonapi_hypermedia/tests/src/Functional/LinkProviderTest.php
modules/contrib/jsonapi_hypermedia/tests/src/Kernel/Normalizer/JsonapiHypermediaLinkCollectionNormalizerTest.php

12 files with changes
=====================

1) modules/contrib/jsonapi_hypermedia/tests/src/Kernel/Normalizer/JsonapiHypermediaLinkCollectionNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_hypermedia\Kernel\Normalizer;

+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Url;
@@ @@
   /**
    * The normalizer under test.
    *
-   * @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface
+   * @var NormalizerInterface
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->normalizer = $this->container->get('serializer.normalizer.link_collection.jsonapi');
     $this->normalizer->setSerializer($this->container->get('jsonapi.serializer'));
@@ @@
     $actual = $this->getNormalization($link_collection);
     $this->assertCount(2, $actual, var_export($actual, TRUE));
     $normalized_keys = array_keys($actual);
-    $this->assert(array_reduce($normalized_keys, function ($bool, $key) {
+    $this->assertTrue(array_reduce($normalized_keys, function ($bool, $key) {
       return $bool ? strpos($key, 'self--') === 0 : FALSE;
     }, TRUE), var_export($actual, TRUE));
     $this->assertSame([
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_hypermedia/tests/src/Functional/LinkProviderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_hypermedia\Functional;

+use Drupal\jsonapi_hypermedia\Plugin\LinkProviderManagerInterface;
+use Drupal\Core\State\StateInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * The link provider manager.
    *
-   * @var \Drupal\jsonapi_hypermedia\Plugin\LinkProviderManagerInterface
+   * @var LinkProviderManagerInterface
    */
   protected $linkManager;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     NodeType::create(['type' => 'article', 'name' => 'Article'])->save();
     $node = Node::create(['type' => 'article', 'title' => 'Test Node']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jsonapi_hypermedia/tests/modules/jsonapi_hypermedia_test_link_providers/src/Plugin/jsonapi_hypermedia/LinkProvider/TestLinkProvider.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Sets the current account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    */
   protected function setCurrentAccount(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/jsonapi_hypermedia/src/Plugin/LinkProviderManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_hypermedia\Plugin;

+use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
+use Drupal\jsonapi\JsonApiResource\ResourceObject;
+use Drupal\jsonapi\JsonApiResource\Relationship;
+use Drupal\jsonapi\JsonApiResource\LinkCollection;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;

@@ @@
   /**
    * Gets a LinkCollection of 3rd-party links for the given context object.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel|\Drupal\jsonapi\JsonApiResource\ResourceObject|\Drupal\jsonapi\JsonApiResource\Relationship $context
+   * @param JsonApiDocumentTopLevel|ResourceObject|Relationship $context
    *   The link context object.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The link collection.
    */
   public function getLinkCollection($context);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/jsonapi_hypermedia/src/Plugin/LinkProviderManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_hypermedia\Plugin;

+use Drupal\Core\Render\Renderer;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The link relation type manager.
    *
-   * @var \Drupal\Core\Http\LinkRelationTypeManager
+   * @var LinkRelationTypeManager
    */
   protected $linkRelationTypeManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Set the current route match.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function setCurrentRouteMatch(RouteMatchInterface $route_match) {
@@ @@
   /**
    * Set the link relation type manager.
    *
-   * @param \Drupal\Core\Http\LinkRelationTypeManager $link_relation_type_manager
+   * @param LinkRelationTypeManager $link_relation_type_manager
    *   The link relation type manager.
    */
   public function setLinkRelationTypeManager(LinkRelationTypeManager $link_relation_type_manager) {
@@ @@
   /**
    * Ensures that access cacheability is captured.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata|null $cacheability
+   * @param CacheableMetadata|null $cacheability
    *   The access related cacheability to be captured or NULL if there is none.
-   * @param \Drupal\jsonapi_hypermedia\AccessRestrictedLink $link
+   * @param AccessRestrictedLink $link
    *   The link for which to ensure access cacheability is captured.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\Link|null
+   * @return Link|null
    *   A JSON:API link or NULL if the given link is not accessible.
    */
   protected function ensureAccess(&$cacheability, AccessRestrictedLink $link) {
@@ @@
   /**
    * Gets a new, validated link.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\Link $link
+   * @param Link $link
    *   The link to validate.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\Link
+   * @return Link
    *   A new, validated link.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if a link relation type plugin is improperly defined.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown if a link relation type plugin could not be found.
    */
   protected function getValidatedLink(Link $link) {
@@ @@
   /**
    * Bubbles access-related cacheability of the link.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata|null $cacheability
+   * @param CacheableMetadata|null $cacheability
    *   The access related cacheability to be captured or NULL if there is none.
    *
    * @todo: removes this once https://www.drupal.org/project/drupal/issues/3055889 lands.
@@ @@
   /**
    * Gets the context type.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel|\Drupal\jsonapi\JsonApiResource\ResourceObject|\Drupal\jsonapi\JsonApiResource\Relationship $context
+   * @param JsonApiDocumentTopLevel|ResourceObject|Relationship $context
    *   The context object from which links should be generated.
    *
    * @return string
@@ @@
   /**
    * Gets the link provider definitions applicable to the given context object.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel|\Drupal\jsonapi\JsonApiResource\ResourceObject $context
+   * @param JsonApiDocumentTopLevel|ResourceObject $context
    *   The link context object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/jsonapi_hypermedia/src/Normalizer/JsonapiHypermediaImpostor/JsonapiHypermediaLinkCollectionNormalizer.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The link provider plugin manager service.
    *
-   * @var \Drupal\jsonapi_hypermedia\Plugin\LinkProviderManagerInterface
+   * @var LinkProviderManagerInterface
    */
   protected $linkProviderManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Sets the link provider manager service.
    *
-   * @param \Drupal\jsonapi_hypermedia\Plugin\LinkProviderManagerInterface $link_provider_manager
+   * @param LinkProviderManagerInterface $link_provider_manager
    *   The link provider manager.
    */
   public function setLinkProviderManager(LinkProviderManagerInterface $link_provider_manager) {
@@ @@
   /**
    * Set the renderer.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function setRenderer(RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jsonapi_hypermedia/src/LinkProviderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_hypermedia;

+use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
+use Drupal\jsonapi\JsonApiResource\ResourceObject;
+use Drupal\jsonapi\JsonApiResource\Relationship;
 /**
  * Interface LinkProviderInterface.
  *
@@ @@
   /**
    * Adds, alters or removes hyperlinks from a link collection.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel|\Drupal\jsonapi\JsonApiResource\ResourceObject|\Drupal\jsonapi\JsonApiResource\Relationship $context
+   * @param JsonApiDocumentTopLevel|ResourceObject|Relationship $context
    *   The context object from which links should be generated.
    *
-   * @return \Drupal\jsonapi_hypermedia\AccessRestrictedLink
+   * @return AccessRestrictedLink
    *   A link to be added to the context object. An AccessRestrictedLink
    *   should be returned if the link target may be inaccessible to some users.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/jsonapi_hypermedia/src/AccessRestrictedLink.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The access result for the link, if one was provided.
    *
-   * @var \Drupal\Core\Access\AccessResultInterface|null
+   * @var AccessResultInterface|null
    */
   protected $accessResult;

@@ @@
   /**
    * AccessRestrictedLink constructor.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $access_result
+   * @param AccessResultInterface $access_result
    *   An access result.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $link_cacheability
+   * @param CacheableDependencyInterface $link_cacheability
    *   (optional) Cacheability of the generated link.
-   * @param \Drupal\Core\Url $target
+   * @param Url $target
    *   (optional) The link URL.
    * @param string $link_relation_type
    *   (optional) The link's relation type.
    * @param array $target_attributes
    *   (optional) The link's target attributes.
-   * @param \Drupal\Core\Url|null $context
+   * @param Url|null $context
    *   (optional) The link's context. NULL if the default context shouldn't be
    *   overridden.
    */
@@ @@
    * instead of this one does not require as many arguments and therefore does
    * not require the caller to construct a phony URL.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $access_result
+   * @param AccessResultInterface $access_result
    *   The link access result. This is typically an access result related
    *   to whether the current user is able to follow the link or not. Don't
    *   forget to add cacheability information to the result as necessary.
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $link_cacheability
+   * @param CacheableDependencyInterface $link_cacheability
    *   The cacheability of the generated link. This is typically cacheability
    *   related to the URL, the link relation types, or the link's target
    *   attributes. For example, a link might use the `hreflang` target
@@ @@
    *   so the link's cacheability might have a cache context related to the
    *   current language as well as a cache tag that would be invalidated when a
    *   new translation is added.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The link URL.
    * @param string $link_relation_type
    *   The link's relation type.
    * @param array $target_attributes
    *   (optional) The link's target attributes.
-   * @param \Drupal\Core\Url $context
+   * @param Url $context
    *   (optional) The link's context. This will override the default link
    *   context via an `anchor` link param. The default context is derived from a
    *   link's location in the response document.
@@ @@
    * current user might not have sufficient permissions to publish the resource
    * object; this is also a valid reason for creating an inaccessible link.
    *
-   * @param \Drupal\Core\Cache\CacheableDependencyInterface $access_cacheability
+   * @param CacheableDependencyInterface $access_cacheability
    *   The link access cacheability. This is typically an access result related
    *   to whether the current user is able to follow the link or not.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/jsonapi_hypermedia/examples/Plugin/jsonapi_hypermedia/LinkProvider/ResourceObjectEntityLoaderTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_hypermedia\Plugin\jsonapi_hypermedia\LinkProvider;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\jsonapi\JsonApiResource\ResourceObject;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Sets the entity repository.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
    */
   protected function setEntityRepository(EntityRepositoryInterface $entity_repository) {
@@ @@
   /**
    * Gets the entity represented by the given resource object.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $resource_object
+   * @param ResourceObject $resource_object
    *   The resource object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The represented entity or NULL if the entity does not exist.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown in case the requested entity type does not support UUIDs.
    */
   public function loadEntityFromResourceObject(ResourceObject $resource_object) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/jsonapi_hypermedia/examples/Plugin/jsonapi_hypermedia/LinkProvider/AuthenticationLinkProvider.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The current account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Sets the current account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current account.
    */
   public function setCurrentUser(AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/jsonapi_hypermedia/examples/Plugin/Derivative/MutableResourceTypeLinkProviderDeriver.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * MutableResourceTypeLinkProviderDeriver constructor.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
    */
   public function __construct(ResourceTypeRepositoryInterface $resource_type_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/jsonapi_hypermedia/examples/Plugin/Derivative/EntityPublishedInterfaceLinkProviderDeriver.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityPublishedLinkProvider constructor.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ResourceTypeRepositoryInterface $resource_type_repository, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

