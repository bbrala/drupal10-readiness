diff --git a/pluggable_entity_view_builder_example/src/Plugin/EntityViewBuilder/NodeArticle.php b/pluggable_entity_view_builder_example/src/Plugin/EntityViewBuilder/NodeArticle.php
index 12f8bd4..fb7e8b2 100644
--- a/pluggable_entity_view_builder_example/src/Plugin/EntityViewBuilder/NodeArticle.php
+++ b/pluggable_entity_view_builder_example/src/Plugin/EntityViewBuilder/NodeArticle.php
@@ -29,7 +29,7 @@ class NodeArticle extends EntityViewBuilderPluginAbstract {
    *
    * @param array $build
    *   The existing build.
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity.
    *
    * @return array
@@ -69,7 +69,7 @@ class NodeArticle extends EntityViewBuilderPluginAbstract {
    *
    * @param array $build
    *   The existing build.
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity.
    *
    * @return array
@@ -104,7 +104,7 @@ class NodeArticle extends EntityViewBuilderPluginAbstract {
   /**
    * Get common elements for the view modes.
    *
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity.
    *
    * @return array
@@ -124,7 +124,7 @@ class NodeArticle extends EntityViewBuilderPluginAbstract {
   /**
    * Build the Hero Header section, with Title, and Background Image.
    *
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity.
    * @param string $image_field_name
    *   Optional; The field name. Defaults to "field_image".
@@ -147,7 +147,7 @@ class NodeArticle extends EntityViewBuilderPluginAbstract {
   /**
    * Build the content tags section.
    *
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity.
    * @param string $field_name
    *   Optional; The term reference field name. Defaults to "field_tags".
@@ -170,7 +170,7 @@ class NodeArticle extends EntityViewBuilderPluginAbstract {
   /**
    * Build a list of tags.
    *
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity.
    * @param string $field_name
    *   Optional; The term reference field name. Defaults to "field_tags".
diff --git a/pluggable_entity_view_builder_example/src/ProcessedTextBuilderTrait.php b/pluggable_entity_view_builder_example/src/ProcessedTextBuilderTrait.php
index ad62efd..6a0d958 100644
--- a/pluggable_entity_view_builder_example/src/ProcessedTextBuilderTrait.php
+++ b/pluggable_entity_view_builder_example/src/ProcessedTextBuilderTrait.php
@@ -14,7 +14,7 @@ trait ProcessedTextBuilderTrait {
   /**
    * Build the comments and comment from of a node.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ -32,7 +32,7 @@ trait ProcessedTextBuilderTrait {
   /**
    * Build a (processed) text of the content.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $field
    *   Optional; The name of the field. Defaults to "body".
diff --git a/pluggable_entity_view_builder_example/src/TagBuilderTrait.php b/pluggable_entity_view_builder_example/src/TagBuilderTrait.php
index f849fa8..ed10c11 100644
--- a/pluggable_entity_view_builder_example/src/TagBuilderTrait.php
+++ b/pluggable_entity_view_builder_example/src/TagBuilderTrait.php
@@ -16,7 +16,7 @@ trait TagBuilderTrait {
   /**
    * Build a single tag.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The Term to render.
    *
    * @return array
diff --git a/pluggable_entity_view_builder_paragraphs_example/pluggable_entity_view_builder_paragraphs_example.install b/pluggable_entity_view_builder_paragraphs_example/pluggable_entity_view_builder_paragraphs_example.install
index 0f359bd..79dea27 100644
--- a/pluggable_entity_view_builder_paragraphs_example/pluggable_entity_view_builder_paragraphs_example.install
+++ b/pluggable_entity_view_builder_paragraphs_example/pluggable_entity_view_builder_paragraphs_example.install
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 /**
  * @file
  * Install functionality.
  */
-
 /**
  * Implements hook_install().
  *
@@ -14,7 +14,7 @@
  * to put the field on the Article node's edit form.
  */
 function pluggable_entity_view_builder_paragraphs_example_install() {
-  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repo */
+  /** @var EntityDisplayRepositoryInterface $entity_display_repo */
   $entity_display_repo = \Drupal::service('entity_display.repository');
   $form_display = $entity_display_repo->getFormDisplay('node', 'article', 'default');
   $form_display->setComponent('field_paragraphs', [
diff --git a/src/Annotation/EntityViewBuilder.php b/src/Annotation/EntityViewBuilder.php
index 553dc65..21a3625 100644
--- a/src/Annotation/EntityViewBuilder.php
+++ b/src/Annotation/EntityViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pluggable_entity_view_builder\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -13,7 +14,7 @@ class EntityViewBuilder extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/BlockContentViewBuilder.php b/src/BlockContentViewBuilder.php
index f51b5a0..e4c1201 100644
--- a/src/BlockContentViewBuilder.php
+++ b/src/BlockContentViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pluggable_entity_view_builder;
 
+use Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\block_content\BlockContentViewBuilder as CoreBlockContentViewBuilder;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class BlockContentViewBuilder extends CoreBlockContentViewBuilder {
   /**
    * The entity view builder service.
    *
-   * @var \Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager
+   * @var EntityViewBuilderPluginManager
    */
   protected $entityViewBuilderPluginManager;
 
diff --git a/src/BuildBlockTrait.php b/src/BuildBlockTrait.php
index 2f24f97..6c4d12c 100644
--- a/src/BuildBlockTrait.php
+++ b/src/BuildBlockTrait.php
@@ -2,14 +2,21 @@
 
 namespace Drupal\pluggable_entity_view_builder;
 
+use Drupal\Core\Block\BlockManager;
+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Embed Block and block content helpers.
  *
- * @property \Drupal\Core\Block\BlockManager $blockManager
- * @property \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
- * @property \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
- * @property \Drupal\Core\Session\AccountInterface $currentUser
- * @property \Drupal\Core\Language\LanguageManagerInterface $languageManager
+ * @property BlockManager $blockManager
+ * @property EntityRepositoryInterface $entityRepository
+ * @property EntityTypeManagerInterface $entityTypeManager
+ * @property AccountInterface $currentUser
+ * @property LanguageManagerInterface $languageManager
  *
  * To use this trait it is assumed above services are present. You may use the
  * following `create` method in your PEVB plugin, in order to have them.
@@ -38,7 +45,7 @@ trait BuildBlockTrait {
    * @return array
    *   The render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildBlock(string $block_id, array $config = []) : array {
     $plugin_block = $this->blockManager->createInstance($block_id, $config);
@@ -69,7 +76,7 @@ trait BuildBlockTrait {
    * @return array
    *   The render array.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function buildContentBlock(string $uuid, array $title = [], string $langcode = NULL) : array {
     $block = $this->entityRepository->loadEntityByUuid('block_content', $uuid);
diff --git a/src/BuildFieldTrait.php b/src/BuildFieldTrait.php
index 1efc7f3..8eadd0c 100644
--- a/src/BuildFieldTrait.php
+++ b/src/BuildFieldTrait.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\pluggable_entity_view_builder;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList;
+use Drupal\Core\Datetime\DrupalDateTime;
+use Drupal\media\MediaInterface;
+use Drupal\file\FileInterface;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -13,7 +19,7 @@ use Drupal\image\Entity\ImageStyle;
 /**
  * Common methods for all field-able content entities' view builders.
  *
- * @property \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+ * @property EntityTypeManagerInterface $entityTypeManager
  */
 trait BuildFieldTrait {
 
@@ -23,7 +29,7 @@ trait BuildFieldTrait {
    * Suitable for plain text fields mostly, but can work with any fields which
    * return string values.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name to get the value of.
@@ -43,7 +49,7 @@ trait BuildFieldTrait {
    *
    * Suitable for text list fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name to get the value of.
@@ -78,7 +84,7 @@ trait BuildFieldTrait {
   /**
    * Get the value of a boolean field on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name to get the value of.
@@ -95,7 +101,7 @@ trait BuildFieldTrait {
    *
    * Note that this is compatible with a single date field, not with date_range.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The name of the single date field.
@@ -109,12 +115,12 @@ trait BuildFieldTrait {
     if ($entity->get($field_name)->isEmpty()) {
       return '';
     }
-    /** @var \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $date_field */
+    /** @var DateTimeFieldItemList $date_field */
     $date_field = $entity->get($field_name);
     if (!isset($date_field->date)) {
       return '';
     }
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
+    /** @var DrupalDateTime $date */
     $date = $date_field->date;
     return $date->format($date_format);
   }
@@ -122,7 +128,7 @@ trait BuildFieldTrait {
   /**
    * Get the URL and title of a link field on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The link field name.
@@ -151,7 +157,7 @@ trait BuildFieldTrait {
   /**
    * Get the array with the (styled) URL of an image on a media field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The media field name.
@@ -168,7 +174,7 @@ trait BuildFieldTrait {
     }
 
     // Get the Media entity.
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->getReferencedEntityFromField($entity, $field_name);
     if (empty($media)) {
       // No media found, or no access to view it.
@@ -176,7 +182,7 @@ trait BuildFieldTrait {
     }
 
     // Get the Image entity from Media.
-    /** @var \Drupal\file\FileInterface $image */
+    /** @var FileInterface $image */
     $image = $this->getReferencedEntityFromField($media, 'field_media_image');
 
     if (empty($image)) {
@@ -191,12 +197,12 @@ trait BuildFieldTrait {
     // Generate image url or image style url if we have it.
     if (!empty($image_style)) {
       // Get the image style.
-      /** @var \Drupal\image\ImageStyleInterface $image_style */
+      /** @var ImageStyleInterface $image_style */
       $style = ImageStyle::load($image_style);
       $url = $style->buildUrl($image->getFileUri());
     }
     else {
-      $url = file_create_url($image->getFileUri());
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($image->getFileUri());
     }
 
     return [
@@ -209,17 +215,17 @@ trait BuildFieldTrait {
   /**
    * Get the image field from a media entity on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The name of the media field.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The image field on the media entity.
    */
   protected function getImageFieldFromMediaEntity(ContentEntityInterface $entity, string $field_name): ?FieldItemListInterface {
     // Get the media entity.
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->getReferencedEntityFromField($entity, $field_name);
     if (empty($media) || $media->field_media_image->isEmpty() || empty($media->field_media_image->entity)) {
       return NULL;
@@ -230,18 +236,18 @@ trait BuildFieldTrait {
   /**
    * Get a referenced entity from a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The reference field name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The referenced entity or null if the field is empty or the entity isn't
    *   found, or the current user has no access to view the entity.
    */
   protected function getReferencedEntityFromField(ContentEntityInterface $entity, string $field_name): ?EntityInterface {
     // Get the media entity.
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field */
+    /** @var EntityReferenceFieldItemListInterface $field */
     $field = $entity->get($field_name);
     if ($field->isEmpty() || empty($field->entity) || !$field->entity->access('view')) {
       // Field is empty or referenced entity has been deleted, or no access.
@@ -253,7 +259,7 @@ trait BuildFieldTrait {
   /**
    * Build an image referenced in the given entity's given field name.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   Optional; The field name. Defaults to "field_image".
@@ -277,7 +283,7 @@ trait BuildFieldTrait {
   /**
    * Build a styled image referenced in the given entity's given field name.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $image_style
    *   The image style.
@@ -304,7 +310,7 @@ trait BuildFieldTrait {
   /**
    * Get image and alt from a File field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   Optional; The field name. Defaults to "field_image".
@@ -321,7 +327,7 @@ trait BuildFieldTrait {
       return NULL;
     }
 
-    /** @var \Drupal\file\FileInterface $image */
+    /** @var FileInterface $image */
     $image = $this->getReferencedEntityFromField($entity, $field_name);
     if (empty($image)) {
       // Image doesn't exist, or no access to it.
@@ -332,12 +338,12 @@ trait BuildFieldTrait {
 
     if (!empty($image_style)) {
       // Get the image style.
-      /** @var \Drupal\image\ImageStyleInterface $image_style */
+      /** @var ImageStyleInterface $image_style */
       $style = ImageStyle::load($image_style);
       $url = $style->buildUrl($uri);
     }
     else {
-      $url = file_create_url($uri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     }
 
     return [
@@ -352,7 +358,7 @@ trait BuildFieldTrait {
    *
    * Note: Responsive Image core module is required for this to work.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
@@ -367,14 +373,14 @@ trait BuildFieldTrait {
     if ($entity->get($field_name)->isEmpty()) {
       return [];
     }
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->getReferencedEntityFromField($entity, $field_name);
     if (empty($media)) {
       // No media to display.
       return [];
     }
 
-    /** @var \Drupal\file\FileInterface $image */
+    /** @var FileInterface $image */
     $image = $this->getReferencedEntityFromField($media, 'field_media_image');
     if (empty($image)) {
       // Image doesn't exist, or no access to it.
@@ -400,7 +406,7 @@ trait BuildFieldTrait {
   /**
    * Build entities in given view mode.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   An array of entities.
    * @param string $view_mode
    *   Optional; The view mode to build. Defaults to "full".
@@ -433,7 +439,7 @@ trait BuildFieldTrait {
   /**
    * Build entities in given view mode, from a reference field.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface|null $reference_field
+   * @param EntityReferenceFieldItemListInterface|null $reference_field
    *   The field object where the referenced items are stored.
    * @param string $view_mode
    *   Optional; The view mode to build. Defaults to "full".
diff --git a/src/CommentViewBuilder.php b/src/CommentViewBuilder.php
index fdc0681..bbb991c 100644
--- a/src/CommentViewBuilder.php
+++ b/src/CommentViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pluggable_entity_view_builder;
 
+use Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\comment\CommentViewBuilder as CoreCommentViewBuilder;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class CommentViewBuilder extends CoreCommentViewBuilder {
   /**
    * The entity view builder service.
    *
-   * @var \Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager
+   * @var EntityViewBuilderPluginManager
    */
   protected $entityViewBuilderPluginManager;
 
diff --git a/src/EntityViewBuilder.php b/src/EntityViewBuilder.php
index bc50f81..37e6757 100644
--- a/src/EntityViewBuilder.php
+++ b/src/EntityViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pluggable_entity_view_builder;
 
+use Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityViewBuilder as CoreEntityViewBuilder;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class EntityViewBuilder extends CoreEntityViewBuilder {
   /**
    * The entity view builder service.
    *
-   * @var \Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager
+   * @var EntityViewBuilderPluginManager
    */
   protected $entityViewBuilderPluginManager;
 
diff --git a/src/EntityViewBuilder/EntityViewBuilderPluginInterface.php b/src/EntityViewBuilder/EntityViewBuilderPluginInterface.php
index 9ce8bc6..f1e66ee 100644
--- a/src/EntityViewBuilder/EntityViewBuilderPluginInterface.php
+++ b/src/EntityViewBuilder/EntityViewBuilderPluginInterface.php
@@ -16,7 +16,7 @@ interface EntityViewBuilderPluginInterface extends ContainerFactoryPluginInterfa
    *
    * @param array $build
    *   The existing render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to show.
    * @param string $view_mode
    *   The view mode.
diff --git a/src/EntityViewBuilderPluginAbstract.php b/src/EntityViewBuilderPluginAbstract.php
index bd56163..7494bc2 100644
--- a/src/EntityViewBuilderPluginAbstract.php
+++ b/src/EntityViewBuilderPluginAbstract.php
@@ -20,14 +20,14 @@ abstract class EntityViewBuilderPluginAbstract extends PluginBase implements Ent
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -40,9 +40,9 @@ abstract class EntityViewBuilderPluginAbstract extends PluginBase implements Ent
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user) {
diff --git a/src/EntityViewBuilderTrait.php b/src/EntityViewBuilderTrait.php
index 882ffa5..9e739f2 100644
--- a/src/EntityViewBuilderTrait.php
+++ b/src/EntityViewBuilderTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\pluggable_entity_view_builder;
 
+use Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\pluggable_entity_view_builder\Exception\ViewModeNotFoundException;
@@ -16,7 +19,7 @@ use Drupal\pluggable_entity_view_builder\Exception\ViewModeNotFoundException;
  * the render array, and if we'd need another module's work - we'd call it
  * manually.
  *
- * @property \Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager $entityViewBuilderPluginManager
+ * @property EntityViewBuilderPluginManager $entityViewBuilderPluginManager
  */
 trait EntityViewBuilderTrait {
 
@@ -90,7 +93,7 @@ trait EntityViewBuilderTrait {
    *   - 'plugin_used': TRUE if an Entity view builder plugin was used to create
    *   the render array, otherwise FALSE.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function doBuild(array $build) {
     $no_change = [
@@ -103,13 +106,13 @@ trait EntityViewBuilderTrait {
     if (!empty($build['#entity_type'])) {
       $entity_type = $build['#entity_type'];
 
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $build['#' . $entity_type];
     }
     else {
       foreach ($build as $row) {
         if ($row instanceof EntityInterface) {
-          /** @var \Drupal\Core\Entity\EntityInterface $entity */
+          /** @var EntityInterface $entity */
           $entity = $row;
           break;
         }
@@ -136,7 +139,7 @@ trait EntityViewBuilderTrait {
       return $no_change;
     }
 
-    /** @var \Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginInterface $plugin */
+    /** @var EntityViewBuilderPluginInterface $plugin */
     $plugin = $this->entityViewBuilderPluginManager->createInstance($plugin_id);
     $view_mode = $build['#view_mode'];
     try {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 7bdd33f..5650cf2 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pluggable_entity_view_builder\Form;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -15,7 +16,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/NodeViewBuilder.php b/src/NodeViewBuilder.php
index 5c5d184..75e6b26 100644
--- a/src/NodeViewBuilder.php
+++ b/src/NodeViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pluggable_entity_view_builder;
 
+use Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\node\NodeViewBuilder as CoreNodeViewBuilder;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class NodeViewBuilder extends CoreNodeViewBuilder {
   /**
    * The entity view builder service.
    *
-   * @var \Drupal\pluggable_entity_view_builder\EntityViewBuilder\EntityViewBuilderPluginManager
+   * @var EntityViewBuilderPluginManager
    */
   protected $entityViewBuilderPluginManager;
 
diff --git a/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/EntityTestMul.php b/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/EntityTestMul.php
index 111424d..0c65ec4 100644
--- a/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/EntityTestMul.php
+++ b/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/EntityTestMul.php
@@ -25,7 +25,7 @@ class EntityTestMul extends EntityViewBuilderPluginAbstract {
    *
    * @param array $build
    *   The build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
diff --git a/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/NodeArticle.php b/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/NodeArticle.php
index 6828f83..5d0c59f 100644
--- a/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/NodeArticle.php
+++ b/tests/modules/pluggable_entity_view_builder_test/src/Plugin/EntityViewBuilder/NodeArticle.php
@@ -25,7 +25,7 @@ class NodeArticle extends EntityViewBuilderPluginAbstract {
    *
    * @param array $build
    *   The build array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
diff --git a/tests/src/Kernel/NodeOverrideTest.php b/tests/src/Kernel/NodeOverrideTest.php
index 5a4a84e..1a417d9 100644
--- a/tests/src/Kernel/NodeOverrideTest.php
+++ b/tests/src/Kernel/NodeOverrideTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\pluggable_entity_view_builder\Kernel;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\EntityViewTrait;
@@ -79,7 +80,7 @@ class NodeOverrideTest extends KernelTestBase {
    * Tests the render array result of an overridden bundle.
    */
   public function testRenderArray() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
 
     $settings = [
diff --git a/tests/src/Kernel/ReferencedEntityViewBuilderTest.php b/tests/src/Kernel/ReferencedEntityViewBuilderTest.php
index ff71b6d..3eb9979 100644
--- a/tests/src/Kernel/ReferencedEntityViewBuilderTest.php
+++ b/tests/src/Kernel/ReferencedEntityViewBuilderTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\pluggable_entity_view_builder\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\node\NodeInterface;
@@ -42,35 +45,35 @@ class ReferencedEntityViewBuilderTest extends EntityKernelTestBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * Test entity 1.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $testEntity1;
 
   /**
    * Test entity 2.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $testEntity2;
 
   /**
    * Test entity 3.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $testEntity3;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
diff --git a/tests/src/Kernel/TranslatedEntityViewBuilderTest.php b/tests/src/Kernel/TranslatedEntityViewBuilderTest.php
index c51d3e6..73e928d 100644
--- a/tests/src/Kernel/TranslatedEntityViewBuilderTest.php
+++ b/tests/src/Kernel/TranslatedEntityViewBuilderTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\pluggable_entity_view_builder\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\KernelTests\Core\Entity\EntityLanguageTestBase;
 use Drupal\Tests\EntityViewTrait;
 use Drupal\user\Entity\Role;
@@ -32,28 +35,28 @@ class TranslatedEntityViewBuilderTest extends EntityLanguageTestBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * Test entity 1.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $testEntity1;
 
   /**
    * Test entity 2.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $testEntity2;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
