modules/contrib/o365/modules/o365_contacts/o365_contacts.module
modules/contrib/o365/modules/o365_contacts/src/Controller/O365ContactsController.php
modules/contrib/o365/modules/o365_contacts/src/Form/SearchContactForm.php
modules/contrib/o365/modules/o365_contacts/src/Plugin/Block/SearchContactBlock.php
modules/contrib/o365/modules/o365_groups/o365_groups.install
modules/contrib/o365/modules/o365_groups/o365_groups.module
modules/contrib/o365/modules/o365_groups/src/Access/O365GroupsFilesControllerAccessCheck.php
modules/contrib/o365/modules/o365_groups/src/Controller/O365GroupsFilesController.php
modules/contrib/o365/modules/o365_groups/src/GroupFilesService.php
modules/contrib/o365/modules/o365_groups/src/GroupsService.php
modules/contrib/o365/modules/o365_links/o365_links.module
modules/contrib/o365/modules/o365_links/src/Form/SettingsForm.php
modules/contrib/o365/modules/o365_links/src/O365CacheInvalidator.php
modules/contrib/o365/modules/o365_links/src/O365LinksConstants.php
modules/contrib/o365/modules/o365_links/src/Plugin/Block/O365LinksBlock.php
modules/contrib/o365/modules/o365_onedrive/o365_onedrive.module
modules/contrib/o365/modules/o365_onedrive/src/Controller/OneDriveListController.php
modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersService.php
modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersServiceInterface.php
modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/RecentFilesBlock.php
modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/SharedFilesBlock.php
modules/contrib/o365/modules/o365_outlook_calendar/o365_outlook_calendar.install
modules/contrib/o365/modules/o365_outlook_calendar/o365_outlook_calendar.module
modules/contrib/o365/modules/o365_outlook_calendar/src/Controller/OutlookCalendarSaveAjaxController.php
modules/contrib/o365/modules/o365_outlook_calendar/src/Form/OutlookCalendarSettingsForm.php
modules/contrib/o365/modules/o365_outlook_calendar/src/OutlookCalendarSaveEventService.php
modules/contrib/o365/modules/o365_outlook_calendar/src/Plugin/Block/AddToCalendarBlock.php
modules/contrib/o365/modules/o365_outlook_calendar/src/Plugin/Block/CalendarBlock.php
modules/contrib/o365/modules/o365_outlook_mail/o365_outlook_mail.install
modules/contrib/o365/modules/o365_outlook_mail/o365_outlook_mail.module
modules/contrib/o365/modules/o365_outlook_mail/src/Controller/MyMailController.php
modules/contrib/o365/modules/o365_outlook_mail/src/GetMailService.php
modules/contrib/o365/modules/o365_outlook_mail/src/GetMailServiceInterface.php
modules/contrib/o365/modules/o365_outlook_mail/src/Plugin/Block/LatestMailBlock.php
modules/contrib/o365/modules/o365_outlook_mail/src/Plugin/Block/LatestUnreadMailBlock.php
modules/contrib/o365/modules/o365_profile/o365_profile.module
modules/contrib/o365/modules/o365_profile/o365_profile.views.inc
modules/contrib/o365/modules/o365_profile/src/Controller/O365ProfileAjaxController.php
modules/contrib/o365/modules/o365_profile/src/Form/O365ProfileTeamsLinksConfigForm.php
modules/contrib/o365/modules/o365_profile/src/O365ProfileGetDataService.php
modules/contrib/o365/modules/o365_profile/src/O365ProfileTeamsService.php
modules/contrib/o365/modules/o365_profile/src/Plugin/Block/PersonaBlock.php
modules/contrib/o365/modules/o365_profile/src/Plugin/Block/TeamsLinksBlock.php
modules/contrib/o365/modules/o365_profile/src/Plugin/views/field/CallViaTeamsViewsField.php
modules/contrib/o365/modules/o365_profile_rest/o365_profile_rest.install
modules/contrib/o365/modules/o365_profile_rest/src/Plugin/rest/resource/O365ProfileRestResource.php
modules/contrib/o365/modules/o365_rest/src/Plugin/rest/resource/GetAccessTokenResource.php
modules/contrib/o365/modules/o365_sharepoint_field/o365_sharepoint_field.module
modules/contrib/o365/modules/o365_sharepoint_field/src/Controller/O365SharepointFieldController.php
modules/contrib/o365/modules/o365_sharepoint_field/src/Form/CkEditorDialog.php
modules/contrib/o365/modules/o365_sharepoint_field/src/Plugin/CKEditorPlugin/SharePoint.php
modules/contrib/o365/modules/o365_sharepoint_field/src/Plugin/Field/FieldFormatter/SharePointSearchDefaultFormatter.php
modules/contrib/o365/modules/o365_sharepoint_field/src/Plugin/Field/FieldType/SharePointSearchItem.php
modules/contrib/o365/modules/o365_sharepoint_field/src/Plugin/Field/FieldWidget/SharePointSearchWidget.php
modules/contrib/o365/modules/o365_sharepoint_file/o365_sharepoint_file.module
modules/contrib/o365/modules/o365_sharepoint_file/src/Controller/O365SharepointController.php
modules/contrib/o365/modules/o365_sharepoint_file/src/Form/SearchSharepointForm.php
modules/contrib/o365/modules/o365_sharepoint_file/src/Plugin/Block/SharepointSearchBlock.php
modules/contrib/o365/modules/o365_sso/o365_sso.install
modules/contrib/o365/modules/o365_sso/o365_sso.module
modules/contrib/o365/modules/o365_sso/src/Controller/LoginCallbackController.php
modules/contrib/o365/modules/o365_sso/src/Controller/LoginController.php
modules/contrib/o365/modules/o365_sso/src/Controller/UserLoginController.php
modules/contrib/o365/modules/o365_sso/src/Form/SettingsForm.php
modules/contrib/o365/modules/o365_sso/src/Routing/UserLoginFormRouteSubscriber.php
modules/contrib/o365/modules/o365_sso_user/o365_sso_user.install
modules/contrib/o365/modules/o365_sso_user/src/EventSubscriber/UserLoginEventSubscriber.php
modules/contrib/o365/modules/o365_sso_user/src/Form/SettingsForm.php
modules/contrib/o365/modules/o365_sso_user/src/SsoUserSync.php
modules/contrib/o365/modules/o365_teams/o365_teams.module
modules/contrib/o365/modules/o365_teams/src/Controller/TeamsRecipientAutocompleteController.php
modules/contrib/o365/modules/o365_teams/src/Form/O365TeamsSendMessageForm.php
modules/contrib/o365/modules/o365_teams/src/O365TeamsSendMessageService.php
modules/contrib/o365/o365.api.php
modules/contrib/o365/o365.install
modules/contrib/o365/o365.module
modules/contrib/o365/src/AuthenticationService.php
modules/contrib/o365/src/AuthenticationServiceInterface.php
modules/contrib/o365/src/Block/O365BlockBase.php
modules/contrib/o365/src/Block/O365UncachedBlockBase.php
modules/contrib/o365/src/ConstantsService.php
modules/contrib/o365/src/Controller/O365AuthScopesController.php
modules/contrib/o365/src/Form/ApiSettingsForm.php
modules/contrib/o365/src/Form/SettingsForm.php
modules/contrib/o365/src/GraphService.php
modules/contrib/o365/src/HelperService.php
modules/contrib/o365/src/O365LoggerService.php
modules/contrib/o365/src/O365LoggerServiceInterface.php
modules/contrib/o365/src/PersonaRenderService.php
modules/contrib/o365/src/Plugin/Oauth2Client/O365OAuth2Client.php

58 files with changes
=====================

1) modules/contrib/o365/src/O365LoggerServiceInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Log a debug message into the watchdog.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param TranslatableMarkup $message
    *   The translatable message.
    */
   public function debug(TranslatableMarkup $message);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/o365/src/O365LoggerService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The drupal messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new O365LoggerService object.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The LoggerChannelFactoryInterface definition.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The Messenger definition.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory, Messenger $messenger) {
@@ @@
   /**
    * Render a drupal message.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|string $message
+   * @param TranslatableMarkup|string $message
    *   The message to print.
    * @param string $severity
    *   The severity of the message.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/o365/src/HelperService.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Datetime\DateFormatterInterface definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new HelperService object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The DateFormatterInterface definition.
    */
   public function __construct(DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/o365/src/GraphService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use GuzzleHttp\Exception\GuzzleException;
+use Microsoft\Graph\Http\GraphResponse;
+use Microsoft\Graph\Http\GraphRequest;
+use Microsoft\Graph\Http\GraphCollectionRequest;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use GuzzleHttp\Exception\ClientException;
@@ @@
   /**
    * Drupal\o365\AuthenticationServiceInterface definition.
    *
-   * @var \Drupal\o365\AuthenticationServiceInterface
+   * @var AuthenticationServiceInterface
    */
   protected $authService;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\o365\O365LoggerServiceInterface
+   * @var O365LoggerServiceInterface
    */
   protected $messenger;

@@ @@
   /**
    * The cache baclend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The modules logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new GraphService object.
    *
-   * @param \Drupal\o365\AuthenticationServiceInterface $authenticationService
+   * @param AuthenticationServiceInterface $authenticationService
    *   The AuthenticationServiceInterface definition.
-   * @param \Drupal\o365\O365LoggerServiceInterface $messenger
+   * @param O365LoggerServiceInterface $messenger
    *   The O365LoggerServiceInterface definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The CacheBackendInterface definition.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   The logger channel factory. Used to log to the watchdog.
    */
   public function __construct(AuthenticationServiceInterface $authenticationService, O365LoggerServiceInterface $messenger, CacheBackendInterface $cacheBackend, LoggerChannelFactoryInterface $loggerChannelFactory) {
@@ @@
    * @return mixed
    *   The data retrieved from the Graph API.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException|\GuzzleHttp\Exception\GuzzleException
+   * @throws TempStoreException
+   * @throws IdentityProviderException|GuzzleException
    */
   public function getGraphData($endpoint, $type = 'GET', $raw = FALSE, $version = FALSE, $returnType = FALSE) {
     return $this->getData($endpoint, $type, $raw, $version, [], $returnType);
@@ @@
    * @return mixed
    *   The data retrieved from the Graph API.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException|\GuzzleHttp\Exception\GuzzleException
+   * @throws TempStoreException
+   * @throws IdentityProviderException|GuzzleException
    */
   public function sendGraphData($endpoint, array $data = [], $type = 'POST', $raw = FALSE, $version = FALSE) {
     return $this->getData($endpoint, $type, $raw, $version, $data);
@@ @@
    * @return array|false|string|null
    *   The retrieved data from the GRAPH API.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   private function getData($endpoint, $type = 'GET', $raw = FALSE, $version = FALSE, array $data = [], $returnType = FALSE) {
     // Get the data from the Graph API.
@@ @@
       $graph->setAccessToken($accessToken);

       if ($type === 'POST') {
-        /** @var \Microsoft\Graph\Http\GraphResponse $request */
+        /** @var GraphResponse $request */
         $request = $graph->createRequest($type, $endpoint)->attachBody($data)
           ->execute();
       }
       else {
         if ($returnType) {
-          /** @var \Microsoft\Graph\Http\GraphRequest $request */
+          /** @var GraphRequest $request */
           $request = $graph->createRequest($type, $endpoint)
             ->setReturnType($returnType);
           return $request->execute();
         }

-        /** @var \Microsoft\Graph\Http\GraphRequest $request */
+        /** @var GraphRequest $request */
         $request = $graph->createRequest($type, $endpoint)->execute();
       }

@@ @@
    * @param false|string $version
    *   The version of the graph api that is used.
    *
-   * @return false|\Microsoft\Graph\Http\GraphCollectionRequest
+   * @return false|GraphCollectionRequest
    *   The collection request.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function getCollectionData($endpoint, $returnType = FALSE, $version = FALSE) {
     try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/o365/src/Form/ApiSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365\Form;

+use Drupal\o365\HelperService;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The o365 helper service.
    *
-   * @var \Drupal\o365\HelperService
+   * @var HelperService
    */
   protected $helperService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/o365/src/Controller/O365AuthScopesController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The o365.helpers service.
    *
-   * @var \Drupal\o365\HelperService
+   * @var HelperService
    */
   protected $helperService;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\o365\HelperService $o365_helpers
+   * @param HelperService $o365_helpers
    *   The o365.helpers service.
    */
   public function __construct(HelperService $o365_helpers) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/o365/src/ConstantsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\HttpFoundation\RequestStack;

@@ @@
   /**
    * The config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The modules API config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $apiConfig;

@@ @@
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Constructs a new ConstantsService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory interface.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
-   * @param \Drupal\o365\HelperService $helperService
+   * @param HelperService $helperService
    *   The helper service used to get the api settings.
    */
   public function __construct(ConfigFactoryInterface $configFactory, RequestStack $requestStack, HelperService $helperService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/o365/src/Block/O365BlockBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365\Block;

+use Drupal\o365\GraphService;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Session\AccountInterface;
@@ @@
     $access = AccessResult::forbidden();
     // Anonymous can never view these blocks.
     if (!$account->isAnonymous()) {
-      /** @var \Drupal\o365\GraphService $graphService */
+      /** @var GraphService $graphService */
       $graphService = \Drupal::service('o365.graph');

       // Allow access when user is a MS user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/o365/src/AuthenticationServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 /**
  * The interface for the AuthenticationService.
  */
@@ @@
    * @throws \Drupal\Core\TempStore\TempStoreException
    * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
    */
-
   /**
    * Generate and save the accessToken.
    *
@@ @@
    * @param bool|string $redirect
    *   Either FALSE or an url where to redirect to.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function setAccessToken($code, $redirect);

@@ @@
    * @return string
    *   The access token.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function getAccessToken($login = FALSE);

@@ @@
   /**
    * Save the auth data from the url parameters in the user session storage.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function saveAuthDataFromUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/o365/src/AuthenticationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ @@
   /**
    * The config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The modules API config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $apiConfig;

@@ @@
   /**
    * The modules base config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moduleConfig;

@@ @@
   /**
    * The private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStore;

@@ @@
   /**
    * A oauth provider.
    *
-   * @var \League\OAuth2\Client\Provider\GenericProvider
+   * @var GenericProvider
    */
   protected $oauthClient;

@@ @@
   /**
    * The ConstantsService implementation.
    *
-   * @var \Drupal\o365\ConstantsService
+   * @var ConstantsService
    */
   protected $constants;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\o365\O365LoggerServiceInterface
+   * @var O365LoggerServiceInterface
    */
   protected $loggerService;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The auth map.
    *
-   * @var \Drupal\externalauth\Authmap
+   * @var Authmap
    */
   protected $authmap;

@@ @@
   /**
    * The o365 helper service.
    *
-   * @var \Drupal\o365\HelperService
+   * @var HelperService
    */
   protected $helperService;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new AuthenticationService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory interface.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The private store factory.
-   * @param \Drupal\o365\ConstantsService $constantsService
+   * @param ConstantsService $constantsService
    *   The constants service from the o365 module.
-   * @param \Drupal\o365\O365LoggerServiceInterface $loggerService
+   * @param O365LoggerServiceInterface $loggerService
    *   The logger service from the o365 module.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\o365\HelperService $helperService
+   * @param HelperService $helperService
    *   The helper service used to get the api settings.
-   * @param \Drupal\Core\Session\AccountProxyInterface $accountProxy
+   * @param AccountProxyInterface $accountProxy
    *   The account proxy for the current user.
-   * @param \Drupal\externalauth\Authmap $authmap
+   * @param Authmap $authmap
    *   The auth map.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger class.
    */
   public function __construct(ConfigFactoryInterface $configFactory, PrivateTempStoreFactory $tempStoreFactory, ConstantsService $constantsService, O365LoggerServiceInterface $loggerService, RequestStack $requestStack, HelperService $helperService, AccountProxyInterface $accountProxy, Authmap $authmap, Messenger $messenger) {
@@ @@
    * @return string
    *   The new access token.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   private function refreshToken($refreshToken) {
     $this->generateProvider();
@@ @@
   /**
    * Save the auth data to the temp store.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $accessToken
+   * @param AccessTokenInterface $accessToken
    *   The access token object.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   private function saveAuthData(AccessTokenInterface $accessToken) {
     $this->authValues = [
@@ @@
    * @param mixed $value
    *   The value.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   private function saveDataToTempStore($name, $value) {
     $tempstore = $this->tempStore->get($this->constants->getUserTempStoreName());
@@ @@
   /**
    * Save the destination that is part of the url.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   private function saveDestination() {
     $destination = $this->request->get('destination');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/o365/modules/o365_teams/src/O365TeamsSendMessageService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_teams;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The o365 graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs an O365TeamsSendMessageService object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The o365 graph service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $accountProxy
+   * @param AccountProxyInterface $accountProxy
    *   The current user.
    */
   public function __construct(MessengerInterface $messenger, GraphService $graphService, AccountProxyInterface $accountProxy) {
@@ @@
    * @return mixed|null
    *   The recipients email address so we can create a link to the Teams chat.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function sendMessageToUser($recipient, $message) {
     $userPrincipalName = self::extractUserPrincipalNameFromAutocompleteInput($recipient);
@@ @@
    * @param string $recipient
    *   The recipients usePrincipalName (mail address).
    *
-   * @return \Microsoft\Graph\Model\User|false
+   * @return User|false
    *   The recipient user data.
    */
   public function getUserDataFromRecipient($recipient) {
     $endpoint = '/users/' . $recipient;
-    /** @var \Microsoft\Graph\Model\User $userData */
+    /** @var User $userData */
     $userData = $this->graphService->getGraphData($endpoint, 'GET', FALSE, FALSE, User::class);
     return $userData;
   }
@@ @@
    * @return false|string
    *   The chat ID or FALSE.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   protected function createOneOnOneChat($userPrincipalName) {
     $members = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/o365/modules/o365_teams/src/Form/O365TeamsSendMessageForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_teams\Form;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * Our custom message sending service.
    *
-   * @var \Drupal\o365_teams\O365TeamsSendMessageService
+   * @var O365TeamsSendMessageService
    */
   protected $sendMessageService;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The form class constructor.
    *
-   * @param \Drupal\o365_teams\O365TeamsSendMessageService $sendMessageService
+   * @param O365TeamsSendMessageService $sendMessageService
    *   Our custom message sending service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The current request stack.
    */
   public function __construct(O365TeamsSendMessageService $sendMessageService, RequestStack $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/o365/modules/o365_teams/src/Controller/TeamsRecipientAutocompleteController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_teams\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\o365\GraphService;
@@ @@
   /**
    * The graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * Constructor for our custom controller.
    *
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The Graph service.
    */
   public function __construct(GraphService $graphService) {
@@ @@
   /**
    * Handle our autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request where we can get the parameters from.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response used in the form.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function handleAutocomplete(Request $request) {
     $results = [];
@@ @@
     $data = $this->graphService->getGraphData($endpoint, 'GET', FALSE, FALSE, User::class);

     if (!empty($data)) {
-      /** @var \Microsoft\Graph\Model\User $user */
+      /** @var User $user */
       foreach ($data as $user) {
         $results[] = [
           'value' => $user->getDisplayName() . ' (' . $user->getUserPrincipalName() . ')',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/o365/modules/o365_sso_user/src/SsoUserSync.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sso_user;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\file\FileRepositoryInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The modules config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The o365 Graph Service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The profile data service.
    *
-   * @var \Drupal\o365_profile\O365ProfileGetDataService
+   * @var O365ProfileGetDataService
    */
   protected $profileGetDataService;

@@ @@
   /**
    * The file repository.
    *
-   * @var \Drupal\file\FileRepositoryInterface
+   * @var FileRepositoryInterface
    */
   protected $fileRepository;

@@ @@
   /**
    * Constructs a SsoUserSync object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The Graph API service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\o365_profile\O365ProfileGetDataService $o365ProfileGetDataService
+   * @param O365ProfileGetDataService $o365ProfileGetDataService
    *   The profile data service.
-   * @param \Drupal\file\FileRepositoryInterface $fileRepository
+   * @param FileRepositoryInterface $fileRepository
    *   The drupal file repository.
    */
   public function __construct(ConfigFactoryInterface $config_factory, GraphService $graphService, EntityTypeManagerInterface $entityTypeManager, O365ProfileGetDataService $o365ProfileGetDataService, FileRepositoryInterface $fileRepository) {
@@ @@
   /**
    * Sync a standard drupal user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user object.
    * @param array $userData
    *   The user data from the Graph API.
@@ @@
   /**
    * Sync a Drupal user using the profile module.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user object.
    * @param array $userData
    *   The user data from the Graph API.
@@ @@
   /**
    * Sync the user picture if needed and wanted.
    *
-   * @param \Drupal\user\UserInterface|\Drupal\profile\Entity\Profile $entity
+   * @param UserInterface|\Drupal\profile\Entity\Profile $entity
    *   The user or profile entity.
    * @param bool $entityAltered
    *   If the entity is altered or not. Used later on.
@@ @@
   /**
    * Map the user data to field in a entity.
    *
-   * @param \Drupal\user\UserInterface|\Drupal\profile\Entity\Profile $entity
+   * @param UserInterface|\Drupal\profile\Entity\Profile $entity
    *   The user or profile entity.
    * @param array $userData
    *   The user data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/o365/modules/o365_sso_user/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sso_user\Form;

+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo|\Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfo|EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The constructor used for dependency injection.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $moduleHandler, EntityTypeBundleInfoInterface $entityTypeBundleInfo) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\ImmutableConfig $config */
+    /** @var ImmutableConfig $config */
     $config = $this->config('o365_sso_user.settings');
     $form['use_graph_data'] = [
       '#type' => 'checkbox',
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The config object.
    */
   private function createProfileBundleField(array &$form, Config $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/o365/modules/o365_sso_user/src/EventSubscriber/UserLoginEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The SSO user sync service.
    *
-   * @var \Drupal\o365_sso_user\SsoUserSync
+   * @var SsoUserSync
    */
   protected $ssoUserSync;

@@ @@
   /**
    * UserLoginEventSubscriber constructor.
    *
-   * @param \Drupal\o365_sso_user\SsoUserSync $ssoUserSync
+   * @param SsoUserSync $ssoUserSync
    *   The SSO User sync service.
    */
   public function __construct(SsoUserSync $ssoUserSync) {
@@ @@
   /**
    * Update a users data with data dfrom the Graph API.
    *
-   * @param \Drupal\externalauth\Event\ExternalAuthLoginEvent $event
+   * @param ExternalAuthLoginEvent $event
    *   The ExternalAuthLoginEvent event containing the user.
    */
   public function updateUserData(ExternalAuthLoginEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/o365/modules/o365_sso/src/Controller/UserLoginController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sso\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Drupal\externalauth\Exception\ExternalAuthRegisterException;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * Drupal\o365\AuthenticationService definition.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
   /**
    * The external auth service.
    *
-   * @var \Drupal\externalauth\ExternalAuth
+   * @var ExternalAuth
    */
   protected $externalAuth;

@@ @@
   /**
    * Constructs a new UserLoginController object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
-   * @param \Drupal\o365\AuthenticationService $authenticationService
+   * @param AuthenticationService $authenticationService
    *   The AuthenticationService definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager definition.
-   * @param \Drupal\externalauth\ExternalAuth $externalAuth
+   * @param ExternalAuth $externalAuth
    *   The ExternalAuth definition.
    */
   public function __construct(GraphService $o365_graph, AuthenticationService $authenticationService, EntityTypeManagerInterface $entity_type_manager, ExternalAuth $externalAuth) {
@@ @@
   /**
    * Login a user.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect to the set URL in config.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException|\Drupal\externalauth\Exception\ExternalAuthRegisterException|\GuzzleHttp\Exception\GuzzleException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws TempStoreException
+   * @throws IdentityProviderException|ExternalAuthRegisterException|GuzzleException
    */
   public function login() {
     // Save the data from the url.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/o365/modules/o365_sso/src/Controller/LoginController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The authentication service, used to handle all kinds of auth stuff.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
   /**
    * Constructs a new LoginController object.
    *
-   * @param \Drupal\o365\AuthenticationService $authenticationService
+   * @param AuthenticationService $authenticationService
    *   The AuthenticationService definition.
    */
   public function __construct(AuthenticationService $authenticationService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/o365/modules/o365_sso/src/Controller/LoginCallbackController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sso\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Drupal\o365\AuthenticationService;
@@ @@
   /**
    * The authentication service, used to handle all kinds of auth stuff.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
   /**
    * The o365 GraphService.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * The o365 logger service.
    *
-   * @var \Drupal\o365\O365LoggerServiceInterface
+   * @var O365LoggerServiceInterface
    */
   protected $loggerService;

@@ @@
   /**
    * Constructs a new LoginController object.
    *
-   * @param \Drupal\o365\AuthenticationService $authenticationService
+   * @param AuthenticationService $authenticationService
    *   The AuthenticationService definition.
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The GraphService definition.
-   * @param \Drupal\o365\O365LoggerServiceInterface $loggerService
+   * @param O365LoggerServiceInterface $loggerService
    *   The custom logger service for the o365 module.
    */
   public function __construct(AuthenticationService $authenticationService, GraphService $graphService, O365LoggerServiceInterface $loggerService) {
@@ @@
   /**
    * Callback for the login.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return mixed
    *   A redirect to the set URL.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function callback(Request $request) {
     $authCode = $request->get('code');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/o365/modules/o365_sso/o365_sso.module:21

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  * @param string $form_id
  *   The form id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


21) modules/contrib/o365/modules/o365_sharepoint_file/src/Controller/O365SharepointController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sharepoint_file\Controller;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\o365\GraphService;
 use Mimey\MimeTypes;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The mimey object.
    *
-   * @var \Mimey\MimeTypes
+   * @var MimeTypes
    */
   protected $mimey;

@@ @@
   /**
    * Constructs a new TeamsGroup object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The RequestStack definition.
    */
   public function __construct(GraphService $o365_graph, RequestStack $requestStack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/o365/modules/o365_sharepoint_field/src/Plugin/CKEditorPlugin/SharePoint.php:19

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'o365_sharepoint_field') . '/js/plugins/sharepoint/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('o365_sharepoint_field') . '/js/plugins/sharepoint/plugin.js';
   }

   /**
@@ @@
     return [
       'Sharepoint' => [
         'label' => $this->t('SharePoint'),
-        'image' => drupal_get_path('module', 'o365_sharepoint_field') . '/js/plugins/sharepoint/sharepoint.png',
+        'image' => \Drupal::service('extension.list.module')->getPath('o365_sharepoint_field') . '/js/plugins/sharepoint/sharepoint.png',
       ],
     ];
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/o365/modules/o365_sharepoint_field/src/Form/CkEditorDialog.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * Constructs a form object for the o365_sharepoint_field ckeditor plugin.
    *
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The graph service.
    */
   public function __construct(GraphService $graphService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/o365/modules/o365_sharepoint_field/src/Controller/O365SharepointFieldController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_sharepoint_field\Controller;

+use Drupal\node\NodeStorage;
+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\o365\GraphService;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The o365.graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\node\NodeStorage
+   * @var NodeStorage
    */
   protected $nodeStorage;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The o365.graph service.
    */
   public function __construct(GraphService $o365_graph) {
@@ @@
   /**
    * Handler for autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response object.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function handleAutocomplete(Request $request) {
     $sharepointData = $this->getData($request);
@@ @@
   /**
    * Handler for the CKEditor autocomplete.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response object.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function handleCkEditorAutocomplete(Request $request) {
     $sharepointData = $this->getData($request, ' AND isDocument=true');
@@ @@
   /**
    * Get the data from sharepoint.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $scope
    *   The scope, with this we can filter out folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   protected function getData(Request $request, $scope = '') {
     $input = $request->query->get('q');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/o365/modules/o365_rest/src/Plugin/rest/resource/GetAccessTokenResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_rest\Plugin\rest\resource;

+use Drupal\o365\AuthenticationService;
+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\rest\Plugin\ResourceBase;
 use Drupal\rest\ResourceResponse;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The authentication service, used to handle all kinds of auth stuff.
    *
-   * @var \Drupal\o365\AuthenticationService
+   * @var AuthenticationService
    */
   protected $authenticationService;

@@ @@
   /**
    * Return the current users access token.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   public function get() {
     return new ResourceResponse($this->authenticationService->getAccessToken(), 200);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/o365/modules/o365_profile_rest/src/Plugin/rest/resource/O365ProfileRestResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_profile_rest\Plugin\rest\resource;

+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\externalauth\Authmap;
@@ @@
   /**
    * The externalauth authmap service.
    *
-   * @var \Drupal\externalauth\Authmap
+   * @var Authmap
    */
   protected $authmap;

@@ @@
   /**
    * The service we use to get user data.
    *
-   * @var \Drupal\o365_profile\O365ProfileGetDataService
+   * @var O365ProfileGetDataService
    */
   protected $getDataService;

@@ @@
    * @param int $uid
    *   The users UID.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   A response with the user data.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function get($uid = NULL) {
     if ($uid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/o365/modules/o365_profile/src/Plugin/views/field/CallViaTeamsViewsField.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The teams service. Used for generating links.
    *
-   * @var \Drupal\o365_profile\O365ProfileTeamsService
+   * @var O365ProfileTeamsService
    */
   protected O365ProfileTeamsService $teamsService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_profile\O365ProfileTeamsService $teamsService
+   * @param O365ProfileTeamsService $teamsService
    *   The o365 profile teams service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, O365ProfileTeamsService $teamsService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/o365/modules/o365_profile/src/Plugin/Block/TeamsLinksBlock.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The o365_profile.teams service.
    *
-   * @var \Drupal\o365_profile\O365ProfileTeamsService
+   * @var O365ProfileTeamsService
    */
   protected $o365ProfileTeams;

@@ @@
   /**
    * The externalauth authmap service.
    *
-   * @var \Drupal\externalauth\Authmap
+   * @var Authmap
    */
   protected $authmap;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_profile\O365ProfileTeamsService $o365_profile_teams
+   * @param O365ProfileTeamsService $o365_profile_teams
    *   The o365_profile.teams service.
-   * @param \Drupal\externalauth\Authmap $authmap
+   * @param Authmap $authmap
    *   The externalauth authmap service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, O365ProfileTeamsService $o365_profile_teams, Authmap $authmap) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/o365/modules/o365_profile/src/Plugin/Block/PersonaBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_profile\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365_profile\O365ProfileGetDataService
+   * @var O365ProfileGetDataService
    */
   protected $o365ProfileGraph;

@@ @@
   /**
    * The persona render service.
    *
-   * @var \Drupal\o365\PersonaRenderService
+   * @var PersonaRenderService
    */
   protected $personaRenderService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_profile\O365ProfileGetDataService $o365ProfileGraph
+   * @param O365ProfileGetDataService $o365ProfileGraph
    *   The GraphService definition.
-   * @param \Drupal\o365\PersonaRenderService $personaRenderService
+   * @param PersonaRenderService $personaRenderService
    *   The persona render service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, O365ProfileGetDataService $o365ProfileGraph, PersonaRenderService $personaRenderService) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException|\GuzzleHttp\Exception\GuzzleException
+   * @throws TempStoreException
+   * @throws IdentityProviderException|GuzzleException
    */
   public function build() {
     $config = $this->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/o365/modules/o365_profile/src/O365ProfileTeamsService.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Generate a link to interact with the user on Teams.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user object.
    * @param string $type
    *   The type of link to generate.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/o365/modules/o365_profile/src/O365ProfileGetDataService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_profile;

+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\o365\GraphService;
 use GuzzleHttp\Exception\ClientException;

@@ @@
   /**
    * The o365.graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * Constructs an O365ProfileGetDataService object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The o365.graph service.
    */
   public function __construct(GraphService $o365_graph) {
@@ @@
    * @return array
    *   The list of user data.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function getProfileData($user_id = NULL, $photoSize = '64x64') {
     $profileData['currentUserId'] = $user_id ?? $this->o365Graph->getCurrentUserId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/o365/modules/o365_profile/src/Controller/O365ProfileAjaxController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_profile\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * The externalauth authmap service.
    *
-   * @var \Drupal\externalauth\Authmap
+   * @var Authmap
    */
   protected $authmap;

@@ @@
   /**
    * The service we use to get user data.
    *
-   * @var \Drupal\o365_profile\O365ProfileGetDataService
+   * @var O365ProfileGetDataService
    */
   protected $getDataService;

@@ @@
    * @param int $uid
    *   The users UID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON we use in JS.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function getUserStatus($uid) {
     $return = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/o365/modules/o365_profile/o365_profile.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\o365_profile\O365ProfileTeamsService;
 /**
  * @file
  * Profile module file.
@@ @@
  */
 function o365_profile_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
   if ($display->getComponent('o365_profile_teams_call')) {
-    /** @var \Drupal\o365_profile\O365ProfileTeamsService $service */
+    /** @var O365ProfileTeamsService $service */
     $service = \Drupal::service('o365_profile.teams');
     $call = $service->generateTeamsLink($account, 'call');
     if ($call) {
@@ @@
   }

   if ($display->getComponent('o365_profile_teams_chat')) {
-    /** @var \Drupal\o365_profile\O365ProfileTeamsService $service */
+    /** @var O365ProfileTeamsService $service */
     $service = \Drupal::service('o365_profile.teams');
     $chat = $service->generateTeamsLink($account, 'chat');
     if ($chat) {
@@ @@
   }

   if ($display->getComponent('o365_profile_teams_video')) {
-    /** @var \Drupal\o365_profile\O365ProfileTeamsService $service */
+    /** @var O365ProfileTeamsService $service */
     $service = \Drupal::service('o365_profile.teams');
     $video = $service->generateTeamsLink($account, 'video');
     if ($video) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


34) modules/contrib/o365/modules/o365_outlook_mail/src/Plugin/Block/LatestUnreadMailBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_mail\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\o365\Block\O365UncachedBlockBase;
 use Drupal\o365_outlook_mail\GetMailServiceInterface;
@@ @@
   /**
    * The mail service interface.
    *
-   * @var \Drupal\o365_outlook_mail\GetMailServiceInterface
+   * @var GetMailServiceInterface
    */
   protected $getMailService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_outlook_mail\GetMailServiceInterface $getMailService
+   * @param GetMailServiceInterface $getMailService
    *   The get mail service definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetMailServiceInterface $getMailService) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function build() {
     return $this->getMails();
@@ @@
    * @return mixed
    *   The item list or FALSE.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   private function getMails($count = 5) {
     $mailData = $this->getMailService->getUnreadMail($count, [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/o365/modules/o365_outlook_mail/src/Plugin/Block/LatestMailBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_mail\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\o365\Block\O365UncachedBlockBase;
 use Drupal\o365_outlook_mail\GetMailServiceInterface;
@@ @@
   /**
    * The mail service interface.
    *
-   * @var \Drupal\o365_outlook_mail\GetMailServiceInterface
+   * @var GetMailServiceInterface
    */
   protected $getMailService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_outlook_mail\GetMailServiceInterface $getMailService
+   * @param GetMailServiceInterface $getMailService
    *   The get mail service definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetMailServiceInterface $getMailService) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function build() {
     return $this->getMails();
@@ @@
    * @return mixed
    *   The item list or FALSE.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   private function getMails($count = 5) {
     $mailData = $this->getMailService->getMail($count, [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/o365/modules/o365_outlook_mail/src/GetMailServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_mail;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 /**
  * Interface for the GetMailService class.
  */
@@ @@
    * @return array|bool
    *   The list of mails or FALSE if no mails.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function getMail($limit = 10, array $fields = []);

@@ @@
    * @return array|bool
    *   The list of mails or FALSE if no mails.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function getUnreadMail($limit = 5, array $fields = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


37) modules/contrib/o365/modules/o365_outlook_mail/src/GetMailService.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new GetMailService object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
    */
   public function __construct(GraphService $o365_graph, DateFormatterInterface $dateFormatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/o365/modules/o365_outlook_mail/src/Controller/MyMailController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_mail\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\o365_outlook_mail\GetMailServiceInterface;
@@ @@
   /**
    * Drupal\o365_outlook_mail\GetMailServiceInterface definition.
    *
-   * @var \Drupal\o365_outlook_mail\GetMailServiceInterface
+   * @var GetMailServiceInterface
    */
   protected $getMailService;

@@ @@
   /**
    * Constructs a new MyMailController object.
    *
-   * @param \Drupal\o365_outlook_mail\GetMailServiceInterface $getMailService
+   * @param GetMailServiceInterface $getMailService
    *   The GetMailServiceInterface definition.
    */
   public function __construct(GetMailServiceInterface $getMailService) {
@@ @@
    * @return array
    *   The render array with the list of mails.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    * @throws \Exception
    */
   public function getMail() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/o365/modules/o365_outlook_calendar/src/Plugin/Block/CalendarBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_calendar\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * Drupal\o365\HelperService definition.
    *
-   * @var \Drupal\o365\HelperService
+   * @var HelperService
    */
   protected $helperService;

@@ @@
   /**
    * Drupal\Core\Datetime\DateFormatter definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The persona render service.
    *
-   * @var \Drupal\o365\PersonaRenderService
+   * @var PersonaRenderService
    */
   protected $personaRenderService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
-   * @param \Drupal\o365\HelperService $helperService
+   * @param HelperService $helperService
    *   The HelperService definition.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The DateFormatter definition.
-   * @param \Drupal\o365\PersonaRenderService $personaRenderService
+   * @param PersonaRenderService $personaRenderService
    *   The persona render service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GraphService $o365_graph, HelperService $helperService, DateFormatter $dateFormatter, PersonaRenderService $personaRenderService) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    * @throws \Exception
    */
   public function build() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/o365/modules/o365_outlook_calendar/src/Plugin/Block/AddToCalendarBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_calendar\Plugin\Block;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moduleConfig;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $configFactory, RequestStack $requestStack) {
@@ @@
    * {@inheritdoc}
    */
   protected function blockAccess(AccountInterface $account) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $this->request->get('node');
     if ($node) {
       $enabled = $this->moduleConfig->get('enabled');
@@ @@
    */
   public function build() {
     $build = [];
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $this->request->get('node');

     if ($node) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/o365/modules/o365_outlook_calendar/src/OutlookCalendarSaveEventService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_calendar;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The o365 Graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * The modules config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
   /**
    * The Drupal messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructor for the OutlookCalendarSaveEventService service.
    *
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The graph service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $emailValidator
+   * @param EmailValidatorInterface $emailValidator
    *   The email validator.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
    */
   public function __construct(GraphService $graphService, ConfigFactoryInterface $configFactory, EmailValidatorInterface $emailValidator, MessengerInterface $messenger, EntityFieldManagerInterface $entityFieldManager) {
@@ @@
   /**
    * Add the event to Outlook.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node that contains the event values.
    * @param string $attendees
    *   The comma seperated string of attendees.
@@ @@
    * @return bool|string
    *   The web link or TRUE/FALSE.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function addEvent(Node $node, $attendees = '', $returnLink = FALSE) {
     // Get the field names from config.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


42) modules/contrib/o365/modules/o365_outlook_calendar/src/Form/OutlookCalendarSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The event service.
    *
-   * @var \Drupal\o365_outlook_calendar\OutlookCalendarSaveEventService
+   * @var OutlookCalendarSaveEventService
    */
   protected $eventService;

@@ @@
   /**
    * Our class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory interface.
-   * @param \Drupal\o365_outlook_calendar\OutlookCalendarSaveEventService $eventService
+   * @param OutlookCalendarSaveEventService $eventService
    *   The event service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, OutlookCalendarSaveEventService $eventService) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/o365/modules/o365_outlook_calendar/src/Controller/OutlookCalendarSaveAjaxController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_outlook_calendar\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The event service.
    *
-   * @var \Drupal\o365_outlook_calendar\OutlookCalendarSaveEventService
+   * @var OutlookCalendarSaveEventService
    */
   protected $eventService;

@@ @@
   /**
    * The drupal messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\o365_outlook_calendar\OutlookCalendarSaveEventService $eventService
+   * @param OutlookCalendarSaveEventService $eventService
    *   The event service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Drupal messenger.
    */
   public function __construct(OutlookCalendarSaveEventService $eventService, MessengerInterface $messenger) {
@@ @@
    * @param mixed $nid
    *   The node ID of the node to use.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function ajaxLinkCallback($nid = FALSE) {
     $response = new AjaxResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/o365/modules/o365_outlook_calendar/o365_outlook_calendar.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\o365_outlook_calendar\OutlookCalendarSaveEventService;
 /**
  * @file
  * Primary module hooks for o365_contacts module.
@@ @@
  * Implements hook_form_alter().
  */
 function o365_outlook_calendar_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\Core\Config\ImmutableConfig  $moduleConfig */
+  /** @var ImmutableConfig $moduleConfig */
   $moduleConfig = Drupal::config('o365_outlook_calendar.settings');
   if (!empty($moduleConfig->get('enabled'))) {
     $contentType = $moduleConfig->get('content_type');
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function _o365_outlook_calendar_save_submit(array $form, FormStateInterface $form_state) {
@@ @@
   if (!empty($form_state->getValue('o365_calendar_save'))) {
     $node = Node::load($form_state->getValue('nid'));
     if ($node) {
-      /** @var \Drupal\o365_outlook_calendar\OutlookCalendarSaveEventService $eventService */
+      /** @var OutlookCalendarSaveEventService $eventService */
       $eventService = Drupal::service('o365_outlook_calendar.save_event');
       $eventService->addEvent($node, $form_state->getValue('o365_calendar_attendees'));
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


45) modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/SharedFilesBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\o365\Block\O365UncachedBlockBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface definition.
    *
-   * @var \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface
+   * @var GetFilesAndFoldersServiceInterface
    */
   protected $getFilesAndFoldersService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
+   * @param GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
    *   The GetFilesAndFoldersServiceInterface definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetFilesAndFoldersServiceInterface $o365_onedrive_get_files) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function build() {
     return $this->getFilesAndFoldersService->listSharedFilesAndFolders();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/o365/modules/o365_onedrive/src/Plugin/Block/RecentFilesBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive\Plugin\Block;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\o365\Block\O365UncachedBlockBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface definition.
    *
-   * @var \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface
+   * @var GetFilesAndFoldersServiceInterface
    */
   protected $getFilesAndFoldersService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
+   * @param GetFilesAndFoldersServiceInterface $o365_onedrive_get_files
    *   The GetFilesAndFoldersServiceInterface definition.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GetFilesAndFoldersServiceInterface $o365_onedrive_get_files) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function build() {
     return $this->getFilesAndFoldersService->listSpecialFilesAndFolders('recent');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 /**
  * Interface for GetFilesAndFoldersService class.
  */
@@ @@
    * @return mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listFilesAndFolders($folder = FALSE);

@@ @@
    *
    * @return mixed
    */
-
   /**
    * List all the shared files and folders.
    *
@@ @@
    * @return array|mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listSharedFilesAndFolders($limit = 10);

@@ @@
    * @return array|mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listSpecialFilesAndFolders($type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/o365/modules/o365_onedrive/src/GetFilesAndFoldersService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\o365\GraphService;
 use Mimey\MimeTypes;

@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * Constructs a new GetFilesAndFoldersService object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
    */
   public function __construct(GraphService $o365_graph) {
@@ @@
    * @param string $endPoint
    *   The endpoint we want the content from.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
    */
   private function getDrive($endPoint) {
     $this->drive = $this->graphService->getGraphData($endPoint);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


49) modules/contrib/o365/modules/o365_onedrive/src/Controller/OneDriveListController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_onedrive\Controller;

+use Drupal\Core\TempStore\TempStoreException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use Microsoft\Graph\Exception\GraphException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The get files and folders service.
    *
-   * @var \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface
+   * @var GetFilesAndFoldersServiceInterface
    */
   protected $getFilesAndFoldersService;

@@ @@
   /**
    * Constructs a new OneDriveListController object.
    *
-   * @param \Drupal\o365_onedrive\GetFilesAndFoldersServiceInterface $getFilesAndFoldersService
+   * @param GetFilesAndFoldersServiceInterface $getFilesAndFoldersService
    *   The GetFilesAndFoldersServiceInterface definition.
    */
   public function __construct(GetFilesAndFoldersServiceInterface $getFilesAndFoldersService) {
@@ @@
    * @return mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listFiles($folder = FALSE) {
     return $this->getFilesAndFoldersService->listFilesAndFolders($folder);
@@ @@
    * @return array|mixed
    *   The list of files and folders.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
-   * @throws \Microsoft\Graph\Exception\GraphException
+   * @throws TempStoreException
+   * @throws IdentityProviderException
+   * @throws GraphException
    */
   public function listSharedFiles() {
     return $this->getFilesAndFoldersService->listSharedFilesAndFolders();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/o365/modules/o365_links/src/Plugin/Block/O365LinksBlock.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The o365_links.constants service.
    *
-   * @var \Drupal\o365_links\O365LinksConstants
+   * @var O365LinksConstants
    */
   protected $o365LinksConstants;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\o365_links\O365LinksConstants $o365_links_constants
+   * @param O365LinksConstants $o365_links_constants
    *   The o365_links.constants service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, O365LinksConstants $o365_links_constants) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/o365/modules/o365_links/src/O365CacheInvalidator.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs an O365CacheInvalidator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


52) modules/contrib/o365/modules/o365_links/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_links\Form;

+use Drupal\o365_links\O365CacheInvalidator;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Markup;
@@ @@
   /**
    * The cache tag invalidator service.
    *
-   * @var \Drupal\o365_links\O365CacheInvalidator
+   * @var O365CacheInvalidator
    */
   protected $cacheInvalidator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/o365/modules/o365_groups/src/GroupsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_groups;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\o365\GraphService;
@@ @@
   /**
    * The o365.graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a GroupsService object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The o365.graph service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
-   * @param \Drupal\Core\Session\AccountProxyInterface $accountProxy
+   * @param AccountProxyInterface $accountProxy
    *   The account proxy.
    */
   public function __construct(GraphService $o365_graph, CacheBackendInterface $cacheBackend, AccountProxyInterface $accountProxy) {
@@ @@
    * @param false|string $endpoint
    *   The endpoint string containing the skipToken or FALSE for default.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   protected function getTeamsFromGraph($endpoint = FALSE) {
     $cid = 'getTeamsFromGraph::' . $this->currentUser->id();
@@ @@
         $data = $this->o365Graph->getGraphData($endpoint, 'GET', FALSE, FALSE, Group::class);

         if ($data) {
-          /** @var \Microsoft\Graph\Model\Group $group */
+          /** @var Group $group */
           foreach ($data as $group) {
             $channelEndpoint = '/teams/' . $group->getId() . '/channels';
             $groupName = $group->getDisplayName();
@@ @@

             $channels = $this->o365Graph->getGraphData($channelEndpoint, 'GET', FALSE, FALSE, Channel::class);
             if ($channels) {
-              /** @var \Microsoft\Graph\Model\Channel $channel */
+              /** @var Channel $channel */
               foreach ($channels as $channel) {
                 $key = $group->getId() . '|||' . $channel->getId();
                 $teams[$key] = $groupName . ' - ' . $channel->getDisplayName();
@@ @@
    * @return string|FALSE
    *   The URL to the team or FALSE.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function generateTeamChannelLink($id) {
     // Explode the ID on the 3 pipes.
@@ @@
     $ids = explode('|||', $id);

     $endpoint = '/teams/' . $ids[0] . '/channels/' . $ids[1];
-    /** @var \Microsoft\Graph\Model\Channel $channel */
+    /** @var Channel $channel */
     $channel = $this->o365Graph->getGraphData($endpoint, 'GET', FALSE, FALSE, Channel::class);

     if ($channel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


54) modules/contrib/o365/modules/o365_groups/src/GroupFilesService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_groups;

+use Drupal\Core\TempStore\TempStoreException;
+use GuzzleHttp\Exception\GuzzleException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
 use Drupal\o365\GraphService;
 use Microsoft\Graph\Model\DriveItem;
 use Mimey\MimeTypes;
@@ @@
   /**
    * The o365 graph service.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $graphService;

@@ @@
   /**
    * The mimey mimetypes.
    *
-   * @var \Mimey\MimeTypes
+   * @var MimeTypes
    */
   protected $mimey;

@@ @@
   /**
    * Constructs a GroupFilesService object.
    *
-   * @param \Drupal\o365\GraphService $graphService
+   * @param GraphService $graphService
    *   The o365 graph service.
    */
   public function __construct(GraphService $graphService) {
@@ @@
    * @return array
    *   The list of rows.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \League\OAuth2\Client\Provider\Exception\IdentityProviderException
+   * @throws TempStoreException
+   * @throws GuzzleException
+   * @throws IdentityProviderException
    */
   public function getOrderedGroupFiles($group, $order = 'name', $sort = 'asc') {
     // We want to lowercase these values.
@@ @@

     // Get the folder.
     $folderEndpoint = '/teams/' . $ids[0] . '/channels/' . $ids[1] . '/filesFolder';
-    /** @var \Microsoft\Graph\Model\DriveItem $data */
+    /** @var DriveItem $data */
     $folderData = $this->graphService->getGraphData($folderEndpoint, 'GET', FALSE, FALSE, DriveItem::class);

     // If the folder exists, get the files in that folder.
@@ @@
    */
   private function orderByType(array $childrenData) {
     $return = [];
-    /** @var \Microsoft\Graph\Model\DriveItem $child */
+    /** @var DriveItem $child */
     foreach ($childrenData as $child) {
       // Determine the file icon.
       if ($child->getFile()) {
@@ @@
    */
   private function orderByModifiedDate(array $childrenData) {
     $return = [];
-    /** @var \Microsoft\Graph\Model\DriveItem $child */
+    /** @var DriveItem $child */
     foreach ($childrenData as $child) {
       $return[$child->getCreatedDateTime()->getTimestamp()] = $child;
     }
@@ @@
    */
   private function orderByModifiedBy(array $childrenData) {
     $return = [];
-    /** @var \Microsoft\Graph\Model\DriveItem $child */
+    /** @var DriveItem $child */
     foreach ($childrenData as $child) {
       $key = $child->getLastModifiedBy()->getUser()
         ->getDisplayName() . '_' . $child->getCreatedDateTime()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


55) modules/contrib/o365/modules/o365_groups/src/Controller/O365GroupsFilesController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_groups\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Microsoft\Graph\Model\DriveItem;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The group file service.
    *
-   * @var \Drupal\o365_groups\GroupFilesService
+   * @var GroupFilesService
    */
   protected $groupFilesService;

@@ @@
   /**
    * The mimey mimetypes.
    *
-   * @var \Mimey\MimeTypes
+   * @var MimeTypes
    */
   protected $mimey;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\o365_groups\GroupFilesService $groupFilesService
+   * @param GroupFilesService $groupFilesService
    *   The service to generate the group files arrays.
    */
   public function __construct(DateFormatterInterface $date_formatter, RequestStack $requestStack, GroupFilesService $groupFilesService) {
@@ @@

           // Loop through the items to generate the table rows.
           if (!empty($childrenData)) {
-            /** @var \Microsoft\Graph\Model\DriveItem $child */
+            /** @var DriveItem $child */
             foreach ($childrenData as $child) {
               // Format the modified date.
               $createdTs = $child->getCreatedDateTime()->getTimestamp();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/o365/modules/o365_groups/src/Access/O365GroupsFilesControllerAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_groups\Access;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * Constructor for the O365GroupsFilesControllerAccessCheck class.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ @@
   /**
    * Access check method.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   Whether the user has access.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


57) modules/contrib/o365/modules/o365_groups/o365_groups.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\o365\GraphService;
+use Drupal\o365_groups\GroupsService;
 /**
  * @file
  * Primary module hooks for Office 365 - Groups module.
@@ @@
  */
 function o365_groups_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if (isset($form['field_o365_groups_teams_id'])) {
-    /** @var \Drupal\o365\GraphService $graphService */
+    /** @var GraphService $graphService */
     $graphService = \Drupal::service('o365.graph');

     if ($graphService && $graphService->getCurrentUserId()) {
-      /** @var \Drupal\o365_groups\GroupsService $groupsService */
+      /** @var GroupsService $groupsService */
       $groupsService = \Drupal::service('o365_groups.groups');
       $availableTeams = $groupsService->getGroupsFromTeams();

@@ @@
  */
 function o365_groups_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
   if ($display->getComponent('o365_group_channel_link') && !empty($entity->field_o365_groups_teams_id->value)) {
-    /** @var \Drupal\o365_groups\GroupsService $groupsService */
+    /** @var GroupsService $groupsService */
     $groupsService = \Drupal::service('o365_groups.groups');
     $webUrl = $groupsService->generateTeamChannelLink($entity->field_o365_groups_teams_id->value);

@@ @@
 /**
  * Set dynamic allowed values for the o365_groups_teams_id field.
  *
- * @param \Drupal\Core\Field\BaseFieldDefinition $definition
+ * @param BaseFieldDefinition $definition
  *   The field definition.
- * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+ * @param ContentEntityInterface|null $entity
  *   The entity being created if applicable.
  * @param bool $cacheable
  *   Boolean indicating if the results are cacheable.
@@ @@
  * @see options_allowed_values()
  */
 function o365_groups_teams_id_allowed(BaseFieldDefinition $definition, ContentEntityInterface $entity = NULL, $cacheable) {
-  /** @var \Drupal\o365\GraphService $graphService */
+  /** @var GraphService $graphService */
   $graphService = \Drupal::service('o365.graph');

   if ($graphService && $graphService->getCurrentUserId()) {
-    /** @var \Drupal\o365_groups\GroupsService $groupsService */
+    /** @var GroupsService $groupsService */
     $groupsService = \Drupal::service('o365_groups.groups');
     return $groupsService->getGroupsFromTeams();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


58) modules/contrib/o365/modules/o365_contacts/src/Controller/O365ContactsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\o365_contacts\Controller;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\o365\GraphService;
 use Drupal\o365_profile\O365ProfileGetDataService;
@@ @@
   /**
    * Drupal\o365\GraphService definition.
    *
-   * @var \Drupal\o365\GraphService
+   * @var GraphService
    */
   protected $o365Graph;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;

@@ @@
   /**
    * The profile data service.
    *
-   * @var \Drupal\o365_profile\O365ProfileGetDataService
+   * @var O365ProfileGetDataService
    */
   protected $profileInfo;

@@ @@
   /**
    * Constructs a new TeamsGroup object.
    *
-   * @param \Drupal\o365\GraphService $o365_graph
+   * @param GraphService $o365_graph
    *   The GraphService definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The RequestStack definition.
-   * @param \Drupal\o365_profile\O365ProfileGetDataService $profileInfo
+   * @param O365ProfileGetDataService $profileInfo
    *   The O365ProfileGetDataService definition.
    */
   public function __construct(GraphService $o365_graph, RequestStack $requestStack, O365ProfileGetDataService $profileInfo) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 58 files have been changed by Rector                                      

