modules/contrib/harmonize/harmonize.module
modules/contrib/harmonize/modules/harmonize_example/harmonize_example.module
modules/contrib/harmonize/modules/harmonize_example/src/Plugin/Harmonize/Refiner/BasicPageRefinerExample.php
modules/contrib/harmonize/modules/harmonize_example/src/Plugin/Harmonize/Refiner/EmailFieldRefinerExample.php
modules/contrib/harmonize/modules/harmonize_example/src/Plugin/Harmonize/Refiner/EntityRefinerExample.php
modules/contrib/harmonize/modules/harmonize_example/src/Plugin/Harmonize/Refiner/FieldPlainTextRefinerExample.php
modules/contrib/harmonize/modules/harmonize_example/src/Plugin/Harmonize/Refiner/NodeRefinerExample.php
modules/contrib/harmonize/modules/harmonize_example/src/Plugin/Harmonize/Refiner/StringFieldRefinerExample.php
modules/contrib/harmonize/modules/harmonize_example/themes/custom/YOUR_THEME/YOUR_THEME.theme
modules/contrib/harmonize/modules/harmonize_example/themes/custom/YOUR_THEME/harmony/functions.php
modules/contrib/harmonize/modules/harmonize_example/themes/custom/YOUR_THEME/harmony/node/entity.node.page.harmony.php
modules/contrib/harmonize/modules/harmonize_rest/harmonize_rest.module
modules/contrib/harmonize/modules/harmonize_rest/src/Plugin/rest/resource/Entity/SingleEntityResource.php
modules/contrib/harmonize/modules/harmonize_rest/src/Plugin/rest/resource/HarmonizeRestResourceBase.php
modules/contrib/harmonize/src/Constants/HarmonizationEvents.php
modules/contrib/harmonize/src/Constants/HarmonizeConfig.php
modules/contrib/harmonize/src/Constants/HarmonizerFlags.php
modules/contrib/harmonize/src/Constants/HarmonizerTypes.php
modules/contrib/harmonize/src/Event/EntityFieldHarmonizationEvent.php
modules/contrib/harmonize/src/Event/EntityHarmonizationEvent.php
modules/contrib/harmonize/src/Event/FormHarmonizationEvent.php
modules/contrib/harmonize/src/Event/HarmonizationEvent.php
modules/contrib/harmonize/src/Event/HarmonizationEventFactory.php
modules/contrib/harmonize/src/Event/MenuHarmonizationEvent.php
modules/contrib/harmonize/src/EventSubscriber/HarmonyEventSubscriber.php
modules/contrib/harmonize/src/EventSubscriber/RefineryEventSubscriber.php
modules/contrib/harmonize/src/Form/HarmonizeCacheConfigForm.php
modules/contrib/harmonize/src/Form/HarmonizeDataConfigForm.php
modules/contrib/harmonize/src/Form/HarmonizeSettingsForm.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/AddressEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/BooleanEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ColorEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateRangeEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateTimeEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizerFactory.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizerInterface.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceRevisionsEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/FileEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/GeofieldEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ImageEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/LinkEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/MetaTagEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/OfficeHoursEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/PhysicalMeasurementEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/TextWithSummaryEntityFieldHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityHarmonizerFactory.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityHarmonizerInterface.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/FileEntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/ImageStyleEntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/MediaEntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/MenuLinkContentEntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/NodeEntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/ParagraphEntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/TaxonomyTermEntityHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/FormHarmonizer/FormHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/FormHarmonizer/FormHarmonizerFactory.php
modules/contrib/harmonize/src/Harmonizer/Harmonizer.php
modules/contrib/harmonize/src/Harmonizer/HarmonizerFactory.php
modules/contrib/harmonize/src/Harmonizer/HarmonizerInterface.php
modules/contrib/harmonize/src/Harmonizer/MasterHarmonizerFactory.php
modules/contrib/harmonize/src/Harmonizer/MenuHarmonizer/MenuHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/MenuHarmonizer/MenuHarmonizerFactory.php
modules/contrib/harmonize/src/Harmonizer/RegionHarmonizer/RegionHarmonizer.php
modules/contrib/harmonize/src/Harmonizer/RegionHarmonizer/RegionHarmonizerFactory.php
modules/contrib/harmonize/src/Plugin/preprocessors/HarmonizePreprocessorBase.php
modules/contrib/harmonize/src/Plugin/preprocessors/MenuPreprocessor.php
modules/contrib/harmonize/src/Plugin/preprocessors/NodePreprocessor.php
modules/contrib/harmonize/src/Plugin/preprocessors/ParagraphPreprocessor.php
modules/contrib/harmonize/src/Plugin/preprocessors/RegionPreprocessor.php
modules/contrib/harmonize/src/Plugin/views/pager/QueryParams.php
modules/contrib/harmonize/src/Plugin/views/style/HarmonizeStyle.php
modules/contrib/harmonize/src/PluginManager/Refinery/Annotation/Refiner.php
modules/contrib/harmonize/src/PluginManager/Refinery/RefinerBase.php
modules/contrib/harmonize/src/PluginManager/Refinery/RefinerInterface.php
modules/contrib/harmonize/src/PluginManager/Refinery/Refinery.php
modules/contrib/harmonize/src/PluginManager/Refinery/RefineryDiscovery.php
modules/contrib/harmonize/src/PluginManager/Refinery/RefineryFactory.php
modules/contrib/harmonize/src/Service/Harmonics.php
modules/contrib/harmonize/src/Service/Harmonize.php
modules/contrib/harmonize/src/Service/Helpers.php

52 files with changes
=====================

1) modules/contrib/harmonize/src/Service/Helpers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Service;

+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
@@ @@
   /**
    * EntityTypeBundleInfo service from Drupal injected through DI.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   private $entityTypeBundleInfo;

@@ @@
   /**
    * Entity Field Manager Service from Drupal injected through DI.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;

@@ @@
   /**
    * Helpers constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   Drupal's EntityTypeBundleInfo service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Drupal's EntityManager service.
    */
   public function __construct(EntityTypeBundleInfo $entityTypeBundleInfo, EntityFieldManagerInterface $entityFieldManager) {
@@ @@
   /**
    * Ensure an entity is translated to the current running language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity to fetch translation from.
    * @param string $lang
    *   The language to ensure the content is translated to.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Return translated entity in current language if found.
    */
   public function ensureTranslated(ContentEntityInterface $entity, string $lang = NULL) : ?ContentEntityInterface
@@ @@
   /**
    * Get the link to a given node.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   Drupal node object to get URL from.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   Generated Node URL.
    */
   public function getNodeHref(Node $node) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/harmonize/src/Service/Harmonize.php:25

    ---------- begin diff ----------
@@ @@
    *
    * Provides helper functions specific to Harmonizer functionality.
    *
-   * @var \Drupal\harmonize\Service\Helpers
+   * @var Helpers
    */
   public $helpers;

@@ @@
   /**
    * Drupal's Theme Manager injected through DI.
    *
-   * @var \Drupal\Core\Theme\ThemeManager
+   * @var ThemeManager
    */
   public $themeManager;

@@ @@
   /**
    * Drupal's module handler injected through DI.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   public $moduleHandler;

@@ @@
   /**
    * Drupal's event dispatcher injected through DI.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   public $eventDispatcher;

@@ @@
   /**
    * Use DI to inject Drupal's configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   public $configFactory;

@@ @@
   /**
    * Drupal's Admin Context router service injected through DI.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   public $adminContext;

@@ @@
   /**
    * Drupal's Current Route Match service injected through DI.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   public $currentRouteMatch;

@@ @@
   /**
    * Harmonizer cache factory service injected through DI.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   public $cacheBackend;

@@ @@
   /**
    * Harmonizer Language Manager service injected through DI.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   public $languageManager;

@@ @@
    *
    * This service manages the creation and loading of all harmonizers.
    *
-   * @param \Drupal\harmonize\Service\Helpers $harmonizerHelpers
+   * @param Helpers $harmonizerHelpers
    *   Harmonizer Helpers service injected through DI.
-   * @param \Drupal\Core\Theme\ThemeManager $themeManager
+   * @param ThemeManager $themeManager
    *   Theme Manager service injected through DI.
-   * @param \Drupal\Core\Extension\ModuleHandler $moduleHandler
+   * @param ModuleHandler $moduleHandler
    *   Module Handler service injected through DI.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $eventDispatcher
+   * @param ContainerAwareEventDispatcher $eventDispatcher
    *   Event Dispatcher service injected through DI.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   Configuration Factory service injected through DI.
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   Admin Context service injected through DI.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   Current Route Match service injected through DI.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Harmonizer cache factory service injected through DI.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager service injected through DI.
    */
   public function __construct(
@@ @@
       // We want to check if a Harmony declaration file exists in the
       // site's main theme. If one does, we want to read it and see if a
       // declaration exists for this particular context to set styles.
-      $themeDirectory = drupal_get_path('theme', $themeName);
+      $themeDirectory = \Drupal::service('extension.list.theme')->getPath($themeName);
       $harmonyDeclarationPath = $themeDirectory . '/' . $themeName . '.harmony.yml';

       // If no declaration file exists, stop.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/harmonize/src/Service/Harmonics.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Service;

+use Drupal\image\ImageStyleStorageInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The Cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * Use DI to inject Drupal's configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   public $configFactory;

@@ @@
   /**
    * The Date Formatter object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The Entity Type Manager object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Harmonize service.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonize;

@@ @@
   /**
    * The Image Style storage.
    *
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * Groomer Manager injected through DI.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The Drupal Logger Channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * Service that contains all functionality for the harmonizer module.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface          $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The Cache service injected through DI.
-   * @param \Drupal\Core\Config\ConfigFactory                 $configFactory
+   * @param ConfigFactory $configFactory
    *   Configuration Factory service injected through DI.
-   * @param \Drupal\Core\Datetime\DateFormatter               $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The Date Formatter object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface    $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type manager injected through DI.
-   * @param \Drupal\harmonize\Service\Harmonize               $harmonize
+   * @param Harmonize $harmonize
    *   The groomer manager, injected through DI.
-   * @param \Drupal\Core\Language\LanguageManagerInterface    $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager injected through DI.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger Channel factory injected through DI.
    */
   public function __construct(
@@ @@

     // Get image style if we must.
     if ($style) {
-      /** @var \Drupal\image\Entity\ImageStyle $imageStyle */
+      /** @var ImageStyle $imageStyle */
       $imageStyle = $this->imageStyleStorage->load($style);

       if ($imageStyle === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/harmonize/src/PluginManager/Refinery/RefineryFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\PluginManager\Refinery;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\Factory\ContainerFactory;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;

@@ @@
  * This adds further functionality by determining which plugins are
  * created given a Plugin Type.
  *
- * @property \Drupal\harmonize\PluginManager\Refinery\RefineryDiscovery $discovery
+ * @property RefineryDiscovery $discovery
  *
  * @package Drupal\harmonize\PluginManager\Refinery
  */
@@ @@
    * @return object
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function createRefinerInstance($plugin_id, $target, array $configuration = []) {
     $plugin_definition = $this->discovery->getRefinerDefinition($plugin_id, $target);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/harmonize/src/PluginManager/Refinery/RefineryDiscovery.php:115

    ---------- begin diff ----------
@@ @@
    *
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getRefinerDefinition($plugin_id, $target, $exception_on_invalid = TRUE) : ?array {
     $definitions = $this->getDefinitions();
@@ @@
    *
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function doGetRefinerDefinition(array $definitions, $target, $plugin_id, $exception_on_invalid) : ?array {
     // Avoid using a ternary that would create a copy of the array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/harmonize/src/PluginManager/Refinery/Refinery.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\PluginManager\Refinery;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ @@
   /**
    * Drupal's Theme Handler injected through DI.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Drupal's Theme Manager injected through DI.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler to allow for theme plugin discovery.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager injected through DI.
    */
   public function __construct(
@@ @@
    * @return array
    *   All refiner instances for the current theme.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getRefinersForActiveTheme(string $target): array {
     // If there are no plugin definitions, not much for us to do.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/harmonize/src/PluginManager/Refinery/RefinerBase.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Harmonize module's main service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonize;

@@ @@
   /**
    * Harmonize module's main service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonics;

@@ @@
   /**
    * Dependency injection create method override.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The Dependency Injection container.
    * @param array $configuration
    *   The plugin configuration.
@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonize
+   * @param Harmonize $harmonize
    *   The harmonizer manager, injected through DI.
-   * @param \Drupal\harmonize\Service\Harmonics $harmonics
+   * @param Harmonics $harmonics
    *   The harmonics service, injected through DI.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/harmonize/src/Plugin/views/style/HarmonizeStyle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Plugin\views\style;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\harmonize\Service\Harmonize;
 use Drupal\views\Plugin\views\style\StylePluginBase;
@@ @@
   /**
    * Harmonizer manager service.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonizeService;

@@ @@
   /**
    * Current page request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $pluginDefinition
    *   The plugin implementation definition.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonizer manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack service.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, Harmonize $harmonizeService, RequestStack $requestStack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/harmonize/src/Plugin/views/pager/QueryParams.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Plugin\views\pager;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\views\Plugin\views\pager\Some;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\RequestStack;
@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/harmonize/src/Plugin/preprocessors/HarmonizePreprocessorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Plugin\preprocessors;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\harmonize\Service\Harmonize;
 use Drupal\preprocessors\PluginManager\PreprocessorsPluginManager\PreprocessorPluginBase;
 use Drupal\preprocessors\PluginManager\PreprocessorsPluginManager\PreprocessorInterface;
@@ @@
   /**
    * The Harmonize Service injected through DI.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $harmonizeService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/harmonize/src/Harmonizer/RegionHarmonizer/RegionHarmonizer.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param array $variables
    *   The render array of the menu object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/harmonize/src/Harmonizer/MenuHarmonizer/MenuHarmonizer.php:32

    ---------- begin diff ----------
@@ @@
    *
    * @param array $variables
    *   The render array of the menu object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/harmonize/src/Harmonizer/MasterHarmonizerFactory.php:32

    ---------- begin diff ----------
@@ @@
    *   Drupal Object that is currently being processed.
    * @param array $flags
    *   Flags that affect the actions taken when harmonizing the object.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service service containing many Drupal services.
    *
    * @return mixed|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/harmonize/src/Harmonizer/HarmonizerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer;

+use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer;
 /**
  * Provides an interface for Harmonizers.
  *
@@ @@
   /**
    * Get the parent harmonizer for this harmonizer.
    *
-   * @return \Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer
+   * @return EntityHarmonizer
    *   Return the parent harmonizer class linked to this harmonizer, if any.
    */
   public function getParentHarmonizer() : ?Harmonizer;
@@ @@
   /**
    * Set Parent Harmonizer of this Harmonizer.
    *
-   * @param \Drupal\harmonize\Harmonizer\Harmonizer $parentHarmonizer
+   * @param Harmonizer $parentHarmonizer
    *   The parent harmonizer class.
    */
   public function setParentHarmonizer(Harmonizer $parentHarmonizer);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/harmonize/src/Harmonizer/HarmonizerFactory.php:33

    ---------- begin diff ----------
@@ @@
    *   Drupal object that is currently being processed.
    * @param array $flags
    *   Flags that affect the actions taken when harmonization the object.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service service containing many Drupal services.
    *
    * @return mixed
@@ @@
    *   Optimal class for harmonization determined by the factory.
    * @param mixed $object
    *   Object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service injected.
    * @param string $type
    *   The type of harmonizer being created.
    *
-   * @return \Drupal\harmonize\Harmonizer\HarmonizerInterface
+   * @return HarmonizerInterface
    *   Return the harmonizer that was retrieved/created.
    */
   final public static function obtainHarmonizer(string $signature, string $class, $object, Harmonize $harmonizeService, string $type) : HarmonizerInterface {
@@ @@
    * @param string $signature
    *   Signature to search for in the registry.
    *
-   * @return \Drupal\harmonize\Harmonizer\HarmonizerInterface|null
+   * @return HarmonizerInterface|null
    *   Returns a harmonizer if it's found. Otherwise return null.
    */
   final public static function requestHarmonizer(string $signature) : ?HarmonizerInterface {
@@ @@
    *
    * @param string $signature
    *   Signature key to use as an identity to save this harmonizer under.
-   * @param \Drupal\harmonize\Harmonizer\HarmonizerInterface $harmonizer
+   * @param HarmonizerInterface $harmonizer
    *   Harmonizer class to save in the factory's registry.
    */
   final public static function registerHarmonizer(string $signature, HarmonizerInterface $harmonizer): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/harmonize/src/Harmonizer/Harmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer;

+use Drupal\harmonize\Service\Helpers;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\harmonize\Constants\HarmonizationEvents;
@@ @@
   /**
    * Manager service for harmonizer functionality.
    *
-   * @var \Drupal\harmonize\Service\Helpers
+   * @var Helpers
    */
   protected $harmonizeService;

@@ @@
    *
    * @param mixed $object
    *   The object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/harmonize/src/Harmonizer/FormHarmonizer/FormHarmonizer.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The render array of the form object being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/TaxonomyTermEntityHarmonizer.php:8

    ---------- begin diff ----------
@@ @@
 /**
  * Handles harmonization exceptions for TaxonomyTerm entities.
  *
- * @property \Drupal\taxonomy\Entity\Term $entity
+ * @property Term $entity
  *
  * @package Drupal\harmonize\Harmonizer\TaxonomyTermEntityHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/NodeEntityHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;

+use Drupal\node\Entity\Node;
 use Drupal;
 use Drupal\Core\Entity\EntityMalformedException;

@@ @@
 /**
  * Handles harmonization exceptions for Node entities.
  *
- * @property \Drupal\node\Entity\Node $entity
+ * @property Node $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/MenuLinkContentEntityHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;

+use Drupal\menu_link_content\Entity\MenuLinkContent;
 /**
  * Handles harmonization exceptions for MenuLinkContent entities.
  *
- * @property \Drupal\menu_link_content\Entity\MenuLinkContent $entity
+ * @property MenuLinkContent $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/MediaEntityHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;

+use Drupal\media\MediaInterface;
 /**
  * Handles harmonization exceptions for Media entities.
  *
- * @property \Drupal\media\MediaInterface $entity
+ * @property MediaInterface $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/ImageStyleEntityHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;

+use Drupal\image\Entity\ImageStyle;
 /**
  * Handles harmonization exceptions for Node entities.
  *
- * @property \Drupal\image\Entity\ImageStyle $entity
+ * @property ImageStyle $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/FileEntityHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer;

+use Drupal\file\Entity\File;
 /**
  * Handles harmonizer exceptions for File entities.
  *
- * @property \Drupal\file\Entity\File $entity
+ * @property File $entity
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer
  */
@@ @@
       'uri'      => $this->entity->getFileUri(),
       'filename' => $this->entity->getFilename(),
       'filesize' => $this->formatFilesize($this->entity->getSize()),
-      'href'     => file_create_url($this->entity->getFileUri()),
+      'href'     => \Drupal::service('file_url_generator')->generateAbsoluteString($this->entity->getFileUri()),
     ];
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityHarmonizer.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Entity attached to the Harmonizer.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Entity Harmonizer base constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
@@ @@
   /**
    * Get Entity for this Harmonizer.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Return Entity.
    */
   public function getEntity() : EntityInterface {
@@ @@
   /**
    * Harmonize the given Field and return the appropriate data.
    *
-   * @param \Drupal\field\FieldConfigInterface $field_config
+   * @param FieldConfigInterface $field_config
    *   Field Definition of the field being harmonized.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/TextWithSummaryEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'text_with_summary' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/PhysicalMeasurementEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'physical_measurement' type fields.
  *
@@ @@
  *
  * @link https://www.drupal.org/project/physical
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/OfficeHoursEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'office_hours' type fields.
  *
@@ @@
  *
  * @link https://www.drupal.org/project/office_hours
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/LinkEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 use Drupal\Core\Url;

 /**
  * Handles harmonization exceptions for 'link' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ImageEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'image' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/GeofieldEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'geofield' type fields.
  *
@@ @@
  *
  * @link https://www.drupal.org/project/geofield
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/FileEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 use Drupal\harmonize\Constants\HarmonizerFlags;
 use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizerFactory;

@@ @@
 /**
  * Handles exceptions for 'file' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceRevisionsEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'entity_reference_revisions' type fields.
  *
@@ @@
  * @noinspection
  *   LongInheritanceChainInspection
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


33) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityReferenceEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\harmonize\Constants\HarmonizeConfig;
 use Drupal\harmonize\Constants\HarmonizerFlags;
@@ @@
 /**
  * Handles exceptions for 'entity_reference' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/EntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\harmonize\Harmonizer\Harmonizer;
 use Drupal\harmonize\Service\Harmonize;
@@ @@
  *
  * This object is used to return clean field data.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
@@ @@
    *
    * Contains all of the field's data for the given entity.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $fieldData;

@@ @@
   /**
    * Contains the field definition declaration.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $fieldDefinition;

@@ @@
   /**
    * Contains the Drupal storage of the field.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @var FieldStorageDefinitionInterface
    */
   protected $fieldStorage;

@@ @@
   /**
    * EntityFieldHarmonizer constructor.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $fieldData
+   * @param FieldItemListInterface $fieldData
    *   The field data of the field being harmonized.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonizeService
+   * @param Harmonize $harmonizeService
    *   Harmonize module's main service containing Drupal services.
    * @param string $type
    *   The type of harmonizer defined by a string key.
@@ @@
   /**
    * Get the field data for this harmonizer.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface
+   * @return FieldItemListInterface
    *   Raw field data returned.
    */
   public function getFieldData() : FieldItemListInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateTimeEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'datetime' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


36) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/DateRangeEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'datetime' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/ColorEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles harmonization exceptions for 'color_field_type' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/BooleanEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'boolean' type fields.
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/harmonize/src/Harmonizer/EntityHarmonizer/EntityFieldHarmonizer/AddressEntityFieldHarmonizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer;

+use Drupal\harmonize\Service\Harmonize;
 /**
  * Handles exceptions for 'address' type fields.
  *
@@ @@
  *
  * @link https://www.drupal.org/project/address
  *
- * @property \Drupal\harmonize\Service\Harmonize $harmonizeService
+ * @property Harmonize $harmonizeService
  *
  * @package Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer
  */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/harmonize/src/Form/HarmonizeDataConfigForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Helpers service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Helpers
+   * @var Helpers
    */
   private $helpers;

@@ @@
   /**
    * HarmonizeConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal's Configuration Factory injected through DI.
-   * @param \Drupal\harmonize\Service\Helpers $helpers
+   * @param Helpers $helpers
    *   Harmonizer Helpers service injected through DI.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Helpers $helpers) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/harmonize/src/EventSubscriber/RefineryEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\EventSubscriber;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\harmonize\Constants\HarmonizerFlags;
 use Drupal\harmonize\Event\HarmonizationEvent;
 use Drupal\harmonize\Constants\HarmonizationEvents;
@@ @@
   /**
    * Use DI to inject the Refinery Plugin Manager.
    *
-   * @var \Drupal\harmonize\PluginManager\Refinery\Refinery
+   * @var Refinery
    */
   private $refinery;

@@ @@
   /**
    * RefineryEventSubscriber constructor.
    *
-   * @param \Drupal\harmonize\PluginManager\Refinery\Refinery $refinery
+   * @param Refinery $refinery
    *   Refinery Plugin Manager injected through DI.
    */
   public function __construct(Refinery $refinery) {
@@ @@
   /**
    * React to a Harmonizer event.
    *
-   * @param \Drupal\harmonize\Event\HarmonizationEvent $event
+   * @param HarmonizationEvent $event
    *   Event that occurred, containing the harmonizer that fired the event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function onHarmonize(HarmonizationEvent $event) : void {
     /* @see \Drupal\harmonize\Harmonizer\Harmonizer::getSignatureParts() */
@@ @@
   }

   /* @noinspection PhpUnusedPrivateMethodInspection */
-
   /**
    * Sort refiners according to their weight.
    *
-   * @param \Drupal\harmonize\PluginManager\Refinery\RefinerInterface $a
+   * @param RefinerInterface $a
    *   First refiner plugin.
-   * @param \Drupal\harmonize\PluginManager\Refinery\RefinerInterface $b
+   * @param RefinerInterface $b
    *   Second refiner plugin.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/harmonize/src/EventSubscriber/HarmonyEventSubscriber.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * The Harmonics service injected through DI.
    *
-   * @var \Drupal\harmonize\Service\Harmonics
+   * @var Harmonics
    */
   private $harmonics;

@@ @@
   /**
    * HarmonyEventSubscriber constructor.
    *
-   * @param \Drupal\harmonize\Service\Harmonics $harmonics
+   * @param Harmonics $harmonics
    *   The Harmonics service injected through DI.
-   * @param \Drupal\Core\Theme\ThemeManager $themeManager
+   * @param ThemeManager $themeManager
    *   Theme Manager injected through DI.
    */
   public function __construct(Harmonics $harmonics, ThemeManager $themeManager) {
     $this->harmonics = $harmonics;
-    $this->directory = drupal_get_path('theme', $themeManager->getActiveTheme()->getName()) . self::ROOT;
+    $this->directory = \Drupal::service('extension.list.theme')->getPath($themeManager->getActiveTheme()->getName()) . self::ROOT;
     if (file_exists($this->directory . '/functions.php')) {
       /* @noinspection PhpIncludeInspection */
       include_once $this->directory . '/functions.php';
@@ @@
   /**
    * React to a Harmonizer event.
    *
-   * @param \Drupal\harmonize\Event\HarmonizationEvent $event
+   * @param HarmonizationEvent $event
    *   Event that occurred, containing the harmonizer that fired the event.
    */
   public function onHarmonize(HarmonizationEvent $event) : void {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/harmonize/src/Event/MenuHarmonizationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Event;

+use Drupal\harmonize\Harmonizer\MenuHarmonizer\MenuHarmonizer;
 /**
  * Harmonization Event for Menus.
  *
- * @property \Drupal\harmonize\Harmonizer\MenuHarmonizer\MenuHarmonizer $harmonizer
+ * @property MenuHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


44) modules/contrib/harmonize/src/Event/HarmonizationEventFactory.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Builds and returns the appropriate event class.
    *
-   * @param \Drupal\harmonize\Harmonizer\Harmonizer $harmonizer
+   * @param Harmonizer $harmonizer
    *   Harmonizer that launched this event.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


45) modules/contrib/harmonize/src/Event/HarmonizationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Event;

+use Drupal\harmonize\Harmonizer\Harmonizer;
 use Drupal\harmonize\Harmonizer\HarmonizerInterface;
 use Drupal\Component\EventDispatcher\Event;

@@ @@
   /**
    * The harmonizer that fired the event.
    *
-   * @var \Drupal\harmonize\Harmonizer\Harmonizer
+   * @var Harmonizer
    */
   public $harmonizer;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\harmonize\Harmonizer\HarmonizerInterface $harmonizer
+   * @param HarmonizerInterface $harmonizer
    *   Harmonizer attached to the event that was triggered.
    */
   public function __construct(HarmonizerInterface $harmonizer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/harmonize/src/Event/FormHarmonizationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Event;

+use Drupal\harmonize\Harmonizer\FormHarmonizer\FormHarmonizer;
 /**
  * Harmonization Event for Forms.
  *
- * @property \Drupal\harmonize\Harmonizer\FormHarmonizer\FormHarmonizer $harmonizer
+ * @property FormHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


47) modules/contrib/harmonize/src/Event/EntityHarmonizationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Event;

+use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer;
 /**
  * Harmonization Event for Entities.
  *
- * @property \Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityHarmonizer $harmonizer
+ * @property EntityHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


48) modules/contrib/harmonize/src/Event/EntityFieldHarmonizationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\harmonize\Event;

+use Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer\EntityFieldHarmonizer;
 /**
  * Harmonization Event for Entity Fields.
  *
- * @property \Drupal\harmonize\Harmonizer\EntityHarmonizer\EntityFieldHarmonizer\EntityFieldHarmonizer $harmonizer
+ * @property EntityFieldHarmonizer $harmonizer
  *
  * @package Drupal\harmonize\Event
  */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


49) modules/contrib/harmonize/modules/harmonize_rest/src/Plugin/rest/resource/HarmonizeRestResourceBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of the main Harmonize service.
    *
-   * @var \Drupal\harmonize\Service\Harmonize
+   * @var Harmonize
    */
   protected $harmonizeService;

@@ @@
   /**
    * A EntityTypeManager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\harmonize\Service\Harmonize $harmonize_service
+   * @param Harmonize $harmonize_service
    *   A HarmonizerManager instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   A EntityTypeManager instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/harmonize/modules/harmonize_rest/src/Plugin/rest/resource/Entity/SingleEntityResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\teardrop_rest\Plugin\rest\resource\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\harmonize_rest\Plugin\rest\resource\HarmonizeRestResourceBase;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
@@ @@
    * @param int $entity_id
    *   ID of the entity being requested.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Result of the API call.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get($entity_type_id, $entity_id) : JsonResponse {
     // You must to implement the logic of your REST Resource here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/harmonize/modules/harmonize_example/themes/custom/YOUR_THEME/harmony/node/entity.node.page.harmony.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\harmonize\Service\Harmonics;
 /**
  * @file
  * Override & customize data harmonizations for a given Drupal object or entity.
@@ @@
  *    The data consigned by core Harmonize behaviour or Refiners..
  * @var array $harmony
  *    The data that will be returned to the Twig template.
- * @var \Drupal\harmonize\Service\Harmonics $harmonics
+ * @var Harmonics $harmonics
  *    The Harmonics service which contains helper functions.
  *
  * Re-arrange and assign data to the $harmony variable here, and that's all you
    ----------- end diff -----------

52) modules/contrib/harmonize/harmonize.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Module file for the Harmonize module.
@@ @@
 /**
  * Implements hook_entity_presave().
  */
-function harmonize_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function harmonize_entity_presave(EntityInterface $entity) {
   switch ($entity->getEntityTypeId()) {
     case 'node':
       Cache::invalidateTags([HarmonizerTypes::ENTITY . '.' . $entity->getEntityTypeId() . '.' . $entity->bundle() . '.' . $entity->id()]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 52 files have been changed by Rector                                      

