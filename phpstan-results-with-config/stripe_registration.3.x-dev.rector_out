modules/contrib/stripe_registration/Tests/Controller/UserSubscriptionsControllerTest.php
modules/contrib/stripe_registration/src/Controller/MySubscriptions.php
modules/contrib/stripe_registration/src/Controller/UserSubscriptionsController.php
modules/contrib/stripe_registration/src/Entity/StripePlanEntity.php
modules/contrib/stripe_registration/src/Entity/StripePlanEntityInterface.php
modules/contrib/stripe_registration/src/Entity/StripePlanEntityViewsData.php
modules/contrib/stripe_registration/src/Entity/StripeSubscriptionEntity.php
modules/contrib/stripe_registration/src/Entity/StripeSubscriptionEntityInterface.php
modules/contrib/stripe_registration/src/Entity/StripeSubscriptionEntityViewsData.php
modules/contrib/stripe_registration/src/Event/StripeCreateSubscribeSessionEvent.php
modules/contrib/stripe_registration/src/EventSubscriber/WebHookSubscriber.php
modules/contrib/stripe_registration/src/Form/StripePlanEntityDeleteForm.php
modules/contrib/stripe_registration/src/Form/StripePlanEntityForm.php
modules/contrib/stripe_registration/src/Form/StripePlanEntitySettingsForm.php
modules/contrib/stripe_registration/src/Form/StripeSubscriptionEntityDeleteForm.php
modules/contrib/stripe_registration/src/Form/StripeSubscriptionEntityForm.php
modules/contrib/stripe_registration/src/Form/StripeSubscriptionEntitySettingsForm.php
modules/contrib/stripe_registration/src/Plugin/Menu/SubscribeMenuLink.php
modules/contrib/stripe_registration/src/StripePlanEntityAccessControlHandler.php
modules/contrib/stripe_registration/src/StripePlanEntityHtmlRouteProvider.php
modules/contrib/stripe_registration/src/StripePlanEntityListBuilder.php
modules/contrib/stripe_registration/src/StripeRegistrationService.php
modules/contrib/stripe_registration/src/StripeSubscriptionEntityAccessControlHandler.php
modules/contrib/stripe_registration/src/StripeSubscriptionEntityHtmlRouteProvider.php
modules/contrib/stripe_registration/src/StripeSubscriptionEntityListBuilder.php
modules/contrib/stripe_registration/stripe_plan.page.inc
modules/contrib/stripe_registration/stripe_registration.install
modules/contrib/stripe_registration/stripe_registration.module
modules/contrib/stripe_registration/stripe_subscription_entity.page.inc

15 files with changes
=====================

1) modules/contrib/stripe_registration/stripe_registration.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\stripe_api\StripeApiService;
 /**
  * @file
  * Contains stripe_registration.module..
@@ @@

 function stripe_registration_admin_form(array &$form, FormStateInterface $form_state, $form_id) {
   $config = \Drupal::config('stripe_registration.settings');
-  /** @var \Drupal\stripe_api\StripeApiService $stripe_api */
+  /** @var StripeApiService $stripe_api */
   $stripe_api = \Drupal::service('stripe_api.stripe_api');

   $form['redirect'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/stripe_registration/stripe_registration.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * Implements hook_install().
  */
@@ @@
  * Add 'data' field to Stripe Plan entities.
  */
 function stripe_registration_update_8001() {
-  $storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('map')
+  $storage_definition = BaseFieldDefinition::create('map')
     ->setLabel(t('Plan data'))
     ->setDescription(t('Array of raw plan data from Stripe.'));

@@ @@
  * Add 'price_id' field to Stripe Plan and Stripe Subscription entities.
  */
 function stripe_registration_update_8003() {
-  $storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('string')
+  $storage_definition = BaseFieldDefinition::create('string')
     ->setLabel(t('Plan Price ID'))
     ->setDescription(t('The Stripe Price ID for this plan.'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/stripe_registration/src/StripeSubscriptionEntityHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/stripe_registration/src/StripeSubscriptionEntityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration;

+use Drupal\stripe_registration\Entity\StripeSubscriptionEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stripe_registration\Entity\StripeSubscriptionEntityInterface $entity */
+    /** @var StripeSubscriptionEntityInterface $entity */
     switch ($operation) {
       case 'view':
       case 'delete':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/stripe_registration/src/StripeRegistrationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration;

+use Drupal\Core\Config\ConfigFactory;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Stripe\Collection;
+use Stripe\Error\Api;
+use Drupal\stripe_registration\Entity\StripeSubscriptionEntity;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

   /**
-   * @var \Drupal\stripe_api\StripeApiService
+   * @var StripeApiService
    */
   protected $stripeApi;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
-   * @param \Drupal\stripe_api\StripeApiService $stripe_api
+   * @param ConfigFactoryInterface $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param LoggerChannelInterface $logger
+   * @param StripeApiService $stripe_api
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger, StripeApiService $stripe_api) {
     $this->config = $config_factory->get('stripe_registration.settings');
@@ @@
   /**
    * Check if a given user has a stripe subscription.
    *
-   * @param \Drupal\user\UserInterface|\Drupal\Core\Session\AccountInterface $user
+   * @param UserInterface|AccountInterface $user
    *   The user.
    *
    * @return bool
    *  TRUE if the user has a subscription.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function userHasStripeSubscription($user): bool {
     $subscription = $this->loadLocalSubscription([
@@ @@
   /**
    * Loads a user's remote subscription.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user.
    *
-   * @return bool|\Stripe\Collection
+   * @return bool|Collection
    *   A collection of subscriptions.
-   * @throws \Stripe\Error\Api
+   * @throws Api
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function loadRemoteSubscriptionsByUser($user) {
@@ @@
    * @param array $args
    *   Arguments by which to filter the subscriptions.
    *
-   * @return bool|\Stripe\Collection
+   * @return bool|Collection
    *   A collection of subscriptions.
-   * @throws \Stripe\Error\Api
+   * @throws Api
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function loadRemoteSubscriptionMultiple($args = []) {
@@ @@
    * @param array $properties
    *   Local properties by which to filter the subscriptions.
    *
-   * @return \Drupal\stripe_registration\Entity\StripeSubscriptionEntity|bool
+   * @return StripeSubscriptionEntity|bool
    *   A Stripe subscription entity, or else FALSE.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalSubscription($properties = []) {
     $stripe_subscription_entities = $this->loadLocalSubscriptionMultiple($properties);
@@ @@
    * @param array $properties
    *   Local properties by which to filter the subscriptions.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of Stripe subscription entity.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalSubscriptionMultiple($properties = []) {
     $stripe_subscription_entities = $this->entityTypeManager
@@ @@
   /**
    * Load multiple local plans.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects indexed by their IDs. Returns an empty array
    *   if no matching entities are found.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalPlanMultiple() {
     $stripe_plan_entities = $this->entityTypeManager
@@ @@
   /**
    * @param array $properties
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface|mixed
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return bool|EntityInterface|mixed
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalPlan($properties = []) {
     $stripe_plan_entities = $this->entityTypeManager
@@ @@
    * @param array $args
    *   An array of arguments by which to filter the remote plans.
    *
-   * @return \Stripe\Plan[]
-   * @throws \Stripe\Error\Api
+   * @return Plan[]
+   * @throws Api
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function loadRemotePlanMultiple($args = []): array {
@@ @@
    * @param bool $delete
    *   If true, local plans without matching remote plans will be deleted from Drupal.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function syncPlans($delete = FALSE): void {
@@ @@
     $remote_plans = $this->loadRemotePlanMultiple();
     $local_plans = $this->entityTypeManager->getStorage('stripe_plan')->loadMultiple();

-    /** @var \Drupal\Core\Entity\EntityInterface[] $local_plans_keyed */
+    /** @var EntityInterface[] $local_plans_keyed */
     $local_plans_keyed = [];
     foreach ($local_plans as $local_plan) {
       $local_plans_keyed[$local_plan->plan_id->value] = $local_plan;
@@ @@
     }
     // Update existing plans.
     foreach ($plans_to_update as $plan_id) {
-      /** @var \Drupal\Core\Entity\EntityInterface $plan */
+      /** @var EntityInterface $plan */
       $plan = $local_plans_keyed[$plan_id];
-      /** @var \Stripe\Plan $remote_plan */
+      /** @var Plan $remote_plan */
       $remote_plan = $remote_plans[$plan_id];
       $plan->set('name', $remote_plan->name);
       $plan->set('plan_price_id', $remote_plan->id);
@@ @@
   /**
    * @param $remote_id
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function syncRemoteSubscriptionToLocal($remote_id): void {
@@ @@
   }

   /**
-   * @param \Stripe\Subscription $remote_subscription
+   * @param Subscription $remote_subscription
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Stripe\Subscription
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return EntityInterface|Subscription
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function createLocalSubscription($remote_subscription) {
@@ @@
    * @param $uid
    * @param string $customer_id
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function setLocalUserCustomerId($uid, $customer_id): void {
-    /** @var \Stripe\Customer $user */
+    /** @var Customer $user */
     $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
     $user->set('stripe_customer_id', $customer_id);
     $user->save();
@@ @@
    * @param string|int $uid
    *
    * @return
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getLocalUserCustomerId($uid) {
-    /** @var \Stripe\Customer $user */
+    /** @var Customer $user */
     $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
     return $user->get('stripe_customer_id')->value;
   }
@@ @@
   /**
    * @param $customer_id
    *
-   * @return bool|\Drupal\user\Entity\User
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return bool|User
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadUserByStripeCustomerId($customer_id) {
     $users = \Drupal::entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/stripe_registration/src/StripePlanEntityHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/stripe_registration/src/StripePlanEntityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration;

+use Drupal\stripe_registration\Entity\StripePlanEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stripe_registration\Entity\StripePlanEntityInterface $entity */
+    /** @var StripePlanEntityInterface $entity */
     switch ($operation) {
       case 'view':
       case 'delete':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/stripe_registration/src/Form/StripeSubscriptionEntitySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/stripe_registration/src/Form/StripePlanEntitySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/stripe_registration/src/EventSubscriber/WebHookSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration\EventSubscriber;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Stripe\Event;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
 class WebHookSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Drupal\stripe_registration\StripeRegistrationService*/
+   * @var StripeRegistrationService*/
   protected $stripeRegApi;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface*/
+   * @var LoggerChannelInterface*/
   protected $logger;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * WebHookSubscriber constructor.
    *
-   * @param \Drupal\stripe_registration\StripeRegistrationService $stripe_registration_stripe_api
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param StripeRegistrationService $stripe_registration_stripe_api
+   * @param LoggerChannelInterface $logger
+   * @param MessengerInterface $messenger
    */
   public function __construct(StripeRegistrationService $stripe_registration_stripe_api, LoggerChannelInterface $logger, MessengerInterface $messenger) {
     $this->stripeRegApi = $stripe_registration_stripe_api;
@@ @@
   /**
    * Process an incoming webhook.
    *
-   * @param \Drupal\stripe_api\Event\StripeApiWebhookEvent $event
+   * @param StripeApiWebhookEvent $event
    *   Logs an incoming webhook of the setting is on.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    * @throws \Throwable
    */
@@ @@
   }

   /**
-   * @param \Drupal\stripe_api\Event\StripeApiWebhookEvent $event
-   * @param \Stripe\Event $stripe_event
+   * @param StripeApiWebhookEvent $event
+   * @param Event $stripe_event
    */
-  protected function logEvent(StripeApiWebhookEvent $event, \Stripe\Event $stripe_event): void {
+  protected function logEvent(StripeApiWebhookEvent $event, Event $stripe_event): void {
     if (\Drupal::config('stripe_api.settings')->get('log_webhooks')) {
       $this->logger->info("Event Subscriber reacting to @type event:\n @event",
         ['@type' => $event->type, '@event' => json_encode($stripe_event, JSON_PRETTY_PRINT)]);
@@ @@
   /**
    * @param $remote_subscription
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    * @throws \Throwable
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/stripe_registration/src/Event/StripeCreateSubscribeSessionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;

 class StripeCreateSubscribeSessionEvent extends Event {

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account of the user logged in.
    * @param array $params
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/stripe_registration/src/Entity/StripeSubscriptionEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ @@
   }

   /**
-   * @return \Drupal\stripe_registration\Entity\StripePlanEntity|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return StripePlanEntity|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getPlan() {
     $plans = $this->entityTypeManager()
@@ @@
   /**
    * Update local subscription from upstream subscription.
    *
-   * @param \Stripe\Subscription $remote_subscription
+   * @param Subscription $remote_subscription
    *   The remote Strip subscription.
    *
    * @return int
    *   SAVED_NEW or SAVED_UPDATED is returned depending on the operation
    *   performed.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function updateFromUpstream(Subscription $remote_subscription = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/stripe_registration/src/Entity/StripePlanEntityInterface.php:47

    ---------- begin diff ----------
@@ @@
    * @param int $timestamp
    *   The Stripe subscription creation timestamp.
    *
-   * @return \Drupal\stripe_registration\Entity\StripeSubscriptionEntityInterface
+   * @return StripeSubscriptionEntityInterface
    *   The called Stripe subscription entity.
    */
   public function setCreatedTime($timestamp);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/stripe_registration/src/Entity/StripePlanEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration\Entity;

+use Drupal\user\RoleInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ @@
       ->setLabel(t('Plan data'))
       ->setDescription(t('Array of raw plan data from Stripe.'));

-    /** @var \Drupal\user\RoleInterface[] $roles */
+    /** @var RoleInterface[] $roles */
     $roles = user_roles(TRUE);
     $role_options = [];
     foreach ($roles as $rid => $role) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/stripe_registration/src/Controller/UserSubscriptionsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_registration\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\stripe_api\StripeApiService;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ @@
   /**
    * Drupal\stripe_registration\StripeRegistrationService definition.
    *
-   * @var \Drupal\stripe_registration\StripeRegistrationService
+   * @var StripeRegistrationService
    */
   protected $stripeRegistration;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * UserSubscriptionsController constructor.
    *
-   * @param \Drupal\stripe_registration\StripeRegistrationService $stripe_registration
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param StripeRegistrationService $stripe_registration
+   * @param LoggerChannelInterface $logger
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(StripeRegistrationService $stripe_registration, LoggerChannelInterface $logger, AccountProxyInterface $current_user) {
     $this->stripeRegistration = $stripe_registration;
@@ @@

   /**
    * @return string
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see \Drupal\stripe_registration\Plugin\Menu\SubscribeMenuLink::getTitle()
    */
@@ @@
   /**
    * @return array
    *   Return
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function subscribe(): array {
@@ @@
   }

   /**
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    * @throws \Exception
    */
   public function createSubscribeSession(Request $request): Response {
     // Simply instantiating the service will configure Stripe with the correct API key.
-    /** @var \Drupal\stripe_api\StripeApiService $stripe_api */
+    /** @var StripeApiService $stripe_api */
     $stripe_api =  \Drupal::service('stripe_api.stripe_api');
     if ($request->get('return_url')) {
       $success_url = Url::fromUri(
@@ @@
   }

   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Return
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function manageSubscriptionsAccess($user) {
     return AccessResult::allowedIf(
@@ @@
   /**
    * @param $user
    *
-   * @return array|\Drupal\Core\Routing\TrustedRedirectResponse
+   * @return array|TrustedRedirectResponse
    */
   public function manageSubscriptions($user) {
     try {
@@ @@

   /**
    * @param UserInterface $user
-   * @param \Stripe\Plan $plan
+   * @param Plan $plan
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function userIsSubscribedToPlan($user, Plan $plan): bool {
     if ($this->stripeRegistration->userHasStripeSubscription($user)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 15 files have been changed by Rector                                      

