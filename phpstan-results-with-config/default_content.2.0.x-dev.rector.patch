diff --git a/drush/default_content.drush.inc b/drush/default_content.drush.inc
index 99ee4fd..1948f01 100644
--- a/drush/default_content.drush.inc
+++ b/drush/default_content.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\default_content\ExporterInterface;
 /**
  * @file
  * Drush integration for the default_content module.
@@ -54,7 +55,7 @@ function default_content_drush_command() {
  *   The entity ID to export.
  */
 function drush_default_content_export($entity_type_id, $entity_id) {
-  /** @var \Drupal\default_content\ExporterInterface $exporter */
+  /** @var ExporterInterface $exporter */
   $exporter = \Drupal::service('default_content.exporter');
   $export = $exporter->exportContent($entity_type_id, $entity_id, drush_get_option('file'));
 
@@ -72,7 +73,7 @@ function drush_default_content_export($entity_type_id, $entity_id) {
  *   (Optional) The entity ID to export or all entities will be exported.
  */
 function drush_default_content_export_references($entity_type_id, $entity_id = NULL) {
-  /** @var \Drupal\default_content\ExporterInterface $exporter */
+  /** @var ExporterInterface $exporter */
   $exporter = \Drupal::service('default_content.exporter');
 
   $folder = drush_get_option('folder', '.');
@@ -95,7 +96,7 @@ function drush_default_content_export_references($entity_type_id, $entity_id = N
  *   The module name to export.
  */
 function drush_default_content_export_module($module_name) {
-  /** @var \Drupal\default_content\ExporterInterface $exporter */
+  /** @var ExporterInterface $exporter */
   $exporter = \Drupal::service('default_content.exporter');
   $module_folder = \Drupal::moduleHandler()
     ->getModule($module_name)
diff --git a/src/Commands/DefaultContentCommands.php b/src/Commands/DefaultContentCommands.php
index d9c6da4..a67df5b 100644
--- a/src/Commands/DefaultContentCommands.php
+++ b/src/Commands/DefaultContentCommands.php
@@ -15,14 +15,14 @@ class DefaultContentCommands extends DrushCommands {
   /**
    * The default content exporter.
    *
-   * @var \Drupal\default_content\ExporterInterface
+   * @var ExporterInterface
    */
   protected $defaultContentExporter;
 
   /**
    * SimplesitemapController constructor.
    *
-   * @param \Drupal\default_content\ExporterInterface $default_content_exporter
+   * @param ExporterInterface $default_content_exporter
    *   The default content exporter.
    */
   public function __construct(ExporterInterface $default_content_exporter) {
diff --git a/src/Config/DefaultContentConfigSubscriber.php b/src/Config/DefaultContentConfigSubscriber.php
index 0e46743..ae3ef38 100644
--- a/src/Config/DefaultContentConfigSubscriber.php
+++ b/src/Config/DefaultContentConfigSubscriber.php
@@ -15,14 +15,14 @@ class DefaultContentConfigSubscriber implements EventSubscriberInterface {
   /**
    * The default content importer.
    *
-   * @var \Drupal\default_content\ImporterInterface
+   * @var ImporterInterface
    */
   protected $defaultContentImporter;
 
   /**
    * Constructs a DefaultContentConfigSubscriber object.
    *
-   * @param \Drupal\default_content\ImporterInterface $default_content_importer
+   * @param ImporterInterface $default_content_importer
    *   The default content importer.
    */
   public function __construct(ImporterInterface $default_content_importer) {
@@ -32,7 +32,7 @@ class DefaultContentConfigSubscriber implements EventSubscriberInterface {
   /**
    * Creates default content after config synchronization.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    *   The config importer event.
    */
   public function onConfigImport(ConfigImporterEvent $event) {
diff --git a/src/ContentFileStorage.php b/src/ContentFileStorage.php
index a1f85a8..8326950 100644
--- a/src/ContentFileStorage.php
+++ b/src/ContentFileStorage.php
@@ -14,14 +14,14 @@ class ContentFileStorage implements ContentFileStorageInterface {
   /**
    * The filesystem service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Constructs the content file storage.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The filesystem service.
    */
   public function __construct(FileSystemInterface $file_system) {
diff --git a/src/ContentFileStorageInterface.php b/src/ContentFileStorageInterface.php
index b3d59d1..530e7a8 100644
--- a/src/ContentFileStorageInterface.php
+++ b/src/ContentFileStorageInterface.php
@@ -27,7 +27,7 @@ interface ContentFileStorageInterface {
    *   The target folder.
    * @param string $encoded
    *   The encoded entity (YAML).
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content being written.
    * @param string $filename
    *   (optional) The name of the file, defaults to UUID.yml. Must end with
diff --git a/src/Event/ExportEvent.php b/src/Event/ExportEvent.php
index d70b130..a03cd41 100644
--- a/src/Event/ExportEvent.php
+++ b/src/Event/ExportEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\default_content\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines event fired when content is exported.
@@ -15,14 +15,14 @@ class ExportEvent extends Event {
   /**
    * The entity we're exporting.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
   /**
    * Constructs a new export event.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The exported content entity.
    */
   public function __construct(ContentEntityInterface $entity) {
@@ -32,7 +32,7 @@ class ExportEvent extends Event {
   /**
    * Get the entity we've exported.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The exported content entity.
    */
   public function getExportedEntity() {
diff --git a/src/Event/ImportEvent.php b/src/Event/ImportEvent.php
index 0b486f4..7251290 100644
--- a/src/Event/ImportEvent.php
+++ b/src/Event/ImportEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\default_content\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * Defines event fired when content is imported.
  *
@@ -14,7 +14,7 @@ class ImportEvent extends Event {
   /**
    * An array of content entities that were imported.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $entities;
 
@@ -28,7 +28,7 @@ class ImportEvent extends Event {
   /**
    * Constructs a new import event.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   An array of content entities that were imported.
    * @param string $module
    *   The module that provided the default content.
@@ -41,7 +41,7 @@ class ImportEvent extends Event {
   /**
    * Get the imported entities.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   An array of content entities that were imported.
    */
   public function getImportedEntities() {
diff --git a/src/Exporter.php b/src/Exporter.php
index e0df909..70447bb 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\default_content;
 
+use Drupal\default_content\Normalizer\ContentEntityNormalizer;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,68 +25,68 @@ class Exporter implements ExporterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The info file parser.
    *
-   * @var \Drupal\Core\Extension\InfoParserInterface
+   * @var InfoParserInterface
    */
   protected $infoParser;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The content file storage.
    *
-   * @var \Drupal\default_content\ContentFileStorageInterface
+   * @var ContentFileStorageInterface
    */
   protected $contentFileStorage;
 
   /**
    * The YAML normalizer.
    *
-   * @var \Drupal\default_content\Normalizer\ContentEntityNormalizer
+   * @var ContentEntityNormalizer
    */
   protected $contentEntityNormalizer;
 
   /**
    * Constructs the default content manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   The info file parser.
-   * @param \Drupal\default_content\ContentFileStorageInterface $content_file_storage
+   * @param ContentFileStorageInterface $content_file_storage
    *   The content file storage service.
-   * @param \Drupal\default_content\Normalizer\ContentEntityNormalizerInterface $content_entity_normaler
+   * @param ContentEntityNormalizerInterface $content_entity_normaler
    *   The content entity normalizer.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, EventDispatcherInterface $event_dispatcher, ModuleHandlerInterface $module_handler, InfoParserInterface $info_parser, ContentFileStorageInterface $content_file_storage, ContentEntityNormalizerInterface $content_entity_normaler) {
@@ -118,7 +119,7 @@ class Exporter implements ExporterInterface {
       $folder = dirname(dirname($destination));
       $this->contentFileStorage->writeEntity($folder, $return, $entity, basename($destination));
     }
-    $this->eventDispatcher->dispatch(DefaultContentEvents::EXPORT, new ExportEvent($entity));
+    $this->eventDispatcher->dispatch(new ExportEvent($entity), DefaultContentEvents::EXPORT);
 
     return $return;
   }
@@ -186,14 +187,14 @@ class Exporter implements ExporterInterface {
    * This method is also recursive to support use-cases like a node -> media
    * -> file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param int $depth
    *   Guard against infinite recursion.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $indexed_dependencies
+   * @param ContentEntityInterface[] $indexed_dependencies
    *   Previously discovered dependencies.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Keyed array of entities indexed by entity type and ID.
    */
   protected function getEntityReferencesRecursive(ContentEntityInterface $entity, $depth = 0, array &$indexed_dependencies = []) {
diff --git a/src/Importer.php b/src/Importer.php
index e062781..bbdbba3 100644
--- a/src/Importer.php
+++ b/src/Importer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\default_content;
 
+use Drupal\default_content\Normalizer\ContentEntityNormalizer;
 use Drupal\Component\Graph\Graph;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -34,14 +35,14 @@ class Importer implements ImporterInterface {
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -62,56 +63,56 @@ class Importer implements ImporterInterface {
   /**
    * The link manager service.
    *
-   * @var \Drupal\hal\LinkManager\LinkManagerInterface
+   * @var LinkManagerInterface
    */
   protected $linkManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The content file storage.
    *
-   * @var \Drupal\default_content\ContentFileStorageInterface
+   * @var ContentFileStorageInterface
    */
   protected $contentFileStorage;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * The YAML normalizer.
    *
-   * @var \Drupal\default_content\Normalizer\ContentEntityNormalizer
+   * @var ContentEntityNormalizer
    */
   protected $contentEntityNormalizer;
 
   /**
    * Constructs the default content manager.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\hal\LinkManager\LinkManagerInterface $link_manager
+   * @param LinkManagerInterface $link_manager
    *   The link manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\default_content\ContentFileStorageInterface $content_file_storage
+   * @param ContentFileStorageInterface $content_file_storage
    *   The file scanner.
    * @param string $link_domain
    *   Defines relation domain URI for entity links.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\default_content\Normalizer\ContentEntityNormalizerInterface $content_entity_normaler
+   * @param ContentEntityNormalizerInterface $content_entity_normaler
    *   The YAML normalizer.
    */
   public function __construct(Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, LinkManagerInterface $link_manager, EventDispatcherInterface $event_dispatcher, ContentFileStorageInterface $content_file_storage, $link_domain, AccountSwitcherInterface $account_switcher, ContentEntityNormalizerInterface $content_entity_normaler) {
@@ -130,7 +131,7 @@ class Importer implements ImporterInterface {
    */
   public function importContent($module) {
     $created = [];
-    $folder = drupal_get_path('module', $module) . "/content";
+    $folder = \Drupal::service('extension.list.module')->getPath($module) . "/content";
 
     if (file_exists($folder)) {
       $root_user = $this->entityTypeManager->getStorage('user')->load(1);
@@ -248,7 +249,7 @@ class Importer implements ImporterInterface {
           $created[$entity->uuid()] = $entity;
         }
       }
-      $this->eventDispatcher->dispatch(DefaultContentEvents::IMPORT, new ImportEvent($created, $module));
+      $this->eventDispatcher->dispatch(new ImportEvent($created, $module), DefaultContentEvents::IMPORT);
       $this->accountSwitcher->switchBack();
     }
     // Reset the tree.
diff --git a/src/ImporterInterface.php b/src/ImporterInterface.php
index 0d300a3..261892b 100644
--- a/src/ImporterInterface.php
+++ b/src/ImporterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\default_content;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * An interface defining a default content importer.
  */
@@ -13,7 +14,7 @@ interface ImporterInterface {
    * @param string $module
    *   The module to create the default content from.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of created entities keyed by their UUIDs.
    */
   public function importContent($module);
diff --git a/src/Normalizer/ContentEntityNormalizer.php b/src/Normalizer/ContentEntityNormalizer.php
index 08d68ee..000de4f 100644
--- a/src/Normalizer/ContentEntityNormalizer.php
+++ b/src/Normalizer/ContentEntityNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\default_content\Normalizer;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -32,28 +33,28 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -70,13 +71,13 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
   /**
    * Constructs an ContentEntityNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager) {
@@ -178,7 +179,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
       $values[$entity_type->getKey('langcode')] = $data['_meta']['default_langcode'];
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityTypeManager->getStorage($entity_type->id())->create($values);
     foreach ($data['default'] as $field_name => $values) {
       $this->setFieldValues($entity, $field_name, $values);
@@ -205,7 +206,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
   /**
    * Set field values based on the normalized data.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    * @param string $field_name
    *   The name of the field.
@@ -220,7 +221,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
       if (!$entity->get($field_name)->get($delta)) {
         $entity->get($field_name)->appendItem();
       }
-      /** @var \Drupal\Core\Field\FieldItemInterface $item */
+      /** @var FieldItemInterface $item */
       $item = $entity->get($field_name)->get($delta);
 
       // Update the URI based on the target UUID for link fields.
@@ -267,7 +268,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
    * fields that are known to be overwritten like revision creation time
    * and media thumbnail.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return string[]
@@ -277,7 +278,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
     $fields = TypedDataInternalPropertiesHelper::getNonInternalProperties($entity->getTypedData());
 
     // Unset identifiers.
-    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
+    /** @var ContentEntityTypeInterface $entity_type */
     $entity_type = $entity->getEntityType();
     unset($fields[$entity_type->getKey('id')]);
     unset($fields[$entity_type->getKey('uuid')]);
@@ -322,7 +323,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
   /**
    * Normalizes an entity (translation).
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $translation
+   * @param ContentEntityInterface $translation
    *   The entity to be normalized with its currently active language.
    * @param string[] $field_names
    *   List of fields to normalize.
@@ -349,7 +350,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
 
           $serialized_property_names = $this->getCustomSerializedPropertyNames($field_item);
 
-          /** @var \Drupal\Core\Field\FieldItemInterface $field_item */
+          /** @var FieldItemInterface $field_item */
           foreach ($field_item->getProperties(TRUE) as $property_name => $property) {
             $value = $this->getValueFromProperty($property, $field_item, $translation_normalization[$field_name][$delta]);
 
@@ -369,9 +370,9 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
   /**
    * Returns the value for a given property.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $property
+   * @param TypedDataInterface $property
    *   The property to be normalized.
-   * @param \Drupal\Core\Field\FieldItemInterface $field_item
+   * @param FieldItemInterface $field_item
    *   The field item parent of the property.
    * @param array|null $normalized_item
    *   The normalized values of the field item, can be used to set a value
@@ -400,7 +401,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
       $value = $property->getCastedValue();
     }
     elseif ($property instanceof EntityReference && $property->getValue() instanceof ContentEntityInterface) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $target */
+      /** @var ContentEntityInterface $target */
       $target = $property->getValue();
 
       // Ignore user 0 and 1, they are stored with their ID.
@@ -453,7 +454,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
   /**
    * Adds an entity dependency to the normalization root.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    */
   protected function addDependency(ContentEntityInterface $entity) {
@@ -466,7 +467,7 @@ class ContentEntityNormalizer implements ContentEntityNormalizerInterface {
    * @param string $target_uuid
    *   The entity UUID.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The loaded entity.
    */
   protected function loadEntityDependency(string $target_uuid) {
diff --git a/src/Normalizer/ContentEntityNormalizerInterface.php b/src/Normalizer/ContentEntityNormalizerInterface.php
index fa78b79..7f6316c 100644
--- a/src/Normalizer/ContentEntityNormalizerInterface.php
+++ b/src/Normalizer/ContentEntityNormalizerInterface.php
@@ -12,7 +12,7 @@ interface ContentEntityNormalizerInterface {
   /**
    * Normalizes the entity into an array structure.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return array
@@ -28,7 +28,7 @@ interface ContentEntityNormalizerInterface {
    * @param array $data
    *   The normalized data.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The denormalized content entity.
    */
   public function denormalize(array $data);
diff --git a/tests/src/Functional/DefaultContentTest.php b/tests/src/Functional/DefaultContentTest.php
index 6332474..fcfbaa4 100644
--- a/tests/src/Functional/DefaultContentTest.php
+++ b/tests/src/Functional/DefaultContentTest.php
@@ -33,7 +33,7 @@ class DefaultContentTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user 2 with the correct UUID.
     User::create([
@@ -48,6 +48,7 @@ class DefaultContentTest extends BrowserTestBase {
 
   /**
    * Test importing default content.
+   * @doesNotPerformAssertions
    */
   public function testImport() {
     // Enable the module and import the content.
@@ -70,7 +71,7 @@ class DefaultContentTest extends BrowserTestBase {
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
diff --git a/tests/src/Kernel/DefaultContentYamlImportTest.php b/tests/src/Kernel/DefaultContentYamlImportTest.php
index 5519414..6e2ba9e 100644
--- a/tests/src/Kernel/DefaultContentYamlImportTest.php
+++ b/tests/src/Kernel/DefaultContentYamlImportTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\default_content\Kernel;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Config\FileStorage;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\taxonomy\TermInterface;
@@ -103,7 +104,7 @@ class DefaultContentYamlImportTest extends KernelTestBase {
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test_yaml') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test_yaml') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
@@ -136,13 +137,13 @@ class DefaultContentYamlImportTest extends KernelTestBase {
     // been renamed and the URI adjusted.
     $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['filename' => 'test-file.txt']);
     $this->assertCount(1, $files);
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = reset($files);
     $this->assertEquals('public://test-file_0.txt', $file->getFileUri());
     $this->assertFileExists($file->getFileUri());
     $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['filename' => 'test-file1.txt']);
     $this->assertCount(1, $files);
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = reset($files);
     $this->assertEquals('public://example/test-file1.txt', $file->getFileUri());
     $this->assertFileExists($file->getFileUri());
diff --git a/tests/src/Kernel/ExporterIntegrationTest.php b/tests/src/Kernel/ExporterIntegrationTest.php
index 7470a19..de57512 100644
--- a/tests/src/Kernel/ExporterIntegrationTest.php
+++ b/tests/src/Kernel/ExporterIntegrationTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\default_content\Kernel;
 
+use Drupal\default_content\Exporter;
+use Drupal\node\NodeInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Serialization\Yaml;
 use Drupal\file\Entity\File;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
@@ -33,7 +36,7 @@ class ExporterIntegrationTest extends KernelTestBase {
   /**
    * The tested default content exporter.
    *
-   * @var \Drupal\default_content\Exporter
+   * @var Exporter
    */
   protected $exporter;
 
@@ -90,7 +93,7 @@ class ExporterIntegrationTest extends KernelTestBase {
         'format' => 'plain_text',
       ]
     ];
-    $this->assertEqual($expected_description, $exported_decoded['default']['description']);
+    $this->assertEquals($expected_description, $exported_decoded['default']['description']);
 
     // Tests export of taxonomy parent field.
     $child_term = Term::create([
@@ -138,11 +141,11 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_by_entity_type = $this->exporter->exportContentWithReferences('node', $node->id());
 
     // Ensure that the node type is not tryed to be exported.
-    $this->assertEqual(array_keys($exported_by_entity_type), ['node', 'user']);
+    $this->assertEquals(array_keys($exported_by_entity_type), ['node', 'user']);
 
     // Ensure the right UUIDs are exported.
-    $this->assertEqual([$node->uuid()], array_keys($exported_by_entity_type['node']));
-    $this->assertEqual([$user->uuid()], array_keys($exported_by_entity_type['user']));
+    $this->assertEquals([$node->uuid()], array_keys($exported_by_entity_type['node']));
+    $this->assertEquals([$user->uuid()], array_keys($exported_by_entity_type['user']));
 
     // Compare the actual serialized data.
     $meta = [
@@ -223,7 +226,7 @@ class ExporterIntegrationTest extends KernelTestBase {
     ]);
     $node->uuid = $test_uuid;
     $node->save();
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::load($node->id());
     $expected_node = [
       '_meta' => [
@@ -313,7 +316,7 @@ class ExporterIntegrationTest extends KernelTestBase {
     $test_files = $this->getTestFiles('image');
     $test_file = reset($test_files);
 
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create([
       'uri' => $test_file->uri,
       'status' => \FILE_STATUS_PERMANENT,
diff --git a/tests/src/Kernel/MenuLinkContentNormalizerTest.php b/tests/src/Kernel/MenuLinkContentNormalizerTest.php
index 33fdd18..cf0eef7 100644
--- a/tests/src/Kernel/MenuLinkContentNormalizerTest.php
+++ b/tests/src/Kernel/MenuLinkContentNormalizerTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\default_content\Kernel;
 
+use Drupal\default_content\Exporter;
+use Drupal\node\NodeInterface;
+use Drupal\menu_link_content\MenuLinkContentInterface;
+use Drupal\default_content\Normalizer\ContentEntityNormalizerInterface;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -36,7 +40,7 @@ class MenuLinkContentNormalizerTest extends KernelTestBase {
   /**
    * The tested default content exporter.
    *
-   * @var \Drupal\default_content\Exporter
+   * @var Exporter
    */
   protected $exporter;
 
@@ -64,21 +68,21 @@ class MenuLinkContentNormalizerTest extends KernelTestBase {
    */
   public function testMenuLinks() {
 
-    /** @var \Drupal\node\NodeInterface $referenced_node */
+    /** @var NodeInterface $referenced_node */
     $referenced_node = Node::create([
       'type' => 'page',
       'title' => 'Referenced node',
     ]);
     $referenced_node->save();
 
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $link */
+    /** @var MenuLinkContentInterface $link */
     $link = MenuLinkContent::create([
       'title' => 'Parent menu link',
       'link' => 'entity:node/' . $referenced_node->id(),
     ]);
     $link->save();
 
-    /** @var \Drupal\menu_link_content\MenuLinkContentInterface $child_link */
+    /** @var MenuLinkContentInterface $child_link */
     $child_link = MenuLinkContent::create([
       'title' => 'Child menu link',
       'parent' => 'menu_link_content:' . $link->uuid(),
@@ -93,7 +97,7 @@ class MenuLinkContentNormalizerTest extends KernelTestBase {
     ]);
     $child_link->save();
 
-    /** @var \Drupal\default_content\Normalizer\ContentEntityNormalizerInterface $normalizer */
+    /** @var ContentEntityNormalizerInterface $normalizer */
     $normalizer = \Drupal::service('default_content.content_entity_normalizer');
 
     $normalized = $normalizer->normalize($link);
diff --git a/tests/src/Kernel/ParagraphNormalizerTest.php b/tests/src/Kernel/ParagraphNormalizerTest.php
index 039ea02..3c5d5fd 100644
--- a/tests/src/Kernel/ParagraphNormalizerTest.php
+++ b/tests/src/Kernel/ParagraphNormalizerTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\default_content\Kernel;
 
+use Drupal\default_content\Exporter;
+use Drupal\node\NodeInterface;
+use Drupal\default_content\Normalizer\ContentEntityNormalizerInterface;
+use Drupal\default_content\ExporterInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -41,7 +45,7 @@ class ParagraphNormalizerTest extends KernelTestBase {
   /**
    * The tested default content exporter.
    *
-   * @var \Drupal\default_content\Exporter
+   * @var Exporter
    */
   protected $exporter;
 
@@ -132,7 +136,7 @@ class ParagraphNormalizerTest extends KernelTestBase {
       'field_paragraphs' => $child_b,
     ]);
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'page',
       'title' => 'Main node',
@@ -142,7 +146,7 @@ class ParagraphNormalizerTest extends KernelTestBase {
     ]);
     $node->save();
 
-    /** @var \Drupal\default_content\Normalizer\ContentEntityNormalizerInterface $normalizer */
+    /** @var ContentEntityNormalizerInterface $normalizer */
     $normalizer = \Drupal::service('default_content.content_entity_normalizer');
 
     $normalized = $normalizer->normalize($node);
@@ -346,7 +350,7 @@ class ParagraphNormalizerTest extends KernelTestBase {
 
     // Test that the exporter does not include paragraphs but includes entities
     // referenced by them.
-    /** @var \Drupal\default_content\ExporterInterface $exporter */
+    /** @var ExporterInterface $exporter */
     $exporter = \Drupal::service('default_content.exporter');
 
     $by_entity_type = $exporter->exportContentWithReferences('node', $recreated_node->id());
diff --git a/tests/src/Kernel/TranslationNormalizerTest.php b/tests/src/Kernel/TranslationNormalizerTest.php
index d5f0386..d848c2a 100644
--- a/tests/src/Kernel/TranslationNormalizerTest.php
+++ b/tests/src/Kernel/TranslationNormalizerTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\default_content\Kernel;
 
+use Drupal\default_content\Exporter;
+use Drupal\node\NodeInterface;
+use Drupal\default_content\Normalizer\ContentEntityNormalizerInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -36,7 +39,7 @@ class TranslationormalizerTest extends KernelTestBase {
   /**
    * The tested default content exporter.
    *
-   * @var \Drupal\default_content\Exporter
+   * @var Exporter
    */
   protected $exporter;
 
@@ -67,7 +70,7 @@ class TranslationormalizerTest extends KernelTestBase {
    */
   public function testTranslationNormalization() {
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'page',
       'title' => 'English Title',
@@ -77,7 +80,7 @@ class TranslationormalizerTest extends KernelTestBase {
     $node->addTranslation('fr', ['title' => 'French Title']);
     $node->save();
 
-    /** @var \Drupal\default_content\Normalizer\ContentEntityNormalizerInterface $normalizer */
+    /** @var ContentEntityNormalizerInterface $normalizer */
     $normalizer = \Drupal::service('default_content.content_entity_normalizer');
 
     $normalized = $normalizer->normalize($node);
