modules/contrib/ip_login/ip_login.module
modules/contrib/ip_login/src/EventSubscriber/IpLoginSubscriber.php
modules/contrib/ip_login/src/Form/IpLoginSettingsForm.php
modules/contrib/ip_login/src/IpLoginController.php
modules/contrib/ip_login/src/IpLoginPageCacheRequestPolicy.php
modules/contrib/ip_login/src/IpLoginServiceProvider.php
modules/contrib/ip_login/src/StackMiddleware/EarlyIpLoginMiddleware.php
modules/contrib/ip_login/src/StackMiddleware/IpLoginMiddleware.php

5 files with changes
====================

1) modules/contrib/ip_login/src/StackMiddleware/IpLoginMiddleware.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * Constructs an IpLoginMiddleware.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
    */
   public function __construct(HttpKernelInterface $http_kernel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/ip_login/src/StackMiddleware/EarlyIpLoginMiddleware.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * Constructs an EarlyIpLoginMiddleware.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
    * @param string $service_name
    *   The name of the session service, defaults to "session".
@@ @@
     // If we determined that we can't auto-login the user, set a session cookie
     // so we don't repeat the user IP check for this browser session.
     if (empty($matched_uid)) {
-      $response->headers->setCookie(new Cookie('ipLoginAttempted', 1));
+      $response->headers->setCookie(Cookie::create('ipLoginAttempted', 1));
     }
     return $response;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector


3) modules/contrib/ip_login/src/IpLoginController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ip_login;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Menu callback for IP-based login: do the actual login.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response object that may be returned by the controller.
    */
   public function loginProcess(Request $request) {
@@ @@
    *
    * @param int|string $uid
    *   A valid user ID.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    */
   public static function doUserLogin($uid, Request $request) {
@@ @@
   /**
    * Looks up if current request IP matches an IP login.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object.
    *
    * @return string|false
@@ @@
   /**
    * Checks whether a user can log into another account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user account.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ip_login/src/Form/IpLoginSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The cache factory.
    *
-   * @var \Drupal\Core\Cache\CacheFactoryInterface
+   * @var CacheFactoryInterface
    */
   protected $cacheFactory;

@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs a PathautoSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Defines the configuration object factory.
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $cache_factory
+   * @param CacheFactoryInterface $cache_factory
    *   The cache factory.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheFactoryInterface $cache_factory, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ip_login/src/EventSubscriber/IpLoginSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ip_login\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Cookie;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Clears various IP Login cookies if needed.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@

     $response = $event->getResponse();
     if ($event->getRequest()->attributes->get('ip_login_user_login')) {
-      $response->headers->setCookie(new Cookie('ipLoginAttempted', '', 1));
-      $response->headers->setCookie(new Cookie('ipLoginAsDifferentUser', '', 1));
+      $response->headers->setCookie(Cookie::create('ipLoginAttempted', '', 1));
+      $response->headers->setCookie(Cookie::create('ipLoginAsDifferentUser', '', 1));
     }

     $can_login_as_another_user = $event->getRequest()->attributes->get('ip_login_can_login_as_another_user');
     if ($can_login_as_another_user !== NULL) {
-      $response->headers->setCookie(new Cookie('ipLoginAsDifferentUser', $can_login_as_another_user));
+      $response->headers->setCookie(Cookie::create('ipLoginAsDifferentUser', $can_login_as_another_user));
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

