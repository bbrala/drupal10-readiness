modules/contrib/guidelines/guideline.page.inc
modules/contrib/guidelines/guidelines.api.php
modules/contrib/guidelines/guidelines.module
modules/contrib/guidelines/src/Controller/GuidelineController.php
modules/contrib/guidelines/src/Controller/GuidelineJsonController.php
modules/contrib/guidelines/src/Entity/Guideline.php
modules/contrib/guidelines/src/Entity/GuidelineInterface.php
modules/contrib/guidelines/src/Entity/GuidelineType.php
modules/contrib/guidelines/src/Entity/GuidelineTypeInterface.php
modules/contrib/guidelines/src/Entity/GuidelineViewsData.php
modules/contrib/guidelines/src/Form/GuidelineDeleteForm.php
modules/contrib/guidelines/src/Form/GuidelineForm.php
modules/contrib/guidelines/src/Form/GuidelineGlobalSettingsForm.php
modules/contrib/guidelines/src/Form/GuidelineRevisionDeleteForm.php
modules/contrib/guidelines/src/Form/GuidelineRevisionRevertForm.php
modules/contrib/guidelines/src/Form/GuidelineRevisionRevertTranslationForm.php
modules/contrib/guidelines/src/Form/GuidelineSettingsForm.php
modules/contrib/guidelines/src/Form/GuidelineSortForm.php
modules/contrib/guidelines/src/Form/GuidelineTypeDeleteForm.php
modules/contrib/guidelines/src/Form/GuidelineTypeForm.php
modules/contrib/guidelines/src/GuidelineAccessControlHandler.php
modules/contrib/guidelines/src/GuidelineHtmlRouteProvider.php
modules/contrib/guidelines/src/GuidelineListBuilder.php
modules/contrib/guidelines/src/GuidelinePermissions.php
modules/contrib/guidelines/src/GuidelineStorage.php
modules/contrib/guidelines/src/GuidelineStorageInterface.php
modules/contrib/guidelines/src/GuidelineTranslationHandler.php
modules/contrib/guidelines/src/GuidelineTypeHtmlRouteProvider.php
modules/contrib/guidelines/src/GuidelineTypeListBuilder.php
modules/contrib/guidelines/src/Plugin/Field/FieldFormatter/GuidelineFieldTargetFormatter.php
modules/contrib/guidelines/src/Plugin/Field/FieldType/GuidelineFieldTargetType.php
modules/contrib/guidelines/src/Plugin/Field/FieldWidget/GuidelineFieldTargetWidget.php

18 files with changes
=====================

1) modules/contrib/guidelines/src/Plugin/Field/FieldWidget/GuidelineFieldTargetWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldWidget\OptionsButtonsWidget;
 use Drupal\Core\Form\FormStateInterface;
@@ @@

     $content_entities = array_keys(\Drupal::service('entity_type.repository')->getEntityTypeLabels(TRUE)['Content']);

-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info */
+    /** @var EntityTypeBundleInfo $entity_type_bundle_info */
     $entity_type_bundle_info = \Drupal::service('entity_type.bundle.info');
     $all_bundle_info = $entity_type_bundle_info->getAllBundleInfo();

@@ @@
         'revision_translation_affected',
       ];

-      /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
+      /** @var EntityFieldManager $entity_field_manager */
       $entity_field_manager = \Drupal::service('entity_field.manager');

       $enabled_entities = array_filter($this->getSetting('enabled_entities'));
@@ @@
               continue;
             }

-            /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition */
+            /** @var BaseFieldDefinition $field_definition */
             $key = $entity_type . '.' . $bundle . '.' . $field_name;
             $options[$key] = $this->getBundleLabel($entity_type, $bundle) . ' > ' . $field_definition->getLabel() . ' (' . $field_name . ')';
           }
           elseif ($field_definition instanceof FieldConfig) {
-            /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+            /** @var FieldConfig $field_definition */
             $key = $entity_type . '.' . $bundle . '.' . $field_name;
             $options[$key] = $this->getBundleLabel($entity_type, $bundle) . ' > ' . $field_definition->getLabel() . ' (' . $field_name . ')';
           }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/guidelines/src/Plugin/Field/FieldFormatter/GuidelineFieldTargetFormatter.php:63

    ---------- begin diff ----------
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/guidelines/src/GuidelineStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Guideline revision IDs for a specific Guideline.
    *
-   * @param \Drupal\guidelines\Entity\GuidelineInterface $entity
+   * @param GuidelineInterface $entity
    *   The Guideline entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Guideline author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\guidelines\Entity\GuidelineInterface $entity
+   * @param GuidelineInterface $entity
    *   The Guideline entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Guideline with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/guidelines/src/GuidelinePermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\guidelines\Entity\GuidelineType $type
+   * @param GuidelineType $type
    *   The Guideline type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/guidelines/src/GuidelineListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines;

+use Drupal\guidelines\Entity\Guideline;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\guidelines\Entity\Guideline $entity */
+    /** @var Guideline $entity */
     $row['label'] = Link::createFromRoute(
       $entity->label(),
       'entity.guideline.canonical',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/guidelines/src/GuidelineHtmlRouteProvider.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the sort route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSortRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/guidelines/src/GuidelineAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines;

+use Drupal\guidelines\Entity\GuidelineInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\guidelines\Entity\GuidelineInterface $entity */
-
+    /** @var GuidelineInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Guideline.
    * @param string $operation
    *   Operation.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/guidelines/src/Form/GuidelineSortForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\guidelines\Entity\Guideline;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\guidelines\Entity\Guideline $guideline */
+    /** @var Guideline $guideline */
     $guideline = $this->entity;

     $children = $guideline->getChildren();
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\guidelines\Entity\Guideline $guideline */
+    /** @var Guideline $guideline */
     $guideline = $this->entity;

     $children = $guideline->getChildren();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/guidelines/src/Form/GuidelineSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/guidelines/src/Form/GuidelineRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\guidelines\Entity\GuidelineInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(GuidelineInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\guidelines\Entity\GuidelineInterface $default_revision */
+    /** @var GuidelineInterface $default_revision */
     $latest_revision = $this->GuidelineStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/guidelines/src/Form/GuidelineRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Guideline revision.
    *
-   * @var \Drupal\guidelines\Entity\GuidelineInterface
+   * @var GuidelineInterface
    */
   protected $revision;

@@ @@
   /**
    * The Guideline storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $guidelineStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\guidelines\Entity\GuidelineInterface $revision
+   * @param GuidelineInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\guidelines\Entity\GuidelineInterface
+   * @return GuidelineInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GuidelineInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/guidelines/src/Form/GuidelineRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Form;

+use Drupal\guidelines\Entity\GuidelineInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Guideline revision.
    *
-   * @var \Drupal\guidelines\Entity\GuidelineInterface
+   * @var GuidelineInterface
    */
   protected $revision;

@@ @@
   /**
    * The Guideline storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $guidelineStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/guidelines/src/Form/GuidelineForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\guidelines\Entity\Guideline;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\guidelines\Entity\Guideline $this->entity */
+    /** @var Guideline $this ->entity */
     $form = parent::buildForm($form, $form_state);

     if (!$this->entity->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/guidelines/src/Entity/GuidelineInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Guideline revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/guidelines/src/Controller/GuidelineJsonController.php:27

    ---------- begin diff ----------
@@ @@
   public function getFormGuidelines($entity_type, $bundle) {
     $descriptions = [];

-    /** @var Drupal\guidelines\Entity\Guideline[] $guidelines */
+    /** @var Guideline[] $guidelines */
     $guidelines = Guideline::loadByEntity($entity_type);

     foreach ($guidelines as $guideline) {
@@ @@
         if (!empty($bundle) && $bundle === $b) {
           $view_builder = \Drupal::entityTypeManager()->getViewBuilder('guideline');
           $pre_render = $view_builder->view($guideline, 'default');
-          $render_output = render($pre_render);
+          $render_output = \Drupal::service('renderer')->render($pre_render);

           $description = [
             'label' => $f,
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/guidelines/src/Controller/GuidelineController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\guidelines\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Generates an overview table of older revisions of a Guideline.
    *
-   * @param \Drupal\guidelines\Entity\GuidelineInterface $guideline
+   * @param GuidelineInterface $guideline
    *   A Guideline object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/guidelines/guidelines.module:128

    ---------- begin diff ----------
@@ @@
   $field_name = $context['items']->getName();

   if (!isset($descriptions[$entity_type])) {
-    /** @var Drupal\guidelines\Entity\Guideline[] $description_entities */
+    /** @var Guideline[] $description_entities */
     $guidelines = Guideline::loadByEntity($entity_type);
     foreach ($guidelines as $guideline) {
       foreach ($guideline->field_field as $field) {
@@ @@
   if (isset($descriptions[$entity_type][$key])) {
     $view_builder = \Drupal::entityTypeManager()->getViewBuilder('guideline');
     $pre_render = $view_builder->view($descriptions[$entity_type][$key], 'default');
-    $render_output = render($pre_render);
+    $render_output = \Drupal::service('renderer')->render($pre_render);

     if (isset($element['#description'])) {
       $element['#description'] = $render_output;
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


18) modules/contrib/guidelines/guidelines.api.php:11

    ---------- begin diff ----------
@@ @@
  *
  * @param array $description
  *   Description with basic fields present.
- * @param \Drupal\guidelines\Entity\Guideline $guideline
+ * @param Guideline $guideline
  *   The full guideline.
  * @param array $context
  *   Array containing entity type and bundle.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 18 files have been changed by Rector                                      

