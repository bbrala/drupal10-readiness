modules/contrib/paragraphs_sets/paragraphs_sets.api.php
modules/contrib/paragraphs_sets/paragraphs_sets.install
modules/contrib/paragraphs_sets/paragraphs_sets.module
modules/contrib/paragraphs_sets/src/Controller/ParagraphsSetListBuilder.php
modules/contrib/paragraphs_sets/src/Entity/ParagraphsSet.php
modules/contrib/paragraphs_sets/src/Form/ParagraphsSetForm.php
modules/contrib/paragraphs_sets/src/ParagraphsSetInterface.php
modules/contrib/paragraphs_sets/src/ParagraphsSets.php
modules/contrib/paragraphs_sets/tests/src/Functional/ModuleInstallTest.php
modules/contrib/paragraphs_sets/tests/src/Functional/ParagraphSetBasicFunctionality.php
modules/contrib/paragraphs_sets/tests/src/Traits/ParagraphsSetsFunctionalTestTrait.php

7 files with changes
====================

1) modules/contrib/paragraphs_sets/tests/src/Traits/ParagraphsSetsFunctionalTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_sets\Traits;

+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Serialization\Yaml;
 use Drupal\paragraphs_sets\Entity\ParagraphsSet;
 use Drupal\Tests\paragraphs\FunctionalJavascript\ParagraphsTestBaseTrait;
@@ @@
   public function addParagraphRefFieldInNodeType(string $paragraphRefFieldName, string $nodeType) {
     $this->addParagraphsField($nodeType, $paragraphRefFieldName, 'node', 'paragraphs');

-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $formDisplay */
+    /** @var EntityFormDisplay $formDisplay */
     $formDisplay = \Drupal::service('entity_display.repository')->getFormDisplay('node', $nodeType);
     $displaySettings = $formDisplay->getComponent($paragraphRefFieldName);
     $displaySettings['third_party_settings']['paragraphs_sets']['paragraphs_sets']['use_paragraphs_sets'] = 1;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/paragraphs_sets/src/ParagraphsSets.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_sets;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
     $results = $query->execute();
     $sets = [];
     foreach ($results as $id) {
-      /** @var \Drupal\Core\Config\ImmutableConfig $config */
+      /** @var ImmutableConfig $config */
       if (($config = $config_factory->get("paragraphs_sets.set.{$id}"))) {
         $data = $config->get();
         // Check that all paragraph types in set are allowed in field.
@@ @@
    *   Form elements to build the selection for.
    * @param array $context
    *   Required context for the set selection.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $default
    *   Current selected set.
@@ @@
    *   The form element array.
    */
   public static function buildSelectSetSelection(array $elements, array $context, FormStateInterface $form_state, $default = NULL) {
-    /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+    /** @var ParagraphsWidget $widget */
     $widget = $context['widget'];
     if (!($widget instanceof ParagraphsWidget)) {
       return [];
@@ @@
    *   The array of #parents where the field lives in the form.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *   The array of #parents where the widget lives in the form.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $field_state
    *   The array of data to store. See getWidgetState() for the structure and
@@ @@
    *
    * @param array $widget_state
    *   Widget state as reference, so that it can be updated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $field_path
    *   Path to paragraph field.
@@ @@
   /**
    * Check if form state is in translation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
-   * @param \Drupal\Core\Entity\EntityInterface $host
+   * @param EntityInterface $host
    *   The host entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/paragraphs_sets/src/ParagraphsSetInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_sets;

+use Drupal\file\FileInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Returns the icon file entity.
    *
-   * @return \Drupal\file\FileInterface|bool
+   * @return FileInterface|bool
    *   The icon's file entity or FALSE if icon does not exist.
    */
   public function getIconFile();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/paragraphs_sets/src/Form/ParagraphsSetForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_sets\Form;

+use Drupal\paragraphs\ParagraphsTypeInterface;
+use Drupal\paragraphs_sets\ParagraphsSetInterface;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\paragraphs\ParagraphsTypeInterface
+   * @var ParagraphsTypeInterface
    */
   protected $entity;

@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\paragraphs_sets\ParagraphsSetInterface $paragraphs_set */
+    /** @var ParagraphsSetInterface $paragraphs_set */
     $paragraphs_set = $this->entity;

     if (!$paragraphs_set->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/paragraphs_sets/src/Entity/ParagraphsSet.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_sets\Entity;

+use Drupal\file\FileUsage\FileUsageInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\paragraphs_sets\ParagraphsSetInterface;
@@ @@
    */
   public function getIconUrl() {
     if ($image = $this->getIconFile()) {
-      return file_create_url($image->getFileUri());
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($image->getFileUri());
     }

     return FALSE;
@@ @@
     // Update the file usage for the icon files.
     if (!$update || $this->icon_uuid != $this->original->icon_uuid) {
       // The icon has changed. Update file usage.
-      /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+      /** @var FileUsageInterface $file_usage */
       $file_usage = \Drupal::service('file.usage');

       // Add usage of the new icon file, if it exists. It might not exist, if
@@ @@
    * @param string $uuid
    *   The file entity's UUID.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   The file entity. NULL if the UUID is invalid.
    */
   protected function getFileByUuid($uuid) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/paragraphs_sets/src/Controller/ParagraphsSetListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_sets\Controller;

+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\field\FieldConfigInterface $entity */
+    /** @var FieldConfigInterface $entity */
     $operations = parent::getDefaultOperations($entity);

     if (isset($operations['edit'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/paragraphs_sets/paragraphs_sets.module:29

    ---------- begin diff ----------
@@ @@
   return [
     'field_multiple_value_form__paragraphs_sets' => [
       'render element' => 'element',
-      'path' => drupal_get_path('module', 'paragraphs_sets') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('paragraphs_sets') . '/templates',
     ],
     'paragraphs_sets_add_dialog' => [
       'render element' => 'element',
-      'path' => drupal_get_path('module', 'paragraphs_sets') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('paragraphs_sets') . '/templates',
     ],
   ];
 }
@@ @@
  * Implements hook_field_widget_multivalue_form_alter().
  */
 function paragraphs_sets_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget $widget */
+  /** @var ParagraphsWidget $widget */
   $widget = $context['widget'];
   if (!$widget instanceof ParagraphsWidget) {
     return;
@@ @@
   $form = $context['form'];
   $widget_settings = $widget->getSettings();

-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   $field_definition = $items->getFieldDefinition();
   $field_name = $field_definition->getName();
   $field_parents = $form['#parents'];
@@ @@
  * @param string $name
  *   Name (ID) of paragraphs set.
  *
- * @return \Drupal\paragraphs_sets\Entity\ParagraphsSet
+ * @return ParagraphsSet
  *   The loaded set or NULL if no set with the given name exists.
  */
 function paragraphs_set_load($name) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

