modules/contrib/mailchimp/mailchimp.api.php
modules/contrib/mailchimp/mailchimp.install
modules/contrib/mailchimp/mailchimp.module
modules/contrib/mailchimp/modules/mailchimp_campaign/mailchimp_campaign.module
modules/contrib/mailchimp/modules/mailchimp_campaign/src/Controller/MailchimpCampaignController.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/Entity/MailchimpCampaign.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/Entity/MailchimpCampaignViewBuilder.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/Form/MailchimpCampaignDeleteForm.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/Form/MailchimpCampaignForm.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/Form/MailchimpCampaignSendForm.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/MailchimpCampaignAccessControlHandler.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/MailchimpCampaignInterface.php
modules/contrib/mailchimp/modules/mailchimp_campaign/src/Plugin/Filter/FilterMailchimpCampaign.php
modules/contrib/mailchimp/modules/mailchimp_campaign/tests/modules/mailchimp_campaign_test/src/MailchimpCampaignConfigOverrider.php
modules/contrib/mailchimp/modules/mailchimp_campaign/tests/src/Functional/MailchimpCampaignTest.php
modules/contrib/mailchimp/modules/mailchimp_campaign/tests/src/Functional/MailchimpCampaignTestBase.php
modules/contrib/mailchimp/modules/mailchimp_events/mailchimp_events.module
modules/contrib/mailchimp/modules/mailchimp_events/modules/mailchimp_events_example/src/Form/AddMailchimpEvent.php
modules/contrib/mailchimp/modules/mailchimp_events/modules/mailchimp_events_example/src/Form/ListMailchimpEventsForMember.php
modules/contrib/mailchimp/modules/mailchimp_events/src/Entity/MailchimpEvent.php
modules/contrib/mailchimp/modules/mailchimp_events/src/Entity/MailchimpEventInterface.php
modules/contrib/mailchimp/modules/mailchimp_events/src/Entity/MailchimpEventViewsData.php
modules/contrib/mailchimp/modules/mailchimp_events/src/Form/MailchimpEventDeleteForm.php
modules/contrib/mailchimp/modules/mailchimp_events/src/Form/MailchimpEventForm.php
modules/contrib/mailchimp/modules/mailchimp_events/src/MailchimpEventAccessControlHandler.php
modules/contrib/mailchimp/modules/mailchimp_events/src/MailchimpEventHtmlRouteProvider.php
modules/contrib/mailchimp/modules/mailchimp_events/src/MailchimpEventListBuilder.php
modules/contrib/mailchimp/modules/mailchimp_events/src/Plugin/WebformHandler/AddMailchimpEventWebformHandler.php
modules/contrib/mailchimp/modules/mailchimp_lists/mailchimp_lists.install
modules/contrib/mailchimp/modules/mailchimp_lists/mailchimp_lists.module
modules/contrib/mailchimp/modules/mailchimp_lists/mailchimp_lists.rules.inc
modules/contrib/mailchimp/modules/mailchimp_lists/src/Controller/MailchimpFieldsController.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Controller/MailchimpListsController.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsClearCacheForm.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsSubscribeForm.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsUpdateMergevarsForm.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsWebhookSettingsForm.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Plugin/Field/FieldFormatter/MailchimpListsFieldSubscribeFormatter.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Plugin/Field/FieldFormatter/MailchimpListsSubscribeDefaultFormatter.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Plugin/Field/FieldType/MailchimpListsSubscription.php
modules/contrib/mailchimp/modules/mailchimp_lists/src/Plugin/Field/FieldWidget/MailchimpListsSelectWidget.php
modules/contrib/mailchimp/modules/mailchimp_lists/tests/modules/mailchimp_lists_test/src/MailchimpListsConfigOverrider.php
modules/contrib/mailchimp/modules/mailchimp_lists/tests/src/Functional/MailchimpListsSubscriptionTest.php
modules/contrib/mailchimp/modules/mailchimp_lists/tests/src/Functional/MailchimpListsTest.php
modules/contrib/mailchimp/modules/mailchimp_lists/tests/src/Functional/MailchimpListsTestBase.php
modules/contrib/mailchimp/modules/mailchimp_lists/tests/src/Functional/MailchimpListsWebhookTest.php
modules/contrib/mailchimp/modules/mailchimp_signup/mailchimp_signup.module
modules/contrib/mailchimp/modules/mailchimp_signup/src/Controller/MailchimpSignupController.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Controller/MailchimpSignupListBuilder.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Entity/MailchimpSignup.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Form/MailchimpSignupDeleteForm.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Form/MailchimpSignupForm.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Form/MailchimpSignupPageForm.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/MailchimpSignupInterface.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Plugin/Block/MailchimpSignupSubscribeBlock.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Plugin/Derivative/MailchimpSignupSubscribeBlock.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Plugin/Field/FieldFormatter/MailchimpSignupFormFormatter.php
modules/contrib/mailchimp/modules/mailchimp_signup/src/Routing/MailchimpSignupRoutes.php
modules/contrib/mailchimp/modules/mailchimp_signup/tests/src/Functional/MailchimpSignupFormTest.php
modules/contrib/mailchimp/src/Access/MailchimpConfigurationAccessCheck.php
modules/contrib/mailchimp/src/Autoload.php
modules/contrib/mailchimp/src/ClientFactory.php
modules/contrib/mailchimp/src/Commands/MailchimpCommands.php
modules/contrib/mailchimp/src/Controller/MailchimpWebhookController.php
modules/contrib/mailchimp/src/Exception/ClientFactoryException.php
modules/contrib/mailchimp/src/Form/MailchimpAdminSettingsForm.php
modules/contrib/mailchimp/tests/modules/mailchimp_test/src/DrupalMailchimp.php
modules/contrib/mailchimp/tests/modules/mailchimp_test/src/MailchimpConfigOverrider.php
modules/contrib/mailchimp/tests/src/Functional/FunctionalMailchimpTestBase.php
modules/contrib/mailchimp/tests/src/Functional/MailchimpAPITest.php
modules/contrib/mailchimp/tests/src/Functional/MailchimpAdminSettingsFormTest.php
modules/contrib/mailchimp/tests/src/Functional/WebhookHashTest.php

39 files with changes
=====================

1) modules/contrib/mailchimp/tests/src/Functional/FunctionalMailchimpTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mailchimp\Functional;

+use Drupal\user\Entity\User;
 use Drupal\mailchimp_test\MailchimpConfigOverrider;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user that can administrate Mailchimp.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * An authenticated user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $lowUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('page_title_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/mailchimp/src/Form/MailchimpAdminSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Creates a new MailchimpAdminSettingsForm instance.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(LanguageManagerInterface $languageManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/mailchimp/src/Controller/MailchimpWebhookController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a MailchimpWebhookController.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/mailchimp/src/ClientFactory.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Mailchimp Settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $config;

@@ @@
   /**
    * Mailchimp logging interface.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;

@@ @@
   /**
    * Messenger Service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected MessengerInterface $messenger;

@@ @@
   /**
    * ClientFactory constructor.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Mailchimp Settings.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logging interface.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger Service.
    */
   public function __construct(Config $config, LoggerInterface $logger, MessengerInterface $messenger) {
@@ @@
    * @param string $classname
    *   Relative class name for a Mailchimp Library object.
    *
-   * @return \Mailchimp\Mailchimp
+   * @return Mailchimp
    *   Mailchimp Library.
    *
-   * @throws \Drupal\mailchimp\Exception\ClientFactoryException
+   * @throws ClientFactoryException
    */
   public function getByClassName(string $classname = 'Mailchimp'): Mailchimp {
     return $this->getInstance($this->resolveClass($classname));
@@ @@
    * @param string $classname
    *   Relative class name for a Mailchimp Library object.
    *
-   * @return \Mailchimp\Mailchimp|null
+   * @return Mailchimp|null
    *   Mailchimp Library or Null.
    */
   public function getByClassNameOrNull(string $classname = 'Mailchimp') {
@@ @@
    * @param string $class
    *   Explicit class name for a Mailchimp Library object.
    *
-   * @return \Mailchimp\Mailchimp
+   * @return Mailchimp
    *   Mailchimp Library.
    *
-   * @throws \Drupal\mailchimp\Exception\ClientFactoryException
+   * @throws ClientFactoryException
    */
   protected function getInstance(string $class): Mailchimp {
     if (!isset($this->instances[$class])) {
@@ @@
    * @param string $class
    *   Relative class name for a Mailchimp Library object.
    *
-   * @return \Mailchimp\Mailchimp
+   * @return Mailchimp
    *   Mailchimp Library.
    *
-   * @throws \Drupal\mailchimp\Exception\ClientFactoryException
+   * @throws ClientFactoryException
    */
   protected function createInstance(string $class): Mailchimp {
     $api_key = $this->config->get('api_key');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/mailchimp/src/Access/MailchimpConfigurationAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailchimp\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
    *
    * Ensures a Mailchimp API key has been provided.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/mailchimp/modules/mailchimp_signup/tests/src/Functional/MailchimpSignupFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mailchimp_signup\Functional;

+use Drupal\Core\Block\BlockManager;
 use Drupal\Tests\mailchimp\Functional\FunctionalMailchimpTestBase;
 use Drupal\user\Entity\Role;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $rid = $this->adminUser->getRoles()[1];
@@ @@
     $this->assertSession()->pageTextContains('You have signed up');
     $this->assertSession()->addressEquals('/home');

-    /** @var \Drupal\Core\Block\BlockManager $manager */
+    /** @var BlockManager $manager */
     $manager = \Drupal::service('plugin.manager.block');
     $manager->clearCachedDefinitions();

     // Test the block.
-    $this->assertNoText('My signup block');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('My signup block');
     $this->drupalPlaceBlock('mailchimp_signup_subscribe_block:my_signup_form', ['label' => 'My signup block']);
     $this->drupalGet('/foo');
     $this->assertSession()->pageTextContains('My signup block');
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/mailchimp/modules/mailchimp_signup/src/Plugin/Field/FieldFormatter/MailchimpSignupFormFormatter.php:45

    ---------- begin diff ----------
@@ @@

       $messenger = \Drupal::messenger();

-      $form = new \Drupal\mailchimp_signup\Form\MailchimpSignupPageForm($messenger);
+      $form = new MailchimpSignupPageForm($messenger);

       $form->setFormID($this->getFormId($signup));
       $form->setSignup($signup);
@@ @@
   /**
    * Get the ID of the form.
    *
-   * @param \Drupal\mailchimp_signup\Entity\MailchimpSignup $entity
+   * @param MailchimpSignup $entity
    *   An instance of the SignUp entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/mailchimp/modules/mailchimp_signup/src/Plugin/Block/MailchimpSignupSubscribeBlock.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The Form Builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MessengerInterface $messenger, FormBuilderInterface $form_builder) {
@@ @@
   /**
    * Get the ID of the form.
    *
-   * @param \Drupal\mailchimp_signup\Entity\MailchimpSignup $entity
+   * @param MailchimpSignup $entity
    *   An instance of the SignUp entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/mailchimp/modules/mailchimp_signup/src/Form/MailchimpSignupPageForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * MailchimpSignupPageForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
@@ @@
   /**
    * The MailchimpSignup entity used to build this form.
    *
-   * @var \Drupal\mailchimp_signup\Entity\MailchimpSignup
+   * @var MailchimpSignup
    */
   private $signup = NULL;

@@ @@
   /**
    * Sets the signup service.
    *
-   * @param \Drupal\mailchimp_signup\Entity\MailchimpSignup $signup
+   * @param MailchimpSignup $signup
    *   THe signup service.
    */
   public function setSignup(MailchimpSignup $signup) {
@@ @@
    *
    * @param array $form
    *   The form itself.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   A ajax response.
    */
   public function ajaxSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/mailchimp/modules/mailchimp_signup/src/Form/MailchimpSignupForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The router builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * Constructs a MailchimpSignupForm object.
    *
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder service.
    */
   public function __construct(RouteBuilderInterface $router_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/mailchimp/modules/mailchimp_signup/src/Form/MailchimpSignupDeleteForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The router builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * MailchimpSignupDeleteForm constructor.
    *
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(RouteBuilderInterface $router_builder, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/mailchimp/modules/mailchimp_signup/src/Controller/MailchimpSignupController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * MailchimpSignupController constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(MessengerInterface $messenger, FormBuilderInterface $form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/mailchimp/modules/mailchimp_signup/mailchimp_signup.module:16

    ---------- begin diff ----------
@@ @@
  * @param int $signup_id
  *   The ID of the MailchimpSignup entity to load.
  *
- * @return \Drupal\mailchimp_signup\Entity\MailchimpSignup
+ * @return MailchimpSignup
  *   The MailchimpSignup entity.
  */
 function mailchimp_signup_load($signup_id) {
@@ @@
  * @param bool $reset
  *   TRUE to reset cache when loading MailchimpSignup entities.
  *
- * @return \Drupal\mailchimp_signup\Entity\MailchimpSignup[]
+ * @return MailchimpSignup[]
  *   Array of MailchimpSignup entities.
  */
 function mailchimp_signup_load_multiple(array $signup_ids = [], $reset = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/mailchimp/modules/mailchimp_lists/tests/src/Functional/MailchimpListsTestBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     \Drupal::configFactory()->addOverride(new MailchimpListsConfigOverrider());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/mailchimp/modules/mailchimp_lists/src/Plugin/Field/FieldWidget/MailchimpListsSelectWidget.php:279

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $hide_subscribe_checkbox
    * @param $at_least_one_interest_group
    * @param $email
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/mailchimp/modules/mailchimp_lists/src/Plugin/Field/FieldType/MailchimpListsSubscription.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailchimp_lists\Plugin\Field\FieldType;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
       $options[''] = $this->t('-- Select --');
     }

-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+    /** @var FieldDefinitionInterface[] $field_definitions */
     $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $entity_bundle);

     foreach ($field_definitions as $field_name => $field_definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/mailchimp/modules/mailchimp_lists/src/Plugin/Field/FieldFormatter/MailchimpListsFieldSubscribeFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The Form Builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsWebhookSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a MailchimpListsWebhookSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsUpdateMergevarsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * MailchimpListsUpdateMergevarsForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(Request $request, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsSubscribeForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The MailchimpListsSubscription field instance used to build this form.
    *
-   * @var \Drupal\mailchimp_lists\Plugin\Field\FieldType\MailchimpListsSubscription
+   * @var MailchimpListsSubscription
    */
   private $fieldInstance;

@@ @@
    *
    * Used to get field configuration.
    *
-   * @var \Drupal\mailchimp_lists\Plugin\Field\FieldFormatter\MailchimpListsFieldSubscribeFormatter
+   * @var MailchimpListsFieldSubscribeFormatter
    */
   private $fieldFormatter;

@@ @@
   /**
    * Sets the field instance service.
    *
-   * @param \Drupal\mailchimp_lists\Plugin\Field\FieldType\MailchimpListsSubscription $fieldInstance
+   * @param MailchimpListsSubscription $fieldInstance
    *   The field instance service.
    */
   public function setFieldInstance(MailchimpListsSubscription $fieldInstance) {
@@ @@
   /**
    * Sets the field formatter service.
    *
-   * @param \Drupal\mailchimp_lists\Plugin\Field\FieldFormatter\MailchimpListsFieldSubscribeFormatter $fieldFormatter
+   * @param MailchimpListsFieldSubscribeFormatter $fieldFormatter
    *   The field formatter service.
    */
   public function setFieldFormatter(MailchimpListsFieldSubscribeFormatter $fieldFormatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/mailchimp/modules/mailchimp_lists/src/Form/MailchimpListsClearCacheForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * MailchimpListsClearCacheForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/mailchimp/modules/mailchimp_lists/src/Controller/MailchimpFieldsController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Initializes a MailchimpCampaignController.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager..
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/mailchimp/modules/mailchimp_lists/mailchimp_lists.module:124

    ---------- begin diff ----------
@@ @@
  *
  * @param array $choices
  *   An array representing the form values selected.
- * @param \Drupal\mailchimp_lists\Plugin\Field\FieldType\MailchimpListsSubscription $instance
+ * @param MailchimpListsSubscription $instance
  *   A mailchimp_lists_subscription field instance configuration.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An Entity that has the $instance field.
  */
 function mailchimp_lists_process_subscribe_form_choices(array $choices, MailchimpListsSubscription $instance, EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


24) modules/contrib/mailchimp/modules/mailchimp_lists/mailchimp_lists.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityFieldManagerInterface;
 /**
  * @file
  * Install and update hooks for Mailchimp Audiences.
  */
-
 /**
  * Update structure of mailchimp fields.
  */
 function mailchimp_lists_update_8001() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+  /** @var EntityFieldManagerInterface $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   $field_map = $entity_field_manager->getFieldMapByFieldType('mailchimp_lists_subscription');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


25) modules/contrib/mailchimp/modules/mailchimp_events/src/MailchimpEventListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailchimp_events;

+use Drupal\mailchimp_events\Entity\MailchimpEvent;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\mailchimp_events\Entity\MailchimpEvent $entity */
+    /** @var MailchimpEvent $entity */
     $row['name'] = Link::createFromRoute(
       $entity->label(),
       'entity.mailchimp_event.edit_form',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/mailchimp/modules/mailchimp_events/src/MailchimpEventHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/mailchimp/modules/mailchimp_events/src/MailchimpEventAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailchimp_events;

+use Drupal\mailchimp_events\Entity\MailchimpEventInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\mailchimp_events\Entity\MailchimpEventInterface $entity */
-
+    /** @var MailchimpEventInterface $entity */
     switch ($operation) {

       case 'view':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/mailchimp/modules/mailchimp_events/src/Form/MailchimpEventForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailchimp_events\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\mailchimp_events\Entity\MailchimpEvent;
 use Drupal\core\render\Element;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\mailchimp_events\Entity\MailchimpEvent $entity */
+    /** @var MailchimpEvent $entity */
     $form = parent::buildForm($form, $form_state);

     $form["name"]["widget"][0]["value"]["#type"] = 'machine_name';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/mailchimp/modules/mailchimp_events/mailchimp_events.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Mailchimp\MailchimpLists;
 /**
  * @file
  * Contains mailchimp_events.module.
@@ @@
   }
   else {
     try {
-      /** @var \Mailchimp\MailchimpLists $mcapi */
+      /** @var MailchimpLists $mcapi */
       $mcapi = mailchimp_get_api_object('MailchimpLists');
       $options = [];

@@ @@

   if ($lock->acquire('mailchimp_events_add_member_events', 60)) {
     try {
-      /** @var \Mailchimp\MailchimpLists $mcapi */
+      /** @var MailchimpLists $mcapi */
       $mcapi = mailchimp_get_api_object('MailchimpLists');

       $options['name'] = $name;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


30) modules/contrib/mailchimp/modules/mailchimp_campaign/tests/src/Functional/MailchimpCampaignTestBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     \Drupal::configFactory()->addOverride(new MailchimpCampaignConfigOverrider());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/mailchimp/modules/mailchimp_campaign/src/Plugin/Filter/FilterMailchimpCampaign.php:65

    ---------- begin diff ----------
@@ @@
       if (isset($build[$entity_type][$entity_id]['#contextual_links'])) {
         unset($build[$entity_type][$entity_id]['#contextual_links']);
       }
-      $content = render($build);
+      $content = \Drupal::service('renderer')->render($build);
     }

     return $content;
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/mailchimp/modules/mailchimp_campaign/src/Form/MailchimpCampaignSendForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a MailchimpCampaignSendForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/mailchimp/modules/mailchimp_campaign/src/Form/MailchimpCampaignForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailchimp_campaign\Form;

+use Drupal\Core\Config\Config;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * Configuration object for this builder.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * A cache backend interface.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Constructs a MailchimpCampaignForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The Mailchimp cache backend interface.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, ConfigFactoryInterface $config_factory, MessengerInterface $messenger, EntityTypeManagerInterface $entityTypeManager, EntityDisplayRepositoryInterface $entity_display_repository, CacheBackendInterface $cache, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ @@
    *
    * @param array $form
    *   Form API array structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state information.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response with the rendered list/audience segments element.
    */
   public static function listSegmentCallback(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form API array structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state information.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response with the rendered content element.
    */
   public static function templateCallback(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   Form API array structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state information.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response with the rendered content element.
    */
   public static function entityTypeCallback(array $form, FormStateInterface $form_state) {
@@ @@
         }
       }

-      return render($element);
+      return \Drupal::service('renderer')->render($element);
     }
     else {
       return $this->t('No custom merge vars exist for the current audience.');
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/mailchimp/modules/mailchimp_campaign/src/Form/MailchimpCampaignDeleteForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a MailchimpCampaignDeleteForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/mailchimp/modules/mailchimp_campaign/src/Entity/MailchimpCampaignViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mailchimp_campaign\Entity;

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/mailchimp/modules/mailchimp_campaign/src/Controller/MailchimpCampaignController.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Initializes a MailchimpCampaignController.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(Request $request, DateFormatterInterface $date_formatter, EntityTypeManagerInterface $entityTypeManager, MessengerInterface $messenger, LoggerInterface $logger) {
@@ @@
   /**
    * View a Mailchimp campaign.
    *
-   * @param \Drupal\mailchimp_campaign\Entity\MailchimpCampaign $mailchimp_campaign
+   * @param MailchimpCampaign $mailchimp_campaign
    *   The Mailchimp campaign to view.
    *
    * @return array
@@ @@
   /**
    * View a Mailchimp campaign stats.
    *
-   * @param \Drupal\mailchimp_campaign\Entity\MailchimpCampaign $mailchimp_campaign
+   * @param MailchimpCampaign $mailchimp_campaign
    *   The Mailchimp campaign to view stats for.
    *
    * @return array
@@ @@
    * @param string $entity_type
    *   The entity type to search by title.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing matched entity data.
    */
   public function entityAutocomplete($entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/mailchimp/modules/mailchimp_campaign/mailchimp_campaign.module:179

    ---------- begin diff ----------
@@ @@
 /**
  * Sends a Mailchimp campaign.
  *
- * @param \Drupal\mailchimp_campaign\Entity\MailchimpCampaign $campaign
+ * @param MailchimpCampaign $campaign
  *   The Mailchimp campaign to send.
  *
  * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/mailchimp/mailchimp.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Mailchimp\Mailchimp;
+use Drupal\Core\Extension\ModuleExtensionList;
+use function GuzzleHttp\default_user_agent;
 /**
  * @file
  * Mailchimp module.
@@ @@
 /**
  * Instantiates a Mailchimp library object.
  *
- * @return \Mailchimp\Mailchimp
+ * @return Mailchimp
  *   Drupal Mailchimp library object.
  */
 function mailchimp_get_api_object($classname = 'Mailchimp') {
@@ @@
   $version = '8.x-1.x';

   if (\Drupal::moduleHandler()->moduleExists('system')) {
-    /** @var \Drupal\Core\Extension\ModuleExtensionList $extension_list */
+    /** @var ModuleExtensionList $extension_list */
     $extension_list = \Drupal::service('extension.list.module');
     $info = $extension_list->getExtensionInfo('mailchimp');
     if (!empty($info['version'])) {
@@ @@
     }
   }

-  $user_agent = "DrupalMailchimp/$version " . \GuzzleHttp\default_user_agent();
+  $user_agent = "DrupalMailchimp/$version " . default_user_agent();

   return $user_agent;
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


39) modules/contrib/mailchimp/mailchimp.api.php:59

    ---------- begin diff ----------
@@ @@
  *
  * @param array $mergevars
  *   The current mergevars.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity used to populate the mergevars.
  * @param string $entity_type
  *   The entity type.
    ----------- end diff -----------

 [ERROR] Could not process                                                      
         "modules/contrib/mailchimp/modules/mailchimp_events/src/Plugin/WebformHan
         dler/AddMailchimpEventWebformHandler.php" file, due to:                
         "Analyze error: "Class Drupal\webform\Plugin\WebformHandlerBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

