modules/contrib/simple_block/modules/simple_block_layout_builder/simple_block_layout_builder.module
modules/contrib/simple_block/modules/simple_block_layout_builder/src/Event/Subscriber/SimpleBlockAddControllerSubscriber.php
modules/contrib/simple_block/modules/simple_block_layout_builder/src/Form/EditSimpleBlockInLayoutBuilderForm.php
modules/contrib/simple_block/modules/simple_block_layout_builder/tests/scr/FunctionalJavascript/SimpleBlockLayoutBuilderTest.php
modules/contrib/simple_block/src/Entity/SimpleBlock.php
modules/contrib/simple_block/src/Plugin/Block/SimpleBlockBlock.php
modules/contrib/simple_block/src/Plugin/Derivative/SimpleBlock.php
modules/contrib/simple_block/src/SimpleBlockAccessControlHandler.php
modules/contrib/simple_block/src/SimpleBlockEditForm.php
modules/contrib/simple_block/src/SimpleBlockInterface.php
modules/contrib/simple_block/src/SimpleBlockListBuilder.php
modules/contrib/simple_block/tests/src/Functional/SimpleBlockTest.php

5 files with changes
====================

1) modules/contrib/simple_block/src/Plugin/Derivative/SimpleBlock.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The custom config block storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $blockConfigStorage;

@@ @@
   /**
    * Constructs a BlockContent object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_content_storage
+   * @param EntityStorageInterface $block_content_storage
    *   The custom block storage.
    */
   public function __construct(EntityStorageInterface $block_content_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_block/src/Plugin/Block/SimpleBlockBlock.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The simple block entity.
    *
-   * @var \Drupal\simple_block\SimpleBlockInterface
+   * @var SimpleBlockInterface
    */
   protected $entity;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user) {
@@ @@
    */
   public function getCacheTags() {
     $cache_tags = parent::getCacheTags();
-    /** @var \Drupal\simple_block\Entity\SimpleBlock $simple_block */
+    /** @var SimpleBlock $simple_block */
     if ($simple_block = SimpleBlock::load($this->getDerivativeId())) {
       $cache_tags = Cache::mergeTags($cache_tags, $simple_block->getCacheTags());
       if (!empty($format_id = $simple_block->getContent()['format'])) {
@@ @@
   /**
    * Loads the block config entity of the block, if any.
    *
-   * @return \Drupal\simple_block\SimpleBlockInterface|null
+   * @return SimpleBlockInterface|null
    *   The block config entity.
    */
   protected function getEntity(): ?SimpleBlockInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_block/modules/simple_block_layout_builder/src/Form/EditSimpleBlockInLayoutBuilderForm.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * The UUID generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;

@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * Constructs a new block form.
    *
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The UUID generator.
    */
   public function __construct(LayoutTempstoreRepositoryInterface $layout_tempstore_repository, UuidInterface $uuid) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\layout_builder\SectionStorageInterface|null $section_storage
+   * @param SectionStorageInterface|null $section_storage
    *   The section storage being configured.
    * @param string|null $delta
    *   The delta of the section.
    * @param string|null $region
    *   The region of the block.
-   * @param \Drupal\simple_block\SimpleBlockInterface|null $simple_block
+   * @param SimpleBlockInterface|null $simple_block
    *   The plugin ID of the block to add.
    * @param string|null $uuid
    *   The component UUID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/simple_block/modules/simple_block_layout_builder/src/Event/Subscriber/SimpleBlockAddControllerSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_block_layout_builder\Event\Subscriber;

+use Symfony\Component\HttpKernel\Event\ViewEvent;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxHelperTrait;
 use Drupal\Core\Routing\ResettableStackedRouteMatchInterface;
@@ @@
 use Drupal\Core\Url;
 use Drupal\layout_builder\SectionStorageInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Current route match service.
    *
-   * @var \Drupal\Core\Routing\ResettableStackedRouteMatchInterface
+   * @var ResettableStackedRouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a new event subscriber service instance.
    *
-   * @param \Drupal\Core\Routing\ResettableStackedRouteMatchInterface $route_match
+   * @param ResettableStackedRouteMatchInterface $route_match
    *   Current route match service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(ResettableStackedRouteMatchInterface $route_match, AccountInterface $current_user) {
@@ @@
   /**
    * Alters the build produced by ChooseBlockController::build().
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent $event
+   * @param ViewEvent $event
    *   The kernel view event.
    */
-  public function alterBuild(GetResponseForControllerResultEvent $event): void {
+  public function alterBuild(ViewEvent $event): void {
     $route_name = $event->getRequest()->attributes->get('_route');
     if ($route_name !== 'layout_builder.choose_block') {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/simple_block/modules/simple_block_layout_builder/simple_block_layout_builder.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\layout_builder\SectionStorage\SectionStorageManager;
+use Drupal\layout_builder\SectionStorageInterface;
 /**
  * @file
  * Hook implementations for 'Simple Block + Layout Builder' module.
@@ @@
  * Implements hook_entity_type_alter().
  */
 function simple_block_layout_builder_entity_type_alter(array &$entity_types): void {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   if (isset($entity_types['simple_block'])) {
     $entity_types['simple_block']->setFormClass('layout_builder', EditSimpleBlockInLayoutBuilderForm::class);
   }
@@ @@
     return;
   }

-  /** @var \Drupal\layout_builder\SectionStorage\SectionStorageManager $section_manager */
+  /** @var SectionStorageManager $section_manager */
   $section_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
   $section_storage = $section_manager->load($params['section_storage_type'], [
     'display' => EntityContext::fromEntity($display),
   ]);

-  /** @var \Drupal\layout_builder\SectionStorageInterface $temp_storage */
+  /** @var SectionStorageInterface $temp_storage */
   $temp_storage = \Drupal::service('layout_builder.tempstore_repository')->get($section_storage);

   $section = $temp_storage->getSection($params['delta']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

