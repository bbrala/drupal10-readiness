diff --git a/file_access_fix.info.yml b/file_access_fix.info.yml
index 95a6d31..123ffd8 100644
--- a/file_access_fix.info.yml
+++ b/file_access_fix.info.yml
@@ -1,6 +1,6 @@
 name: File Access Fix
 description: Fixes file public / private location according to parent entities access for anonymous users.
 type: module
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^9.3 || ^10
 #dependencies:
 #  - readmehelp:readmehelp
diff --git a/src/FileAccessFixEntityHooks.php b/src/FileAccessFixEntityHooks.php
index 8270c18..e07acf0 100644
--- a/src/FileAccessFixEntityHooks.php
+++ b/src/FileAccessFixEntityHooks.php
@@ -31,7 +31,7 @@ class FileAccessFixEntityHooks {
    *
    * @see \Drupal\file\FileAccessControlHandler::checkAccess
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public static function hookPostSave(EntityInterface $entity) {
     /** @var FileSystemInterface $fileSystemService */
@@ -41,7 +41,7 @@ class FileAccessFixEntityHooks {
       foreach ($entity->getFields(FALSE) as $field) {
         if ($field instanceof FileFieldItemList) {
           $fieldHasAnonAccess = $entityHasAnonAccess && self::fieldHasAnonAccess($field);
-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           foreach ($field->referencedEntities() as $file) {
             $uriScheme = StreamWrapperManager::getScheme($file->getFileUri());
             if (($uriScheme !== 'public') && ($uriScheme !== 'private')) {
@@ -58,7 +58,7 @@ class FileAccessFixEntityHooks {
               $targetDirectory = dirname($fileTargetUri);
               $fileSystemService->prepareDirectory($targetDirectory, FileSystemInterface::CREATE_DIRECTORY);
               // This will notify modules, e.f. for image derivations.
-              $movedFile = file_move($file, $fileTargetUri, FileSystemInterface::EXISTS_RENAME);
+              $movedFile = \Drupal::service('file.repository')->move($file, $fileTargetUri, FileSystemInterface::EXISTS_RENAME);
               if (!$movedFile) {
                 \Drupal::logger('file_accessfix')->error('Error moving file at @uri.', ['@uri' => $file->getFileUri()]);
               }
@@ -74,7 +74,7 @@ class FileAccessFixEntityHooks {
    *
    * @todo Use file_get_file_references() for this.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *
    * @return bool
    */
@@ -83,7 +83,7 @@ class FileAccessFixEntityHooks {
     $references = file_get_file_references($file);
     foreach ($references as $field_name => $entity_map) {
       foreach ($entity_map as $referencing_entity_type => $referencing_entities) {
-        /** @var \Drupal\Core\Entity\EntityInterface $referencing_entity */
+        /** @var EntityInterface $referencing_entity */
         foreach ($referencing_entities as $referencing_entity) {
           if (
             self::entityHasAnonAccess($referencing_entity)
@@ -98,7 +98,7 @@ class FileAccessFixEntityHooks {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return bool
    */
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index dc93183..d44a358 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
