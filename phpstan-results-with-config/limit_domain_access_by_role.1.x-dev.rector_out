modules/contrib/limit_domain_access_by_role/limit_domain_access_by_role.module
modules/contrib/limit_domain_access_by_role/src/Form/LimitDomainAccessByRoleConfigForm.php
modules/contrib/limit_domain_access_by_role/tests/src/Functional/LimitdomainaccessbyroleTest.php

2 files with changes
====================

1) modules/contrib/limit_domain_access_by_role/tests/src/Functional/LimitdomainaccessbyroleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\limit_domain_access_by_role\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $adminUser;

@@ @@
   /**
    * A user with "permission" to be blocked on non-technical domain.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $admintestUser;

@@ @@
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // Empty form submission. Check presence of the default value.
-    $this->drupalPostForm(NULL, [], 'Save configuration');
-    $this->assertText('*local*');
+    $this->submitForm([], 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('*local*');
     // Form validation testing of an invalid characters rejection.
     $edit = [
       'technical_domains' => 'some/invalid/ch@r@ter$',
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Invalid characters are detected.');
-    $this->assertText('Apart from yourself, there are currently no users with an open session (logged in)');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Invalid characters are detected.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Apart from yourself, there are currently no users with an open session (logged in)');
   }

   /**
@@ @@
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // A correct form submission.
     $edit = [
       'technical_domains' => \Drupal::request()->getHost(),
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
-    $this->assertText('There were no users with an open session to terminate.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no users with an open session to terminate.');
     // Log out.
     $this->drupalLogout();
     // Log in an unblocked user (non-admin) through the UI. Should access.
@@ @@
       'pass' => $this->user->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Bobby Solo');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Bobby Solo');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Log in a blocked user (admin) through the UI. Should access.
@@ @@
       'pass' => $this->admintestUser->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Daffy Duck');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Daffy Duck');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Get back to the settings form and check it loads correctly.
@@ @@
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // Make a correct form submission but now changing the technical domain.
     $edit = [
       'technical_domains' => 'admin.example.com',
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
-    $this->assertText('There were no users with an open session to terminate.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no users with an open session to terminate.');
     // Log out.
     $this->drupalLogout();
     // Log in an unblocked user (non-admin) through the UI. Should access.
@@ @@
       'pass' => $this->user->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Bobby Solo');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Bobby Solo');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Log in a blocked user (admin) through the UI. Should get Access denied.
@@ @@
       'pass' => $this->admintestUser->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(403);
-    $this->assertText('Access denied');
-    $this->assertText('You are not authorized to access this page.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Access denied');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/limit_domain_access_by_role/src/Form/LimitDomainAccessByRoleConfigForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Database\Driver\mysql\Connection definition.
    *
-   * @var \Drupal\Core\Database\Driver\mysql\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Drupal\Core\Session\SessionManagerInterface definition.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;

@@ @@
   /**
    * The string translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

