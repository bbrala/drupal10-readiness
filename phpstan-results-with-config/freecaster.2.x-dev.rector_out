modules/contrib/freecaster/freecaster.install
modules/contrib/freecaster/freecaster.module
modules/contrib/freecaster/src/Controller/ProxyController.php
modules/contrib/freecaster/src/Controller/SyncController.php
modules/contrib/freecaster/src/Fcapi/FCAPI.php
modules/contrib/freecaster/src/Form/UserInfoForm.php
modules/contrib/freecaster/src/Plugin/Field/FieldFormatter/FreecasterPlayerFormatter.php
modules/contrib/freecaster/src/Plugin/Field/FieldWidget/FreecasterUploadWidget.php
modules/contrib/freecaster/src/Plugin/QueueWorker/FreecasterThumbnailUpdate.php
modules/contrib/freecaster/src/Plugin/media/Source/FreecasterVideo.php
modules/contrib/freecaster/src/Services/FreecasterService.php

8 files with changes
====================

1) modules/contrib/freecaster/src/Services/FreecasterService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\freecaster\Services;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The Freecaster API.
    *
-   * @var \Drupal\freecaster\Fcapi\FCAPI
+   * @var FCAPI
    */
   private $fcApi;

@@ @@
   /**
    * Config service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $state;

@@ @@
   /**
    * Cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cache;

@@ @@
   /**
    * The Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * The Queue service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   private $queueFactory;

@@ @@
   /**
    * Get Freecaster API.
    *
-   * @return \Drupal\freecaster\Fcapi\FCAPI
+   * @return FCAPI
    *   Retrun Freecaster API object.
    */
   public function getApi() {
@@ @@
   /**
    * Get the Freecaster settings.
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   Return config related to Freecaster.
    */
   protected function getConfig(bool $editable = FALSE) {
@@ @@
   /**
    * Get thumbnail update queue.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   Return the thumbnail update queue.
    */
   protected function getQueue() {
@@ @@
         $term->save();
       }
       else {
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $term = reset($term);

         if ($channel['name'] !== $term->label()) {
@@ @@
   /**
    * Get Freecaster Channel id from a taxonomy.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Taxonomy term object.
    *
    * @return null|int
@@ @@
   /**
    * Create Channel on Freecaster.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The taxonomy term source.
    *
    * @return false|int
@@ @@
     if (!empty($parents) && $parents instanceof EntityReferenceFieldItemList) {
       $parents = $parents->referencedEntities();
       if (count($parents)) {
-        /** @var \Drupal\taxonomy\TermInterface $parent */
+        /** @var TermInterface $parent */
         $parent = array_shift($parents);
         if (!$parent->get('field_channel_id')->isEmpty()) {
           $parent_channel_id = $parent->field_channel_id->value;
@@ @@
   /**
    * Update channel properties on Freecaster.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Taxonomy term object which contains information.
    *
    * @return false|int
@@ @@
   /**
    * Update channel parents on Freecaster.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The taxonomy term object which contains the information.
    */
   public function updateChannelParent(TermInterface $term) {
@@ @@
       $parents     = $parents->referencedEntities();
       $new_parents = [];
       if (count($parents)) {
-        /** @var \Drupal\taxonomy\TermInterface $parent */
+        /** @var TermInterface $parent */
         foreach ($parents as $parent) {
           if ($parent_channel_id = $this->getChannelId($parent)) {
             $new_parents[] = $parent_channel_id;
@@ @@
   /**
    * Delete a channel on Freecaster.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Taxonomy term object which contains the information.
    */
   public function deleteChannel(TermInterface $term) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/freecaster/src/Plugin/media/Source/FreecasterVideo.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The logger channel for media.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The Freecaster API service.
    *
-   * @var \Drupal\freecaster\Services\FreecasterService
+   * @var FreecasterService
    */
   protected $freecasterService;

@@ @@
   /**
    * The http client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\freecaster\Services\FreecasterService $freecaster_service
+   * @param FreecasterService $freecaster_service
    *   The Freecaster service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The config factory service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The field type plugin manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel for media.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/freecaster/src/Plugin/QueueWorker/FreecasterThumbnailUpdate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\freecaster\Plugin\QueueWorker;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\freecaster\Services\FreecasterService;
+use Drupal\media\Entity\Media;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\Core\Queue\RequeueException;
@@ @@
   /**
    * Entity Type service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Freecaster Service API.
    *
-   * @var \Drupal\freecaster\Services\FreecasterService
+   * @var FreecasterService
    */
   protected $freecasterService;

@@ @@
         'field_video_fcid' => $data->video_id,
       ];
       $medias = $this->entityTypeManager->getStorage('media')->loadByProperties($filter);
-      /** @var \Drupal\media\Entity\Media $media */
+      /** @var Media $media */
       $media = reset($medias);
       if ($media) {
         $media->updateQueuedThumbnail();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/freecaster/src/Plugin/Field/FieldWidget/FreecasterUploadWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\freecaster\Plugin\Field\FieldWidget;

+use Drupal\media\MediaForm;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
     unset($element['#weight']);
     unset($element['#required']);

-    /** @var \Drupal\media\MediaForm $media_form */
+    /** @var MediaForm $media_form */
     $media_form = $form_state->getformObject();
     // Hide the video ID field for the add form.
     $process = $media_form->getOperation() == 'add' ? 'visible' : 'enabled';
@@ @@
    *
    * @param array $element
    *   The form element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validate(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/freecaster/src/Form/UserInfoForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Date Formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Freecaster service.
    *
-   * @var \Drupal\freecaster\Services\FreecasterService
+   * @var FreecasterService
    */
   protected $freecasterService;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/freecaster/src/Controller/SyncController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\freecaster\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Freecaster API service.
    *
-   * @var \Drupal\freecaster\Services\FreecasterService
+   * @var FreecasterService
    */
   protected $freecaster;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $messenger;

@@ @@
   /**
    * Date Formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $state;

@@ @@
   /**
    * Synchronise channels from Freecaster.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to the sync settings page.
    */
   public function sync() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/freecaster/freecaster.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\freecaster\Services\FreecasterService;
+use Drupal\freecaster\Fcapi\FCAPI;
+use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 /**
  * @file
  * Contains hook implements to bind Freecaster API call.
@@ @@
  * Implements hook_ENTITY_TYPE_presave().
  */
 function freecaster_taxonomy_term_presave(TermInterface $term) {
-  /** @var \Drupal\freecaster\Services\FreecasterService $freecaster_service */
+  /** @var FreecasterService $freecaster_service */
   $freecaster_service = \Drupal::service('freecaster.api');

   if ($term->bundle() == 'fc_video_channels') {
@@ @@

   if ($form_state->hasValue('field_video_fcid') && $form_state->getValue('field_video_fcid')[0]['value'] == -1 && $form_state->hasTemporaryValue('video')) {
     $file = $form_state->getTemporaryValue('video');
-    /** @var \Drupal\freecaster\Services\FreecasterService $fc_service */
+    /** @var FreecasterService $fc_service */
     $fc_service = \Drupal::service('freecaster.api');
-    /** @var \Drupal\freecaster\Fcapi\FCAPI $fc_api */
+    /** @var FCAPI $fc_api */
     $fc_api = $fc_service->getApi();

     if ($file instanceof FileInterface) {
@@ @@
       }

       // Upload the file.
-      /** @var \Drupal\Core\StreamWrapper\StreamWrapperInterface $wrapper */
+      /** @var StreamWrapperInterface $wrapper */
       if ($wrapper = \Drupal::service('stream_wrapper_manager')->getViaUri($file->getFileUri())) {
         $fc_api->upload_video($video->id, ['file' => '@' . $wrapper->realpath()]);
       }
@@ @@
  * Media form validation.
  */
 function freecaster_form_validate($form, FormStateInterface $form_state) {
-  /** @var \Drupal\freecaster\Services\FreecasterService $fc_service */
+  /** @var FreecasterService $fc_service */
   $fc_service = \Drupal::service('freecaster.api');
   $element = $form["field_video_fcid"]["widget"][0]["value"]["id"];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/freecaster/freecaster.install:11

    ---------- begin diff ----------
@@ @@
  * Implements hook_install().
  */
 function freecaster_install() {
-  $source = drupal_get_path('module', 'freecaster') . '/img/icons';
+  $source = \Drupal::service('extension.list.module')->getPath('freecaster') . '/img/icons';
   $destination = \Drupal::config('media.settings')->get('icon_base_uri');
-  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+  /** @var FileSystemInterface $file_system */
   $file_system = \Drupal::service('file_system');
   $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

