diff --git a/src/Stemmer.php b/src/Stemmer.php
index 7be181e..6267840 100644
--- a/src/Stemmer.php
+++ b/src/Stemmer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\snowball_stemmer;
 
+use Wamania\Snowball\Stem;
 use Drupal\Core\Language\LanguageInterface;
 
 /**
@@ -12,7 +13,7 @@ class Stemmer {
   /**
    * Language stemmer classes.
    *
-   * @var \Wamania\Snowball\Stem[]
+   * @var Stem[]
    */
   protected $stemmers = [];
 
@@ -119,7 +120,7 @@ class Stemmer {
    * @return string
    *   Stemmed word.
    *
-   * @throws \Drupal\snowball_stemmer\LanguageNotSetException
+   * @throws LanguageNotSetException
    *   If the language has not been set with self::setLanguage().
    */
   public function stem($word) {
diff --git a/tests/src/Kernel/CoreSearchTest.php b/tests/src/Kernel/CoreSearchTest.php
index db50a7a..d7a8141 100644
--- a/tests/src/Kernel/CoreSearchTest.php
+++ b/tests/src/Kernel/CoreSearchTest.php
@@ -22,12 +22,10 @@ class CoreSearchTest extends KernelTestBase {
   /**
    * Creates a new processor object for use in the tests.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
-    $this->stemmerService = $this->getMockBuilder('Drupal\snowball_stemmer\Stemmer')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->stemmerService = $this->createMock('Drupal\snowball_stemmer\Stemmer');
     $this->container->set('snowball_stemmer.stemmer', $this->stemmerService);
     $this->languageManager = $this->createMock(LanguageManagerInterface::class);
     $this->container->set('language_manager', $this->languageManager);
@@ -36,6 +34,7 @@ class CoreSearchTest extends KernelTestBase {
 
   /**
    * Tests search_simplify() and the stemmer hook_search_preprocess integration.
+   * @doesNotPerformAssertions
    */
   public function testSearchSimplify() {
     $this->stemmerService
@@ -80,7 +79,7 @@ class CoreSearchTest extends KernelTestBase {
       ));
 
     $out = snowball_stemmer_search_preprocess($text, $language);
-    $this->assertEqual($out, $expected);
+    $this->assertEquals($out, $expected);
   }
 
 }
