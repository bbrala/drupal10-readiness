diff --git a/modules/template_entities_book/src/Access/BookTemplatePageAccessCheck.php b/modules/template_entities_book/src/Access/BookTemplatePageAccessCheck.php
index 5dea834..e183cc2 100644
--- a/modules/template_entities_book/src/Access/BookTemplatePageAccessCheck.php
+++ b/modules/template_entities_book/src/Access/BookTemplatePageAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities_book\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -19,12 +20,12 @@ class BookTemplatePageAccessCheck extends EntityAccessCheck {
   /**
    * Checks access to entities used as templates.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
diff --git a/modules/template_entities_book/src/Plugin/TemplatePlugin/BookTemplate.php b/modules/template_entities_book/src/Plugin/TemplatePlugin/BookTemplate.php
index 6137f18..4f6544e 100644
--- a/modules/template_entities_book/src/Plugin/TemplatePlugin/BookTemplate.php
+++ b/modules/template_entities_book/src/Plugin/TemplatePlugin/BookTemplate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities_book\Plugin\TemplatePlugin;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\book\BookManager;
 use Drupal\book\BookManagerInterface;
 use Drupal\book\BookOutlineStorageInterface;
@@ -34,14 +35,14 @@ class BookTemplate extends NodeTemplate implements DependentPluginInterface, Plu
   /**
    * The book manager.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   protected BookManagerInterface $bookManager;
 
   /**
    * Book outline storage.
    *
-   * @var \Drupal\book\BookOutlineStorageInterface
+   * @var BookOutlineStorageInterface
    */
   protected BookOutlineStorageInterface $bookOutlineStorage;
 
@@ -61,7 +62,7 @@ class BookTemplate extends NodeTemplate implements DependentPluginInterface, Plu
    * {@inheritdoc}
    */
   public function duplicateEntity(EntityInterface $entity, Template $template) {
-    /** @var \Drupal\node\Entity\Node $duplicate_node */
+    /** @var Node $duplicate_node */
     $duplicate_node = parent::duplicateEntity($entity, $template);
 
     // Mark book as new and save template book to allow copying after the
@@ -95,13 +96,13 @@ class BookTemplate extends NodeTemplate implements DependentPluginInterface, Plu
   public function duplicateEntityInsert(EntityInterface $entity) {
     parent::duplicateEntityInsert($entity);
 
-    /** @var \Drupal\node\Entity\Node $duplicate_book_node */
+    /** @var Node $duplicate_book_node */
     $duplicate_book_node = $entity;
 
     /** @var Template $template */
     $template = $duplicate_book_node->template;
 
-    /** @var \Drupal\node\Entity\Node $original_book_node */
+    /** @var Node $original_book_node */
     $original_book_node = $template->getSourceEntity();
 
     if (!empty($original_book_node->book['bid'])) {
@@ -130,7 +131,7 @@ class BookTemplate extends NodeTemplate implements DependentPluginInterface, Plu
    *   the fields from the {book} table. This array must be ordered depth-first.
    * @param int $depth
    *   The minimum depth to include in the returned book tree.
-   * @param \Drupal\node\Entity\Node $new_book_node
+   * @param Node $new_book_node
    *   The new book node.
    * @param int $pid
    *   The current new parent node id.
@@ -165,13 +166,13 @@ class BookTemplate extends NodeTemplate implements DependentPluginInterface, Plu
    * @param $new_book_node
    * @param $pid
    *
-   * @return \Drupal\node\Entity\Node
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return Node
+   * @throws EntityStorageException
    */
   protected function duplicateBookPage($original_nid, Node $new_book_node, $pid) {
     $original_node = Node::load($original_nid);
 
-    /** @var \Drupal\node\Entity\Node $duplicate */
+    /** @var Node $duplicate */
     $duplicate = $original_node->createDuplicate();
 
     $duplicate->setChangedTime($new_book_node->getChangedTime());
diff --git a/modules/template_entities_book/template_entities_book.module b/modules/template_entities_book/template_entities_book.module
index 19d221d..4fb9e5f 100644
--- a/modules/template_entities_book/template_entities_book.module
+++ b/modules/template_entities_book/template_entities_book.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\template_entities\TemplateManagerInterface;
+use Drupal\Core\Routing\RedirectDestinationInterface;
 use Drupal\book\BookManager;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Url;
@@ -18,12 +20,12 @@ function template_entities_node_links_alter(array &$links, NodeInterface $node,
         $child_type = \Drupal::config('book.settings')->get('child_type');
         $access_control_handler = \Drupal::entityTypeManager()->getAccessControlHandler('node');
 
-        /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+        /** @var TemplateManagerInterface $template_manager */
         $template_manager = \Drupal::service('template_entities.manager');
 
         $template_types = $template_manager->getTemplateTypesForEntityType('node', $child_type);
 
-        /** @var \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination */
+        /** @var RedirectDestinationInterface $redirect_destination */
         $redirect_destination = \Drupal::service('redirect.destination');
 
         $destination = UrlHelper::parse($redirect_destination->get());
diff --git a/modules/template_entities_content_starter/template_entities_content_starter.module b/modules/template_entities_content_starter/template_entities_content_starter.module
index 37eaf23..bf47c99 100644
--- a/modules/template_entities_content_starter/template_entities_content_starter.module
+++ b/modules/template_entities_content_starter/template_entities_content_starter.module
@@ -1,9 +1,10 @@
 <?php
 
+use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 /**
  * Implements hook_menu_local_tasks_alter().
  */
-function template_entities_content_starter_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
+function template_entities_content_starter_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
   // Avoid duplicate "default" content overview tabs.
   if (isset($data['tabs'][1]['content_moderation.content'])
     && isset($data['tabs'][1]['template_entities_content_starter.content'])) {
diff --git a/modules/template_entities_layout_builder/src/Controller/ChooseBlockTemplateController.php b/modules/template_entities_layout_builder/src/Controller/ChooseBlockTemplateController.php
index b49ad7a..8d46272 100644
--- a/modules/template_entities_layout_builder/src/Controller/ChooseBlockTemplateController.php
+++ b/modules/template_entities_layout_builder/src/Controller/ChooseBlockTemplateController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities_layout_builder\Controller;
 
+use Drupal\template_entities\TemplateManagerInterface;
+use Drupal\template_entities\Entity\TemplateInterface;
 use Drupal\Core\Url;
 use Drupal\layout_builder\Controller\ChooseBlockController;
 use Drupal\layout_builder\SectionStorageInterface;
@@ -18,7 +20,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ChooseBlockTemplateController extends ChooseBlockController {
 
   /**
-   * @var \Drupal\template_entities\TemplateManagerInterface
+   * @var TemplateManagerInterface
    */
   protected $templateManager;
 
@@ -34,7 +36,7 @@ class ChooseBlockTemplateController extends ChooseBlockController {
   /**
    * Provides the UI for choosing a new block tem.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ -112,7 +114,7 @@ class ChooseBlockTemplateController extends ChooseBlockController {
   /**
    * Provides the UI for choosing a new inline block.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ -152,7 +154,7 @@ class ChooseBlockTemplateController extends ChooseBlockController {
   /**
    * Gets a render array of block template links.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ -166,7 +168,7 @@ class ChooseBlockTemplateController extends ChooseBlockController {
    */
   protected function getBlockTemplateLinks(SectionStorageInterface $section_storage, int $delta, $region, array $templates) {
     $links = [];
-    /** @var \Drupal\template_entities\Entity\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     foreach ($templates as $template_id => $template) {
       $attributes = $this->getAjaxAttributes();
       $attributes['class'][] = 'js-layout-builder-block-link';
diff --git a/modules/template_entities_layout_builder/src/Form/AddBlockFromTemplateForm.php b/modules/template_entities_layout_builder/src/Form/AddBlockFromTemplateForm.php
index a041a33..3ac7bc5 100644
--- a/modules/template_entities_layout_builder/src/Form/AddBlockFromTemplateForm.php
+++ b/modules/template_entities_layout_builder/src/Form/AddBlockFromTemplateForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities_layout_builder\Form;
 
+use Drupal\template_entities\Entity\TemplateInterface;
+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\layout_builder\Form\ConfigureBlockFormBase;
 use Drupal\layout_builder\LayoutBuilderHighlightTrait;
@@ -38,9 +40,9 @@ class AddBlockFromTemplateForm extends ConfigureBlockFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage being configured.
    * @param int $delta
    *   The delta of the section.
@@ -53,10 +55,10 @@ class AddBlockFromTemplateForm extends ConfigureBlockFormBase {
    *   The form array.
    */
   public function buildForm(array $form, FormStateInterface $form_state, SectionStorageInterface $section_storage = NULL, $delta = NULL, $region = NULL, $template_id = NULL) {
-    /** @var \Drupal\template_entities\Entity\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     $template = Template::load($template_id);
 
-    /** @var \Drupal\block_content\BlockContentInterface $original_block_content */
+    /** @var BlockContentInterface $original_block_content */
     $original_block_content = $template->getSourceEntity();
     $duplicate_block_content = $template->getTemplatePlugin()->duplicateEntity($original_block_content, $template);
     $duplicate_block_content->setNonReusable();
diff --git a/modules/template_entities_layout_builder/template_entities_layout_builder.module b/modules/template_entities_layout_builder/template_entities_layout_builder.module
index f1bfc7e..1f89f64 100644
--- a/modules/template_entities_layout_builder/template_entities_layout_builder.module
+++ b/modules/template_entities_layout_builder/template_entities_layout_builder.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\template_entities\TemplateManagerInterface;
 /**
  * @file
  * Contains template_entities_layout_builder.module.
@@ -13,7 +14,7 @@ use Drupal\template_entities\Entity\Template;
  * to exclude any used in a template.
  */
 function template_entities_layout_builder_plugin_filter_block__layout_builder_alter(array &$definitions, array $extra) {
-  /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+  /** @var TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
 
   $templates = $template_manager->getTemplatesForEntityType('block_content');
diff --git a/src/Access/EntityAccessCheck.php b/src/Access/EntityAccessCheck.php
index 3bf571e..b1439cb 100644
--- a/src/Access/EntityAccessCheck.php
+++ b/src/Access/EntityAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -20,14 +21,14 @@ class EntityAccessCheck implements AccessInterface {
   /**
    * The template manager.
    *
-   * @var \Drupal\template_entities\TemplateManagerInterface
+   * @var TemplateManagerInterface
    */
   protected TemplateManagerInterface $templateManager;
 
   /**
    * EntityAccessCheck constructor.
    *
-   * @param \Drupal\template_entities\TemplateManagerInterface $template_manager
+   * @param TemplateManagerInterface $template_manager
    */
   public function __construct(TemplateManagerInterface $template_manager) {
     $this->templateManager = $template_manager;
@@ -36,12 +37,12 @@ class EntityAccessCheck implements AccessInterface {
   /**
    * Checks access to entities used as templates.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
@@ -73,10 +74,10 @@ class EntityAccessCheck implements AccessInterface {
    * Check entity used as template against permissions for each template it's
    * referenced by.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $account
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   protected function checkTemplateSourceAccess(EntityInterface $entity, $account) {
     $result = AccessResult::allowed();
diff --git a/src/Access/LinkedTemplatesAccessCheck.php b/src/Access/LinkedTemplatesAccessCheck.php
index a1a47bb..38df351 100644
--- a/src/Access/LinkedTemplatesAccessCheck.php
+++ b/src/Access/LinkedTemplatesAccessCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\template_entities\TemplateManagerInterface;
 use Drupal;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
@@ -19,16 +21,16 @@ class LinkedTemplatesAccessCheck implements AccessInterface {
   /**
    * Checks routing access to the linked templates.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
-    /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+    /** @var TemplateManagerInterface $template_manager */
     $template_manager = Drupal::service('template_entities.manager');
 
     $parameter_name = $route_match->getParameter('entity_type_id');
diff --git a/src/Access/NewFromTemplateAccessCheck.php b/src/Access/NewFromTemplateAccessCheck.php
index 7231894..cc6f23f 100644
--- a/src/Access/NewFromTemplateAccessCheck.php
+++ b/src/Access/NewFromTemplateAccessCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\template_entities\Entity\TemplateTypeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -18,12 +20,12 @@ class NewFromTemplateAccessCheck implements AccessInterface {
   /**
    * Checks routing access from create new from template routes.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
@@ -49,7 +51,7 @@ class NewFromTemplateAccessCheck implements AccessInterface {
         "manage $type_id template",
         "new from $type_id template",
       ], 'OR');
-      /** @var \Drupal\template_entities\Entity\TemplateTypeInterface $template_type */
+      /** @var TemplateTypeInterface $template_type */
       if ($template_type = $route_match->getParameter('template_type')) {
         $template_type->getTargetEntityTypeId();
         if ($bundle = $route_match->getRawParameters()
diff --git a/src/Annotation/TemplatePlugin.php b/src/Annotation/TemplatePlugin.php
index 8881d23..049ff99 100644
--- a/src/Annotation/TemplatePlugin.php
+++ b/src/Annotation/TemplatePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class TemplatePlugin extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/TemplateController.php b/src/Controller/TemplateController.php
index c7a70c3..82451f9 100644
--- a/src/Controller/TemplateController.php
+++ b/src/Controller/TemplateController.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\template_entities\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Utility\UrlHelper;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\template_entities\TemplateManagerInterface;
+use Drupal\template_entities\Entity\Template;
 use Drupal;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
@@ -21,31 +29,31 @@ class TemplateController extends ControllerBase {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * TemplateController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RequestStack $request_stack
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(RequestStack $request_stack, RendererInterface $renderer, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -68,12 +76,12 @@ class TemplateController extends ControllerBase {
   /**
    * Redirect to entity type specific route.
    *
-   * @param \Drupal\template_entities\Entity\TemplateInterface $template
+   * @param TemplateInterface $template
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|false
+   * @return RedirectResponse|false
    */
   public function newFromTemplateRedirect(TemplateInterface $template) {
-    /** @var \Drupal\Core\Entity\EntityInterface $source */
+    /** @var EntityInterface $source */
     $source = $template->get('template_entity_id')->entity;
 
     if (!$source) {
@@ -94,7 +102,7 @@ class TemplateController extends ControllerBase {
       $query['destination'] = $destination;
       // Get any query parameters from the destination.
       // @todo - added to pass parent query param for add child to books but needs more needs attention.
-      $query += Drupal\Component\Utility\UrlHelper::parse($destination)['query'];
+      $query += UrlHelper::parse($destination)['query'];
     }
     elseif ($destination = $template->getDestinationAfterNewFromTemplate()) {
       $query['destination'] = $destination;
@@ -115,12 +123,12 @@ class TemplateController extends ControllerBase {
    *
    * Return a list to select a template of a particular type to use.
    *
-   * @param \Drupal\template_entities\Entity\TemplateTypeInterface $template_type
+   * @param TemplateTypeInterface $template_type
    *
    * @return array
    *   Entity form.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function newFromTemplatePage(TemplateTypeInterface $template_type) {
     return $this->addPage($template_type);
@@ -131,15 +139,15 @@ class TemplateController extends ControllerBase {
    *
    * Redirects to node/add/[type] if only one content type is available.
    *
-   * @param \Drupal\template_entities\Entity\TemplateTypeInterface $templateType
+   * @param TemplateTypeInterface $templateType
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the node types that can be added; however,
    *   if there is only one node type defined for the site, the function
    *   will return a RedirectResponse to the node add page for that one node
    *   type.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function addPage(TemplateTypeInterface $templateType) {
     $build = [
@@ -184,7 +192,7 @@ class TemplateController extends ControllerBase {
    *
    * Return an entity form with a cloned (but not-yet persisted) entity.
    *
-   * @param \Drupal\template_entities\Entity\TemplateInterface $template
+   * @param TemplateInterface $template
    *
    * @return array
    *   Entity form.
@@ -207,12 +215,12 @@ class TemplateController extends ControllerBase {
   }
 
   /**
-   * @param \Drupal\template_entities\Entity\TemplateInterface $template
+   * @param TemplateInterface $template
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function newFromTemplateTitle(TemplateInterface $template) {
-    /** @var \Drupal\Core\Entity\EntityInterface $source */
+    /** @var EntityInterface $source */
     $source = $template->get('template_entity_id')->entity;
 
     $label = $source->getEntityType()->getLabel();
@@ -225,10 +233,10 @@ class TemplateController extends ControllerBase {
   /**
    * Render a page with a list templates that use the route entity as a source.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *
    * @return array
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function templates(RouteMatchInterface $route_match) {
     $parameter_name = $route_match->getParameter('entity_type_id');
@@ -243,7 +251,7 @@ class TemplateController extends ControllerBase {
       '#markup' => $this->t('This @entity_type_label is used as a template @entity_type_label by the following templates:', ['@entity_type_label' => $label]),
     ];
 
-    /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+    /** @var TemplateManagerInterface $template_manager */
     $template_manager = Drupal::service('template_entities.manager');
 
     $templates = $template_manager->getTemplatesForEntity($entity);
@@ -256,7 +264,7 @@ class TemplateController extends ControllerBase {
       '#rows' => [],
     ];
 
-    /** @var \Drupal\template_entities\Entity\Template $template */
+    /** @var Template $template */
     foreach ($templates as $template) {
       $output['templates']['#rows'][] = [
         'template' => $template->toLink(),
@@ -269,7 +277,7 @@ class TemplateController extends ControllerBase {
   /**
    * Provides an add title callback templates.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    * @param string $entity_type_id
    *   The entity type ID.
diff --git a/src/Entity/Template.php b/src/Entity/Template.php
index 79ecccd..e08464a 100644
--- a/src/Entity/Template.php
+++ b/src/Entity/Template.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities\Entity;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityBase;
@@ -83,7 +84,7 @@ class Template extends ContentEntityBase implements TemplateInterface {
   public static function postDelete(EntityStorageInterface $storage, array $entities) {
     parent::postDelete($storage, $entities);
 
-    /** @var \Drupal\template_entities\Entity\TemplateInterface $entity */
+    /** @var TemplateInterface $entity */
     foreach ($entities as $entity) {
       // Invalidate source entities cache tags to update entity lists etc.
       $template_source_entity = $entity->getSourceEntity();
@@ -246,7 +247,7 @@ class Template extends ContentEntityBase implements TemplateInterface {
         $handler_settings['target_bundles'] = $bundles;
 
         if ($bundle_entity_type_id = $target_entity_type->getBundleEntityType()) {
-          /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info */
+          /** @var EntityTypeBundleInfoInterface $entity_type_bundle_info */
           $entity_type_bundle_info = \Drupal::service('entity_type.bundle.info');
 
           $source_entity_bundles = $entity_type_bundle_info->getBundleInfo($target_entity_type->id());
@@ -305,7 +306,7 @@ class Template extends ContentEntityBase implements TemplateInterface {
   /**
    * Invalidates an entity's cache tags upon save.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param bool $update
    *   TRUE if the entity has been updated, or FALSE if it has been inserted.
    */
@@ -330,7 +331,7 @@ class Template extends ContentEntityBase implements TemplateInterface {
   /**
    * Replicate protected method behaviour of getListCacheTagsToInvalidate().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string[]
    */
@@ -431,7 +432,7 @@ class Template extends ContentEntityBase implements TemplateInterface {
    * {@inheritdoc}
    */
   public function getTemplatePlugin() {
-    /** @var \Drupal\template_entities\Entity\TemplateType $template_type */
+    /** @var TemplateType $template_type */
     $template_type = TemplateType::load($this->bundle());
     return $template_type->getTemplatePlugin();
   }
diff --git a/src/Entity/TemplateInterface.php b/src/Entity/TemplateInterface.php
index 8197bd5..1f232b0 100644
--- a/src/Entity/TemplateInterface.php
+++ b/src/Entity/TemplateInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\template_entities\Plugin\TemplatePluginInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\user\EntityOwnerInterface;
@@ -97,7 +99,7 @@ interface TemplateInterface extends ContentEntityInterface, EntityChangedInterfa
   /**
    * Get the entity to use as the template.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The source entity to use as the template.
    */
   public function getSourceEntity();
@@ -107,7 +109,7 @@ interface TemplateInterface extends ContentEntityInterface, EntityChangedInterfa
    *
    * Convenience method.
    *
-   * @return \Drupal\template_entities\Plugin\TemplatePluginInterface
+   * @return TemplatePluginInterface
    *   The template plugin associated with the template type.
    */
   public function getTemplatePlugin();
diff --git a/src/Entity/TemplateType.php b/src/Entity/TemplateType.php
index 70b1fc6..3ed0872 100644
--- a/src/Entity/TemplateType.php
+++ b/src/Entity/TemplateType.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities\Entity;
 
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal;
 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -109,7 +111,7 @@ class TemplateType extends ConfigEntityBundleBase implements TemplateTypeInterfa
   protected $bundles;
 
   /**
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $templatePluginCollection;
 
@@ -167,7 +169,7 @@ class TemplateType extends ConfigEntityBundleBase implements TemplateTypeInterfa
       $routes = new RouteCollection();
 
       $paths = explode(PHP_EOL, $collection_pages);
-      /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
+      /** @var RouteProviderInterface $route_provider */
       $route_provider = Drupal::service('router.route_provider');
       foreach ($paths as $path) {
         // Get routes for path pattern.
@@ -201,7 +203,7 @@ class TemplateType extends ConfigEntityBundleBase implements TemplateTypeInterfa
       $routes = new RouteCollection();
 
       $paths = explode(PHP_EOL, $collection_pages);
-      /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
+      /** @var RouteProviderInterface $route_provider */
       $route_provider = Drupal::service('router.route_provider');
       foreach ($paths as $path) {
         // Get routes for path pattern.
@@ -243,7 +245,7 @@ class TemplateType extends ConfigEntityBundleBase implements TemplateTypeInterfa
   /**
    * Encapsulates the creation of the template type's LazyPluginCollection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The template type's plugin collection.
    */
   protected function getPluginCollection() {
diff --git a/src/Entity/TemplateTypeInterface.php b/src/Entity/TemplateTypeInterface.php
index f450323..802a1ef 100644
--- a/src/Entity/TemplateTypeInterface.php
+++ b/src/Entity/TemplateTypeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities\Entity;
 
+use Drupal\template_entities\Plugin\TemplatePluginInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityDescriptionInterface;
 use Symfony\Component\Routing\RouteCollection;
@@ -12,7 +13,7 @@ use Symfony\Component\Routing\RouteCollection;
 interface TemplateTypeInterface extends ConfigEntityInterface, EntityDescriptionInterface {
 
   /**
-   * @return \Drupal\template_entities\Plugin\TemplatePluginInterface|NULL
+   * @return TemplatePluginInterface|NULL
    */
   public function getTemplatePlugin();
 
@@ -27,7 +28,7 @@ interface TemplateTypeInterface extends ConfigEntityInterface, EntityDescription
   /**
    * Get routes for entity collection pages associated with this template type.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $route_collection
+   * @param RouteCollection $route_collection
    *
    * @return array
    *   An array of routes.
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
index 842752b..614dc8f 100644
--- a/src/EntityTypeInfo.php
+++ b/src/EntityTypeInfo.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -26,7 +27,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
   /**
    * Adds template routes to other content entity routes.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The master entity type list to alter.
    *
    * @see hook_entity_type_alter()
diff --git a/src/Form/TemplateTypeForm.php b/src/Form/TemplateTypeForm.php
index 129b7c7..44e562a 100644
--- a/src/Form/TemplateTypeForm.php
+++ b/src/Form/TemplateTypeForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\template_entities\Form;
 
+use Drupal\template_entities\Entity\TemplateTypeInterface;
+use Drupal\Core\Plugin\PluginFormInterface;
+use Drupal\Core\Form\SubformStateInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -27,30 +30,30 @@ class TemplateTypeForm extends EntityForm {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\template_entities\Entity\TemplateTypeInterface
+   * @var TemplateTypeInterface
    */
   protected $entity;
 
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
    * TemplateTypeForm constructor.
    *
-   * @param \Drupal\template_entities\Plugin\TemplatePluginManager $manager
+   * @param TemplatePluginManager $manager
    *   The template plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    */
   public function __construct(TemplatePluginManager $manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, PluginFormFactoryInterface $plugin_form_manager) {
     $this->manager = $manager;
@@ -107,7 +110,7 @@ class TemplateTypeForm extends EntityForm {
     }
 
     // Type is not set when the entity is initially created.
-    /** @var \Drupal\template_entities\Plugin\TemplatePluginInterface $type_plugin */
+    /** @var TemplatePluginInterface $type_plugin */
     $type_plugin = $this->entity->get('type') ? $this->entity->getTemplatePlugin() : NULL;
 
     if (!$this->entity->isNew()) {
@@ -238,7 +241,7 @@ class TemplateTypeForm extends EntityForm {
    * Handles switching the type selector.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return mixed
    */
@@ -249,7 +252,7 @@ class TemplateTypeForm extends EntityForm {
   /**
    * Handles submit call when alias type is selected.
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitSelectType(array $form, FormStateInterface $form_state) {
     $this->entity = $this->buildEntity($form, $form_state);
@@ -270,9 +273,9 @@ class TemplateTypeForm extends EntityForm {
   /**
    * Retrieves the plugin form for a given block and operation.
    *
-   * @param \Drupal\template_entities\Plugin\TemplatePluginInterface $template_plugin
+   * @param TemplatePluginInterface $template_plugin
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface|false
+   * @return PluginFormInterface|false
    *   The plugin form for the block.
    */
   protected function getPluginForm(TemplatePluginInterface $template_plugin) {
@@ -316,10 +319,10 @@ class TemplateTypeForm extends EntityForm {
    *
    * @param array $form
    *   Full form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Parent form state.
    *
-   * @return \Drupal\Core\Form\SubformStateInterface
+   * @return SubformStateInterface
    *   Sub-form state for the template plugin configuration form.
    */
   protected function getSettingsSubFormState(array $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Deriver/EntityTemplateActionLinkDeriver.php b/src/Plugin/Deriver/EntityTemplateActionLinkDeriver.php
index 9bd67aa..c853796 100644
--- a/src/Plugin/Deriver/EntityTemplateActionLinkDeriver.php
+++ b/src/Plugin/Deriver/EntityTemplateActionLinkDeriver.php
@@ -24,22 +24,22 @@ class EntityTemplateActionLinkDeriver extends DeriverBase implements ContainerDe
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;
 
   /**
    * The router.
    *
-   * @var \Drupal\Core\Routing\Router
+   * @var Router
    */
   protected $router;
 
   /**
    * Constructs a new LayoutBuilderLocalTaskDeriver.
    *
-   * @param \Drupal\Core\Routing\RouteProvider $route_provider
-   * @param \Drupal\Core\Routing\Router $router
+   * @param RouteProvider $route_provider
+   * @param Router $router
    */
   public function __construct(RouteProvider $route_provider, Router $router) {
     $this->routeProvider = $route_provider;
diff --git a/src/Plugin/Deriver/EntityTemplateLocalTaskDeriver.php b/src/Plugin/Deriver/EntityTemplateLocalTaskDeriver.php
index 23bae76..c202dba 100644
--- a/src/Plugin/Deriver/EntityTemplateLocalTaskDeriver.php
+++ b/src/Plugin/Deriver/EntityTemplateLocalTaskDeriver.php
@@ -22,23 +22,23 @@ class EntityTemplateLocalTaskDeriver extends DeriverBase implements ContainerDer
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The template manager.
    *
-   * @var \Drupal\template_entities\TemplateManagerInterface
+   * @var TemplateManagerInterface
    */
   protected $templateManager;
 
   /**
    * Constructs a new LayoutBuilderLocalTaskDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\template_entities\TemplateManagerInterface $template_manager
+   * @param TemplateManagerInterface $template_manager
    *   The template manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TemplateManagerInterface $template_manager) {
@@ -78,7 +78,7 @@ class EntityTemplateLocalTaskDeriver extends DeriverBase implements ContainerDer
   /**
    * Returns an array of entity types relevant for overrides.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of entity types.
    */
   protected function getEntityTypesForTemplates() {
diff --git a/src/Plugin/Deriver/EntityTemplatePluginDeriver.php b/src/Plugin/Deriver/EntityTemplatePluginDeriver.php
index 16998a3..1ece77c 100644
--- a/src/Plugin/Deriver/EntityTemplatePluginDeriver.php
+++ b/src/Plugin/Deriver/EntityTemplatePluginDeriver.php
@@ -20,25 +20,25 @@ class EntityTemplatePluginDeriver extends DeriverBase implements ContainerDerive
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs new EntityTemplatePluginDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/TemplatePlugin/NodeTemplate.php b/src/Plugin/TemplatePlugin/NodeTemplate.php
index 2820185..05cd1e7 100644
--- a/src/Plugin/TemplatePlugin/NodeTemplate.php
+++ b/src/Plugin/TemplatePlugin/NodeTemplate.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities\Plugin\TemplatePlugin;
 
+use Drupal\node\NodeInterface;
+use Drupal\node\Entity\Node;
 use Drupal;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -39,7 +41,7 @@ class NodeTemplate extends TemplatePluginBase implements DependentPluginInterfac
   protected function alterDuplicateEntity(EntityInterface $entity) {
     parent::alterDuplicateEntity($entity);
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $entity;
 
     $node->setCreatedTime(NULL);
@@ -52,7 +54,7 @@ class NodeTemplate extends TemplatePluginBase implements DependentPluginInterfac
    * {@inheritdoc}
    */
   protected function alterDuplicateTranslation(ContentEntityInterface $translation, $language, $translations_are_moderated = FALSE) {
-    /** @var \Drupal\node\NodeInterface $translation_node */
+    /** @var NodeInterface $translation_node */
     $translation_node = $translation;
 
     // Clear to allow to be set on form submit.
@@ -70,10 +72,10 @@ class NodeTemplate extends TemplatePluginBase implements DependentPluginInterfac
   public function alterDuplicateTranslationPresave(ContentEntityInterface $translation, $translations_are_moderated = FALSE) {
     parent::alterDuplicateTranslationPresave($translation);
 
-    /** @var \Drupal\node\Entity\Node $translation_node */
+    /** @var Node $translation_node */
     $translation_node = $translation;
 
-    /** @var \Drupal\node\Entity\Node $untranslated */
+    /** @var Node $untranslated */
     $untranslated = $translation_node->getUntranslated();
 
     $translation_node->setCreatedTime($untranslated->getCreatedTime());
diff --git a/src/Plugin/TemplatePlugin/TemplatePluginBase.php b/src/Plugin/TemplatePlugin/TemplatePluginBase.php
index b1dd7c5..14bf0d8 100644
--- a/src/Plugin/TemplatePlugin/TemplatePluginBase.php
+++ b/src/Plugin/TemplatePlugin/TemplatePluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities\Plugin\TemplatePlugin;
 
+use Drupal\template_entities\Entity\TemplateInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\content_translation\ContentTranslationManager;
@@ -60,35 +61,35 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
   /**
    * The plugin entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected EntityTypeInterface $entityType;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The router.
    *
-   * @var \Drupal\Core\Routing\Router
+   * @var Router
    */
   protected Router $router;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $entityTypeBundleInfo;
 
   /**
    * The content translation manager service.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslationManager;
 
@@ -159,7 +160,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
    *   The member method to call.
    */
   protected function processTranslations(EntityInterface $entity, string $method) {
-    if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface
+    if ($entity instanceof ContentEntityInterface
       && $this->contentTranslationManager
       && $this->contentTranslationManager->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
 
@@ -184,7 +185,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
   /**
    * Alter duplicate entity before create form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   protected function alterDuplicateEntity(EntityInterface $entity) {
     if ($entity instanceof EntityChangedInterface) {
@@ -201,8 +202,8 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
   /**
    * Alter duplicate translation before create form.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $translation
-   * @param \Drupal\Core\Language\Language $language
+   * @param ContentEntityInterface $translation
+   * @param Language $language
    * @param bool $translations_are_moderated
    */
   protected function alterDuplicateTranslationBase(ContentEntityInterface $translation, Language $language, $translations_are_moderated = FALSE) {
@@ -226,8 +227,8 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
    *
    * Override this.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $translation
-   * @param \Drupal\Core\Language\Language $language
+   * @param ContentEntityInterface $translation
+   * @param Language $language
    * @param bool $translations_are_moderated
    */
   protected function alterDuplicateTranslation(ContentEntityInterface $translation, Language $language, $translations_are_moderated = FALSE) {}
@@ -244,14 +245,14 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
   /**
    * Alter duplicate entity after form submission before saving.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   protected function alterDuplicateEntityPresave(EntityInterface $entity) {}
 
   /**
    * Alter duplicate translation after form submission before saving.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $translation
+   * @param ContentEntityInterface $translation
    * @param bool $translations_are_moderated
    */
   protected function alterDuplicateTranslationPresaveBase(ContentEntityInterface $translation, $translations_are_moderated = FALSE) {
@@ -268,7 +269,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
   /**
    * Alter duplicate translation after form submission before saving.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $translation
+   * @param ContentEntityInterface $translation
    * @param bool $translations_are_moderated
    */
   protected function alterDuplicateTranslationPresave(ContentEntityInterface $translation, $translations_are_moderated = FALSE) {}
@@ -355,8 +356,8 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
   /**
    * Add template filter.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
-   * @param \Drupal\template_entities\Entity\TemplateType $template_type
+   * @param SelectInterface $query
+   * @param TemplateType $template_type
    * @param string|null $base_table
    * @param string|null $id_field
    */
@@ -412,7 +413,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
    *
    * @param array $form
    *   The form definition array for the full template configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function templateForm($form, FormStateInterface $form_state) {
@@ -431,7 +432,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
    *
    * @param array $form
    *   The form definition array for the full template configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function templateValidate($form, FormStateInterface $form_state) {
@@ -457,7 +458,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
    *
    * @param array $form
    *   The form definition array for the full template configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function templateSubmit($form, FormStateInterface $form_state) {
@@ -520,7 +521,7 @@ class TemplatePluginBase extends PluginBase implements TemplatePluginInterface,
       }
     }
 
-    /** @var \Drupal\template_entities\Entity\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     $template = $entity->template;
     if (!$template->get('description')->isEmpty()) {
       $form['template'] = [
diff --git a/src/Plugin/TemplatePluginInterface.php b/src/Plugin/TemplatePluginInterface.php
index fc48df2..7c4369b 100644
--- a/src/Plugin/TemplatePluginInterface.php
+++ b/src/Plugin/TemplatePluginInterface.php
@@ -22,13 +22,13 @@ interface TemplatePluginInterface extends ConfigurableInterface, PluginInspectio
   /**
    * Duplicate an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @param \Drupal\template_entities\Entity\Template $template
+   * @param Template $template
    *   The template object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The new duplicate entity.
    */
   public function duplicateEntity(EntityInterface $entity, Template $template);
@@ -47,7 +47,7 @@ interface TemplatePluginInterface extends ConfigurableInterface, PluginInspectio
    * If the query has already been filtered by the entity query decorator, then
    * the "template_entities_filtered" query tag will have been added.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *
    * @param  $template_type
    *
@@ -62,7 +62,7 @@ interface TemplatePluginInterface extends ConfigurableInterface, PluginInspectio
    * If the query has already been filtered by the entity query decorator, then
    * the "template_entities_filtered" query tag will have been added.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *
    * @param  $template_type
    *
@@ -71,13 +71,13 @@ interface TemplatePluginInterface extends ConfigurableInterface, PluginInspectio
   public function entityQueryAlter(SelectInterface $query, TemplateType $template_type);
 
   /**
-   * Get the collection route.
-   *
-   * @param \Symfony\Component\Routing\RouteCollection $route_collection
-   *
-   * @return \Symfony\Component\Routing\RouteCollection|null A Route instance
-   *   or null when not found
-   */
+  * Get the collection route.
+  *
+   * @param RouteCollection $route_collection
+  *
+   * @return RouteCollection|null A Route instance
+    or null when not found
+  */
   public function getCollectionRoute(RouteCollection $route_collection);
 
   /**
@@ -99,7 +99,7 @@ interface TemplatePluginInterface extends ConfigurableInterface, PluginInspectio
   /**
    * Called after template has been used to create and save a new entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return mixed
    */
@@ -108,7 +108,7 @@ interface TemplatePluginInterface extends ConfigurableInterface, PluginInspectio
   /**
    * Called after template has been used to create and save a new entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return mixed
    */
@@ -118,8 +118,8 @@ interface TemplatePluginInterface extends ConfigurableInterface, PluginInspectio
    * Alter the new entity form.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param FormStateInterface $form_state
+   * @param EntityInterface $entity
    *
    * @return mixed
    */
diff --git a/src/Plugin/TemplatePluginManager.php b/src/Plugin/TemplatePluginManager.php
index 3c0329f..255e37a 100644
--- a/src/Plugin/TemplatePluginManager.php
+++ b/src/Plugin/TemplatePluginManager.php
@@ -19,9 +19,9 @@ class TemplatePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/PluginForm/TemplatePluginFormInterface.php b/src/PluginForm/TemplatePluginFormInterface.php
index 8f1a077..53a3c2b 100644
--- a/src/PluginForm/TemplatePluginFormInterface.php
+++ b/src/PluginForm/TemplatePluginFormInterface.php
@@ -15,7 +15,7 @@ interface TemplatePluginFormInterface extends PluginFormInterface {
    *
    * @param array $form
    *   The form, as built by buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 9b1e89d..aedbbb8 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_entities\Routing;
 
+use Drupal\template_entities\TemplateManager;
+use Drupal\template_entities\Entity\TemplateTypeInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,23 +21,23 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The template manager service.
    *
-   * @var \Drupal\template_entities\TemplateManagerInterface
+   * @var TemplateManagerInterface
    */
   protected $templateManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\template_entities\TemplateManagerInterface $template_manager
+   * @param TemplateManagerInterface $template_manager
    *   The template manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, TemplateManagerInterface $template_manager) {
@@ -46,7 +48,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Callback from template_entities.routing.yml.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    */
   public function routes() {
     $collection = new RouteCollection();
@@ -66,17 +68,17 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Gets the new_from_template route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @param string $path
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getTemplatesRoute(EntityTypeInterface $entity_type, string $path) {
     if ($path) {
-      /** @var \Drupal\template_entities\TemplateManager $template_manager */
+      /** @var TemplateManager $template_manager */
       $template_manager = Drupal::service('template_entities.manager');
 
       $entity_type_id = $entity_type->id();
@@ -115,7 +117,7 @@ class RouteSubscriber extends RouteSubscriberBase {
     // And add our own based on those.
     $template_types = $this->entityTypeManager->getStorage('template_type')
       ->loadMultiple();
-    /** @var \Drupal\template_entities\Entity\TemplateTypeInterface $template_type */
+    /** @var TemplateTypeInterface $template_type */
     foreach ($template_types as $template_type_id => $template_type) {
       $entity_type_id = $template_type->getTargetEntityTypeId();
 
@@ -179,17 +181,17 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Gets the new_from_template route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @param string $path
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getNewFromTemplateRoute(EntityTypeInterface $entity_type, string $path) {
     if ($path) {
-      /** @var \Drupal\template_entities\TemplateManager $template_manager */
+      /** @var TemplateManager $template_manager */
       $template_manager = Drupal::service('template_entities.manager');
 
       if ($template_manager->isEntityTypeTemplateable($entity_type->id())) {
diff --git a/src/TemplateHtmlRouteProvider.php b/src/TemplateHtmlRouteProvider.php
index 1cdccab..274010a 100644
--- a/src/TemplateHtmlRouteProvider.php
+++ b/src/TemplateHtmlRouteProvider.php
@@ -44,10 +44,10 @@ class TemplateHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the new from template route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getNewFromTemplateRoute(EntityTypeInterface $entity_type) {
@@ -69,7 +69,7 @@ class TemplateHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the generic new from template route.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getNewFromTemplatePageRoute() {
diff --git a/src/TemplateListBuilder.php b/src/TemplateListBuilder.php
index 7ad9930..18ad669 100644
--- a/src/TemplateListBuilder.php
+++ b/src/TemplateListBuilder.php
@@ -20,27 +20,27 @@ class TemplateListBuilder extends EntityListBuilder {
   /**
    * The template type entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $templateTypeStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $template_type_storage
+   * @param EntityStorageInterface $template_type_storage
    *   The template type storage class.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityStorageInterface $template_type_storage, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/TemplateManager.php b/src/TemplateManager.php
index 3d52542..d903841 100644
--- a/src/TemplateManager.php
+++ b/src/TemplateManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\template_entities;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection;
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ -25,59 +29,59 @@ class TemplateManager implements TemplateManagerInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * Constructs a new WorkspaceManager.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
    */
   public function __construct(RequestStack $request_stack, EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user, StateInterface $state, LoggerInterface $logger, ClassResolverInterface $class_resolver) {
@@ -139,8 +143,8 @@ class TemplateManager implements TemplateManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function isTemplate($entity_id, $entity_type_id) {
     return !empty($this->getTemplateIdsForEntity($entity_id, $entity_type_id));
@@ -155,8 +159,8 @@ class TemplateManager implements TemplateManagerInterface {
    *   Entity type id of the entity to check.
    *
    * @return array|int
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getTemplateIdsForEntity($entity_id, $entity_type_id) {
     $template_storage = $this->entityTypeManager->getStorage('template');
@@ -172,8 +176,8 @@ class TemplateManager implements TemplateManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTemplatesForEntity(EntityInterface $entity) {
     $template_storage = $this->entityTypeManager->getStorage('template');
@@ -185,7 +189,7 @@ class TemplateManager implements TemplateManagerInterface {
     // to the selection handler settings, we ensure that the entity reference
     // field - whatever it's type - will allow selection of entities used as
     // templates. Only needed for the template entity form.
-    /** @var \Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection $handler */
+    /** @var DefaultSelection $handler */
     if ($handler = $query->getMetadata('entity_reference_selection_handler')) {
       if (!empty($handler->getConfiguration()['allow_templates'])) {
         $query->addTag('template_entities_allow_templates');
@@ -219,7 +223,7 @@ class TemplateManager implements TemplateManagerInterface {
    */
   public function alterQuery(AlterableInterface $query) {
     // Allow any template type plugin to alter any query.
-    if ($query instanceof \Drupal\Core\Database\Query\SelectInterface) {
+    if ($query instanceof SelectInterface) {
 
       // If it's an entity query, only call plugins for these template types.
       if ($query->hasTag('entity_query')) {
@@ -283,7 +287,7 @@ class TemplateManager implements TemplateManagerInterface {
   /**
    * @inheritDoc
    */
-  public function alterNewEntityForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, EntityInterface $entity) {
+  public function alterNewEntityForm(&$form, FormStateInterface $form_state, EntityInterface $entity) {
     if (isset($entity->template) && $entity->template instanceof Template) {
       $template = $entity->template;
       $template->getTemplatePlugin()->alterNewEntityForm($form, $form_state, $entity);
diff --git a/src/TemplateManagerInterface.php b/src/TemplateManagerInterface.php
index ba1c3e1..c0463f6 100644
--- a/src/TemplateManagerInterface.php
+++ b/src/TemplateManagerInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\template_entities;
 
+use Drupal\template_entities\Entity\TemplateTypeInterface;
+use Drupal\template_entities\Entity\TemplateInterface;
+use Drupal\template_entities\Entity\Template;
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -30,7 +34,7 @@ interface TemplateManagerInterface {
    * @param string|null $bundle
    *   The bundle id to check.
    *
-   * @return \Drupal\template_entities\Entity\TemplateTypeInterface[]
+   * @return TemplateTypeInterface[]
    *   An array of template types keyed by id for the given entity type or an array
    *   of arrays of template types for all entity types that have them keyed
    *   by entity type id.
@@ -40,9 +44,9 @@ interface TemplateManagerInterface {
   /**
    * Get template entities which use entity as a template.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\template_entities\Entity\TemplateInterface[]
+   * @return TemplateInterface[]
    */
   public function getTemplatesForEntity(EntityInterface $entity);
 
@@ -59,7 +63,7 @@ interface TemplateManagerInterface {
   /**
    * Alter queries to hide entities used as templates.
    *
-   * @param \Drupal\Core\Database\Query\AlterableInterface $query
+   * @param AlterableInterface $query
    *
    * @return mixed
    */
@@ -70,7 +74,7 @@ interface TemplateManagerInterface {
    *
    * @param string $entity_type_id
    *
-   * @return \Drupal\template_entities\Entity\Template[]
+   * @return Template[]
    */
   public function getTemplatesForEntityType(string $entity_type_id);
 
@@ -79,7 +83,7 @@ interface TemplateManagerInterface {
    *
    * @param string $template_type_id
    *
-   * @return \Drupal\template_entities\Entity\Template[]
+   * @return Template[]
    */
   public function getTemplatesOfType(string $template_type_id);
 
@@ -109,5 +113,5 @@ interface TemplateManagerInterface {
    *
    * @return mixed
    */
-  public function alterNewEntityForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, EntityInterface $entity);
+  public function alterNewEntityForm(&$form, FormStateInterface $form_state, EntityInterface $entity);
 }
diff --git a/src/TemplatePermissions.php b/src/TemplatePermissions.php
index e8b1ebd..5464dd8 100644
--- a/src/TemplatePermissions.php
+++ b/src/TemplatePermissions.php
@@ -32,7 +32,7 @@ class TemplatePermissions {
   /**
    * Returns a list of template permissions for a given template type.
    *
-   * @param \Drupal\template_entities\Entity\TemplateType $type
+   * @param TemplateType $type
    *   The template type.
    *
    * @return array
diff --git a/src/ViewsQueryAlter.php b/src/ViewsQueryAlter.php
index 2c161b9..0520fb2 100644
--- a/src/ViewsQueryAlter.php
+++ b/src/ViewsQueryAlter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_entities;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -21,50 +22,50 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The template manager service.
    *
-   * @var \Drupal\template_entities\TemplateManagerInterface
+   * @var TemplateManagerInterface
    */
   protected $templateManager;
 
   /**
    * The views data.
    *
-   * @var \Drupal\views\ViewsData
+   * @var ViewsData
    */
   protected $viewsData;
 
   /**
    * A plugin manager which handles instances of views join plugins.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $viewsJoinPluginManager;
 
   /**
    * Constructs a new ViewsQueryAlter instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\template_entities\TemplateManagerInterface $template_manager
+   * @param TemplateManagerInterface $template_manager
    *   The workspace manager service.
-   * @param \Drupal\views\ViewsData $views_data
+   * @param ViewsData $views_data
    *   The views data.
-   * @param \Drupal\views\Plugin\ViewsHandlerManager $views_join_plugin_manager
+   * @param ViewsHandlerManager $views_join_plugin_manager
    *   The views join plugin manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, TemplateManagerInterface $template_manager, ViewsData $views_data, ViewsHandlerManager $views_join_plugin_manager) {
@@ -91,10 +92,10 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
   /**
    * Implements a hook bridge for hook_views_query_alter().
    *
-   * @param \Drupal\views\ViewExecutable $view
-   * @param \Drupal\views\Plugin\views\query\QueryPluginBase $query
+   * @param ViewExecutable $view
+   * @param QueryPluginBase $query
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @see hook_views_query_alter()
    */
   public function alterQuery(ViewExecutable $view, QueryPluginBase $query) {
@@ -131,14 +132,14 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
    * This should only be called after determining that this entity type is
    * involved in the query, and that the entity type is templatable.
    *
-   * @param \Drupal\views\Plugin\views\query\Sql $query
+   * @param Sql $query
    *   The query plugin object for the query.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param array $template_types
    *   The template types used for this entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function alterQueryForEntityType(Sql $query, EntityTypeInterface $entity_type, array $template_types) {
     $table_queue =& $query->getTableQueue();
@@ -162,7 +163,7 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
    *
    * @param string $entity_type_id
    *   The ID of the entity type to join.
-   * @param \Drupal\views\Plugin\views\query\Sql $query
+   * @param Sql $query
    *   The query plugin object for the query.
    * @param string $relationship
    *   The primary table alias this table is related to.
@@ -170,7 +171,7 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
    *
    * @return string
    *   The alias of the 'template__template_entity_id' table.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function ensureTemplateAssociationTable($entity_type_id, Sql $query, $relationship, array $template_types) {
     if (isset($query->tables[$relationship]['template__template_entity_id'])) {
diff --git a/template.page.inc b/template.page.inc
index 665f2e2..fba778a 100644
--- a/template.page.inc
+++ b/template.page.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Routing\RedirectDestinationInterface;
+use Drupal\template_entities\Entity\TemplateInterface;
 /**
  * @file
  * Contains template.page.inc.
@@ -36,18 +39,18 @@ function template_preprocess_template(array &$variables) {
  *   An associative array containing:
  *   - content: An array of templates.
  *
- * @throws \Drupal\Core\Entity\EntityMalformedException
+ * @throws EntityMalformedException
  *
  * @see node_add_page()
  */
 function template_preprocess_template_content_add_list(array &$variables) {
   $variables['templates'] = [];
 
-  /** @var \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination */
+  /** @var RedirectDestinationInterface $redirect_destination */
   $redirect_destination = \Drupal::service('redirect.destination');
 
   if (!empty($variables['content'])) {
-    /** @var \Drupal\template_entities\Entity\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     foreach ($variables['content'] as $template) {
       $variables['templates'][$template->id()] = [
         'template' => $template->id(),
diff --git a/template_entities.api.php b/template_entities.api.php
index 970d1c2..d1a4b80 100644
--- a/template_entities.api.php
+++ b/template_entities.api.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\template_entities\Entity\TemplateInterface;
+use Drupal\node\Entity\Node;
 /**
  * @file
  * Hooks provided by the Template Entities module.
@@ -11,7 +13,7 @@ use Drupal\Core\Entity\EntityInterface;
 /**
  * Alters entities created from templates before form creation.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $new_entity
+ * @param ContentEntityInterface $new_entity
  *   New entity created from template before used to populate form.
  *
  * @param array $context
@@ -28,10 +30,10 @@ use Drupal\Core\Entity\EntityInterface;
  */
 function hook_template_entities_new_alter(ContentEntityInterface $new_entity, array $context) {
   if ($context['template_type_id'] === 'landing_pages') {
-    /** @var \Drupal\template_entities\Entity\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     $template = $context['template'];
 
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $new_entity;
     $node->setRevisionLogMessage(t('New landing page created from "@template".', ['@template' => $template->label()]));
   }
@@ -40,7 +42,7 @@ function hook_template_entities_new_alter(ContentEntityInterface $new_entity, ar
 /**
  * Alters entities created from templates before form creation.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $new_entity
+ * @param ContentEntityInterface $new_entity
  *  New entity created from template before used to populate form.
  *
  * @param array $context
@@ -56,10 +58,10 @@ function hook_template_entities_new_alter(ContentEntityInterface $new_entity, ar
  * @ingroup template_entities_api
  */
 function hook_template_entities_new_TEMPLATE_TYPE_ID_alter(ContentEntityInterface $new_entity, array $context) {
-  /** @var \Drupal\template_entities\Entity\TemplateInterface $template */
+  /** @var TemplateInterface $template */
   $template = $context['template'];
 
-  /** @var \Drupal\node\Entity\Node $node */
+  /** @var Node $node */
   $node = $new_entity;
   $node->setRevisionLogMessage(t('New landing page created from "@template".', ['@template' => $template->label()]));
 }
diff --git a/template_entities.module b/template_entities.module
index 2e3dc56..c18a900 100644
--- a/template_entities.module
+++ b/template_entities.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\template_entities\TemplateManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Contains template_entities.module.
@@ -44,7 +47,7 @@ function template_entities_views_query_alter(ViewExecutable $view, QueryPluginBa
  */
 function template_entities_query_alter(AlterableInterface $query) {
   // Give all template plugins a chance to alter queries.
-  /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+  /** @var TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
   $template_manager->alterQuery($query);
 }
@@ -100,9 +103,9 @@ function template_entities_entity_type_alter(array &$entity_types) {
 /**
  * Implements hook_entity_insert().
  */
-function template_entities_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function template_entities_entity_insert(EntityInterface $entity) {
   // Give all template plugins a chance to alter queries.
-  /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+  /** @var TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
   $template_manager->entityInsert($entity);
 
@@ -111,9 +114,9 @@ function template_entities_entity_insert(Drupal\Core\Entity\EntityInterface $ent
 /**
  * Implements hook_entity_presave().
  */
-function template_entities_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function template_entities_entity_presave(EntityInterface $entity) {
   // Give all template plugins a chance to alter queries.
-  /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+  /** @var TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
   $template_manager->entityPresave($entity);
 }
@@ -121,9 +124,9 @@ function template_entities_entity_presave(Drupal\Core\Entity\EntityInterface $en
 /**
  * Implements hook_form_alter().
  */
-function template_entities_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function template_entities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Give all template plugins a chance to alter the new entity form.
-  /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
+  /** @var TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
   $form_object = $form_state->getFormObject();
   if ($form_object instanceof EntityForm) {
diff --git a/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php b/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php
index 79ae487..b39873a 100644
--- a/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php
+++ b/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\template_entities\Functional\Entity;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\entity_test\Entity\EntityTestBundle;
@@ -33,7 +34,7 @@ class TemplateEntityVisibilityTest extends BrowserTestBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -88,7 +89,7 @@ class TemplateEntityVisibilityTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
 
