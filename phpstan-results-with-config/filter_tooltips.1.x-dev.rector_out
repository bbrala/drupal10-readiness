modules/contrib/filter_tooltips/filter_tooltips.module
modules/contrib/filter_tooltips/src/Controller/AutocompleteController.php
modules/contrib/filter_tooltips/src/Element/FilterTooltips.php
modules/contrib/filter_tooltips/src/Form/FilterTooltipsEditorDialog.php
modules/contrib/filter_tooltips/src/Plugin/CKEditorPlugin/CKEditorTooltips.php
modules/contrib/filter_tooltips/src/Plugin/Filter/FilterTooltips.php

6 files with changes
====================

1) modules/contrib/filter_tooltips/src/Plugin/Filter/FilterTooltips.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager to pull out the entity data.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/filter_tooltips/src/Plugin/CKEditorPlugin/CKEditorTooltips.php:19

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    if ($library_path = drupal_get_path('module', 'filter_tooltips')) {
+    if ($library_path = \Drupal::service('extension.list.module')->getPath('filter_tooltips')) {
       return $library_path . '/js/plugin.js';
     }
   }
@@ @@
     return [
       'filter_tooltips' => [
         'label' => t('Filter Tooltips'),
-        'image' => drupal_get_path('module', 'filter_tooltips') . '/js/icons/filter_tooltips.png',
+        'image' => \Drupal::service('extension.list.module')->getPath('filter_tooltips') . '/js/icons/filter_tooltips.png',
       ],
     ];
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/filter_tooltips/src/Form/FilterTooltipsEditorDialog.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The editor storage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $editorStorage;

@@ @@
   /**
    * Constructs a form object for filter_tooltips dialog.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $editor_storage
+   * @param EntityStorageInterface $editor_storage
    *   The editor storage service.
    */
   public function __construct(EntityStorageInterface $editor_storage) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $input
    *   An array with the attribute values from the editor.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/filter_tooltips/src/Element/FilterTooltips.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\filter_tooltips\Element;

+use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\Element;
@@ @@
     if (!empty($element['#autocomplete_route_name'])) {
       $parameters = isset($element['#autocomplete_route_parameters']) ? $element['#autocomplete_route_parameters'] : [];
       $url = Url::fromRoute($element['#autocomplete_route_name'], $parameters)->toString(TRUE);
-      /** @var \Drupal\Core\Access\AccessManagerInterface $access_manager */
+      /** @var AccessManagerInterface $access_manager */
       $access_manager = \Drupal::service('access_manager');
       $access = $access_manager->checkNamedRoute($element['#autocomplete_route_name'], $parameters, \Drupal::currentUser(), TRUE);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/filter_tooltips/src/Controller/AutocompleteController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity_type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a AutocompleteController object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type manager service.
    */
   public function __construct(Connection $database, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * Like other autocomplete functions, this function inspects the 'q' query
    * parameter for the string to use to search for suggestions.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $filter_id
    *   The filter id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function autocomplete(Request $request, $filter_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/filter_tooltips/filter_tooltips.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\filter_tooltips\Plugin\Filter\FilterTooltips;
+use Drupal\filter\Entity\FilterFormat;
 /**
  * @file
  * Filter Tooltips module functions.
@@ @@
 /**
  * Clear the cache.
  *
- * @param \Drupal\Core\Entity\EntityInterface $term
+ * @param EntityInterface $term
  *   The term object.
  */
 function filter_tooltips_clear_cache(EntityInterface $term) {
@@ @@
 /**
  * Check if the cache should be cleared.
  *
- * @param \Drupal\Core\Entity\EntityInterface $term
+ * @param EntityInterface $term
  *   The term object.
  *
  * @return bool
@@ @@
 /**
  * Get the vocabulary defined by the term's filter configuration.
  *
- * @param \Drupal\Core\Entity\EntityInterface $term
+ * @param EntityInterface $term
  *   The term object.
  *
  * @return string
@@ @@
 /**
  * Get the filter configuration defined by the term.
  *
- * @param \Drupal\Core\Entity\EntityInterface $term
+ * @param EntityInterface $term
  *   The term object.
  *
  * @return array
@@ @@
 /**
  * Get the filter for the current term.
  *
- * @param \Drupal\Core\Entity\EntityInterface $term
+ * @param EntityInterface $term
  *   The term object.
  *
- * @return \Drupal\filter_tooltips\Plugin\Filter\FilterTooltips
+ * @return FilterTooltips
  *   The filter object.
  */
 function filter_tooltips_get_filter(EntityInterface $term) {
@@ @@

   if ($filter_html_enabled && $allowed_html = $form_state->getValue($allowed_html_path)) {

-    /** @var \Drupal\filter\Entity\FilterFormat $filter_format */
+    /** @var FilterFormat $filter_format */
     $filter_format = $form_state->getFormObject()->getEntity();

     $filter_html = clone $filter_format->filters()->get('filter_html');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

