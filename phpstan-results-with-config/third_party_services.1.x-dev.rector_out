modules/contrib/third_party_services/src/Ajax/LocalStorageCommand.php
modules/contrib/third_party_services/src/Ajax/LocationReloadCommand.php
modules/contrib/third_party_services/src/BlockOptionalRender.php
modules/contrib/third_party_services/src/BlockOptionalRenderInterface.php
modules/contrib/third_party_services/src/Controller/ConfigurationController.php
modules/contrib/third_party_services/src/FieldOptionalRender.php
modules/contrib/third_party_services/src/FieldOptionalRenderInterface.php
modules/contrib/third_party_services/src/Form/ConfigurationForm.php
modules/contrib/third_party_services/src/Form/MenuLinkForm.php
modules/contrib/third_party_services/src/Mediator.php
modules/contrib/third_party_services/src/MediatorInterface.php
modules/contrib/third_party_services/src/Menu/Link/ConfigurationFormUrlMenuLink.php
modules/contrib/third_party_services/src/RawHtmlRenderer.php
modules/contrib/third_party_services/src/RawHtmlRendererInterface.php
modules/contrib/third_party_services/src/Twig/ConfigurationFormUrlTwigExtension.php
modules/contrib/third_party_services/tests/src/Unit/Ajax/LocalStorageCommandTest.php
modules/contrib/third_party_services/third_party_services.install
modules/contrib/third_party_services/third_party_services.module

13 files with changes
=====================

1) modules/contrib/third_party_services/third_party_services.module:17

    ---------- begin diff ----------
@@ @@
 /**
  * Returns instance of the "MODULE.mediator" service.
  *
- * @return \Drupal\third_party_services\MediatorInterface
+ * @return MediatorInterface
  *   An instance of the service.
  */
 function third_party_services_mediator(): MediatorInterface {
@@ @@
 /**
  * Returns instance of the "MODULE.field_optional_render" service.
  *
- * @return \Drupal\third_party_services\FieldOptionalRenderInterface
+ * @return FieldOptionalRenderInterface
  *   An instance of the service.
  */
 function third_party_services_field_optional_render(): FieldOptionalRenderInterface {
@@ @@
 /**
  * Returns instance of the "MODULE.block_optional_render" service.
  *
- * @return \Drupal\third_party_services\BlockOptionalRenderInterface
+ * @return BlockOptionalRenderInterface
  *   An instance of the service.
  */
 function third_party_services_block_optional_render(): BlockOptionalRenderInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/third_party_services/src/Twig/ConfigurationFormUrlTwigExtension.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of the "current_user" service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * ConfigurationController constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Instance of the "current_user" service.
    */
   public function __construct(AccountInterface $account) {
@@ @@
    * @param array $dialog_options
    *   Set of options for "OpenDialogCommand".
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Object representation of the URL.
    *
    * @see \Drupal\third_party_services\Controller\ConfigurationController::form()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/third_party_services/src/RawHtmlRendererInterface.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * RawHtmlRenderer constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Instance of the "renderer" service.
-   * @param \Drupal\Core\Render\HtmlResponseAttachmentsProcessor $response_attachments_processor
+   * @param HtmlResponseAttachmentsProcessor $response_attachments_processor
    *   Instance of the "html_response.attachments_processor" service.
    */
   public function __construct(RendererInterface $renderer, HtmlResponseAttachmentsProcessor $response_attachments_processor);
@@ @@
    * @param array $content
    *   Renderable structure to transform.
    *
-   * @return \Drupal\Core\Render\HtmlResponse
+   * @return HtmlResponse
    *   HTML response
    *
    * @see template_preprocess_html()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/third_party_services/src/RawHtmlRenderer.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of the "renderer" service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * HTML response.
    *
-   * @var \Drupal\Core\Render\HtmlResponse
+   * @var HtmlResponse
    */
   protected $htmlResponse;

@@ @@
   /**
    * Instance of the "html_response.attachments_processor" service.
    *
-   * @var \Drupal\Core\Render\HtmlResponseAttachmentsProcessor
+   * @var HtmlResponseAttachmentsProcessor
    */
   protected $responseAttachmentsProcessor;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/third_party_services/src/Menu/Link/ConfigurationFormUrlMenuLink.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of the "current_user" service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/third_party_services/src/MediatorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\third_party_services;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\HtmlResponse;
@@ @@
   /**
    * Mediator constructor.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   Instance of the "user.data" service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Instance of the "current_user" service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   Instance of the "form_builder" service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Instance of the "entity_type.manager" service.
    * @param RawHtmlRenderer $raw_html_renderer
    *   Instance of the "MODULE.raw_html_renderer" service.
@@ @@
   /**
    * Returns list of patterns for third-party services in given vocabulary.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   An associative arrays where keys are patterns for third-party service
    *   recognition and values - are instances of еру "taxonomy_term" entity.
    */
@@ @@
   /**
    * Check whether third-party service allowed for rendering.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Taxonomy term, representing particular service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   An account to check configuration in. Current user by default.
    *
    * @return bool
@@ @@
    *
    * @param string[] $term_uuids
    *   Indexed array of UUIDs of "taxonomy_term" entities.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   An account to save configuration in. Current user by default.
    */
   public function setAllowedServices(array $term_uuids, AccountInterface $account = NULL);
@@ @@
   /**
    * Returns instances of "taxonomy_term" entity.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   Indexed array of instances of "taxonomy_term" entity.
    */
   public function loadTerms(): array;
@@ @@
   /**
    * Decide whether placeholdering is needed and spoof the renderable markup.
    *
-   * @param array|string|\Drupal\Component\Render\MarkupInterface $markup
+   * @param array|string|MarkupInterface $markup
    *   Markup to scan for third-party service.
    * @param array $build
    *   Renderable array which is assumed to be rendered if no placeholders.
@@ @@
    * @param int $delta
    *   Number of processing element. Must differ when the same "$type" is used.
    *
-   * @return \Drupal\Core\Render\HtmlResponse|null
+   * @return HtmlResponse|null
    *   HTML response of rendered third-party service or NULL when placeholder
    *   not needed.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/third_party_services/src/Mediator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\third_party_services;

+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Instance of the "user.data" service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Instance of the "current_user" service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Instance of the "form_builder" service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Storage of the "taxonomy_term" entities.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $taxonomyTermStorage;

@@ @@
   /**
    * Instance of the "MODULE.raw_html_renderer" service.
    *
-   * @var \Drupal\third_party_services\RawHtmlRenderer
+   * @var RawHtmlRenderer
    */
   protected $rawHtmlRenderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/third_party_services/src/Form/ConfigurationForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;

@@ @@
   /**
    * Instance of the "cache_tags.invalidator" service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * ConfigurationForm constructor.
    *
-   * @param \Drupal\third_party_services\MediatorInterface $mediator
+   * @param MediatorInterface $mediator
    *   Instance of the "MODULE.mediator" service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   Instance of the "cache_tags.invalidator" service.
    */
   public function __construct(MediatorInterface $mediator, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/third_party_services/src/FieldOptionalRenderInterface.php:40

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   Complete element to replace by placeholder.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   Input set of elements.
    *
    * @return \Iterator
@@ @@
    *
    * @param array $form
    *   Form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A state of form.
    *
    * @return array[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/third_party_services/src/FieldOptionalRender.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/third_party_services/src/Controller/ConfigurationController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;

@@ @@
   /**
    * ConfigurationController constructor.
    *
-   * @param \Drupal\third_party_services\MediatorInterface $mediator
+   * @param MediatorInterface $mediator
    *   Instance of the "MODULE.mediator" service.
    */
   public function __construct(MediatorInterface $mediator) {
@@ @@
   /**
    * Checks whether user is allowed to manage the configuration.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Requested user.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access result.
    */
   public function access(AccountInterface $account, AccountInterface $user): AccessResult {
@@ @@
   /**
    * Controller for "/user/{user}/third-party-services".
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   HTTP request.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   An account of user for personalizing configuration.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render-like array or AJAX response.
    */
   public function form(Request $request, AccountInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/third_party_services/src/BlockOptionalRenderInterface.php:22

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   Renderable array of block with main content.
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   An instance of the block.
    */
   public function process(array &$element, BlockPluginInterface $block): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/third_party_services/src/BlockOptionalRender.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Instance of the "MODULE.mediator" service.
    *
-   * @var \Drupal\third_party_services\MediatorInterface
+   * @var MediatorInterface
    */
   protected $mediator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 13 files have been changed by Rector                                      

