diff --git a/media_entity_file_replace.info.yml b/media_entity_file_replace.info.yml
index a0f99c4..50a16ce 100644
--- a/media_entity_file_replace.info.yml
+++ b/media_entity_file_replace.info.yml
@@ -1,7 +1,7 @@
 name: Media Entity File Replace
 type: module
 description: Allows content editors to easily replace source files associated with any file-based media entity, preserving the original filename.
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^8.7.7 || ^9 || ^10
 package: Media
 dependencies:
   - drupal:media
diff --git a/media_entity_file_replace.module b/media_entity_file_replace.module
index 4ecc62a..6c1f16f 100644
--- a/media_entity_file_replace.module
+++ b/media_entity_file_replace.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\media\MediaTypeInterface;
+use Drupal\media\Entity\MediaType;
+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\media\Entity\Media;
+use Drupal\Core\File\FileSystem;
 /**
  * @file
  * Media Entity File Replace module file.
@@ -39,7 +44,7 @@ function media_entity_file_replace_entity_extra_field_info() {
       ->loadMultiple();
 
     foreach ($mediaTypes as $mediaType) {
-      /** @var \Drupal\media\MediaTypeInterface $mediaType */
+      /** @var MediaTypeInterface $mediaType */
       // We only care about media types that use a file field as a source.
       if ($mediaType->getSource() instanceof File) {
         $extra['media'][$mediaType->id()]['form']['replace_file'] = [
@@ -68,7 +73,7 @@ function media_entity_file_replace_form_media_form_alter(&$form, FormStateInterf
   // is nothing for us to do.
   if (!$media->isNew()) {
     // Only run for media entity types that use a file based source field.
-    /** @var \Drupal\media\Entity\MediaType $mediaType */
+    /** @var MediaType $mediaType */
     $mediaType = \Drupal::entityTypeManager()->getStorage('media_type')->load($media->bundle());
     if (!$mediaType->getSource() instanceof File) {
       return;
@@ -79,7 +84,7 @@ function media_entity_file_replace_form_media_form_alter(&$form, FormStateInterf
     // Make sure we have a file field item and that the file entity exists.
     // It's possible the file field item still exists (the reference to it)
     // but that the file entity was deleted.
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $fileFieldItem */
+    /** @var FileItem $fileFieldItem */
     $fileFieldItem = $media->get($sourceFieldName)->first();
     if (!$fileFieldItem || !$fileFieldItem->entity) {
       return;
@@ -174,11 +179,11 @@ function _media_entity_file_replace_validate($form, FormStateInterface $formStat
     return;
   }
 
-  /** @var \Drupal\media\Entity\Media $media */
+  /** @var Media $media */
   $media = $formState->getFormObject()->getEntity();
   $sourceFieldName = $form['replace_file']['replacement_file']['#source_field_name'];
 
-  /** @var \Drupal\Core\File\FileSystem $fileSystem */
+  /** @var FileSystem $fileSystem */
   $fileSystem = \Drupal::service('file_system');
 
   // Determine where to place the replacement file that a user selected.
@@ -235,7 +240,7 @@ function _media_entity_file_replace_submit($form, FormStateInterface $formState)
     return;
   }
 
-  /** @var \Drupal\media\Entity\Media $media */
+  /** @var Media $media */
   $media = $formState->getFormObject()->getEntity();
 
   if ($formState->getValue('keep_original_filename')) {
diff --git a/tests/src/Functional/MediaEntityFileReplaceTest.php b/tests/src/Functional/MediaEntityFileReplaceTest.php
index 6668e65..50fce5a 100644
--- a/tests/src/Functional/MediaEntityFileReplaceTest.php
+++ b/tests/src/Functional/MediaEntityFileReplaceTest.php
@@ -132,11 +132,11 @@ class MediaEntityFileReplaceTest extends BrowserTestBase {
     // the contents of the file have.
     $updatedDocument = $this->loadMediaEntityByName('Foobar');
     $updatedFile = $this->loadFileEntity($updatedDocument->getSource()->getSourceFieldValue($updatedDocument));
-    $this->assertEqual($updatedFile->id(), $originalFile->id());
-    $this->assertEqual($updatedFile->getFileUri(), $originalFile->getFileUri());
-    $this->assertEqual($updatedFile->getFilename(), $originalFile->getFilename());
-    $this->assertNotEqual($updatedFile->getSize(), $originalFile->getSize());
-    $this->assertEqual(file_get_contents($updatedFile->getFileUri()), 'new');
+    $this->assertEquals($updatedFile->id(), $originalFile->id());
+    $this->assertEquals($updatedFile->getFileUri(), $originalFile->getFileUri());
+    $this->assertEquals($updatedFile->getFilename(), $originalFile->getFilename());
+    $this->assertNotEquals($updatedFile->getSize(), $originalFile->getSize());
+    $this->assertEquals(file_get_contents($updatedFile->getFileUri()), 'new');
 
     // Now upload another replacement document, but this time don't overwrite
     // the original.
@@ -155,12 +155,12 @@ class MediaEntityFileReplaceTest extends BrowserTestBase {
     // previous one.
     $updatedDocument = $this->loadMediaEntityByName('Foobar');
     $updatedFile = $this->loadFileEntity($updatedDocument->getSource()->getSourceFieldValue($updatedDocument));
-    $this->assertNotEqual($updatedFile->id(), $originalFile->id());
-    $this->assertNotEqual($updatedFile->getFileUri(), $originalFile->getFileUri());
-    $this->assertNotEqual($updatedFile->getFilename(), $originalFile->getFilename());
-    $this->assertNotEqual($updatedFile->getSize(), $originalFile->getSize());
-    $this->assertNotEqual(file_get_contents($updatedFile->getFileUri()), file_get_contents($originalFile->getFileUri()));
-    $this->assertEqual(file_get_contents($updatedFile->getFileUri()), 'foo-new');
+    $this->assertNotEquals($updatedFile->id(), $originalFile->id());
+    $this->assertNotEquals($updatedFile->getFileUri(), $originalFile->getFileUri());
+    $this->assertNotEquals($updatedFile->getFilename(), $originalFile->getFilename());
+    $this->assertNotEquals($updatedFile->getSize(), $originalFile->getSize());
+    $this->assertNotEquals(file_get_contents($updatedFile->getFileUri()), file_get_contents($originalFile->getFileUri()));
+    $this->assertEquals(file_get_contents($updatedFile->getFileUri()), 'foo-new');
     $this->assertFalse($updatedFile->isTemporary());
 
     // The old file entity should still exist, and should not be marked as
