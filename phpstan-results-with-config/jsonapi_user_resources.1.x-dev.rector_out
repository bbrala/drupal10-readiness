modules/contrib/jsonapi_user_resources/src/EventSubscriber/PasswordResetSubscriber.php
modules/contrib/jsonapi_user_resources/src/EventSubscriber/UserRegistrationSubscriber.php
modules/contrib/jsonapi_user_resources/src/Events/PasswordResetEvent.php
modules/contrib/jsonapi_user_resources/src/Events/RegistrationEvent.php
modules/contrib/jsonapi_user_resources/src/Events/UserResourcesEvents.php
modules/contrib/jsonapi_user_resources/src/Plugin/jsonapi_hypermedia/LinkProvider/AuthenticatedAsLinkProvider.php
modules/contrib/jsonapi_user_resources/src/Resource/PasswordReset.php
modules/contrib/jsonapi_user_resources/src/Resource/PasswordUpdate.php
modules/contrib/jsonapi_user_resources/src/Resource/Registration.php
modules/contrib/jsonapi_user_resources/src/Routing/Routes.php
modules/contrib/jsonapi_user_resources/tests/modules/jsonapi_user_resources_test/src/EventSubscriber/RegistrationSubscriber.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/HypermediaIntegrationTest.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordResetTest.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordUpdateTest.php
modules/contrib/jsonapi_user_resources/tests/src/Functional/RegistrationTest.php

12 files with changes
=====================

1) modules/contrib/jsonapi_user_resources/tests/src/Functional/RegistrationTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordUpdateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_user_resources\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $sut;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
@@ @@
       'data' => [
         'type' => 'user--user',
         'attributes' => [
-          'pass' => user_password(),
+          'pass' => \Drupal::service('password_generator')->generate(),
           'hash' => user_pass_rehash($this->sut, $timestamp),
           'timestamp' => $timestamp,
         ],
@@ @@
     $this->assertEquals(200, $response->getStatusCode(), $body);
     $this->sut = $this->reloadEntity($this->sut);
     $this->assertTrue($this->sut->isActive());
-    $this->assertNotEqual($this->sut->getPassword(), $previous_password);
+    $this->assertNotEquals($this->sut->getPassword(), $previous_password);
   }

   /**
@@ @@
   /**
    * Reloads the entity after clearing the static cache.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to reload.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The reloaded entity.
    */
   protected function reloadEntity(EntityInterface $entity) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage($entity->getEntityTypeId());
     $storage->resetCache([$entity->id()]);
     return $storage->load($entity->id());
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * UserPasswordRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jsonapi_user_resources/tests/src/Functional/PasswordResetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_user_resources\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\Core\Url;
@@ @@
   /**
    * The test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $sut;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('jsonapi.settings')->set('read_only', FALSE)->save(TRUE);
     $this->sut = $this->createUser([], 'sut');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/jsonapi_user_resources/tests/modules/jsonapi_user_resources_test/src/EventSubscriber/RegistrationSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * React on user registration.
    *
-   * @param \Drupal\jsonapi_user_resources\Events\RegistrationEvent $event
+   * @param RegistrationEvent $event
    *   The event.
    */
   public function onUserRegistration(RegistrationEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/jsonapi_user_resources/src/Routing/Routes.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * Constructs a new Routes object.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
    */
   public function __construct(ResourceTypeRepositoryInterface $resource_type_repository) {
@@ @@
   /**
    * Gets the user registration route.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The route.
    */
   protected function getUserRegistrationRoute() {
@@ @@
   /**
    * Gets the password reset route.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The route.
    */
   public function getPasswordResetRoute() {
@@ @@
   /**
    * Gets the password update route.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The route.
    */
   public function getPasswordUpdateRoute() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/jsonapi_user_resources/src/Resource/Registration.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\Resource;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * User settings config instance.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $userSettings;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;

@@ @@
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   private $entityRepository;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * Constructs a new Registration object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $account, EntityRepositoryInterface $entity_repository, EventDispatcherInterface $event_dispatcher) {
@@ @@

     $document = $this->getDocumentFromRequest($request);
     $event = new RegistrationEvent($created_entity, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_VALIDATE);
   }

   /**
    * Handles the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The document.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if the entity could not be saved.
    */
   public function process(Request $request, JsonApiDocumentTopLevel $document): ResourceResponse {
@@ @@
     );
     assert($account instanceof UserInterface);
     $event = new RegistrationEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::REGISTRATION_COMPLETE, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::REGISTRATION_COMPLETE);
     return $response;
   }

@@ @@
   /**
    * Ensure the account can be registered in this request.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to register.
    */
   protected function ensureAccountCanRegister(UserInterface $account = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jsonapi_user_resources/src/Resource/PasswordUpdate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\Resource;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * User settings config instance.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $userSettings;

@@ @@
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new PasswordUpdate object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TimeInterface $time) {
@@ @@
   /**
    * Handles the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The document.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The account.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if the entity could not be saved.
    */
   public function process(Request $request, JsonApiDocumentTopLevel $document, UserInterface $user): ResourceResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/jsonapi_user_resources/src/Resource/PasswordReset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\Resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * Constructs a new PasswordReset object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(LoggerInterface $logger, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Handles the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The document.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity could not be saved.
    */
   public function process(Request $request, JsonApiDocumentTopLevel $document): ResourceResponse {
@@ @@
     $this->logger->notice('A password reset has been requested for %name (%email).', ['%name' => $account->getAccountName(), '%email' => $account->getEmail()]);

     $event = new PasswordResetEvent($account, $document);
-    $this->eventDispatcher->dispatch(UserResourcesEvents::PASSWORD_RESET, $event);
+    $this->eventDispatcher->dispatch($event, UserResourcesEvents::PASSWORD_RESET);
     return new ResourceResponse(new JsonApiDocumentTopLevel(
       new OmittedData([]),
       new NullIncludedData(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/jsonapi_user_resources/src/Events/RegistrationEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the event for reacting to user account registrations.
@@ @@
   /**
    * The user account being registered.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $user;

@@ @@
   /**
    * The JSON:API request document.
    *
-   * @var \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @var JsonApiDocumentTopLevel
    */
   private $document;

@@ @@
   /**
    * Constructs a new RegistrationEvent object.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The JSON:API request document.
    */
   public function __construct(UserInterface $user, JsonApiDocumentTopLevel $document) {
@@ @@
   /**
    * Get the user account.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user account.
    */
   public function getUser() {
@@ @@
   /**
    * Get the JSON:API request document.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @return JsonApiDocumentTopLevel
    *   The document.
    */
   public function getDocument() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/jsonapi_user_resources/src/Events/PasswordResetEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the event for reacting to user password resets.
@@ @@
   /**
    * The user account being registered.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $user;

@@ @@
   /**
    * The JSON:API request document.
    *
-   * @var \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @var JsonApiDocumentTopLevel
    */
   private $document;

@@ @@
   /**
    * Constructs a new RegistrationEvent object.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel $document
+   * @param JsonApiDocumentTopLevel $document
    *   The JSON:API request document.
    */
   public function __construct(UserInterface $user, JsonApiDocumentTopLevel $document) {
@@ @@
   /**
    * Get the user account.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user account.
    */
   public function getUser() {
@@ @@
   /**
    * Get the JSON:API request document.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\JsonApiDocumentTopLevel
+   * @return JsonApiDocumentTopLevel
    *   The document.
    */
   public function getDocument() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/jsonapi_user_resources/src/EventSubscriber/UserRegistrationSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_user_resources\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\jsonapi_user_resources\Events\RegistrationEvent;
 use Drupal\jsonapi_user_resources\Events\UserResourcesEvents;
@@ @@
   /**
    * User settings config instance.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $userSettings;

@@ @@
   /**
    * UserRegistrationSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Sends email notifications when a user has registered.
    *
-   * @param \Drupal\jsonapi_user_resources\Events\RegistrationEvent $event
+   * @param RegistrationEvent $event
    *   The registration event.
    */
   public function sendEmailNotifications(RegistrationEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/jsonapi_user_resources/src/EventSubscriber/PasswordResetSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Handles the dispatched password reset event.
    *
-   * @param \Drupal\jsonapi_user_resources\Events\PasswordResetEvent $event
+   * @param PasswordResetEvent $event
    *   The event.
    */
   public function onPasswordReset(PasswordResetEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/jsonapi_user_resources/src/Plugin/jsonapi_hypermedia/Lin
         kProvider/AuthenticatedAsLinkProvider.php" file, due to:               
         "Analyze error: "Class Drupal\jsonapi_hypermedia\Plugin\LinkProviderBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 2 nodes were removed                                                 

