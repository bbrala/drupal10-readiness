modules/contrib/pathauto/pathauto.api.php
modules/contrib/pathauto/pathauto.install
modules/contrib/pathauto/pathauto.module
modules/contrib/pathauto/pathauto.tokens.inc
modules/contrib/pathauto/src/AliasCleaner.php
modules/contrib/pathauto/src/AliasCleanerInterface.php
modules/contrib/pathauto/src/AliasStorageHelper.php
modules/contrib/pathauto/src/AliasStorageHelperInterface.php
modules/contrib/pathauto/src/AliasTypeBatchUpdateInterface.php
modules/contrib/pathauto/src/AliasTypeInterface.php
modules/contrib/pathauto/src/AliasTypeManager.php
modules/contrib/pathauto/src/AliasUniquifier.php
modules/contrib/pathauto/src/AliasUniquifierInterface.php
modules/contrib/pathauto/src/Annotation/AliasType.php
modules/contrib/pathauto/src/Commands/PathautoCommands.php
modules/contrib/pathauto/src/Entity/PathautoPattern.php
modules/contrib/pathauto/src/EventSubscriber/PathautoSettingsCacheTag.php
modules/contrib/pathauto/src/Form/PathautoAdminDelete.php
modules/contrib/pathauto/src/Form/PathautoBulkUpdateForm.php
modules/contrib/pathauto/src/Form/PathautoSettingsForm.php
modules/contrib/pathauto/src/Form/PatternDisableForm.php
modules/contrib/pathauto/src/Form/PatternDuplicateForm.php
modules/contrib/pathauto/src/Form/PatternEditForm.php
modules/contrib/pathauto/src/Form/PatternEnableForm.php
modules/contrib/pathauto/src/MessengerInterface.php
modules/contrib/pathauto/src/PathautoFieldItemList.php
modules/contrib/pathauto/src/PathautoGenerator.php
modules/contrib/pathauto/src/PathautoGeneratorInterface.php
modules/contrib/pathauto/src/PathautoItem.php
modules/contrib/pathauto/src/PathautoPatternInterface.php
modules/contrib/pathauto/src/PathautoPatternListBuilder.php
modules/contrib/pathauto/src/PathautoServiceProvider.php
modules/contrib/pathauto/src/PathautoState.php
modules/contrib/pathauto/src/PathautoWidget.php
modules/contrib/pathauto/src/Plugin/Action/UpdateAction.php
modules/contrib/pathauto/src/Plugin/Deriver/EntityAliasTypeDeriver.php
modules/contrib/pathauto/src/Plugin/migrate/source/PathautoPattern.php
modules/contrib/pathauto/src/Plugin/pathauto/AliasType/Broken.php
modules/contrib/pathauto/src/Plugin/pathauto/AliasType/EntityAliasTypeBase.php
modules/contrib/pathauto/src/Plugin/pathauto/AliasType/ForumAliasType.php
modules/contrib/pathauto/src/VerboseMessenger.php
modules/contrib/pathauto/tests/modules/pathauto_custom_punctuation_test/pathauto_custom_punctuation_test.module
modules/contrib/pathauto/tests/modules/pathauto_string_id_test/src/Entity/PathautoStringIdTest.php
modules/contrib/pathauto/tests/src/Functional/PathautoBulkUpdateTest.php
modules/contrib/pathauto/tests/src/Functional/PathautoEnablingEntityTypesTest.php
modules/contrib/pathauto/tests/src/Functional/PathautoMassDeleteTest.php
modules/contrib/pathauto/tests/src/Functional/PathautoNodeWebTest.php
modules/contrib/pathauto/tests/src/Functional/PathautoSettingsFormWebTest.php
modules/contrib/pathauto/tests/src/Functional/PathautoTaxonomyWebTest.php
modules/contrib/pathauto/tests/src/Functional/PathautoTestHelperTrait.php
modules/contrib/pathauto/tests/src/Functional/PathautoUserWebTest.php
modules/contrib/pathauto/tests/src/FunctionalJavascript/PathautoLocaleTest.php
modules/contrib/pathauto/tests/src/FunctionalJavascript/PathautoUiTest.php
modules/contrib/pathauto/tests/src/Kernel/PathautoEntityWithStringIdTest.php
modules/contrib/pathauto/tests/src/Kernel/PathautoKernelTest.php
modules/contrib/pathauto/tests/src/Kernel/PathautoTokenTest.php
modules/contrib/pathauto/tests/src/Unit/VerboseMessengerTest.php

37 files with changes
=====================

1) modules/contrib/pathauto/tests/src/Unit/VerboseMessengerTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger under test.
    *
-   * @var \Drupal\pathauto\VerboseMessenger
+   * @var VerboseMessenger
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/pathauto/tests/src/Kernel/PathautoKernelTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Kernel;

+use Drupal\pathauto\PathautoPatternInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Language\Language;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   protected $currentUser;

   /**
-   * @var \Drupal\pathauto\PathautoPatternInterface
+   * @var PathautoPatternInterface
    */
   protected $nodePattern;

   /**
-   * @var \Drupal\pathauto\PathautoPatternInterface
+   * @var PathautoPatternInterface
    */
   protected $userPattern;

@@ @@
    * @param array $settings
    *   The array of values for the node.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   The created node.
    */
   protected function drupalCreateNode(array $settings = [] ){
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/pathauto/tests/src/Kernel/PathautoEntityWithStringIdTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Kernel;

+use Drupal\pathauto\AliasTypeBatchUpdateInterface;
+use Drupal\pathauto\AliasTypeManager;
 use Drupal\Component\Serialization\PhpSerialize;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
   /**
    * The alias type plugin instance.
    *
-   * @var \Drupal\pathauto\AliasTypeBatchUpdateInterface
+   * @var AliasTypeBatchUpdateInterface
    */
   protected $aliasType;

@@ @@
     $this->installEntitySchema('path_alias');
     $this->installEntitySchema('pathauto_string_id_test');
     $this->createPattern('pathauto_string_id_test', '/[pathauto_string_id_test:name]');
-    /** @var \Drupal\pathauto\AliasTypeManager $alias_type_manager */
+    /** @var AliasTypeManager $alias_type_manager */
     $alias_type_manager = $this->container->get('plugin.manager.alias_type');
     $this->aliasType = $alias_type_manager->createInstance('canonical_entities:pathauto_string_id_test');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/pathauto/tests/src/FunctionalJavascript/PathautoUiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\pathauto\Entity\PathautoPattern;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/pathauto/tests/src/Functional/PathautoUserWebTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\views\Views;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/pathauto/tests/src/Functional/PathautoTestHelperTrait.php:28

    ---------- begin diff ----------
@@ @@
    * @param int $weight
    *   (optional) The pattern weight.
    *
-   * @return \Drupal\pathauto\PathautoPatternInterface
+   * @return PathautoPatternInterface
    *   The created pattern.
    */
   protected function createPattern($entity_type_id, $pattern, $weight = 10) {
@@ @@
   /**
    * Add a bundle condition to a pathauto pattern.
    *
-   * @param \Drupal\pathauto\PathautoPatternInterface $pattern
+   * @param PathautoPatternInterface $pattern
    *   The pattern.
    * @param string $entity_type
    *   The entity type ID.
@@ @@
   /**
    * @param array $values
    *
-   * @return \Drupal\taxonomy\VocabularyInterface
+   * @return VocabularyInterface
    */
   public function addVocabulary(array $values = []) {
     $name = mb_strtolower($this->randomMachineName(5));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/pathauto/tests/src/Functional/PathautoTaxonomyWebTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/pathauto/tests/src/Functional/PathautoSettingsFormWebTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Functional;

+use Drupal\user\UserInterface;
 use Drupal\pathauto\PathautoGeneratorInterface;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/pathauto/tests/src/Functional/PathautoNodeWebTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Functional;

+use Drupal\user\UserInterface;
 use Drupal\pathauto\Entity\PathautoPattern;
 use Drupal\node\Entity\Node;
 use Drupal\pathauto\PathautoState;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/pathauto/tests/src/Functional/PathautoMassDeleteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\pathauto\AliasStorageHelperInterface;
 use Drupal\pathauto\PathautoState;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Component\Render\FormattableMarkup;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test nodes.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodes;

@@ @@
   /**
    * The test accounts.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $accounts;

@@ @@
   /**
    * The test terms.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $terms;

@@ @@
    * Tests the deletion of all the aliases.
    */
   public function testDeleteAll() {
-    /** @var \Drupal\pathauto\AliasStorageHelperInterface $alias_storage_helper */
+    /** @var AliasStorageHelperInterface $alias_storage_helper */
     $alias_storage_helper = \Drupal::service('pathauto.alias_storage_helper');

     // 1. Test that deleting all the aliases, of any type, works.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/pathauto/tests/src/Functional/PathautoEnablingEntityTypesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\comment\Tests\CommentTestTrait;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/pathauto/tests/src/Functional/PathautoBulkUpdateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pathauto\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\pathauto\PathautoPatternInterface;
 use Drupal\pathauto\PathautoGeneratorInterface;
 use Drupal\pathauto\PathautoState;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The created nodes.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodes;

@@ @@
   /**
    * The created patterns.
    *
-   * @var \Drupal\pathauto\PathautoPatternInterface
+   * @var PathautoPatternInterface
    */
   protected $patterns;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/pathauto/src/VerboseMessenger.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Creates a verbose messenger.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/pathauto/src/Plugin/pathauto/AliasType/ForumAliasType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto\Plugin\pathauto\AliasType;

+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+   * @param KeyValueFactoryInterface $key_value
    *   The key/value manager service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, KeyValueFactoryInterface $key_value, Connection $database, ConfigFactoryInterface $config_factory) {
@@ @@
    */
   public function applies($object) {
     if (parent::applies($object)) {
-      /** @var \Drupal\taxonomy\TermInterface $object */
+      /** @var TermInterface $object */
       $vid = $this->configFactory->get('forum.settings')->get('vocabulary');
       return $object->bundle() == $vid;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/pathauto/src/Plugin/pathauto/AliasType/EntityAliasTypeBase.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The key/value manager service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValue;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+   * @param KeyValueFactoryInterface $key_value
    *   The key/value manager service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, KeyValueFactoryInterface $key_value, Connection $database) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/pathauto/src/Plugin/migrate/source/PathautoPattern.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/pathauto/src/Plugin/Deriver/EntityAliasTypeDeriver.php:20

    ---------- begin diff ----------
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

   /**
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $tokenEntityMapper;

@@ @@
   /**
    * Constructs new EntityAliasTypeDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    * @param \Drupal\Token\TokenEntityMapperInterface $token_entity_mapper
    *   The token entity mapper.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/pathauto/src/PathautoState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto;

+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\TypedData\TypedData;

@@ @@
   protected $value;

   /**
-   * @var \Drupal\Core\Field\FieldItemInterface
+   * @var FieldItemInterface
    */
   protected $parent;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/pathauto/src/PathautoPatternListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $operations = parent::getDefaultOperations($entity);

     if (!$entity->hasLinkTemplate('duplicate-form')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/pathauto/src/PathautoPatternInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto;

+use Drupal\Core\Plugin\Context\ContextInterface;
+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   public function getType();

   /**
-   * @return \Drupal\pathauto\AliasTypeInterface
+   * @return AliasTypeInterface
    */
   public function getAliasType();

@@ @@
   /**
    * Returns the contexts of this pattern.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   public function getContexts();

@@ @@
   /**
    * Gets the selection condition collection.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    */
   public function getSelectionConditions();

@@ @@
    * @param string $condition_id
    *   The id of the condition.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    */
   public function getSelectionCondition($condition_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/pathauto/src/PathautoGeneratorInterface.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * Load an alias pattern entity by entity, bundle, and language.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
-   * @return \Drupal\pathauto\PathautoPatternInterface|null
+   * @return PathautoPatternInterface|null
    */
   public function getPatternByEntity(EntityInterface $entity);

@@ @@
   /**
    * Apply patterns to create an alias.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $op
    *   Operation being performed on the content being aliased
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/pathauto/src/PathautoGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto;

+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The alias cleaner.
    *
-   * @var \Drupal\pathauto\AliasCleanerInterface
+   * @var AliasCleanerInterface
    */
   protected $aliasCleaner;

@@ @@
   /**
    * The alias storage helper.
    *
-   * @var \Drupal\pathauto\AliasStorageHelperInterface
+   * @var AliasStorageHelperInterface
    */
   protected $aliasStorageHelper;

@@ @@
   /**
    * The alias uniquifier.
    *
-   * @var \Drupal\pathauto\AliasUniquifierInterface
+   * @var AliasUniquifierInterface
    */
   protected $aliasUniquifier;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\pathauto\MessengerInterface
+   * @var MessengerInterface
    */
   protected $pathautoMessenger;

@@ @@
   /**
    * The token entity mapper.
    *
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $tokenEntityMapper;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Manages pathauto alias type plugins.
    *
-   * @var \Drupal\pathauto\AliasTypeManager
+   * @var AliasTypeManager
    */
   protected $aliasTypeManager;

@@ @@
   /**
    * Creates a new Pathauto manager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token utility.
-   * @param \Drupal\pathauto\AliasCleanerInterface $alias_cleaner
+   * @param AliasCleanerInterface $alias_cleaner
    *   The alias cleaner.
-   * @param \Drupal\pathauto\AliasStorageHelperInterface $alias_storage_helper
+   * @param AliasStorageHelperInterface $alias_storage_helper
    *   The alias storage helper.
    * @param AliasUniquifierInterface $alias_uniquifier
    *   The alias uniquifier.
-   * @param \Drupal\pathauto\MessengerInterface $pathauto_messenger
+   * @param MessengerInterface $pathauto_messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\token\TokenEntityMapperInterface $token_entity_mapper
+   * @param TokenEntityMapperInterface $token_entity_mapper
    *   The token entity mapper.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\pathauto\AliasTypeManager $alias_type_manager
+   * @param AliasTypeManager $alias_type_manager
    *   Manages pathauto alias type plugins.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, Token $token, AliasCleanerInterface $alias_cleaner, AliasStorageHelperInterface $alias_storage_helper, AliasUniquifierInterface $alias_uniquifier, MessengerInterface $pathauto_messenger, TranslationInterface $string_translation, TokenEntityMapperInterface $token_entity_mapper, EntityTypeManagerInterface $entity_type_manager, AliasTypeManager $alias_type_manager = NULL) {
@@ @@
    * @param string $entity_type_id
    *   An entity type ID.
    *
-   * @return \Drupal\pathauto\PathautoPatternInterface[]
+   * @return PathautoPatternInterface[]
    *   A list of patterns, sorted by weight.
    */
   protected function getPatternByEntityType($entity_type_id) {
@@ @@
    * @param int $tid
    *   Term ID to retrieve parents for.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   An array of term objects that are the children of the term $tid.
    */
   protected function loadTermChildren($tid) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/pathauto/src/Form/PatternEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto\Form;

+use Drupal\pathauto\PathautoPatternInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The alias type manager.
    *
-   * @var \Drupal\pathauto\AliasTypeManager
+   * @var AliasTypeManager
    */
   protected $manager;

   /**
-   * @var \Drupal\pathauto\PathautoPatternInterface
+   * @var PathautoPatternInterface
    */
   protected $entity;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * PatternEditForm constructor.
    *
-   * @param \Drupal\pathauto\AliasTypeManager $manager
+   * @param AliasTypeManager $manager
    *   The alias type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(AliasTypeManager $manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\pathauto\PathautoPatternInterface $entity */
+    /** @var PathautoPatternInterface $entity */
     $entity = parent::buildEntity($form, $form_state);

     // Will only be used for new patterns.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/pathauto/src/Form/PathautoSettingsForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The alias cleaner.
    *
-   * @var \Drupal\pathauto\AliasCleanerInterface
+   * @var AliasCleanerInterface
    */
   protected $aliasCleaner;

@@ @@
   /**
    * Provides helper methods for accessing alias storage.
    *
-   * @var \Drupal\pathauto\AliasStorageHelperInterface
+   * @var AliasStorageHelperInterface
    */
   protected $aliasStorageHelper;

@@ @@
   /**
    * Manages pathauto alias type plugins.
    *
-   * @var \Drupal\pathauto\AliasTypeManager
+   * @var AliasTypeManager
    */
   protected $aliasTypeManager;

@@ @@
   /**
    * Constructs a PathautoSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Defines the configuration object factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Manages entity type plugin definitions.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Manages the discovery of entity fields.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Manage drupal modules.
-   * @param \Drupal\pathauto\AliasCleanerInterface $pathauto_alias_cleaner
+   * @param AliasCleanerInterface $pathauto_alias_cleaner
    *   Provides an alias cleaner.
-   * @param \Drupal\pathauto\AliasStorageHelperInterface $pathauto_alias_storage_helper
+   * @param AliasStorageHelperInterface $pathauto_alias_storage_helper
    *   Provides helper methods for accessing alias storage.
-   * @param \Drupal\pathauto\AliasTypeManager $alias_type_manager
+   * @param AliasTypeManager $alias_type_manager
    *   Manages pathauto alias type plugins.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler, AliasCleanerInterface $pathauto_alias_cleaner, AliasStorageHelperInterface $pathauto_alias_storage_helper, AliasTypeManager $alias_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/pathauto/src/Form/PathautoBulkUpdateForm.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The alias type manager.
    *
-   * @var \Drupal\pathauto\AliasTypeManager
+   * @var AliasTypeManager
    */
   protected $aliasTypeManager;

@@ @@
   /**
    * Constructs a PathautoBulkUpdateForm object.
    *
-   * @param \Drupal\pathauto\AliasTypeManager $alias_type_manager
+   * @param AliasTypeManager $alias_type_manager
    *   The alias type manager.
    */
   public function __construct(AliasTypeManager $alias_type_manager) {
@@ @@
    * Required to load our include the proper batch file.
    */
   public static function batchProcess($id, $action, &$context) {
-    /** @var \Drupal\pathauto\AliasTypeBatchUpdateInterface $alias_type */
+    /** @var AliasTypeBatchUpdateInterface $alias_type */
     $alias_type = \Drupal::service('plugin.manager.alias_type')->createInstance($id);
     $alias_type->batchUpdate($action, $context);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/pathauto/src/Form/PathautoAdminDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto\Form;

+use Drupal\pathauto\AliasTypeInterface;
+use Drupal\pathauto\AliasTypeBatchUpdateInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pathauto\AliasTypeManager;
@@ @@
   /**
    * Provides helper methods for accessing alias storage.
    *
-   * @var \Drupal\pathauto\AliasStorageHelperInterface
+   * @var AliasStorageHelperInterface
    */
   protected $aliasStorageHelper;

@@ @@
   /**
    * The alias type manager.
    *
-   * @var \Drupal\pathauto\AliasTypeManager
+   * @var AliasTypeManager
    */
   protected $aliasTypeManager;

@@ @@
   /**
    * Constructs a PathautoAdminDelete object.
    *
-   * @param \Drupal\pathauto\AliasStorageHelperInterface $alias_storage_helper
+   * @param AliasStorageHelperInterface $alias_storage_helper
    *   Provides helper methods for accessing alias storage.
-   * @param \Drupal\pathauto\AliasTypeManager $alias_type_manager
+   * @param AliasTypeManager $alias_type_manager
    *   The alias type manager.
    */
   public function __construct(AliasStorageHelperInterface $alias_storage_helper, AliasTypeManager $alias_type_manager) {
@@ @@
     $definitions = $this->aliasTypeManager->getVisibleDefinitions();

     foreach ($definitions as $id => $definition) {
-      /** @var \Drupal\pathauto\AliasTypeInterface $alias_type */
+      /** @var AliasTypeInterface $alias_type */
       $alias_type = $this->aliasTypeManager->createInstance($id);
       $count = $this->aliasStorageHelper->countBySourcePrefix($alias_type->getSourcePrefix());
       $form['delete']['plugins'][$id] = [
@@ @@
    * Common batch processing callback for all operations.
    */
   public static function batchProcess($id, &$context) {
-    /** @var \Drupal\pathauto\AliasTypeBatchUpdateInterface $alias_type */
+    /** @var AliasTypeBatchUpdateInterface $alias_type */
     $alias_type = \Drupal::service('plugin.manager.alias_type')->createInstance($id);
     $alias_type->batchDelete($context);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/pathauto/src/EventSubscriber/PathautoSettingsCacheTag.php:13

    ---------- begin diff ----------
@@ @@
 class PathautoSettingsCacheTag implements EventSubscriberInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The alias type manager.
    *
-   * @var \Drupal\pathauto\AliasTypeManager
+   * @var AliasTypeManager
    */
   protected $aliasTypeManager;

@@ @@
   /**
    * Constructs a PathautoSettingsCacheTag object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\pathauto\AliasTypeManager $alias_type_manager
+   * @param AliasTypeManager $alias_type_manager
    *   The alias type manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, AliasTypeManager $alias_type_manager) {
@@ @@
   /**
    * Invalidate the 'rendered' cache tag whenever the settings are modified.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/pathauto/src/Entity/PathautoPattern.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto\Entity;

+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Core\Plugin\Context\ContextHandler;
+use Drupal\Core\TypedData\ComplexDataInterface;
+use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   protected $type;

   /**
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $aliasTypeCollection;

@@ @@
   /**
    * The plugin collection that holds the selection criteria condition plugins.
    *
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $selectionConditionCollection;

@@ @@
       $keys = array_keys($definitions);
       // Set the context object on our Alias plugin before retrieving contexts.
       $this->getAliasType()->setContextValue($keys[0], $object);
-      /** @var \Drupal\Core\Plugin\Context\ContextInterface[] $base_contexts */
+      /** @var ContextInterface[] $base_contexts */
       $contexts = $this->getContexts();
-      /** @var \Drupal\Core\Plugin\Context\ContextHandler $context_handler */
+      /** @var ContextHandler $context_handler */
       $context_handler = \Drupal::service('context.handler');
       $conditions = $this->getSelectionConditions();
       foreach ($conditions as $condition) {
@@ @@
    *
    * @param string $token
    *   A ":" delimited set of tokens representing
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   The array of available contexts.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface
+   * @return ContextInterface
    *   The requested token as a full Context object.
    *
    * @throws \Exception
@@ @@
    *
    * @param string $property_path
    *   The name of the property.
-   * @param \Drupal\Core\Plugin\Context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context from which we will extract values if available.
    *
-   * @return \Drupal\Core\Plugin\Context\Context
+   * @return Context
    *   A context object that represents the definition & value of the property.
    *
    * @throws \Exception
@@ @@
     $value = NULL;
     $data_definition = NULL;
     if ($context->hasContextValue()) {
-      /** @var \Drupal\Core\TypedData\ComplexDataInterface $data */
+      /** @var ComplexDataInterface $data */
       $data = $context->getContextData();
       foreach (explode(':', $property_path) as $name) {

@@ @@
       $data_definition = $data instanceof DataReferenceInterface ? $data->getDataDefinition()->getTargetDefinition() : $data->getDataDefinition();
     }
     else {
-      /** @var \Drupal\Core\TypedData\ComplexDataDefinitionInterface $data_definition */
+      /** @var ComplexDataDefinitionInterface $data_definition */
       $data_definition = $context->getContextDefinition()->getDataDefinition();
       foreach (explode(':', $property_path) as $name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/pathauto/src/Commands/PathautoCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto\Commands;

+use Drupal\pathauto\AliasTypeInterface;
+use Drush\Exceptions\UserAbortException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Consolidation\AnnotatedCommand\CommandData;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\pathauto\AliasStorageHelperInterface;
@@ @@
   /**
    * The configuration object factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The alias type manager.
    *
-   * @var \Drupal\pathauto\AliasTypeManager
+   * @var AliasTypeManager
    */
   protected $aliasTypeManager;

@@ @@
   /**
    * The alias storage helper.
    *
-   * @var \Drupal\pathauto\AliasStorageHelperInterface
+   * @var AliasStorageHelperInterface
    */
   protected $aliasStorageHelper;

@@ @@
   /**
    * Constructs a new PathautoCommands object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration object factory.
-   * @param \Drupal\pathauto\AliasTypeManager $aliasTypeManager
+   * @param AliasTypeManager $aliasTypeManager
    *   The alias type manager.
-   * @param \Drupal\pathauto\AliasStorageHelperInterface $aliasStorageHelper
+   * @param AliasStorageHelperInterface $aliasStorageHelper
    *   The alias storage helper.
    */
   public function __construct(ConfigFactoryInterface $configFactory, AliasTypeManager $aliasTypeManager, AliasStorageHelperInterface $aliasStorageHelper) {
@@ @@
     }
     else {
       foreach ($types as $type) {
-        /** @var \Drupal\pathauto\AliasTypeInterface $alias_type */
+        /** @var AliasTypeInterface $alias_type */
         $alias_type = $this->aliasTypeManager->createInstance($type);
         $this->aliasStorageHelper->deleteBySourcePrefix($alias_type->getSourcePrefix());
         $this->logger()->success(dt('All of your %label path aliases have been deleted.', [
@@ @@
   /**
    * @hook interact pathauto:aliases-generate
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    *   Thrown when the user cancels the operation during CLI interaction.
    */
   public function interactGenerateAliases(Input $input, Output $output) {
@@ @@
    *
    * @throws \InvalidArgumentException
    *   Thrown when one of the passed arguments is invalid
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown when an alias type can not be instantiated.
    */
   public function validateAliaseTypes(CommandData $commandData) {
@@ @@
    * @return array
    *   An indexed array of alias types.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown when an alias type can not be instantiated.
    */
   public function getAliasTypes() {
@@ @@
     $types = [];

     foreach ($this->aliasTypeManager->getVisibleDefinitions() as $id => $definition) {
-      /** @var \Drupal\pathauto\AliasTypeInterface $aliasType */
+      /** @var AliasTypeInterface $aliasType */
       $aliasType = $this->aliasTypeManager->createInstance($id);
       if ($aliasType instanceof AliasTypeBatchUpdateInterface) {
         $types[] = $aliasType->getPluginId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/pathauto/src/Annotation/AliasType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the action plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


31) modules/contrib/pathauto/src/AliasUniquifier.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The alias storage helper.
    *
-   * @var \Drupal\pathauto\AliasStorageHelperInterface
+   * @var AliasStorageHelperInterface
    */
   protected $aliasStorageHelper;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The route provider service.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * Creates a new AliasUniquifier.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\pathauto\AliasStorageHelperInterface $alias_storage_helper
+   * @param AliasStorageHelperInterface $alias_storage_helper
    *   The alias storage helper.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider service.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AliasStorageHelperInterface $alias_storage_helper, ModuleHandlerInterface $module_handler, RouteProviderInterface $route_provider, AliasManagerInterface $alias_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/pathauto/src/AliasTypeManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/pathauto/src/AliasStorageHelperInterface.php:80

    ---------- begin diff ----------
@@ @@
    * This function also checks to see if the default entity URI is different
    * from the current entity URI and will delete any of the default aliases.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity object.
    * @param string $default_uri
    *   The optional default uri path for the entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/pathauto/src/AliasStorageHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pathauto;

+use Drupal\path_alias\PathAliasInterface;
+use Drupal\Core\Entity\Sql\TableMappingInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The alias repository.
    *
-   * @var \Drupal\path_alias\AliasRepositoryInterface
+   * @var AliasRepositoryInterface
    */
   protected $aliasRepository;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\pathauto\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\path_alias\AliasRepositoryInterface $alias_repository
+   * @param AliasRepositoryInterface $alias_repository
    *   The alias repository.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manger.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AliasRepositoryInterface $alias_repository, Connection $database, MessengerInterface $messenger, TranslationInterface $string_translation, EntityTypeManagerInterface $entity_type_manager = NULL) {
@@ @@
     $alias = $path['alias'];
     $langcode = $path['language'];
     if ($existing_alias) {
-      /** @var \Drupal\path_alias\PathAliasInterface $existing_alias */
+      /** @var PathAliasInterface $existing_alias */
       $existing_alias = $this->entityTypeManager->getStorage('path_alias')->load($existing_alias['pid']);
     }

@@ @@
    * {@inheritdoc}
    */
   public function deleteAll() {
-    /** @var \Drupal\Core\Entity\Sql\TableMappingInterface $table_mapping */
+    /** @var TableMappingInterface $table_mapping */
     $table_mapping = $this->entityTypeManager->getStorage('path_alias')->getTableMapping();
     foreach ($table_mapping->getTableNames() as $table_name) {
       $this->database->truncate($table_name)->execute();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


35) modules/contrib/pathauto/src/AliasCleaner.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * Transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Creates a new AliasCleaner.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\pathauto\AliasStorageHelperInterface $alias_storage_helper
+   * @param AliasStorageHelperInterface $alias_storage_helper
    *   The alias storage helper.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AliasStorageHelperInterface $alias_storage_helper, LanguageManagerInterface $language_manager, CacheBackendInterface $cache_backend, TransliterationInterface $transliteration, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/pathauto/pathauto.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 /**
  * @file
  * Install, update, and uninstall functions for Pathauto.
@@ @@
   \Drupal::service('module_installer')->install(['ctools']);

   $messages = [];
-  /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info */
+  /** @var EntityTypeBundleInfoInterface $entity_bundle_info */
   $entity_bundle_info = \Drupal::service('entity_type.bundle.info');
   $entity_type_manager = \Drupal::entityTypeManager();
   $language_manager = \Drupal::languageManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


37) modules/contrib/pathauto/pathauto.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\pathauto\PathautoPatternInterface;
 /**
  * @file
  * Documentation for pathauto API.
@@ @@
  * This hook will only be called if a default pattern is configured (on
  * admin/config/search/path/patterns).
  *
- * @param \Drupal\pathauto\PathautoPatternInterface $pattern
+ * @param PathautoPatternInterface $pattern
  *   The Pathauto pattern to be used.
  * @param array $context
  *   An associative array of additional options, with the following elements:
@@ @@
  *   - 'language': A string of the language code for the alias (e.g. 'en').
  *     This can be altered by reference.
  */
-function hook_pathauto_pattern_alter(\Drupal\pathauto\PathautoPatternInterface $pattern, array $context) {
+function hook_pathauto_pattern_alter(PathautoPatternInterface $pattern, array $context) {
   // Switch out any [node:created:*] tokens with [node:updated:*] on update.
   if ($context['module'] == 'node' && ($context['op'] == 'update')) {
     $pattern->setPattern(preg_replace('/\[node:created(\:[^]]*)?\]/', '[node:updated$1]', $pattern->getPattern()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 37 files have been changed by Rector                                      

