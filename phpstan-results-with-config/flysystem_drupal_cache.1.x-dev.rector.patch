diff --git a/src/DrupalCacheAdapter.php b/src/DrupalCacheAdapter.php
index e45649e..87bead2 100644
--- a/src/DrupalCacheAdapter.php
+++ b/src/DrupalCacheAdapter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem_drupal_cache;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
@@ -10,7 +11,6 @@ use League\Flysystem\Adapter\Polyfill\StreamedTrait;
 use League\Flysystem\AdapterInterface;
 use League\Flysystem\Config;
 use League\Flysystem\Util;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Class DrupalCacheAdapter
@@ -24,21 +24,21 @@ class DrupalCacheAdapter extends AbstractAdapter {
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * Cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * Mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
@@ -49,16 +49,16 @@ class DrupalCacheAdapter extends AbstractAdapter {
   protected $tags;
 
   /**
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   Cache tags invalidator.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param MimeTypesInterface $mimeTypeGuesser
    *   Mime type guesser.
    * @param array $tags
    *   Default cache tags.
    */
-  public function __construct(CacheBackendInterface $cache, CacheTagsInvalidatorInterface $cacheTagsInvalidator, MimeTypeGuesserInterface $mimeTypeGuesser, array $tags) {
+  public function __construct(CacheBackendInterface $cache, CacheTagsInvalidatorInterface $cacheTagsInvalidator, MimeTypesInterface $mimeTypeGuesser, array $tags) {
     $this->cacheBackend = $cache;
     $this->cacheTagsInvalidator = $cacheTagsInvalidator;
     $this->mimeTypeGuesser = $mimeTypeGuesser;
@@ -68,7 +68,7 @@ class DrupalCacheAdapter extends AbstractAdapter {
   /**
    * Returns the StorageClient.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    */
   public function getCacheBackend() {
     return $this->cacheBackend;
@@ -106,7 +106,7 @@ class DrupalCacheAdapter extends AbstractAdapter {
   /**
    * Get the cache tags invalidator.
    *
-   * @return \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @return CacheTagsInvalidatorInterface
    */
   private function getCacheTagsInvalidator() {
     return $this->cacheTagsInvalidator;
diff --git a/src/Flysystem/DrupalCachePlugin.php b/src/Flysystem/DrupalCachePlugin.php
index 225d25c..e503596 100644
--- a/src/Flysystem/DrupalCachePlugin.php
+++ b/src/Flysystem/DrupalCachePlugin.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\flysystem_drupal_cache\Flysystem;
 
+use Drupal\Core\Cache\CacheBackendInterface;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\CacheFactoryInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
@@ -10,7 +12,6 @@ use Drupal\flysystem\Plugin\FlysystemPluginInterface;
 use Drupal\flysystem\Plugin\FlysystemUrlTrait;
 use Drupal\flysystem_drupal_cache\DrupalCacheAdapter;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Drupal plugin for the "Drupal Cache" Flysystem adapter.
@@ -26,21 +27,21 @@ class DrupalCachePlugin implements FlysystemPluginInterface, ContainerFactoryPlu
   /**
    * Cache Backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * Mime Type Guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
@@ -54,16 +55,16 @@ class DrupalCachePlugin implements FlysystemPluginInterface, ContainerFactoryPlu
   /**
    * DrupalCache constructor.
    *
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $cacheFactory
+   * @param CacheFactoryInterface $cacheFactory
    *   Cache Factory.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   Cache Tags Invalidator.
    * @param $bin
    *   Cache bin name without flysystem_prefix.
    * @param $tags
    *   List of cache tags.
    */
-  public function __construct(CacheFactoryInterface $cacheFactory, CacheTagsInvalidatorInterface $cacheTagsInvalidator, MimeTypeGuesserInterface $mimeTypeGuesser, $bin, $tags) {
+  public function __construct(CacheFactoryInterface $cacheFactory, CacheTagsInvalidatorInterface $cacheTagsInvalidator, MimeTypesInterface $mimeTypeGuesser, $bin, $tags) {
     $this->cacheBackend = $cacheFactory->get(self::getCacheBin($bin));
     $this->cacheTagsInvalidator = $cacheTagsInvalidator;
     $this->mimeTypeGuesser = $mimeTypeGuesser;
diff --git a/src/StackMiddleware/Flysystem.php b/src/StackMiddleware/Flysystem.php
index 6f930ab..b29def4 100644
--- a/src/StackMiddleware/Flysystem.php
+++ b/src/StackMiddleware/Flysystem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem_drupal_cache\StackMiddleware;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use DateTime;
 use Drupal\Component\Datetime\DateTimePlus;
 use Drupal\Component\Utility\UrlHelper;
@@ -9,7 +10,6 @@ use Drupal\Core\Cache\CacheFactoryInterface;
 use Drupal\Core\File\FileSystem;
 use Drupal\Core\PageCache\RequestPolicyInterface;
 use Drupal\flysystem\FlysystemFactory;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpFoundation\ResponseHeaderBag;
@@ -24,60 +24,60 @@ class Flysystem implements HttpKernelInterface {
     /**
      * The wrapped HTTP kernel.
      *
-     * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+     * @var HttpKernelInterface
      */
     protected $httpKernel;
 
     /**
-     * @var \Drupal\Core\Cache\CacheFactoryInterface
+     * @var CacheFactoryInterface
      */
     protected $cacheFactory;
 
     /**
      * A policy rule determining the cacheability of a request.
      *
-     * @var \Drupal\Core\PageCache\RequestPolicyInterface
+     * @var RequestPolicyInterface
      */
     protected $requestPolicy;
 
     /**
      * Mime Type Guesser.
      *
-     * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+     * @var MimeTypesInterface
      */
     protected $mimeTypeGuesser;
 
     /**
      * Flysystem Factory.
      *
-     * @var \Drupal\flysystem\FlysystemFactory
+     * @var FlysystemFactory
      */
     protected $flysystemFactory;
 
     /**
      * Filesystem.
      *
-     * @var \Drupal\Core\File\FileSystem
+     * @var FileSystem
      */
     protected $filesystem;
 
     /**
      * Constructs a PageCache object.
      *
-     * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+     * @param HttpKernelInterface $http_kernel
      *   The decorated kernel.
-     * @param \Drupal\Core\Cache\CacheFactoryInterface $cacheFactory
+     * @param CacheFactoryInterface $cacheFactory
      *   The cache bin.
-     * @param \Drupal\Core\PageCache\RequestPolicyInterface $request_policy
+     * @param RequestPolicyInterface $request_policy
      *   A policy rule determining the cacheability of a request.
-     * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+     * @param MimeTypesInterface $mimeTypeGuesser
      *   Mime Type Guesser.
-     * @param \Drupal\flysystem\FlysystemFactory $flysystemFactory
+     * @param FlysystemFactory $flysystemFactory
      *   Flysystem Factory.
-     * @param \Drupal\Core\File\FileSystem $filesystem
+     * @param FileSystem $filesystem
      *   Filesystem.
      */
-    public function __construct(HttpKernelInterface $http_kernel, CacheFactoryInterface $cacheFactory, RequestPolicyInterface $request_policy, MimeTypeGuesserInterface $mimeTypeGuesser, FlysystemFactory $flysystemFactory, FileSystem $filesystem) {
+    public function __construct(HttpKernelInterface $http_kernel, CacheFactoryInterface $cacheFactory, RequestPolicyInterface $request_policy, MimeTypesInterface $mimeTypeGuesser, FlysystemFactory $flysystemFactory, FileSystem $filesystem) {
         $this->httpKernel = $http_kernel;
         $this->cacheFactory = $cacheFactory;
         $this->requestPolicy = $request_policy;
@@ -126,7 +126,7 @@ class Flysystem implements HttpKernelInterface {
     /**
      * Sidesteps the page cache and directly forwards a request to the backend.
      *
-     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param Request $request
      *   A request object.
      * @param int $type
      *   The type of the request (one of HttpKernelInterface::MASTER_REQUEST or
@@ -134,7 +134,7 @@ class Flysystem implements HttpKernelInterface {
      * @param bool $catch
      *   Whether to catch exceptions or not
      *
-     * @return \Symfony\Component\HttpFoundation\Response
+     * @return Response
      * @throws \Exception
      */
     protected function pass(Request $request, $type = self::MASTER_REQUEST, $catch = TRUE): Response {
@@ -144,13 +144,13 @@ class Flysystem implements HttpKernelInterface {
     /**
      * Get the response object.
      *
-     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param Request $request
      * @param string $scheme
      *   The scheme for the file.
      * @param string $cid
      *   The cid/path of the file.
      *
-     * @return \Symfony\Component\HttpFoundation\Response
+     * @return Response
      * @throws \Exception
      */
     private function getResponse(Request $request, $scheme, $cid): Response {
