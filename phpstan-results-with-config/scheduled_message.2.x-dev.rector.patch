diff --git a/scheduled_message.install b/scheduled_message.install
index 3b2f86b..2f0ac70 100644
--- a/scheduled_message.install
+++ b/scheduled_message.install
@@ -1,12 +1,13 @@
 <?php
 
+use Drupal\scheduled_message\Entity\ScheduledMessage;
 /**
  * Update entity field definitions to match schema.
  */
 function scheduled_message_update_8001(&$sandbox) {
   $dm = \Drupal::entityDefinitionUpdateManager();
   $entity_def = $dm->getEntityType('scheduled_message');
-  $base_fields = \Drupal\scheduled_message\Entity\ScheduledMessage::baseFieldDefinitions($entity_def);
+  $base_fields = ScheduledMessage::baseFieldDefinitions($entity_def);
 
   $remove = ['message_module', 'message_template', 'send_at', 'sent'];
   foreach ($remove as $field) {
diff --git a/scheduled_message.module b/scheduled_message.module
index 6f71e78..216ccea 100644
--- a/scheduled_message.module
+++ b/scheduled_message.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\scheduled_message\QueueManager;
+use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
 /**
  * @file
  * Provides a scheduled message entity type.
@@ -41,9 +43,9 @@ function scheduled_message_entity_update(EntityInterface $entity) {
       'trigger_entity_bundle' => $bundle,
     ]);
     if (count($schedules)) {
-      /** @var \Drupal\scheduled_message\QueueManager $queueManager */
+      /** @var QueueManager $queueManager */
       $queueManager = \Drupal::service('scheduled_message.queue_manager');
-      /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule */
+      /** @var ScheduledMessageTypeInterface $schedule */
       foreach ($schedules as $schedule) {
         $queueManager->queueTriggerEntity($entity, $schedule);
       }
@@ -54,9 +56,9 @@ function scheduled_message_entity_update(EntityInterface $entity) {
       'recipient_entity_bundle' => $bundle,
     ]);
     if (count($schedules)) {
-      /** @var \Drupal\scheduled_message\QueueManager $queueManager */
+      /** @var QueueManager $queueManager */
       $queueManager = \Drupal::service('scheduled_message.queue_manager');
-      /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule */
+      /** @var ScheduledMessageTypeInterface $schedule */
       foreach ($schedules as $schedule) {
         $queueManager->queueRecipientEntity($entity, $schedule);
       }
diff --git a/scheduled_message_easy_email/src/EventSubscriber/ScheduledMessageEasyEmailSubscriber.php b/scheduled_message_easy_email/src/EventSubscriber/ScheduledMessageEasyEmailSubscriber.php
index 4afc7e1..323d213 100644
--- a/scheduled_message_easy_email/src/EventSubscriber/ScheduledMessageEasyEmailSubscriber.php
+++ b/scheduled_message_easy_email/src/EventSubscriber/ScheduledMessageEasyEmailSubscriber.php
@@ -23,7 +23,7 @@ class ScheduledMessageEasyEmailSubscriber implements EventSubscriberInterface {
   /**
    * Email Validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
@@ -32,7 +32,7 @@ class ScheduledMessageEasyEmailSubscriber implements EventSubscriberInterface {
    *
    * @param \Drupal\easy_email\Service\EmailHandlerInterface $easy_email_handler
    *   Easy Email handler.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   Email Validator.
    */
   public function __construct(EmailHandlerInterface $easy_email_handler, EmailValidatorInterface $email_validator) {
@@ -43,7 +43,7 @@ class ScheduledMessageEasyEmailSubscriber implements EventSubscriberInterface {
   /**
    * Scheduled Message event handler.
    *
-   * @param \Drupal\scheduled_message\Event\ScheduledMessageEvent $event
+   * @param ScheduledMessageEvent $event
    *   Response event.
    */
   public function onSendMessage(ScheduledMessageEvent $event) {
diff --git a/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php b/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php
index df58040..5fdfaed 100644
--- a/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php
+++ b/scheduled_message_message/src/EventSubscriber/ScheduledMessageMessageSubscriber.php
@@ -9,8 +9,6 @@ use Drupal\message_notify\MessageNotifier;
 use Drupal\scheduled_message\Event\ScheduledMessageEvent;
 use Drupal\scheduled_message\Event\ScheduledMessageEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -21,7 +19,7 @@ class ScheduledMessageMessageSubscriber implements EventSubscriberInterface {
   /**
    * EntityType Manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -45,7 +43,7 @@ class ScheduledMessageMessageSubscriber implements EventSubscriberInterface {
   /**
    * Scheduled Message event handler.
    *
-   * @param \Drupal\scheduled_message\Event\ScheduledMessageEvent $event
+   * @param ScheduledMessageEvent $event
    *   Response event.
    */
   public function onSendMessage(ScheduledMessageEvent $event) {
diff --git a/src/Annotation/ScheduledMessage.php b/src/Annotation/ScheduledMessage.php
index a56d341..5d54a6a 100644
--- a/src/Annotation/ScheduledMessage.php
+++ b/src/Annotation/ScheduledMessage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduled_message\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class ScheduledMessage extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Entity/ScheduledMessage.php b/src/Entity/ScheduledMessage.php
index a5ebc47..4dd785b 100644
--- a/src/Entity/ScheduledMessage.php
+++ b/src/Entity/ScheduledMessage.php
@@ -287,8 +287,7 @@ class ScheduledMessage extends ContentEntityBase implements ScheduledMessageInte
 
   public static function bundleFieldDefinitions(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
     $fields = parent::bundleFieldDefinitions($entity_type, $bundle, $base_field_definitions); // TODO: Change the autogenerated stub
-
-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $sm_type */
+    /** @var ScheduledMessageTypeInterface $sm_type */
     $sm_type = ScheduledMessageType::load($bundle);
 
     $trigger = clone $base_field_definitions['trigger'];
diff --git a/src/Event/ScheduledMessageEvent.php b/src/Event/ScheduledMessageEvent.php
index 025a3a3..dc7586a 100644
--- a/src/Event/ScheduledMessageEvent.php
+++ b/src/Event/ScheduledMessageEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\scheduled_message\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\scheduled_message\Entity\ScheduledMessageInterface;
 use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Scheduled Message event.
@@ -16,23 +16,23 @@ class ScheduledMessageEvent extends Event {
   /**
    * The Scheduled Message.
    *
-   * @var \Drupal\scheduled_message\Entity\ScheduledMessageInterface
+   * @var ScheduledMessageInterface
    */
   protected $message;
 
   /**
    * The message schedule.
    *
-   * @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface
+   * @var ScheduledMessageTypeInterface
    */
   protected $schedule;
 
   /**
    * ScheduledMessageEvent constructor.
    *
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageInterface $message
+   * @param ScheduledMessageInterface $message
    *   The message.
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ScheduledMessageTypeInterface $schedule
    *   The schedule.
    */
   public function __construct(ScheduledMessageInterface $message, ScheduledMessageTypeInterface $schedule) {
@@ -43,7 +43,7 @@ class ScheduledMessageEvent extends Event {
   /**
    * Get the message.
    *
-   * @return \Drupal\scheduled_message\Entity\ScheduledMessageInterface
+   * @return ScheduledMessageInterface
    *   The message.
    */
   public function getMessage() {
@@ -53,7 +53,7 @@ class ScheduledMessageEvent extends Event {
   /**
    * Get the schedule.
    *
-   * @return \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface
+   * @return ScheduledMessageTypeInterface
    */
   public function getSchedule() {
     return $this->schedule;
diff --git a/src/Form/EntityTypesForm.php b/src/Form/EntityTypesForm.php
index f974e5e..455cbfa 100644
--- a/src/Form/EntityTypesForm.php
+++ b/src/Form/EntityTypesForm.php
@@ -18,7 +18,7 @@ class EntityTypesForm extends ConfigFormBase {
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
diff --git a/src/Form/ScheduledMessageDeleteForm.php b/src/Form/ScheduledMessageDeleteForm.php
index 2456112..1de023c 100644
--- a/src/Form/ScheduledMessageDeleteForm.php
+++ b/src/Form/ScheduledMessageDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduled_message\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -12,7 +13,7 @@ class ScheduledMessageDeleteForm extends ConfirmFormBase {
   /**
    * The parent entity containing the scheduled message to be deleted.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityBase
+   * @var ConfigEntityBase
    */
   protected $baseEntity;
 
diff --git a/src/Form/ScheduledMessageForm.php b/src/Form/ScheduledMessageForm.php
index d341630..ae63fb4 100644
--- a/src/Form/ScheduledMessageForm.php
+++ b/src/Form/ScheduledMessageForm.php
@@ -20,7 +20,7 @@ class ScheduledMessageForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New scheduled message %label has been created.', $message_arguments));
diff --git a/src/Form/ScheduledMessageFormBase.php b/src/Form/ScheduledMessageFormBase.php
index cd24fce..2727dbd 100644
--- a/src/Form/ScheduledMessageFormBase.php
+++ b/src/Form/ScheduledMessageFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\scheduled_message\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityBase;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -19,7 +21,7 @@ abstract class ScheduledMessageFormBase extends FormBase {
   /**
    * The parent entity containing the scheduled message to be deleted.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityBase
+   * @var ConfigEntityBase
    */
   protected $baseEntity;
 
@@ -40,7 +42,7 @@ abstract class ScheduledMessageFormBase extends FormBase {
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -76,7 +78,7 @@ abstract class ScheduledMessageFormBase extends FormBase {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, $entity_type = NULL, $entity_id = NULL, $scheduled_message = NULL) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
+    /** @var ConfigEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity_type);
     $this->baseEntity = $storage->load($entity_id);
     $this->scheduledMessage = $this->getMessagePlugin($scheduled_message);
diff --git a/src/Form/ScheduledMessageTypeForm.php b/src/Form/ScheduledMessageTypeForm.php
index 10389e8..6ed44fb 100644
--- a/src/Form/ScheduledMessageTypeForm.php
+++ b/src/Form/ScheduledMessageTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduled_message\Form;
 
+use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,7 +18,7 @@ class ScheduledMessageTypeForm extends BundleEntityFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $entity_type */
+    /** @var ScheduledMessageTypeInterface $entity_type */
     $entity_type = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add scheduled message type');
@@ -197,7 +198,7 @@ class ScheduledMessageTypeForm extends BundleEntityFormBase {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $entity_type */
+    /** @var ScheduledMessageTypeInterface $entity_type */
     $entity_type = $this->entity;
 
     $entity_type->set('id', trim($entity_type->id()));
diff --git a/src/Plugin/QueueWorker/EntityQueue.php b/src/Plugin/QueueWorker/EntityQueue.php
index 7fb824b..d522628 100644
--- a/src/Plugin/QueueWorker/EntityQueue.php
+++ b/src/Plugin/QueueWorker/EntityQueue.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\scheduled_message\Plugin\QueueWorker;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Logger\LoggerChannelTrait;
@@ -30,12 +32,12 @@ class EntityQueue extends QueueWorkerBase implements ContainerFactoryPluginInter
   use LoggerChannelTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\scheduled_message\QueueManager
+   * @var QueueManager
    */
   protected $queueManager;
 
@@ -69,13 +71,13 @@ class EntityQueue extends QueueWorkerBase implements ContainerFactoryPluginInter
    * @inheritDoc
    */
   public function processItem($data) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = isset($data->entity) ?
       $data->entity :
       $this->entityTypeManager
         ->getStorage($data->trigger_entity_type)->load($data->trigger_id);
 
-    /** @var \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule */
+    /** @var ScheduledMessageTypeInterface $schedule */
     $schedule = $this->entityTypeManager
       ->getStorage('scheduled_message_type')->load($data->schedule_id);
 
diff --git a/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php b/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php
index 9fe4bdb..ddfa19d 100644
--- a/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php
+++ b/src/Plugin/QueueWorker/ScheduledMessageWorkerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\scheduled_message\Plugin\QueueWorker;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\scheduled_message\Entity\ScheduledMessage;
@@ -18,7 +19,7 @@ abstract class ScheduledMessageWorkerBase extends QueueWorkerBase implements Con
   /**
    * EntityStorage for message entity.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $messageStorage;
 
@@ -32,7 +33,7 @@ abstract class ScheduledMessageWorkerBase extends QueueWorkerBase implements Con
   /**
    * Event Dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -42,7 +43,7 @@ abstract class ScheduledMessageWorkerBase extends QueueWorkerBase implements Con
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $eventDispatcher) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -73,7 +74,7 @@ abstract class ScheduledMessageWorkerBase extends QueueWorkerBase implements Con
     $schedule = $message->get('bundle')->entity;
 
     $event = new ScheduledMessageEvent($message, $schedule);
-    $this->eventDispatcher->dispatch(ScheduledMessageEvents::SEND_MESSAGE, $event);
+    $this->eventDispatcher->dispatch($event, ScheduledMessageEvents::SEND_MESSAGE);
   }
 
 }
diff --git a/src/QueueManager.php b/src/QueueManager.php
index 611322a..e044a24 100644
--- a/src/QueueManager.php
+++ b/src/QueueManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\scheduled_message;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -24,21 +28,21 @@ class QueueManager {
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The QueueFactory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * Module Handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -79,9 +83,9 @@ class QueueManager {
    * Checks for this message in the queue, and adds if it does not exist, or
    * updates if it does exist. If no longer relevant, delete.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
+   * @param ContentEntityInterface $trigger
    *   The entity to schedule/reschedule.
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ScheduledMessageTypeInterface $schedule
    *   The Scheduled Message config
    */
   public function queueTriggerEntity(ContentEntityInterface $trigger, ScheduledMessageTypeInterface $schedule) {
@@ -96,9 +100,9 @@ class QueueManager {
   /**
    * Queue individual messages to send.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
+   * @param ContentEntityInterface $recipient
    *   Recipient entity.
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ScheduledMessageTypeInterface $schedule
    *   The schedule.
    */
   public function queueRecipientEntity(ContentEntityInterface $recipient, ScheduledMessageTypeInterface $schedule) {
@@ -132,13 +136,13 @@ class QueueManager {
   /**
    * Create a Scheduled Message entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $trigger
+   * @param ContentEntityInterface $recipient
+   * @param ScheduledMessageTypeInterface $schedule
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   function createMessage(ContentEntityInterface $trigger, ContentEntityInterface $recipient, ScheduledMessageTypeInterface $schedule) {
     if ($recipient->hasField('uid')) {
@@ -181,12 +185,12 @@ class QueueManager {
   /**
    * Get the trigger entity, given the recipient and the schedule.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $recipient
+   * @param ScheduledMessageTypeInterface $schedule
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   function getTrigger(ContentEntityInterface $recipient, ScheduledMessageTypeInterface $schedule) {
     $trigger_type = $schedule->getTriggerEntityType();
@@ -211,12 +215,12 @@ class QueueManager {
   /**
    * Get recipients for schedule based on trigger.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $trigger
+   * @param ScheduledMessageTypeInterface $schedule
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ContentEntityInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   function getRecipients(ContentEntityInterface $trigger, ScheduledMessageTypeInterface $schedule) {
     $recipient_type = $schedule->getRecipientEntityType();
@@ -243,9 +247,9 @@ class QueueManager {
   /**
    * Whether there should be a message for this schedule, trigger, and recipient combination.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $trigger
-   * @param \Drupal\Core\Entity\ContentEntityInterface $recipient
-   * @param \Drupal\scheduled_message\Entity\ScheduledMessageTypeInterface $schedule
+   * @param ContentEntityInterface $trigger
+   * @param ContentEntityInterface $recipient
+   * @param ScheduledMessageTypeInterface $schedule
    *
    * @return bool
    */
@@ -298,7 +302,7 @@ class QueueManager {
    *   The entities to add.
    * @param string $config_type
    *   The entity bundle.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entityType
+   * @param ConfigEntityInterface $entityType
    *   The entity type config entity.
    */
   public function queueEntities(array $entities, $config_type, ConfigEntityInterface $entityType) {
@@ -317,9 +321,9 @@ class QueueManager {
   /**
    * Generate all messages listed on Type, according to plugin settings.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity to generate scheduled messages.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $type
+   * @param ConfigEntityInterface $type
    *   Entity Type to find schedule.
    */
   public function generateScheduledMessages(ContentEntityInterface $entity, ConfigEntityInterface $type) {
diff --git a/src/ScheduledMessageListBuilder.php b/src/ScheduledMessageListBuilder.php
index bce11bd..be48a3e 100644
--- a/src/ScheduledMessageListBuilder.php
+++ b/src/ScheduledMessageListBuilder.php
@@ -18,27 +18,27 @@ class ScheduledMessageListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new ScheduledMessageListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
