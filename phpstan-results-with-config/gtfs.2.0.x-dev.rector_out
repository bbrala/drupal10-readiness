modules/contrib/gtfs/gtfs.install
modules/contrib/gtfs/gtfs.module
modules/contrib/gtfs/src/AgencyListBuilder.php
modules/contrib/gtfs/src/CalendarDateListBuilder.php
modules/contrib/gtfs/src/Commands/DeleteCommands.php
modules/contrib/gtfs/src/Commands/ImportCommands.php
modules/contrib/gtfs/src/Controller/AgencyController.php
modules/contrib/gtfs/src/Controller/CalendarDateController.php
modules/contrib/gtfs/src/Controller/DirectionController.php
modules/contrib/gtfs/src/Controller/FareAttributeController.php
modules/contrib/gtfs/src/Controller/FeedController.php
modules/contrib/gtfs/src/Controller/FrequencyController.php
modules/contrib/gtfs/src/Controller/RouteController.php
modules/contrib/gtfs/src/Controller/ServiceController.php
modules/contrib/gtfs/src/Controller/ShapeController.php
modules/contrib/gtfs/src/Controller/StopController.php
modules/contrib/gtfs/src/Controller/StopTimeController.php
modules/contrib/gtfs/src/Controller/TripController.php
modules/contrib/gtfs/src/DirectionListBuilder.php
modules/contrib/gtfs/src/Entity/Agency.php
modules/contrib/gtfs/src/Entity/CalendarDate.php
modules/contrib/gtfs/src/Entity/Direction.php
modules/contrib/gtfs/src/Entity/FareAttribute.php
modules/contrib/gtfs/src/Entity/Feed.php
modules/contrib/gtfs/src/Entity/Feed/Downloader.php
modules/contrib/gtfs/src/Entity/Feed/Importer.php
modules/contrib/gtfs/src/Entity/FeedInterface.php
modules/contrib/gtfs/src/Entity/Frequency.php
modules/contrib/gtfs/src/Entity/GTFSEntityBase.php
modules/contrib/gtfs/src/Entity/GTFSObjectInterface.php
modules/contrib/gtfs/src/Entity/GeodataInterface.php
modules/contrib/gtfs/src/Entity/HasIdTrait.php
modules/contrib/gtfs/src/Entity/Route.php
modules/contrib/gtfs/src/Entity/Service.php
modules/contrib/gtfs/src/Entity/Shape.php
modules/contrib/gtfs/src/Entity/Stop.php
modules/contrib/gtfs/src/Entity/StopTime.php
modules/contrib/gtfs/src/Entity/Trip.php
modules/contrib/gtfs/src/FareAttributeListBuilder.php
modules/contrib/gtfs/src/FeedAccessControlHandler.php
modules/contrib/gtfs/src/FeedHtmlRouteProvider.php
modules/contrib/gtfs/src/FeedListBuilder.php
modules/contrib/gtfs/src/Form/AgencyRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/AgencyRevisionRevertForm.php
modules/contrib/gtfs/src/Form/AgencyRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/AgencySettingsForm.php
modules/contrib/gtfs/src/Form/CalendarDateRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertForm.php
modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/CalendarDateSettingsForm.php
modules/contrib/gtfs/src/Form/DirectionRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/DirectionRevisionRevertForm.php
modules/contrib/gtfs/src/Form/DirectionRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/DirectionSettingsForm.php
modules/contrib/gtfs/src/Form/EntityDeleteForm.php
modules/contrib/gtfs/src/Form/FareAttributeRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertForm.php
modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/FareAttributeSettingsForm.php
modules/contrib/gtfs/src/Form/FeedDeleteForm.php
modules/contrib/gtfs/src/Form/FeedForm.php
modules/contrib/gtfs/src/Form/FeedImportForm.php
modules/contrib/gtfs/src/Form/FeedRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/FeedRevisionRevertForm.php
modules/contrib/gtfs/src/Form/FeedRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/FeedSettingsForm.php
modules/contrib/gtfs/src/Form/FrequencyRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/FrequencyRevisionRevertForm.php
modules/contrib/gtfs/src/Form/FrequencyRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/FrequencySettingsForm.php
modules/contrib/gtfs/src/Form/GTFSObjectForm.php
modules/contrib/gtfs/src/Form/RouteRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/RouteRevisionRevertForm.php
modules/contrib/gtfs/src/Form/RouteRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/RouteSettingsForm.php
modules/contrib/gtfs/src/Form/ServiceRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/ServiceRevisionRevertForm.php
modules/contrib/gtfs/src/Form/ServiceRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/ServiceSettingsForm.php
modules/contrib/gtfs/src/Form/ShapeRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/ShapeRevisionRevertForm.php
modules/contrib/gtfs/src/Form/ShapeRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/ShapeSettingsForm.php
modules/contrib/gtfs/src/Form/StopRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/StopRevisionRevertForm.php
modules/contrib/gtfs/src/Form/StopRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/StopSettingsForm.php
modules/contrib/gtfs/src/Form/StopTimeRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/StopTimeRevisionRevertForm.php
modules/contrib/gtfs/src/Form/StopTimeRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/StopTimeSettingsForm.php
modules/contrib/gtfs/src/Form/TripRevisionDeleteForm.php
modules/contrib/gtfs/src/Form/TripRevisionRevertForm.php
modules/contrib/gtfs/src/Form/TripRevisionRevertTranslationForm.php
modules/contrib/gtfs/src/Form/TripSettingsForm.php
modules/contrib/gtfs/src/FrequencyListBuilder.php
modules/contrib/gtfs/src/GTFSEntityHtmlRouteProvider.php
modules/contrib/gtfs/src/GTFSObjectAccessControlHandler.php
modules/contrib/gtfs/src/GTFSObjectListBuilder.php
modules/contrib/gtfs/src/GTFSPermissions.php
modules/contrib/gtfs/src/Plugin/Derivative/FeedMenuLink.php
modules/contrib/gtfs/src/Plugin/Menu/FeedMenuLink.php
modules/contrib/gtfs/src/Plugin/rest/resource/AgencyListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/AgencyResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/DirectionListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/DirectionResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/DiscoveryResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/GTFSResourceBase.php
modules/contrib/gtfs/src/Plugin/rest/resource/ResourceMeta.php
modules/contrib/gtfs/src/Plugin/rest/resource/ResourceResponse.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteGeojsonResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteStopListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/RouteWKTResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/ServiceListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/ServiceResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/ShapeGeojsonResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/ShapeResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopDirectionResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopRouteListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopStopTimeListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopTimeListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/StopTripResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripGeojsonResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripListResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripResource.php
modules/contrib/gtfs/src/Plugin/rest/resource/TripStopListResource.php
modules/contrib/gtfs/src/RouteListBuilder.php
modules/contrib/gtfs/src/ServiceListBuilder.php
modules/contrib/gtfs/src/ShapeListBuilder.php
modules/contrib/gtfs/src/StopListBuilder.php
modules/contrib/gtfs/src/StopTimeListBuilder.php
modules/contrib/gtfs/src/Storage/AgencyStorage.php
modules/contrib/gtfs/src/Storage/CalendarDateStorage.php
modules/contrib/gtfs/src/Storage/DirectionStorage.php
modules/contrib/gtfs/src/Storage/FareAttributeStorage.php
modules/contrib/gtfs/src/Storage/FeedStorage.php
modules/contrib/gtfs/src/Storage/FrequencyStorage.php
modules/contrib/gtfs/src/Storage/GTFSEntityStorageInterface.php
modules/contrib/gtfs/src/Storage/RouteStorage.php
modules/contrib/gtfs/src/Storage/ServiceStorage.php
modules/contrib/gtfs/src/Storage/ShapeStorage.php
modules/contrib/gtfs/src/Storage/StopStorage.php
modules/contrib/gtfs/src/Storage/StopTimeStorage.php
modules/contrib/gtfs/src/Storage/TripStorage.php
modules/contrib/gtfs/src/TripListBuilder.php

110 files with changes
======================

1) modules/contrib/gtfs/src/Storage/GTFSEntityStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of GTFS Entity revision IDs for a specific GTFS Entity.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $entity
+   * @param GTFSObjectInterface $entity
    *   The GTFS entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as GTFS Entity author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $entity
+   * @param GTFSObjectInterface $entity
    *   The GTFS entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all GTFS Entity with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/gtfs/src/Plugin/rest/resource/TripStopListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Agency;
 use Drupal\gtfs\Entity\Route;
@@ @@
    * @param null $route_id
    * @param null $trip_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   public function v1($agency_id = NULL, $route_id = NULL, $trip_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/gtfs/src/Plugin/rest/resource/TripResource.php:68

    ---------- begin diff ----------
@@ @@
    * @param string|null $route_id
    * @param string|null $trip_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function v1($agency_id = NULL, $route_id = NULL, $trip_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/gtfs/src/Plugin/rest/resource/TripListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Agency;
 use Drupal\gtfs\Entity\Route;
@@ @@
    * @param null $agency_id
    * @param null $route_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function v1($agency_id = NULL, $route_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/gtfs/src/Plugin/rest/resource/TripGeojsonResource.php:31

    ---------- begin diff ----------
@@ @@
    * @param string|null $route_id
    * @param string|null $trip_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function get($agency_id = NULL, $route_id = NULL, $trip_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/gtfs/src/Plugin/rest/resource/StopTripResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Stop;
 use PDO;
@@ @@
    *
    * @param null $stop_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function v1($stop_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/gtfs/src/Plugin/rest/resource/StopTimeListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Agency;
 use Drupal\gtfs\Entity\Route;
@@ @@
    * @param null $route_id
    * @param null $trip_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   public function v1($agency_id = NULL, $route_id = NULL, $trip_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/gtfs/src/Plugin/rest/resource/StopStopTimeListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Stop;

@@ @@
    *
    * @param null $stop_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get($stop_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/gtfs/src/Plugin/rest/resource/StopRouteListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Stop;
 use PDO;
@@ @@
    *
    * @param null $stop_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function v1($stop_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/gtfs/src/Plugin/rest/resource/StopResource.php:45

    ---------- begin diff ----------
@@ @@
    *
    * @param string|null $stop_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function v1($stop_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/gtfs/src/Plugin/rest/resource/StopListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;

 /**
@@ @@
   /**
    * Responds to route GET requests.
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    *   The response.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function v1() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/gtfs/src/Plugin/rest/resource/StopDirectionResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\gtfs\Entity\Service;
 use Drupal;
 use Drupal\gtfs\Entity\Stop;
 use PDO;
@@ @@
    *
    * @param null $stop_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function v1($stop_id = NULL) {

@@ @@
       }
       if (!$direction) continue;
       $data[$key] = $direction->toGTFSObject();
-      $data[$key]['service'] = Drupal\gtfs\Entity\Service::load($trip['service_id'])->toGTFSObject();
+      $data[$key]['service'] = Service::load($trip['service_id'])->toGTFSObject();
       $data[$key]['route'] = $direction->route()->toGTFSObject();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/gtfs/src/Plugin/rest/resource/ShapeResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal;
 use Drupal\gtfs\Entity\Shape;
 use PDO;
@@ @@
    *
    * @param string|null $shape_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    */
   public function get($shape_id = NULL) {

@@ @@
    * @param string $shape_ids
    *  A comma-separated list of shapes to retrieve.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public static function getShapes($shape_ids = '') {
     if ($shape_ids == '') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/gtfs/src/Plugin/rest/resource/ShapeGeojsonResource.php:29

    ---------- begin diff ----------
@@ @@
    *
    * @param string|null $shape_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    */
   public function get($shape_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/gtfs/src/Plugin/rest/resource/ServiceResource.php:46

    ---------- begin diff ----------
@@ @@
    *
    * @param string|null $service_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function v1($service_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/gtfs/src/Plugin/rest/resource/ServiceListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;

 /**
@@ @@
   /**
    * Responds to service GET requests.
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function v1() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/gtfs/src/Plugin/rest/resource/RouteWKTResource.php:105

    ---------- begin diff ----------
@@ @@
    * @param string|null $agency_id
    * @param string|null $route_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function v1($agency_id = NULL, $route_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/gtfs/src/Plugin/rest/resource/RouteStopListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Agency;
 use Drupal\gtfs\Entity\Route;
@@ @@
    * @param null $agency_id
    * @param null $route_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function v1($agency_id = NULL, $route_id = NULL, $direction_ids = null) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/gtfs/src/Plugin/rest/resource/RouteResource.php:48

    ---------- begin diff ----------
@@ @@
    * @param string|null $agency_id
    * @param string|null $route_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function v1($agency_id = NULL, $route_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/gtfs/src/Plugin/rest/resource/RouteListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Agency;

@@ @@
    *
    * @param null $agency_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    *   The response.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   public function v1($agency_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/gtfs/src/Plugin/rest/resource/RouteGeojsonResource.php:102

    ---------- begin diff ----------
@@ @@
    * @param string|null $agency_id
    * @param string|null $route_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function v1($agency_id = NULL, $route_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/gtfs/src/Plugin/rest/resource/GTFSResourceBase.php:29

    ---------- begin diff ----------
@@ @@

   /**
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Symfony\Component\HttpFoundation\Request $current_request
+   * @param Request $current_request
    *   The current request
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, array $serializer_formats, LoggerInterface $logger, Request $current_request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/gtfs/src/Plugin/rest/resource/DirectionResource.php:70

    ---------- begin diff ----------
@@ @@
    * @param string|null $route_id
    * @param string|null $direction_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function v1($agency_id = NULL, $route_id = NULL, $direction_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/gtfs/src/Plugin/rest/resource/DirectionListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\gtfs\Entity\Agency;
 use Drupal\gtfs\Entity\Route;
@@ @@
    * @param null $agency_id
    * @param null $route_id
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return ResourceResponse
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get($version = 'v1', $agency_id = NULL, $route_id = NULL) {
     if (!method_exists($this, $version)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/gtfs/src/Plugin/rest/resource/AgencyResource.php:28

    ---------- begin diff ----------
@@ @@
    * @param null $agency_id
    *  GTFS ID of the agency to retrieve
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    * @throws \Exception
    */
   public function get($version = 'v1', $agency_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/gtfs/src/Plugin/rest/resource/AgencyListResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Plugin\rest\resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use PDO;

@@ @@
   /**
    * Responds to agency GET requests.
    *
-   * @return \Drupal\gtfs\Plugin\rest\resource\ResourceResponse
+   * @return ResourceResponse
    *   The API response
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get($version = 'v1') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/gtfs/src/GTFSPermissions.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a GTFSPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/gtfs/src/GTFSObjectAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     $type = coerceEntityTypeId($entity->getEntityTypeId());

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $entity */
+    /** @var GTFSObjectInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/gtfs/src/GTFSEntityHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/gtfs/src/Form/TripSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/gtfs/src/Form/TripRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new TripRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Trip storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->TripStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/gtfs/src/Form/TripRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Trip revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Trip storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $TripStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new TripRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Trip storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/gtfs/src/Form/TripRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Trip revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Trip storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $TripStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new TripRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->TripStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Trip: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Trip %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Trip %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_trip.canonical',
        ['gtfs_trip' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/gtfs/src/Form/StopTimeSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/gtfs/src/Form/StopTimeRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new StopTimeRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS StopTime storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->StopTimeStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/gtfs/src/Form/StopTimeRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Stop Time revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Stop Time storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $StopTimeStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new StopTimeRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS StopTime storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/gtfs/src/Form/StopTimeRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Stop Time revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Stop Time storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $StopTimeStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new StopTimeRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->StopTimeStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Stop Time: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop Time %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop Time %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_stop_time.canonical',
        ['gtfs_stop_time' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/gtfs/src/Form/StopSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/gtfs/src/Form/StopRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new StopRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Stop storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->StopStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/gtfs/src/Form/StopRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Stop revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Stop storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $StopStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new StopRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Stop storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/gtfs/src/Form/StopRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Stop revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Stop storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $StopStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new StopRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->StopStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Stop: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Stop %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_stop.canonical',
        ['gtfs_stop' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/gtfs/src/Form/ShapeSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/gtfs/src/Form/ShapeRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new ShapeRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Shape storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->ShapeStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/gtfs/src/Form/ShapeRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Shape revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Shape storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ShapeStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ShapeRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Shape storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/gtfs/src/Form/ShapeRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Shape revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Shape storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ShapeStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new ShapeRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->ShapeStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Shape: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Shape %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Shape %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_shape.canonical',
        ['gtfs_shape' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/gtfs/src/Form/ServiceSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/gtfs/src/Form/ServiceRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new ServiceRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Service storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->ServiceStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/gtfs/src/Form/ServiceRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Service revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Service storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ServiceStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ServiceRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Service storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/gtfs/src/Form/ServiceRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Service revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Service storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ServiceStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new ServiceRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->ServiceStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Service: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Service %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Service %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_service.canonical',
        ['gtfs_service' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/gtfs/src/Form/RouteSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/gtfs/src/Form/RouteRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new RouteRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Route storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->RouteStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/gtfs/src/Form/RouteRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Route revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Route storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $RouteStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new RouteRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Route storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/gtfs/src/Form/RouteRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Route revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Route storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $RouteStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new RouteRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->RouteStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Route: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Route %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Route %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_route.canonical',
        ['gtfs_route' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/gtfs/src/Form/GTFSObjectForm.php:43

    ---------- begin diff ----------
@@ @@
       $entity->setNewRevision();

       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId(Drupal::currentUser()->id());
     }
     else {
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/gtfs/src/Form/FrequencySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/gtfs/src/Form/FrequencyRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new FrequencyRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Frequency storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->FrequencyStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/gtfs/src/Form/FrequencyRevisionRevertForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Frequency revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Frequency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $FrequencyStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new FrequencyRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Frequency storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/gtfs/src/Form/FrequencyRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Frequency revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Frequency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $FrequencyStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new FrequencyRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->FrequencyStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Frequency: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Frequency %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Frequency %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_frequency.canonical',
        ['gtfs_frequency' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/gtfs/src/Form/FeedSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/gtfs/src/Form/FeedRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new FeedRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Feed storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(FeedInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\FeedInterface $default_revision */
+    /** @var FeedInterface $default_revision */
     $latest_revision = $this->FeedStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/gtfs/src/Form/FeedRevisionRevertForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Feed revision.
    *
-   * @var \Drupal\gtfs\Entity\FeedInterface
+   * @var FeedInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Feed storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $FeedStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new FeedRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Feed storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\FeedInterface $revision
+   * @param FeedInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\FeedInterface
+   * @return FeedInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(FeedInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/gtfs/src/Form/FeedRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\FeedInterface;
 use Drupal;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The Feed revision.
    *
-   * @var \Drupal\gtfs\Entity\FeedInterface
+   * @var FeedInterface
    */
   protected $revision;

@@ @@
   /**
    * The Feed storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $FeedStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new FeedRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/gtfs/src/Form/FeedImportForm.php:16

    ---------- begin diff ----------
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\gtfs\Entity\Feed|null $gtfs_feed
+   * @param FormStateInterface $form_state
+   * @param Feed|null $gtfs_feed
    * @param string $step
    * @param string $class
    *
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\gtfs\Entity\Feed|null $feed
+   * @param FormStateInterface $form_state
+   * @param Feed|null $feed
    *
    * @return array
    */
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\gtfs\Entity\Feed|null $feed
+   * @param FormStateInterface $form_state
+   * @param Feed|null $feed
    *
    * @return array
    */
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\gtfs\Entity\Feed|null $feed
+   * @param FormStateInterface $form_state
+   * @param Feed|null $feed
    * @param string $classname
    *
    * @return array
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @param \Drupal\gtfs\Entity\Feed|null $feed
+   * @param FormStateInterface $form_state
+   * @param Feed|null $feed
    *
    * @return array
    */
@@ @@
    * {@inheritDoc}
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $step = $form_state->get('step');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/gtfs/src/Form/FeedForm.php:42

    ---------- begin diff ----------
@@ @@
       $entity->setNewRevision();

       // If a new revision is created, save the current user as revision author.
-      $entity->setRevisionCreationTime(REQUEST_TIME);
+      $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
       $entity->setRevisionUserId(Drupal::currentUser()->id());
     }
     else {
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/gtfs/src/Form/FeedDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\Feed;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $delete_attached = $form_state->getValue('delete_attached');
     $delete_feed = $form_state->getValue('delete_feed');
-    /** @var \Drupal\gtfs\Entity\Feed $entity */
+    /** @var Feed $entity */
     $feed = $this->getEntity();
     if ($delete_feed) {
       $message = sprintf('The feed %s has been deleted', $feed->getName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/gtfs/src/Form/FareAttributeSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new FareAttributeRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS FareAttribute storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->FareAttributeStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/gtfs/src/Form/FareAttributeRevisionRevertForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS FareAttribute revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS FareAttribute storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $FareAttributeStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new FareAttributeRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS FareAttribute storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/gtfs/src/Form/FareAttributeRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The GTFS FareAttribute revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS FareAttribute storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $FareAttributeStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new FareAttributeRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/gtfs/src/Form/DirectionSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/gtfs/src/Form/DirectionRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new DirectionRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Direction storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->DirectionStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/gtfs/src/Form/DirectionRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Direction revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Direction storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $DirectionStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new DirectionRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Direction storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/gtfs/src/Form/DirectionRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The GTFS Direction revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Direction storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $DirectionStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new DirectionRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => format_date($this->revision->getRevisionCreationTime())]);
+    return t('Are you sure you want to delete the revision from %revision-date?', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime())]);
   }

   /**
@@ @@
     $this->DirectionStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Direction: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Direction %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    \Drupal::messenger()->addMessage(t('Revision from %revision-date of Direction %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.gtfs_direction.canonical',
        ['gtfs_direction' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/gtfs/src/Form/CalendarDateSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new CalendarDateRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS CalendarDate storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->CalendarDateStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/gtfs/src/Form/CalendarDateRevisionRevertForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS CalendarDate revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS CalendarDate storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $CalendarDateStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new CalendarDateRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS CalendarDate storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/gtfs/src/Form/CalendarDateRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The GTFS CalendarDate revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS CalendarDate storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $CalendarDateStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new CalendarDateRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/gtfs/src/Form/AgencySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/gtfs/src/Form/AgencyRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new AgencyRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Agency storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $default_revision */
+    /** @var GTFSObjectInterface $default_revision */
     $latest_revision = $this->AgencyStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/gtfs/src/Form/AgencyRevisionRevertForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The GTFS Agency revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Agency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $AgencyStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new AgencyRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The GTFS Agency storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $revision
+   * @param GTFSObjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @return GTFSObjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(GTFSObjectInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/gtfs/src/Form/AgencyRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Form;

+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The GTFS Agency revision.
    *
-   * @var \Drupal\gtfs\Entity\GTFSObjectInterface
+   * @var GTFSObjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The GTFS Agency storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $AgencyStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new AgencyRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/gtfs/src/FeedListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getOperations(EntityInterface $entity) {
     $operations = parent::getOperations($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/gtfs/src/FeedHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/gtfs/src/FeedAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs;

+use Drupal\gtfs\Entity\FeedInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\gtfs\Entity\FeedInterface $entity */
+    /** @var FeedInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/gtfs/src/Entity/StopTime.php:119

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the stop associated with this stoptime.
    *
-   * @return \Drupal\gtfs\Entity\Stop
+   * @return Stop
    *   The associated stop
    */
   public function stop() {
@@ @@
   /**
    * Returns the trip associated with this stoptime.
    *
-   * @return \Drupal\gtfs\Entity\Trip
+   * @return Trip
    *   The associated trip
    */
   public function trip() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/gtfs/src/Entity/Route.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * Gets the agency associated with this route.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return EntityInterface
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
-  public function agency(): \Drupal\Core\Entity\EntityInterface {
+  public function agency(): EntityInterface {
     return Drupal::entityTypeManager()->getStorage('gtfs_agency')->load($this->get('agency_id')->target_id);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/gtfs/src/Entity/GTFSObjectInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
    /**
     * Gets the GTFS Entity revision author.
     *
-    * @return \Drupal\user\UserInterface
+    * @return UserInterface
     *   The user entity for the revision author.
     */
    public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


88) modules/contrib/gtfs/src/Entity/GTFSEntityBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Entity;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\RevisionableContentEntityBase;
@@ @@
         case 'file':
         case 'image':
           $obj = $this->get($name)->get(0);
-          $value = $obj ? file_create_url(File::load($obj->target_id)->getFileUri()) : '';
+          $value = $obj ? \Drupal::service('file_url_generator')->generateAbsoluteString(File::load($obj->target_id)->getFileUri()) : '';
           break;
         default:
           $value = $this->get($name)->value;
@@ @@
   /**
    * Set up some fields common to all our GTFS entities.
    *
-   * @param Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *
-   * @return array|\Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return array|FieldDefinitionInterface[]
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
     $fields = parent::baseFieldDefinitions($entity_type);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/gtfs/src/Entity/Frequency.php:95

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the trip associated with this stoptime.
    *
-   * @return \Drupal\gtfs\Entity\Trip
+   * @return Trip
    *   The associated trip
    */
   public function trip() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/gtfs/src/Entity/FeedInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the GTFS Feed revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


91) modules/contrib/gtfs/src/Entity/Feed/Importer.php:104

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the feed from which entities are being imported.
    *
-   * @return \Drupal\gtfs\Entity\FeedInterface
+   * @return FeedInterface
    *   The feed associated with the import.
    */
   public function getFeed(): FeedInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


92) modules/contrib/gtfs/src/Entity/Feed/Downloader.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Entity\Feed;

+use Drupal\Core\Archiver\ArchiverException;
 use Drupal;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\gtfs\Entity\FeedInterface;
@@ @@
   /**
    * The feed which is being downloaded.
    *
-   * @var \Drupal\gtfs\Entity\FeedInterface
+   * @var FeedInterface
    */
   private $feed;

@@ @@
   /**
    * Constructs a new importer instance.
    *
-   * @param \Drupal\gtfs\Entity\FeedInterface $feed
+   * @param FeedInterface $feed
    *   A Feed object.
    */
   public function __construct(FeedInterface $feed) {
@@ @@

     try {
       $parsed_url = parse_url($url);
-      /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+      /** @var FileSystemInterface $file_system */
       $file_system = \Drupal::service('file_system');
       if (is_dir($file_system->realpath($destination))) {
         // Prevent URIs with triple slashes when glueing parts together.
@@ @@
    * @return null
    *
    * @throws \Exception
-   * @throws \Drupal\Core\Archiver\ArchiverException
+   * @throws ArchiverException
    */
   public function extract(&$context) {
     if (!$this->downloadedFile) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


93) modules/contrib/gtfs/src/Entity/Feed.php:122

    ---------- begin diff ----------
@@ @@
    * @param array $filesToImport
    *  The files within the GTFS zip to import
    *
-   * @return \Drupal\gtfs\Entity\Feed\Importer
+   * @return Importer
    * @throws \Exception
    */
   public function newImport(array $filesToImport = [], $full_import = TRUE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


94) modules/contrib/gtfs/src/Entity/CalendarDate.php:110

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the associated {@see \Drupal\gtfs\Entity\Service}.
    *
-   * @return \Drupal\gtfs\Entity\Service
+   * @return Service
    */
   public function service(): Service {
     $service_id = $this->get('service_id')->target_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


95) modules/contrib/gtfs/src/Entity/Agency.php:134

    ---------- begin diff ----------
@@ @@
   /**
    * Gets all route ids associated with the agency.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *  A query for routes matching this agency.
    */
   public function routeIds(): QueryInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/gtfs/src/Controller/TripController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_trip_revision) {
     $trip = $this->entityTypeManager()->getStorage('gtfs_trip')->loadRevision($gtfs_trip_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_trip_revision) {
     $trip = $this->entityTypeManager()->getStorage('gtfs_trip')->loadRevision($gtfs_trip_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Trip.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_trip
+   * @param GTFSObjectInterface $gtfs_trip
    *   A GTFS Trip object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_trip) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $trip_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/gtfs/src/Controller/StopTimeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_stop_time_revision) {
     $stop_time = $this->entityTypeManager()->getStorage('gtfs_stop_time')->loadRevision($gtfs_stop_time_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_stop_time_revision) {
     $stop_time = $this->entityTypeManager()->getStorage('gtfs_stop_time')->loadRevision($gtfs_stop_time_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Stop Time.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_stop_time
+   * @param GTFSObjectInterface $gtfs_stop_time
    *   A GTFS Stop Time object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_stop_time) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $stop_time_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


98) modules/contrib/gtfs/src/Controller/StopController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_stop_revision) {
     $stop = $this->entityTypeManager()->getStorage('gtfs_stop')->loadRevision($gtfs_stop_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_stop_revision) {
     $stop = $this->entityTypeManager()->getStorage('gtfs_stop')->loadRevision($gtfs_stop_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Stop.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_stop
+   * @param GTFSObjectInterface $gtfs_stop
    *   A GTFS Stop object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_stop) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $stop_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


99) modules/contrib/gtfs/src/Controller/ShapeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_shape_revision) {
     $shape = $this->entityTypeManager()->getStorage('gtfs_shape')->loadRevision($gtfs_shape_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_shape_revision) {
     $shape = $this->entityTypeManager()->getStorage('gtfs_shape')->loadRevision($gtfs_shape_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Shape.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_shape
+   * @param GTFSObjectInterface $gtfs_shape
    *   A GTFS Shape object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_shape) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $shape_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


100) modules/contrib/gtfs/src/Controller/ServiceController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_service_revision) {
     $service = $this->entityTypeManager()->getStorage('gtfs_service')->loadRevision($gtfs_service_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_service_revision) {
     $service = $this->entityTypeManager()->getStorage('gtfs_service')->loadRevision($gtfs_service_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Service.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_service
+   * @param GTFSObjectInterface $gtfs_service
    *   A GTFS Service object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_service) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $service_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


101) modules/contrib/gtfs/src/Controller/RouteController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_route_revision) {
     $route = $this->entityTypeManager()->getStorage('gtfs_route')->loadRevision($gtfs_route_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_route_revision) {
     $route = $this->entityTypeManager()->getStorage('gtfs_route')->loadRevision($gtfs_route_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Route.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_route
+   * @param GTFSObjectInterface $gtfs_route
    *   A GTFS Route object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_route) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $route_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


102) modules/contrib/gtfs/src/Controller/FrequencyController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_frequency_revision) {
     $frequency = $this->entityTypeManager()->getStorage('gtfs_frequency')->loadRevision($gtfs_frequency_revision);
@@ @@
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_frequency_revision) {
     $frequency = $this->entityTypeManager()->getStorage('gtfs_frequency')->loadRevision($gtfs_frequency_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Frequency.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_frequency
+   * @param GTFSObjectInterface $gtfs_frequency
    *   A GTFS Frequency object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_frequency) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $frequency_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


103) modules/contrib/gtfs/src/Controller/FeedController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_feed_revision) {
     $feed = $this->entityTypeManager()->getStorage('gtfs_feed')->loadRevision($gtfs_feed_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_feed_revision) {
     $feed = $this->entityTypeManager()->getStorage('gtfs_feed')->loadRevision($gtfs_feed_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Feed.
    *
-   * @param \Drupal\gtfs\Entity\FeedInterface $gtfs_feed
+   * @param FeedInterface $gtfs_feed
    *   A GTFS Feed object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(FeedInterface $gtfs_feed) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\FeedInterface $revision */
+      /** @var FeedInterface $revision */
       $revision = $feed_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
@@ @@
     ];
     // Get all the feeds
     $feeds = Feed::loadMultiple();
-    /** @var \Drupal\gtfs\Entity\FeedInterface $feed */
+    /** @var FeedInterface $feed */
     foreach($feeds as $feed) {
       $downloader = new Downloader($feed);
       $context = []; // Fake context object. The downloader usually operates in batch
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


104) modules/contrib/gtfs/src/Controller/FareAttributeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_fare_attribute_revision) {
     $fare_attribute = $this->entityTypeManager()->getStorage('gtfs_fare_attribute')->loadRevision($gtfs_fare_attribute_revision);
@@ @@
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_fare_attribute_revision) {
     $fare_attribute = $this->entityTypeManager()->getStorage('gtfs_fare_attribute')->loadRevision($gtfs_fare_attribute_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Fare Attribute .
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_fare_attribute
+   * @param GTFSObjectInterface $gtfs_fare_attribute
    *   A GTFS FareAttribute  object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_fare_attribute) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $fare_attribute_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


105) modules/contrib/gtfs/src/Controller/DirectionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    *
    * @return array
    *   An array suitable for drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_direction_revision) {
     $direction = $this->entityTypeManager()->getStorage('gtfs_direction')->loadRevision($gtfs_direction_revision);
@@ @@
    *
    * @return string
    *   The page title.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_direction_revision) {
     $direction = $this->entityTypeManager()->getStorage('gtfs_direction')->loadRevision($gtfs_direction_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Direction.
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_direction
+   * @param GTFSObjectInterface $gtfs_direction
    *   A GTFS Direction object.
    *
    * @return array
    *   An array as expected by drupal_render().
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_direction) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $direction_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


106) modules/contrib/gtfs/src/Controller/CalendarDateController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($calendar_date_revision) {
     $calendar_date = $this->entityTypeManager()->getStorage('gtfs_calendar_date')->loadRevision($calendar_date_revision);
@@ @@
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($calendar_date_revision) {
     $calendar_date = $this->entityTypeManager()->getStorage('gtfs_calendar_date')->loadRevision($calendar_date_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Calendar Date .
    *
-   * @param \Drupal\gtfs\Entity\GTFSObjectInterface $gtfs_calendar_date
+   * @param GTFSObjectInterface $gtfs_calendar_date
    *   A GTFS Calendar Date object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(GTFSObjectInterface $gtfs_calendar_date) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $calendar_date_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


107) modules/contrib/gtfs/src/Controller/AgencyController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\gtfs\Entity\GTFSObjectInterface;
 use Drupal\gtfs\Entity\Agency;
 use Drupal;
 use Drupal\Component\Utility\Xss;
@@ @@
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($gtfs_agency_revision) {
     $agency = $this->entityTypeManager()->getStorage('gtfs_agency')->loadRevision($gtfs_agency_revision);
@@ @@
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($gtfs_agency_revision) {
     $agency = $this->entityTypeManager()->getStorage('gtfs_agency')->loadRevision($gtfs_agency_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a GTFS Agency .
    *
-   * @param \Drupal\gtfs\Entity\Agency $gtfs_agency
+   * @param Agency $gtfs_agency
    *   A GTFS Agency object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   public function revisionOverview(Agency $gtfs_agency) {
     $account = $this->currentUser();
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $revision */
+      /** @var GTFSObjectInterface $revision */
       $revision = $gtfs_agency_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


108) modules/contrib/gtfs/src/Commands/ImportCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\gtfs\Commands;

+use Drupal\gtfs\Entity\Feed\Downloader;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityTypeRepositoryInterface;
@@ @@
 class ImportCommands extends DrushCommands {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   private $entityTypeRepository;

   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

   /**
-   * @var \Drupal\gtfs\Entity\Feed\Importer
+   * @var Importer
    */
   private $importer;

   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entityTypeRepository
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeRepositoryInterface $entityTypeRepository
+   * @param FileSystemInterface $fileSystem
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeRepositoryInterface $entityTypeRepository, FileSystemInterface $fileSystem, LoggerChannelFactoryInterface $loggerChannelFactory) {
     $this->entityTypeManager = $entityTypeManager;
@@ @@
   public function importFeed($feedId, $options = ['entities' => 'all']) {
     $this->logger()->notice("Beginning to import feed {$feedId}");
     $feed = Feed::load($feedId);
-    $downloader = new Feed\Downloader($feed);
+    $downloader = new Downloader($feed);
     $this->logger()->notice("Downloading feed");
     $batch = $downloader->batch();
     $batch['sets'] = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


109) modules/contrib/gtfs/src/Commands/DeleteCommands.php:8

    ---------- begin diff ----------
@@ @@
 class DeleteCommands extends DrushCommands {

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

   /**
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    */
   public function __construct(LoggerChannelFactoryInterface $loggerChannelFactory) {
     $this->loggerChannelFactory = $loggerChannelFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


110) modules/contrib/gtfs/gtfs.module:0

    ---------- begin diff ----------
@@ @@
-<?php /** @noinspection PhpUnused */
+<?php use Drupal\Core\Entity\EntityStorageException;
+use Drupal\gtfs\Entity\GTFSObjectInterface;
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\gtfs\Entity\Stop;
+use Drupal\gtfs\Entity\FeedInterface;
+/** @noinspection PhpUnused */

 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
  */
 function gtfs_gtfs_import_entities_alter(&$map) {
   // Get and parse the .yml file.
-  $file_entity_yaml = file_get_contents(drupal_get_path('module', 'gtfs') . '/file_entity_map.yml');
+  $file_entity_yaml = file_get_contents(\Drupal::service('extension.list.module')->getPath('gtfs') . '/file_entity_map.yml');
   $file_entity_map = Yaml::parse($file_entity_yaml);
   // Merge with the map being altered
   $map = array_merge($map, $file_entity_map);
@@ @@
  *
  * @param $element
  *  A render array
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $context
  */
 function gtfs_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
@@ @@
  * entity_reference_revisions doesn't account for by default, so we do it here.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function gtfs_form_alter(&$form, FormStateInterface $form_state) {
   // If we're updating a form where the feed_reference has already been set.
@@ @@
  * an entity sticks to the proper feed revision.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function gtfs_feed_reference_revision_set($form, FormStateInterface &$form_state) {
-  /** @var \Drupal\gtfs\Entity\GTFSObjectInterface $entity */
+  /** @var GTFSObjectInterface $entity */
   $entity = $form_state->getFormObject()->getEntity();
   $feed_reference = $form_state->getValue('feed_reference')[0];
   $entity->set('feed_reference', $feed_reference);
@@ @@
  * @param string $class
  *   The class of ids.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function gtfs_save_chunk_of_ids(array $chunk, string $class) {
   foreach ($chunk as $id) {
-    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+    /** @var ContentEntityBase $entity */
     $entity = $class::load($id);
     if (!$entity) {
       Drupal::logger('gtfs')->notice("Unable to load {$class} with id {$id}");
@@ @@
  * Implements hook_entitytype_view.
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  * @param $view_mode
  *
  * @throws \ReflectionException
@@ @@
   $entity_types = gtfs_get_entity_types();

   foreach ($entity_types  as $type => $class) {
-    /** @var \Drupal\Core\Entity\ContentEntityBase $class */
+    /** @var ContentEntityBase $class */
     $count = Drupal::database()->query(
       "SELECT count(*)
       FROM {{$type}_field_data}
@@ @@
 function gtfs_get_entity_types() {
   $all_entity_types = Drupal::service('entity_type.manager')->getDefinitions();
   $entity_types = [];
-    /** @var \Drupal\Core\Entity\ContentEntityBase $class */
+    /** @var ContentEntityBase $class */
   foreach ($all_entity_types  as $type => $definition) {
     $class = $definition->getClass();
     $reflect = new ReflectionClass($class);
@@ @@
     throw new \Error('No agency found for feed ' . $feedId);
   }
   $entity_types = gtfs_get_entity_types();
-    /** @var \Drupal\Core\Entity\ContentEntityBase $class */
+    /** @var ContentEntityBase $class */
   foreach ($entity_types as $type => $class) {
     if ($type === 'gtfs_agency') continue;
     $instance = $class::create();
@@ @@

 function gtfs_add_parent_station_to_stop($stop_id, $parent_station_id, $feed_id) {
   try {
-    $station_entity = \Drupal\gtfs\Entity\Stop::getById($stop_id, $feed_id);
-    $parent_station = \Drupal\gtfs\Entity\Stop::getById($parent_station_id, $feed_id);
+    $station_entity = Stop::getById($stop_id, $feed_id);
+    $parent_station = Stop::getById($parent_station_id, $feed_id);
   } catch (\Throwable $e) {
     \Drupal::logger('Invalid import')->notice($e->getMessage());
   }
@@ @@
     ->execute();
 }

-function gtfs_gtfs_prepare_post_source_table_alter(&$batch, \Drupal\gtfs\Entity\FeedInterface $feed) {
+function gtfs_gtfs_prepare_post_source_table_alter(&$batch, FeedInterface $feed) {
   $batch['operations'] = [
     'gtfs_repair_source_table_routes',
     [$feed->id()]
   ];
-}
+}
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 110 files have been changed by Rector                                     

