diff --git a/modules/http_client_manager_example/src/Controller/ExampleController.php b/modules/http_client_manager_example/src/Controller/ExampleController.php
index c26bbb5..0cc160a 100644
--- a/modules/http_client_manager_example/src/Controller/ExampleController.php
+++ b/modules/http_client_manager_example/src/Controller/ExampleController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\http_client_manager_example\Controller;
 
+use Drupal\http_client_manager_example\Plugin\HttpServiceApiWrapper\HttpServiceApiWrapperPosts;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
 use Drupal\http_client_manager\Entity\HttpConfigRequest;
@@ -20,21 +21,21 @@ class ExampleController extends ControllerBase {
   /**
    * JsonPlaceholder Http Client.
    *
-   * @var \Drupal\http_client_manager\HttpClientInterface
+   * @var HttpClientInterface
    */
   protected $httpClient;
 
   /**
    * The Posts Api Wrapper service.
    *
-   * @var \Drupal\http_client_manager_example\Plugin\HttpServiceApiWrapper\HttpServiceApiWrapperPosts
+   * @var HttpServiceApiWrapperPosts
    */
   protected $api;
 
   /**
    * The HTTP Service Api Wrapper Factory service.
    *
-   * @var \Drupal\http_client_manager\HttpServiceApiWrapperFactoryInterface
+   * @var HttpServiceApiWrapperFactoryInterface
    */
   protected $apiFactory;
 
@@ -61,7 +62,7 @@ class ExampleController extends ControllerBase {
   /**
    * Get Client.
    *
-   * @return \Drupal\http_client_manager\HttpClientInterface
+   * @return HttpClientInterface
    *   The Http Client instance.
    */
   public function getClient() {
diff --git a/modules/http_client_manager_example/src/EventSubscriber/HttpClientManagerExampleSubscriber.php b/modules/http_client_manager_example/src/EventSubscriber/HttpClientManagerExampleSubscriber.php
index cd40402..9fb6b66 100644
--- a/modules/http_client_manager_example/src/EventSubscriber/HttpClientManagerExampleSubscriber.php
+++ b/modules/http_client_manager_example/src/EventSubscriber/HttpClientManagerExampleSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\http_client_manager_example\EventSubscriber;
 
+use Psr\Http\Message\MessageInterface;
 use Drupal\http_client_manager\Event\HttpClientEvents;
 use Drupal\http_client_manager\Event\HttpClientHandlerStackEvent;
 use GuzzleHttp\Middleware;
@@ -26,7 +27,7 @@ class HttpClientManagerExampleSubscriber implements EventSubscriberInterface {
    * This method is called whenever the http_client.handler_stack event is
    * dispatched.
    *
-   * @param \Drupal\http_client_manager\Event\HttpClientHandlerStackEvent $event
+   * @param HttpClientHandlerStackEvent $event
    *   The HTTP Client Handler stack event.
    */
   public function onHandlerStack(HttpClientHandlerStackEvent $event) {
@@ -42,10 +43,10 @@ class HttpClientManagerExampleSubscriber implements EventSubscriberInterface {
   /**
    * Add example service HTTP Header.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   The current Request object.
    *
-   * @return \Psr\Http\Message\MessageInterface
+   * @return MessageInterface
    *   Return an instance with the provided value for the specified header.
    */
   public function addExampleServiceHttpHeader(RequestInterface $request) {
diff --git a/src/Controller/HttpClientManagerPreview.php b/src/Controller/HttpClientManagerPreview.php
index 5fa1786..e9c92a7 100644
--- a/src/Controller/HttpClientManagerPreview.php
+++ b/src/Controller/HttpClientManagerPreview.php
@@ -17,7 +17,7 @@ class HttpClientManagerPreview extends ControllerBase {
   /**
    * Drupal\http_client_manager\HttpServiceApiHandler definition.
    *
-   * @var \Drupal\http_client_manager\HttpServiceApiHandler
+   * @var HttpServiceApiHandler
    */
   protected $httpServicesApi;
 
diff --git a/src/Controller/HttpConfigRequestController.php b/src/Controller/HttpConfigRequestController.php
index 19da62f..0eab771 100644
--- a/src/Controller/HttpConfigRequestController.php
+++ b/src/Controller/HttpConfigRequestController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\http_client_manager\Controller;
 
+use Drupal\http_client_manager\Entity\HttpConfigRequest;
+use GuzzleHttp\Command\Result;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\vardumper\VarDumper\VarDumperDebug;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -54,14 +56,14 @@ class HttpConfigRequestController extends ControllerBase {
    */
   public function execute($serviceApi, $commandName, $http_config_request) {
     $storage = $this->entityTypeManager()->getStorage('http_config_request');
-    /** @var \Drupal\http_client_manager\Entity\HttpConfigRequest $config_request */
+    /** @var HttpConfigRequest $config_request */
     $config_request = $storage->load($http_config_request);
     $request = [
       'serviceApi' => $serviceApi,
       'commandName' => $commandName,
       'parameters' => array_filter($config_request->getParameters()),
     ];
-    /** @var \GuzzleHttp\Command\Result $response */
+    /** @var Result $response */
     $response = $config_request->execute();
 
     if ($this->varDumper) {
diff --git a/src/Event/HttpClientCallPreExecuteEvent.php b/src/Event/HttpClientCallPreExecuteEvent.php
index 5f5482b..50de104 100644
--- a/src/Event/HttpClientCallPreExecuteEvent.php
+++ b/src/Event/HttpClientCallPreExecuteEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\http_client_manager\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use GuzzleHttp\Command\Command;
 use GuzzleHttp\Command\Guzzle\GuzzleClient;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class HttpClientCallPreExecuteEvent.
@@ -15,22 +15,22 @@ class HttpClientCallPreExecuteEvent extends Event {
 
   /**
    * The client.
-   * @var \GuzzleHttp\Command\Guzzle\GuzzleClient $client
+   * @var GuzzleClient $client
    */
   public $client;
 
   /**
    * The command to be executed.
-   * @var \GuzzleHttp\Command\Command $command
+   * @var Command $command
    */
   public $command;
 
   /**
    * HttpClientCallPreExecute constructor.
    *
-   * @param \GuzzleHttp\Command\Guzzle\GuzzleClient $client
+   * @param GuzzleClient $client
    *   The client to execute the command.
-   * @param \GuzzleHttp\Command\Command $command
+   * @param Command $command
    *   The command to be executed.
    */
   public function __construct(GuzzleClient $client, Command $command) {
diff --git a/src/Event/HttpClientHandlerStackEvent.php b/src/Event/HttpClientHandlerStackEvent.php
index 85ca8d4..6c2e248 100644
--- a/src/Event/HttpClientHandlerStackEvent.php
+++ b/src/Event/HttpClientHandlerStackEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\http_client_manager\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use GuzzleHttp\HandlerStack;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class HttpClientHandlerStackEvent.
@@ -15,7 +15,7 @@ class HttpClientHandlerStackEvent extends Event {
   /**
    * The GuzzleHttp Handler stack.
    *
-   * @var \GuzzleHttp\HandlerStack
+   * @var HandlerStack
    */
   protected $handlerStack;
 
@@ -29,7 +29,7 @@ class HttpClientHandlerStackEvent extends Event {
   /**
    * HttpClientHandlerStackEvent constructor.
    *
-   * @param \GuzzleHttp\HandlerStack $handler_stack
+   * @param HandlerStack $handler_stack
    *   The GuzzleHttp Handler stack.
    * @param string $http_service_api
    *   The HTTP Service Api id.
@@ -42,7 +42,7 @@ class HttpClientHandlerStackEvent extends Event {
   /**
    * Get Handler stack.
    *
-   * @return \GuzzleHttp\HandlerStack
+   * @return HandlerStack
    *   The GuzzleHttp Handler stack.
    */
   public function getHandlerStack() {
diff --git a/src/Form/HttpClientManagerConfigForm.php b/src/Form/HttpClientManagerConfigForm.php
index 282e78a..47e9443 100644
--- a/src/Form/HttpClientManagerConfigForm.php
+++ b/src/Form/HttpClientManagerConfigForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\http_client_manager\Form;
 
+use Drupal\http_client_manager\HttpServiceApiHandlerInterface;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,7 +19,7 @@ class HttpClientManagerConfigForm extends ConfigFormBase {
   /**
    * The HTTP Service API Handler service.
    *
-   * @var \Drupal\http_client_manager\HttpServiceApiHandlerInterface
+   * @var HttpServiceApiHandlerInterface
    */
   protected $httpServicesApi;
 
diff --git a/src/Form/HttpConfigRequestForm.php b/src/Form/HttpConfigRequestForm.php
index 72a4bd9..1ce9be0 100644
--- a/src/Form/HttpConfigRequestForm.php
+++ b/src/Form/HttpConfigRequestForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\http_client_manager\Form;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\http_client_manager\HttpServiceApiHandler;
+use Drupal\http_client_manager\HttpClientManagerFactory;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\http_client_manager\HttpClientManagerFactoryInterface;
@@ -20,32 +23,32 @@ class HttpConfigRequestForm extends EntityForm {
   /**
    * Current Request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;
 
   /**
    * Drupal\http_client_manager\HttpServiceApiHandler definition.
    *
-   * @var \Drupal\http_client_manager\HttpServiceApiHandler
+   * @var HttpServiceApiHandler
    */
   protected $httpServicesApi;
 
   /**
    * Drupal\http_client_manager\HttpClientManagerFactory definition.
    *
-   * @var \Drupal\http_client_manager\HttpClientManagerFactory
+   * @var HttpClientManagerFactory
    */
   protected $httpClientFactory;
 
   /**
    * HttpConfigRequestForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The Request Stack Service.
-   * @param \Drupal\http_client_manager\HttpServiceApiHandlerInterface $http_services_api
+   * @param HttpServiceApiHandlerInterface $http_services_api
    *   The Http Service Api Handler service.
-   * @param \Drupal\http_client_manager\HttpClientManagerFactoryInterface $http_client_manager_factory
+   * @param HttpClientManagerFactoryInterface $http_client_manager_factory
    *   The Http Client Factory service.
    */
   public function __construct(
@@ -116,7 +119,7 @@ class HttpConfigRequestForm extends EntityForm {
     $client = $this->httpClientFactory->get($serviceApi);
     $parameters = $http_config_request->get('parameters');
 
-    /** @var \GuzzleHttp\Command\Guzzle\Parameter $param */
+    /** @var Parameter $param */
     foreach ($client->getCommand($commandName)->getParams() as $param) {
       $name = $param->getName();
       $form['parameters'][$name] = [
@@ -198,7 +201,7 @@ class HttpConfigRequestForm extends EntityForm {
    *   The form element.
    * @param string $input
    *   The input value.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form State instance.
    *
    * @return int|null
@@ -218,7 +221,7 @@ class HttpConfigRequestForm extends EntityForm {
    *   The form element.
    * @param string $input
    *   The input value.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form State instance.
    *
    * @return float|null
@@ -238,7 +241,7 @@ class HttpConfigRequestForm extends EntityForm {
    *   The form element.
    * @param string $input
    *   The input value.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form State instance.
    *
    * @return bool|null
@@ -256,7 +259,7 @@ class HttpConfigRequestForm extends EntityForm {
    *
    * @param array $element
    *   The Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form State instance.
    */
   public function validateJson(array &$element, FormStateInterface $form_state) {
@@ -270,7 +273,7 @@ class HttpConfigRequestForm extends EntityForm {
       return;
     }
 
-    /** @var \GuzzleHttp\Command\Guzzle\Parameter $param */
+    /** @var Parameter $param */
     $param = $element['#command_param'];
     $type = $param->getType();
 
@@ -307,7 +310,7 @@ class HttpConfigRequestForm extends EntityForm {
    *   The form element.
    * @param string $input
    *   The input value.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Form State instance.
    *
    * @return array|null|string
@@ -320,7 +323,7 @@ class HttpConfigRequestForm extends EntityForm {
         return [];
       }
 
-      /** @var \GuzzleHttp\Command\Guzzle\Parameter $param */
+      /** @var Parameter $param */
       $param = $element['#command_param'];
       $assoc = $param->getType() == 'array' ? JSON_OBJECT_AS_ARRAY : JSON_FORCE_OBJECT;
 
@@ -350,7 +353,7 @@ class HttpConfigRequestForm extends EntityForm {
   /**
    * Get JSON Help.
    *
-   * @param \GuzzleHttp\Command\Guzzle\Parameter $param
+   * @param Parameter $param
    *   The Guzzle parameter.
    *
    * @return string
diff --git a/src/Form/HttpServiceApiPreviewForm.php b/src/Form/HttpServiceApiPreviewForm.php
index 5ff18a4..8ea17b6 100644
--- a/src/Form/HttpServiceApiPreviewForm.php
+++ b/src/Form/HttpServiceApiPreviewForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\http_client_manager\Form;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\http_client_manager\HttpServiceApiHandler;
+use Drupal\http_client_manager\HttpClientManagerFactory;
+use GuzzleHttp\Command\Guzzle\Operation;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,41 +26,41 @@ class HttpServiceApiPreviewForm extends FormBase {
   /**
    * Current Request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;
 
   /**
    * Drupal\http_client_manager\HttpServiceApiHandler definition.
    *
-   * @var \Drupal\http_client_manager\HttpServiceApiHandler
+   * @var HttpServiceApiHandler
    */
   protected $httpServicesApi;
 
   /**
    * Drupal\http_client_manager\HttpClientManagerFactory definition.
    *
-   * @var \Drupal\http_client_manager\HttpClientManagerFactory
+   * @var HttpClientManagerFactory
    */
   protected $httpClientFactory;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * HttpConfigRequestForm constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The Request Stack Service.
-   * @param \Drupal\http_client_manager\HttpServiceApiHandlerInterface $http_services_api
+   * @param HttpServiceApiHandlerInterface $http_services_api
    *   The Http Service Api Handler service.
-   * @param \Drupal\http_client_manager\HttpClientManagerFactoryInterface $http_client_manager_factory
+   * @param HttpClientManagerFactoryInterface $http_client_manager_factory
    *   The Http Client Factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager service.
    */
   public function __construct(
@@ -146,10 +150,10 @@ class HttpServiceApiPreviewForm extends FormBase {
       'location' => $this->t('Location'),
     ];
 
-    /** @var \GuzzleHttp\Command\Guzzle\Operation $command */
+    /** @var Operation $command */
     foreach ($commands as $commandName => $command) {
       $rows = [];
-      /** @var \GuzzleHttp\Command\Guzzle\Parameter $param */
+      /** @var Parameter $param */
       foreach ($command->getParams() as $param) {
         $row = [
           'name' => $param->getName(),
@@ -220,7 +224,7 @@ class HttpServiceApiPreviewForm extends FormBase {
    *
    * @param string $commandName
    *   The command name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ -245,7 +249,7 @@ class HttpServiceApiPreviewForm extends FormBase {
   /**
    * Get parameter type.
    *
-   * @param \GuzzleHttp\Command\Guzzle\Parameter $param
+   * @param Parameter $param
    *   A Parameter object.
    *
    * @return string
diff --git a/src/HttpClient.php b/src/HttpClient.php
index 41f9415..f3b483d 100644
--- a/src/HttpClient.php
+++ b/src/HttpClient.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\http_client_manager;
 
+use Guzzle\Service\Loader\FileLoader;
+use GuzzleHttp\Command\ResultInterface;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\http_client_manager\Event\HttpClientEvents;
@@ -35,7 +37,7 @@ class HttpClient implements HttpClientInterface {
   /**
    * Description definition.
    *
-   * @var \GuzzleHttp\Command\Guzzle\Description
+   * @var Description
    */
   protected $description;
 
@@ -63,14 +65,14 @@ class HttpClient implements HttpClientInterface {
   /**
    * Guzzle Client definition.
    *
-   * @var \GuzzleHttp\Command\Guzzle\GuzzleClient
+   * @var GuzzleClient
    */
   protected $client;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -84,14 +86,14 @@ class HttpClient implements HttpClientInterface {
   /**
    * The file locator used to find the service descriptions.
    *
-   * @var \Symfony\Component\Config\FileLocator
+   * @var FileLocator
    */
   protected $fileLocator;
 
   /**
    * The file loader used to load the service descriptions.
    *
-   * @var \Guzzle\Service\Loader\FileLoader
+   * @var FileLoader
    */
   protected $fileLoader;
 
@@ -100,9 +102,9 @@ class HttpClient implements HttpClientInterface {
    *
    * @param string $serviceApi
    *   The service api name for this instance.
-   * @param \Drupal\http_client_manager\HttpServiceApiHandlerInterface $apiHandler
+   * @param HttpServiceApiHandlerInterface $apiHandler
    *   The service api handler instance.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher instance.
    */
   public function __construct($serviceApi, HttpServiceApiHandlerInterface $apiHandler, EventDispatcherInterface $event_dispatcher) {
@@ -142,7 +144,7 @@ class HttpClient implements HttpClientInterface {
   /**
    * Get Client.
    *
-   * @return \GuzzleHttp\Command\Guzzle\GuzzleClient
+   * @return GuzzleClient
    *   The Configured Guzzle client instance.
    */
   protected function getClient() {
@@ -166,7 +168,7 @@ class HttpClient implements HttpClientInterface {
    * @param string $commandName
    *   The Guzzle Command name.
    *
-   * @return \GuzzleHttp\Command\Guzzle\GuzzleClient
+   * @return GuzzleClient
    *   The Configured Guzzle client instance
    */
   protected function getClientByCommand($commandName) {
@@ -204,7 +206,7 @@ class HttpClient implements HttpClientInterface {
    * @param array $config
    *   An array of configurations used to create a new Guzzle Client.
    *
-   * @return \GuzzleHttp\Command\Guzzle\GuzzleClient
+   * @return GuzzleClient
    *   A Guzzle Client instance.
    */
   private function createGuzzleClient(array $config) {
@@ -234,7 +236,7 @@ class HttpClient implements HttpClientInterface {
     }
 
     $event = new HttpClientHandlerStackEvent($config['handler'], $this->serviceApi);
-    $this->eventDispatcher->dispatch(HttpClientEvents::HANDLER_STACK, $event);
+    $this->eventDispatcher->dispatch($event, HttpClientEvents::HANDLER_STACK);
     return $config;
   }
 
@@ -258,7 +260,7 @@ class HttpClient implements HttpClientInterface {
   /**
    * Get File Locator.
    *
-   * @return \Symfony\Component\Config\FileLocator
+   * @return FileLocator
    *   The file locator used to find the service descriptions.
    */
   protected function getFileLocator() {
@@ -279,7 +281,7 @@ class HttpClient implements HttpClientInterface {
   /**
    * Get File Loader.
    *
-   * @return \Guzzle\Service\Loader\FileLoader
+   * @return FileLoader
    *   The file loader used to load the service descriptions.
    */
   protected function getFileLoader() {
@@ -354,7 +356,7 @@ class HttpClient implements HttpClientInterface {
     $client = $this->getClientByCommand($commandName);
     $command = $client->getCommand($commandName, $params);
     $event = new HttpClientCallPreExecuteEvent($client, $command);
-    $this->eventDispatcher->dispatch(HttpClientEvents::CALL_PRE_EXECUTE, $event);
+    $this->eventDispatcher->dispatch($event, HttpClientEvents::CALL_PRE_EXECUTE);
     return $client->execute($command);
   }
 
@@ -366,7 +368,7 @@ class HttpClient implements HttpClientInterface {
    * @param array $arguments
    *   The Guzzle command parameters array.
    *
-   * @return \GuzzleHttp\Command\ResultInterface|mixed
+   * @return ResultInterface|mixed
    *   The Guzzle Command execution result.
    *
    * @see HttpClientInterface::call
diff --git a/src/HttpClientInterface.php b/src/HttpClientInterface.php
index d714703..d6f5efc 100644
--- a/src/HttpClientInterface.php
+++ b/src/HttpClientInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\http_client_manager;
 
+use GuzzleHttp\Command\Guzzle\Operation;
+use GuzzleHttp\Command\ResultInterface;
+use GuzzleHttp\Command\Exception\CommandException;
 /**
  * Interface HttpClientInterface.
  *
@@ -31,7 +34,7 @@ interface HttpClientInterface {
    * @param string $commandName
    *   The command name.
    *
-   * @return \GuzzleHttp\Command\Guzzle\Operation
+   * @return Operation
    *   The api command.
    */
   public function getCommand($commandName);
@@ -44,10 +47,10 @@ interface HttpClientInterface {
    * @param array $params
    *   The Guzzle command parameters array.
    *
-   * @return \GuzzleHttp\Command\ResultInterface
+   * @return ResultInterface
    *   The result of the executed command
    *
-   * @throws \GuzzleHttp\Command\Exception\CommandException
+   * @throws CommandException
    */
   public function call($commandName, array $params = []);
 
diff --git a/src/HttpClientManagerFactoryInterface.php b/src/HttpClientManagerFactoryInterface.php
index 59ab2fb..04da07c 100644
--- a/src/HttpClientManagerFactoryInterface.php
+++ b/src/HttpClientManagerFactoryInterface.php
@@ -15,7 +15,7 @@ interface HttpClientManagerFactoryInterface {
    * @param string $service_api
    *   The service api name.
    *
-   * @return \Drupal\http_client_manager\HttpClientInterface
+   * @return HttpClientInterface
    *   The registered http client for this service api.
    */
   public function get($service_api);
diff --git a/src/HttpConfigRequestHtmlRouteProvider.php b/src/HttpConfigRequestHtmlRouteProvider.php
index 3224e4b..c701469 100644
--- a/src/HttpConfigRequestHtmlRouteProvider.php
+++ b/src/HttpConfigRequestHtmlRouteProvider.php
@@ -35,10 +35,10 @@ class HttpConfigRequestHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -62,10 +62,10 @@ class HttpConfigRequestHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the execute route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getExecuteRoute(EntityTypeInterface $entity_type) {
diff --git a/src/HttpConfigRequestListBuilder.php b/src/HttpConfigRequestListBuilder.php
index 9add514..cd6ddae 100644
--- a/src/HttpConfigRequestListBuilder.php
+++ b/src/HttpConfigRequestListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\http_client_manager;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -18,7 +19,7 @@ class HttpConfigRequestListBuilder extends ConfigEntityListBuilder {
   /**
    * Current Request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;
 
diff --git a/src/HttpServiceApiHandler.php b/src/HttpServiceApiHandler.php
index dfae875..393a2d3 100644
--- a/src/HttpServiceApiHandler.php
+++ b/src/HttpServiceApiHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\http_client_manager;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Discovery\YamlDiscovery;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandler;
@@ -31,21 +32,21 @@ class HttpServiceApiHandler implements HttpServiceApiHandlerInterface {
   /**
    * Drupal\Core\Extension\ModuleHandler definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * Drupal\Core\StringTranslation\TranslationManager definition.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $stringTranslation;
 
   /**
    * Drupal\Core\Controller\ControllerResolver definition.
    *
-   * @var \Drupal\Core\Controller\ControllerResolver
+   * @var ControllerResolver
    */
   protected $controllerResolver;
 
@@ -59,7 +60,7 @@ class HttpServiceApiHandler implements HttpServiceApiHandlerInterface {
   /**
    * The HTTP Client Manager config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -68,13 +69,13 @@ class HttpServiceApiHandler implements HttpServiceApiHandlerInterface {
    *
    * @param string $root
    *   The Application root.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $string_translation
+   * @param TranslationManager $string_translation
    *   The string translation manager.
-   * @param \Drupal\Core\Controller\ControllerResolver $controller_resolver
+   * @param ControllerResolver $controller_resolver
    *   The controller resolver service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct($root, ModuleHandler $module_handler, TranslationManager $string_translation, ControllerResolver $controller_resolver, ConfigFactoryInterface $config_factory) {
@@ -89,7 +90,7 @@ class HttpServiceApiHandler implements HttpServiceApiHandlerInterface {
   /**
    * Gets the YAML discovery.
    *
-   * @return \Drupal\Component\Discovery\YamlDiscovery
+   * @return YamlDiscovery
    *   The YAML discovery.
    */
   protected function getYamlDiscovery() {
diff --git a/src/HttpServiceApiWrapperFactory.php b/src/HttpServiceApiWrapperFactory.php
index 358f10e..cbd9a5b 100644
--- a/src/HttpServiceApiWrapperFactory.php
+++ b/src/HttpServiceApiWrapperFactory.php
@@ -14,7 +14,7 @@ class HttpServiceApiWrapperFactory implements HttpServiceApiWrapperFactoryInterf
   /**
    * An array of HTTP Service Api Wrapper Services.
    *
-   * @var \Drupal\http_client_manager\Plugin\HttpServiceApiWrapper\HttpServiceApiWrapperInterface[]
+   * @var HttpServiceApiWrapperInterface[]
    */
   protected $apiWrappers;
 
diff --git a/src/HttpServiceApiWrapperFactoryInterface.php b/src/HttpServiceApiWrapperFactoryInterface.php
index 3cbbac6..e039d27 100644
--- a/src/HttpServiceApiWrapperFactoryInterface.php
+++ b/src/HttpServiceApiWrapperFactoryInterface.php
@@ -14,7 +14,7 @@ interface HttpServiceApiWrapperFactoryInterface {
   /**
    * Add an HTTP Service API wrapper.
    *
-   * @param \Drupal\http_client_manager\Plugin\HttpServiceApiWrapper\HttpServiceApiWrapperInterface $wrapper
+   * @param HttpServiceApiWrapperInterface $wrapper
    *   A HTTP Service API Wrapper Service.
    * @param string $api
    *   The HTTP Service API name.
@@ -27,7 +27,7 @@ interface HttpServiceApiWrapperFactoryInterface {
    * @param string $name
    *   The HTTP Service API wrapper name.
    *
-   * @return \Drupal\http_client_manager\Plugin\HttpServiceApiWrapper\HttpServiceApiWrapperInterface
+   * @return HttpServiceApiWrapperInterface
    *   An HTTP Service API Wrapper Service.
    *
    * @throws \InvalidArgumentException
diff --git a/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperBase.php b/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperBase.php
index 29574e3..2dd9d8f 100644
--- a/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperBase.php
+++ b/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperBase.php
@@ -32,50 +32,50 @@ abstract class HttpServiceApiWrapperBase implements HttpServiceApiWrapperInterfa
   /**
    * The Http Client Factory Service.
    *
-   * @var \Drupal\http_client_manager\HttpClientManagerFactoryInterface
+   * @var HttpClientManagerFactoryInterface
    */
   protected $httpClientFactory;
 
   /**
    * Drupal\Core\Cache\CacheBackendInterface definition.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The Language Manager Service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Messenger Service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * HttpServiceApiWrapperBase constructor.
    *
-   * @param \Drupal\http_client_manager\HttpClientManagerFactoryInterface $http_client_factory
+   * @param HttpClientManagerFactoryInterface $http_client_factory
    *   The Http Client Factory Service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The Http Client Manager cache bin.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The Language Manager Service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Messenger Service.
    */
   public function __construct(HttpClientManagerFactoryInterface $http_client_factory, CacheBackendInterface $cache, AccountProxyInterface $current_user, LanguageManagerInterface $language_manager, MessengerInterface $messenger) {
@@ -96,7 +96,7 @@ abstract class HttpServiceApiWrapperBase implements HttpServiceApiWrapperInterfa
    * @param mixed $fallback
    *   The fallback value in case of exception.
    *
-   * @return \GuzzleHttp\Command\ResultInterface
+   * @return ResultInterface
    *   The service result.
    */
   protected function call($command, array $args = [], $fallback = []) {
@@ -147,7 +147,7 @@ abstract class HttpServiceApiWrapperBase implements HttpServiceApiWrapperInterfa
   /**
    * Get cached HTTP Config Request.
    *
-   * @param \Drupal\http_client_manager\Entity\HttpConfigRequestInterface $request
+   * @param HttpConfigRequestInterface $request
    *   The HTTP Config Request to be executed.
    * @param int $expire
    *   The cache expiry time.
@@ -181,7 +181,7 @@ abstract class HttpServiceApiWrapperBase implements HttpServiceApiWrapperInterfa
    * This method is meant to be overridden by any Service Api Wrapper.
    * By default it prints the error message by using the Messenger service.
    *
-   * @param \GuzzleHttp\Command\Exception\CommandException $e
+   * @param CommandException $e
    *   The Command Exception object.
    */
   protected function logError(CommandException $e) {
@@ -195,7 +195,7 @@ abstract class HttpServiceApiWrapperBase implements HttpServiceApiWrapperInterfa
    * By default it returns the result array, but it can be used to check if the
    * given response contains errors.
    *
-   * @param \GuzzleHttp\Command\ResultInterface $result
+   * @param ResultInterface $result
    *   The command response.
    *
    * @return array
@@ -208,7 +208,7 @@ abstract class HttpServiceApiWrapperBase implements HttpServiceApiWrapperInterfa
   /**
    * Call by Request.
    *
-   * @param \Drupal\http_client_manager\Request\HttpRequestInterface $request
+   * @param HttpRequestInterface $request
    *   The Request bean.
    *
    * @return array|bool
diff --git a/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperInterface.php b/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperInterface.php
index 8e42169..f7a5b53 100644
--- a/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperInterface.php
+++ b/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\http_client_manager\Plugin\HttpServiceApiWrapper;
 
+use Drupal\http_client_manager\HttpClientInterface;
 /**
  * Interface HttpServiceApiWrapperInterface.
  *
@@ -12,7 +13,7 @@ interface HttpServiceApiWrapperInterface {
   /**
    * Get HTTP Client.
    *
-   * @return \Drupal\http_client_manager\HttpClientInterface
+   * @return HttpClientInterface
    *   The HTTP Client used to make requests.
    */
   public function getHttpClient();
diff --git a/tests/src/Unit/HttpClientManagerFactoryTest.php b/tests/src/Unit/HttpClientManagerFactoryTest.php
index b7a6a15..faf3ce1 100644
--- a/tests/src/Unit/HttpClientManagerFactoryTest.php
+++ b/tests/src/Unit/HttpClientManagerFactoryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\http_client_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\http_client_manager\HttpServiceApiHandlerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -18,6 +19,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class HttpClientManagerFactoryTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests HttpClientManagerFactory::get().
    *
diff --git a/tests/src/Unit/HttpClientTest.php b/tests/src/Unit/HttpClientTest.php
index 0576449..4072f69 100644
--- a/tests/src/Unit/HttpClientTest.php
+++ b/tests/src/Unit/HttpClientTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\http_client_manager\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\http_client_manager\HttpClient;
 use Drupal\http_client_manager\HttpServiceApiHandlerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -17,17 +18,18 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class HttpClientTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The client.
    *
-   * @var \Drupal\http_client_manager\HttpClient
+   * @var HttpClient
    */
   protected $client;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->initClient('test', $this->getServiceApiInfo());
   }
@@ -73,11 +75,10 @@ class HttpClientTest extends UnitTestCase {
    * Tests HttpClient::getCommand() with wrong argument.
    *
    * @covers ::getCommand
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testGetCommandWhichDoesNotExists() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $command = $this->client->getCommand('Missing');
     $this->assertEmpty($command);
   }
@@ -113,11 +114,10 @@ class HttpClientTest extends UnitTestCase {
    * Tests HttpClient::call() with wrong command name.
    *
    * @covers ::call
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testCallWithWrongCommandName() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $this->client->call('Missing');
   }
 
@@ -152,11 +152,10 @@ class HttpClientTest extends UnitTestCase {
    * Tests HttpClient::__call() with wrong command name.
    *
    * @covers ::__call
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testMagicMethodCallWithWrongCommandName() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $this->client->missing();
   }
 
