diff --git a/ghost_inspector.module b/ghost_inspector.module
index ee9f6e0..433a9ac 100644
--- a/ghost_inspector.module
+++ b/ghost_inspector.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Session\UserSession;
+use Drupal\Core\Render\Markup;
+use GuzzleHttp\Exception\GuzzleException;
 /**
  * @file
  * Ghost Inspector module functions.
@@ -56,7 +59,7 @@ function ghost_inspector_page_attachments(array &$page) {
 function ghost_inspector_cron() {
   // Retrieve the account switcher service. Ideally you should inject the account_switcher service into your class.
   $accountSwitcher = Drupal::service('account_switcher');
-  $accountSwitcher->switchTo(new \Drupal\Core\Session\UserSession(['uid' => 1]));
+  $accountSwitcher->switchTo(new UserSession(['uid' => 1]));
 
   // Pull all new suite test results.
   $ghost_inspector_entity = \Drupal::entityTypeManager()->getStorage('ghost_inspector')->loadMultiple();
@@ -94,7 +97,7 @@ function ghost_inspector_preprocess_views_view_field(&$variables)
         $video_markup .= '</video>';
         $video_markup .= '<a href="' . $variables['output'] . '" target="_blank">Alternative link to view video.</a>';
 
-        $variables['output'] = Drupal\Core\Render\Markup::create($video_markup);
+        $variables['output'] = Markup::create($video_markup);
         break;
     }
   }
@@ -155,7 +158,7 @@ function getDatetime($element, $type = 'datetime'): string
  *
  * @return string
  *   Return json string.
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function getSuite(EntityInterface $entity): string
 {
@@ -241,7 +244,7 @@ function syncComments($nid, array $comments = [])
   $saveComments = $paragraphsComments;
   //Get paragraphs comments ids from Drupal.
   foreach ( $paragraphsComments as $element ) {
-    $p = \Drupal\paragraphs\Entity\Paragraph::load( $element['target_id'] );
+    $p = Paragraph::load( $element['target_id'] );
     $oldCommments[] = $p->field_id->getValue()[0]['value'];
   }
   $resultNewComments = array_diff($newComments, $oldCommments);
@@ -250,7 +253,7 @@ function syncComments($nid, array $comments = [])
   // Remove paragraph.
   if (count($paragraphsComments) > 0 ) {
     foreach ($paragraphsComments as $key => $element) {
-      $p = \Drupal\paragraphs\Entity\Paragraph::load($element['target_id']);
+      $p = Paragraph::load($element['target_id']);
       if (isset($p->field_id)) {
         $field_id = $p->field_id->getValue();
         if (in_array($field_id[0]['value'], $resultRemovedComments)) {
@@ -305,7 +308,7 @@ function purgeTestRuns(EntityInterface $entity)
     ->execute();
 
   if (!empty($nids)) {
-    $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+    $nodes = Node::loadMultiple($nids);
     foreach ($nodes as $node) {
 
       $date_execution_finished = new DateTime(getDatetime($node->field_date_execution_finished->getValue(), 'date'));
@@ -359,7 +362,7 @@ function getSteps($steps): array
  *
  * @return array
  *   Return array.
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function setListResultsTestsInSuiteRun($suite_result_id, EntityInterface $entity): array
 {
@@ -469,7 +472,7 @@ function getEmailNotificationBody($entity, $field_id): string
   if (strpos($body, '[test-results-table]') !== false) {
     $element = views_embed_view('ghost_inspector_suite_dashboard', 'block_5', $field_id);
     $test_results_table = \Drupal::service('renderer')->renderRoot($element);
-    $body = str_replace("[test-results-table]", render($test_results_table), $body);
+    $body = str_replace("[test-results-table]", \Drupal::service('renderer')->render($test_results_table), $body);
   }
 
   return $body;
@@ -526,7 +529,7 @@ function failedTestRunEmailNotification(EntityInterface $entity)
  *
  * @param EntityInterface $entity
  * @throws EntityStorageException
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function getListResultsOnSuite(EntityInterface $entity)
 {
@@ -645,7 +648,7 @@ function ghost_inspector_form_alter(&$form, &$form_state, $form_id): array
     $nids = \Drupal::entityQuery('node')->condition('type', 'ghost_inspector')->execute();
 
     if (count($nids) > 0) {
-      $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+      $nodes = Node::loadMultiple($nids);
 
       $suite_name_options = [];
       $year_options = [];
@@ -750,7 +753,7 @@ function ghost_inspector_views_query_alter(ViewExecutable $view, QueryPluginBase
       ->execute();
 
     if (count($nids) > 0) {
-      $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
+      $nodes = Node::loadMultiple($nids);
 
       // Distinct List of nodes - Node will be the last run per suite.
       $last_results = [];
@@ -781,7 +784,7 @@ function ghost_inspector_views_query_alter(ViewExecutable $view, QueryPluginBase
  *
  * @return string
  *   Return json string.
- * @throws \GuzzleHttp\Exception\GuzzleException
+ * @throws GuzzleException
  */
 function executeSuite(EntityInterface $entity): string
 {
diff --git a/src/Controller/DefaultController.php b/src/Controller/DefaultController.php
index 79ee33f..0a2ad38 100644
--- a/src/Controller/DefaultController.php
+++ b/src/Controller/DefaultController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ghost_inspector\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 
 
@@ -17,12 +21,12 @@ class DefaultController extends ControllerBase
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function enableEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
@@ -38,12 +42,12 @@ class DefaultController extends ControllerBase
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function disableEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
@@ -62,12 +66,12 @@ class DefaultController extends ControllerBase
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function syncEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
@@ -84,12 +88,12 @@ class DefaultController extends ControllerBase
    * @param string $ghost_inspector
    *   The ghost inspector name.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function executeSuiteEntity($ghost_inspector) {
     $entity = $this->entityTypeManager()->getStorage('ghost_inspector')->load($ghost_inspector);
diff --git a/src/Form/GhostInspectorEntityForm.php b/src/Form/GhostInspectorEntityForm.php
index 2d09efb..17085e8 100644
--- a/src/Form/GhostInspectorEntityForm.php
+++ b/src/Form/GhostInspectorEntityForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ghost_inspector\Form;
 
+use Drupal\ghost_inspector\Entity\GhostInspectorEntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,23 +20,23 @@ class GhostInspectorEntityForm extends EntityForm {
   /**
    * The drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Drupal\Core\Extension\ThemeHandler definition.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The drupal state.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The theme handler.
    */
   public function __construct(StateInterface $state, ThemeHandlerInterface $themeHandler) {
@@ -56,7 +60,7 @@ class GhostInspectorEntityForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\ghost_inspector\Entity\GhostInspectorEntityInterface $ghost_inspector */
+    /** @var GhostInspectorEntityInterface $ghost_inspector */
     $ghost_inspector = $this->entity;
 
     // Basics API setup.
@@ -188,9 +192,9 @@ class GhostInspectorEntityForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws GuzzleException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $ghost_inspector = $this->entity;
diff --git a/src/GhostInspectorEntityHtmlRouteProvider.php b/src/GhostInspectorEntityHtmlRouteProvider.php
index 04a2dc5..5f55af5 100644
--- a/src/GhostInspectorEntityHtmlRouteProvider.php
+++ b/src/GhostInspectorEntityHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class GhostInspectorEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/GhostInspectorEntityListBuilder.php b/src/GhostInspectorEntityListBuilder.php
index edc2460..7be9d40 100644
--- a/src/GhostInspectorEntityListBuilder.php
+++ b/src/GhostInspectorEntityListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ghost_inspector;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use DateTime;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
@@ -20,7 +21,7 @@ class GhostInspectorEntityListBuilder extends ConfigEntityListBuilder {
   /**
    * The config factory that knows what is overwritten.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -38,11 +39,11 @@ class GhostInspectorEntityListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory) {
@@ -125,7 +126,7 @@ class GhostInspectorEntityListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $operations = parent::getDefaultOperations($entity);
 
     if (!$entity->get('status') && $entity->hasLinkTemplate('enable') && strpos($entity->get('name'), "API Call Failed") === FALSE) {
diff --git a/src/GhostInspectorService.php b/src/GhostInspectorService.php
index 446d321..c65febd 100644
--- a/src/GhostInspectorService.php
+++ b/src/GhostInspectorService.php
@@ -12,7 +12,7 @@ class GhostInspectorService {
   /**
    * GuzzleHttp\Client definition.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
