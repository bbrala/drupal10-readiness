modules/contrib/mass_contact/mass_contact.install
modules/contrib/mass_contact/mass_contact.module
modules/contrib/mass_contact/src/Annotation/GroupingMethod.php
modules/contrib/mass_contact/src/CategoryAccessControlHandler.php
modules/contrib/mass_contact/src/CategoryListBuilder.php
modules/contrib/mass_contact/src/Entity/MassContactCategory.php
modules/contrib/mass_contact/src/Entity/MassContactCategoryInterface.php
modules/contrib/mass_contact/src/Entity/MassContactMessage.php
modules/contrib/mass_contact/src/Entity/MassContactMessageInterface.php
modules/contrib/mass_contact/src/Form/AdminSettingsForm.php
modules/contrib/mass_contact/src/Form/CategoryDeleteForm.php
modules/contrib/mass_contact/src/Form/CategoryForm.php
modules/contrib/mass_contact/src/Form/EmailBodyForm.php
modules/contrib/mass_contact/src/Form/EmailHeaderForm.php
modules/contrib/mass_contact/src/Form/MassContactForm.php
modules/contrib/mass_contact/src/Form/MassContactMessageConfirmForm.php
modules/contrib/mass_contact/src/Form/SettingsFormBase.php
modules/contrib/mass_contact/src/MassContact.php
modules/contrib/mass_contact/src/MassContactInterface.php
modules/contrib/mass_contact/src/MessageAccessControlHandler.php
modules/contrib/mass_contact/src/MessageListBuilder.php
modules/contrib/mass_contact/src/OptOut.php
modules/contrib/mass_contact/src/OptOutInterface.php
modules/contrib/mass_contact/src/ParamConverter/MassContactConfirmConverter.php
modules/contrib/mass_contact/src/Permissions.php
modules/contrib/mass_contact/src/Plugin/MassContact/GroupingMethod/GroupingBase.php
modules/contrib/mass_contact/src/Plugin/MassContact/GroupingMethod/GroupingInterface.php
modules/contrib/mass_contact/src/Plugin/MassContact/GroupingMethod/Role.php
modules/contrib/mass_contact/src/Plugin/QueueWorker/QueueMessages.php
modules/contrib/mass_contact/src/Plugin/QueueWorker/SendMessage.php
modules/contrib/mass_contact/src/Routing/HtmlRouteProvider.php
modules/contrib/mass_contact/src/Tests/Form/AdminSettingsFormTest.php
modules/contrib/mass_contact/src/Tests/Form/EmailBodyFormTest.php
modules/contrib/mass_contact/src/Tests/Form/EmailHeaderFormTest.php
modules/contrib/mass_contact/tests/src/Functional/Form/CategoryFormTest.php
modules/contrib/mass_contact/tests/src/Functional/Form/MassContactFormTest.php
modules/contrib/mass_contact/tests/src/Functional/MassContactTestBase.php
modules/contrib/mass_contact/tests/src/Kernel/CategoryAccessControlHandlerTest.php
modules/contrib/mass_contact/tests/src/Kernel/CategoryCreationTrait.php
modules/contrib/mass_contact/tests/src/Kernel/Entity/MassContactCategoryTest.php
modules/contrib/mass_contact/tests/src/Kernel/MassContactTest.php
modules/contrib/mass_contact/tests/src/Kernel/MassContactTestBase.php
modules/contrib/mass_contact/tests/src/Kernel/OptOutTest.php
modules/contrib/mass_contact/tests/src/Kernel/PermissionsTest.php
modules/contrib/mass_contact/tests/src/Kernel/Plugin/MassContact/GroupingMethod/RoleTest.php
modules/contrib/mass_contact/tests/src/Unit/MassContactTest.php

31 files with changes
=====================

1) modules/contrib/mass_contact/tests/src/Unit/MassContactTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
  */
 class MassContactTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests html support detection.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/mass_contact/tests/src/Kernel/Plugin/MassContact/GroupingMethod/RoleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Kernel\Plugin\MassContact\GroupingMethod;

+use Drupal\user\UserInterface;
+use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Tests\mass_contact\Kernel\MassContactTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\user\Entity\Role as UserRole;
@@ @@
   /**
    * Some users to test with.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $recipients;

@@ @@
   /**
    * Some roles to test with.
    *
-   * @var \Drupal\user\RoleInterface[]
+   * @var RoleInterface[]
    */
   protected $roles;

@@ @@
   /**
    * The grouping plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $groupingManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/mass_contact/tests/src/Kernel/PermissionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Kernel;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\mass_contact\Permissions;

 /**
@@ @@
     $this->assertEmpty($permissions->categoryPermissions());

     // Add a few categories.
-    /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface[] $categories */
+    /** @var MassContactCategoryInterface[] $categories */
     $categories = [];
     foreach (range(1, 4) as $i) {
       $categories[$i] = $this->createCategory();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/mass_contact/tests/src/Kernel/OptOutTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Kernel;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
+use Drupal\user\UserInterface;
+use Drupal\mass_contact\OptOutInterface;
 use Drupal\mass_contact\MassContactInterface;
 use Drupal\Tests\user\Traits\UserCreationTrait;

@@ @@
   /**
    * Mass contact categories.
    *
-   * @var \Drupal\mass_contact\Entity\MassContactCategoryInterface[]
+   * @var MassContactCategoryInterface[]
    */
   protected $categories;

@@ @@
   /**
    * Users that have opted out of nothing.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $recipients;

@@ @@
   /**
    * Global opt-out users.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $globalOptOut;

@@ @@
   /**
    * Opted out of category 1.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $categoryOptOut1;

@@ @@
   /**
    * Opted out of category 2.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $categoryOptOut2;

@@ @@
     $this->config('mass_contact.settings')
       ->set('optout_enabled', MassContactInterface::OPT_OUT_DISABLED)
       ->save();
-    /** @var \Drupal\mass_contact\OptOutInterface $opt_out */
+    /** @var OptOutInterface $opt_out */
     $opt_out = \Drupal::service('mass_contact.opt_out');
     $this->assertEmpty($opt_out->getOptOutAccounts($this->categories));
   }
@@ @@
   public function testOptOutGlobal() {
     // Global opt out.
     $this->config('mass_contact.settings')->set('optout_enabled', MassContactInterface::OPT_OUT_GLOBAL)->save();
-    /** @var \Drupal\mass_contact\OptOutInterface $opt_out */
+    /** @var OptOutInterface $opt_out */
     $opt_out = \Drupal::service('mass_contact.opt_out');
     $expected = array_merge(
       array_keys($this->globalOptOut),
@@ @@
    */
   public function testOptOutCategory() {
     $this->config('mass_contact.settings')->set('optout_enabled', MassContactInterface::OPT_OUT_CATEGORY)->save();
-    /** @var \Drupal\mass_contact\OptOutInterface $opt_out */
+    /** @var OptOutInterface $opt_out */
     $opt_out = \Drupal::service('mass_contact.opt_out');

     // Check category 1 and 3.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/mass_contact/tests/src/Kernel/MassContactTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Kernel;

+use Drupal\mass_contact\MassContactInterface;
+use Drupal\user\UserInterface;
 use Drupal\mass_contact\Entity\MassContactMessage;
 use Drupal\Tests\user\Traits\UserCreationTrait;

@@ @@
   /**
    * The mass contact service.
    *
-   * @var \Drupal\mass_contact\MassContactInterface
+   * @var MassContactInterface
    */
   protected $massContact;

@@ @@
     $this->assertEquals(0, $queue->numberOfItems());

     // Add some users with this role.
-    /** @var \Drupal\user\UserInterface[] $accounts */
+    /** @var UserInterface[] $accounts */
     $accounts = [];
     foreach (range(1, 5) as $i) {
       $accounts[$i] = $this->createUser();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/mass_contact/tests/src/Kernel/Entity/MassContactCategoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Kernel\Entity;

+use Drupal\user\RoleInterface;
 use Drupal\Tests\mass_contact\Kernel\CategoryCreationTrait;
 use Drupal\Tests\mass_contact\Kernel\MassContactTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ @@
   /**
    * Roles to test with.
    *
-   * @var \Drupal\user\RoleInterface[]
+   * @var RoleInterface[]
    */
   protected $roles;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/mass_contact/tests/src/Kernel/CategoryCreationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Kernel;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\mass_contact\Entity\MassContactCategory;

@@ @@
   /**
    * Creates a category.
    *
-   * @return \Drupal\mass_contact\Entity\MassContactCategoryInterface
+   * @return MassContactCategoryInterface
    *   The new category entity.
    */
   public function createCategory(array $settings = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/mass_contact/tests/src/Functional/MassContactTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Functional;

+use Drupal\user\UserInterface;
+use Drupal\user\RoleInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\mass_contact\Kernel\CategoryCreationTrait;
 use Drupal\user\Entity\Role;
@@ @@
   /**
    * An admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * Some roles to test with.
    *
-   * @var \Drupal\user\RoleInterface[]
+   * @var RoleInterface[]
    */
   protected $roles;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/mass_contact/tests/src/Functional/Form/MassContactFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Functional\Form;

+use Drupal\user\UserInterface;
+use Drupal\user\RoleInterface;
+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\Core\Queue\QueueWorkerInterface;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\Core\Url;
@@ @@
   /**
    * Non admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $massContactUser;

@@ @@
   /**
    * The role for changing mass contact permissions.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $massContactRole;

@@ @@
   /**
    * The role to send to.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $recipientRole;

@@ @@
   /**
    * Some test categories.
    *
-   * @var \Drupal\mass_contact\Entity\MassContactCategoryInterface[]
+   * @var MassContactCategoryInterface[]
    */
   protected $categories;

@@ @@

     /** @var \Drupal\Core\Queue\QueueWorkerManagerInterface $manager */
     /** @var \Drupal\Core\Queue\QueueWorkerInterface $message_queue_queue_worker */
-    /** @var \Drupal\Core\Queue\QueueWorkerInterface $send_message_queue_worker */
+    /** @var QueueWorkerInterface $send_message_queue_worker */
     $manager = $this->container->get('plugin.manager.queue_worker');
     $message_queue_queue_worker = $manager->createInstance('mass_contact_queue_messages');
     $send_message_queue_worker = $manager->createInstance('mass_contact_send_message');
@@ @@
    *
    * Also processes the queue.
    *
-   * @param \Drupal\Core\Queue\QueueWorkerInterface $queue_worker
+   * @param QueueWorkerInterface $queue_worker
    *   The queue worker for the mass_contact_queue_messages queue.
    * @param int $expected_queue_items
    *   Number of items expected in the mass_contact_queue_messages queue.
@@ @@
    *
    * Also processes the queue and verifies the number of emails generated.
    *
-   * @param \Drupal\Core\Queue\QueueWorkerInterface $queue_worker
+   * @param QueueWorkerInterface $queue_worker
    *   The queue worker for the mass_contact_send_message queue.
    * @param int $expected_queue_items
    *   Number of items expected in the mass_contact_send_message queue.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/mass_contact/tests/src/Functional/Form/CategoryFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\mass_contact\Functional\Form;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\mass_contact\Entity\MassContactCategory;
 use Drupal\Tests\mass_contact\Functional\MassContactTestBase;
@@ @@
     ];
     $this->submitForm($edit, t('Save'));

-    /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface $category */
+    /** @var MassContactCategoryInterface $category */
     $category = MassContactCategory::load($edit['id']);
     $this->assertEquals($edit['label'], $category->label());
     $this->assertTrue($category->getSelected());
@@ @@
     \Drupal::entityTypeManager()
       ->getStorage('mass_contact_category')
       ->resetCache();
-    /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface $category */
+    /** @var MassContactCategoryInterface $category */
     $category = MassContactCategory::load($edit['id']);
     $this->assertEquals($edit['label'], $category->label());
     $this->assertFalse($category->getSelected());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/mass_contact/src/Plugin/QueueWorker/SendMessage.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The mass contact helper service.
    *
-   * @var \Drupal\mass_contact\MassContactInterface
+   * @var MassContactInterface
    */
   protected $massContact;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\mass_contact\MassContactInterface $mass_contact
+   * @param MassContactInterface $mass_contact
    *   The mass contact helper service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MassContactInterface $mass_contact) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/mass_contact/src/Plugin/QueueWorker/QueueMessages.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The mass contact helper service.
    *
-   * @var \Drupal\mass_contact\MassContactInterface
+   * @var MassContactInterface
    */
   protected $massContact;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\mass_contact\MassContactInterface $mass_contact
+   * @param MassContactInterface $mass_contact
    *   The mass contact helper service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MassContactInterface $mass_contact) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/mass_contact/src/Plugin/MassContact/GroupingMethod/Role.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function displayCategories(array $categories) {
-    /** @var \Drupal\user\RoleInterface[] $roles */
+    /** @var RoleInterface[] $roles */
     $roles = $this->entityTypeManager->getStorage('user_role')->loadMultiple($categories);
     $labels = [];
     foreach ($roles as $role) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/mass_contact/src/Plugin/MassContact/GroupingMethod/GroupingInterface.php:39

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form definition array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function adminForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/mass_contact/src/Permissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\mass_contact\Entity\MassContactCategory;

@@ @@
    */
   public function categoryPermissions() {
     $permissions = [];
-    /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface $category */
+    /** @var MassContactCategoryInterface $category */
     foreach (MassContactCategory::loadMultiple() as $category) {
       $permissions["mass contact send to users in the {$category->id()} category"] = [
         'title' => $this->t('Send to users in the %category category', ['%category' => $category->label()]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/mass_contact/src/ParamConverter/MassContactConfirmConverter.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Stores the tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a new MassContactConfirmConverter.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/mass_contact/src/OptOutInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 /**
  * A service for managing user opt-outs of mass contact emails.
  */
@@ @@
   /**
    * Finds a list of users that have opted out of emails.
    *
-   * @param \Drupal\mass_contact\Entity\MassContactCategoryInterface[] $categories
+   * @param MassContactCategoryInterface[] $categories
    *   An array of categories.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/mass_contact/src/OptOut.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * OptOut constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/mass_contact/src/MessageListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\mass_contact\Entity\MassContactMessageInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Mass contact message list builder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
@@ @@
       }
     };

-    /** @var \Drupal\mass_contact\Entity\MassContactMessageInterface $entity */
+    /** @var MassContactMessageInterface $entity */
     $row = [
       'subject' => $entity->toLink(),
       'sent' => $this->dateFormatter->format($entity->getSentTime(), 'short'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/mass_contact/src/MassContactInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\mass_contact\Entity\MassContactMessageInterface;

 /**
@@ @@
   /**
    * Main entry point for queuing mass contact emails.
    *
-   * @param \Drupal\mass_contact\Entity\MassContactMessageInterface $message
+   * @param MassContactMessageInterface $message
    *   The mass contact message entity.
    * @param array $configuration
    *   An array of configuration. Default values are provided by the mass
@@ @@
   /**
    * Takes a mass contact, calculates recipients and queues them for delivery.
    *
-   * @param \Drupal\mass_contact\Entity\MassContactMessageInterface $message
+   * @param MassContactMessageInterface $message
    *   The mass contact message entity.
    * @param array $configuration
    *   An array of configuration. Default values are provided by the mass
@@ @@
    *
    * @param int[] $recipients
    *   An array of recipient user IDs.
-   * @param \Drupal\mass_contact\Entity\MassContactMessageInterface $message
+   * @param MassContactMessageInterface $message
    *   The mass contact message entity.
    * @param array $configuration
    *   An array of configuration. Default values are provided by the mass
@@ @@
   /**
    * Given categories, returns an array of recipient IDs.
    *
-   * @param \Drupal\mass_contact\Entity\MassContactCategoryInterface[] $categories
+   * @param MassContactCategoryInterface[] $categories
    *   An array of mass contact categories.
    * @param bool $respect_opt_out
    *   Whether to respect opt outs when getting the list of recipients.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/mass_contact/src/MassContact.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Queue\QueueInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The mass contact settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The opt-out service.
    *
-   * @var \Drupal\mass_contact\OptOutInterface
+   * @var OptOutInterface
    */
   protected $optOut;

@@ @@
   /**
    * The message queueing queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $processingQueue;

@@ @@
   /**
    * The message sending queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $sendingQueue;

@@ @@
   /**
    * The recipient grouping plugin manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mail;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs the Mass Contact helper.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   The queue factory.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\mass_contact\OptOutInterface $opt_out
+   * @param OptOutInterface $opt_out
    *   The mass contact opt-out service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, QueueFactory $queue, MailManagerInterface $mail_manager, EntityTypeManagerInterface $entity_type_manager, OptOutInterface $opt_out, AccountInterface $current_user) {
@@ @@
     if ($configuration['use_bcc']) {
       $emails = [];
       foreach ($recipients as $recipient) {
-        /** @var \Drupal\user\UserInterface $account */
+        /** @var UserInterface $account */
         $account = $this->entityTypeManager->getStorage('user')->load($recipient);
         $emails[] = $account->getEmail();
       }
@@ @@
     }
     else {
       foreach ($recipients as $recipient) {
-        /** @var \Drupal\user\UserInterface $account */
+        /** @var UserInterface $account */
         $account = $this->entityTypeManager->getStorage('user')->load($recipient);
         $this->mail->mail('mass_contact', 'mass_contact', $account->getEmail(), $account->getPreferredLangcode(), $params);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/mass_contact/src/Form/MassContactMessageConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact\Form;

+use Drupal\mass_contact\Entity\MassContactMessage;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
@@ @@
   /**
    * The mass contact message being sent.
    *
-   * @var \Drupal\mass_contact\Entity\MassContactMessage
+   * @var MassContactMessage
    */
   protected $massContactMessage;

@@ @@
   /**
    * The email configurations for the mass contact message being sent.
    *
-   * @var \Drupal\mass_contact\Entity\MassContactMessage
+   * @var MassContactMessage
    */
   protected $messageConfigs;

@@ @@
   /**
    * The mass contact configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The mass contact service.
    *
-   * @var \Drupal\mass_contact\MassContactInterface
+   * @var MassContactInterface
    */
   protected $massContact;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a MassContactMessageConfirmForm object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\mass_contact\MassContactInterface $mass_contact
+   * @param MassContactInterface $mass_contact
    *   The mass contact service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
    */
   public function __construct(RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, MassContactInterface $mass_contact, PrivateTempStoreFactory $temp_store_factory) {
@@ @@
    *
    * @param array $recipients
    *   An array of recipient user IDs.
-   * @param \Drupal\mass_contact\Entity\MassContactMessageInterface $message
+   * @param MassContactMessageInterface $message
    *   The mass contact message.
    * @param array $configuration
    *   The configuration.
    */
   public static function processRecipients(array $recipients, MassContactMessageInterface $message, array $configuration) {
-    /** @var \Drupal\mass_contact\MassContactInterface $mass_contact */
+    /** @var MassContactInterface $mass_contact */
     $mass_contact = \Drupal::service('mass_contact');
     $mass_contact->sendMessage($recipients, $message, $configuration);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/mass_contact/src/Form/MassContactForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact\Form;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\ContentEntityForm;
@@ @@
   /**
    * The mass contact configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The mass contact service.
    *
-   * @var \Drupal\mass_contact\MassContactInterface
+   * @var MassContactInterface
    */
   protected $massContact;

@@ @@
   /**
    * Constructs the Mass Contact form.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface          $entityRepository
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityRepositoryInterface $entityRepository
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null          $time
+   * @param TimeInterface|null $time
    *   The time service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface          $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface         $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\mass_contact\MassContactInterface              $mass_contact
+   * @param MassContactInterface $mass_contact
    *   The mass contact service.
    */
   public function __construct(EntityRepositoryInterface $entityRepository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, MassContactInterface $mass_contact) {
@@ @@
     $default_category = [];
     $default_category_name = '';

-    /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface $category */
+    /** @var MassContactCategoryInterface $category */
     foreach ($this->entityTypeManager->getStorage('mass_contact_category')->loadMultiple() as $category) {
       if ($category->access('view')) {
         $categories[$category->id()] = $category->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/mass_contact/src/Form/EmailBodyForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Mass Contact helper service.
    *
-   * @var \Drupal\mass_contact\MassContactInterface
+   * @var MassContactInterface
    */
   protected $massContact;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs the email body form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\mass_contact\MassContactInterface $mass_contact
+   * @param MassContactInterface $mass_contact
    *   The mass contact helper service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, MassContactInterface $mass_contact) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/mass_contact/src/Form/CategoryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact\Form;

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ @@
   /**
    * GroupingInterface method plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $groupingMethodManager;

@@ @@
   /**
    * Constructs the mass contact category form.
    *
-   * @param \Drupal\Core\Plugin\DefaultPluginManager $grouping_method_manager
+   * @param DefaultPluginManager $grouping_method_manager
    *   The grouping method plugin manager form.
    */
   public function __construct(DefaultPluginManager $grouping_method_manager) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface $mass_contact_category */
+    /** @var MassContactCategoryInterface $mass_contact_category */
     $mass_contact_category = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface $mass_contact_category */
+    /** @var MassContactCategoryInterface $mass_contact_category */
     $mass_contact_category = $this->entity;
     $recipients = $mass_contact_category->getRecipients();
     foreach ($recipients as $plugin_id => $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/mass_contact/src/Entity/MassContactMessageInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Get the message categories.
    *
-   * @return \Drupal\mass_contact\Entity\MassContactCategoryInterface[]
+   * @return MassContactCategoryInterface[]
    *   The message categories.
    */
   public function getCategories();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/mass_contact/src/Entity/MassContactCategoryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact\Entity;

+use Drupal\mass_contact\Plugin\MassContact\GroupingMethod\GroupingInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Gets the recipient category plugin definitions.
    *
-   * @return \Drupal\mass_contact\Plugin\MassContact\GroupingMethod\GroupingInterface[]
+   * @return GroupingInterface[]
    *   An array of configured selection plugins, keyed by plugin ID.
    */
   public function getGroupings();
@@ @@
   /**
    * Sets grouping definitions.
    *
-   * @param \Drupal\mass_contact\Plugin\MassContact\GroupingMethod\GroupingInterface[] $groupings
+   * @param GroupingInterface[] $groupings
    *   The grouping configurations, keyed by plugin ID.
    */
   public function setGroupings(array $groupings);
@@ @@
    * @param string $grouping_id
    *   The grouping plugin ID.
    *
-   * @return \Drupal\mass_contact\Plugin\MassContact\GroupingMethod\GroupingInterface
+   * @return GroupingInterface
    *   A grouping category plugin instance.
    */
   public function getGroupingCategories($grouping_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/mass_contact/src/Entity/MassContactCategory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact\Entity;

+use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\mass_contact\Plugin\MassContact\GroupingMethod\GroupingInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;

 /**
@@ @@
   /**
    * GroupingInterface method plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $groupingMethodManager;

@@ @@
   /**
    * The grouping plugins, keyed by plugin ID.
    *
-   * @var \Drupal\mass_contact\Plugin\MassContact\GroupingMethod\GroupingInterface[]
+   * @var GroupingInterface[]
    */
   protected $groupings;

@@ @@
    *
    * @todo Can this be injected on construction?
    *
-   * @return \Drupal\Core\Plugin\DefaultPluginManager
+   * @return DefaultPluginManager
    *   The plugin manager.
    */
   protected function getGroupingManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/mass_contact/src/CategoryListBuilder.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Generate the categories column value.
    *
-   * @param \Drupal\mass_contact\Entity\MassContactCategoryInterface $category
+   * @param MassContactCategoryInterface $category
    *   The category entity.
    */
   protected function getCategories(MassContactCategoryInterface $category) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/mass_contact/src/Annotation/GroupingMethod.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\mass_contact\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable title.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


31) modules/contrib/mass_contact/mass_contact.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\mass_contact\Entity\MassContactCategoryInterface;
 /**
  * @file
  * This is the main code file for the Mass Contact module.
@@ @@
   }

   // Per-category opt-out is enabled, so return all categories.
-  /** @var \Drupal\mass_contact\Entity\MassContactCategoryInterface[] $categories */
+  /** @var MassContactCategoryInterface[] $categories */
   $categories = \Drupal::entityTypeManager()->getStorage('mass_contact_category')->loadMultiple();
   foreach ($categories as $category) {
     $values[$category->id()] = $category->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 31 files have been changed by Rector                                      

