modules/contrib/replicate_ui/replicate_ui.module
modules/contrib/replicate_ui/replicate_ui.views.inc
modules/contrib/replicate_ui/src/Form/ReplicateConfirmForm.php
modules/contrib/replicate_ui/src/Form/ReplicateUISettingsForm.php
modules/contrib/replicate_ui/src/Hooks/EntityTypeBuild.php
modules/contrib/replicate_ui/src/Plugin/Action/EntityReplicate.php
modules/contrib/replicate_ui/src/Plugin/Derivative/EntityReplicateActions.php
modules/contrib/replicate_ui/src/Plugin/Derivative/ReplicateUILocalTasks.php
modules/contrib/replicate_ui/src/Plugin/RulesAction/EntityReplicateAction.php
modules/contrib/replicate_ui/src/Plugin/views/field/ReplicateUILink.php
modules/contrib/replicate_ui/src/ReplicateAccessChecker.php
modules/contrib/replicate_ui/src/RouteSubscriber.php
modules/contrib/replicate_ui/tests/src/Functional/ReplicateUISettingsTest.php
modules/contrib/replicate_ui/tests/src/Functional/ReplicateUITest.php
modules/contrib/replicate_ui/tests/src/Unit/RouteSubscriberTest.php

10 files with changes
=====================

1) modules/contrib/replicate_ui/tests/src/Unit/RouteSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\replicate_ui\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteBuildEvent;
@@ @@
  */
 class RouteSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::onRouteBuild
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/replicate_ui/tests/src/Functional/ReplicateUITest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\replicate_ui\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
@@ @@
   protected $defaultTheme = 'stark';

   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->drupalCreateUser([
@@ @@
     $this->getSession()->getPage()->pressButton('Replicate');
     $replicated_nodes = \Drupal::entityTypeManager()->getStorage('node')
       ->loadByProperties(['title' => 'Replicate operation (Copy)']);
-    /** @var \Drupal\node\NodeInterface $replicated_node */
+    /** @var NodeInterface $replicated_node */
     $replicated_node = reset($replicated_nodes);
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->responseContains('(<em class="placeholder">' . $test_node->id() . '</em>) has been replicated to id <em class="placeholder">' . $replicated_node->id() . '</em>!');
-    $this->assertUrl($replicated_node->toUrl());
+    $this->assertSession()->addressEquals($replicated_node->toUrl());

     $this->drupalGet($this->node->toUrl());
     $this->assertSession()->pageTextContains('Replicate');
@@ @@
       'settings[node][page][fields][title]' => TRUE,
       'settings[node][page][translatable]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $node = Node::create([
       'type' => 'page',
@@ @@
       'es' => $node->getTranslation('es'),
       'fr' => $node->getTranslation('fr'),
     ];
-    /** @var \Drupal\node\NodeInterface $translation */
+    /** @var NodeInterface $translation */
     foreach ($test_sets as $langcode => $translation) {
       $new_element_label = $this->assertSession()->elementExists('css', 'input[name="new_label_' . $langcode . '"]');
       $this->assertequals($translation->label() . ' (Copy)', $new_element_label->getValue());
    ----------- end diff -----------

Applied rules:
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/replicate_ui/src/RouteSubscriber.php:12

    ---------- begin diff ----------
@@ @@
 class RouteSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Creates a new RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/replicate_ui/src/ReplicateAccessChecker.php:14

    ---------- begin diff ----------
@@ @@
 class ReplicateAccessChecker implements AccessInterface {

   /**
-   * @var \Drupal\user\Access\PermissionAccessCheck
+   * @var PermissionAccessCheck
    */
   protected $permAccessChecker;

   /**
-   * @var \Drupal\Core\Entity\EntityAccessCheck
+   * @var EntityAccessCheck
    */
   protected $entityAccessChecker;

@@ @@
   /**
    * Creates a new ReplicateAccessChecker instance.
    *
-   * @param \Drupal\user\Access\PermissionAccessCheck $permAccessChecker
-   * @param \Drupal\Core\Entity\EntityAccessCheck $entityAccessChecker
+   * @param PermissionAccessCheck $permAccessChecker
+   * @param EntityAccessCheck $entityAccessChecker
    */
   public function __construct(PermissionAccessCheck $permAccessChecker, EntityAccessCheck $entityAccessChecker) {
     $this->permAccessChecker = $permAccessChecker;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/replicate_ui/src/Plugin/Derivative/ReplicateUILocalTasks.php:14

    ---------- begin diff ----------
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Creates a new RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/replicate_ui/src/Plugin/Derivative/EntityReplicateActions.php:14

    ---------- begin diff ----------
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Creates a new RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/replicate_ui/src/Plugin/Action/EntityReplicate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\replicate_ui\Plugin\Action;

+use Drupal\replicate_ui\ReplicateAccessChecker;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteMatch;
@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\replicate_ui\ReplicateAccessChecker $access_check */
+    /** @var ReplicateAccessChecker $access_check */
     $access_check = \Drupal::service('replicate_ui.access_check');
     $entity_type_id = $this->getPluginDefinition()['type'];

@@ @@
     );
     $route_match = new RouteMatch("entity.$entity_type_id.replicate", $route, [$entity_type_id => $object], [$entity_type_id => $object->id()]);

-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = $access_check->access($route, $route_match, $account);
     return $return_as_object ? $result : $result->isAllowed();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/replicate_ui/src/Hooks/EntityTypeBuild.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\replicate_ui\Hooks;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new EntityTypeBuild instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
@@ @@
   /**
    * Helper function for hook_entity_type_build().
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The entity type.
    */
   public function build(array $entity_types) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/replicate_ui/src/Form/ReplicateUISettingsForm.php:14

    ---------- begin diff ----------
@@ @@
 class ReplicateUISettingsForm extends ConfigFormBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * Creates a new ReplicateUISettingsForm instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/replicate_ui/src/Form/ReplicateConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\replicate_ui\Form;

+use Drupal\replicate\Replicator;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class ReplicateConfirmForm extends ContentEntityConfirmFormBase {

   /**
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

   /**
-   * @var \Drupal\replicate\Replicator
+   * @var Replicator
    */
   protected $replicator;

@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state, RouteMatchInterface $route_match = NULL) {
     $this->routeMatch = $route_match;
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->routeMatch->getParameter($this->getEntityTypeId());
     $this->setEntity($entity);

@@ @@
       if ($entity instanceof TranslatableInterface) {
         foreach ($entity->getTranslationLanguages() as $translation_language) {
           $langcode = $translation_language->getId();
-          /** @var \Drupal\Core\Entity\TranslatableInterface $translation */
+          /** @var TranslatableInterface $translation */
           $translation = $entity->getTranslation($langcode);
           $form['new_label_' . $langcode] = [
             '#type' => 'textfield',
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);

-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $label_key = $entity->getEntityType()->getKey('label');
     if ($entity instanceof TranslatableInterface) {
@@ @@
       foreach ($entity->getTranslationLanguages() as $translation_language) {
         $langcode = $translation_language->getId();
         if ($new_label = $form_state->getValue('new_label_' . $langcode)) {
-          /** @var \Drupal\Core\Entity\TranslatableInterface $translation */
+          /** @var TranslatableInterface $translation */
           $translation = $entity->getTranslation($langcode);
           $translation->set($label_key, $new_label);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/replicate_ui/src/Plugin/RulesAction/EntityReplicateActio
         n.php" file, due to:                                                   
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

