diff --git a/modules/role_appearance/src/Plugin/Role/RoleConfigElement/RoleTheme.php b/modules/role_appearance/src/Plugin/Role/RoleConfigElement/RoleTheme.php
index c7b097a..53cf99a 100644
--- a/modules/role_appearance/src/Plugin/Role/RoleConfigElement/RoleTheme.php
+++ b/modules/role_appearance/src/Plugin/Role/RoleConfigElement/RoleTheme.php
@@ -22,7 +22,7 @@ class RoleTheme extends RoleConfigElementBase {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
diff --git a/modules/role_appearance/src/Theme/ThemeNegotiator.php b/modules/role_appearance/src/Theme/ThemeNegotiator.php
index 5b164d2..caeeab4 100644
--- a/modules/role_appearance/src/Theme/ThemeNegotiator.php
+++ b/modules/role_appearance/src/Theme/ThemeNegotiator.php
@@ -16,32 +16,32 @@ class ThemeNegotiator implements ThemeNegotiatorInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\role\Service\RoleControlManagerInterface definition.
    *
-   * @var \Drupal\role\Service\RoleControlManagerInterface
+   * @var RoleControlManagerInterface
    */
   protected $roleControlManager;
 
   /**
    * Creates a new AdminNegotiator instance.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\role\Service\RoleControlManagerInterface $role_manager
+   * @param RoleControlManagerInterface $role_manager
    *   The role manager.
    */
   public function __construct(AccountInterface $user, ConfigFactoryInterface $config_factory, RoleControlManagerInterface $role_manager) {
diff --git a/modules/role_appearance/tests/src/Functional/RoleThemeTest.php b/modules/role_appearance/tests/src/Functional/RoleThemeTest.php
index 6e0f9ca..4159de4 100644
--- a/modules/role_appearance/tests/src/Functional/RoleThemeTest.php
+++ b/modules/role_appearance/tests/src/Functional/RoleThemeTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\role_appearance\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Extension\ThemeHandler;
+use Drupal\role_appearance\Theme\ThemeNegotiator;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;
 
@@ -15,21 +18,21 @@ class RoleThemeTest extends BrowserTestBase {
   /**
    * User with admin privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * The theme handler used in this test for enabling themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;
 
   /**
    * The theme negotiator used in this test for checking active theme.
    *
-   * @var \Drupal\role_appearance\Theme\ThemeNegotiator
+   * @var ThemeNegotiator
    */
   protected $themeNegotiator;
 
@@ -44,7 +47,7 @@ class RoleThemeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer permissions', 'administer users']);
     $this->themeHandler = $this->container->get('theme_handler');
@@ -67,8 +70,9 @@ class RoleThemeTest extends BrowserTestBase {
       'id' => $role_name,
       'role_theme' => 'seven',
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
     $role_theme = $role->getThirdPartySetting('role_appearance', 'role_theme');
diff --git a/modules/role_registration/role_registration.module b/modules/role_registration/role_registration.module
index 24a96a4..1f28356 100644
--- a/modules/role_registration/role_registration.module
+++ b/modules/role_registration/role_registration.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\role\Form\ControlRoleForm;
 /**
  * @file
  * Contains role_registration.module.
@@ -68,7 +69,7 @@ function role_registration_form_user_role_form_alter(&$form, FormStateInterface
 function role_registration_validate_alias(array &$form, FormStateInterface $form_state) {
   $registration_status = $form_state->getValue('account_registration_status');
 
-  /** @var \Drupal\role_registration\Service\RoleRegistrationManagerInterface $registration_manager */
+  /** @var RoleRegistrationManagerInterface $registration_manager */
   $registration_manager = Drupal::service('role_registration.manager');
 
   $register_page_alias = $form_state->getValue('account_registration_alias');
@@ -86,9 +87,9 @@ function role_registration_validate_alias(array &$form, FormStateInterface $form
 
   // We need to check the alias.
   // Ignore check if this is form submitted for the first time.
-  /** @var \Drupal\role\Form\ControlRoleForm $form_object */
+  /** @var ControlRoleForm $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   $role = $form_object->getEntity();
   $settings = $role->getThirdPartySettings(RoleRegistrationManagerInterface::MODULE_NAME);
   if (!empty($settings) && $settings['account_registration_alias'] != $register_page_alias) {
@@ -104,7 +105,7 @@ function role_registration_validate_alias(array &$form, FormStateInterface $form
  * Update alias handler.
  */
 function role_registration_update_alias_submit(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\role_registration\Service\RoleRegistrationManagerInterface $registration_manager */
+  /** @var RoleRegistrationManagerInterface $registration_manager */
   $registration_manager = Drupal::service('role_registration.manager');
   $role_id = $form_state->getValue('id');
   $base_url = $registration_manager->getBaseUrlString($role_id);
@@ -123,7 +124,7 @@ function role_registration_update_alias_submit(array &$form, FormStateInterface
  * Implements hook_ENTITY_TYPE_delete() for user_role.
  */
 function role_registration_user_role_delete(RoleInterface $role) {
-  /** @var \Drupal\role_registration\Service\RoleRegistrationManagerInterface $registration_manager */
+  /** @var RoleRegistrationManagerInterface $registration_manager */
   $registration_manager = Drupal::service('role_registration.manager');
   $register_url = $registration_manager->getBaseUrlString($role->id());
   $registration_manager->deleteAliasBySource($register_url);
diff --git a/modules/role_registration/src/Controller/UserPagesController.php b/modules/role_registration/src/Controller/UserPagesController.php
index 5cbabdd..ea2ab50 100644
--- a/modules/role_registration/src/Controller/UserPagesController.php
+++ b/modules/role_registration/src/Controller/UserPagesController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\role_registration\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Form\EnforcedResponseException;
+use Drupal\Core\Form\FormAjaxException;
+use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -22,21 +27,21 @@ class UserPagesController extends ControllerBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The role storage used when changing the admin role.
    *
-   * @var \Drupal\user\RoleStorageInterface
+   * @var RoleStorageInterface
    */
   protected $roleStorage;
 
@@ -67,16 +72,16 @@ class UserPagesController extends ControllerBase {
   /**
    * Builds the registration form.
    *
-   * @param \Drupal\user\RoleInterface $user_role
+   * @param RoleInterface $user_role
    *   The user role entity.
    *
    * @return array
    *   The register form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Form\EnforcedResponseException
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EnforcedResponseException
+   * @throws FormAjaxException
    */
   public function registerPage(RoleInterface $user_role) {
     $third_party_settings = $user_role->getThirdPartySettings(RoleRegistrationManagerInterface::MODULE_NAME);
@@ -85,7 +90,7 @@ class UserPagesController extends ControllerBase {
     }
     $form_display = $third_party_settings['account_registration_form_mode'];
     // Be sure definition is up to date.
-    /** @var \Drupal\Core\Entity\ContentEntityType $userEntityDefinition */
+    /** @var ContentEntityType $userEntityDefinition */
     $userEntityDefinition = $this->entityTypeManager->getDefinition('user');
     if (!array_key_exists($form_display, $userEntityDefinition->getHandlerClasses()['form'])) {
       $this->entityTypeManager->clearCachedDefinitions();
diff --git a/modules/role_registration/src/Plugin/Role/RoleConfigElement/RegistrationAlias.php b/modules/role_registration/src/Plugin/Role/RoleConfigElement/RegistrationAlias.php
index d293984..0821644 100644
--- a/modules/role_registration/src/Plugin/Role/RoleConfigElement/RegistrationAlias.php
+++ b/modules/role_registration/src/Plugin/Role/RoleConfigElement/RegistrationAlias.php
@@ -24,14 +24,14 @@ class RegistrationAlias extends RoleConfigElementBase {
   /**
    * The RoleRegistrationManager service.
    *
-   * @var \Drupal\role_registration\Service\RoleRegistrationManagerInterface
+   * @var RoleRegistrationManagerInterface
    */
   protected $roleRegistrationManager;
 
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;
 
diff --git a/modules/role_registration/src/Service/RoleRegistrationManager.php b/modules/role_registration/src/Service/RoleRegistrationManager.php
index 5ad0d0e..5a410a8 100644
--- a/modules/role_registration/src/Service/RoleRegistrationManager.php
+++ b/modules/role_registration/src/Service/RoleRegistrationManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\role_registration\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\path_alias\PathAliasInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,35 +19,35 @@ class RoleRegistrationManager implements RoleRegistrationManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Path alias repository.
    *
-   * @var \Drupal\path_alias\AliasRepositoryInterface
+   * @var AliasRepositoryInterface
    */
   protected $aliasRepository;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Alias storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $aliasStorage;
 
@@ -98,14 +100,14 @@ class RoleRegistrationManager implements RoleRegistrationManagerInterface {
     $langcode = $this->getDefaultLanguageId();
     $lookupAlias = $this->aliasRepository->lookupBySystemPath($source, $langcode);
     if ($lookupAlias) {
-      /** @var \Drupal\path_alias\PathAliasInterface $existing_alias */
+      /** @var PathAliasInterface $existing_alias */
       $existing_alias = $this->aliasStorage->load($lookupAlias['id']);
       if ($existing_alias) {
         $existing_alias->set('alias', $alias)->save();
         return $existing_alias->id();
       }
     }
-    /** @var \Drupal\path_alias\PathAliasInterface $new_alias */
+    /** @var PathAliasInterface $new_alias */
     $new_alias = $this->aliasStorage->create(['path' => $source, 'alias' => $alias]);
     $new_alias->save();
     return $new_alias->id();
diff --git a/modules/role_registration/src/Service/RoleRegistrationManagerInterface.php b/modules/role_registration/src/Service/RoleRegistrationManagerInterface.php
index 2e7f9d0..168d5ef 100644
--- a/modules/role_registration/src/Service/RoleRegistrationManagerInterface.php
+++ b/modules/role_registration/src/Service/RoleRegistrationManagerInterface.php
@@ -19,7 +19,7 @@ interface RoleRegistrationManagerInterface {
    *
    * @param array $form
    *   Register form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public static function addRoleToUser(array &$form, FormStateInterface $form_state);
diff --git a/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php b/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php
index e4f8596..1e9bcae 100644
--- a/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php
+++ b/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\role_registration\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;
 
@@ -15,7 +16,7 @@ class RoleRegistrationTest extends BrowserTestBase {
   /**
    * User with admin privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -29,7 +30,7 @@ class RoleRegistrationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer permissions', 'administer users']);
   }
@@ -48,8 +49,9 @@ class RoleRegistrationTest extends BrowserTestBase {
       'id' => $role_name,
       'account_registration_status' => 1,
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
   }
@@ -64,9 +66,9 @@ class RoleRegistrationTest extends BrowserTestBase {
     $role->setThirdPartySetting('role_registration', 'account_registration_status', 1)->save();
     $role->setThirdPartySetting('role_registration', 'account_registration_form_mode', 'default')->save();
     $this->drupalGet('user/register/' . $role_1);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet('user/register/' . $role_2);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
 }
diff --git a/role.module b/role.module
index 461f856..3e2f4f5 100644
--- a/role.module
+++ b/role.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
+use Drupal\role\Service\RoleControlManagerInterface;
+use Drupal\user\Entity\User;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
 /**
  * @file
  * Role control.
@@ -32,7 +37,7 @@ function role_help($route_name, RouteMatchInterface $route_match) {
  */
 function role_entity_type_alter(array &$entity_types) {
   if (isset($entity_types['user_role'])) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $user_role */
+    /** @var ConfigEntityTypeInterface $user_role */
     $user_role = &$entity_types['user_role'];
     $user_role->setFormClass('default', ControlRoleForm::class);
   }
@@ -43,16 +48,16 @@ function role_entity_type_alter(array &$entity_types) {
  */
 function role_entity_form_display_alter(EntityFormDisplayInterface &$form_display, array $context) {
   if ($context['entity_type'] === 'user' && $context['bundle'] === 'user') {
-    /** @var Drupal\role\Service\RoleControlManagerInterface $control_manager */
+    /** @var RoleControlManagerInterface $control_manager */
     $control_manager = Drupal::service('role.control_manager');
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = Drupal::routeMatch()->getParameter('user');
     if (!$user) {
       return NULL;
     }
 
     if ($context['form_mode'] === 'default') {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
+      /** @var ConfigEntityStorageInterface $storage */
       $storage = Drupal::service('entity_type.manager')
         ->getStorage('entity_form_display');
 
@@ -68,9 +73,9 @@ function role_entity_form_display_alter(EntityFormDisplayInterface &$form_displa
  */
 function role_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
   if ($entity->bundle() === 'user') {
-    /** @var Drupal\role\Service\RoleControlManagerInterface $control_manager */
+    /** @var RoleControlManagerInterface $control_manager */
     $control_manager = Drupal::service('role.control_manager');
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = Drupal::routeMatch()->getParameter('user');
     if (!$user) {
       return NULL;
@@ -104,7 +109,7 @@ function role_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  * Helper function that alters the role form element.
  */
 function _role_single_role_edit_element(&$element, &$form) {
-  /** @var \Drupal\Core\Config\ImmutableConfig $single_role_settings */
+  /** @var ImmutableConfig $single_role_settings */
   $single_role_settings = Drupal::config('single.role.settings');
 
   if (!$single_role_settings->get('state')) {
diff --git a/src/Annotation/RoleConfigElement.php b/src/Annotation/RoleConfigElement.php
index 3f36243..78ea542 100644
--- a/src/Annotation/RoleConfigElement.php
+++ b/src/Annotation/RoleConfigElement.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\role\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class RoleConfigElement extends Plugin {
   /**
    * The human-readable name of the RoleConfigElement type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Form/ControlRoleForm.php b/src/Form/ControlRoleForm.php
index b4abb09..2b65d86 100644
--- a/src/Form/ControlRoleForm.php
+++ b/src/Form/ControlRoleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\role\Form;
 
+use Drupal\user\RoleInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,21 +20,21 @@ class ControlRoleForm extends RoleForm implements ContainerInjectionInterface {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Drupal\role\Service\RoleControlManager definition.
    *
-   * @var \Drupal\role\Service\RoleControlManager
+   * @var RoleControlManager
    */
   protected $roleControlManager;
 
   /**
    * Drupal\role\Plugin\RoleConfigElementManager definition.
    *
-   * @var \Drupal\role\Plugin\RoleConfigElementManager
+   * @var RoleConfigElementManager
    */
   protected $roleConfigElementManager;
 
@@ -66,7 +67,7 @@ class ControlRoleForm extends RoleForm implements ContainerInjectionInterface {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = $this->entity;
 
     $form['account'] = [
@@ -91,7 +92,7 @@ class ControlRoleForm extends RoleForm implements ContainerInjectionInterface {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     /** @var \Drupal\role\Form\ControlRoleForm $form_object */
     $form_object = $form_state->getFormObject();
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = $form_object->getEntity();
     foreach ($this->roleControlManager->getExtraFields() as $field_name) {
       if ($form_state->hasValue($field_name)) {
diff --git a/src/Plugin/RoleConfigElementBase.php b/src/Plugin/RoleConfigElementBase.php
index 635c22b..4080bd6 100644
--- a/src/Plugin/RoleConfigElementBase.php
+++ b/src/Plugin/RoleConfigElementBase.php
@@ -18,14 +18,14 @@ abstract class RoleConfigElementBase extends PluginBase implements RoleConfigEle
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Drupal\role\Service\RoleControlManagerInterface definition.
    *
-   * @var \Drupal\role\Service\RoleControlManagerInterface
+   * @var RoleControlManagerInterface
    */
   protected $roleControlManager;
 
diff --git a/src/Plugin/RoleConfigElementManager.php b/src/Plugin/RoleConfigElementManager.php
index b4c3b46..d9d8c6f 100644
--- a/src/Plugin/RoleConfigElementManager.php
+++ b/src/Plugin/RoleConfigElementManager.php
@@ -27,7 +27,7 @@ class RoleConfigElementManager extends DefaultPluginManager {
   public function getRoleConfigElements(&$form, RoleInterface $role) {
     $definitions = $this->getDefinitions();
     foreach ($definitions as $definition) {
-      /** @var \Drupal\role\Plugin\RoleConfigElementInterface $instance */
+      /** @var RoleConfigElementInterface $instance */
       $instance = $this->createInstance($definition['id']);
       $instance->attachElement($form, $role);
     }
diff --git a/src/Service/RoleControlManager.php b/src/Service/RoleControlManager.php
index ef520e7..407cf38 100644
--- a/src/Service/RoleControlManager.php
+++ b/src/Service/RoleControlManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\role\Service;
 
+use Drupal\user\RoleInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -21,28 +22,28 @@ class RoleControlManager implements RoleControlManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Drupal\role\Plugin\RoleConfigElementManager definition.
    *
-   * @var \Drupal\role\Plugin\RoleConfigElementManager
+   * @var RoleConfigElementManager
    */
   protected $roleConfigElementManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -138,7 +139,7 @@ class RoleControlManager implements RoleControlManagerInterface {
    * {@inheritdoc}
    */
   public function getRoleThirdPartySetting(AccountInterface $user, string $config) {
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = $this->getUserPriorityRole($user);
     if (!$role) {
       return '';
diff --git a/tests/src/Functional/RoleFormModeTest.php b/tests/src/Functional/RoleFormModeTest.php
index 4a30cac..87bd14c 100644
--- a/tests/src/Functional/RoleFormModeTest.php
+++ b/tests/src/Functional/RoleFormModeTest.php
@@ -72,7 +72,7 @@ class RoleFormModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('/user/' . $account->id() . '/edit');
     // Check if field was added to custom form display and text is displayed.
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Test field is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
 
     // Create user without custom role.
     $account = $this->drupalCreateUser();
@@ -80,7 +80,7 @@ class RoleFormModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('/user/' . $account->id() . '/edit');
     // Check if field does not display.
-    $this->assertNoFieldByName("{$field_name}[0][value]", '', 'Test field is not displayed');
+    $this->assertSession()->fieldValueNotEquals("{$field_name}[0][value]", '', 'Test field is not displayed');
   }
 
 }
diff --git a/tests/src/Functional/RoleSettingsFormTest.php b/tests/src/Functional/RoleSettingsFormTest.php
index b8bf94a..108e8e9 100644
--- a/tests/src/Functional/RoleSettingsFormTest.php
+++ b/tests/src/Functional/RoleSettingsFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\role\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;
 
@@ -15,7 +16,7 @@ class RoleSettingsFormTest extends BrowserTestBase {
   /**
    * User with admin privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -29,7 +30,7 @@ class RoleSettingsFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer permissions',
@@ -56,8 +57,9 @@ class RoleSettingsFormTest extends BrowserTestBase {
       'account_form_mode' => 'default',
       'account_view_mode' => 'default',
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
 
diff --git a/tests/src/Functional/RoleViewModeTest.php b/tests/src/Functional/RoleViewModeTest.php
index 489230a..3fd9d7c 100644
--- a/tests/src/Functional/RoleViewModeTest.php
+++ b/tests/src/Functional/RoleViewModeTest.php
@@ -71,7 +71,10 @@ class RoleViewModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id());
     // Check if field was added to custom view display and text is displayed.
-    $this->assertText($mode);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($mode);
     // Create user without custom role.
     $account = $this->drupalCreateUser();
     $account->$field_name = $mode;
@@ -79,7 +82,10 @@ class RoleViewModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id());
     // Check if field does not display.
-    $this->assertNoText($mode);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($mode);
   }
 
 }
diff --git a/tests/src/Unit/RoleControlManagerTest.php b/tests/src/Unit/RoleControlManagerTest.php
index f1900ce..f17c4eb 100644
--- a/tests/src/Unit/RoleControlManagerTest.php
+++ b/tests/src/Unit/RoleControlManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\role\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Cache\MemoryCache\MemoryCache;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
@@ -40,42 +41,42 @@ class RoleControlManagerTest extends UnitTestCase {
   /**
    * Drupal\role\Plugin\RoleConfigElementManager definition.
    *
-   * @var \Drupal\role\Plugin\RoleConfigElementManager
+   * @var RoleConfigElementManager
    */
   protected $roleConfigElementManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The mocked 'anonymous' user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var AccountInterface|MockObject
    */
   protected $account1;
 
   /**
    * The mocked user with 'administrator' and 'authenticated' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var AccountInterface|MockObject
    */
   protected $account2;
 
   /**
    * The mocked user with 'authenticated' and 'administrator' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var AccountInterface|MockObject
    */
   protected $account3;
 
   /**
    * The mocked user with 'authenticated' 'administrator' 'editor' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var AccountInterface|MockObject
    */
   protected $account4;
 
@@ -98,24 +99,16 @@ class RoleControlManagerTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $container = new ContainerBuilder();
 
     $this->extraFields = ['account_form_mode', 'account_view_mode'];
 
-    $this->roles['administrator'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['authenticated'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['editor'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['anonymous'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->roles['administrator'] = $this->createMock(Role::class);
+    $this->roles['authenticated'] = $this->createMock(Role::class);
+    $this->roles['editor'] = $this->createMock(Role::class);
+    $this->roles['anonymous'] = $this->createMock(Role::class);
 
     $role_storage = $this->getMockBuilder('Drupal\user\RoleStorage')
       ->setConstructorArgs(['role', new MemoryCache()])
@@ -134,7 +127,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 1: 'anonymous' role.
     $roles_1 = ['anonymous'];
-    $this->account1 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account1 = $this->createMock(AccountInterface::class);
     $this->account1->expects($this->any())
       ->method('isAnonymous')
       ->willReturn(TRUE);
@@ -147,7 +140,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 2: 'administrator' and 'authenticated' roles.
     $roles_2 = ['administrator', 'authenticated'];
-    $this->account2 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account2 = $this->createMock(AccountInterface::class);
     $this->account2->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_2));
@@ -157,7 +150,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 3: 'authenticated' and 'administrator' roles (different order).
     $roles_3 = ['authenticated', 'administrator'];
-    $this->account3 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account3 = $this->createMock(AccountInterface::class);
     $this->account3->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_3));
@@ -167,7 +160,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 4: 'authenticated' and 'administrator' roles (different order).
     $roles_4 = ['editor', 'authenticated', 'administrator'];
-    $this->account4 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account4 = $this->createMock(AccountInterface::class);
     $this->account4->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_4));
@@ -175,30 +168,21 @@ class RoleControlManagerTest extends UnitTestCase {
       ->method('id')
       ->willReturn(4);
 
-    $entity_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->getMock();
+    $entity_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_manager->expects($this->any())
       ->method('getStorage')
       ->with($this->equalTo('user_role'))
       ->will($this->returnValue($role_storage));
 
-    $module_handler = $this->getMockBuilder(ModuleHandlerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_handler = $this->createMock(ModuleHandlerInterface::class);
 
-    $roleConfigElementManager = $this->getMockBuilder(RoleConfigElementManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $roleConfigElementManager = $this->createMock(RoleConfigElementManager::class);
     $roleConfigElementManager->expects($this->any())
       ->method('getDefinitions')
       ->will($this->returnValue($this->definitions));
-    $entityDisplayRepository = $this->getMockBuilder(EntityDisplayRepositoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityDisplayRepository = $this->createMock(EntityDisplayRepositoryInterface::class);
 
-    $translation_manager = $this->getMockBuilder(TranslationInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translation_manager = $this->createMock(TranslationInterface::class);
 
     $roleManager = new RoleControlManager($entity_manager, $module_handler, $roleConfigElementManager, $entityDisplayRepository, $translation_manager);
 
