diff --git a/media_fotoweb.info.yml b/media_fotoweb.info.yml
index fd3ccd2..13aeb21 100644
--- a/media_fotoweb.info.yml
+++ b/media_fotoweb.info.yml
@@ -1,7 +1,7 @@
 name: 'Media Fotoweb'
 type: module
 description: 'Integrates media with the digital asset management from fotoware.com'
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Media'
 configure: media_fotoweb.settings
 
diff --git a/media_fotoweb.install b/media_fotoweb.install
index dbbcbe3..becd38d 100644
--- a/media_fotoweb.install
+++ b/media_fotoweb.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\media\MediaTypeInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Media Fotoweb Module.
@@ -10,7 +11,7 @@
  */
 function media_fotoweb_update_8001(&$sandbox) {
   $mediaTypeStorage = \Drupal::entityTypeManager()->getStorage('media_type');
-  /** @var \Drupal\media\MediaTypeInterface $type */
+  /** @var MediaTypeInterface $type */
   if ($type = $mediaTypeStorage->load('fotoweb')) {
     $source_configuration = $type->get('source_configuration');
     if (isset($source_configuration['local_image'])) {
diff --git a/src/Annotation/FotowebImageFetcher.php b/src/Annotation/FotowebImageFetcher.php
index d6fb986..6b392cd 100644
--- a/src/Annotation/FotowebImageFetcher.php
+++ b/src/Annotation/FotowebImageFetcher.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_fotoweb\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class FotowebImageFetcher extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/AuthenticationController.php b/src/Controller/AuthenticationController.php
index 1b8e47b..ae3ec3b 100644
--- a/src/Controller/AuthenticationController.php
+++ b/src/Controller/AuthenticationController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\media_fotoweb\Controller;
 
+use Drupal\media_fotoweb\FotowebClient;
+use Drupal\media_fotoweb\OAuth2\Persistence\UserTokenPersistence;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Url;
@@ -15,10 +17,10 @@ class AuthenticationController extends ControllerBase {
   /**
    * Handles the oAuth2 user authentication.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|void
+   * @return RedirectResponse|void
    *   The response.
    */
   public function authenticateUser(Request $request) {
@@ -36,7 +38,7 @@ class AuthenticationController extends ControllerBase {
       }
 
       // Make a token request using the code.
-      /** @var \Drupal\media_fotoweb\FotowebClient $client */
+      /** @var FotowebClient $client */
       $client = \Drupal::service('media_fotoweb.client');
       $clientConfiguration = $client->getConfiguration();
       $clientConfiguration['grantType'] = 'authorization_code';
@@ -65,14 +67,14 @@ class AuthenticationController extends ControllerBase {
   /**
    * Handles the oAuth2 user authentication revocation.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|void
+   * @return RedirectResponse|void
    *   The response.
    */
   public function revokeAuthenticateUser(Request $request) {
-    /** @var \Drupal\media_fotoweb\OAuth2\Persistence\UserTokenPersistence $tokenPersistence */
+    /** @var UserTokenPersistence $tokenPersistence */
     $tokenPersistence = \Drupal::service('media_fotoweb.user_token_persistence');
     $tokenPersistence->deleteToken();
     $this->messenger()->addStatus($this->t('Your account got disconnected from Fotoware. Please reload the widget.'));
diff --git a/src/Form/FotowebBrowserForm.php b/src/Form/FotowebBrowserForm.php
index 45b1234..4ebe125 100644
--- a/src/Form/FotowebBrowserForm.php
+++ b/src/Form/FotowebBrowserForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_fotoweb\Form;
 
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseDialogCommand;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -33,38 +34,38 @@ class FotowebBrowserForm extends AddFormBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The Fotoweb login manager.
    *
-   * @var \Drupal\media_fotoweb\FotowebLoginManagerInterface
+   * @var FotowebLoginManagerInterface
    */
   protected $loginManager;
 
   /**
    * Constructs a AddFormBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\media_library\MediaLibraryUiBuilder $library_ui_builder
+   * @param MediaLibraryUiBuilder $library_ui_builder
    *   The media library UI builder.
-   * @param \Drupal\media_library\OpenerResolverInterface $opener_resolver
+   * @param OpenerResolverInterface $opener_resolver
    *   The opener resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory interface.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\media_fotoweb\FotowebLoginManagerInterface $login_manager
+   * @param FotowebLoginManagerInterface $login_manager
    *   The Fotoweb login manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MediaLibraryUiBuilder $library_ui_builder, OpenerResolverInterface $opener_resolver = NULL, ConfigFactoryInterface $config_factory, AccountInterface $current_user, FotowebLoginManagerInterface $login_manager) {
@@ -104,7 +105,7 @@ class FotowebBrowserForm extends AddFormBase {
     // Either use the media library state from the form state. This is needed
     // to influence the form action within a media library modal.
     if (!empty($form_state->getStorage()['media_library_state'])) {
-      /** @var \Drupal\media_library\MediaLibraryState $mediaLibraryState */
+      /** @var MediaLibraryState $mediaLibraryState */
       $mediaLibraryState = $form_state->getStorage()['media_library_state'];
       $request->query->set('media_library_opener_id', $mediaLibraryState->get('media_library_opener_id'));
       $request->query->set('media_library_allowed_types', $mediaLibraryState->get('media_library_allowed_types', []));
@@ -184,12 +185,12 @@ class FotowebBrowserForm extends AddFormBase {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response that carries the selected items and closes the modal.
    */
   public function submitSelectedFotowebAsset(array $form, FormStateInterface $form_state, Request $request) {
diff --git a/src/Form/FotowebSettingsForm.php b/src/Form/FotowebSettingsForm.php
index 9a7fdc7..2430391 100644
--- a/src/Form/FotowebSettingsForm.php
+++ b/src/Form/FotowebSettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_fotoweb\Form;
 
+use Drupal\media_fotoweb\OAuth2\Persistence\ApiTokenPersistence;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -22,34 +23,34 @@ class FotowebSettingsForm extends ConfigFormBase {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Fotoweb client.
    *
-   * @var \Drupal\media_fotoweb\FotowebClient
+   * @var FotowebClient
    */
   protected $fotowebClient;
 
   /**
    * The Image Fetcher Manager.
    *
-   * @var \Drupal\media_fotoweb\ImageFetcherManager
+   * @var ImageFetcherManager
    */
   protected $imageFetcherManager;
 
   /**
    * Constructs a FotowebSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\media_fotoweb\FotowebClient $fotoweb_client
+   * @param FotowebClient $fotoweb_client
    *   The Fotoweb client.
-   * @param \Drupal\media_fotoweb\ImageFetcherManager $image_fetcher_manager
+   * @param ImageFetcherManager $image_fetcher_manager
    *   The image fetcher manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager, FotowebClient $fotoweb_client, ImageFetcherManager $image_fetcher_manager) {
@@ -357,13 +358,13 @@ class FotowebSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return void
    */
   public function submitRevokeApiAuthorize(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\media_fotoweb\OAuth2\Persistence\ApiTokenPersistence $tokenPersistence */
+    /** @var ApiTokenPersistence $tokenPersistence */
     $tokenPersistence = \Drupal::service('media_fotoweb.api_token_persistence');
     $tokenPersistence->deleteToken();
     $this->messenger()->addStatus($this->t('Your site got disconnected from Fotoware.'));
diff --git a/src/FotowebClient.php b/src/FotowebClient.php
index 2e3f3f4..3aedd1d 100644
--- a/src/FotowebClient.php
+++ b/src/FotowebClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_fotoweb;
 
+use GuzzleHttp\Command\ServiceClientInterface;
 use Fotoweb\FotowebClient as FotowebAPIClient;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -18,7 +19,7 @@ class FotowebClient {
   /**
    * The Guzzle Service Client.
    *
-   * @var \GuzzleHttp\Command\ServiceClientInterface
+   * @var ServiceClientInterface
    */
   public $client;
 
diff --git a/src/FotowebClientFactory.php b/src/FotowebClientFactory.php
index 7aaadb0..86ebc0e 100644
--- a/src/FotowebClientFactory.php
+++ b/src/FotowebClientFactory.php
@@ -12,10 +12,10 @@ class FotowebClientFactory {
   /**
    * Creates the FotowebClient from configuration values.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
-   * @return \Drupal\media_fotoweb\FotowebClient
+   * @return FotowebClient
    *   The Fotoweb Client.
    */
   public static function create(ConfigFactoryInterface $config_factory) {
diff --git a/src/FotowebLoginManager.php b/src/FotowebLoginManager.php
index cd9f911..b5e394a 100644
--- a/src/FotowebLoginManager.php
+++ b/src/FotowebLoginManager.php
@@ -16,23 +16,23 @@ class FotowebLoginManager implements FotowebLoginManagerInterface {
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FotowebLoginManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ -54,10 +54,10 @@ class FotowebLoginManager implements FotowebLoginManagerInterface {
   /**
    * Returns the user from a given account.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The given user account.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The user entity.
    */
   protected function getUserFromAccount(AccountProxyInterface $account) {
@@ -67,7 +67,7 @@ class FotowebLoginManager implements FotowebLoginManagerInterface {
   /**
    * Returns the Fotoweb user name from a given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The given user.
    */
   protected function getFotowebUsernameFromUser(UserInterface $user) {
diff --git a/src/FotowebLoginManagerInterface.php b/src/FotowebLoginManagerInterface.php
index b3bdf57..482728d 100644
--- a/src/FotowebLoginManagerInterface.php
+++ b/src/FotowebLoginManagerInterface.php
@@ -12,7 +12,7 @@ interface FotowebLoginManagerInterface {
   /**
    * Returns the Fotoweb Login Token for a Drupal account.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The user proxy object.
    *
    * @return string
diff --git a/src/FotowebWidgetTrait.php b/src/FotowebWidgetTrait.php
index d0b050b..cee1391 100644
--- a/src/FotowebWidgetTrait.php
+++ b/src/FotowebWidgetTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\media_fotoweb;
 
+use Drupal\media_fotoweb\OAuth2\Persistence\UserTokenPersistence;
+use Drupal\media\MediaTypeInterface;
+use Drupal\media_fotoweb\Plugin\media\Source\Fotoweb;
+use Drupal\media\MediaInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ -53,7 +57,7 @@ trait FotowebWidgetTrait {
         ];
       }
 
-      /** @var \Drupal\media_fotoweb\OAuth2\Persistence\UserTokenPersistence $tokenPersistence */
+      /** @var UserTokenPersistence $tokenPersistence */
       $tokenPersistence = \Drupal::service('media_fotoweb.user_token_persistence');
       $token = new RawToken();
       $tokenPersistence->restoreToken($token);
@@ -109,10 +113,10 @@ trait FotowebWidgetTrait {
     $entities = [];
     $selected = json_decode($form_state->getValue('fotoweb_selected', []));
 
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     $media_type = $this->entityTypeManager->getStorage('media_type')
       ->load($entity_type_id);
-    /** @var \Drupal\media_fotoweb\Plugin\media\Source\Fotoweb $plugin */
+    /** @var Fotoweb $plugin */
     $plugin = $media_type->getSource();
 
     if (!empty($selected)) {
@@ -126,7 +130,7 @@ trait FotowebWidgetTrait {
           $entities[] = $media;
         }
         else {
-          /** @var \Drupal\media\MediaInterface $media */
+          /** @var MediaInterface $media */
           $media = $this->entityTypeManager->getStorage('media')->create([
             'bundle' => $media_type->id(),
             'field_fotoweb_identifier' => $asset->href,
@@ -152,14 +156,14 @@ trait FotowebWidgetTrait {
    * @param object $asset
    *   The Fotoweb asset.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The selected media entity.
    */
   protected function loadAndSyncMedia($mid, object $asset) {
     $config = $this->configFactory->get('media_fotoweb.settings');
     $asset_update_type = $config->get('asset_update_type');
 
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->entityTypeManager->getStorage('media')
       ->load(reset($mid));
 
@@ -180,7 +184,7 @@ trait FotowebWidgetTrait {
    *   True if the token exists and appears to be not expired.
    */
   protected function isUserAuthenticated() {
-    /** @var \Drupal\media_fotoweb\OAuth2\Persistence\UserTokenPersistence $tokenPersistence */
+    /** @var UserTokenPersistence $tokenPersistence */
     $tokenPersistence = \Drupal::service('media_fotoweb.user_token_persistence');
     if ($tokenPersistence->hasToken()) {
       $token = new RawToken();
@@ -188,7 +192,7 @@ trait FotowebWidgetTrait {
       if ($token->isExpired()) {
         // The access token is expired, so try to get a new one by using the
         // refresh token.
-        /** @var \Drupal\media_fotoweb\FotowebClient $client */
+        /** @var FotowebClient $client */
         $client = \Drupal::service('media_fotoweb.client');
         $clientConfiguration = $client->getConfiguration();
         $clientConfiguration['persistenceType'] = 'user_token_persistence';
diff --git a/src/ImageFetcherBase.php b/src/ImageFetcherBase.php
index 5c8ec2c..622c286 100644
--- a/src/ImageFetcherBase.php
+++ b/src/ImageFetcherBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_fotoweb;
 
+use GuzzleHttp\Psr7\Response;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 
@@ -13,14 +14,14 @@ abstract class ImageFetcherBase extends PluginBase implements ImageFetcherInterf
   /**
    * The Fotoweb client.
    *
-   * @var \Drupal\media_fotoweb\FotowebClient
+   * @var FotowebClient
    */
   protected $client;
 
   /**
    * The HTTP response of the fetched image.
    *
-   * @var \GuzzleHttp\Psr7\Response
+   * @var Response
    */
   protected $response;
 
diff --git a/src/ImageFetcherInterface.php b/src/ImageFetcherInterface.php
index 76b8dc7..cd5cd2e 100644
--- a/src/ImageFetcherInterface.php
+++ b/src/ImageFetcherInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_fotoweb;
 
+use GuzzleHttp\Psr7\Response;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -12,7 +13,7 @@ interface ImageFetcherInterface extends PluginInspectionInterface {
   /**
    * Returns the response object.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    */
   public function getResponse();
 
diff --git a/src/ImageFetcherManager.php b/src/ImageFetcherManager.php
index 59d77df..ca967c0 100644
--- a/src/ImageFetcherManager.php
+++ b/src/ImageFetcherManager.php
@@ -17,9 +17,9 @@ class ImageFetcherManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/MediaFotowebLibraryUiBuilder.php b/src/MediaFotowebLibraryUiBuilder.php
index ec2f051..60db346 100644
--- a/src/MediaFotowebLibraryUiBuilder.php
+++ b/src/MediaFotowebLibraryUiBuilder.php
@@ -21,15 +21,15 @@ class MediaFotowebLibraryUiBuilder extends MediaLibraryUiBuilder {
    * Makes $opener_resolver an optional parameter for installations that do not
    * use media_library.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\views\ViewExecutableFactory $views_executable_factory
+   * @param ViewExecutableFactory $views_executable_factory
    *   The views executable factory.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The currently active request object.
-   * @param \Drupal\media_library\OpenerResolverInterface|NULL $opener_resolver
+   * @param OpenerResolverInterface|NULL $opener_resolver
    *   The opener resolver.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RequestStack $request_stack, ViewExecutableFactory $views_executable_factory, FormBuilderInterface $form_builder, OpenerResolverInterface $opener_resolver = NULL) {
@@ -42,7 +42,7 @@ class MediaFotowebLibraryUiBuilder extends MediaLibraryUiBuilder {
    * Fotoweb is made for selecting all assets via the Fotoweb Browser.
    * Therefore we remove the media items view and only keep the "form".
    *
-   * @param \Drupal\media_library\MediaLibraryState $state
+   * @param MediaLibraryState $state
    *   The current state of the media library, derived from the current request.
    *
    * @return array
diff --git a/src/OAuth2/Persistence/ApiTokenPersistence.php b/src/OAuth2/Persistence/ApiTokenPersistence.php
index 85824b9..4066bcf 100644
--- a/src/OAuth2/Persistence/ApiTokenPersistence.php
+++ b/src/OAuth2/Persistence/ApiTokenPersistence.php
@@ -16,14 +16,14 @@ class ApiTokenPersistence implements TokenPersistenceInterface {
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * ApiTokenPersistence constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state store.
    */
   public function __construct(StateInterface $state) {
diff --git a/src/OAuth2/Persistence/UserTokenPersistence.php b/src/OAuth2/Persistence/UserTokenPersistence.php
index e4d8626..ba1408a 100644
--- a/src/OAuth2/Persistence/UserTokenPersistence.php
+++ b/src/OAuth2/Persistence/UserTokenPersistence.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_fotoweb\OAuth2\Persistence;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\user\UserDataInterface;
@@ -16,32 +17,32 @@ class UserTokenPersistence implements TokenPersistenceInterface {
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * UserTokenPersistence constructor.
    *
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(UserDataInterface $userData, AccountProxyInterface $currentUser, TimeInterface $time) {
diff --git a/src/Plugin/ImageFetcher/OriginalImage.php b/src/Plugin/ImageFetcher/OriginalImage.php
index 13914e7..73aca59 100644
--- a/src/Plugin/ImageFetcher/OriginalImage.php
+++ b/src/Plugin/ImageFetcher/OriginalImage.php
@@ -26,7 +26,7 @@ class OriginalImage extends ImageFetcherBase {
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\media_fotoweb\FotowebClient $client
+   * @param FotowebClient $client
    *   The Fotoweb client.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FotowebClient $client) {
diff --git a/src/Plugin/ImageFetcher/RenditionImage.php b/src/Plugin/ImageFetcher/RenditionImage.php
index 9f36ae0..3b54db3 100644
--- a/src/Plugin/ImageFetcher/RenditionImage.php
+++ b/src/Plugin/ImageFetcher/RenditionImage.php
@@ -21,7 +21,7 @@ class RenditionImage extends ImageFetcherBase {
   /**
    * The rendition negotiator.
    *
-   * @var \Drupal\media_fotoweb\RenditionNegotiator
+   * @var RenditionNegotiator
    */
   protected $renditionNegotiator;
 
@@ -34,9 +34,9 @@ class RenditionImage extends ImageFetcherBase {
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\media_fotoweb\FotowebClient $client
+   * @param FotowebClient $client
    *   The Fotoweb client.
-   * @param \Drupal\media_fotoweb\RenditionNegotiator $rendition_negotiator
+   * @param RenditionNegotiator $rendition_negotiator
    *   The rendition negotiator.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FotowebClient $client, RenditionNegotiator $rendition_negotiator
diff --git a/src/Plugin/media/Source/Fotoweb.php b/src/Plugin/media/Source/Fotoweb.php
index 07ff4b9..df164d9 100644
--- a/src/Plugin/media/Source/Fotoweb.php
+++ b/src/Plugin/media/Source/Fotoweb.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\media_fotoweb\Plugin\media\Source;
 
+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\media_fotoweb\ImageFetcherInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -38,28 +40,28 @@ class Fotoweb extends MediaSourceBase {
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The Image Fetcher Plugin Manager.
    *
-   * @var \Drupal\media_fotoweb\ImageFetcherManager
+   * @var ImageFetcherManager
    */
   protected $imageFetcherManager;
 
@@ -72,19 +74,19 @@ class Fotoweb extends MediaSourceBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\media_fotoweb\ImageFetcherManager $image_fetcher_manager
+   * @param ImageFetcherManager $image_fetcher_manager
    *   The Image Fetcher Plugin Manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $configFactory, FileSystemInterface $fileSystem, Token $token, ImageFetcherManager $image_fetcher_manager) {
@@ -183,7 +185,7 @@ class Fotoweb extends MediaSourceBase {
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\media\MediaTypeInterface $bundle */
+    /** @var MediaTypeInterface $bundle */
     $bundle = $form_state->getFormObject()->getEntity();
 
     $form = parent::buildConfigurationForm($form, $form_state);
@@ -201,7 +203,7 @@ class Fotoweb extends MediaSourceBase {
   /**
    * Build the local image field options.
    *
-   * @param \Drupal\media\MediaTypeInterface $bundle
+   * @param MediaTypeInterface $bundle
    *   The bundle of the configuration form.
    *
    * @return array
@@ -224,7 +226,7 @@ class Fotoweb extends MediaSourceBase {
   /**
    * Returns the Thumbnail for a given media.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get a file for.
    *
    * @return string
@@ -249,10 +251,10 @@ class Fotoweb extends MediaSourceBase {
   /**
    * Returns an associated file or creates a new one.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get a file for.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   A file entity or FALSE on failure.
    */
   protected function createOrGetFile(MediaInterface $media) {
@@ -275,16 +277,16 @@ class Fotoweb extends MediaSourceBase {
   /**
    * Load an existing local file for the media.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get the existing file ID from.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   The existing file or FALSE if one was not found.
    */
   protected function getExistingFile(MediaInterface $media) {
     $file_field = $this->getLocalFileField($media);
     if ($media->hasField($file_field)) {
-      /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $file */
+      /** @var FileItem $file */
       $file_item = $media->get($file_field)->first();
       if (!empty($file_item->target_id)) {
         return $this->entityTypeManager->getStorage('file')
@@ -298,12 +300,12 @@ class Fotoweb extends MediaSourceBase {
   /**
    * Creates a new file for a fotoweb asset.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    * @param int $replace
    *   Flag for dealing with existing files.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   The created file or FALSE on failure.
    */
   public function createNewFile(MediaInterface $media, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ -324,7 +326,7 @@ class Fotoweb extends MediaSourceBase {
     $config = $this->configFactory->get('media_fotoweb.settings');
     $storageType = $config->get('file_storage_type');
 
-    /** @var \Drupal\media_fotoweb\ImageFetcherInterface $imageFetcher */
+    /** @var ImageFetcherInterface $imageFetcher */
     $imageFetcher = $this->imageFetcherManager->createInstance($storageType);
     $resourceUrl = $this->getMetadata($media, 'href');
     // For already stored media items we might get back a nested array
@@ -357,7 +359,7 @@ class Fotoweb extends MediaSourceBase {
         }
     }
 
-    $file = file_save_data($data, $destination_path, $replace);
+    $file = \Drupal::service('file.repository')->writeData($data, $destination_path, $replace);
 
     return $file;
   }
@@ -398,14 +400,14 @@ class Fotoweb extends MediaSourceBase {
   /**
    * Gets the file field being used to store the fotoweb asset.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get the mapped file field.
    *
    * @return bool|string
    *   The name of the file field on the media bundle or FALSE on failure.
    */
   protected function getLocalFileField(MediaInterface $media) {
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     $media_type = $this->entityTypeManager->getStorage('media_type')->load($media->bundle());
     $source = $media_type->getSource();
     return $source->getConfiguration()['local_image'];
diff --git a/src/RenditionNegotiator.php b/src/RenditionNegotiator.php
index 6b328d3..9079214 100644
--- a/src/RenditionNegotiator.php
+++ b/src/RenditionNegotiator.php
@@ -21,7 +21,7 @@ class RenditionNegotiator {
   /**
    * RenditionNegotiator constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -60,7 +60,7 @@ class RenditionNegotiator {
   /**
    * Return the best fit asset image path from a asset resource.
    *
-   * @param \Fotoweb\Representation\Asset $asset
+   * @param Asset $asset
    *   The Fotoweb asset.
    *
    * @return string|null
diff --git a/tests/src/Unit/FotowebLoginManagerTest.php b/tests/src/Unit/FotowebLoginManagerTest.php
index 69ca8a9..826c787 100644
--- a/tests/src/Unit/FotowebLoginManagerTest.php
+++ b/tests/src/Unit/FotowebLoginManagerTest.php
@@ -21,14 +21,14 @@ class FotowebLoginManagerTest extends UnitTestCase {
   /**
    * The Fotoweb Login Manager service.
    *
-   * @var \Drupal\media_fotoweb\FotowebLoginManager
+   * @var FotowebLoginManager
    */
   protected $fotowebLoginManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $config_factory = $this
@@ -42,17 +42,13 @@ class FotowebLoginManagerTest extends UnitTestCase {
     $container->set('config.factory', $config_factory);
 
     // Create mocks.
-    $fieldItem = $this->getMockBuilder(FieldItemListInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fieldItem = $this->createMock(FieldItemListInterface::class);
     $fieldItem->expects($this->any())
       ->method('__get')
       ->with('value')
       ->willReturn('fotoweb_testuser');
 
-    $testUser = $this->getMockBuilder('Drupal\user\Entity\User')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $testUser = $this->createMock('Drupal\user\Entity\User');
     $testUser->expects($this->any())
       ->method('hasField')
       ->with('name')
@@ -83,7 +79,7 @@ class FotowebLoginManagerTest extends UnitTestCase {
     $username = 'fotoweb_testuser';
     // The login token uses time based components, so we are only checking
     // for the expected format.
-    $this->assertRegExp('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getUserLoginTokenFromUsername($username));
+    $this->assertMatchesRegularExpression('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getUserLoginTokenFromUsername($username));
   }
 
   /**
@@ -95,7 +91,7 @@ class FotowebLoginManagerTest extends UnitTestCase {
       ->method('id')
       ->will($this->returnValue(1));
 
-    $this->assertRegExp('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getLoginTokenFromAccount($account));
+    $this->assertMatchesRegularExpression('/^[A-Za-z0-9]{0,130}==$/', $this->fotowebLoginManager->getLoginTokenFromAccount($account));
   }
 
 }
diff --git a/tests/src/Unit/RenditionImageFetcherTest.php b/tests/src/Unit/RenditionImageFetcherTest.php
index f02e37b..81461ca 100644
--- a/tests/src/Unit/RenditionImageFetcherTest.php
+++ b/tests/src/Unit/RenditionImageFetcherTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\media_fotoweb\Unit;
 
+use GuzzleHttp\Psr7\Request;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\media_fotoweb\FotowebClient;
 use Drupal\media_fotoweb\Plugin\ImageFetcher\RenditionImage;
@@ -23,14 +24,14 @@ class RenditionImageFetcherTest extends UnitTestCase {
   /**
    * The rendition negotiator service.
    *
-   * @var \Drupal\media_fotoweb\RenditionNegotiator
+   * @var RenditionNegotiator
    */
   protected $renditionNegotiator;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $configFactory = $this
@@ -50,10 +51,10 @@ class RenditionImageFetcherTest extends UnitTestCase {
    *
    * @param array $responses
    *   An array of mocked responses.
-   * @param \GuzzleHttp\Handler\MockHandler|null $mockHandler
+   * @param MockHandler|null $mockHandler
    *   The guzzle mock handler.
    *
-   * @return \GuzzleHttp\Handler\MockHandler
+   * @return MockHandler
    *   The modified guzzle mock handler.
    */
   protected function buildMockHandler(array $responses, MockHandler $mockHandler = NULL) {
@@ -98,7 +99,7 @@ class RenditionImageFetcherTest extends UnitTestCase {
 
     // Verify that the expected preview image was requested.
     $transaction = array_pop($container);
-    /** @var \GuzzleHttp\Psr7\Request $request */
+    /** @var Request $request */
     $request = $transaction['request'];
     $requestPath = $request->getUri()->getPath();
     $this->assertEquals('/fotoweb/cache/5000/myimage.t5653107a.m1600.xuETTbu2auFn8DaBE75CwjFgVNCFnggG4aSibC7uXR88.jpg', $requestPath, 'The request path matches the expected preview.');
diff --git a/tests/src/Unit/RenditionNegotiatorTest.php b/tests/src/Unit/RenditionNegotiatorTest.php
index dd5b1d2..524444c 100644
--- a/tests/src/Unit/RenditionNegotiatorTest.php
+++ b/tests/src/Unit/RenditionNegotiatorTest.php
@@ -17,14 +17,14 @@ class RenditionNegotiatorTest extends UnitTestCase {
   /**
    * The rendition negotiator service.
    *
-   * @var \Drupal\media_fotoweb\RenditionNegotiator
+   * @var RenditionNegotiator
    */
   protected $renditionNegotiator;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $configFactory = $this
