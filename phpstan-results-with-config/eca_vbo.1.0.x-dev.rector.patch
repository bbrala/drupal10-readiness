diff --git a/eca_vbo.module b/eca_vbo.module
index 135d28c..c1300c0 100644
--- a/eca_vbo.module
+++ b/eca_vbo.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager;
 use Drupal\eca\Entity\Eca;
 
 /**
@@ -20,7 +21,7 @@ function eca_vbo_eca_presave(Eca $eca) {
     }
   }
   if ($clear_cache) {
-    /** @var \Drupal\views_bulk_operations\Service\ViewsBulkOperationsActionManager $manager */
+    /** @var ViewsBulkOperationsActionManager $manager */
     $manager = \Drupal::service('plugin.manager.views_bulk_operations_action');
     $manager->clearCachedDefinitions();
   }
diff --git a/src/Event/VboCustomAccessEvent.php b/src/Event/VboCustomAccessEvent.php
index 51c7d06..870ee2b 100644
--- a/src/Event/VboCustomAccessEvent.php
+++ b/src/Event/VboCustomAccessEvent.php
@@ -13,14 +13,14 @@ class VboCustomAccessEvent extends VboEventBase {
   /**
    * The account to check access for.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $account;
 
   /**
    * The executable view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected ViewExecutable $view;
 
@@ -48,9 +48,9 @@ class VboCustomAccessEvent extends VboEventBase {
   /**
    * Constructs a new VboCustomAccessEvent object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to check access for.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable view.
    * @param bool $access_granted
    *   The default value whether access is granted.
@@ -76,7 +76,7 @@ class VboCustomAccessEvent extends VboEventBase {
   /**
    * Get the account to check access for.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The account.
    */
   public function getAccount(): AccountInterface {
@@ -86,7 +86,7 @@ class VboCustomAccessEvent extends VboEventBase {
   /**
    * Get the executable view.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The executable view.
    */
   public function getView(): ViewExecutable {
diff --git a/src/Event/VboEventBase.php b/src/Event/VboEventBase.php
index 1409f85..d1786ec 100644
--- a/src/Event/VboEventBase.php
+++ b/src/Event/VboEventBase.php
@@ -14,7 +14,7 @@ abstract class VboEventBase extends Event implements ConditionalApplianceInterfa
   /**
    * The executable view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected ViewExecutable $view;
 
diff --git a/src/Event/VboExecuteEvent.php b/src/Event/VboExecuteEvent.php
index b79b534..28ef8e3 100644
--- a/src/Event/VboExecuteEvent.php
+++ b/src/Event/VboExecuteEvent.php
@@ -15,7 +15,7 @@ class VboExecuteEvent extends VboEventBase implements EntityEventInterface {
   /**
    * The main entity of the Views row.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;
 
@@ -43,15 +43,15 @@ class VboExecuteEvent extends VboEventBase implements EntityEventInterface {
   /**
    * Constructs a new ViewsBulkOperationsEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The main entity of the Views row.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable view.
    * @param array &$action_context
    *   The context array passed from VBO to the action.
    * @param array &$action_configuration
    *   The action configuration.
-   * @param \Drupal\Core\Action\ActionInterface $action
+   * @param ActionInterface $action
    *   The action plugin instance.
    */
   public function __construct(EntityInterface $entity, ViewExecutable $view, array &$action_context, array &$action_configuration, ActionInterface $action) {
@@ -76,7 +76,7 @@ class VboExecuteEvent extends VboEventBase implements EntityEventInterface {
   /**
    * Get the exeuctable view.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The executable view.
    */
   public function getView(): ViewExecutable {
@@ -86,7 +86,7 @@ class VboExecuteEvent extends VboEventBase implements EntityEventInterface {
   /**
    * Get the action plugin instance.
    *
-   * @return \Drupal\Core\Action\ActionInterface
+   * @return ActionInterface
    *   The action plugin instance.
    */
   public function getAction(): ActionInterface {
diff --git a/src/Event/VboFormEventBase.php b/src/Event/VboFormEventBase.php
index bd45c02..266d34d 100644
--- a/src/Event/VboFormEventBase.php
+++ b/src/Event/VboFormEventBase.php
@@ -24,7 +24,7 @@ abstract class VboFormEventBase extends VboEventBase implements FormEventInterfa
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected FormStateInterface $formState;
 
@@ -54,15 +54,15 @@ abstract class VboFormEventBase extends VboEventBase implements FormEventInterfa
    *
    * @param array &$form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable view.
    * @param array &$action_context
    *   The context array passed from VBO to the action.
    * @param array &$action_configuration
    *   The action configuration.
-   * @param \Drupal\Core\Action\ActionInterface $action
+   * @param ActionInterface $action
    *   The action plugin instance.
    */
   public function __construct(array &$form, FormStateInterface $form_state, ViewExecutable $view, array &$action_context, array &$action_configuration, ActionInterface $action) {
@@ -95,7 +95,7 @@ abstract class VboFormEventBase extends VboEventBase implements FormEventInterfa
   /**
    * Get the exeuctable view.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The executable view.
    */
   public function getView(): ViewExecutable {
@@ -105,7 +105,7 @@ abstract class VboFormEventBase extends VboEventBase implements FormEventInterfa
   /**
    * Get the action plugin instance.
    *
-   * @return \Drupal\Core\Action\ActionInterface
+   * @return ActionInterface
    *   The action plugin instance.
    */
   public function getAction(): ActionInterface {
diff --git a/src/Plugin/Action/Derivative/VboExecuteDeriver.php b/src/Plugin/Action/Derivative/VboExecuteDeriver.php
index 88339a9..19a2230 100644
--- a/src/Plugin/Action/Derivative/VboExecuteDeriver.php
+++ b/src/Plugin/Action/Derivative/VboExecuteDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eca_vbo\Plugin\Action\Derivative;
 
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Drupal\eca\Entity\Eca;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,7 +17,7 @@ class VboExecuteDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
@@ -29,9 +31,9 @@ class VboExecuteDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * Constructs a new EntityActionDeriverBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -53,7 +55,7 @@ class VboExecuteDeriver extends DeriverBase implements ContainerDeriverInterface
   public function getDerivativeDefinitions($base_plugin_definition) {
     if (!isset($this->definitions)) {
       $definitions = [];
-      /** @var \Drupal\eca\Entity\Eca $eca */
+      /** @var Eca $eca */
       foreach ($this->entityTypeManager->getStorage('eca')->loadMultiple() as $eca) {
         if (!$eca->status()) {
           continue;
diff --git a/src/Plugin/Action/VboExecute.php b/src/Plugin/Action/VboExecute.php
index 91fdb40..c7ec17f 100644
--- a/src/Plugin/Action/VboExecute.php
+++ b/src/Plugin/Action/VboExecute.php
@@ -45,7 +45,7 @@ class VboExecute extends ViewsBulkOperationsActionBase implements DependentPlugi
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;
 
@@ -65,7 +65,7 @@ class VboExecute extends ViewsBulkOperationsActionBase implements DependentPlugi
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher) {
@@ -150,7 +150,7 @@ class VboExecute extends ViewsBulkOperationsActionBase implements DependentPlugi
   /**
    * Get the executable view.
    *
-   * @return \Drupal\views\ViewExecutable|null
+   * @return ViewExecutable|null
    *   The executable view, or NULL if not available.
    */
   protected function getView(): ?ViewExecutable {
