modules/contrib/better_exposed_filters/better_exposed_filters.api.php
modules/contrib/better_exposed_filters/better_exposed_filters.install
modules/contrib/better_exposed_filters/better_exposed_filters.module
modules/contrib/better_exposed_filters/includes/better_exposed_filters.theme.inc
modules/contrib/better_exposed_filters/src/Annotation/BetterExposedFiltersFilterWidget.php
modules/contrib/better_exposed_filters/src/Annotation/BetterExposedFiltersPagerWidget.php
modules/contrib/better_exposed_filters/src/Annotation/BetterExposedFiltersSortWidget.php
modules/contrib/better_exposed_filters/src/BetterExposedFiltersHelper.php
modules/contrib/better_exposed_filters/src/Plugin/BetterExposedFiltersWidgetBase.php
modules/contrib/better_exposed_filters/src/Plugin/BetterExposedFiltersWidgetInterface.php
modules/contrib/better_exposed_filters/src/Plugin/BetterExposedFiltersWidgetManager.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/DatePickers.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/DefaultWidget.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/FilterWidgetBase.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/Hidden.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/Links.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/RadioButtons.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/Single.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/Sliders.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/pager/DefaultWidget.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/pager/Links.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/pager/PagerWidgetBase.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/pager/RadioButtons.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/sort/DefaultWidget.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/sort/Links.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/sort/RadioButtons.php
modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/sort/SortWidgetBase.php
modules/contrib/better_exposed_filters/src/Plugin/views/exposed_form/BetterExposedFilters.php
modules/contrib/better_exposed_filters/tests/modules/bef_test/bef_test.install
modules/contrib/better_exposed_filters/tests/modules/bef_test/bef_test.module
modules/contrib/better_exposed_filters/tests/src/FunctionalJavascript/BetterExposedFiltersTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/BetterExposedFiltersKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/BetterExposedFiltersKernelTestBase.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/filter/FilterWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/filter/HiddenFilterWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/filter/LinksFilterWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/filter/RadioButtonsFilterWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/filter/SingleFilterWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/pager/LinksPagerWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/pager/RadioButtonsPagerWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/sort/LinksSortWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/sort/RadioButtonsSortWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/sort/SortWidgetKernelTest.php
modules/contrib/better_exposed_filters/tests/src/Traits/BetterExposedFiltersTrait.php
modules/contrib/better_exposed_filters/tests/src/Unit/BetterExposedFiltersHelperUnitTest.php

20 files with changes
=====================

1) modules/contrib/better_exposed_filters/tests/src/Traits/BetterExposedFiltersTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\better_exposed_filters\Traits;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\views\ViewExecutable;

@@ @@
   /**
    * Returns the configured BEF options.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
    *
    * @return array
@@ @@
   /**
    * Merges options into existing BEF configuration.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
    * @param array $options
    *   The list of options (e.g. ['sort' => ['plugin_id' => 'default']]).
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures an exception is thrown.
    */
   protected function setBetterExposedOptions(ViewExecutable $view, array $options) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/sort/SortWidgetKernelTest.php:50

    ---------- begin diff ----------
@@ @@
     ];

     // Assert our combined sort options are added.
-    $this->assertEqual($options, $assert, 'Sort options are combined.');
+    $this->assertEquals($options, $assert, 'Sort options are combined.');

     $view->destroy();
   }
@@ @@
     ];

     // Assert our combined sort options are added.
-    $this->assertEqual($options, $assert, 'Sort options are combined and rewritten.');
+    $this->assertEquals($options, $assert, 'Sort options are combined and rewritten.');

     $view->destroy();
   }
@@ @@
     ];

     // Assert our combined sort options are added.
-    $this->assertEqual($options, $assert, 'Reset sort option was added.');
+    $this->assertEquals($options, $assert, 'Reset sort option was added.');

     $view->destroy();
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/better_exposed_filters/tests/src/Kernel/Plugin/filter/FilterWidgetKernelTest.php:87

    ---------- begin diff ----------
@@ @@
     $sorted_options = $options = $output['field_bef_integer_value']['#options'];
     asort($sorted_options);

-    $this->assertNotEqual(array_keys($options), array_keys($sorted_options), '"Field BEF integer" options are not sorted alphabetically.');
+    $this->assertNotEquals(array_keys($options), array_keys($sorted_options), '"Field BEF integer" options are not sorted alphabetically.');

     $view->destroy();

@@ @@
     asort($sorted_options);

     // Assert our "collapsible" options detail is visible.
-    $this->assertEqual(array_keys($options), array_keys($sorted_options), '"Field BEF integer" options are sorted alphabetically.');
+    $this->assertEquals(array_keys($options), array_keys($sorted_options), '"Field BEF integer" options are sorted alphabetically.');

     $view->destroy();
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/better_exposed_filters/tests/src/Kernel/BetterExposedFiltersKernelTestBase.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp();

     $this->installSchema('node', ['node_access']);
@@ @@
   /**
    * Gets the render array for the views exposed form.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
    *
    * @return array
@@ @@
   /**
    * Renders the views exposed form.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
    */
   protected function renderExposedForm(ViewExecutable $view) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/better_exposed_filters/tests/modules/bef_test/bef_test.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Provides install hooks for the BEF Test module.
  */
-
 /**
  * Adds terms to the hierarchical "location" vocabulary.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  *   Thrown if the entity type doesn't exist.
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+ * @throws InvalidPluginDefinitionException
  *   Thrown if the storage handler couldn't be loaded.
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  *   In case of failures an exception is thrown.
  */
 function bef_test_install() {
@@ @@
  * @return int
  *   TID of the newly created term.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  *   Thrown if the entity type doesn't exist.
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+ * @throws InvalidPluginDefinitionException
  *   Thrown if the storage handler couldn't be loaded.
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  *   In case of failures an exception is thrown.
  */
 function _bef_test_add_term($name, $parent = 0) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/better_exposed_filters/src/Plugin/views/exposed_form/BetterExposedFilters.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin\views\exposed_form;

+use Drupal\views\Plugin\views\HandlerBase;
+use Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface;
+use Drupal\Core\Render\ElementInfoManager;
 use Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * BEF filters widget plugin manager.
    *
-   * @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager
+   * @var BetterExposedFiltersWidgetManager
    */
   public $filterWidgetManager;

@@ @@
   /**
    * BEF pager widget plugin manager.
    *
-   * @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager
+   * @var BetterExposedFiltersWidgetManager
    */
   public $pagerWidgetManager;

@@ @@
   /**
    * BEF sort widget plugin manager.
    *
-   * @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager
+   * @var BetterExposedFiltersWidgetManager
    */
   public $sortWidgetManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager $filter_widget_manager
+   * @param BetterExposedFiltersWidgetManager $filter_widget_manager
    *   The better exposed filter widget manager for filter widgets.
-   * @param \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager $pager_widget_manager
+   * @param BetterExposedFiltersWidgetManager $pager_widget_manager
    *   The better exposed filter widget manager for pager widgets.
-   * @param \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager $sort_widget_manager
+   * @param BetterExposedFiltersWidgetManager $sort_widget_manager
    *   The better exposed filter widget manager for sort widgets.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Manage drupal modules.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, BetterExposedFiltersWidgetManager $filter_widget_manager, BetterExposedFiltersWidgetManager $pager_widget_manager, BetterExposedFiltersWidgetManager $sort_widget_manager, ModuleHandlerInterface $module_handler) {
@@ @@
     // Initialize options if any sort is exposed.
     // Iterate over each sort and determine if any sorts are exposed.
     $is_sort_exposed = FALSE;
-    /** @var \Drupal\views\Plugin\views\HandlerBase $sort */
+    /** @var HandlerBase $sort */
     foreach ($this->view->display_handler->getHandlers('sort') as $sort) {
       if ($sort->isExposed()) {
         $is_sort_exposed = TRUE;
@@ @@
     }

     // Go through each exposed filter and set default format.
-    /** @var \Drupal\views\Plugin\views\HandlerBase $filter */
+    /** @var HandlerBase $filter */
     foreach ($this->view->display_handler->getHandlers('filter') as $filter_id => $filter) {
       if (!$filter->isExposed()) {
         continue;
@@ @@

     // Iterate over each sort and determine if any sorts are exposed.
     $is_sort_exposed = FALSE;
-    /** @var \Drupal\views\Plugin\views\HandlerBase $sort */
+    /** @var HandlerBase $sort */
     foreach ($this->view->display_handler->getHandlers('sort') as $sort) {
       if ($sort->isExposed()) {
         $is_sort_exposed = TRUE;
@@ @@

       if ($selected_plugin_id) {
         $plugin_configuration = $bef_options['sort'] ?? [];
-        /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+        /** @var BetterExposedFiltersWidgetInterface $plugin */
         $plugin = $this->sortWidgetManager->createInstance($selected_plugin_id, $plugin_configuration);
         $plugin->setView($this->view);

@@ @@

       if ($selected_plugin_id) {
         $plugin_configuration = $bef_options['pager'] ?? [];
-        /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+        /** @var BetterExposedFiltersWidgetInterface $plugin */
         $plugin = $this->pagerWidgetManager->createInstance($selected_plugin_id, $plugin_configuration);
         $plugin->setView($this->view);

@@ @@
     ];

     // Iterate over each filter and add BEF filter options.
-    /** @var \Drupal\views\Plugin\views\HandlerBase $filter */
+    /** @var HandlerBase $filter */
     foreach ($this->view->display_handler->getHandlers('filter') as $filter_id => $filter) {
       if (!$filter->isExposed()) {
         continue;
@@ @@

       if ($selected_plugin_id) {
         $plugin_configuration = $bef_options['filter'][$filter_id] ?? [];
-        /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+        /** @var BetterExposedFiltersWidgetInterface $plugin */
         $plugin = $this->filterWidgetManager->createInstance($selected_plugin_id, $plugin_configuration);
         $plugin->setView($this->view);
         $plugin->setViewsHandler($filter);
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
     }

     // Shorthand for all filter handlers in this view.
-    /** @var \Drupal\views\Plugin\views\HandlerBase[] $filters */
+    /** @var HandlerBase[] $filters */
     $filters = $this->view->display_handler->handlers['filter'];

     // Iterate over all filter, sort and pager plugins.
@@ @@
           if (!$plugin_id) {
             continue;
           }
-          /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+          /** @var BetterExposedFiltersWidgetInterface $plugin */
           $plugin = $this->filterWidgetManager->createInstance($plugin_id);
           $subform = &$bef_form[$type][$filter_id]['configuration'];
           $subform_state = SubformState::createForSubform($subform, $parent_form, $form_state);
@@ @@

         // Use the correct widget manager.
         if ($type === 'pager') {
-          /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+          /** @var BetterExposedFiltersWidgetInterface $plugin */
           $plugin = $this->pagerWidgetManager->createInstance($plugin_id);
         }
         else {
-          /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+          /** @var BetterExposedFiltersWidgetInterface $plugin */
           $plugin = $this->sortWidgetManager->createInstance($plugin_id);
         }

@@ @@
     $bef_options = &$options['bef'];

     // Shorthand for all filter handlers in this view.
-    /** @var \Drupal\views\Plugin\views\HandlerBase[] $filters */
+    /** @var HandlerBase[] $filters */
     $filters = $this->view->display_handler->handlers['filter'];

     parent::submitOptionsForm($form, $form_state);
@@ @@
       if ($type === 'filter') {
         foreach ($config as $filter_id => $filter_options) {
           $plugin_id = $filter_options['configuration']['plugin_id'] ?? NULL;
-          /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+          /** @var BetterExposedFiltersWidgetInterface $plugin */
           if (!$plugin_id) {
             unset($bef_options['filter'][$filter_id]);
             continue;
@@ @@

         // Use the correct widget manager.
         if ($type === 'pager') {
-          /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+          /** @var BetterExposedFiltersWidgetInterface $plugin */
           $plugin = $this->pagerWidgetManager->createInstance($plugin_id);
         }
         else {
-          /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+          /** @var BetterExposedFiltersWidgetInterface $plugin */
           $plugin = $this->sortWidgetManager->createInstance($plugin_id);
         }

@@ @@
       $plugin_id = $bef_options['sort']['plugin_id'];
       $plugin_configuration = $bef_options['sort'];

-      /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+      /** @var BetterExposedFiltersWidgetInterface $plugin */
       $plugin = $this->sortWidgetManager->createInstance($plugin_id, $plugin_configuration);
       $plugin->setView($this->view);
       $plugin->exposedFormAlter($form, $form_state);
@@ @@
       $plugin_id = $bef_options['pager']['plugin_id'];
       $plugin_configuration = $bef_options['pager'];

-      /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+      /** @var BetterExposedFiltersWidgetInterface $plugin */
       $plugin = $this->pagerWidgetManager->createInstance($plugin_id, $plugin_configuration);
       $plugin->setView($this->view);
       $plugin->exposedFormAlter($form, $form_state);
@@ @@
     /*
      * Handle exposed filters.
      */
-
     // Shorthand for all filter handlers in this view.
-    /** @var \Drupal\views\Plugin\views\HandlerBase[] $filters */
+    /** @var HandlerBase[] $filters */
     $filters = $this->view->display_handler->handlers['filter'];

     // Iterate over all exposed filters.
@@ @@

         $plugin_id = $filter_options['plugin_id'];
         if ($plugin_id) {
-          /** @var \Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface $plugin */
+          /** @var BetterExposedFiltersWidgetInterface $plugin */
           $plugin = $this->filterWidgetManager->createInstance($plugin_id, $filter_options);
           $plugin->setView($this->view);
           $plugin->setViewsHandler($filters[$filter_id]);
@@ @@
    * @see https://www.drupal.org/project/drupal/issues/2190333
    */
   protected function addDefaultElementInfo(array &$element) {
-    /** @var \Drupal\Core\Render\ElementInfoManager $element_info_manager */
+    /** @var ElementInfoManager $element_info_manager */
     $element_info = \Drupal::service('element_info');
     if (isset($element['#type']) && empty($element['#defaults_loaded']) && ($info = $element_info->getInfo($element['#type']))) {
       $element['#process'] = $element['#process'] ?? [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/sort/SortWidgetBase.php:259

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function sortCombineSubmitForm(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/Sliders.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin\better_exposed_filters\filter;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public static function isApplicable($filter = NULL, array $filter_options = []) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $is_applicable = FALSE;

     // The date filter handler extends the numeric filter handler so we have
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;

     $form = parent::buildConfigurationForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/Single.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin\better_exposed_filters\filter;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public static function isApplicable($filter = NULL, array $filter_options = []) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $is_applicable = FALSE;

     // Sanity check to ensure we have a filter to work with.
@@ @@
    * {@inheritdoc}
    */
   public function exposedFormAlter(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;
     // Form element is designated by the element ID which is user-
     // configurable, and stored differently for grouped filters.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/RadioButtons.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin\better_exposed_filters\filter;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\better_exposed_filters\BetterExposedFiltersHelper;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;

     $form = parent::buildConfigurationForm($form, $form_state);
@@ @@
    * {@inheritdoc}
    */
   public function exposedFormAlter(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;
     // Form element is designated by the element ID which is user-
     // configurable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/Links.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin\better_exposed_filters\filter;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\better_exposed_filters\BetterExposedFiltersHelper;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;

     $form = parent::buildConfigurationForm($form, $form_state);
@@ @@
    * {@inheritdoc}
    */
   public function exposedFormAlter(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;
     $field_id = $this->getExposedFilterFieldId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/FilterWidgetBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin\better_exposed_filters\filter;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\better_exposed_filters\BetterExposedFiltersHelper;
 use Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetBase;
 use Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetInterface;
@@ @@
    * {@inheritdoc}
    */
   public static function isApplicable($filter = NULL, array $filter_options = []) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $is_applicable = FALSE;

     // Sanity check to ensure we have a filter to work with.
@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;
     $filter_widget_type = $this->getExposedFilterWidgetType();

@@ @@
    * {@inheritdoc}
    */
   public function exposedFormAlter(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;
     $filter_id = $filter->options['expose']['identifier'];
     $field_id = $this->getExposedFilterFieldId();
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ @@
    * Takes into account grouped filters with custom identifiers.
    */
   protected function getExposedFilterFieldId() {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;
     $field_id = $filter->options['expose']['identifier'];
     $is_grouped_filter = $filter->options['is_grouped'] ?: FALSE;
@@ @@
     $form = [];
     $form_state = new FormState();
     $form_state->set('exposed', TRUE);
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $filter = $this->handler;
     $filter->buildExposedForm($form, $form_state);
     $filter_id = $filter->options['expose']['identifier'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/better_exposed_filters/src/Plugin/better_exposed_filters/filter/DatePickers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin\better_exposed_filters\filter;

+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public static function isApplicable($filter = NULL, array $filter_options = []) {
-    /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+    /** @var FilterPluginBase $filter */
     $is_applicable = FALSE;

     if ((is_a($filter, 'Drupal\views\Plugin\views\filter\Date') || !empty($filter->date_handler)) && !$filter->isAGroup()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/better_exposed_filters/src/Plugin/BetterExposedFiltersWidgetManager.php:26

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct($type, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/better_exposed_filters/src/Plugin/BetterExposedFiltersWidgetInterface.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the view object.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The views executable object.
    */
   public function setView(ViewExecutable $view);
@@ @@
   /**
    * Sets the exposed view handler plugin.
    *
-   * @param \Drupal\views\Plugin\views\ViewsHandlerInterface $handler
+   * @param ViewsHandlerInterface $handler
    *   The views handler plugin this configuration will affect when exposed.
    */
   public function setViewsHandler(ViewsHandlerInterface $handler);
@@ @@
    *
    * @param array $form
    *   The views configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function exposedFormAlter(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/better_exposed_filters/src/Plugin/BetterExposedFiltersWidgetBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Plugin;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The views executable object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;

@@ @@
   /**
    * The views plugin this configuration will affect when exposed.
    *
-   * @var \Drupal\views\Plugin\views\ViewsHandlerInterface
+   * @var ViewsHandlerInterface
    */
   protected $handler;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Exposed views form state.
    * @param string $element
    *   The key of the form element.
@@ @@
    * @param string $group
    *   The name of the group element.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   protected function addElementToGroup(array &$form, FormStateInterface $form_state, $element, $group) {
@@ @@
   /**
    * Returns exposed form action URL object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Exposed views form state.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Url object.
    */
   protected function getExposedFormActionUrl(FormStateInterface $form_state) {
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $form_state->get('view');
     $display = $form_state->get('display');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/better_exposed_filters/src/Annotation/BetterExposedFiltersSortWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


18) modules/contrib/better_exposed_filters/src/Annotation/BetterExposedFiltersPagerWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


19) modules/contrib/better_exposed_filters/src/Annotation/BetterExposedFiltersFilterWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\better_exposed_filters\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/better_exposed_filters/includes/better_exposed_filters.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Url;
 /**
  * @file
  * Theme hooks, preprocessor, and suggestions.
@@ @@
   foreach ($options as $optionValue => $optionLabel) {
     // Build a new Url object for each link since the query string changes with
     // each option.
-    /** @var Drupal\Core\Url $url */
+    /** @var Url $url */
     $url = clone($element['#bef_path']);

     // Allow visitors to toggle a filter setting on and off. This is not as
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 20 files have been changed by Rector                                      

