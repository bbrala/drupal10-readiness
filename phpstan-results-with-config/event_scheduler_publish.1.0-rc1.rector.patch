diff --git a/src/EventSubscriber/EntityPublishSubscriber.php b/src/EventSubscriber/EntityPublishSubscriber.php
index 1ba745d..bb0d24c 100644
--- a/src/EventSubscriber/EntityPublishSubscriber.php
+++ b/src/EventSubscriber/EntityPublishSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\event_scheduler_publish\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\event_scheduler\EventSchedulerDispatcher;
@@ -34,7 +37,7 @@ class EntityPublishSubscriber implements EventSubscriberInterface {
   /**
    * Constructs a new EntityPublishSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    * @param EventSchedulerDispatcher $dispatcher
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventSchedulerDispatcher $dispatcher) {
@@ -64,9 +67,9 @@ class EntityPublishSubscriber implements EventSubscriberInterface {
    * @param EntityPublishEventInterface $event
    *   The dispatched event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function onEntityPublish(EntityPublishEventInterface $event) {
     $storage = $this->entityTypeManager->getStorage($event->getEntityType());
@@ -99,9 +102,9 @@ class EntityPublishSubscriber implements EventSubscriberInterface {
    * @param EntityPublishEventInterface $event
    *   The dispatched event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function onEntityUnpublish(EntityPublishEventInterface $event) {
     $storage = $this->entityTypeManager->getStorage($event->getEntityType());
diff --git a/src/SchedulerPublishUtils.php b/src/SchedulerPublishUtils.php
index 2bfe2db..4f54b68 100644
--- a/src/SchedulerPublishUtils.php
+++ b/src/SchedulerPublishUtils.php
@@ -19,17 +19,17 @@ use Drupal\event_scheduler_publish\Event\EntityUnpublishEvent;
 class SchedulerPublishUtils implements SchedulerPublishUtilsInterface {
 
   /**
-   * @var \Drupal\event_scheduler\EventSchedulerDispatcher
+   * @var EventSchedulerDispatcher
    */
   protected $dispatcher;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
-   * @var \Drupal\event_scheduler\EventSchedulerDatabaseInterface
+   * @var EventSchedulerDatabaseInterface
    */
   protected $database;
 
@@ -46,9 +46,9 @@ class SchedulerPublishUtils implements SchedulerPublishUtilsInterface {
   /**
    * Constructs a new SchedulerPublishUtils object.
    *
-   * @param \Drupal\event_scheduler\EventSchedulerDispatcher $dispatcher
-   * @param \Drupal\event_scheduler\EventSchedulerDatabaseInterface $database
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param EventSchedulerDispatcher $dispatcher
+   * @param EventSchedulerDatabaseInterface $database
+   * @param LoggerChannelInterface $logger
    */
   public function __construct(
     EventSchedulerDispatcher        $dispatcher,
diff --git a/src/SchedulerPublishUtilsInterface.php b/src/SchedulerPublishUtilsInterface.php
index 67e79c0..09a2ba7 100644
--- a/src/SchedulerPublishUtilsInterface.php
+++ b/src/SchedulerPublishUtilsInterface.php
@@ -14,7 +14,7 @@ interface SchedulerPublishUtilsInterface {
   /**
    * Insert the publish/unpublish events for this entity (as appropriate).
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
@@ -23,7 +23,7 @@ interface SchedulerPublishUtilsInterface {
   /**
    * Update the publish/unpublish events for this entity (as appropriate).
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
