modules/contrib/views_restricted/modules/views_restricted_simple/src/Form/SettingsForm.php
modules/contrib/views_restricted/modules/views_restricted_simple/src/Plugin/ViewsRestricted/ViewsRestrictedControllerSimple.php
modules/contrib/views_restricted/modules/views_restricted_simple/src/ViewsRestrictedSimple.php
modules/contrib/views_restricted/src/Access/AccessController.php
modules/contrib/views_restricted/src/Annotation/ViewsRestricted.php
modules/contrib/views_restricted/src/Element/ViewsRestricted.php
modules/contrib/views_restricted/src/EventSubscriber/ViewsRestrictedRouteSubscriber.php
modules/contrib/views_restricted/src/Form/Ajax/AddHandler.php
modules/contrib/views_restricted/src/Form/Ajax/ConfigHandler.php
modules/contrib/views_restricted/src/Form/Ajax/ConfigHandlerExtra.php
modules/contrib/views_restricted/src/Form/Ajax/ConfigHandlerGroup.php
modules/contrib/views_restricted/src/Form/Ajax/Display.php
modules/contrib/views_restricted/src/Form/Ajax/EditDetails.php
modules/contrib/views_restricted/src/Form/Ajax/Rearrange.php
modules/contrib/views_restricted/src/Form/Ajax/RearrangeFilter.php
modules/contrib/views_restricted/src/Form/Ajax/ReorderDisplays.php
modules/contrib/views_restricted/src/Form/SettingsForm.php
modules/contrib/views_restricted/src/ParamConverter/ViewsUIAlterViewsRestrictedConverter.php
modules/contrib/views_restricted/src/Plugin/ViewsRestricted/ViewsRestrictedControllerLegacy.php
modules/contrib/views_restricted/src/Traits/MassageResponseTrait.php
modules/contrib/views_restricted/src/Urlifyer.php
modules/contrib/views_restricted/src/ViewEditForm.php
modules/contrib/views_restricted/src/ViewPreviewForm.php
modules/contrib/views_restricted/src/ViewsRestrictedHelper.php
modules/contrib/views_restricted/src/ViewsRestrictedInterface.php
modules/contrib/views_restricted/src/ViewsRestrictedParamConverter.php
modules/contrib/views_restricted/src/ViewsRestrictedPatternControllerBase.php
modules/contrib/views_restricted/src/ViewsRestrictedPluginBase.php
modules/contrib/views_restricted/src/ViewsRestrictedPluginManager.php
modules/contrib/views_restricted/tests/src/Functional/AdminPageTest.php
modules/contrib/views_restricted/views_restricted.module

13 files with changes
=====================

1) modules/contrib/views_restricted/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/views_restricted/src/ViewsRestrictedPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/views_restricted/src/ViewsRestrictedPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_restricted;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Routing\RouteMatch;
@@ @@
   }

   /**
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    * @param string|null $display_id
    * @param string|null $type
    * @param string|null $table
    * @param string|null $field
    * @param string|null $alias
-   * @param \Symfony\Component\Routing\Route|NULL $route
-   * @param \Drupal\Core\Routing\RouteMatch|NULL $route_match
+   * @param Route|NULL $route
+   * @param RouteMatch|NULL $route_match
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   abstract public function getAccess(ViewEntityInterface $view, $display_id = NULL, $type = NULL, $table = NULL, $field = NULL, $alias = NULL, Route $route = NULL, RouteMatch $route_match = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/views_restricted/src/ViewsRestrictedPatternControllerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_restricted;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\views\ViewEntityInterface;
@@ @@
 abstract class ViewsRestrictedPatternControllerBase extends ViewsRestrictedPluginBase {

   /**
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    * @param string|null $display_id
    * @param string $type
    * @param $table
@@ @@
    *
    * @param $alias
    *
-   * @param \Symfony\Component\Routing\Route|null $route
-   * @param \Drupal\Core\Routing\RouteMatch|null $route_match
+   * @param Route|null $route
+   * @param RouteMatch|null $route_match
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function getAccess(ViewEntityInterface $view, $display_id = NULL, $type = NULL, $table = NULL, $field = NULL, $alias = NULL, Route $route = NULL, RouteMatch $route_match = NULL) {
     $infoString = ViewsRestrictedHelper::makeInfoString($view, $display_id, $type, $table, $field, $alias);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/views_restricted/src/ViewsRestrictedInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_restricted;

+use Drupal\Core\Access\AccessResult;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Routing\RouteMatch;
@@ @@
 interface ViewsRestrictedInterface extends PluginInspectionInterface, DerivativeInspectionInterface {

   /**
-   * @param \Drupal\views\ViewEntityInterface|null $view
+   * @param ViewEntityInterface|null $view
    * @param string|null $display_id
    * @param string|null $type
    * @param string|null $table
    * @param string|null $field
    * @param string|null $alias
-   * @param \Symfony\Component\Routing\Route|null $route
-   * @param \Drupal\Core\Routing\RouteMatch|null $route_match
+   * @param Route|null $route
+   * @param RouteMatch|null $route_match
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(ViewEntityInterface $view, $display_id = NULL, $type = NULL, $table = NULL, $field = NULL, $alias = NULL, Route $route = NULL, RouteMatch $route_match = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/views_restricted/src/ViewsRestrictedHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_restricted;

+use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\ViewEntityInterface;
@@ @@
 class ViewsRestrictedHelper {

   /**
-   * @param \Drupal\views\ViewEntityInterface $view
-   * @param \Drupal\views_restricted\ViewsRestrictedInterface $views_restricted
+   * @param ViewEntityInterface $view
+   * @param ViewsRestrictedInterface $views_restricted
    */
   public static function setViewsRestricted(ViewEntityInterface $view, ViewsRestrictedInterface $views_restricted) {
     $pluginId = $views_restricted->getPluginId();
@@ @@
   }

   /**
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    * @param string $pluginId
    */
   public static function setViewsRestrictedId(ViewEntityInterface $view, $pluginId) {
@@ @@
   }

   /**
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *
-   * @return \Drupal\views_restricted\ViewsRestrictedInterface|null
+   * @return ViewsRestrictedInterface|null
    */
   public static function extractViewsRestricted(ViewEntityInterface $view) {
     if ($viewsRestrictedId = self::extractViewsRestrictedId($view)) {
-      /** @var \Drupal\views_restricted\ViewsRestrictedPluginManager $viewsRestrictedPluginManager */
+      /** @var ViewsRestrictedPluginManager $viewsRestrictedPluginManager */
       $viewsRestrictedPluginManager = \Drupal::service('plugin.manager.views_restricted');
-      /** @var \Drupal\views_restricted\ViewsRestrictedInterface $viewsRestricted */
+      /** @var ViewsRestrictedInterface $viewsRestricted */
       $viewsRestricted = $viewsRestrictedPluginManager->createInstance($viewsRestrictedId);
       return $viewsRestricted;
     }
@@ @@
   }

   /**
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *
    * @return string|null
    */
@@ @@
   }

   /**
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\views\ViewEntityInterface
+   * @return ViewEntityInterface
    */
   public static function extractViewsUi(FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
+    /** @var EntityFormInterface $formObject */
     $formObject = $form_state->getFormObject();
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = $formObject->getEntity();
     return $view;
   }
@@ @@

   /**
    * @param array $build
-   * @param \Drupal\Core\Access\AccessResult $accessResult
+   * @param AccessResult $accessResult
    */
   public static function removeBuildIfNoAccess(array &$build, AccessResult $accessResult) {
     if (!$accessResult->isAllowed()) {
@@ @@
   }

   /**
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    * @param $display_id
    * @param $type
    * @param $table
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/views_restricted/src/ViewEditForm.php:29

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @param \Drupal\views_ui\ViewUI $view
+   * @param ViewUI $view
    * @param string $display
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/views_restricted/src/Traits/MassageResponseTrait.php:31

    ---------- begin diff ----------
@@ @@

   /**
    * @param $targetUrl
-   * @param \Drupal\views_restricted\ViewsRestrictedInterface $views_restricted
+   * @param ViewsRestrictedInterface $views_restricted
    */
   private function fixUrl(&$targetUrl, ViewsRestrictedInterface $views_restricted) {
     $request = Request::create($targetUrl);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/views_restricted/src/ParamConverter/ViewsUIAlterViewsRestrictedConverter.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * ViewsUIConverterDecorator constructor.
    *
-   * @param \Drupal\Core\ParamConverter\ParamConverterInterface $viewsUiConverter
+   * @param ParamConverterInterface $viewsUiConverter
    */
-  public function __construct(\Drupal\Core\ParamConverter\ParamConverterInterface $viewsUiConverter) {
+  public function __construct(ParamConverterInterface $viewsUiConverter) {
     $this->viewsUiConverter = $viewsUiConverter;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/views_restricted/src/EventSubscriber/ViewsRestrictedRouteSubscriber.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/views_restricted/src/Element/ViewsRestricted.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_restricted\Element;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Entity\EntityFormBuilderInterface;
+use Drupal\views_restricted\ViewsRestrictedPluginManager;
+use Drupal\views_restricted\ViewsRestrictedInterface;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\views\Entity\View;
 use Drupal\views_restricted\ViewsRestrictedHelper;
@@ @@
    *
    * @return array
    *   The modified element.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function preRenderViewsRestrictedElement(array $element) {
-    /** @var \Drupal\Core\Entity\EntityFormBuilderInterface $entityFormBuilder */
+    /** @var EntityFormBuilderInterface $entityFormBuilder */
     $entityFormBuilder = \Drupal::service('entity.form_builder');
-    /** @var \Drupal\views_restricted\ViewsRestrictedPluginManager $viewsRestrictedPluginManager */
+    /** @var ViewsRestrictedPluginManager $viewsRestrictedPluginManager */
     $viewsRestrictedPluginManager = \Drupal::service('plugin.manager.views_restricted');

     $view = $element['#view'];
@@ @@
     }
     $display_id = $element['#display'];
     $views_restricted_id = $element['#views_restricted'];
-    /** @var \Drupal\views_restricted\ViewsRestrictedInterface $viewsRestricted */
+    /** @var ViewsRestrictedInterface $viewsRestricted */
     $viewsRestricted = $viewsRestrictedPluginManager->createInstance($views_restricted_id);
     $viewUI = new ViewUI($view);
     ViewsRestrictedHelper::setViewsRestrictedId($viewUI, $views_restricted_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/views_restricted/src/Access/AccessController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_restricted\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\views_restricted\ViewsRestrictedHelper;
@@ @@
 class AccessController implements AccessInterface {

   /**
-   * @param \Drupal\views_restricted\ViewsRestrictedInterface|NULL $views_restricted
+   * @param ViewsRestrictedInterface|NULL $views_restricted
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function access(ViewsRestrictedInterface $views_restricted, Route $route, RouteMatch $route_match) {
-    /** @var \Drupal\views\ViewEntityInterface|null $view */
+    /** @var ViewEntityInterface|null $view */
     $view = $route_match->getParameter('view');
     $display_id = $route_match->getParameter('display_id');
     $type = $route_match->getParameter('type');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/views_restricted/modules/views_restricted_simple/src/Plugin/ViewsRestricted/ViewsRestrictedControllerSimple.php:16

    ---------- begin diff ----------
@@ @@
  */
 class ViewsRestrictedControllerSimple extends ViewsRestrictedPatternControllerBase implements ContainerFactoryPluginInterface {

-  /** @var \Drupal\Core\Config\ConfigFactoryInterface */
+  /** @var ConfigFactoryInterface */
   protected $configFactory;

   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 13 files have been changed by Rector                                      

