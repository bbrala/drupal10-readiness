modules/contrib/ape/ape.module
modules/contrib/ape/ape_test/ape_test.module
modules/contrib/ape/ape_test/src/Controller/ApeTestController.php
modules/contrib/ape/src/EventSubscriber/ApeSubscriber.php
modules/contrib/ape/src/Form/SettingsForm.php
modules/contrib/ape/src/PageCache/ExcludePages.php
modules/contrib/ape/src/Tests/ApeMinTest.php
modules/contrib/ape/src/Tests/ApeTest.php

5 files with changes
====================

1) modules/contrib/ape/src/Tests/ApeTest.php:55

    ---------- begin diff ----------
@@ @@
   public function testApeHeaders() {
     // Check user registration page has global age.
     $this->drupalGet('user/register');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');

     // Check homepage has alternative age.
     $this->drupalGet('/ape_alternative');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=60, public', 'Alternative Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=60, public', 'Alternative Cache-Control header set.');

     // Check login page is excluded from caching.
     $this->drupalGet('/ape_exclude');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Page successfully excluded from caching.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Page successfully excluded from caching.');

     // Check that authenticated users bypass the cache.
     $user = $this->drupalCreateUser();
@@ @@
     $this->drupalLogin($user);
     $this->drupalGet('user');
     $this->assertNull($this->drupalGetHeader('X-Drupal-Cache'), 'Caching was bypassed.');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Cache-Control header was sent.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Cache-Control header was sent.');
     $this->drupalLogout();

     // Check that 403 responses have configured age.
     $this->drupalGet('admin/structure');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Forbidden page was not cached.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'must-revalidate, no-cache, private', 'Forbidden page was not cached.');

     // Check that 404 responses have configured age.
     $this->drupalGet('notfindingthat');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=3600, public', '404 Page Not Found Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=3600, public', '404 Page Not Found Cache-Control header set.');

     // TODO: Figure out why these tests aren't working. The browser output shows
     // that are they are working as expected. Drupal 8 returned an array of
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ape/src/Tests/ApeMinTest.php:55

    ---------- begin diff ----------
@@ @@
   public function testApeHeaders() {
     // Check user registration page has global age.
     $this->drupalGet('user/register');
-    $this->assertEqual($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');
+    $this->assertEquals($this->drupalGetHeader('Cache-Control'), 'max-age=2592000, public', 'Global Cache-Control header set.');

   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ape/src/PageCache/ExcludePages.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ape\PageCache;

+use Drupal\Core\Config\Config;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\PageCache\ResponsePolicyInterface;
@@ @@
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * Condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @var FactoryInterface $plugin_factory
    *   Factory for condition plugin manager.
    */
   protected $conditionManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/ape/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ape\Form;

+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Alternatives Condition
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $alternatives;

@@ @@
   /**
    * Excluded Condition
    *
-   * @var \Drupal\system\Plugin\Condition\RequestPath
+   * @var RequestPath
    */
   protected $excluded;

@@ @@
   /**
    * Constructs a PerformanceForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @param FactoryInterface $plugin_factory
    *   Factory for condition plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DateFormatterInterface $date_formatter, FactoryInterface $plugin_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ape/src/EventSubscriber/ApeSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ape\EventSubscriber;

+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\PageCache\RequestPolicyInterface;
@@ @@
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configApe;

@@ @@
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configSystem;

@@ @@
   /**
    * A policy rule determining the cacheability of a request.
    *
-   * @var \Drupal\Core\PageCache\RequestPolicyInterface
+   * @var RequestPolicyInterface
    */
   protected $requestPolicy;

@@ @@
   /**
    * A policy rule determining the cacheability of the response.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicyInterface
+   * @var ResponsePolicyInterface
    */
   protected $responsePolicy;

@@ @@
   /**
    * Condition plugin manager.
    *
-   * @var \Drupal\Component\Plugin\Factory\FactoryInterface $plugin_factory
+   * @var FactoryInterface $plugin_factory
    *   Factory for condition plugin manager.
    */
   protected $conditionManager;
@@ @@
   /**
    * Sets extra headers on successful responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {

     if (!$event->isMasterRequest()) {
       return;
@@ @@
   /**
    * Final cache check to respect defined cache policies and max age.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    *
    * @param int $maxAge
@@ @@
    *   True if caching policies allow caching and max age is greater than 0,
    *   false if not.
    */
-  private function checkCacheable(FilterResponseEvent $event, $maxAge) {
+  private function checkCacheable(ResponseEvent $event, $maxAge) {
     $request = $event->getRequest();
     $response = $event->getResponse();

@@ @@
   /**
    * Sets the cache control header.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    *
    * @param int $maxAge
    *   The cache expiration age, in seconds.
    */
-  private function setCacheHeader(FilterResponseEvent $event, $maxAge) {
+  private function setCacheHeader(ResponseEvent $event, $maxAge) {
     $response = $event->getResponse();

     $value = 'no-cache, must-revalidate';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

