modules/contrib/prepopulate/modules/og_prepopulate/og_prepopulate.module
modules/contrib/prepopulate/modules/og_prepopulate/src/Populate.php
modules/contrib/prepopulate/prepopulate.api.php
modules/contrib/prepopulate/prepopulate.module
modules/contrib/prepopulate/src/Populate.php
modules/contrib/prepopulate/src/PopulateInterface.php
modules/contrib/prepopulate/tests/modules/prepopulate_test/src/Form/PrepopulateTestForm.php
modules/contrib/prepopulate/tests/modules/prepopulate_test_unsafe/prepopulate_test_unsafe.module
modules/contrib/prepopulate/tests/src/Functional/PrepopulateFieldTest.php
modules/contrib/prepopulate/tests/src/Functional/PrepopulateFormTest.php

6 files with changes
====================

1) modules/contrib/prepopulate/tests/src/Functional/PrepopulateFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\prepopulate\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * A stub node page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->node = $this->drupalCreateNode([
@@ @@
   /**
    * Test pre-populating all values into a form. Safe and unsafe inputs.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testAllPrepopulate() {
     foreach ($this->allInputs() as $input) {
@@ @@
   /**
    * Test pre-populating unsafe inputs in a form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testUnsafePrepopulate() {
     $this->container->get('module_installer')->uninstall(['prepopulate_test_unsafe']);
@@ @@
    * @param string $expected
    *   The expected result after submitting the form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   protected function assertPrepopulate($query, $expected) {
     $this->drupalGet(Url::fromUri('internal:/prepopulate_test/form?' . $query));
-    $this->drupalPostForm(NULL, [], 'Submit');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->pageTextContains($expected);
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/prepopulate/tests/src/Functional/PrepopulateFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\prepopulate\Functional;

+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Core\Url;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * A stub node page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * A stub term.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser([
       'administer content types',
@@ @@
   /**
    * Test pre-populating fields.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testFieldsPrepopulate() {
     foreach ($this->allFields() as $input) {
@@ @@
    * @param string $expected
    *   The expected results populated in the node.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   protected function assertPrepopulate(array $query, $expected) {
     // Title is required.
@@ @@
     // IEF taxonomy 'name' field is required.
     $query[] = 'edit[field_ief][widget][0][inline_entity_form][name][widget][0][value]=Apples';
     $this->drupalGet(Url::fromUri('internal:/node/add/test_content?' . implode('&', $query)));
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('Test Content simple title has been created.');
     $this->assertSession()->pageTextContains($expected);
     $this->assertSession()->pageTextContains('IEF Apples');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/prepopulate/src/Populate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\prepopulate;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Render\Element;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Populate constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(RequestStack $request, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ @@
    *   The formatted label if entity exists and view label access is allowed.
    *   Otherwise, the value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function formatEntityAutocomplete($value, array &$element) {
     $entity = $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/prepopulate/prepopulate.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\prepopulate\Populate;
 /**
  * @file
  * Fill form elements with data from GET or POST values.
@@ @@
  * An #after_build function to set the values prepopulated in the request.
  */
 function prepopulate_after_build($form) {
-  /** @var \Drupal\prepopulate\Populate $populate */
+  /** @var Populate $populate */
   $populate = \Drupal::service('prepopulate.populator');
   $populate->populateForm($form);
   return $form;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/prepopulate/modules/og_prepopulate/src/Populate.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Populate constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(RequestStack $request, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountProxyInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/prepopulate/modules/og_prepopulate/og_prepopulate.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FieldItemList;
+use Drupal\prepopulate\Populate;
 /**
  * @file
  * The module file for og_prepopulate.
@@ @@
   if ($form_state->isRebuilding()) {
     return;
   }
-  /** @var \Drupal\Core\Field\FieldItemList $field */
+  /** @var FieldItemList $field */
   $field = $context['items'];
   if (\Drupal::request()->query->has($field->getName())) {
     $element['#after_build'][] = 'og_prepopulate_after_build';
@@ @@
 function og_prepopulate_after_build($element) {
   $field_name = reset($element['#parents']);
   $entity_id = \Drupal::request()->query->get($field_name);
-  /** @var \Drupal\prepopulate\Populate $populate */
+  /** @var Populate $populate */
   $populate = \Drupal::service('og_prepopulate.populator');
   // This lets us use URLs like example.com/node/add/page?og_audience=1.
   $populate->populateForm($element, ['target_id' => $entity_id]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

