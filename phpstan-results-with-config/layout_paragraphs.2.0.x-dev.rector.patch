diff --git a/layout_paragraphs.api.php b/layout_paragraphs.api.php
index 23009d2..24bbfac 100644
--- a/layout_paragraphs.api.php
+++ b/layout_paragraphs.api.php
@@ -37,7 +37,7 @@ use Drupal\Core\Form\FormStateInterface;
  *
  * @param array $form
  *   The Layout Paragraph component form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The Layout Paragraph Component Form State.
  *
  * @see layout_paragraphs_form_layout_paragraphs_component_form_alter()
diff --git a/layout_paragraphs.install b/layout_paragraphs.install
index 7b63460..80d1e4e 100644
--- a/layout_paragraphs.install
+++ b/layout_paragraphs.install
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\paragraphs\Entity\Paragraph;
 /**
  * @file
  * Install, update and uninstall functions for the Layout Paragraphs module.
  */
-
 /**
  * The "Disabled Items" feature has been deprecated in Layout Paragraphs 2.x.
  *
@@ -36,7 +36,7 @@ function layout_paragraphs_update_9001(&$sandbox) {
 
   foreach ($ids as $id) {
 
-    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
+    /** @var Paragraph $paragraph */
     $paragraph = \Drupal::entityTypeManager()
       ->getStorage('paragraph')
       ->load($id);
diff --git a/layout_paragraphs.module b/layout_paragraphs.module
index dc79ebb..90a31d5 100644
--- a/layout_paragraphs.module
+++ b/layout_paragraphs.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\layout_paragraphs\LayoutParagraphsLayout;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
 /**
  * @file
  * Contains layout_paragraphs.module.
@@ -131,7 +133,7 @@ function layout_paragraphs_preprocess_radios(&$variables) {
  * @todo Consider adding an alter/info hook for altering this output.
  */
 function layout_paragraphs_preprocess_layout_paragraphs_builder_controls(&$variables) {
-  /** @var \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout */
+  /** @var LayoutParagraphsLayout $layout */
   $layout = $variables['layout_paragraphs_layout'];
   $uuid = $variables['uuid'];
   $component = $layout->getComponentByUuid($uuid);
@@ -371,17 +373,17 @@ function layout_paragraphs_paragraph_presave(Paragraph $paragraph) {
  * The returned list contains all of the referenced entities,
  * including the passed $paragraph.
  *
- * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+ * @param Paragraph $paragraph
  *   The paragraph to use for finding the complete list of siblings.
  *
- * @return \Drupal\Core\Field\EntityReferenceFieldItemList
+ * @return EntityReferenceFieldItemList
  *   The list of paragraphs.
  */
 function _layout_paragraphs_get_paragraphs(Paragraph $paragraph) {
   $host = $paragraph->getParentEntity();
   $parent_field = $paragraph->get('parent_field_name');
   $field_name = $parent_field->first()->getString();
-  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $item_list */
+  /** @var EntityReferenceFieldItemList $item_list */
   $item_list = $host->get($field_name);
   return $item_list->referencedEntities();
 }
diff --git a/modules/layout_paragraphs_library/layout_paragraphs_library.module b/modules/layout_paragraphs_library/layout_paragraphs_library.module
index 2d53d8f..923871b 100644
--- a/modules/layout_paragraphs_library/layout_paragraphs_library.module
+++ b/modules/layout_paragraphs_library/layout_paragraphs_library.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\layout_paragraphs\Contracts\ComponentFormInterface;
+use Drupal\paragraphs\Form\ParagraphsTypeForm;
+use Drupal\paragraphs\ParagraphsTypeInterface;
+use Drupal\layout_paragraphs\Form\InsertComponentForm;
 /**
  * @file
  * Contains layout paragraphs library module.
@@ -17,7 +21,7 @@ use Drupal\paragraphs_library\Entity\LibraryItem;
  * Alters the layout paragraphs component form to add 'Promote to library'.
  */
 function layout_paragraphs_library_form_layout_paragraphs_component_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\layout_paragraphs\Contracts\ComponentFormInterface $form_object */
+  /** @var ComponentFormInterface $form_object */
   $form_object = $form_state->getFormObject();
   $paragraph = $form_object->getParagraph();
   $paragraph_type = $paragraph->getParagraphType();
@@ -59,9 +63,9 @@ function layout_paragraphs_library_form_layout_paragraphs_component_form_alter(a
  * Alters the paragraph types form.
  */
 function layout_paragraphs_library_form_paragraphs_type_form_alter(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\paragraphs\Form\ParagraphsTypeForm $form_object */
+  /** @var ParagraphsTypeForm $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type */
+  /** @var ParagraphsTypeInterface $paragraph_type */
   $paragraph_type = $form_object->getEntity();
   if ($paragraph_type->id() != 'from_library' && $paragraph_type->hasEnabledBehaviorPlugin('layout_paragraphs')) {
     $form['#process'][] = 'layout_paragraphs_library_disable_allow_library_conversion';
@@ -86,7 +90,7 @@ function layout_paragraphs_library_disable_allow_library_conversion($form, FormS
 function layout_paragraphs_library_submit(&$form, FormStateInterface $form_state) {
 
   $tempstore = \Drupal::service('layout_paragraphs.tempstore_repository');
-  /** @var \Drupal\layout_paragraphs\Contracts\ComponentFormInterface $form_object */
+  /** @var ComponentFormInterface $form_object */
   $form_object = $form_state->getFormObject();
   $paragraph = $form_object->buildParagraphComponent($form, $form_state);
   $layout_paragraphs_layout = $form_object->getLayoutParagraphsLayout();
@@ -116,7 +120,7 @@ function layout_paragraphs_library_submit(&$form, FormStateInterface $form_state
   }
   elseif (get_class($form_object) == 'Drupal\layout_paragraphs\Form\InsertComponentForm') {
     $form_object->setParagraph($library_component->getEntity());
-    /** @var \Drupal\layout_paragraphs\Form\InsertComponentForm $form_object */
+    /** @var InsertComponentForm $form_object */
     $form_object->insertComponent();
     $tempstore->set($form_object->getLayoutParagraphsLayout());
   }
@@ -141,7 +145,7 @@ function layout_paragraphs_library_ajax(&$form, FormStateInterface $form_state)
   }
 
   $original_paragraph = $form_state->get('original_paragraph');
-  /** @var \Drupal\layout_paragraphs\Contracts\ComponentFormInterface $form_object */
+  /** @var ComponentFormInterface $form_object */
   $form_object = $form_state->getFormObject();
   if (get_class($form_object) == 'Drupal\layout_paragraphs\Form\EditComponentForm') {
     $response = $form_object->successfulAjaxSubmit($form, $form_state);
diff --git a/modules/layout_paragraphs_permissions/layout_paragraphs_permissions.module b/modules/layout_paragraphs_permissions/layout_paragraphs_permissions.module
index 20fe7c5..b0456b6 100644
--- a/modules/layout_paragraphs_permissions/layout_paragraphs_permissions.module
+++ b/modules/layout_paragraphs_permissions/layout_paragraphs_permissions.module
@@ -31,7 +31,7 @@ function layout_paragraphs_permissions_preprocess_layout_paragraphs_builder(&$va
 /**
  * Checks access for current user on provided layout for provided operation.
  *
- * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+ * @param LayoutParagraphsLayout $layout_paragraphs_layout
  *   The layout.
  * @param string $operation
  *   The operation (i.e. "reorder" or "edit").
@@ -60,7 +60,7 @@ function layout_paragraphs_permissions_form_layout_paragraphs_component_form_alt
  *
  * @param array $element
  *   The element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  * @param array $complete_form
  *   The complete form array.
diff --git a/src/Access/LayoutParagraphsBuilderAccess.php b/src/Access/LayoutParagraphsBuilderAccess.php
index b3fade4..7007f03 100644
--- a/src/Access/LayoutParagraphsBuilderAccess.php
+++ b/src/Access/LayoutParagraphsBuilderAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Access;
 
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\paragraphs\ParagraphsTypeInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -18,14 +19,14 @@ class LayoutParagraphsBuilderAccess implements AccessInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -35,18 +36,18 @@ class LayoutParagraphsBuilderAccess implements AccessInterface {
   /**
    * {@inheritDoc}
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to check access for.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
    * @param string $operation
    *   The operation being performed (i.e. 'create' or 'delete').
    * @param string $component_uuid
    *   The specific component being acted on.
-   * @param \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type
+   * @param ParagraphsTypeInterface $paragraph_type
    *   The paragraph type of a component being added.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(
diff --git a/src/Ajax/LayoutParagraphsEventCommand.php b/src/Ajax/LayoutParagraphsEventCommand.php
index f4952f6..7c62bfb 100644
--- a/src/Ajax/LayoutParagraphsEventCommand.php
+++ b/src/Ajax/LayoutParagraphsEventCommand.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Ajax;
 
+use Drupal\layout_paragraphs\LayoutParagraphsLayout;
 use Drupal\Core\Ajax\CommandInterface;
 
 /**
@@ -12,7 +13,7 @@ class LayoutParagraphsEventCommand implements CommandInterface {
   /**
    * The layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $layout;
 
diff --git a/src/Contracts/ComponentFormInterface.php b/src/Contracts/ComponentFormInterface.php
index 14cc056..ac4bdb3 100644
--- a/src/Contracts/ComponentFormInterface.php
+++ b/src/Contracts/ComponentFormInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Contracts;
 
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Form\FormInterface;
 use Drupal\paragraphs\Entity\Paragraph;
 use Drupal\Core\Form\FormStateInterface;
@@ -30,7 +31,7 @@ interface ComponentFormInterface extends FormInterface {
   /**
    * Setter for layoutParagraphsLayout property.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
    *
    * @return $this
@@ -42,10 +43,10 @@ interface ComponentFormInterface extends FormInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\paragraphs\Entity\Paragraph
+   * @return Paragraph
    *   The paragraph entity.
    */
   public function buildParagraphComponent(array $form, FormStateInterface $form_state);
@@ -57,7 +58,7 @@ interface ComponentFormInterface extends FormInterface {
    *
    * @param array $element
    *   The form element.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The complete form array.
@@ -74,7 +75,7 @@ interface ComponentFormInterface extends FormInterface {
    *
    * @param array $element
    *   The form element.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The complete form array.
@@ -89,10 +90,10 @@ interface ComponentFormInterface extends FormInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The Ajax response.
    */
   public function successfulAjaxSubmit(array $form, FormStateInterface $form_state);
diff --git a/src/Controller/ChooseComponentController.php b/src/Controller/ChooseComponentController.php
index ac173e4..1916014 100644
--- a/src/Controller/ChooseComponentController.php
+++ b/src/Controller/ChooseComponentController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\layout_paragraphs\Controller;
 
+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\paragraphs\Entity\ParagraphsType;
 use Drupal\Core\Url;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Template\Attribute;
@@ -31,23 +33,23 @@ class ChooseComponentController extends ControllerBase {
   /**
    * The entity type bundle info service.
    *
-   * @var Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Construct a Layout Paragraphs Editor controller.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info, EventDispatcherInterface $event_dispatcher) {
@@ -68,9 +70,9 @@ class ChooseComponentController extends ControllerBase {
   /**
    * Builds the component menu.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
    *
    * @return array
@@ -154,7 +156,7 @@ class ChooseComponentController extends ControllerBase {
    * list can be manipulated based on the layout, the layout settings, the
    * parent uuid, and region.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout
+   * @param LayoutParagraphsLayout $layout
    *   The layout object.
    * @param string $parent_uuid
    *   The parent uuid of paragraph we are inserting a component into.
@@ -168,14 +170,14 @@ class ChooseComponentController extends ControllerBase {
     // @todo Document and add tests for what is happening here.
     $component_types = $this->getComponentTypes($layout);
     $event = new LayoutParagraphsAllowedTypesEvent($component_types, $layout, $parent_uuid, $region);
-    $this->eventDispatcher->dispatch(LayoutParagraphsAllowedTypesEvent::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, LayoutParagraphsAllowedTypesEvent::EVENT_NAME);
     return $event->getTypes();
   }
 
   /**
    * Returns an array of available component types.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout
+   * @param LayoutParagraphsLayout $layout
    *   The layout paragraphs layout.
    *
    * @return array
@@ -190,7 +192,7 @@ class ChooseComponentController extends ControllerBase {
     $types = [];
     foreach (array_keys($sorted_bundles) as $bundle) {
       if (TRUE === $this->entityTypeManager->getAccessControlHandler('paragraph')->createAccess($bundle)) {
-        /** @var \Drupal\paragraphs\Entity\ParagraphsType $paragraphs_type */
+        /** @var ParagraphsType $paragraphs_type */
         $paragraphs_type = $storage->load($bundle);
         $plugins = $paragraphs_type->getEnabledBehaviorPlugins();
         $section_component = isset($plugins['layout_paragraphs']);
diff --git a/src/Controller/ComponentFormController.php b/src/Controller/ComponentFormController.php
index 91274ba..e059348 100644
--- a/src/Controller/ComponentFormController.php
+++ b/src/Controller/ComponentFormController.php
@@ -21,14 +21,14 @@ class ComponentFormController extends ControllerBase {
   /**
    * Responds with a component insert form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
-   * @param \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type
+   * @param ParagraphsTypeInterface $paragraph_type
    *   The Paragraph Type to insert.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   A build array or Ajax respone.
    */
   public function insertForm(Request $request, LayoutParagraphsLayout $layout_paragraphs_layout, ParagraphsTypeInterface $paragraph_type) {
@@ -47,7 +47,7 @@ class ComponentFormController extends ControllerBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
    *
    * @return array|AjaxResponse
diff --git a/src/Controller/DuplicateController.php b/src/Controller/DuplicateController.php
index 117a3b0..ce76bcb 100755
--- a/src/Controller/DuplicateController.php
+++ b/src/Controller/DuplicateController.php
@@ -25,7 +25,7 @@ class DuplicateController extends ControllerBase {
   /**
    * The tempstore service.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
@@ -48,12 +48,12 @@ class DuplicateController extends ControllerBase {
   /**
    * Duplicates a component and returns appropriate response.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
    * @param string $source_uuid
    *   The source component to be cloned.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   A build array or Ajax respone.
    */
   public function duplicate(LayoutParagraphsLayout $layout_paragraphs_layout, string $source_uuid) {
diff --git a/src/Controller/LayoutParagraphsBuilderController.php b/src/Controller/LayoutParagraphsBuilderController.php
index e120ba5..4dec9ff 100644
--- a/src/Controller/LayoutParagraphsBuilderController.php
+++ b/src/Controller/LayoutParagraphsBuilderController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\layout_paragraphs\Controller;
 
+use Drupal\layout_paragraphs\Access\LayoutParagraphsBuilderAccess;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Ajax\AjaxHelperTrait;
@@ -26,21 +28,21 @@ class LayoutParagraphsBuilderController extends ControllerBase {
   /**
    * The tempstore service.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The Layout Paragraphs Builder Access service.
    *
-   * @var \Drupal\layout_paragraphs\Access\LayoutParagraphsBuilderAccess
+   * @var LayoutParagraphsBuilderAccess
    */
   protected $layoutParagraphsBuilderAccess;
 
@@ -67,7 +69,7 @@ class LayoutParagraphsBuilderController extends ControllerBase {
   /**
    * Builds the layout paragraphs builder form.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The parent entity that contains a layout.
    * @param string $field_name
    *   The matching name of the paragraphs reference field.
@@ -95,16 +97,16 @@ class LayoutParagraphsBuilderController extends ControllerBase {
   /**
    * Access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The parent entity that contains a layout.
    * @param string $field_name
    *   The name of the reference field.
    * @param string $view_mode
    *   The view mode.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(AccountInterface $account, ContentEntityInterface $entity, $field_name, $view_mode) {
@@ -114,14 +116,14 @@ class LayoutParagraphsBuilderController extends ControllerBase {
   /**
    * Returns a layout paragraphs layout.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The reference field name.
    * @param string $view_mode
    *   The view mode.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @return LayoutParagraphsLayout
    *   The layout.
    */
   protected function getLayoutParagraphsLayout(ContentEntityInterface $entity, string $field_name, string $view_mode) {
diff --git a/src/Controller/ReorderController.php b/src/Controller/ReorderController.php
index 823f056..70dfb26 100644
--- a/src/Controller/ReorderController.php
+++ b/src/Controller/ReorderController.php
@@ -23,7 +23,7 @@ class ReorderController extends ControllerBase {
   /**
    * The tempstore service.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
@@ -49,9 +49,9 @@ class ReorderController extends ControllerBase {
    * Expects an two-dimmensional array of components in the "components" POST
    * parameter with key/value pairs for "uuid", "parent_uuid", and "region".
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object containing a "components" POST parameter.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The Layout Paragraphs Layout object.
    */
   public function build(Request $request, LayoutParagraphsLayout $layout_paragraphs_layout) {
diff --git a/src/Element/LayoutParagraphsBuilder.php b/src/Element/LayoutParagraphsBuilder.php
index 632cdd9..1e46697 100644
--- a/src/Element/LayoutParagraphsBuilder.php
+++ b/src/Element/LayoutParagraphsBuilder.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\layout_paragraphs\Element;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\layout_paragraphs\LayoutParagraphsLayout;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem;
 use Drupal\Core\Url;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Render\Renderer;
@@ -35,35 +41,35 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * The layout paragraphs tempstore service.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Layouts Manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;
 
   /**
    * The Renderer service property.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;
 
@@ -84,14 +90,14 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * The layout paragraphs layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $layoutParagraphsLayout;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -186,13 +192,13 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
     }
     // Build a flat list of component build arrays.
     foreach ($this->layoutParagraphsLayout->getComponents() as $component) {
-      /** @var \Drupal\layout_paragraphs\LayoutParagraphsComponent $component */
+      /** @var LayoutParagraphsComponent $component */
       $element['#components'][$component->getEntity()->uuid()] = $this->buildComponent($component, $preview_view_mode);
     }
 
     // Nest child components inside their respective sections and regions.
     foreach ($this->layoutParagraphsLayout->getComponents() as $component) {
-      /** @var \Drupal\layout_paragraphs\LayoutParagraphsComponent $component */
+      /** @var LayoutParagraphsComponent $component */
       $uuid = $component->getEntity()->uuid();
       if ($component->isLayout()) {
         $section = $this->layoutParagraphsLayout->getLayoutSection($component->getEntity());
@@ -233,7 +239,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
     $element['#empty_message'] = $this->layoutParagraphsLayout->getSetting('empty_message', $this->t('Start adding content.'));
     $element['#root_components'] = [];
     foreach ($this->layoutParagraphsLayout->getRootComponents() as $component) {
-      /** @var \Drupal\layout_paragraphs\LayoutParagraphsComponent $component */
+      /** @var LayoutParagraphsComponent $component */
       $uuid = $component->getEntity()->uuid();
       $element['#root_components'][$uuid] =& $element['#components'][$uuid];
     }
@@ -262,7 +268,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * Returns the build array for a single layout component.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsComponent $component
+   * @param LayoutParagraphsComponent $component
    *   The component to render.
    * @param string $preview_view_mode
    *   The view mode to use for rendering paragraphs.
@@ -499,7 +505,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * Builds a translation warning message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translation warning.
    */
   protected function translationWarning() {
@@ -516,7 +522,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * Loads a layout plugin instance for a layout paragraph section.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsSection $section
+   * @param LayoutParagraphsSection $section
    *   The section.
    */
   protected function layoutPluginInstance(LayoutParagraphsSection $section) {
@@ -529,7 +535,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * Returns an AccessResult object.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   The paragraph entity.
    *
    * @return bool
@@ -542,7 +548,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * Returns an AccessResult object.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   The paragraph entity.
    *
    * @return bool
@@ -559,7 +565,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   /**
    * Returns an AccessResult object.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   True if user can edit.
    */
   protected function createAccess() {
@@ -579,7 +585,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
   protected function isTranslating() {
     if (is_null($this->isTranslating)) {
       $this->isTranslating = FALSE;
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $host */
+      /** @var ContentEntityInterface $host */
       $host = $this->layoutParagraphsLayout->getEntity();
       $default_langcode_key = $host->getEntityType()->getKey('default_langcode');
       if (
@@ -614,7 +620,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
    */
   protected function initTranslations() {
     $items = $this->layoutParagraphsLayout->getParagraphsReferenceField();
-    /** @var \Drupal\entity_reference_revisions\Plugin\Field\FieldType\EntityReferenceRevisionsItem $item */
+    /** @var EntityReferenceRevisionsItem $item */
     foreach ($items as $delta => $item) {
       if (!empty($item->entity) && $item->entity instanceof ParagraphInterface) {
         // Now we're sure it's a paragraph:
@@ -681,7 +687,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
    *
    * @param array $build
    *   The build array to attach JS settings to.
-   * @param \Drupal\Core\Render\Markup $element
+   * @param Markup $element
    *   The UI element.
    * @param string $key
    *   The Javascript object key to use for storing the element.
@@ -703,7 +709,7 @@ class LayoutParagraphsBuilder extends RenderElement implements ContainerFactoryP
    * @param array $render_array
    *   The render array to process.
    *
-   * @return \Drupal\Core\Render\Markup
+   * @return Markup
    *   The markup object.
    */
   public function doRender(array $render_array) {
diff --git a/src/Element/LayoutSelect.php b/src/Element/LayoutSelect.php
index d0e0320..23e8c4e 100644
--- a/src/Element/LayoutSelect.php
+++ b/src/Element/LayoutSelect.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Element;
 
+use Drupal\Core\Layout\LayoutPluginManager;
 use Drupal\Core\Render\Element\Radios;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
@@ -29,7 +30,7 @@ class LayoutSelect extends Radios {
   /**
    * The layout plugin manager service.
    *
-   * @var Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;
 
diff --git a/src/Event/LayoutParagraphsAllowedTypesEvent.php b/src/Event/LayoutParagraphsAllowedTypesEvent.php
index ca5b62d..ccdcd48 100644
--- a/src/Event/LayoutParagraphsAllowedTypesEvent.php
+++ b/src/Event/LayoutParagraphsAllowedTypesEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\layout_paragraphs\LayoutParagraphsLayout;
 
 /**
@@ -28,7 +28,7 @@ class LayoutParagraphsAllowedTypesEvent extends Event {
   /**
    * The layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $layout;
 
@@ -51,7 +51,7 @@ class LayoutParagraphsAllowedTypesEvent extends Event {
    *
    * @param array $types
    *   An array of paragraph types.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout
+   * @param LayoutParagraphsLayout $layout
    *   The layout object.
    * @param string $parent_uuid
    *   The parent uuid.
@@ -111,7 +111,7 @@ class LayoutParagraphsAllowedTypesEvent extends Event {
   /**
    * Get the layout.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @return LayoutParagraphsLayout
    *   The layout object.
    */
   public function getLayout() {
diff --git a/src/Event/LayoutParagraphsUpdateLayoutEvent.php b/src/Event/LayoutParagraphsUpdateLayoutEvent.php
index 99a30cd..c95f104 100644
--- a/src/Event/LayoutParagraphsUpdateLayoutEvent.php
+++ b/src/Event/LayoutParagraphsUpdateLayoutEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\layout_paragraphs\LayoutParagraphsLayout;
 
 /**
@@ -28,14 +28,14 @@ class LayoutParagraphsUpdateLayoutEvent extends Event {
   /**
    * The origin layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $originalLayout;
 
   /**
    * The updated layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $layout;
 
@@ -49,9 +49,9 @@ class LayoutParagraphsUpdateLayoutEvent extends Event {
   /**
    * Class cosntructor.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $original_layout
+   * @param LayoutParagraphsLayout $original_layout
    *   The layout object.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout
+   * @param LayoutParagraphsLayout $layout
    *   The layout object.
    */
   public function __construct(LayoutParagraphsLayout $original_layout, LayoutParagraphsLayout $layout) {
@@ -62,7 +62,7 @@ class LayoutParagraphsUpdateLayoutEvent extends Event {
   /**
    * Get the original layout.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @return LayoutParagraphsLayout
    *   The original layout.
    */
   public function getOriginalLayout() {
@@ -72,7 +72,7 @@ class LayoutParagraphsUpdateLayoutEvent extends Event {
   /**
    * Get the updated layout.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @return LayoutParagraphsLayout
    *   The updated layout.
    */
   public function getUpdatedLayout() {
diff --git a/src/EventSubscriber/LayoutParagraphsAllowedTypesSubscriber.php b/src/EventSubscriber/LayoutParagraphsAllowedTypesSubscriber.php
index 9c9ec73..a9a5dde 100644
--- a/src/EventSubscriber/LayoutParagraphsAllowedTypesSubscriber.php
+++ b/src/EventSubscriber/LayoutParagraphsAllowedTypesSubscriber.php
@@ -22,7 +22,7 @@ class LayoutParagraphsAllowedTypesSubscriber implements EventSubscriberInterface
   /**
    * Restricts available types based on settings in layout.
    *
-   * @param \Drupal\layout_paragraphs\Event\LayoutParagraphsAllowedTypesEvent $event
+   * @param LayoutParagraphsAllowedTypesEvent $event
    *   The allowed types event.
    */
   public function typeRestrictions(LayoutParagraphsAllowedTypesEvent $event) {
diff --git a/src/EventSubscriber/LayoutParagraphsUpdateLayoutSubscriber.php b/src/EventSubscriber/LayoutParagraphsUpdateLayoutSubscriber.php
index d193ed4..3a9cc7c 100644
--- a/src/EventSubscriber/LayoutParagraphsUpdateLayoutSubscriber.php
+++ b/src/EventSubscriber/LayoutParagraphsUpdateLayoutSubscriber.php
@@ -28,7 +28,7 @@ class LayoutParagraphsUpdateLayoutSubscriber implements EventSubscriberInterface
    * the layout should be refreshed to show the correct ui/messaging for an
    * empty container.
    *
-   * @param \Drupal\layout_paragraphs\Event\LayoutParagraphsUpdateLayoutEvent $event
+   * @param LayoutParagraphsUpdateLayoutEvent $event
    *   The event.
    */
   public function layoutUpdated(LayoutParagraphsUpdateLayoutEvent $event) {
@@ -41,7 +41,7 @@ class LayoutParagraphsUpdateLayoutSubscriber implements EventSubscriberInterface
    * If the original layout was empty and the updated layout is not, or visa
    * versa, the entire layout builder ui needs to be refreshed.
    *
-   * @param \Drupal\layout_paragraphs\Event\LayoutParagraphsUpdateLayoutEvent $event
+   * @param LayoutParagraphsUpdateLayoutEvent $event
    *   The event.
    */
   public function compareEmptyState(LayoutParagraphsUpdateLayoutEvent $event) {
@@ -53,7 +53,7 @@ class LayoutParagraphsUpdateLayoutSubscriber implements EventSubscriberInterface
   /**
    * Compares count == cardinality of the original and updated layouts.
    *
-   * @param \Drupal\layout_paragraphs\Event\LayoutParagraphsUpdateLayoutEvent $event
+   * @param LayoutParagraphsUpdateLayoutEvent $event
    *   The event.
    *
    * @return bool
diff --git a/src/Form/ComponentFormBase.php b/src/Form/ComponentFormBase.php
index e6c5fbc..7387325 100644
--- a/src/Form/ComponentFormBase.php
+++ b/src/Form/ComponentFormBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\layout_paragraphs\Form;
 
+use Drupal\paragraphs\Entity\ParagraphsType;
+use Symfony\Component\Validator\ConstraintViolationInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Form\FormBase;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -37,49 +40,49 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
   /**
    * The tempstore service.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The layout plugin manager service.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;
 
   /**
    * The paragraph type.
    *
-   * @var \Drupal\paragraphs\Entity\ParagraphsType
+   * @var ParagraphsType
    */
   protected $paragraphType;
 
   /**
    * The paragraph.
    *
-   * @var \Drupal\paragraphs\Entity\Paragraph
+   * @var Paragraph
    */
   protected $paragraph;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -149,7 +152,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function buildComponentForm(
@@ -254,7 +257,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ -276,7 +279,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
     $paragraph->setValidationRequired(FALSE);
     // Flag entity level violations.
     foreach ($violations->getEntityViolations() as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $form_state->setErrorByName('', $violation->getMessage());
     }
     $form['#display']->flagWidgetsErrorsFromViolations($violations, $form, $form_state);
@@ -288,7 +291,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -305,14 +308,14 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\paragraphs\Entity\Paragraph
+   * @return Paragraph
    *   The paragraph entity.
    */
   public function buildParagraphComponent(array $form, FormStateInterface $form_state) {
-    /** @var Drupal\Core\Entity\Entity\EntityFormDisplay $display */
+    /** @var EntityFormDisplay $display */
     $display = $form['#display'];
 
     $paragraph = clone $this->paragraph;
@@ -338,7 +341,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
   /**
    * Create the form title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form title.
    */
   protected function formTitle() {
@@ -352,7 +355,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -373,7 +376,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The complete form array.
@@ -404,7 +407,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $element
    *   The form element.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The complete form array.
@@ -441,7 +444,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -458,10 +461,10 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * @param array $form
    *   The form array.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The Ajax response.
    */
   public function cancel(array &$form, FormStateInterface $form_state) {
@@ -485,7 +488,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
   /**
    * Closes the form with ajax.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The ajax response.
    */
   protected function ajaxCloseForm(AjaxResponse &$response) {
@@ -548,7 +551,7 @@ abstract class ComponentFormBase extends FormBase implements ComponentFormInterf
    *
    * See Drupal\Core\Entity\ContentEntityForm.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function initFormLangcodes(FormStateInterface $form_state) {
diff --git a/src/Form/DeleteComponentForm.php b/src/Form/DeleteComponentForm.php
index 2b7cafd..e8f9010 100644
--- a/src/Form/DeleteComponentForm.php
+++ b/src/Form/DeleteComponentForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Form;
 
+use Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\RemoveCommand;
@@ -23,7 +24,7 @@ class DeleteComponentForm extends FormBase {
   /**
    * The layout paragraphs layout tempstore.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
@@ -114,7 +115,7 @@ class DeleteComponentForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function deleteComponent(array $form, FormStateInterface $form_state) {
@@ -133,7 +134,7 @@ class DeleteComponentForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function closeForm(array $form, FormStateInterface $form_state) {
diff --git a/src/Form/EditComponentForm.php b/src/Form/EditComponentForm.php
index 7bd9991..bd6cf8a 100644
--- a/src/Form/EditComponentForm.php
+++ b/src/Form/EditComponentForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Form;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Form\FormStateInterface;
@@ -49,7 +50,7 @@ class EditComponentForm extends ComponentFormBase {
   /**
    * Create the form title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form title.
    */
   protected function formTitle() {
@@ -83,7 +84,7 @@ class EditComponentForm extends ComponentFormBase {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $form
    *   The complete form.
@@ -136,7 +137,7 @@ class EditComponentForm extends ComponentFormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function moveItemsSubmit(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/InsertComponentForm.php b/src/Form/InsertComponentForm.php
index 17b02bb..4de939d 100644
--- a/src/Form/InsertComponentForm.php
+++ b/src/Form/InsertComponentForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\layout_paragraphs\Form;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Core\Ajax\AfterCommand;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
@@ -71,11 +73,11 @@ class InsertComponentForm extends ComponentFormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
-   * @param \Drupal\paragraphs\Entity\ParagraphsType $paragraph_type
+   * @param ParagraphsType $paragraph_type
    *   The paragraph type.
    * @param string $parent_uuid
    *   The parent component's uuid.
@@ -121,7 +123,7 @@ class InsertComponentForm extends ComponentFormBase {
   /**
    * Create the form title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form title.
    */
   protected function formTitle() {
@@ -211,16 +213,16 @@ class InsertComponentForm extends ComponentFormBase {
   /**
    * Creates a new, empty paragraph empty of the provided type.
    *
-   * @param \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type
+   * @param ParagraphsTypeInterface $paragraph_type
    *   The paragraph type.
    *
-   * @return \Drupal\paragraphs\ParagraphInterface
+   * @return ParagraphInterface
    *   The new paragraph.
    */
   protected function newParagraph(ParagraphsTypeInterface $paragraph_type) {
     $entity_type = $this->entityTypeManager->getDefinition('paragraph');
     $bundle_key = $entity_type->getKey('bundle');
-    /** @var \Drupal\paragraphs\ParagraphInterface $paragraph_entity */
+    /** @var ParagraphInterface $paragraph_entity */
     $paragraph = $this->entityTypeManager->getStorage('paragraph')
       ->create([$bundle_key => $paragraph_type->id()]);
     return $paragraph;
diff --git a/src/Form/LayoutParagraphsBuilderForm.php b/src/Form/LayoutParagraphsBuilderForm.php
index 53241a4..f8a4b21 100644
--- a/src/Form/LayoutParagraphsBuilderForm.php
+++ b/src/Form/LayoutParagraphsBuilderForm.php
@@ -25,21 +25,21 @@ class LayoutParagraphsBuilderForm extends FormBase {
   /**
    * A layout paragraphs layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $layoutParagraphsLayout;
 
   /**
    * The layout paragraphs layout tempstore service.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -73,9 +73,9 @@ class LayoutParagraphsBuilderForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
    */
   public function buildForm(
@@ -144,10 +144,10 @@ class LayoutParagraphsBuilderForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An ajax command.
    */
   public function close(array $form, FormStateInterface $form_state) {
@@ -166,10 +166,10 @@ class LayoutParagraphsBuilderForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An ajax command.
    */
   public function save(array $form, FormStateInterface $form_state) {
@@ -192,7 +192,7 @@ class LayoutParagraphsBuilderForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/LayoutParagraphsModalSettingsForm.php b/src/Form/LayoutParagraphsModalSettingsForm.php
index 7545dd3..4429384 100644
--- a/src/Form/LayoutParagraphsModalSettingsForm.php
+++ b/src/Form/LayoutParagraphsModalSettingsForm.php
@@ -16,16 +16,16 @@ class LayoutParagraphsModalSettingsForm extends ConfigFormBase {
   /**
    * The typed config service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed config service.
    */
   public function __construct(
diff --git a/src/Form/LayoutParagraphsSectionsSettingsForm.php b/src/Form/LayoutParagraphsSectionsSettingsForm.php
index 687a357..e247ff3 100644
--- a/src/Form/LayoutParagraphsSectionsSettingsForm.php
+++ b/src/Form/LayoutParagraphsSectionsSettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Form;
 
+use Drupal\paragraphs\Entity\ParagraphsType;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -19,43 +20,43 @@ class LayoutParagraphsSectionsSettingsForm extends ConfigFormBase {
   /**
    * The typed config service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The Entity Type Manager service property.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Layouts Manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;
 
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager
+   * @param TypedConfigManagerInterface $typedConfigManager
    *   The typed config service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Core entity type manager service.
-   * @param \Drupal\Core\Layout\LayoutPluginManager $layout_plugin_manager
+   * @param LayoutPluginManager $layout_plugin_manager
    *   Core layout plugin manager service.
    */
   public function __construct(
@@ -113,7 +114,7 @@ class LayoutParagraphsSectionsSettingsForm extends ConfigFormBase {
     $layout_options = $this->layoutPluginManager->getLayoutOptions();
     $paragraphs_type_storage = $this->entityTypeManager->getStorage('paragraphs_type');
     foreach ($paragraph_bundles as $name => $paragraph_bundle) {
-      /** @var \Drupal\paragraphs\Entity\ParagraphsType $paragraphs_type */
+      /** @var ParagraphsType $paragraphs_type */
       $paragraphs_type = $paragraphs_type_storage->load($name);
       $layout_paragraphs_behavior = $paragraphs_type->getBehaviorPlugin('layout_paragraphs');
       $layout_paragraphs_behavior_config = $layout_paragraphs_behavior->getConfiguration();
@@ -153,7 +154,7 @@ class LayoutParagraphsSectionsSettingsForm extends ConfigFormBase {
     $paragraphs_type_storage = $this->entityTypeManager->getStorage('paragraphs_type');
     $layouts = $this->layoutPluginManager->getSortedDefinitions();
     foreach (array_keys($paragraph_bundles) as $name) {
-      /** @var \Drupal\paragraphs\Entity\ParagraphsType $paragraphs_type */
+      /** @var ParagraphsType $paragraphs_type */
       $paragraphs_type = $paragraphs_type_storage->load($name);
       $layout_paragraphs_behavior = $paragraphs_type->getBehaviorPlugin('layout_paragraphs');
       if ($form_state->getValue($name)) {
diff --git a/src/Form/LayoutParagraphsSettingsForm.php b/src/Form/LayoutParagraphsSettingsForm.php
index 3d87d4c..d6edb36 100644
--- a/src/Form/LayoutParagraphsSettingsForm.php
+++ b/src/Form/LayoutParagraphsSettingsForm.php
@@ -16,16 +16,16 @@ class LayoutParagraphsSettingsForm extends ConfigFormBase {
   /**
    * The typed config service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager
+   * @param TypedConfigManagerInterface $typedConfigManager
    *   The typed config service.
    */
   public function __construct(
diff --git a/src/LayoutParagraphsComponent.php b/src/LayoutParagraphsComponent.php
index f454dcd..861e422 100644
--- a/src/LayoutParagraphsComponent.php
+++ b/src/LayoutParagraphsComponent.php
@@ -19,14 +19,14 @@ class LayoutParagraphsComponent {
   /**
    * The paragraph entity.
    *
-   * @var Drupal\paragraphs\Entity\Paragraph
+   * @var Paragraph
    */
   protected $paragraph;
 
   /**
    * Class constructor.
    *
-   * @param Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph entity.
    */
   public function __construct(Paragraph $paragraph) {
@@ -46,7 +46,7 @@ class LayoutParagraphsComponent {
   /**
    * Static wrapper for isLayout().
    *
-   * @param Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph to check if is layout.
    *
    * @return bool
@@ -90,7 +90,7 @@ class LayoutParagraphsComponent {
   /**
    * Static wrapper for isRoot().
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph entity.
    *
    * @return bool
@@ -114,7 +114,7 @@ class LayoutParagraphsComponent {
   /**
    * Returns the parent component if one exists.
    *
-   * @return Drupal\paragraphs\Entity\Paragraph|false
+   * @return Paragraph|false
    *   The parent paragraph or false if doesn't exist.
    */
   public function getParentUuid() {
@@ -124,7 +124,7 @@ class LayoutParagraphsComponent {
   /**
    * Returns the wrapped paragraph entity.
    *
-   * @return \Drupal\paragraphs\Entity\Paragraph
+   * @return Paragraph
    *   The paragraph entity.
    */
   public function getEntity() {
diff --git a/src/LayoutParagraphsLayout.php b/src/LayoutParagraphsLayout.php
index 4638124..3f2c8fd 100644
--- a/src/LayoutParagraphsLayout.php
+++ b/src/LayoutParagraphsLayout.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs;
 
+use Drupal\field\Entity\FieldConfig;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\paragraphs\Entity\Paragraph;
@@ -30,7 +31,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * The paragraph reference field the layout is attached to.
    *
-   * @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface
+   * @var EntityReferenceFieldItemListInterface
    */
   protected $paragraphsReferenceField;
 
@@ -56,7 +57,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $paragraphs_reference_field
+   * @param EntityReferenceFieldItemListInterface $paragraphs_reference_field
    *   The paragraph reference field this layout is attached to.
    * @param array[] $settings
    *   An array of settings.
@@ -85,7 +86,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Returns the layout's parent entity with updated paragraphs reference field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -96,7 +97,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Set the entity that this layout is attached to.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to set.
    *
    * @return $this
@@ -141,7 +142,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Returns the reference field that this layout is attached to.
    *
-   * @return \Drupal\Core\Field\EntityReferenceFieldItemListInterface
+   * @return EntityReferenceFieldItemListInterface
    *   The field item list.
    */
   public function &getParagraphsReferenceField() {
@@ -151,7 +152,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Set the field item list.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $paragraphs_reference_field
+   * @param EntityReferenceFieldItemListInterface $paragraphs_reference_field
    *   The field item list to set.
    *
    * @return $this
@@ -168,7 +169,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    *   The field name.
    */
   public function getFieldName() {
-    /** @var \Drupal\field\Entity\FieldConfig $definition **/
+    /** @var FieldConfig $definition **/
     $definition = $this->paragraphsReferenceField->getFieldDefinition();
     $field_name = $definition->getName();
     return $field_name;
@@ -177,7 +178,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Wraps the paragraph in the component class.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph entity.
    *
    * @return LayoutParagraphsComponent|LayoutParagraphsSection
@@ -209,10 +210,10 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    *
    * If the provided paragraph is not a layout section, returns false.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsSection|false
+   * @return LayoutParagraphsSection|false
    *   The layout section or false.
    */
   public function getLayoutSection(Paragraph $paragraph) {
@@ -256,7 +257,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Returns a list of all paragraph entities associated with this collection.
    *
-   * @return \Drupal\paragraphs\Entity\Paragraph[]
+   * @return Paragraph[]
    *   An array of paragraph entities.
    */
   public function getEntities() {
@@ -287,7 +288,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    * incoming paragraph. Otherwise the paragraph is appended
    * to the field item list.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph to set.
    *
    * @return $this
@@ -340,7 +341,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    *   the source. If set, the clone will be inserted in the target section,
    *   appended in the same region as the source.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsComponent
+   * @return LayoutParagraphsComponent
    *   The duplicated component.
    */
   public function duplicateComponent(string $source_uuid, string $target_section_uuid = NULL) {
@@ -357,7 +358,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
       $this->insertAfterComponent($source_uuid, $cloned_paragraph);
     }
     if ($source_component->isLayout()) {
-      /** @var \Drupal\layout_paragraphs\LayoutParagraphsSection $section */
+      /** @var LayoutParagraphsSection $section */
       $section = $this->getLayoutSection($source_component->getEntity());
       foreach ($section->getComponents() as $component) {
         $this->duplicateComponent($component->getEntity()->uuid(), $cloned_paragraph->uuid());
@@ -373,7 +374,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    *   The parent component's uuid.
    * @param string $region
    *   The region.
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph component to add.
    *
    * @return $this
@@ -407,7 +408,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    *
    * @param string $sibling_uuid
    *   The existing sibling paragraph component's uuid.
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph component to add.
    *
    * @return $this
@@ -421,7 +422,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    *
    * @param string $sibling_uuid
    *   The existing sibling paragraph component's uuid.
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph component to add.
    *
    * @return $this
@@ -435,7 +436,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
    *
    * @param string $sibling_uuid
    *   The existing sibling paragraph component's uuid.
-   * @param \Drupal\paragraphs\Entity\Paragraph $new_paragraph
+   * @param Paragraph $new_paragraph
    *   The paragraph component to add.
    * @param int $delta_offset
    *   Where to add the new item in relation to sibling.
@@ -478,7 +479,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
   /**
    * Append a new component.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $new_paragraph
+   * @param Paragraph $new_paragraph
    *   The paragraph component to append.
    *
    * @return $this
@@ -502,7 +503,7 @@ class LayoutParagraphsLayout implements ThirdPartySettingsInterface {
     if ($recursive) {
       $component = $this->getComponentByUuid($uuid);
       if ($component->isLayout()) {
-        /** @var \Drupal\layout_paragraphs\LayoutParagraphsSection $section */
+        /** @var LayoutParagraphsSection $section */
         $section = $this->getLayoutSection($component->getEntity());
         foreach ($section->getComponents() as $component) {
           $this->deleteComponent($component->getEntity()->uuid(), TRUE);
diff --git a/src/LayoutParagraphsLayoutRefreshTrait.php b/src/LayoutParagraphsLayoutRefreshTrait.php
index 68b0f53..b9d1934 100644
--- a/src/LayoutParagraphsLayoutRefreshTrait.php
+++ b/src/LayoutParagraphsLayoutRefreshTrait.php
@@ -22,7 +22,7 @@ trait LayoutParagraphsLayoutRefreshTrait {
   /**
    * The layout paragraphs layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $layoutParagraphsLayout;
 
@@ -30,14 +30,14 @@ trait LayoutParagraphsLayoutRefreshTrait {
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The original paragraphs layout object.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $originalLayoutParagraphsLayout;
 
@@ -47,7 +47,7 @@ trait LayoutParagraphsLayoutRefreshTrait {
    * Also creates an original copy to track changes between original
    * and updated layouts.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout paragraphs layout object.
    *
    * @return $this
@@ -63,10 +63,10 @@ trait LayoutParagraphsLayoutRefreshTrait {
   /**
    * Decorates an ajax response with a command to refresh an entire layout.
    *
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The ajax response to decorate.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   protected function refreshLayout(AjaxResponse $response) {
@@ -104,7 +104,7 @@ trait LayoutParagraphsLayoutRefreshTrait {
   /**
    * Returns the event dispatcher service.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    *   The event dispatcher service.
    */
   protected function eventDispatcher() {
diff --git a/src/LayoutParagraphsLayoutTempstoreRepository.php b/src/LayoutParagraphsLayoutTempstoreRepository.php
index bf8efca..c72d703 100644
--- a/src/LayoutParagraphsLayoutTempstoreRepository.php
+++ b/src/LayoutParagraphsLayoutTempstoreRepository.php
@@ -12,14 +12,14 @@ class LayoutParagraphsLayoutTempstoreRepository {
   /**
    * The shared tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * LayoutTempstoreRepository constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The shared tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
@@ -29,10 +29,10 @@ class LayoutParagraphsLayoutTempstoreRepository {
   /**
    * Get a layout paragraphs layout from the tempstore.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   A layout paragraphs layout instance.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @return LayoutParagraphsLayout
    *   The layout paragraphs layout instance from the tempstore.
    */
   public function get(LayoutParagraphsLayout $layout_paragraphs_layout) {
@@ -51,7 +51,7 @@ class LayoutParagraphsLayoutTempstoreRepository {
    * @param string $key
    *   The storage key.
    *
-   * @return \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @return LayoutParagraphsLayout
    *   The layout.
    */
   public function getWithStorageKey(string $key) {
@@ -78,7 +78,7 @@ class LayoutParagraphsLayoutTempstoreRepository {
   /**
    * Returns a unique key for storing the layout.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout_paragraphs_layout
+   * @param LayoutParagraphsLayout $layout_paragraphs_layout
    *   The layout object.
    *
    * @return string
diff --git a/src/LayoutParagraphsRendererService.php b/src/LayoutParagraphsRendererService.php
index beaa37b..2a9c88b 100644
--- a/src/LayoutParagraphsRendererService.php
+++ b/src/LayoutParagraphsRendererService.php
@@ -14,14 +14,14 @@ class LayoutParagraphsRendererService {
   /**
    * The layout plugin manager service.
    *
-   * @var Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutPluginManager;
 
   /**
    * The entity type manager service.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -35,9 +35,9 @@ class LayoutParagraphsRendererService {
   /**
    * Class constructor.
    *
-   * @param Drupal\Core\Layout\LayoutPluginManagerInterface $layout_plugin_manager
+   * @param LayoutPluginManagerInterface $layout_plugin_manager
    *   The layout plugin manager service.
-   * @param Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(LayoutPluginManagerInterface $layout_plugin_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -50,7 +50,7 @@ class LayoutParagraphsRendererService {
    *
    * @param array $build
    *   The build array.
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph entity.
    * @param string $view_mode
    *   The view mode.
@@ -111,7 +111,7 @@ class LayoutParagraphsRendererService {
   /**
    * Returns the parent entity for a given paragraph.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph.
    *
    * @return \Drupal\Core\Entity\Entity
diff --git a/src/LayoutParagraphsSection.php b/src/LayoutParagraphsSection.php
index e15ea95..fd50233 100644
--- a/src/LayoutParagraphsSection.php
+++ b/src/LayoutParagraphsSection.php
@@ -19,16 +19,16 @@ class LayoutParagraphsSection extends LayoutParagraphsComponent {
   /**
    * An array of components.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsComponent|LayoutParagraphsSection[]
+   * @var LayoutParagraphsComponent|LayoutParagraphsSection[]
    */
   protected $components;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph this layout section is attached to.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsComponent[] $components
+   * @param LayoutParagraphsComponent[] $components
    *   An array of child components.
    */
   public function __construct(
@@ -42,7 +42,7 @@ class LayoutParagraphsSection extends LayoutParagraphsComponent {
   /**
    * Wraps the paragraph is the correct component class.
    *
-   * @param Drupal\paragraphs\Entity\Paragraph $paragraph
+   * @param Paragraph $paragraph
    *   The paragraph entity.
    *
    * @return LayoutParagraphsComponent|LayoutParagraphsSection
@@ -79,7 +79,7 @@ class LayoutParagraphsSection extends LayoutParagraphsComponent {
    * @param string $region
    *   The region name.
    *
-   * @return Drupal\layout_paragraphs\LayoutParagraphsComponent[]
+   * @return LayoutParagraphsComponent[]
    *   An array of components.
    */
   public function getComponentsForRegion(string $region) {
diff --git a/src/Plugin/Field/FieldFormatter/LayoutParagraphsBuilderFormatter.php b/src/Plugin/Field/FieldFormatter/LayoutParagraphsBuilderFormatter.php
index a8916e4..e132dbc 100644
--- a/src/Plugin/Field/FieldFormatter/LayoutParagraphsBuilderFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/LayoutParagraphsBuilderFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\layout_paragraphs\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Field\WidgetInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -33,21 +35,21 @@ class LayoutParagraphsBuilderFormatter extends LayoutParagraphsFormatter impleme
   /**
    * The tempstore.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
   /**
    * The Layout Paragraphs Builder Access service.
    *
-   * @var \Drupal\layout_paragraphs\Access\LayoutParagraphsBuilderAccess
+   * @var LayoutParagraphsBuilderAccess
    */
   protected $layoutParagraphsBuilderAccess;
 
   /**
    * Account for the logged in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -160,7 +162,7 @@ class LayoutParagraphsBuilderFormatter extends LayoutParagraphsFormatter impleme
   /**
    * Returns a layout paragraphs field widget with correct settings applied.
    *
-   * @return \Drupal\Core\Field\WidgetInterface
+   * @return WidgetInterface
    *   The widget instance.
    */
   protected function widgetInstance() {
diff --git a/src/Plugin/Field/FieldFormatter/LayoutParagraphsFormatter.php b/src/Plugin/Field/FieldFormatter/LayoutParagraphsFormatter.php
index d9ae2bc..dcb4012 100644
--- a/src/Plugin/Field/FieldFormatter/LayoutParagraphsFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/LayoutParagraphsFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_reference_revisions\Plugin\Field\FieldFormatter\EntityReferenceRevisionsEntityFormatter;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
@@ -28,12 +29,12 @@ class LayoutParagraphsFormatter extends EntityReferenceRevisionsEntityFormatter
    *
    * See \Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase::getEntitiesToView().
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items
+   * @param EntityReferenceFieldItemListInterface $items
    *   The item list.
    * @param string $langcode
    *   The language code of the referenced entities to display.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The array of referenced entities to display, keyed by delta.
    *
    * @see ::prepareView()
diff --git a/src/Plugin/Field/FieldWidget/LayoutParagraphsWidget.php b/src/Plugin/Field/FieldWidget/LayoutParagraphsWidget.php
index 2d83ef2..9dc4b0f 100644
--- a/src/Plugin/Field/FieldWidget/LayoutParagraphsWidget.php
+++ b/src/Plugin/Field/FieldWidget/LayoutParagraphsWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -35,28 +36,28 @@ class LayoutParagraphsWidget extends WidgetBase implements ContainerFactoryPlugi
   /**
    * The tempstore.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $tempstore;
 
   /**
    * The Entity Type Manager service property.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Layouts Manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;
 
   /**
    * The layout paragraphs layout.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayout
+   * @var LayoutParagraphsLayout
    */
   protected $layoutParagraphsLayout;
 
@@ -70,21 +71,21 @@ class LayoutParagraphsWidget extends WidgetBase implements ContainerFactoryPlugi
   /**
    * The form builder service.
    *
-   * @var Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
diff --git a/src/Plugin/paragraphs/Behavior/LayoutParagraphsBehavior.php b/src/Plugin/paragraphs/Behavior/LayoutParagraphsBehavior.php
index 16c5baf..e9f1389 100644
--- a/src/Plugin/paragraphs/Behavior/LayoutParagraphsBehavior.php
+++ b/src/Plugin/paragraphs/Behavior/LayoutParagraphsBehavior.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Plugin\paragraphs\Behavior;
 
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\SubformState;
 use Drupal\Core\Layout\LayoutInterface;
@@ -35,14 +36,14 @@ class LayoutParagraphsBehavior extends ParagraphsBehaviorBase {
   /**
    * The layout plugin manager service.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutPluginManager;
 
   /**
    * The entity type manager service.
    *
-   * @var Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    *   The entity type manager service.
    */
   protected $entityTypeManager;
@@ -50,7 +51,7 @@ class LayoutParagraphsBehavior extends ParagraphsBehaviorBase {
   /**
    * The layout paragraphs service.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsRendererService
+   * @var LayoutParagraphsRendererService
    */
   protected $layoutParagraphsRendererService;
 
@@ -70,13 +71,13 @@ class LayoutParagraphsBehavior extends ParagraphsBehaviorBase {
    *   This plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface $layout_plugin_manager
+   * @param LayoutPluginManagerInterface $layout_plugin_manager
    *   The grid discovery service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The grid discovery service.
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsRendererService $layout_paragraphs_renderer_service
+   * @param LayoutParagraphsRendererService $layout_paragraphs_renderer_service
    *   The layout paragraphs service.
    */
   public function __construct(
@@ -191,7 +192,7 @@ class LayoutParagraphsBehavior extends ParagraphsBehaviorBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -275,10 +276,10 @@ class LayoutParagraphsBehavior extends ParagraphsBehaviorBase {
   /**
    * Retrieves the plugin form for a given layout.
    *
-   * @param \Drupal\Core\Layout\LayoutInterface $layout
+   * @param LayoutInterface $layout
    *   The layout plugin.
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface|null
+   * @return PluginFormInterface|null
    *   The plugin form for the layout.
    */
   protected function getLayoutPluginForm(LayoutInterface $layout) {
diff --git a/src/Routing/LayoutParagraphsTempstoreParamConverter.php b/src/Routing/LayoutParagraphsTempstoreParamConverter.php
index f9bb3bb..3f1e325 100644
--- a/src/Routing/LayoutParagraphsTempstoreParamConverter.php
+++ b/src/Routing/LayoutParagraphsTempstoreParamConverter.php
@@ -18,23 +18,23 @@ class LayoutParagraphsTempstoreParamConverter implements ParamConverterInterface
   /**
    * The layout paragraphs layout tempstore.
    *
-   * @var \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository
+   * @var LayoutParagraphsLayoutTempstoreRepository
    */
   protected $layoutParagraphsLayoutTempstore;
 
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new LayoutParagraphsEditorTempstoreParamConverter.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayoutTempstoreRepository $layout_paragraphs_layout_tempstore
+   * @param LayoutParagraphsLayoutTempstoreRepository $layout_paragraphs_layout_tempstore
    *   The layout tempstore repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(LayoutParagraphsLayoutTempstoreRepository $layout_paragraphs_layout_tempstore, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Utility/Dialog.php b/src/Utility/Dialog.php
index a65a70a..5322f83 100644
--- a/src/Utility/Dialog.php
+++ b/src/Utility/Dialog.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_paragraphs\Utility;
 
+use Drupal\Core\Ajax\CommandInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\CloseDialogCommand;
 use Drupal\layout_paragraphs\LayoutParagraphsLayout;
@@ -14,7 +15,7 @@ class Dialog {
   /**
    * Generates a dialog id for a given layout.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout
+   * @param LayoutParagraphsLayout $layout
    *   The layout paragraphs object.
    *
    * @return string
@@ -27,7 +28,7 @@ class Dialog {
   /**
    * Generates a dialog selector for a given layout.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout
+   * @param LayoutParagraphsLayout $layout
    *   The layout paragraphs layout object.
    *
    * @return string
@@ -40,10 +41,10 @@ class Dialog {
   /**
    * Returns a CloseDialogComand with the correct selector.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout $layout
+   * @param LayoutParagraphsLayout $layout
    *   The layout paragraphs layout object.
    *
-   * @return \Drupal\Core\Ajax\CommandInterface
+   * @return CommandInterface
    *   The close command.
    */
   public static function closeDialogCommand(LayoutParagraphsLayout $layout) {
@@ -53,7 +54,7 @@ class Dialog {
   /**
    * Returns an array of dialog settings for modal edit forms.
    *
-   * @param \Drupal\layout_paragraphs\LayoutParagraphsLayout|null $layout
+   * @param LayoutParagraphsLayout|null $layout
    *   If provided, will add a target for the correct dialog id value.
    *
    * @return array
diff --git a/tests/modules/layout_paragraphs_altered_template_test/layout_paragraphs_altered_template_test.module b/tests/modules/layout_paragraphs_altered_template_test/layout_paragraphs_altered_template_test.module
index 96d083c..e04f133 100644
--- a/tests/modules/layout_paragraphs_altered_template_test/layout_paragraphs_altered_template_test.module
+++ b/tests/modules/layout_paragraphs_altered_template_test/layout_paragraphs_altered_template_test.module
@@ -11,5 +11,5 @@
  * Replaces the paragraphs template directory with test templates.
  */
 function layout_paragraphs_altered_template_test_theme_registry_alter(&$theme_registry) {
-  $theme_registry['paragraph']['path'] = drupal_get_path('module', 'layout_paragraphs_altered_template_test') . '/templates';
+  $theme_registry['paragraph']['path'] = \Drupal::service('extension.list.module')->getPath('layout_paragraphs_altered_template_test') . '/templates';
 }
diff --git a/tests/modules/layout_paragraphs_complex_permissions_test/src/PermissionsProvider.php b/tests/modules/layout_paragraphs_complex_permissions_test/src/PermissionsProvider.php
index 8887e2d..880cb51 100644
--- a/tests/modules/layout_paragraphs_complex_permissions_test/src/PermissionsProvider.php
+++ b/tests/modules/layout_paragraphs_complex_permissions_test/src/PermissionsProvider.php
@@ -32,7 +32,7 @@ class PermissionsProvider {
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\node\Entity\NodeType $type
+   * @param NodeType $type
    *   The node type.
    *
    * @return array
diff --git a/tests/src/Functional/LayoutParagraphsTest.php b/tests/src/Functional/LayoutParagraphsTest.php
index 88d06f9..db3c194 100644
--- a/tests/src/Functional/LayoutParagraphsTest.php
+++ b/tests/src/Functional/LayoutParagraphsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\layout_paragraphs\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\paragraphs\FunctionalJavascript\ParagraphsTestBaseTrait;
 
@@ -89,7 +90,7 @@ class LayoutParagraphsTest extends BrowserTestBase {
    * @param array $permissions
    *   An array of permissions.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The user.
    */
   protected function loginWithPermissions(array $permissions) {
diff --git a/tests/src/FunctionalJavascript/BuilderTestBase.php b/tests/src/FunctionalJavascript/BuilderTestBase.php
index 2a9034e..85e0f88 100644
--- a/tests/src/FunctionalJavascript/BuilderTestBase.php
+++ b/tests/src/FunctionalJavascript/BuilderTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\layout_paragraphs\FunctionalJavascript;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\FunctionalJavascriptTests\JSWebAssert;
 use Behat\Mink\Exception\ExpectationException;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\paragraphs\FunctionalJavascript\ParagraphsTestBaseTrait;
@@ -178,7 +180,7 @@ abstract class BuilderTestBase extends WebDriverTestBase {
    * @param array $permissions
    *   An array of permissions.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The user.
    */
   protected function loginWithPermissions(array $permissions) {
@@ -192,7 +194,7 @@ abstract class BuilderTestBase extends WebDriverTestBase {
    *
    * Added method with fixed return comment for IDE type hinting.
    *
-   * @return \Drupal\FunctionalJavascriptTests\JSWebAssert
+   * @return JSWebAssert
    *   A new JS web assert object.
    */
   public function assertSession($name = '') {
