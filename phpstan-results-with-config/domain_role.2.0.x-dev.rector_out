modules/contrib/domain_role/domain_role.module
modules/contrib/domain_role/src/Authentication/Provider/DomainCookie.php
modules/contrib/domain_role/src/Entity/DomainUser.php
modules/contrib/domain_role/src/Form/DomainRoleConfigForm.php
modules/contrib/domain_role/src/Plugin/views/field/DomainRoles.php
modules/contrib/domain_role/src/Plugin/views/filter/DomainRoles.php
modules/contrib/domain_role/tests/src/Functional/LoadTest.php

4 files with changes
====================

1) modules/contrib/domain_role/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_role\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/domain_role/src/Form/DomainRoleConfigForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/domain_role/src/Entity/DomainUser.php:8

    ---------- begin diff ----------
@@ @@
 namespace Drupal\domain_role\Entity;


+use Drupal\Core\Field\EntityReferenceFieldItemList;
+use Drupal\domain\DomainNegotiatorInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\user\Entity\User;
 use Drupal\user\RoleInterface;
@@ @@
   /**
    * Override preSave to store domain-id along with role-id.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *
    * @throws \Exception
    */
   public function preSave(EntityStorageInterface $storage) {
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $prev_roles */
+    /** @var EntityReferenceFieldItemList $prev_roles */
     $prev_roles = $this->allRoles;
     $roles = $this->get('roles');
     $domain_roles = $this->getDomainRoles();
@@ @@
    * @return string
    */
   private function getDomain() {
-    /** @var \Drupal\domain\DomainNegotiatorInterface $negotiator */
+    /** @var DomainNegotiatorInterface $negotiator */
     $negotiator = \Drupal::service('domain.negotiator');
     return $negotiator->getActiveId();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/domain_role/domain_role.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\domain\DomainNegotiatorInterface;
 /**
  * @file
  * Contains domain_role.module.
@@ @@
   $domain = $domain_negotiator->getActiveId();
   /**
    * @var string $key
-   * @var \Drupal\user\RoleInterface $role
+   * @var RoleInterface $role
    */
   foreach ($entities as $key => $role) {
     if (strpos($key, $domain) === 0) {
@@ @@
  *   (optional) Whether to return role names with the domain name specified, or
  *   the actual role name as the key.
  *
- * @return \Drupal\user\RoleInterface[]
+ * @return RoleInterface[]
  *   An associative array with the role id as the key and the role object as
  *   value.
  */
@@ @@
 function _domain_role_role_id($rolename) {
   static $domain_id;
   if (empty($domain_id)) {
-    /** @var \Drupal\domain\DomainNegotiatorInterface $domain_negotiator */
+    /** @var DomainNegotiatorInterface $domain_negotiator */
     $domain_negotiator = \Drupal::service('domain.negotiator');
     $domain_id = $domain_negotiator->getActiveId();
   }
   return $domain_id . '-' . $rolename;
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

