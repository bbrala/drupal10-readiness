diff --git a/imgproxy.info.yml b/imgproxy.info.yml
index fcf56b0..c2f17bf 100644
--- a/imgproxy.info.yml
+++ b/imgproxy.info.yml
@@ -1,8 +1,7 @@
 name: Imgproxy support
 description: DarthSim/imgproxy implementation.
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 configure: imgproxy.admin.settings
 dependencies:
   - drupal:image
diff --git a/imgproxy.module b/imgproxy.module
index 1a7f6c3..1e74da4 100644
--- a/imgproxy.module
+++ b/imgproxy.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\imgproxy\ImgProxy;
 /**
  * @file
  * Module hooks and functions.
@@ -32,7 +33,7 @@ function template_preprocess_imgproxy(&$variables) {
     '#attributes' => $variables['attributes'],
     '#style_name' => $variables['style_name'],
   ];
-  /** @var \Drupal\imgproxy\ImgProxy $imgproxy */
+  /** @var ImgProxy $imgproxy */
   $imgproxy = \Drupal::service('imgproxy');
   $url = $imgproxy->getUrl($variables['uri'], $variables['options']);
   $variables['image']['#uri'] = $url;
@@ -44,8 +45,6 @@ function template_preprocess_imgproxy(&$variables) {
     $variables['image']['#title'] = $variables['title'];
   }
   if (!empty($variables['uri'])) {
-    $variables['attributes']['src'] = file_url_transform_relative(
-      file_create_url($variables['uri'])
-    );
+    $variables['attributes']['src'] = \Drupal::service('file_url_generator')->generateString($variables['uri']);
   }
 }
diff --git a/src/ImgProxy.php b/src/ImgProxy.php
index 8b582ea..37f7d81 100644
--- a/src/ImgProxy.php
+++ b/src/ImgProxy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\imgproxy;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Url;
 use Drupal\imgproxy\Imgproxy\Gravity;
@@ -18,14 +19,14 @@ class ImgProxy {
   /**
    * Drupal config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * ImgProxy constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory injection.
    */
   public function __construct(ConfigFactoryInterface $config) {
@@ -35,7 +36,7 @@ class ImgProxy {
   /**
    * Creates imgproxy url for given data.
    *
-   * @param string|\Drupal\Core\Url $url
+   * @param string|Url $url
    *   Source image url. Must be accessible from imgproxy server.
    * @param array $settings
    *   Processing settings. The following keys are accepted:
@@ -81,7 +82,7 @@ class ImgProxy {
     }
     $url = $this->config->get('local')
       ? str_replace(['public:', 'private:'], 'local:/', $url)
-      : file_create_url($url);
+      : \Drupal::service('file_url_generator')->generateAbsoluteString($url);
     $instance = (new ImgProxyUrl())
       ->setImageUrl($url)
       ->setEndpoint($this->config->get('endpoint'))
diff --git a/src/Imgproxy/ImgProxyUrl.php b/src/Imgproxy/ImgProxyUrl.php
index d79f551..231b1fd 100644
--- a/src/Imgproxy/ImgProxyUrl.php
+++ b/src/Imgproxy/ImgProxyUrl.php
@@ -65,14 +65,14 @@ class ImgProxyUrl {
   /**
    * Resize type.
    *
-   * @var \Drupal\imgproxy\Imgproxy\ResizeType|null
+   * @var ResizeType|null
    */
   private $resize;
 
   /**
    * Gravity direction on resizing.
    *
-   * @var \Drupal\imgproxy\Imgproxy\Gravity|null
+   * @var Gravity|null
    */
   private $gravity;
 
@@ -128,7 +128,7 @@ class ImgProxyUrl {
   /**
    * Watermark information.
    *
-   * @var \Drupal\imgproxy\Imgproxy\Watermark|null
+   * @var Watermark|null
    */
   private $watermark;
 
@@ -263,7 +263,7 @@ class ImgProxyUrl {
   /**
    * Setter for the resize field.
    *
-   * @param \Drupal\imgproxy\Imgproxy\ResizeType|null $type
+   * @param ResizeType|null $type
    *   New resize type.
    *
    * @return self
@@ -277,7 +277,7 @@ class ImgProxyUrl {
   /**
    * Setter for the gravity field.
    *
-   * @param \Drupal\imgproxy\Imgproxy\Gravity|null $gravity
+   * @param Gravity|null $gravity
    *   New value.
    *
    * @return self
@@ -502,7 +502,7 @@ class ImgProxyUrl {
   /**
    * Setter for the watermark field.
    *
-   * @param \Drupal\imgproxy\Imgproxy\Watermark|null $watermark
+   * @param Watermark|null $watermark
    *   New value.
    *
    * @return self
diff --git a/src/Imgproxy/Watermark.php b/src/Imgproxy/Watermark.php
index ec29017..cb4ec76 100644
--- a/src/Imgproxy/Watermark.php
+++ b/src/Imgproxy/Watermark.php
@@ -35,7 +35,7 @@ class Watermark {
   /**
    * Watermark position.
    *
-   * @var \Drupal\imgproxy\Imgproxy\WatermarkPosition
+   * @var WatermarkPosition
    */
   private $position;
 
@@ -91,7 +91,7 @@ class Watermark {
   /**
    * Setter for the position field.
    *
-   * @param \Drupal\imgproxy\Imgproxy\WatermarkPosition $position
+   * @param WatermarkPosition $position
    *   New value.
    *
    * @return self
@@ -156,7 +156,7 @@ class Watermark {
    *
    * @param float $opacity
    *   Opacity.
-   * @param \Drupal\imgproxy\Imgproxy\WatermarkPosition|null $position
+   * @param WatermarkPosition|null $position
    *   Watermark position.
    * @param float $x
    *   X offset.
diff --git a/src/Twig/TwigExtension.php b/src/Twig/TwigExtension.php
index 68a54cc..a84ec73 100644
--- a/src/Twig/TwigExtension.php
+++ b/src/Twig/TwigExtension.php
@@ -16,14 +16,14 @@ class TwigExtension extends AbstractExtension {
   /**
    * Imgproxy service.
    *
-   * @var \Drupal\imgproxy\ImgProxy
+   * @var ImgProxy
    */
   protected $service;
 
   /**
    * TwigExtension constructor.
    *
-   * @param \Drupal\imgproxy\ImgProxy $imgProxy
+   * @param ImgProxy $imgProxy
    *   Imgproxy service injection.
    */
   public function __construct(ImgProxy $imgProxy) {
diff --git a/tests/src/Unit/UrlTests.php b/tests/src/Unit/UrlTests.php
index cb25b36..6c18877 100644
--- a/tests/src/Unit/UrlTests.php
+++ b/tests/src/Unit/UrlTests.php
@@ -87,7 +87,7 @@ class UrlTests extends UnitTestCase {
       ->setKey($key)
       ->setSalt($salt)
       ->setImageUrl($imgUrl);
-    self::assertContains('/' . $signature . '/', $url->toString());
+    self::assertStringContainsString('/' . $signature . '/', $url->toString());
   }
 
   /**
@@ -168,20 +168,20 @@ class UrlTests extends UnitTestCase {
 
     self::assertStringStartsWith($endpoint, $result);
     self::assertStringEndsWith($encodedUrl, $result);
-    self::assertContains('/w:100/', $result);
-    self::assertContains('/h:200/', $result);
-    self::assertContains('/el:1/', $result);
-    self::assertContains('/ex:1/', $result);
-    self::assertContains('/bg:aabbcc/', $result);
-    self::assertContains('/bl:0.5/', $result);
-    self::assertContains('/sh:0.4/', $result);
-    self::assertContains('/rt:crop/', $result);
-    self::assertContains('/g:ce/', $result);
-    self::assertContains('/dpr:2/', $result);
-    self::assertContains('/f:jpg/', $result);
-    self::assertContains('/q:25/', $result);
-    self::assertContains('/wm:0.5:nowe:12:13:0.1/', $result);
-    self::assertContains('/cb:hbz/', $result);
+    self::assertStringContainsString('/w:100/', $result);
+    self::assertStringContainsString('/h:200/', $result);
+    self::assertStringContainsString('/el:1/', $result);
+    self::assertStringContainsString('/ex:1/', $result);
+    self::assertStringContainsString('/bg:aabbcc/', $result);
+    self::assertStringContainsString('/bl:0.5/', $result);
+    self::assertStringContainsString('/sh:0.4/', $result);
+    self::assertStringContainsString('/rt:crop/', $result);
+    self::assertStringContainsString('/g:ce/', $result);
+    self::assertStringContainsString('/dpr:2/', $result);
+    self::assertStringContainsString('/f:jpg/', $result);
+    self::assertStringContainsString('/q:25/', $result);
+    self::assertStringContainsString('/wm:0.5:nowe:12:13:0.1/', $result);
+    self::assertStringContainsString('/cb:hbz/', $result);
 
   }
 
