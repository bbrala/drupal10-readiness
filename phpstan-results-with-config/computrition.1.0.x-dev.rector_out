modules/contrib/computrition/computrition.module
modules/contrib/computrition/modules/computrition_entity/computrition_entity.module
modules/contrib/computrition/modules/computrition_entity/computrition_object.page.inc
modules/contrib/computrition/modules/computrition_entity/src/Commands/ComputritionEntityCommands.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionEntityImporter.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionEntityPurger.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectAccessControlHandler.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectHtmlRouteProvider.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectListBuilder.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectPermissions.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectTypeHtmlRouteProvider.php
modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectTypeListBuilder.php
modules/contrib/computrition/modules/computrition_entity/src/Entity/ComputritionObject.php
modules/contrib/computrition/modules/computrition_entity/src/Entity/ComputritionObjectInterface.php
modules/contrib/computrition/modules/computrition_entity/src/Entity/ComputritionObjectType.php
modules/contrib/computrition/modules/computrition_entity/src/Entity/ComputritionObjectTypeInterface.php
modules/contrib/computrition/modules/computrition_entity/src/Entity/ComputritionObjectViewsData.php
modules/contrib/computrition/modules/computrition_entity/src/Form/ComputritionObjectDeleteForm.php
modules/contrib/computrition/modules/computrition_entity/src/Form/ComputritionObjectForm.php
modules/contrib/computrition/modules/computrition_entity/src/Form/ComputritionObjectSettingsForm.php
modules/contrib/computrition/modules/computrition_entity/src/Form/ComputritionObjectTypeDeleteForm.php
modules/contrib/computrition/modules/computrition_entity/src/Form/ComputritionObjectTypeForm.php
modules/contrib/computrition/src/Api/ComputritionApiRequest.php
modules/contrib/computrition/src/Api/ComputritionErrorResponse.php
modules/contrib/computrition/src/Form/ComputritionConfigurationForm.php
modules/contrib/computrition/tests/src/Unit/ComputritionApiRequestTest.php

12 files with changes
=====================

1) modules/contrib/computrition/tests/src/Unit/ComputritionApiRequestTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\computrition\Unit;

+use Drupal\Core\Config\ConfigFactory;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\computrition\Api\ComputritionApiRequest;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Tests\UnitTestCase;
@@ @@
   /**
    * Used for passing our test module configuration into the API constructor.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Cache backend required by the API constructor.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * Guzzle http client required by the API constructor.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $guzzleClient;

@@ @@
   /**
    * Logger factory required by the API constructor.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * Used for setting up our mocked guzzle HTTP requests to the external API.
    *
-   * @var \GuzzleHttp\Handler\MockHandler
+   * @var MockHandler
    */
   protected $guzzleMock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/computrition/src/Api/ComputritionApiRequest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The CacheBackendInterface used to make calls to the Drupal cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The Guzzle client used to make calls to the external Computrition API.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $guzzleClient;

@@ @@
   /**
    * Logger factory used for writing to the Drupal database log.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * ComputritionApiRequest constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The computrition module settings, used for setting the API base url and
    *   cache lifetime.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The CacheBackendInterface used to make calls to the Drupal cache.
-   * @param \GuzzleHttp\Client $guzzle_client
+   * @param Client $guzzle_client
    *   The guzzle client used to make calls to the external computrition API.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger
+   * @param LoggerChannelFactory $logger
    *   The logger factory used for writing messages to the Drupal database log.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CacheBackendInterface $cache_backend, Client $guzzle_client, LoggerChannelFactory $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/computrition/modules/computrition_entity/src/Form/ComputritionObjectSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/computrition/modules/computrition_entity/src/Form/ComputritionObjectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\computrition_entity\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\computrition_entity\Entity\ComputritionObject;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\computrition_entity\Entity\ComputritionObject $entity */
+    /** @var ComputritionObject $entity */
     $form = parent::buildForm($form, $form_state);

     return $form;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectPermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\computrition_entity\Entity\ComputritionObjectType $type
+   * @param ComputritionObjectType $type
    *   The ComputritionObject type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\computrition_entity;

+use Drupal\computrition_entity\Entity\ComputritionObject;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\computrition_entity\Entity\ComputritionObject $entity */
+    /** @var ComputritionObject $entity */
     $row['id'] = $entity->id();
     $row['remote_id'] = $entity->get('remote_id')->value;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/computrition/modules/computrition_entity/src/ComputritionObjectAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\computrition_entity;

+use Drupal\computrition_entity\Entity\ComputritionObjectInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $entity */
-
+    /** @var ComputritionObjectInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view computrition object entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/computrition/modules/computrition_entity/src/ComputritionEntityPurger.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\computrition_entity;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\computrition\Api\ComputritionApiRequest;
 use Drupal\computrition\Api\ComputritionErrorResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Computrition API request object used for fetching data from Computrition.
    *
-   * @var \Drupal\computrition\Api\ComputritionApiRequest
+   * @var ComputritionApiRequest
    */
   protected $api;

@@ @@
   /**
    * Entity type manager used for deleting our imported drupal entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Lock used to prevent multiple purges from running concurrently.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Logger factory used for writing to the Drupal database log.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * Module handler used for making our purge functions hookable.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The user-defined module configuration options.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * ComputritionEntityPurger constructor.
    *
-   * @param \Drupal\computrition\Api\ComputritionApiRequest $api
+   * @param ComputritionApiRequest $api
    *   The computrition API request object used for pulling data from the
    *   external computrition API.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager used for deleting our imported drupal entities.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   DatabaseLockBackend used to prevent multiple purges from running
    *   concurrently and trampling each other.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger
+   * @param LoggerChannelFactory $logger
    *   The logger factory used for writing messages to the Drupal database log.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   Module handler used for making our purge functions hookable.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The user-defined module configuration options.
    */
   public function __construct(ComputritionApiRequest $api, EntityTypeManagerInterface $entity_type_manager, LockBackendInterface $lock, LoggerChannelFactory $logger, ModuleHandler $module_handler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/computrition/modules/computrition_entity/src/ComputritionEntityImporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\computrition_entity;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\computrition_entity\Entity\ComputritionObjectInterface;
 use Drupal\computrition\Api\ComputritionApiRequest;
 use Drupal\computrition_entity\Entity\ComputritionObject;
 use Drupal\Component\Serialization\Json;
@@ @@
   /**
    * Computrition API request object used for fetching data from Computrition.
    *
-   * @var \Drupal\computrition\Api\ComputritionApiRequest
+   * @var ComputritionApiRequest
    */
   protected $api;

@@ @@
   /**
    * Entity type manager used for creating our imported drupal entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Lock used to prevent multiple imports from running concurrently.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Logger factory used for writing to the Drupal database log.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $logger;

@@ @@
   /**
    * Module handler used for making our import functions hookable.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The user-defined module configuration options.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * State object for tracking when the last import ran.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The database connection for making static queries.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * ComputritionEntityImporter constructor.
    *
-   * @param \Drupal\computrition\Api\ComputritionApiRequest $api
+   * @param ComputritionApiRequest $api
    *   The computrition API request object used for pulling data from the
    *   external computrition API.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager used for creating our imported drupal entities.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   DatabaseLockBackend used to prevent multiple imports from running
    *   concurrently and trampling each other.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger
+   * @param LoggerChannelFactory $logger
    *   The logger factory used for writing messages to the Drupal database log.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   Module handler used for making our import functions hookable.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The user-defined module configuration options.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State object for tracking when the last import ran.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection for making static queries.
    */
   public function __construct(ComputritionApiRequest $api, EntityTypeManagerInterface $entity_type_manager, LockBackendInterface $lock, LoggerChannelFactory $logger, ModuleHandler $module_handler, ConfigFactoryInterface $config_factory, StateInterface $state, Connection $connection) {
@@ @@
         'remote_data' => $item,
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
    * @param array $item
    *   An array representing a computrition object as resturned from a
    *   computrition API response.
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    * @param bool $skipHashCheck
    *   If TRUE, update existing computrition entities in Drupal even they
@@ @@
         'location' => $location->id(),
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
    * @param array $item
    *   An array representing a computrition object as resturned from a
    *   computrition API response.
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    * @param bool $skipHashCheck
    *   If TRUE, update existing computrition entities in Drupal even they
@@ @@
         'location' => $location->id(),
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
         'remote_data' => $item,
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
         'remote_data' => $item,
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
         'remote_data' => $item,
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
         'remote_data' => $item,
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
    * @param array $recipe
    *   An array representing a computrition object as returned from a
    *   computrition API response.
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    * @param bool $skipHashCheck
    *   If TRUE, update existing computrition entities in Drupal even they
@@ @@
         'location' => $location->id(),
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
    *
    * @param string $date
    *   A date in the format "Ymd".
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    * @param array $menuParams
    *   An array of parameters for fetching a menu from the computrition API.
@@ @@
    *   computrition API response.
    * @param array $menuParams
    *   An array of parameters for fetching a menu from the computrition API.
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    * @param bool $skipHashCheck
    *   If TRUE, update existing computrition entities in Drupal even they
@@ @@
         'menu_type' => $menuType->id(),
       ];

-      /** @var \Drupal\computrition_entity\Entity\ComputritionObjectInterface $object */
+      /** @var ComputritionObjectInterface $object */
       $object = $this->entityTypeManager->getStorage('computrition_object')->create($values);
       $changed = TRUE;
     }
@@ @@
   /**
    * Helper function to ensure only content of desired locations are imported.
    *
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    *
    * @return bool
@@ @@
   /**
    * Helper function to ensure only menus of a desired type are imported.
    *
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    * @param array $menu
    *   An array representing a computrition menu as returned from a
@@ @@
    * @param array $menu
    *   An array representing a computrition menu as resturned from a
    *   computrition API response.
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    *
    * @return array
@@ @@
    *
    * @param string $recipeRemoteId
    *   The remote ID of a recipe in Computrition.
-   * @param \Drupal\computrition_entity\Entity\ComputritionObject $location
+   * @param ComputritionObject $location
    *   A computrition object entity representing a dining location.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/computrition/modules/computrition_entity/src/Commands/ComputritionEntityCommands.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Computrition entity importer.
    *
-   * @var \Drupal\computrition_entity\ComputritionEntityImporter
+   * @var ComputritionEntityImporter
    */
   protected $importer;

@@ @@
   /**
    * Computrition entity orphan object purger.
    *
-   * @var \Drupal\computrition_entity\ComputritionEntityPurger
+   * @var ComputritionEntityPurger
    */
   protected $purger;

@@ @@
   /**
    * Lock used to prevent multiple imports from running concurrently.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Entity type manager used for creating, loading, and deleting entities.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * State object for tracking when the last import ran.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
    *   Computrition entity importer.
    * @param \Drupal\computrition\Api\ComputritionEntityPurger $purger
    *   Computrition entity orphan object purger.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   DatabaseLockBackend used to prevent multiple imports from running
    *   concurrently and trampling each other.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager used for creating, loading, and deleting Drupal
    *   entities.
-   * @param Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State object for tracking when the last import ran.
    */
   public function __construct(ComputritionEntityImporter $importer, ComputritionEntityPurger $purger, LockBackendInterface $lock, EntityTypeManagerInterface $entity_type_manager, StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/computrition/modules/computrition_entity/computrition_entity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
+use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 /**
  * @file
  * Contains computrition_entity.module.
@@ @@
 /**
  * Implements hook_form_alter().
  */
-function computrition_entity_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function computrition_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Give users the option to enable automatic entity import via cron on the
   // Computrition settings form.
   if ('computrition_configuration_form' === $form_id) {
@@ @@
  * Save the submitted configuration for our hooked additions to the Computrition
  * settings form.
  */
-function computrition_entity_configuration_form_submit(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function computrition_entity_configuration_form_submit(array &$form, FormStateInterface $form_state) {
   $config = \Drupal::service('config.factory')->getEditable('computrition.settings');
   $config->set('cron_enabled', $form_state->getValue('cron_enabled'));
   $config->set('automatic_delete', $form_state->getValue('automatic_delete'));
@@ @@
   $count = 0;

   $cutoff = new DrupalDateTime("-$menu_delete_days days");
-  $cutoff = $cutoff->format(\Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
+  $cutoff = $cutoff->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

   $query = \Drupal::entityQuery('computrition_object');
   $query->condition('type', 'menu');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

