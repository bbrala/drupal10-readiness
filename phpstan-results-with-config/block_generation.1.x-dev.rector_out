modules/contrib/block_generation/block_generation.install
modules/contrib/block_generation/block_generation.module
modules/contrib/block_generation/modules/block/block_generation_block.install
modules/contrib/block_generation/modules/block/block_generation_block.module
modules/contrib/block_generation/modules/composition/block_generation_composition.install
modules/contrib/block_generation/modules/composition/block_generation_composition.module
modules/contrib/block_generation/modules/image/block_generation_image.install
modules/contrib/block_generation/modules/image/block_generation_image.module
modules/contrib/block_generation/modules/media/block_generation_media.install
modules/contrib/block_generation/modules/media/block_generation_media.module
modules/contrib/block_generation/modules/teaser/block_generation_teaser.install
modules/contrib/block_generation/modules/teaser/block_generation_teaser.module
modules/contrib/block_generation/modules/text/block_generation_text.install
modules/contrib/block_generation/modules/text/block_generation_text.module
modules/contrib/block_generation/src/Annotation/BlockGenerationEffect.php
modules/contrib/block_generation/src/BlockGenerationEffectAwareInterface.php
modules/contrib/block_generation/src/BlockGenerationEffectAwarePluginCollectionItem.php
modules/contrib/block_generation/src/BlockGenerationEffectAwareTrait.php
modules/contrib/block_generation/src/BlockGenerationEffectManager.php
modules/contrib/block_generation/src/BlockGenerationEffectManagerInterface.php
modules/contrib/block_generation/src/BlockGenerationEffectPluginInterface.php
modules/contrib/block_generation/src/BlockGenerationGenerationEffectManager.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/AttachedLibrary.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BackgroundColor.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BackgroundGradient.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BackgroundImage.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BackgroundMedia.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BlockGenerationEffectBase.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/CustomClass.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/CustomStyle.php
modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/LeadingText.php
modules/contrib/block_generation/src/Plugin/DataType/BlockGenerationEffectAwarePluginInstance.php
modules/contrib/block_generation/src/Plugin/views/row/Fields.php

16 files with changes
=====================

1) modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BlockGenerationEffectBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed[] $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translator.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BackgroundMedia.php:139

    ---------- begin diff ----------
@@ @@
         $file_url = $image_style->buildUrl($file_uri);
       }
       else {
-        $file_url = file_url_transform_relative(file_create_url($file_uri));
+        $file_url = \Drupal::service('file_url_generator')->generateString($file_uri);
       }

       // Background image.
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/block_generation/src/Plugin/BlockGenerationEffect/BackgroundImage.php:135

    ---------- begin diff ----------
@@ @@

     // Apply effect.
     if ($file = \Drupal::service('entity_type.manager')->getStorage('file')->load($this->configuration['fid'])) {
-      $file_url = file_url_transform_relative(file_create_url($file->getFileUri()));
+      $file_url = \Drupal::service('file_url_generator')->generateString($file->getFileUri());

       // Background image.
       if ($file_url) {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/block_generation/src/BlockGenerationGenerationEffectManager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class_resolver.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/block_generation/src/BlockGenerationEffectManagerInterface.php:17

    ---------- begin diff ----------
@@ @@
    * @param mixed[] $configuration
    *   An array of configuration relevant to the plugin instance.
    *
-   * @return \Drupal\block_generation\BlockGenerationEffectPluginInterface
+   * @return BlockGenerationEffectPluginInterface
    */
   public function createInstance($plugin_id, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/block_generation/src/BlockGenerationEffectManager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class_resolver.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/block_generation/src/BlockGenerationEffectAwareTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The collection.
    *
-   * @var \Drupal\Core\Entity\EntityInterface $entity
+   * @var EntityInterface $entity
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/block_generation/src/BlockGenerationEffectAwareInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return $this
    */
@@ @@
   /**
    * Gets the entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/block_generation/src/Annotation/BlockGenerationEffect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_generation\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


10) modules/contrib/block_generation/modules/text/block_generation_text.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Utility\ThemeRegistry;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _block_generation_text_form_alter(&$form, FormStateInterface $form_state) {
   // External wrapper.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_text_form_block_content_block_generation_text_edit_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_text_form_alter($form, $form_state);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_text_form_block_content_block_generation_text_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_text_form_alter($form, $form_state);
@@ @@
 function template_preprocess_block__block_generation__block_generation_text(array &$variables) {
   if (isset($variables['elements']['#block_content']) && $variables['elements']['#block_content'] instanceof BlockContent) {
     // Block content object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['elements']['#block_content'];

     // Process possible wrappers.
@@ @@
  * Implements hook_ENTITY_TYPE_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function block_generation_text_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   $block_generation_bundles = _block_generation_bundles();
   if ($entity instanceof BlockContent && array_key_exists($entity->bundle(), $block_generation_bundles)) {
-    /** @var \Drupal\Core\Utility\ThemeRegistry $theme_registry */
+    /** @var ThemeRegistry $theme_registry */
     $theme_registry = \Drupal::service('theme.registry')->getRuntime();

     // Update the theme for specific fields.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/block_generation/modules/teaser/block_generation_teaser.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Utility\ThemeRegistry;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _block_generation_teaser_form_alter(&$form, FormStateInterface $form_state) {
   // External wrapper.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_teaser_form_block_content_block_generation_teaser_edit_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_teaser_form_alter($form, $form_state);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_teaser_form_block_content_block_generation_teaser_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_teaser_form_alter($form, $form_state);
@@ @@
 function template_preprocess_block__block_generation__block_generation_teaser(array &$variables) {
   if (isset($variables['elements']['#block_content']) && $variables['elements']['#block_content'] instanceof BlockContent) {
     // Block content object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['elements']['#block_content'];

     // Process possible wrappers.
@@ @@
  * Implements hook_ENTITY_TYPE_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function block_generation_teaser_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   $block_generation_bundles = _block_generation_bundles();
   if ($entity instanceof BlockContent && array_key_exists($entity->bundle(), $block_generation_bundles)) {
-    /** @var \Drupal\Core\Utility\ThemeRegistry $theme_registry */
+    /** @var ThemeRegistry $theme_registry */
     $theme_registry = \Drupal::service('theme.registry')->getRuntime();

     // Update the theme for specific fields.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/block_generation/modules/media/block_generation_media.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Utility\ThemeRegistry;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _block_generation_media_form_alter(&$form, FormStateInterface $form_state) {
   // External wrapper.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_media_form_block_content_block_generation_media_edit_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_media_form_alter($form, $form_state);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_media_form_block_content_block_generation_media_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_media_form_alter($form, $form_state);
@@ @@
 function template_preprocess_block__block_generation__block_generation_media(array &$variables) {
   if (isset($variables['elements']['#block_content']) && $variables['elements']['#block_content'] instanceof BlockContent) {
     // Block content object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['elements']['#block_content'];

     // Process possible wrappers.
@@ @@
  * Implements hook_ENTITY_TYPE_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function block_generation_media_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   if ($entity instanceof BlockContent && $entity->bundle() == 'block_generation_media') {
-    /** @var \Drupal\Core\Utility\ThemeRegistry $theme_registry */
+    /** @var ThemeRegistry $theme_registry */
     $theme_registry = \Drupal::service('theme.registry')->getRuntime();

     // Update the theme for specific fields.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/block_generation/modules/image/block_generation_image.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Utility\ThemeRegistry;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _block_generation_image_form_alter(&$form, FormStateInterface $form_state) {
   // External wrapper.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_image_form_block_content_block_generation_image_edit_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_image_form_alter($form, $form_state);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_image_form_block_content_block_generation_image_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_image_form_alter($form, $form_state);
@@ @@
 function template_preprocess_block__block_generation__block_generation_image(array &$variables) {
   if (isset($variables['elements']['#block_content']) && $variables['elements']['#block_content'] instanceof BlockContent) {
     // Block content object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['elements']['#block_content'];

     // Process possible wrappers.
@@ @@
  * Implements hook_ENTITY_TYPE_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function block_generation_image_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   if ($entity instanceof BlockContent && $entity->bundle() == 'block_generation_image') {
-    /** @var \Drupal\Core\Utility\ThemeRegistry $theme_registry */
+    /** @var ThemeRegistry $theme_registry */
     $theme_registry = \Drupal::service('theme.registry')->getRuntime();

     // Update the theme for specific fields.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/block_generation/modules/composition/block_generation_composition.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Utility\ThemeRegistry;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _block_generation_composition_form_alter(&$form, FormStateInterface $form_state) {
   // External wrapper.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_composition_form_block_content_block_generation_composition_edit_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_composition_form_alter($form, $form_state);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_composition_form_block_content_block_generation_composition_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_composition_form_alter($form, $form_state);
@@ @@
 function template_preprocess_block__block_generation__block_generation_composition(array &$variables) {
   if (isset($variables['elements']['#block_content']) && $variables['elements']['#block_content'] instanceof BlockContent) {
     // Block content object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['elements']['#block_content'];

     // Process possible wrappers.
@@ @@
  * Implements hook_ENTITY_TYPE_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function block_generation_composition_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   if ($entity instanceof BlockContent && $entity->bundle() == 'block_generation_composition') {
-    /** @var \Drupal\Core\Utility\ThemeRegistry $theme_registry */
+    /** @var ThemeRegistry $theme_registry */
     $theme_registry = \Drupal::service('theme.registry')->getRuntime();

     // Update the theme for specific fields.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/block_generation/modules/block/block_generation_block.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Utility\ThemeRegistry;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function _block_generation_block_form_alter(&$form, FormStateInterface $form_state) {
   // External wrapper.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_block_form_block_content_block_generation_block_edit_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_block_form_alter($form, $form_state);
@@ @@
  * Implements hook_form_FORM_ID_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function block_generation_block_form_block_content_block_generation_block_form_alter(&$form, FormStateInterface $form_state) {
   _block_generation_block_form_alter($form, $form_state);
@@ @@
  * Implements hook_ENTITY_TYPE_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function block_generation_block_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   $block_generation_bundles = _block_generation_bundles();
   if ($entity instanceof BlockContent && $entity->bundle() == 'block_generation_block') {
-    /** @var \Drupal\Core\Utility\ThemeRegistry $theme_registry */
+    /** @var ThemeRegistry $theme_registry */
     $theme_registry = \Drupal::service('theme.registry')->getRuntime();

     // Update the theme for specific fields.
@@ @@
 function template_preprocess_block__block_generation__block_generation_block(array &$variables) {
   if (isset($variables['elements']['#block_content']) && $variables['elements']['#block_content'] instanceof BlockContent) {
     // Block content object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['elements']['#block_content'];

     // Process possible wrappers.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/block_generation/block_generation.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Utility\ThemeRegistry;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\views\ViewExecutable;
@@ @@
  * Implements hook_ENTITY_TYPE_view_alter().
  *
  * @param array $build
- * @param \Drupal\Core\Entity\EntityInterface $entity
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityInterface $entity
+ * @param EntityViewDisplayInterface $display
  */
 function block_generation_block_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   $block_generation_bundles = _block_generation_bundles();
   if ($entity instanceof BlockContent && array_key_exists($entity->bundle(), $block_generation_bundles)) {
-    /** @var \Drupal\Core\Utility\ThemeRegistry $theme_registry */
+    /** @var ThemeRegistry $theme_registry */
     $theme_registry = \Drupal::service('theme.registry')->getRuntime();

     // Generalize the entity-type-specific defaults for easier default theming.
@@ @@

             // Possible file path of the template name containing the bundle name.
             $template_name = 'block--block-generation--' . strtr($bundle, '_', '-');
-            $file_path = $app_root . '/' . drupal_get_path('module', $block_generation_module) . '/templates/' . $template_name . '.html.twig';
+            $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates/' . $template_name . '.html.twig';
             // If file exists then make registry changes.
             if (file_exists($file_path)) {
               // Add possible preprocesses, template with template path.
               $block_generation_theme_registry['block__block_generation__' . $bundle] = [
-                'path' => drupal_get_path('module', $block_generation_module) . '/templates',
+                'path' => \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates',
                 'preprocess functions' => [
                   'template_preprocess',
                   'template_preprocess_block__block_generation',
@@ @@
                 ],
                 'render element' => 'elements',
                 'template' => $template_name,
-                'theme path' => drupal_get_path('module', $block_generation_module),
+                'theme path' => \Drupal::service('extension.list.module')->getPath($block_generation_module),
                 'type' => 'module',
               ];
             }
@@ @@
             foreach ($view_modes as $view_mode_name => $view_mode_definition) {
               // Possible file path of the template name containing the bundle name and view mode name.
               $template_name = 'block--block-generation--' . strtr($bundle, '_', '-') . '--' . strtr($view_mode_name, '_', '-');
-              $file_path = $app_root . '/' . drupal_get_path('module', $block_generation_module) . '/templates/' . $template_name . '.html.twig';
+              $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates/' . $template_name . '.html.twig';
               // If file exists then make registry changes.
               if (file_exists($file_path)) {
                 // Add possible preprocesses, template with template path.
                 $block_generation_theme_registry['block__block_generation__' . $bundle . '__' . $view_mode_name] = [
-                  'path' => drupal_get_path('module', $block_generation_module) . '/templates',
+                  'path' => \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates',
                   'preprocess functions' => [
                     'template_preprocess',
                     'template_preprocess_block__block_generation',
@@ @@
                   ],
                   'render element' => 'elements',
                   'template' => $template_name,
-                  'theme path' => drupal_get_path('module', $block_generation_module),
+                  'theme path' => \Drupal::service('extension.list.module')->getPath($block_generation_module),
                   'type' => 'module',
                 ];
               }
@@ @@
             foreach ($fields as $fieldName => $fieldDefinition) {
               // Possible file path of the template name containing the field name.
               $template_name = 'field--block-generation--' . strtr($fieldName, '_', '-');
-              $file_path = $app_root . '/' . drupal_get_path('module', $block_generation_module) . '/templates/' . $template_name . '.html.twig';
+              $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates/' . $template_name . '.html.twig';
               // If file exists then make registry changes.
               if (file_exists($file_path)) {
                 // Add possible preprocesses, template with template path.
                 $block_generation_theme_registry['field__block_generation__' . $fieldName] = [
-                  'path' => drupal_get_path('module', $block_generation_module) . '/templates',
+                  'path' => \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates',
                   'preprocess functions' => [
                     'template_preprocess',
                     'template_preprocess_field',
@@ @@
                   ],
                   'render element' => 'element',
                   'template' => $template_name,
-                  'theme path' => drupal_get_path('module', $block_generation_module),
+                  'theme path' => \Drupal::service('extension.list.module')->getPath($block_generation_module),
                   'type' => 'module',
                 ];
               }
@@ @@

               // Possible file path of the template name containing the field name.
               $template_name = 'field--block-generation--' . strtr($bundle, '_', '-') . '--' . strtr($fieldName, '_', '-');
-              $file_path = $app_root . '/' . drupal_get_path('module', $block_generation_module) . '/templates/' . $template_name . '.html.twig';
+              $file_path = $app_root . '/' . \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates/' . $template_name . '.html.twig';
               // If file exists then make registry changes.
               if (file_exists($file_path)) {
                 // Add possible preprocesses, template with template path.
                 $block_generation_theme_registry['field__block_generation__' . $bundle . '__' . $fieldName] = [
-                  'path' => drupal_get_path('module', $block_generation_module) . '/templates',
+                  'path' => \Drupal::service('extension.list.module')->getPath($block_generation_module) . '/templates',
                   'preprocess functions' => [
                     'template_preprocess',
                     'template_preprocess_field',
@@ @@
                   ],
                   'render element' => 'element',
                   'template' => $template_name,
-                  'theme path' => drupal_get_path('module', $block_generation_module),
+                  'theme path' => \Drupal::service('extension.list.module')->getPath($block_generation_module),
                   'type' => 'module',
                 ];
               }
@@ @@
 function template_preprocess_block__block_generation(array &$variables) {
   if (isset($variables['elements']['#block_content']) && $variables['elements']['#block_content'] instanceof BlockContent) {
     // Block content object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['elements']['#block_content'];

     $wrappers = [
@@ @@
 function template_preprocess_field__block_generation(array &$variables) {
   if (isset($variables['element']['#object']) && $variables['element']['#object'] instanceof BlockContent) {
     // BlockContent object.
-    /** @var \Drupal\block_content\Entity\BlockContent $block */
+    /** @var BlockContent $block */
     $block = $variables['element']['#object'];

     $wrappers = [
@@ @@
  * Helper function for skin processing.
  *
  * @param $skin_wrapper
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  * @param array $variables
  * @param bool $inner
  */
@@ @@
  * Helper function for wrapper processing.
  *
  * @param $wrapper
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  * @param array $variables
  */
 function _block_generation_process_wrapper($wrapper, ContentEntityInterface $entity, array &$variables) {
@@ @@
  * Helper function for wrapper's tag processing.
  *
  * @param $wrapper
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  * @param array $variables
  */
 function _block_generation_process_wrapper_tag($wrapper, ContentEntityInterface $entity, array &$variables) {
@@ @@
  * Helper function for attributes processing of the block.
  *
  * @param $element
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  * @param array $variables
  * @param string $destination
  */
@@ @@
  * Helper function for effects processing.
  *
  * @param $wrapper
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  * @param array $variables
  */
 function _block_generation_process_effects($wrapper, ContentEntityInterface $entity, array &$variables) {
@@ @@
 /**
  * Helper function for content processing.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  * @param array $variables
  * @param array $content_composition
  */
@@ @@
 /**
  * Helper function for order processing.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  * @param array $variables
  * @param array $content_composition
  */
@@ @@
 /**
  * Get context of the entity.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *
  * @return array
  */
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 16 files have been changed by Rector                                      

