diff --git a/src/Annotation/Network.php b/src/Annotation/Network.php
index c3ed480..ec585ca 100755
--- a/src/Annotation/Network.php
+++ b/src/Annotation/Network.php
@@ -25,7 +25,7 @@ class Network extends Plugin {
   /**
    * The social network service implemented by the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation|string
+   * @var Translation|string
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/AuthManager/OAuth2Manager.php b/src/AuthManager/OAuth2Manager.php
index 6cea9b0..a648c00 100755
--- a/src/AuthManager/OAuth2Manager.php
+++ b/src/AuthManager/OAuth2Manager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\social_api\AuthManager;
 
+use League\OAuth2\Client\Provider\AbstractProvider;
+use League\OAuth2\Client\Token\AccessToken;
+use League\OAuth2\Client\Provider\GenericResourceOwner;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ -16,7 +19,7 @@ abstract class OAuth2Manager implements OAuth2ManagerInterface {
   /**
    * The service client.
    *
-   * @var \League\OAuth2\Client\Provider\AbstractProvider|mixed
+   * @var AbstractProvider|mixed
    *
    * @todo Figure out why this is mixed and narrow it.
    */
@@ -25,7 +28,7 @@ abstract class OAuth2Manager implements OAuth2ManagerInterface {
   /**
    * Access token for OAuth2 authentication.
    *
-   * @var \League\OAuth2\Client\Token\AccessToken|string|mixed
+   * @var AccessToken|string|mixed
    *
    * @todo Figure out why this is mixed and narrow it.
    */
@@ -34,28 +37,28 @@ abstract class OAuth2Manager implements OAuth2ManagerInterface {
   /**
    * Social Auth implementer settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $settings;
 
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected LoggerChannelFactoryInterface $loggerFactory;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected ?Request $request;
 
   /**
    * The user returned by the provider.
    *
-   * @var \League\OAuth2\Client\Provider\GenericResourceOwner|array|mixed
+   * @var GenericResourceOwner|array|mixed
    *
    * @todo Figure out why this is mixed and narrow it.
    */
@@ -64,11 +67,11 @@ abstract class OAuth2Manager implements OAuth2ManagerInterface {
   /**
    * OAuth2Manager Constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    *   The implementer settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Symfony\Component\HttpFoundation\Request|null $request
+   * @param Request|null $request
    *   The current request.
    */
   public function __construct(ImmutableConfig $settings,
diff --git a/src/AuthManager/OAuth2ManagerInterface.php b/src/AuthManager/OAuth2ManagerInterface.php
index ad05deb..606c1c9 100755
--- a/src/AuthManager/OAuth2ManagerInterface.php
+++ b/src/AuthManager/OAuth2ManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\social_api\AuthManager;
 
+use League\OAuth2\Client\Token\AccessToken;
+use League\OAuth2\Client\Provider\GenericResourceOwner;
 /**
  * Defines an OAuth2Manager Interface.
  *
@@ -36,7 +38,7 @@ public function getClient(): mixed;
   /**
    * Gets the access token after authentication.
    *
-   * @return \League\OAuth2\Client\Token\AccessToken|mixed
+   * @return AccessToken|mixed
    *   The access token.
    */
   public function getAccessToken(): mixed;
@@ -44,7 +46,7 @@ public function getAccessToken(): mixed;
   /**
    * Sets the access token.
    *
-   * @param \League\OAuth2\Client\Token\AccessToken|mixed $access_token
+   * @param AccessToken|mixed $access_token
    *   The access token.
    *
    * @return $this
@@ -71,7 +73,7 @@ public function getState(): string;
   /**
    * Gets data about the user.
    *
-   * @return \League\OAuth2\Client\Provider\GenericResourceOwner|array|mixed
+   * @return GenericResourceOwner|array|mixed
    *   User info returned by provider.
    */
   public function getUserInfo(): mixed;
diff --git a/src/Controller/SocialApiController.php b/src/Controller/SocialApiController.php
index 2f9acb4..0c33d12 100755
--- a/src/Controller/SocialApiController.php
+++ b/src/Controller/SocialApiController.php
@@ -15,14 +15,14 @@ class SocialApiController extends ControllerBase {
   /**
    * Extension path resolver.
    *
-   * @var \Drupal\Core\Extension\ExtensionPathResolver
+   * @var ExtensionPathResolver
    */
   protected ExtensionPathResolver $extensionPathResolver;
 
   /**
    * The network manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   private NetworkManager $networkManager;
 
@@ -39,9 +39,9 @@ public static function create(ContainerInterface $container): static {
   /**
    * SocialApiController constructor.
    *
-   * @param \Drupal\Core\Extension\ExtensionPathResolver $extensionPathResolver
+   * @param ExtensionPathResolver $extensionPathResolver
    *   Extension path resolver.
-   * @param \Drupal\social_api\Plugin\NetworkManager $networkManager
+   * @param NetworkManager $networkManager
    *   The network manager.
    */
   public function __construct(ExtensionPathResolver $extensionPathResolver, NetworkManager $networkManager) {
diff --git a/src/Plugin/NetworkBase.php b/src/Plugin/NetworkBase.php
index 78c4078..4597b2f 100755
--- a/src/Plugin/NetworkBase.php
+++ b/src/Plugin/NetworkBase.php
@@ -19,35 +19,35 @@ abstract class NetworkBase extends PluginBase implements NetworkInterface {
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected LoggerChannelFactoryInterface $loggerFactory;
 
   /**
    * The global site settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected Settings $siteSettings;
 
   /**
    * The implementer/plugin settings.
    *
-   * @var \Drupal\social_api\Settings\SettingsInterface
+   * @var SettingsInterface
    */
   protected SettingsInterface $settings;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * Network manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   protected NetworkManager $networkManager;
 
@@ -64,7 +64,7 @@ abstract class NetworkBase extends PluginBase implements NetworkInterface {
    * @return mixed
    *   The initialized 3rd party library instance.
    *
-   * @throws \Drupal\social_api\SocialApiException
+   * @throws SocialApiException
    *   If the SDK library does not exist or other validation fails.
    */
   abstract protected function initSdk(): mixed;
@@ -78,18 +78,18 @@ abstract class NetworkBase extends PluginBase implements NetworkInterface {
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The site settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory object.
-   * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
+   * @param NetworkManager $network_manager
    *   Network manager.
    *
-   * @throws \Drupal\social_api\SocialApiException
+   * @throws SocialApiException
    */
   public function __construct(array $configuration,
                               $plugin_id,
@@ -116,10 +116,10 @@ public function __construct(array $configuration,
    * This method is called upon plugin instantiation. Instantiates the settings
    * wrapper.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The injected configuration factory.
    *
-   * @throws \Drupal\social_api\SocialApiException
+   * @throws SocialApiException
    *   When the settings are not valid.
    */
   protected function init(ConfigFactoryInterface $config_factory): void {
diff --git a/src/Plugin/NetworkManager.php b/src/Plugin/NetworkManager.php
index 51a445a..98c6f65 100755
--- a/src/Plugin/NetworkManager.php
+++ b/src/Plugin/NetworkManager.php
@@ -17,9 +17,9 @@ class NetworkManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -32,7 +32,7 @@ public function __construct(\Traversable $namespaces, CacheBackendInterface $cac
   /**
    * Gets the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    */
   public function getModuleHandler(): ModuleHandlerInterface {
     return $this->moduleHandler;
diff --git a/src/Settings/SettingsBase.php b/src/Settings/SettingsBase.php
index 4216540..212c5ca 100755
--- a/src/Settings/SettingsBase.php
+++ b/src/Settings/SettingsBase.php
@@ -14,14 +14,14 @@ abstract class SettingsBase implements SettingsInterface {
   /**
    * The configuration object containing the data from the configuration form.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;
 
   /**
    * Creates a new settings object.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The configuration object associated to the settings.
    */
   public function __construct(ImmutableConfig $config) {
diff --git a/src/Settings/SettingsInterface.php b/src/Settings/SettingsInterface.php
index 108fb17..1ee78a3 100755
--- a/src/Settings/SettingsInterface.php
+++ b/src/Settings/SettingsInterface.php
@@ -14,7 +14,7 @@ interface SettingsInterface {
   /**
    * Gets the configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The configuration object associated with the settings.
    */
   public function getConfig(): ImmutableConfig;
@@ -22,7 +22,7 @@ public function getConfig(): ImmutableConfig;
   /**
    * Factory method to create a new settings object.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The configuration object.
    */
   public static function factory(ImmutableConfig $config): static;
diff --git a/src/SocialApiDataHandler.php b/src/SocialApiDataHandler.php
index d9bfdcc..ac6a5e8 100755
--- a/src/SocialApiDataHandler.php
+++ b/src/SocialApiDataHandler.php
@@ -12,7 +12,7 @@ abstract class SocialApiDataHandler {
   /**
    * The session service.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected SessionInterface $session;
 
@@ -26,7 +26,7 @@ abstract class SocialApiDataHandler {
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   Used for reading data from and writing data to session.
    */
   public function __construct(SessionInterface $session) {
diff --git a/src/User/UserAuthenticator.php b/src/User/UserAuthenticator.php
index 803e405..9624a5e 100644
--- a/src/User/UserAuthenticator.php
+++ b/src/User/UserAuthenticator.php
@@ -16,7 +16,7 @@ abstract class UserAuthenticator {
   /**
    * The Drupal Entity Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    *
    * @todo Determine if this used/needed.
    */
@@ -25,21 +25,21 @@ abstract class UserAuthenticator {
   /**
    * The current Drupal user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $currentUser;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected MessengerInterface $messenger;
 
   /**
    * The Drupal logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected LoggerChannelFactoryInterface $loggerFactory;
 
@@ -53,14 +53,14 @@ abstract class UserAuthenticator {
   /**
    * The Social API user manager.
    *
-   * @var \Drupal\social_api\User\UserManagerInterface
+   * @var UserManagerInterface
    */
   protected UserManagerInterface $userManager;
 
   /**
    * The Social API data handler.
    *
-   * @var \Drupal\social_api\SocialApiDataHandler
+   * @var SocialApiDataHandler
    */
   protected SocialApiDataHandler $dataHandler;
 
@@ -81,15 +81,15 @@ abstract class UserAuthenticator {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Used to get current active user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Used to display messages to user.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
-   * @param \Drupal\social_api\User\UserManagerInterface $user_manager
+   * @param UserManagerInterface $user_manager
    *   The Social API user manager.
-   * @param \Drupal\social_api\SocialApiDataHandler $data_handler
+   * @param SocialApiDataHandler $data_handler
    *   Used to interact with session.
    */
   public function __construct(AccountProxyInterface $current_user,
@@ -153,7 +153,7 @@ public function nullifySessionKeys(): void {
   /**
    * Returns the current user.
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    *   The current Drupal user.
    */
   public function currentUser(): AccountProxyInterface {
diff --git a/src/User/UserManager.php b/src/User/UserManager.php
index d821797..2d3c9bc 100644
--- a/src/User/UserManager.php
+++ b/src/User/UserManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\social_api\User;
 
+use Drupal\social_api\Entity\SocialApi;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -14,21 +15,21 @@ abstract class UserManager implements UserManagerInterface {
   /**
    * The Drupal Entity Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected MessengerInterface $messenger;
 
   /**
    * The Drupal logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected LoggerChannelFactoryInterface $loggerFactory;
 
@@ -51,11 +52,11 @@ abstract class UserManager implements UserManagerInterface {
    *
    * @param string $entity_type
    *   The entity table.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Used for loading and creating Social API-related entities.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Used to display messages to user.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
    */
   public function __construct(string $entity_type,
@@ -88,7 +89,7 @@ public function setPluginId($plugin_id): void {
    */
   public function getDrupalUserId(string $provider_user_id): int|false {
     try {
-      /** @var \Drupal\social_api\Entity\SocialApi[] $user */
+      /** @var SocialApi[] $user */
       $user = $this->entityTypeManager
         ->getStorage($this->entityType)
         ->loadByProperties([
diff --git a/tests/src/Functional/SocialApiTestBase.php b/tests/src/Functional/SocialApiTestBase.php
index b3f4f33..986eb07 100644
--- a/tests/src/Functional/SocialApiTestBase.php
+++ b/tests/src/Functional/SocialApiTestBase.php
@@ -30,14 +30,14 @@ abstract class SocialApiTestBase extends BrowserTestBase {
   /**
    * A test user with no permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $noPermsUser;
 
   /**
    * A test user with corresponding permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $adminUser;
 
