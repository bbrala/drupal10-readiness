diff --git a/src/Controller/TFTController.php b/src/Controller/TFTController.php
index 7a4ede9..dc39672 100644
--- a/src/Controller/TFTController.php
+++ b/src/Controller/TFTController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\tft\Controller;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ -70,13 +73,13 @@ class TFTController extends ControllerBase {
    */
   protected function operation_links($type, $id, $media = NULL, $gid = NULL) {
     $links = [];
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $tempstore */
+    /** @var PrivateTempStore $tempstore */
     $tempstore = \Drupal::service('tempstore.private')->get('tft');
     $query = 'destination=' . $tempstore->get('q');
 
     switch ($type) {
       case 'folder':
-        /** @var \Drupal\group\Entity\GroupInterface $group */
+        /** @var GroupInterface $group */
         $group = Group::load($gid);
         $user = $this->currentUser();
         $edit = FALSE;
@@ -115,7 +118,7 @@ class TFTController extends ControllerBase {
         break;
 
       case 'file':
-        /** @var \Drupal\media\Entity\Media $media */
+        /** @var Media $media */
         if ($media->access('update')) {
           $links[] = [
             '#type' => 'link',
@@ -157,8 +160,8 @@ class TFTController extends ControllerBase {
    * @return array
    *   The folder content
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function get_content($tid, $gid = NULL) {
     $content = [];
@@ -167,8 +170,10 @@ class TFTController extends ControllerBase {
 
     foreach ($elements as $element) {
       if ($element['type'] == 'term') {
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // Please confirm that `$this` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
         $content[] = [
-          $this->link($element, 'folder'),
+          $this->toLink($element, 'folder')->toString(),
           '',
           '',
           $this->t("Folder"),
@@ -176,7 +181,7 @@ class TFTController extends ControllerBase {
         ];
       }
       else {
-        /** @var \Drupal\media\Entity\Media $media */
+        /** @var Media $media */
         $media = Media::load($element['id']);
         $user = $media->getOwner();
         $fids = $media->get('tft_file')->getValue();
@@ -188,8 +193,10 @@ class TFTController extends ControllerBase {
           $file_name_parts = explode('.', $file_name);
           $file_extension = end($file_name_parts);
 
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Please confirm that `$this` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
           $content[] = [
-            $this->link($element, $file->getMimeType()),
+            $this->toLink($element, $file->getMimeType())->toString(),
             $user->getDisplayName(),
             date('d/m/Y H:i', $media->getChangedTime()),
             $this->t('@type file', [
@@ -199,8 +206,10 @@ class TFTController extends ControllerBase {
           ];
         }
         elseif (!empty($link = $media->get('opigno_moxtra_recording_link')->getValue())) {
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Please confirm that `$this` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
           $content[] = [
-            $this->link($element, 'video/mp4', 'record'),
+            $this->toLink($element, 'video/mp4', 'record')->toString(),
             $user->getDisplayName(),
             date('d/m/Y H:i', $media->getChangedTime()),
             $this->t('MP4 file'),
@@ -300,8 +309,8 @@ class TFTController extends ControllerBase {
    * @return array
    *   The render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function content_table($tid, $gid = NULL) {
     $headers = [
@@ -361,8 +370,8 @@ class TFTController extends ControllerBase {
    * @return array
    *   The render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function get_folder_operation_links($tid, $gid = NULL) {
     $items = [];
@@ -370,7 +379,7 @@ class TFTController extends ControllerBase {
     // First link: got to parent.
     $parent_tid = _tft_get_parent_tid($tid);
 
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $tempstore */
+    /** @var PrivateTempStore $tempstore */
     $tempstore = \Drupal::service('tempstore.private')->get('tft');
     $root_tid = $tempstore->get('root_tid');
     $query = 'destination=' . $tempstore->get('q');
@@ -458,7 +467,7 @@ class TFTController extends ControllerBase {
       $name = $this->t("Root");
     }
 
-    /** @var \Drupal\Core\TempStore\PrivateTempStore $tempstore */
+    /** @var PrivateTempStore $tempstore */
     $tempstore = \Drupal::service('tempstore.private')->get('tft');
 
     $base_path = base_path();
@@ -469,7 +478,7 @@ class TFTController extends ControllerBase {
     // Store the current term tid.
     $tempstore->set('root_tid', $tid);
 
-    $path = drupal_get_path('module', 'tft');
+    $path = \Drupal::service('extension.list.module')->getPath('tft');
 
     return [
       // Get the themed title bar.
@@ -501,10 +510,10 @@ class TFTController extends ControllerBase {
   /**
    * Downloads file.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media entity.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse|\Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return TrustedRedirectResponse|BinaryFileResponse
    *   Response.
    */
   public function downloadFile(MediaInterface $media) {
@@ -568,7 +577,7 @@ class TFTController extends ControllerBase {
   /**
    * Returns directory list.
    *
-   * @param \Drupal\taxonomy\TermInterface|null $taxonomy_term
+   * @param TermInterface|null $taxonomy_term
    *   Term.
    *
    * @return array
@@ -582,7 +591,7 @@ class TFTController extends ControllerBase {
   /**
    * Returns group list.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
@@ -603,10 +612,10 @@ class TFTController extends ControllerBase {
   /**
    * Returns folder access flag.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access flag.
    */
   public function accessAjaxGetFolder(AccountInterface $account) {
@@ -622,11 +631,11 @@ class TFTController extends ControllerBase {
   /**
    * Returns folder.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function ajaxGetFolder() {
     $tid = $_GET['tid'];
diff --git a/src/Form/DeleteFolderForm.php b/src/Form/DeleteFolderForm.php
index ac26331..476eafa 100644
--- a/src/Form/DeleteFolderForm.php
+++ b/src/Form/DeleteFolderForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tft\Form;
 
+use Drupal\taxonomy\TermStorage;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -17,7 +18,7 @@ class DeleteFolderForm extends FormBase {
    * Check if the term has no files or child terms.
    */
   protected function check_term_is_deletable($tid) {
-    /** @var \Drupal\taxonomy\TermStorage $storage */
+    /** @var TermStorage $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
     $terms = $storage->loadTree('tft_tree', $tid, 1);
 
diff --git a/src/Form/ReorderFolderForm.php b/src/Form/ReorderFolderForm.php
index 85a5ed6..f16ecad 100644
--- a/src/Form/ReorderFolderForm.php
+++ b/src/Form/ReorderFolderForm.php
@@ -147,7 +147,7 @@ class ReorderFolderForm extends FormBase {
         ],
         [
           '#theme' => 'image',
-          '#uri' => drupal_get_path('module', 'tft') . '/img/folder.png',
+          '#uri' => \Drupal::service('extension.list.module')->getPath('tft') . '/img/folder.png',
           '#attributes' => [
             'class' => 'tft-admin-folder-content-item',
           ],
diff --git a/tft.module b/tft.module
index bfb083b..8255f5e 100644
--- a/tft.module
+++ b/tft.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\taxonomy\TermStorage;
 /**
  * @file
  * Contains tft.module.
@@ -36,8 +39,8 @@ const TFT_ARCHIVE_TERMS = 'tft archive child terms';
  * @return int|bool
  *   The Group id if found, else FALSE.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _tft_get_group_gid($tid) {
   static $cache = [];
@@ -66,7 +69,7 @@ function _tft_get_group_gid($tid) {
 
   while ($tid && !$gid) {
     // Get parent $tid.
-    /** @var \Drupal\taxonomy\TermStorage $storage */
+    /** @var TermStorage $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
     $result = $storage->loadParents($tid);
     $result = reset($result);
@@ -121,8 +124,8 @@ function _tft_get_group_tid($gid) {
  *   The parent tid or 0 if there's no parent.
  *   Will return -1 if the tid is null or 0.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _tft_get_parent_tid($tid, $gid = NULL) {
   static $cache = [];
@@ -135,7 +138,7 @@ function _tft_get_parent_tid($tid, $gid = NULL) {
     return $cache[$tid];
   }
 
-  /** @var \Drupal\taxonomy\TermStorage $storage */
+  /** @var TermStorage $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
   $result = $storage->loadParents($tid);
   $result = reset($result);
@@ -153,8 +156,8 @@ function _tft_get_parent_tid($tid, $gid = NULL) {
  * @return int
  *   The depth of the term, or 0 if no valid term tid was given.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _tft_get_depth($tid) {
   static $cache = [];
@@ -176,7 +179,7 @@ function _tft_get_depth($tid) {
   $depth = -1;
   $pid = $tid;
 
-  /** @var \Drupal\taxonomy\TermStorage $storage */
+  /** @var TermStorage $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
 
   while ($pid) {
@@ -202,8 +205,8 @@ function _tft_get_depth($tid) {
  * @return bool
  *   TRUE if the user has access to this term. FALSE otherwise.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _tft_term_access($tid, $account = NULL) {
   if (!$tid && $tid != 0) {
@@ -239,12 +242,12 @@ function _tft_term_access($tid, $account = NULL) {
  * @return array
  *   The folder content
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _tft_folder_content($tid, $only_terms = FALSE, $gid = NULL) {
   $content = [];
-  /** @var \Drupal\taxonomy\TermStorage $storage */
+  /** @var TermStorage $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
   $result = $storage->loadTree('tft_tree', $tid, 1);
 
@@ -272,7 +275,7 @@ function _tft_folder_content($tid, $only_terms = FALSE, $gid = NULL) {
   $user = \Drupal::currentUser();
   $user_id = $user->id();
   array_walk($files, function ($file) use ($user_id, &$content) {
-    /** @var \Drupal\media\Entity\Media $file */
+    /** @var Media $file */
     if ($file->hasField('tft_members')) {
       $members = $file->get('tft_members')->getValue();
       if (!empty($members)) {
@@ -535,7 +538,7 @@ function tft_entity_presave(EntityInterface $entity) {
   if ($entity->getEntityTypeId() === 'group'
     && $entity->bundle() === 'learning_path'
     && $entity->isNew()) {
-    /** @var \Drupal\group\Entity\Group $entity */
+    /** @var Group $entity */
     if ($entity->get('field_learning_path_folder')->isEmpty()) {
       $folder = Term::create([
         'vid' => 'tft_tree',
