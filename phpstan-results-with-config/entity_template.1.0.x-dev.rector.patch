diff --git a/contrib/ui/entity_template_ui.module b/contrib/ui/entity_template_ui.module
index b200c3e..707e495 100644
--- a/contrib/ui/entity_template_ui.module
+++ b/contrib/ui/entity_template_ui.module
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityType;
+use Drupal\entity_template_ui\Entity\TemplateBuilderHtmlRouteProvider;
+use Drupal\entity_template_ui\Form\TemplateBuilderForm;
+use Drupal\entity_template_ui\Entity\TemplateBlueprintListBuilder;
+use Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider;
+use Drupal\entity_template_ui\Form\TemplateBlueprintForm;
 use Drupal\entity_template\Plugin\EntityTemplate\Component\InlineTemplate;
 use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\BlueprintTemplateUI;
 use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\InlineTemplateUI;
@@ -12,10 +18,10 @@ use Drupal\entity_template_ui\PluginForm\TemplateConfigureForm;
  * Implements hook_entity_type_build().
  */
 function entity_template_ui_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type */
+  /** @var ConfigEntityType $entity_type */
   $entity_type = $entity_types['entity_template_builder'];
   $entity_type->setHandlerClass("route_provider", [
-    "html" => \Drupal\entity_template_ui\Entity\TemplateBuilderHtmlRouteProvider::class,
+    "html" => TemplateBuilderHtmlRouteProvider::class,
   ]);
   //$entity_type->setLinkTemplate("collection", "/admin/content/entity_template/builder");
   $entity_type->setLinkTemplate("canonical", "/admin/content/entity_template/builder/manage/{entity_template_builder}");
@@ -28,19 +34,19 @@ function entity_template_ui_entity_type_build(array &$entity_types) {
     "/admin/content/entity_template/builder/manage/{entity_template_builder}/edit_default_blueprint"
   );
   $entity_type->setLinkTemplate("add-form", "/admin/content/entity_template/builder/add");
-  $entity_type->setFormClass("default", \Drupal\entity_template_ui\Form\TemplateBuilderForm::class);
+  $entity_type->setFormClass("default", TemplateBuilderForm::class);
 
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type */
+  /** @var ConfigEntityType $entity_type */
   $entity_type = $entity_types['entity_template_blueprint'];
-  $entity_type->setListBuilderClass(\Drupal\entity_template_ui\Entity\TemplateBlueprintListBuilder::class);
+  $entity_type->setListBuilderClass(TemplateBlueprintListBuilder::class);
   $entity_type->setHandlerClass("route_provider", [
-    "html" => \Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider::class,
+    "html" => DefaultHtmlRouteProvider::class,
   ]);
   $entity_type->setLinkTemplate("collection", "/admin/content/entity_template/blueprint");
   $entity_type->setLinkTemplate("canonical", "/admin/content/entity_template/blueprint/manage/{entity_template_blueprint}");
   $entity_type->setLinkTemplate("edit-form", "/admin/content/entity_template/blueprint/manage/{entity_template_blueprint}/edit");
   $entity_type->setLinkTemplate("add-form", "/admin/content/entity_template/blueprint/add");
-  $entity_type->setFormClass("default", \Drupal\entity_template_ui\Form\TemplateBlueprintForm::class);
+  $entity_type->setFormClass("default", TemplateBlueprintForm::class);
 }
 
 /**
diff --git a/contrib/ui/src/Access/BlueprintStorageAccessCheck.php b/contrib/ui/src/Access/BlueprintStorageAccessCheck.php
index c793d05..23ef67d 100644
--- a/contrib/ui/src/Access/BlueprintStorageAccessCheck.php
+++ b/contrib/ui/src/Access/BlueprintStorageAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\entity_template\BlueprintStorageInterface;
@@ -10,11 +11,11 @@ use Symfony\Component\Routing\Route;
 class BlueprintStorageAccessCheck implements AccessInterface {
 
   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Symfony\Component\Routing\Route $route
+   * @param BlueprintStorageInterface $blueprint_storage
+   * @param AccountInterface $account
+   * @param Route $route
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function access(
     BlueprintStorageInterface $blueprint_storage,
@@ -23,7 +24,7 @@ class BlueprintStorageAccessCheck implements AccessInterface {
   ) {
     $operation = $route->getRequirement('_blueprint_storage_access');
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $access */
+    /** @var AccessResultInterface $access */
     $access = $blueprint_storage->access($operation, $account, TRUE);
 
     return $access;
diff --git a/contrib/ui/src/Controller/AutocompleteController.php b/contrib/ui/src/Controller/AutocompleteController.php
index 1167f6d..8b891de 100644
--- a/contrib/ui/src/Controller/AutocompleteController.php
+++ b/contrib/ui/src/Controller/AutocompleteController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Controller;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
@@ -16,7 +17,7 @@ class AutocompleteController extends ControllerBase {
   /**
    * The data fetcher.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
@@ -32,7 +33,7 @@ class AutocompleteController extends ControllerBase {
   /**
    * AutocompleteController constructor.
    *
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param DataFetcherInterface $data_fetcher
    */
   public function __construct(DataFetcherInterface $data_fetcher) {
     $this->dataFetcher = $data_fetcher;
@@ -41,9 +42,9 @@ class AutocompleteController extends ControllerBase {
   /**
    * Autocomplete for data selection.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *
    * @todo: Work out how to filter by permitted data types.
    */
@@ -56,7 +57,7 @@ class AutocompleteController extends ControllerBase {
     if ($sub_template) {
       $path = explode(':', $sub_template);
       while ($bit = array_shift($path)) {
-        /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface $template */
+        /** @var SubTemplateInterface $template */
         $template = $template->getComponent($bit);
 
         if (!$template || !($template instanceof TemplateInterface)) {
diff --git a/contrib/ui/src/Controller/BuilderController.php b/contrib/ui/src/Controller/BuilderController.php
index f2919d0..00921dd 100644
--- a/contrib/ui/src/Controller/BuilderController.php
+++ b/contrib/ui/src/Controller/BuilderController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Controller;
 
+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -12,7 +13,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class BuilderController extends ControllerBase {
 
   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;
 
@@ -51,7 +52,7 @@ class BuilderController extends ControllerBase {
     ];
 
     foreach ($this->builderManager->getDefinitions() as $id => $definition) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $plugin */
+      /** @var BuilderInterface $plugin */
       $plugin = $this->builderManager->createInstance($id);
 
       $row = [
@@ -74,12 +75,12 @@ class BuilderController extends ControllerBase {
   /**
    * Build parameters
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
    * @return array
    */
   protected function buildParameters(BuilderInterface $builder) {
-    /** @var \Drupal\entity_template\Entity\TemplateBuilder $entity */
+    /** @var TemplateBuilder $entity */
     $build = [
       '#theme' => 'item_list',
       '#list_type' => 'ul',
@@ -103,7 +104,7 @@ class BuilderController extends ControllerBase {
   /**
    * Build the operations for a given row.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
    * @return array
    */
diff --git a/contrib/ui/src/Controller/ChooseComponentController.php b/contrib/ui/src/Controller/ChooseComponentController.php
index b3cc661..de6fd62 100644
--- a/contrib/ui/src/Controller/ChooseComponentController.php
+++ b/contrib/ui/src/Controller/ChooseComponentController.php
@@ -17,17 +17,17 @@ class ChooseComponentController extends ControllerBase {
   use AjaxHelperTrait;
 
   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
@@ -45,7 +45,7 @@ class ChooseComponentController extends ControllerBase {
   /**
    * ChooseTemplateController constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(TemplateManager $template_manager, TemplateComponentManager $component_manager, ContextHandlerInterface $context_handler) {
     $this->templateManager = $template_manager;
@@ -54,7 +54,7 @@ class ChooseComponentController extends ControllerBase {
   }
 
   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function build(BlueprintStorageInterface $blueprint_storage, $template_id, $sub_template = NULL) {
     $template = $blueprint_storage->getTemplate($template_id);
diff --git a/contrib/ui/src/Controller/ChooseConditionController.php b/contrib/ui/src/Controller/ChooseConditionController.php
index 21dbfa5..9c31630 100644
--- a/contrib/ui/src/Controller/ChooseConditionController.php
+++ b/contrib/ui/src/Controller/ChooseConditionController.php
@@ -16,17 +16,17 @@ class ChooseConditionController extends ControllerBase {
   use AjaxHelperTrait;
 
   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
@@ -44,7 +44,7 @@ class ChooseConditionController extends ControllerBase {
   /**
    * ChooseTemplateController constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(TemplateManager $template_manager, ConditionManager $condition_manager, ContextHandlerInterface $context_handler) {
     $this->templateManager = $template_manager;
@@ -53,7 +53,7 @@ class ChooseConditionController extends ControllerBase {
   }
 
   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function build(BlueprintStorageInterface $blueprint_storage, $template_key) {
     $template = $blueprint_storage->getTemplate($template_key);
diff --git a/contrib/ui/src/Controller/ChooseTemplateController.php b/contrib/ui/src/Controller/ChooseTemplateController.php
index e853296..3bfe948 100644
--- a/contrib/ui/src/Controller/ChooseTemplateController.php
+++ b/contrib/ui/src/Controller/ChooseTemplateController.php
@@ -11,7 +11,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ChooseTemplateController extends ControllerBase {
 
   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
@@ -27,14 +27,14 @@ class ChooseTemplateController extends ControllerBase {
   /**
    * ChooseTemplateController constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(TemplateManager $template_manager) {
     $this->templateManager = $template_manager;
   }
 
   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function build(BlueprintStorageInterface $blueprint_storage) {
     $definitions = $this->templateManager->getDefinitions();
diff --git a/contrib/ui/src/Controller/TemplateBuilderDefaultBlueprintController.php b/contrib/ui/src/Controller/TemplateBuilderDefaultBlueprintController.php
index daefea9..5596ca4 100644
--- a/contrib/ui/src/Controller/TemplateBuilderDefaultBlueprintController.php
+++ b/contrib/ui/src/Controller/TemplateBuilderDefaultBlueprintController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_template_ui\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ -14,7 +17,7 @@ use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 class TemplateBuilderDefaultBlueprintController extends ControllerBase {
 
   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;
 
@@ -32,9 +35,9 @@ class TemplateBuilderDefaultBlueprintController extends ControllerBase {
   /**
    * TemplateBuilderDefaultBlueprintController constructor.
    *
-   * @param \Drupal\entity_template\TemplateBuilderManager $builder_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param TemplateBuilderManager $builder_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFormBuilderInterface $entity_form_builder
    */
   public function __construct(
     TemplateBuilderManager $builder_manager,
@@ -55,8 +58,8 @@ class TemplateBuilderDefaultBlueprintController extends ControllerBase {
    * @return array
    *   The page content.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function editDefaultBlueprint(string $builder) {
     try {
@@ -84,10 +87,10 @@ class TemplateBuilderDefaultBlueprintController extends ControllerBase {
    * @param string $builder
    *   The builder plugin id.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function editDefaultBlueprintTitle(string $builder) {
     $definition = $this->builderManager->getDefinition($builder);
diff --git a/contrib/ui/src/Element/AvailablePlaceholders.php b/contrib/ui/src/Element/AvailablePlaceholders.php
index 2265db9..f1012ff 100644
--- a/contrib/ui/src/Element/AvailablePlaceholders.php
+++ b/contrib/ui/src/Element/AvailablePlaceholders.php
@@ -128,7 +128,7 @@ class AvailablePlaceholders extends RenderElement {
   /**
    * Get the placeholders associated with a given data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition to get placeholders for.
    * @param string $path
    *   The path so far to the data definition.
diff --git a/contrib/ui/src/Entity/TemplateBlueprintListBuilder.php b/contrib/ui/src/Entity/TemplateBlueprintListBuilder.php
index e2357ea..bbca1e9 100644
--- a/contrib/ui/src/Entity/TemplateBlueprintListBuilder.php
+++ b/contrib/ui/src/Entity/TemplateBlueprintListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Entity;
 
+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -21,7 +22,7 @@ class TemplateBlueprintListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\entity_template\Entity\TemplateBuilder $entity */
+    /** @var TemplateBuilder $entity */
     $row = [];
     $row['label']['data'] = [
       '#markup' => $entity->label(),
diff --git a/contrib/ui/src/Form/AddComponentForm.php b/contrib/ui/src/Form/AddComponentForm.php
index f51677b..715c07f 100644
--- a/contrib/ui/src/Form/AddComponentForm.php
+++ b/contrib/ui/src/Form/AddComponentForm.php
@@ -58,7 +58,7 @@ class AddComponentForm extends ComponentFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state, string $op = "add") {
diff --git a/contrib/ui/src/Form/AddConditionForm.php b/contrib/ui/src/Form/AddConditionForm.php
index 35c527b..cb40f11 100644
--- a/contrib/ui/src/Form/AddConditionForm.php
+++ b/contrib/ui/src/Form/AddConditionForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
@@ -21,12 +23,12 @@ class AddConditionForm extends FormBase {
   use TemplateAjaxFormHelperTrait;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
@@ -36,22 +38,22 @@ class AddConditionForm extends FormBase {
   protected $templateId;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionInterface
+   * @var ConditionInterface
    */
   protected $plugin;
 
@@ -141,7 +143,7 @@ class AddConditionForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -160,10 +162,10 @@ class AddConditionForm extends FormBase {
   /**
    * Get the plugin form for a given set of operations.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    * @param array $operations
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface|NULL
+   * @return PluginFormInterface|NULL
    */
   protected function getPluginForm(PluginInspectionInterface $plugin, array $operations = ['configure']) {
     foreach ($operations as $operation) {
diff --git a/contrib/ui/src/Form/AddTemplateForm.php b/contrib/ui/src/Form/AddTemplateForm.php
index 1b77b89..c049c1d 100644
--- a/contrib/ui/src/Form/AddTemplateForm.php
+++ b/contrib/ui/src/Form/AddTemplateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -19,27 +20,27 @@ class AddTemplateForm extends FormBase {
   use AjaxFormHelperTrait;
 
   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $plugin;
 
@@ -135,7 +136,7 @@ class AddTemplateForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/contrib/ui/src/Form/ComponentFormBase.php b/contrib/ui/src/Form/ComponentFormBase.php
index 6a7f10e..0b068ea 100644
--- a/contrib/ui/src/Form/ComponentFormBase.php
+++ b/contrib/ui/src/Form/ComponentFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Form\FormBase;
@@ -20,12 +21,12 @@ abstract class ComponentFormBase extends FormBase {
   use TemplateAjaxFormHelperTrait;
 
   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
@@ -35,27 +36,27 @@ abstract class ComponentFormBase extends FormBase {
   protected $templateId;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $rootTemplate;
 
   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @var ComponentInterface
    */
   protected $plugin;
 
@@ -126,7 +127,7 @@ abstract class ComponentFormBase extends FormBase {
   /**
    * Initialize important values like template, rootTemplate and blueprintStorage
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $storage
+   * @param BlueprintStorageInterface $storage
    * @param string $template_key
    */
   protected function initializeTemplate(BlueprintStorageInterface $storage, string $template_key, string $sub_template = '') {
@@ -150,7 +151,7 @@ abstract class ComponentFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state, string $op = 'add') {
diff --git a/contrib/ui/src/Form/ConfigureConditionForm.php b/contrib/ui/src/Form/ConfigureConditionForm.php
index 2fce327..f79c3f9 100644
--- a/contrib/ui/src/Form/ConfigureConditionForm.php
+++ b/contrib/ui/src/Form/ConfigureConditionForm.php
@@ -77,7 +77,7 @@ class ConfigureConditionForm extends AddConditionForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/contrib/ui/src/Form/ConfigureTemplateForm.php b/contrib/ui/src/Form/ConfigureTemplateForm.php
index bbb0295..2ff812a 100644
--- a/contrib/ui/src/Form/ConfigureTemplateForm.php
+++ b/contrib/ui/src/Form/ConfigureTemplateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormFactoryInterface;
@@ -15,27 +16,27 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ConfigureTemplateForm extends FormBase {
 
   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstore;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $plugin;
 
@@ -114,7 +115,7 @@ class ConfigureTemplateForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/contrib/ui/src/Form/CreateEntityFromTemplateForm.php b/contrib/ui/src/Form/CreateEntityFromTemplateForm.php
index fa5acd6..20f166a 100644
--- a/contrib/ui/src/Form/CreateEntityFromTemplateForm.php
+++ b/contrib/ui/src/Form/CreateEntityFromTemplateForm.php
@@ -2,6 +2,15 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Symfony\Component\Validator\ConstraintViolationInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderBase;
+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\entity_template\BlueprintResult;
 use Drupal\charts_highcharts\Settings\Highcharts\Pane;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ -70,22 +79,22 @@ use Symfony\Component\HttpFoundation\RequestStack;
 class CreateEntityFromTemplateForm extends FormBase {
 
   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $templateBuilderManager;
 
   /**
-   * @var \Drupal\typed_data\Widget\FormWidgetManagerInterface
+   * @var FormWidgetManagerInterface
    */
   protected $formWidgetManager;
 
   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -93,7 +102,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * The message to display upon successful submission. Return NULL to not show
    * any messages.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   protected function getSuccessfulMessage() {
     return $this->t('Builder was successfully executed.');
@@ -102,10 +111,10 @@ class CreateEntityFromTemplateForm extends FormBase {
   /**
    * CreateEntityFromTemplateForm constructor.
    *
-   * @param \Drupal\entity_template\TemplateBuilderManager $template_builder_manager
-   * @param \Drupal\typed_data\Widget\FormWidgetManagerInterface $form_widget_manager
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param TemplateBuilderManager $template_builder_manager
+   * @param FormWidgetManagerInterface $form_widget_manager
+   * @param TypedDataManagerInterface $typed_data_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(
     TemplateBuilderManager $template_builder_manager,
@@ -142,12 +151,12 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Form constructor.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param string $entity_type_id
    * @param string $builder_id
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function buildForm(array $form, FormStateInterface $form_state, $entity_type_id = NULL, $builder_id = NULL) {
@@ -205,7 +214,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Build the select parameters form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -264,7 +273,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Builds the parameters form step.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    * @throws \Exception
@@ -281,7 +290,7 @@ class CreateEntityFromTemplateForm extends FormBase {
           $provided_params[$id] = $param;
         }
         else {
-          /** @var \Drupal\Core\Plugin\Context\ContextDefinition $context_definition */
+          /** @var ContextDefinition $context_definition */
           $data_definition = $context_definition->getDataDefinition();
           $typed_data = $this->typedDataManager->createInstance(
             $context_definition->getDataType(),
@@ -292,7 +301,7 @@ class CreateEntityFromTemplateForm extends FormBase {
             ]
           );
 
-          /** @var \Drupal\typed_data\Widget\FormWidgetInterface $widget */
+          /** @var FormWidgetInterface $widget */
           $widget = $this->formWidgetManager->getFormWidget($data_definition);
           $form['params'][$id] = [
             '#widget' => $widget,
@@ -336,7 +345,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -371,7 +380,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Build the entities form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -410,9 +419,9 @@ class CreateEntityFromTemplateForm extends FormBase {
   /**
    * Build the actions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -437,7 +446,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Validate the entities form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validateEntitiesForm(array $form, FormStateInterface $form_state) {
     $entity = clone $form_state->get('current_entity');
@@ -454,7 +463,7 @@ class CreateEntityFromTemplateForm extends FormBase {
 
     // Flag entity level violations.
     foreach ($violations->getEntityViolations() as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $form_state->setErrorByName(str_replace('.', '][', $violation->getPropertyPath()), $violation->getMessage());
     }
 
@@ -472,7 +481,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Submit the entities form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitEntitiesForm(array $form, FormStateInterface $form_state) {
     $entity = $form_state->get('current_entity');
@@ -486,7 +495,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Submit the entities form and go to the next entity.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitEntitiesFormNextEntity(array $form, FormStateInterface $form_state) {
     $current_entity = $form_state->get('current_entity');
@@ -510,7 +519,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Validate callback for selecting a builder.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validateFormSelectBuilder(array &$form, FormStateInterface $form_state) {
     if (!$form_state->getValue('builder')) {
@@ -522,7 +531,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Submit callback for selecting a builder.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitFormSelectBuilder(array &$form, FormStateInterface $form_state) {
     $builder = $form_state->get(['builders', $form_state->getValue('builder')]);
@@ -536,7 +545,7 @@ class CreateEntityFromTemplateForm extends FormBase {
    * Submit callback for selecting a blueprint.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitFormSelectBlueprint(array &$form, FormStateInterface $form_state) {
     $form_state->set('blueprint_key', $form_state->getValue('blueprint_key'));
@@ -545,11 +554,11 @@ class CreateEntityFromTemplateForm extends FormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityStorageException
+   * @throws EntityMalformedException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderBase $builder */
+    /** @var BuilderBase $builder */
     $builder = $form_state->get('builder');
 
     try {
@@ -558,9 +567,9 @@ class CreateEntityFromTemplateForm extends FormBase {
       if (!empty($form['params'])) {
         $parameters = $form_state->get('params') ?: [];
         foreach (Element::children($form['params']) as $id) {
-          /** @var \Drupal\typed_data\Widget\FormWidgetInterface $widget */
+          /** @var FormWidgetInterface $widget */
           $widget = $form['params'][$id]['#widget'];
-          /** @var \Drupal\Core\TypedData\TypedDataInterface $typed_data */
+          /** @var TypedDataInterface $typed_data */
           $typed_data = $form['params'][$id]['#typed_data'];
 
           $widget->extractFormValues(
@@ -573,7 +582,7 @@ class CreateEntityFromTemplateForm extends FormBase {
         $form_state->set('params', $parameters);
       }
 
-      /** @var \Drupal\entity_template\BlueprintResult $result */
+      /** @var BlueprintResult $result */
       $params = $form_state->get('params') ?: [];
       foreach ($builder->getContextDefinitions() as $id => $definition) {
         // Upcast the entity ids that might be in params.
diff --git a/contrib/ui/src/Form/RemoveComponentForm.php b/contrib/ui/src/Form/RemoveComponentForm.php
index 68ebd9f..47c6373 100644
--- a/contrib/ui/src/Form/RemoveComponentForm.php
+++ b/contrib/ui/src/Form/RemoveComponentForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,27 +24,27 @@ class RemoveComponentForm extends ConfirmFormBase {
   use TemplateAjaxFormHelperTrait;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $rootTemplate;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @var ComponentInterface
    */
   protected $component;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;
 
@@ -59,7 +60,7 @@ class RemoveComponentForm extends ConfirmFormBase {
   /**
    * RemoveComponentForm constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_repository
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_repository
    */
   public function __construct(BlueprintTempstoreRepository $blueprint_tempstore_repository) {
     $this->blueprintTempstoreRepository = $blueprint_tempstore_repository;
@@ -68,7 +69,7 @@ class RemoveComponentForm extends ConfirmFormBase {
   /**
    * Returns the question to ask the user.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form question. The page title will be set to this value.
    */
   public function getQuestion() {
@@ -84,7 +85,7 @@ class RemoveComponentForm extends ConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -147,7 +148,7 @@ class RemoveComponentForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/contrib/ui/src/Form/RemoveConditionForm.php b/contrib/ui/src/Form/RemoveConditionForm.php
index 6cda041..3c95302 100644
--- a/contrib/ui/src/Form/RemoveConditionForm.php
+++ b/contrib/ui/src/Form/RemoveConditionForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,22 +23,22 @@ class RemoveConditionForm extends ConfirmFormBase {
   use TemplateAjaxFormHelperTrait;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionInterface
+   * @var ConditionInterface
    */
   protected $condition;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;
 
@@ -52,7 +54,7 @@ class RemoveConditionForm extends ConfirmFormBase {
   /**
    * RemoveConditionForm constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_repository
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_repository
    */
   public function __construct(BlueprintTempstoreRepository $blueprint_tempstore_repository) {
     $this->blueprintTempstoreRepository = $blueprint_tempstore_repository;
@@ -61,7 +63,7 @@ class RemoveConditionForm extends ConfirmFormBase {
   /**
    * Returns the question to ask the user.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form question. The page title will be set to this value.
    */
   public function getQuestion() {
@@ -77,7 +79,7 @@ class RemoveConditionForm extends ConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -127,7 +129,7 @@ class RemoveConditionForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/contrib/ui/src/Form/RemoveTemplateForm.php b/contrib/ui/src/Form/RemoveTemplateForm.php
index 9826fdd..8a87c70 100644
--- a/contrib/ui/src/Form/RemoveTemplateForm.php
+++ b/contrib/ui/src/Form/RemoveTemplateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -13,17 +14,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class RemoveTemplateForm extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;
 
@@ -39,7 +40,7 @@ class RemoveTemplateForm extends ConfirmFormBase {
   /**
    * RemoveTemplateForm constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_tepository
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_tepository
    */
   public function __construct(BlueprintTempstoreRepository $blueprint_tempstore_tepository)
   {
@@ -49,7 +50,7 @@ class RemoveTemplateForm extends ConfirmFormBase {
   /**
    * Returns the question to ask the user.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The form question. The page title will be set to this value.
    */
   public function getQuestion() {
@@ -65,7 +66,7 @@ class RemoveTemplateForm extends ConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -105,7 +106,7 @@ class RemoveTemplateForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/contrib/ui/src/Form/SwapComponentForm.php b/contrib/ui/src/Form/SwapComponentForm.php
index b78f3c8..37b3317 100644
--- a/contrib/ui/src/Form/SwapComponentForm.php
+++ b/contrib/ui/src/Form/SwapComponentForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Component\SwappableComponentInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\entity_template\Plugin\EntityTemplate\Component\TemplateContextAwareComponentInterface;
@@ -37,7 +38,7 @@ class SwapComponentForm extends ComponentFormBase {
     $this->initializeTemplate($blueprint_storage, $template_key, $sub_template);
 
     if (!$this->plugin) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\SwappableComponentInterface $original_plugin */
+      /** @var SwappableComponentInterface $original_plugin */
       $original_plugin = $this->template->getComponent($component_id);
       $new_plugin = $this->componentManager->createInstance(
         $other_plugin,
diff --git a/contrib/ui/src/Form/TemplateAjaxFormHelperTrait.php b/contrib/ui/src/Form/TemplateAjaxFormHelperTrait.php
index 24d9f2e..adb72c6 100644
--- a/contrib/ui/src/Form/TemplateAjaxFormHelperTrait.php
+++ b/contrib/ui/src/Form/TemplateAjaxFormHelperTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\RedirectCommand;
 use Drupal\Core\Form\FormStateInterface;
@@ -10,17 +12,17 @@ use Drupal\Core\Url;
 trait TemplateAjaxFormHelperTrait {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $rootTemplate;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
diff --git a/contrib/ui/src/Form/TemplateBlueprintForm.php b/contrib/ui/src/Form/TemplateBlueprintForm.php
index 7795263..0231e61 100644
--- a/contrib/ui/src/Form/TemplateBlueprintForm.php
+++ b/contrib/ui/src/Form/TemplateBlueprintForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template\BlueprintStorageInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,39 +25,39 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class TemplateBlueprintForm extends EntityForm {
 
   /**
-   * @var \Drupal\entity_template\TemplateBlueprintProviderManager
+   * @var TemplateBlueprintProviderManager
    */
   protected $blueprintProviderManager;
 
   /**
-   * @var \Drupal\entity_template\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $tempstoreRepository;
 
   /**
-   * @var \Drupal\entity_template\BlueprintStorageInterface
+   * @var BlueprintStorageInterface
    */
   protected $blueprintStorage;
 
   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $templateBuilderManager;
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *
-   * @return \Drupal\Core\Entity\EntityForm
+   * @return EntityForm
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ -67,7 +72,7 @@ class TemplateBlueprintForm extends EntityForm {
   /**
    * TemplateBlueprintForm constructor.
    *
-   * @param \Drupal\entity_template\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    */
   public function __construct(
     TemplateBlueprintProviderManager $blueprint_provider_manager,
@@ -112,7 +117,7 @@ class TemplateBlueprintForm extends EntityForm {
     // whether this is a default blueprint or so that we can correctly set the
     // provider.
     $provider_id = $entity->get('is_default') ? 'builder' : 'blueprint_config';
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+    /** @var BlueprintProviderInterface $provider */
     $provider = $this->blueprintProviderManager->createInstance($provider_id);
     $blueprint_storage = new BlueprintEntityStorageAdaptor($entity, $provider);
 
@@ -133,7 +138,7 @@ class TemplateBlueprintForm extends EntityForm {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -278,11 +283,11 @@ class TemplateBlueprintForm extends EntityForm {
       ]
     ];
 
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template */
+    /** @var TemplateInterface $template */
     foreach ($this->blueprintStorage->getTemplates() as $uuid => $template) {
       $config = $template->getConfiguration();
 
-      /** @var \Drupal\Core\Condition\ConditionInterface[] $conditions */
+      /** @var ConditionInterface[] $conditions */
       if ($conditions = $template->getConditions()) {
         $applies_when = [
           '#theme' => 'item_list',
@@ -395,9 +400,9 @@ class TemplateBlueprintForm extends EntityForm {
    * Submit callback for selecting a builder.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function submitFormSelectBuilder(array &$form, FormStateInterface $form_state) {
     $this->blueprintStorage->getEntity()->set('builder', $form_state->getValue('builder'));
diff --git a/contrib/ui/src/Form/TemplateBuilderForm.php b/contrib/ui/src/Form/TemplateBuilderForm.php
index 71e012b..5062233 100644
--- a/contrib/ui/src/Form/TemplateBuilderForm.php
+++ b/contrib/ui/src/Form/TemplateBuilderForm.php
@@ -18,22 +18,22 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class TemplateBuilderForm extends EntityForm {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityBundleInfo;
 
   /**
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;
 
   /**
-   * @var \Drupal\entity_template\Entity\TemplateBuilder
+   * @var TemplateBuilder
    */
   protected $entity;
 
@@ -52,8 +52,8 @@ class TemplateBuilderForm extends EntityForm {
   /**
    * TemplateBuilderForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -69,7 +69,7 @@ class TemplateBuilderForm extends EntityForm {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -242,7 +242,7 @@ class TemplateBuilderForm extends EntityForm {
    * Validate the information entered for the new context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formValidateAddParameter($form, FormStateInterface $form_state) {
     $values = $form_state->getValue(['parameters', '_add_new']);
@@ -259,7 +259,7 @@ class TemplateBuilderForm extends EntityForm {
    * Submit to add a required context.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitAddParameter($form, FormStateInterface $form_state) {
     $values = $form_state->getValue(['parameters', '_add_new']);
@@ -281,7 +281,7 @@ class TemplateBuilderForm extends EntityForm {
    * Submit to remove a parameter.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function formSubmitRemoveParameter($form, FormStateInterface $form_state) {
     $button = $form_state->getTriggeringElement();
@@ -293,7 +293,7 @@ class TemplateBuilderForm extends EntityForm {
    * Ajax callback to reload the parameters.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -381,7 +381,7 @@ class TemplateBuilderForm extends EntityForm {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return int
    */
diff --git a/contrib/ui/src/Form/TemplateUIHelperTrait.php b/contrib/ui/src/Form/TemplateUIHelperTrait.php
index 3ad9d0c..b12b7f1 100644
--- a/contrib/ui/src/Form/TemplateUIHelperTrait.php
+++ b/contrib/ui/src/Form/TemplateUIHelperTrait.php
@@ -2,24 +2,27 @@
 
 namespace Drupal\entity_template_ui\Form;
 
+use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface;
+use Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 
 trait TemplateUIHelperTrait {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
-   * @var \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface
+   * @var TemplateUIFactoryInterface
    */
   protected $templateUiFactory;
 
   /**
    * Get the template UI factory;
    *
-   * @return \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface
+   * @return TemplateUIFactoryInterface
    */
   protected function templateUiFactory() {
     if (!$this->templateUiFactory) {
@@ -32,7 +35,7 @@ trait TemplateUIHelperTrait {
   /**
    * Get the template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate(): TemplateInterface {
     return $this->template;
@@ -41,10 +44,10 @@ trait TemplateUIHelperTrait {
   /**
    * Get the template ui
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface|NULL $template
+   * @param TemplateInterface|NULL $template
    *
-   * @return \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return TemplateUIInterface
+   * @throws InvalidPluginDefinitionException
    */
   public function getTemplateUi(TemplateInterface $template = NULL) {
     $template = $template ?: $this->getTemplate();
diff --git a/contrib/ui/src/Plugin/EntityTemplate/Template/BaseTemplateUI.php b/contrib/ui/src/Plugin/EntityTemplate/Template/BaseTemplateUI.php
index e793cd4..c522283 100644
--- a/contrib/ui/src/Plugin/EntityTemplate/Template/BaseTemplateUI.php
+++ b/contrib/ui/src/Plugin/EntityTemplate/Template/BaseTemplateUI.php
@@ -8,7 +8,7 @@ use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 abstract class BaseTemplateUI implements TemplateUIInterface {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
diff --git a/contrib/ui/src/Plugin/EntityTemplate/Template/BlueprintTemplateUI.php b/contrib/ui/src/Plugin/EntityTemplate/Template/BlueprintTemplateUI.php
index d5fffb2..79446f8 100644
--- a/contrib/ui/src/Plugin/EntityTemplate/Template/BlueprintTemplateUI.php
+++ b/contrib/ui/src/Plugin/EntityTemplate/Template/BlueprintTemplateUI.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\entity_template_ui\Plugin\EntityTemplate\Template;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface;
 use Drupal\Core\Url;
 
 class BlueprintTemplateUI extends BaseTemplateUI {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface
+   * @var BlueprintTemplateInterface
    */
   protected $template;
 
diff --git a/contrib/ui/src/Plugin/EntityTemplate/Template/InlineTemplateUI.php b/contrib/ui/src/Plugin/EntityTemplate/Template/InlineTemplateUI.php
index 104a323..e024290 100644
--- a/contrib/ui/src/Plugin/EntityTemplate/Template/InlineTemplateUI.php
+++ b/contrib/ui/src/Plugin/EntityTemplate/Template/InlineTemplateUI.php
@@ -2,12 +2,14 @@
 
 namespace Drupal\entity_template_ui\Plugin\EntityTemplate\Template;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface;
 use Drupal\Core\Url;
 
 class InlineTemplateUI extends BaseTemplateUI {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface
+   * @var SubTemplateInterface
    */
   protected $template;
 
@@ -16,7 +18,7 @@ class InlineTemplateUI extends BaseTemplateUI {
    */
   public function addComponentUrl(): ?Url {
     // @todo: Don't assume that the root template is a blueprint template.
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface $root_template */
+    /** @var BlueprintTemplateInterface $root_template */
     $root_template = $this->template->getRootTemplate();
 
     return Url::fromRoute(
@@ -35,7 +37,7 @@ class InlineTemplateUI extends BaseTemplateUI {
    */
   public function swapComponentUrl(string $key, string $other_id): ?Url {
     // @todo: Don't assume that the root template is a blueprint template.
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface $root_template */
+    /** @var BlueprintTemplateInterface $root_template */
     $root_template = $this->template->getRootTemplate();
 
     return Url::fromRoute(
diff --git a/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactory.php b/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactory.php
index 8e438b5..d1696d0 100644
--- a/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactory.php
+++ b/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactory.php
@@ -9,14 +9,14 @@ use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 class TemplateUIFactory implements TemplateUIFactoryInterface {
 
   /**
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * TemplateUIFactory constructor.
    *
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    */
   public function __construct(ClassResolverInterface $class_resolver) {
     $this->classResolver = $class_resolver;
diff --git a/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactoryInterface.php b/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactoryInterface.php
index f610aae..9bd3914 100644
--- a/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactoryInterface.php
+++ b/contrib/ui/src/Plugin/EntityTemplate/Template/TemplateUIFactoryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\Plugin\EntityTemplate\Template;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 
 interface TemplateUIFactoryInterface {
@@ -9,11 +10,11 @@ interface TemplateUIFactoryInterface {
   /**
    * Get the template UI for the template.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
+   * @param TemplateInterface $template
    *
-   * @return \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIInterface
+   * @return TemplateUIInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function ui(TemplateInterface $template): TemplateUIInterface;
 
diff --git a/contrib/ui/src/Plugin/TypedDataFormWidget/EntityInputWidget.php b/contrib/ui/src/Plugin/TypedDataFormWidget/EntityInputWidget.php
index 70ed0d7..bc0f8a7 100644
--- a/contrib/ui/src/Plugin/TypedDataFormWidget/EntityInputWidget.php
+++ b/contrib/ui/src/Plugin/TypedDataFormWidget/EntityInputWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template_ui\Plugin\TypedDataFormWidget;
 
+use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
+use Symfony\Component\Validator\ConstraintViolationInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
 use Drupal\Core\Form\SubformStateInterface;
@@ -26,7 +28,7 @@ use Symfony\Component\Validator\ConstraintViolationListInterface;
 class EntityInputWidget extends FormWidgetBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -36,8 +38,8 @@ class EntityInputWidget extends FormWidgetBase {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param TypedDataManagerInterface $typed_data_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(
     array $configuration,
@@ -75,7 +77,7 @@ class EntityInputWidget extends FormWidgetBase {
    * {@inheritdoc}
    */
   public function form(TypedDataInterface $data, SubformStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data */
+    /** @var EntityAdapter $data */
     $form = SubformState::getNewSubForm();
     $target_type = $data->getDataDefinition()->getEntityTypeId();
 
@@ -117,7 +119,7 @@ class EntityInputWidget extends FormWidgetBase {
    * {@inheritdoc}
    */
   public function extractFormValues(TypedDataInterface $data, SubformStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data */
+    /** @var EntityAdapter $data */
     // Ensure empty values correctly end up as NULL value.
     $value = $form_state->getValue('value');
     if ($value === '') {
@@ -135,7 +137,7 @@ class EntityInputWidget extends FormWidgetBase {
    */
   public function flagViolations(TypedDataInterface $data, ConstraintViolationListInterface $violations, SubformStateInterface $formState) {
     foreach ($violations as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $formState->setErrorByName('target_id', $violation->getMessage());
     }
   }
diff --git a/contrib/ui/src/PluginForm/InlineTemplateAddForm.php b/contrib/ui/src/PluginForm/InlineTemplateAddForm.php
index 30a9511..aa6fd7c 100644
--- a/contrib/ui/src/PluginForm/InlineTemplateAddForm.php
+++ b/contrib/ui/src/PluginForm/InlineTemplateAddForm.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\entity_template_ui\PluginForm;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Component\InlineTemplate;
 class InlineTemplateAddForm extends TemplateAddForm {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Component\InlineTemplate
+   * @var InlineTemplate
    */
   protected $plugin;
 
diff --git a/contrib/ui/src/PluginForm/InlineTemplateConfigureForm.php b/contrib/ui/src/PluginForm/InlineTemplateConfigureForm.php
index 6de41ef..604cc20 100644
--- a/contrib/ui/src/PluginForm/InlineTemplateConfigureForm.php
+++ b/contrib/ui/src/PluginForm/InlineTemplateConfigureForm.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\entity_template_ui\PluginForm;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface;
 class InlineTemplateConfigureForm extends TemplateConfigureFormBase {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface
+   * @var SubTemplateInterface
    */
   protected $plugin;
 
diff --git a/contrib/ui/src/PluginForm/TemplateAddForm.php b/contrib/ui/src/PluginForm/TemplateAddForm.php
index 02b3ab3..eb88b60 100644
--- a/contrib/ui/src/PluginForm/TemplateAddForm.php
+++ b/contrib/ui/src/PluginForm/TemplateAddForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template_ui\PluginForm;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,17 +19,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class TemplateAddForm extends PluginFormBase implements ContainerInjectionInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\BlueprintTemplateInterface
+   * @var BlueprintTemplateInterface
    */
   protected $plugin;
 
@@ -45,8 +46,8 @@ abstract class TemplateAddForm extends PluginFormBase implements ContainerInject
   /**
    * TemplateAddForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -78,7 +79,7 @@ abstract class TemplateAddForm extends PluginFormBase implements ContainerInject
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
@@ -159,7 +160,7 @@ abstract class TemplateAddForm extends PluginFormBase implements ContainerInject
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
@@ -183,7 +184,7 @@ abstract class TemplateAddForm extends PluginFormBase implements ContainerInject
    * Validate the combined entity type and bundle element.
    *
    * @param array $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function combinedEntityTypeIdBundleElementValidate(
     array $element,
diff --git a/contrib/ui/src/PluginForm/TemplateConfigureForm.php b/contrib/ui/src/PluginForm/TemplateConfigureForm.php
index 799045f..c833b5d 100644
--- a/contrib/ui/src/PluginForm/TemplateConfigureForm.php
+++ b/contrib/ui/src/PluginForm/TemplateConfigureForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template_ui\PluginForm;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\ConditionalTemplateInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -21,7 +23,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class TemplateConfigureForm extends TemplateConfigureFormBase {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\ConditionalTemplateInterface
+   * @var ConditionalTemplateInterface
    */
   protected $plugin;
 
@@ -79,7 +81,7 @@ class TemplateConfigureForm extends TemplateConfigureFormBase {
       '#empty' => $this->t('This template will always apply in this blueprint.'),
     ];
     foreach ($this->plugin->getConditions() as $k => $condition) {
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $form['conditions']['table'][$k] = [
         'summary' => [
           '#markup' => $condition->summary(),
diff --git a/contrib/ui/src/PluginForm/TemplateConfigureFormBase.php b/contrib/ui/src/PluginForm/TemplateConfigureFormBase.php
index 9368433..4bc6b50 100644
--- a/contrib/ui/src/PluginForm/TemplateConfigureFormBase.php
+++ b/contrib/ui/src/PluginForm/TemplateConfigureFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template_ui\PluginForm;
 
+use Drupal\Core\Plugin\PluginFormInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -24,27 +26,27 @@ abstract class TemplateConfigureFormBase extends PluginFormBase implements Conta
   use TemplateUIHelperTrait;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $plugin;
 
   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
-   * @var \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface
+   * @var TemplateUIFactoryInterface
    */
   protected $templateUiFactory;
 
@@ -56,7 +58,7 @@ abstract class TemplateConfigureFormBase extends PluginFormBase implements Conta
    * class, but not the container itself. Every call to this method must return
    * a new instance of this class; that is, it may not implement a singleton.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
    */
   public static function create(ContainerInterface $container) {
@@ -78,10 +80,10 @@ abstract class TemplateConfigureFormBase extends PluginFormBase implements Conta
   /**
    * TemplateConfigureFormBase constructor.
    *
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_factory
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
-   * @param \Drupal\entity_template_ui\Plugin\EntityTemplate\Template\TemplateUIFactoryInterface $template_ui_factory
+   * @param TemplateComponentManager $component_manager
+   * @param PluginFormFactoryInterface $plugin_form_factory
+   * @param ContextHandlerInterface $context_handler
+   * @param TemplateUIFactoryInterface $template_ui_factory
    */
   public function __construct(
     TemplateComponentManager $component_manager,
@@ -128,7 +130,7 @@ abstract class TemplateConfigureFormBase extends PluginFormBase implements Conta
     $form['components']['tabs'] = [
       '#type' => 'vertical_tabs',
     ];
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     foreach ($this->plugin->getComponents() as $k => $component) {
       $group = implode('][', array_merge($form['#parents'], ['components', 'tabs']));
 
@@ -198,7 +200,7 @@ abstract class TemplateConfigureFormBase extends PluginFormBase implements Conta
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     $configuration = $this->plugin->getConfiguration();
 
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     foreach ($this->plugin->getComponents() as $k => $component) {
       $sub_form_state = SubformState::createForSubform(
         $form['components'][$k],
@@ -217,11 +219,11 @@ abstract class TemplateConfigureFormBase extends PluginFormBase implements Conta
   /**
    * Get the componetn form
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component
+   * @param ComponentInterface $component
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface
+   * @return PluginFormInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getComponentForm(ComponentInterface $component) {
     if ($component instanceof  PluginWithFormsInterface) {
diff --git a/contrib/ui/src/TypedDataFormWidgetManager.php b/contrib/ui/src/TypedDataFormWidgetManager.php
index 5dd1302..8b7bd92 100644
--- a/contrib/ui/src/TypedDataFormWidgetManager.php
+++ b/contrib/ui/src/TypedDataFormWidgetManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template_ui;
 
+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\typed_data\Widget\FormWidgetManager;
 
@@ -10,10 +12,10 @@ class TypedDataFormWidgetManager extends FormWidgetManager {
   /**
    * Get the widget for the given data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $typed_data
+   * @param DataDefinitionInterface $typed_data
    *
-   * @return \Drupal\typed_data\Widget\FormWidgetInterface
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return FormWidgetInterface
+   * @throws PluginException
    */
   public function getFormWidget(DataDefinitionInterface $data_definition) {
     foreach ($this->getDefinitions() as $id => $definition) {
diff --git a/src/Blueprint.php b/src/Blueprint.php
index 1edfaac..dbdd316 100644
--- a/src/Blueprint.php
+++ b/src/Blueprint.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\DefaultLazyPluginCollection;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Plugin\Context\ContextInterface;
@@ -21,14 +25,14 @@ class Blueprint implements BlueprintInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Builder.
    *
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface
+   * @var BuilderInterface
    */
   protected $builder;
 
@@ -47,28 +51,28 @@ class Blueprint implements BlueprintInterface {
   protected $priority = 0;
 
   /**
-   * @var \Drupal\Core\Plugin\DefaultLazyPluginCollection
+   * @var DefaultLazyPluginCollection
    */
   protected $templatesCollection;
 
   /**
    * Contexts by
    *
-   * @var \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];
 
   /**
    * Context definitions.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @var ContextDefinitionInterface[]
    */
   protected $contextDefinitions = [];
 
   /**
    * Blueprint constructor.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    * @param array $templates
    */
   public function __construct(BuilderInterface $builder, array $templates = []) {
@@ -182,7 +186,7 @@ class Blueprint implements BlueprintInterface {
   /**
    * Get extra context definitions.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   protected function getExtraContextDefinitions() {
     $current_user_context = new EntityContextDefinition('user', new TranslatableMarkup('Current User'));
@@ -215,7 +219,7 @@ class Blueprint implements BlueprintInterface {
   /**
    * Get the builder this blueprint satisfies.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface
+   * @return BuilderInterface
    */
   public function getBuilder() {
     return $this->builder;
@@ -226,7 +230,7 @@ class Blueprint implements BlueprintInterface {
    *
    * @param array $parameters
    *
-   * @return \Drupal\entity_template\BlueprintResult
+   * @return BlueprintResult
    */
   public function execute(array $parameters = []) {
     // Set up contexts ready for execution.
@@ -250,7 +254,7 @@ class Blueprint implements BlueprintInterface {
 
     $result = new BlueprintResult();
     foreach ($this->getTemplates() as $key => $template) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template */
+      /** @var TemplateInterface $template */
       $template->setBlueprintResult($result);
 
       if (!$template->applies()) {
diff --git a/src/BlueprintEntityAdaptor.php b/src/BlueprintEntityAdaptor.php
index da4672d..a3766d8 100644
--- a/src/BlueprintEntityAdaptor.php
+++ b/src/BlueprintEntityAdaptor.php
@@ -7,14 +7,14 @@ use Drupal\entity_template\Entity\BlueprintEntityInterface;
 class BlueprintEntityAdaptor extends Blueprint {
 
   /**
-   * @var \Drupal\entity_template\Entity\BlueprintEntityInterface
+   * @var BlueprintEntityInterface
    */
   protected $entity;
 
   /**
    * BlueprintTemplateBlueprintEntityAdaptor constructor.
    *
-   * @param \Drupal\entity_template\Entity\BlueprintEntityInterface $entity
+   * @param BlueprintEntityInterface $entity
    */
   public function __construct(BlueprintEntityInterface $entity) {
     $this->entity = $entity;
@@ -23,7 +23,7 @@ class BlueprintEntityAdaptor extends Blueprint {
   /**
    * Get the entity.
    *
-   * @return \Drupal\entity_template\Entity\BlueprintEntityInterface
+   * @return BlueprintEntityInterface
    */
   public function getEntity() {
     return $this->entity;
@@ -51,7 +51,7 @@ class BlueprintEntityAdaptor extends Blueprint {
   /**
    * Get the template builder manager.
    *
-   * @return \Drupal\entity_template\TemplateBuilderManager
+   * @return TemplateBuilderManager
    */
   protected function builderManager() {
     return \Drupal::service('plugin.manager.entity_template.builder');
diff --git a/src/BlueprintEntityStorageAdaptor.php b/src/BlueprintEntityStorageAdaptor.php
index 861e70b..fac42c3 100644
--- a/src/BlueprintEntityStorageAdaptor.php
+++ b/src/BlueprintEntityStorageAdaptor.php
@@ -15,8 +15,8 @@ class BlueprintEntityStorageAdaptor extends BlueprintEntityAdaptor implements Bl
   /**
    * BlueprintEntityStorageAdaptor constructor.
    *
-   * @param \Drupal\entity_template\Entity\BlueprintEntityInterface $entity
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider
+   * @param BlueprintEntityInterface $entity
+   * @param BlueprintProviderInterface $provider
    */
   public function __construct(
     BlueprintEntityInterface $entity,
diff --git a/src/BlueprintInterface.php b/src/BlueprintInterface.php
index 5e1ee46..c4af160 100644
--- a/src/BlueprintInterface.php
+++ b/src/BlueprintInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Core\Plugin\Context\ContextInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface;
+use Drupal\Core\Plugin\DefaultLazyPluginCollection;
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 interface BlueprintInterface extends ContextAwareInterface {
 
   /**
@@ -13,9 +17,9 @@ interface BlueprintInterface extends ContextAwareInterface {
   public function label() : string;
 
   /**
-   * @param \Drupal\Core\Plugin\Context\ContextInterface[] $parameters
+   * @param ContextInterface[] $parameters
    *
-   * @return \Drupal\entity_template\BlueprintResult
+   * @return BlueprintResult
    */
   public function execute(array $parameters = []);
 
@@ -38,14 +42,14 @@ interface BlueprintInterface extends ContextAwareInterface {
   /**
    * Get the builder this blueprint is for.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface
+   * @return BuilderInterface
    */
   public function getBuilder();
 
   /**
    * Get the templates that form part of this blueprint.
    *
-   * @return \Drupal\Core\Plugin\DefaultLazyPluginCollection
+   * @return DefaultLazyPluginCollection
    */
   public function getTemplates();
 
@@ -54,7 +58,7 @@ interface BlueprintInterface extends ContextAwareInterface {
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate($id);
 
diff --git a/src/BlueprintLazyTemplatesCollection.php b/src/BlueprintLazyTemplatesCollection.php
index d97f623..c003dfd 100644
--- a/src/BlueprintLazyTemplatesCollection.php
+++ b/src/BlueprintLazyTemplatesCollection.php
@@ -14,15 +14,15 @@ use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 class BlueprintLazyTemplatesCollection extends DefaultLazyPluginCollection {
 
   /**
-   * @var \Drupal\entity_template\BlueprintInterface
+   * @var BlueprintInterface
    */
   protected $blueprint;
 
   /**
    * BlueprintLazyTemplatesCollection constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
-   * @param \Drupal\entity_template\BlueprintInterface $blueprint
+   * @param PluginManagerInterface $manager
+   * @param BlueprintInterface $blueprint
    * @param array $configurations
    */
   public function __construct(PluginManagerInterface $manager, BlueprintInterface $blueprint, array $configurations = []) {
diff --git a/src/BlueprintResult.php b/src/BlueprintResult.php
index b73dae2..031e683 100644
--- a/src/BlueprintResult.php
+++ b/src/BlueprintResult.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -14,7 +15,7 @@ class BlueprintResult {
   /**
    * The generated entites keyed by template.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $items = [];
 
@@ -28,7 +29,7 @@ class BlueprintResult {
   /**
    * Messages set by each template.
    *
-   * @var string[][]|\Drupal\Component\Render\MarkupInterface[][]
+   * @var string[][]|MarkupInterface[][]
    */
   protected $messages;
 
@@ -36,7 +37,7 @@ class BlueprintResult {
    * Add an item to the result.
    *
    * @param string $key
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public function addItem($key, EntityInterface $entity) {
     $this->items[$key] = $entity;
@@ -56,7 +57,7 @@ class BlueprintResult {
   /**
    * Get the generated items.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getItems() {
     return $this->items;
@@ -65,7 +66,7 @@ class BlueprintResult {
   /**
    * Set the items/
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $items
+   * @param EntityInterface[] $items
    *
    * @return static
    */
@@ -96,7 +97,7 @@ class BlueprintResult {
    *
    * @param $key
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface[]|string[]
+   * @return array|MarkupInterface[]|string[]
    */
   public function getMessages($key) {
     return isset($this->messages[$key]) ? $this->messages[$key] : [];
@@ -105,7 +106,7 @@ class BlueprintResult {
   /**
    * Get all the messages.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[][]|\string[][]
+   * @return MarkupInterface[][]|\string[][]
    */
   public function getAllMessages() {
     return $this->messages;
diff --git a/src/BlueprintStorageInterface.php b/src/BlueprintStorageInterface.php
index 62dd413..55154ac 100644
--- a/src/BlueprintStorageInterface.php
+++ b/src/BlueprintStorageInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 
@@ -10,7 +12,7 @@ interface BlueprintStorageInterface extends BlueprintInterface {
   /**
    * Get the blueprint provider for this blueprint storage.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface
+   * @return BlueprintProviderInterface
    */
   public function getProvider();
 
@@ -48,7 +50,7 @@ interface BlueprintStorageInterface extends BlueprintInterface {
   /**
    * Get the edit url for this blueprint.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditUrl();
 
@@ -57,7 +59,7 @@ interface BlueprintStorageInterface extends BlueprintInterface {
    *
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditTemplateUrl(string $key): Url;
 
@@ -65,10 +67,10 @@ interface BlueprintStorageInterface extends BlueprintInterface {
    * Test the access for this blueprint storage.
    *
    * @param string $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param boolean $return_as_object
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|bool
+   * @return AccessResultInterface|bool
    */
   public function access($operation, AccountInterface $account, $return_as_object = TRUE);
 }
diff --git a/src/BlueprintStorageTrait.php b/src/BlueprintStorageTrait.php
index 58313b9..d730129 100644
--- a/src/BlueprintStorageTrait.php
+++ b/src/BlueprintStorageTrait.php
@@ -2,19 +2,22 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Url;
 
 trait BlueprintStorageTrait {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface
+   * @var BlueprintProviderInterface
    */
   protected $provider;
 
   /**
    * Get the blueprint provider for this blueprint storage.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface
+   * @return BlueprintProviderInterface
    */
   public function getProvider() {
     return $this->provider;
@@ -43,7 +46,7 @@ trait BlueprintStorageTrait {
   /**
    * Get the collection of templates.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   abstract public function getTemplates();
 
@@ -66,7 +69,7 @@ trait BlueprintStorageTrait {
   /**
    * Get the uuid service.
    *
-   * @return \Drupal\Component\Uuid\UuidInterface
+   * @return UuidInterface
    */
   protected function uuidGenerator() {
     return \Drupal::service('uuid');
@@ -75,7 +78,7 @@ trait BlueprintStorageTrait {
   /**
    * Get the edit url for this blueprint.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditUrl() {
     return $this->getProvider()->getBlueprintEditUrl($this);
@@ -84,7 +87,7 @@ trait BlueprintStorageTrait {
   /**
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getEditTemplateUrl(string $key): Url {
     return $this->getProvider()->getBlueprintEditTemplateUrl($this, $key);
diff --git a/src/BlueprintTempstoreParamConverter.php b/src/BlueprintTempstoreParamConverter.php
index ce3377f..b30840d 100644
--- a/src/BlueprintTempstoreParamConverter.php
+++ b/src/BlueprintTempstoreParamConverter.php
@@ -2,26 +2,27 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
 use Drupal\Core\ParamConverter\ParamConverterInterface;
 use Symfony\Component\Routing\Route;
 
 class BlueprintTempstoreParamConverter implements ParamConverterInterface {
 
   /**
-   * @var \Drupal\entity_template\BlueprintTempstoreRepository
+   * @var BlueprintTempstoreRepository
    */
   protected $blueprintTempstoreRepository;
 
   /**
-   * @var \Drupal\entity_template\TemplateBlueprintProviderManager
+   * @var TemplateBlueprintProviderManager
    */
   protected $blueprintProviderManager;
 
   /**
    * BlueprintTempstoreParamConverter constructor.
    *
-   * @param \Drupal\entity_template\BlueprintTempstoreRepository $blueprint_tempstore_repository
-   * @param \Drupal\entity_template\TemplateBlueprintProviderManager $blueprint_provider_manager
+   * @param BlueprintTempstoreRepository $blueprint_tempstore_repository
+   * @param TemplateBlueprintProviderManager $blueprint_provider_manager
    */
   public function __construct(
     BlueprintTempstoreRepository $blueprint_tempstore_repository,
@@ -43,7 +44,7 @@ class BlueprintTempstoreParamConverter implements ParamConverterInterface {
    * @param array $defaults
    *   The route defaults array.
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface|null
+   * @return BlueprintStorageInterface|null
    *   The converted parameter value.
    */
   public function convert($value, $definition, $name, array $defaults) {
@@ -54,7 +55,7 @@ class BlueprintTempstoreParamConverter implements ParamConverterInterface {
       return NULL;
     }
 
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+    /** @var BlueprintProviderInterface $provider */
     $provider = $this->blueprintProviderManager
       ->createInstance($defaults['template_blueprint_provider']);
 
@@ -72,7 +73,7 @@ class BlueprintTempstoreParamConverter implements ParamConverterInterface {
    *   The parameter definition provided in the route options.
    * @param string $name
    *   The name of the parameter.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to consider attaching to.
    *
    * @return bool
diff --git a/src/BlueprintTempstoreRepository.php b/src/BlueprintTempstoreRepository.php
index 0fa4ef2..567657a 100644
--- a/src/BlueprintTempstoreRepository.php
+++ b/src/BlueprintTempstoreRepository.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\Core\TempStore\SharedTempStore;
 use Drupal\Core\TempStore\SharedTempStoreFactory;
 
 class BlueprintTempstoreRepository {
@@ -9,14 +11,14 @@ class BlueprintTempstoreRepository {
   /**
    * The shared tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * BlueprintTempstoreRepository constructor.
    *
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param SharedTempStoreFactory $temp_store_factory
    *   The shared tempstore factory.
    */
   public function __construct(SharedTempStoreFactory $temp_store_factory) {
@@ -26,9 +28,9 @@ class BlueprintTempstoreRepository {
   /**
    * Get the blueprint storaga from the tempstore if applicable.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    */
   public function get(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ -42,7 +44,7 @@ class BlueprintTempstoreRepository {
   /**
    * Check whether the blueprint storage is in the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function has(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ -53,9 +55,9 @@ class BlueprintTempstoreRepository {
   /**
    * Set the blueprint storage in the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public function set(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ -68,7 +70,7 @@ class BlueprintTempstoreRepository {
   /**
    * Delete a blueprint storage from the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    */
   public function delete(BlueprintStorageInterface $blueprint_storage) {
     $key = $this->getKey($blueprint_storage);
@@ -78,7 +80,7 @@ class BlueprintTempstoreRepository {
   /**
    * Get the key for the tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
    * @return string
    */
@@ -89,9 +91,9 @@ class BlueprintTempstoreRepository {
   /**
    * Get the right tempstore.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\Core\TempStore\SharedTempStore
+   * @return SharedTempStore
    */
   protected function getTempstore(BlueprintStorageInterface $blueprint_storage) {
     $collection = 'entity_template.blueprint_storage.'.$blueprint_storage
diff --git a/src/ContainerFactoryTemplateInterface.php b/src/ContainerFactoryTemplateInterface.php
index 1abbcea..03ebd77 100644
--- a/src/ContainerFactoryTemplateInterface.php
+++ b/src/ContainerFactoryTemplateInterface.php
@@ -9,8 +9,8 @@ interface ContainerFactoryTemplateInterface {
   /**
    * Instantiates a new instance of this class.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-   * @param \Drupal\entity_template\BlueprintInterface $blueprint
+   * @param ContainerInterface $container
+   * @param BlueprintInterface $blueprint
    * @param array $configuration
    *
    * @return static
diff --git a/src/ContextAwareInterface.php b/src/ContextAwareInterface.php
index 029beb6..0a063d5 100644
--- a/src/ContextAwareInterface.php
+++ b/src/ContextAwareInterface.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Plugin\Context\ContextInterface;
 
 interface ContextAwareInterface {
 
   /**
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   public function getContexts($sample = FALSE);
 
@@ -16,7 +17,7 @@ interface ContextAwareInterface {
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface
+   * @return ContextInterface
    */
   public function getContext($name, $sample = FALSE);
 
@@ -24,7 +25,7 @@ interface ContextAwareInterface {
    * Set the context
    *
    * @param $name
-   * @param \Drupal\Core\Plugin\Context\ContextInterface $context
+   * @param ContextInterface $context
    *
    * @return static
    */
@@ -49,7 +50,7 @@ interface ContextAwareInterface {
   /**
    * Get all the context definition interfaces
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   public function getContextDefinitions();
 
@@ -58,7 +59,7 @@ interface ContextAwareInterface {
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    */
   public function getContextDefinition($name);
 
diff --git a/src/Controller/EntityTemplateController.php b/src/Controller/EntityTemplateController.php
index 9a9305f..285f9cb 100644
--- a/src/Controller/EntityTemplateController.php
+++ b/src/Controller/EntityTemplateController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Controller;
 
+use Symfony\Component\HttpFoundation\Session\Session;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ -24,35 +25,35 @@ class EntityTemplateController extends ControllerBase {
   /**
    * The builder manager.
    *
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;
 
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;
 
   /**
    * The entity builder tempstore.
    *
-   * @var \Drupal\entity_template\EntityBuilderTempStoreRepository
+   * @var EntityBuilderTempStoreRepository
    */
   protected $entityBuilderTempStore;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -74,19 +75,19 @@ class EntityTemplateController extends ControllerBase {
   /**
    * TemplateSelectController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\entity_template\TemplateBuilderManager $template_builder_manager
+   * @param TemplateBuilderManager $template_builder_manager
    *   The template builder manager.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\entity_template\EntityBuilderTempStoreRepository $entity_builder_tempstore
+   * @param EntityBuilderTempStoreRepository $entity_builder_tempstore
    *   The entity builder tempstore.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(
@@ -153,7 +154,7 @@ class EntityTemplateController extends ControllerBase {
    * @param string $session_key
    *   The session key.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The built list of template blueprints.
    */
   public function selectTemplateBlueprint(string $builder_name, string $session_key = NULL) {
diff --git a/src/Entity/BlueprintEntityInterface.php b/src/Entity/BlueprintEntityInterface.php
index ed60556..7b04b1d 100644
--- a/src/Entity/BlueprintEntityInterface.php
+++ b/src/Entity/BlueprintEntityInterface.php
@@ -17,7 +17,7 @@ interface BlueprintEntityInterface extends EntityInterface {
   /**
    * Convert to an instance of BlueprintInterface.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    */
   public function toBlueprint() : BlueprintInterface;
 
diff --git a/src/Entity/TemplateBuilder.php b/src/Entity/TemplateBuilder.php
index 780e8ca..982c9d4 100644
--- a/src/Entity/TemplateBuilder.php
+++ b/src/Entity/TemplateBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Entity;
 
+use Drupal\entity_template\BlueprintInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 
 /**
@@ -45,7 +46,7 @@ class TemplateBuilder extends ConfigEntityBase {
   protected $parameters = [];
 
   /**
-   * @var \Drupal\entity_template\BlueprintInterface
+   * @var BlueprintInterface
    */
   protected $default_blueprint;
 
diff --git a/src/EntityBuilderTempStoreRepository.php b/src/EntityBuilderTempStoreRepository.php
index 04bcd89..2eb5e84 100644
--- a/src/EntityBuilderTempStoreRepository.php
+++ b/src/EntityBuilderTempStoreRepository.php
@@ -12,14 +12,14 @@ class EntityBuilderTempStoreRepository implements EntityBuilderTempStoreReposito
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * EntityBuilderTempStoreRepository.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
diff --git a/src/EntityBuilderTempStoreRepositoryInterface.php b/src/EntityBuilderTempStoreRepositoryInterface.php
index 72c1b95..2aeade1 100644
--- a/src/EntityBuilderTempStoreRepositoryInterface.php
+++ b/src/EntityBuilderTempStoreRepositoryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
 
 /**
@@ -20,7 +21,7 @@ interface EntityBuilderTempStoreRepositoryInterface {
   /**
    * Get the tempstore.
    *
-   * @return \Drupal\Core\TempStore\PrivateTempStore
+   * @return PrivateTempStore
    *   The private tempstore.
    */
   public function getTempstore();
@@ -31,7 +32,7 @@ interface EntityBuilderTempStoreRepositoryInterface {
    * @param string $session_key
    *   The session key.
    *
-   * @return \Drupal\entity_template\BlueprintResult|null
+   * @return BlueprintResult|null
    *   The builder result.
    */
   public function getBuilderResult(string $session_key);
@@ -41,7 +42,7 @@ interface EntityBuilderTempStoreRepositoryInterface {
    *
    * @param string $session_key
    *   The session key.
-   * @param \Drupal\entity_template\BlueprintResult $result
+   * @param BlueprintResult $result
    *   The result.
    */
   public function setBuilderResult(string $session_key, BlueprintResult $result);
diff --git a/src/Exception/MultipleAvailableBlueprintException.php b/src/Exception/MultipleAvailableBlueprintException.php
index 9088895..187b10f 100644
--- a/src/Exception/MultipleAvailableBlueprintException.php
+++ b/src/Exception/MultipleAvailableBlueprintException.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\entity_template\Exception;
 
+use Drupal\entity_template\BlueprintInterface;
 use Throwable;
 
 class MultipleAvailableBlueprintException extends BuilderException {
 
   /**
-   * @var \Drupal\entity_template\BlueprintInterface[]
+   * @var BlueprintInterface[]
    */
   protected $blueprints;
 
@@ -28,7 +29,7 @@ class MultipleAvailableBlueprintException extends BuilderException {
   /**
    * The blueprints available.
    *
-   * @return array|\Drupal\entity_template\BlueprintInterface[]
+   * @return array|BlueprintInterface[]
    */
   public function getBlueprints() {
     return $this->blueprints;
diff --git a/src/Form/BuilderParameterProvisionForm.php b/src/Form/BuilderParameterProvisionForm.php
index 96bb88c..c80668d 100644
--- a/src/Form/BuilderParameterProvisionForm.php
+++ b/src/Form/BuilderParameterProvisionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Form;
 
+use Symfony\Component\HttpFoundation\Session\Session;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
@@ -39,50 +40,50 @@ class BuilderParameterProvisionForm extends FormBase {
   /**
    * The template builder manager.
    *
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $templateBuilderManager;
 
   /**
    * The entity builder tempstore.
    *
-   * @var \Drupal\entity_template\EntityBuilderTempStoreRepository
+   * @var EntityBuilderTempStoreRepository
    */
   protected $entityBuilderTempStore;
 
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new BuilderParameterProvisionForm.
    *
-   * @param \Drupal\entity_template\TemplateBuilderManager $template_builder_manager
+   * @param TemplateBuilderManager $template_builder_manager
    *   The template builder manager.
-   * @param \Drupal\entity_template\EntityBuilderTempStoreRepository $entity_builder_tempstore
+   * @param EntityBuilderTempStoreRepository $entity_builder_tempstore
    *   The entity builder tempstore.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(TemplateBuilderManager $template_builder_manager, EntityBuilderTempStoreRepository $entity_builder_tempstore, SessionInterface $session, UuidInterface $uuid_service, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/MultipleTemplateResult.php b/src/MultipleTemplateResult.php
index 719565c..3ca08a5 100644
--- a/src/MultipleTemplateResult.php
+++ b/src/MultipleTemplateResult.php
@@ -7,7 +7,7 @@ use Drupal\Core\Entity\EntityInterface;
 class MultipleTemplateResult extends TemplateResult {
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];
 
@@ -21,7 +21,7 @@ class MultipleTemplateResult extends TemplateResult {
   /**
    * {@inheritdoc}
    */
-  public function getEntity(): \Drupal\Core\Entity\EntityInterface {
+  public function getEntity(): EntityInterface {
     return reset($this->entities);
   }
 
@@ -29,7 +29,7 @@ class MultipleTemplateResult extends TemplateResult {
    * Add an entity to the result.
    *
    * @param $key
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return static
    */
@@ -41,7 +41,7 @@ class MultipleTemplateResult extends TemplateResult {
   /**
    * Get the entities
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getEntities() {
     return $this->entities;
diff --git a/src/Plugin/Derivative/ConfigTemplateBuilderDeriver.php b/src/Plugin/Derivative/ConfigTemplateBuilderDeriver.php
index 431f6a8..de8e423 100644
--- a/src/Plugin/Derivative/ConfigTemplateBuilderDeriver.php
+++ b/src/Plugin/Derivative/ConfigTemplateBuilderDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Plugin\Derivative;
 
+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ -22,7 +23,7 @@ class ConfigTemplateBuilderDeriver extends DeriverBase implements ContainerDeriv
   protected $basePluginId;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -40,7 +41,7 @@ class ConfigTemplateBuilderDeriver extends DeriverBase implements ContainerDeriv
    * ConfigTemplateBuilderDeriver constructor.
    *
    * @param $base_plugin_id
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
     $this->basePluginId = $base_plugin_id;
@@ -51,7 +52,7 @@ class ConfigTemplateBuilderDeriver extends DeriverBase implements ContainerDeriv
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\entity_template\Entity\TemplateBuilder $builder */
+    /** @var TemplateBuilder $builder */
     foreach ($this->entityTypeManager->getStorage('entity_template_builder')->loadMultiple() as $builder) {
       $context_definitions = [];
       foreach ($builder->getParameters() as $parameter) {
diff --git a/src/Plugin/Derivative/EntityFieldStorageDeriver.php b/src/Plugin/Derivative/EntityFieldStorageDeriver.php
index e4ee19d..2e8935e 100644
--- a/src/Plugin/Derivative/EntityFieldStorageDeriver.php
+++ b/src/Plugin/Derivative/EntityFieldStorageDeriver.php
@@ -25,17 +25,17 @@ class EntityFieldStorageDeriver extends DeriverBase implements ContainerDeriverI
   protected $basePluginId;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;
 
@@ -55,8 +55,8 @@ class EntityFieldStorageDeriver extends DeriverBase implements ContainerDeriverI
    * EntityFieldStorageDeriver constructor.
    *
    * @param string $base_plugin_id
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(
     $base_plugin_id,
diff --git a/src/Plugin/EntityTemplate/BlueprintProvider/BlueprintProviderInterface.php b/src/Plugin/EntityTemplate/BlueprintProvider/BlueprintProviderInterface.php
index a1395f2..0e7a4ff 100644
--- a/src/Plugin/EntityTemplate/BlueprintProvider/BlueprintProviderInterface.php
+++ b/src/Plugin/EntityTemplate/BlueprintProvider/BlueprintProviderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider;
 
+use Drupal\entity_template\BlueprintInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ -13,20 +14,20 @@ interface BlueprintProviderInterface extends PluginInspectionInterface {
   /**
    * Get all the available blueprints for a given builder
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAllBlueprints(BuilderInterface $builder);
 
   /**
    * Get the available blueprints for a given builder, limiting based on
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAvailableBlueprints(BuilderInterface $builder, $parameters = [], AccountInterface $account = NULL);
 
@@ -35,33 +36,33 @@ interface BlueprintProviderInterface extends PluginInspectionInterface {
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    */
   public function getBlueprintStorage($id);
 
   /**
    * Get the key of a given blueprint to identify it in the provider.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprintStorage
+   * @param BlueprintStorageInterface $blueprintStorage
    *
    * @return string
    */
   public function getBlueprintKey(BlueprintStorageInterface $blueprint_storage);
 
   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditUrl(BlueprintStorageInterface $blueprint_storage);
 
   /**
    * Get the edit template url for the blueprint.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditTemplateUrl(BlueprintStorageInterface $blueprint_storage, string $key): Url;
 }
diff --git a/src/Plugin/EntityTemplate/BlueprintProvider/BuilderDefault.php b/src/Plugin/EntityTemplate/BlueprintProvider/BuilderDefault.php
index 344b96b..f3c95d9 100644
--- a/src/Plugin/EntityTemplate/BlueprintProvider/BuilderDefault.php
+++ b/src/Plugin/EntityTemplate/BlueprintProvider/BuilderDefault.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider;
 
+use Drupal\entity_template\BlueprintInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\Session\AccountInterface;
@@ -25,7 +26,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class BuilderDefault extends PluginBase implements BlueprintProviderInterface, ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\entity_template\TemplateBuilderManager
+   * @var TemplateBuilderManager
    */
   protected $builderManager;
 
@@ -52,7 +53,7 @@ class BuilderDefault extends PluginBase implements BlueprintProviderInterface, C
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\entity_template\TemplateBuilderManager $builder_manager
+   * @param TemplateBuilderManager $builder_manager
    */
   public function __construct(
     array $configuration,
@@ -68,9 +69,9 @@ class BuilderDefault extends PluginBase implements BlueprintProviderInterface, C
   /**
    * Get all the available blueprints for a given builder
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAllBlueprints(BuilderInterface $builder) {
     return ($default = $builder->getDefaultBlueprint()) ? [
@@ -81,11 +82,11 @@ class BuilderDefault extends PluginBase implements BlueprintProviderInterface, C
   /**
    * Get the available blueprints for a given builder, limiting based on
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder
+   * @param BuilderInterface $builder
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAvailableBlueprints(BuilderInterface $builder, $parameters = [], AccountInterface $account = NULL) {
     return $this->getAllBlueprints($builder);
@@ -97,7 +98,7 @@ class BuilderDefault extends PluginBase implements BlueprintProviderInterface, C
    * In this instance the id is the name of the builder.
    */
   public function getBlueprintStorage($id) {
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Builder\BuilderInterface $builder */
+    /** @var BuilderInterface $builder */
     $builder = $this->builderManager->createInstance($id);
     return $builder->getDefaultBlueprintStorage($this);
   }
@@ -105,7 +106,7 @@ class BuilderDefault extends PluginBase implements BlueprintProviderInterface, C
   /**
    * Get the key of a given blueprint to identify it in the provider.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprintStorage
+   * @param BlueprintStorageInterface $blueprintStorage
    *
    * @return string
    */
diff --git a/src/Plugin/EntityTemplate/BlueprintProvider/ConfigTemplateBlueprint.php b/src/Plugin/EntityTemplate/BlueprintProvider/ConfigTemplateBlueprint.php
index 2830f9f..9169a13 100644
--- a/src/Plugin/EntityTemplate/BlueprintProvider/ConfigTemplateBlueprint.php
+++ b/src/Plugin/EntityTemplate/BlueprintProvider/ConfigTemplateBlueprint.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider;
 
+use Drupal\entity_template\Entity\TemplateBlueprint;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
@@ -26,7 +27,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ConfigTemplateBlueprint extends PluginBase implements BlueprintProviderInterface, ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -75,7 +76,7 @@ class ConfigTemplateBlueprint extends PluginBase implements BlueprintProviderInt
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    */
   public function getBlueprintStorage($id) {
     return new BlueprintEntityStorageAdaptor(
@@ -87,7 +88,7 @@ class ConfigTemplateBlueprint extends PluginBase implements BlueprintProviderInt
   /**
    * Get the key of a given blueprint to identify it in the provider.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprintStorage
+   * @param BlueprintStorageInterface $blueprintStorage
    *
    * @return string
    */
@@ -96,12 +97,12 @@ class ConfigTemplateBlueprint extends PluginBase implements BlueprintProviderInt
   }
 
   /**
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditUrl(BlueprintStorageInterface $blueprint_storage) {
-    /** @var \Drupal\entity_template\Entity\TemplateBlueprint $blueprint_entity */
+    /** @var TemplateBlueprint $blueprint_entity */
     $blueprint_entity = $blueprint_storage->getEntity();
 
     return $blueprint_entity->toUrl();
@@ -110,10 +111,10 @@ class ConfigTemplateBlueprint extends PluginBase implements BlueprintProviderInt
   /**
    * Get the edit template url for the blueprint.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getBlueprintEditTemplateUrl(BlueprintStorageInterface $blueprint_storage, string $key): Url {
     return Url::fromRoute(
diff --git a/src/Plugin/EntityTemplate/Builder/BuilderBase.php b/src/Plugin/EntityTemplate/Builder/BuilderBase.php
index 1e2c23b..2279ef1 100644
--- a/src/Plugin/EntityTemplate/Builder/BuilderBase.php
+++ b/src/Plugin/EntityTemplate/Builder/BuilderBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;
 
+use Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -27,22 +29,22 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class BuilderBase extends ContextAwarePluginBase implements BuilderInterface, ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\entity_template\TemplateBlueprintProviderManager
+   * @var TemplateBlueprintProviderManager
    */
   protected $blueprintProviderManager;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -67,7 +69,7 @@ abstract class BuilderBase extends ContextAwarePluginBase implements BuilderInte
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(
     array $configuration,
@@ -110,7 +112,7 @@ abstract class BuilderBase extends ContextAwarePluginBase implements BuilderInte
 
     $blueprints = [];
     foreach ($this->blueprintProviderManager->getDefinitions() as $provider_id => $definition) {
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+      /** @var BlueprintProviderInterface $provider */
       $provider = $this->blueprintProviderManager->createInstance($provider_id);
 
       foreach ($provider->getAvailableBlueprints($this, $parameters, $account) as $key => $available_blueprint) {
@@ -136,7 +138,7 @@ abstract class BuilderBase extends ContextAwarePluginBase implements BuilderInte
     if ($blueprint_key) {
       list($provider_id, $provider_key) = explode(':', $blueprint_key);
 
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider */
+      /** @var BlueprintProviderInterface $provider */
       $provider = $this->blueprintProviderManager->createInstance($provider_id);
       $available = $provider->getAvailableBlueprints($this, $parameters, $account);
 
@@ -154,7 +156,7 @@ abstract class BuilderBase extends ContextAwarePluginBase implements BuilderInte
       }
 
       $best_key = key($available);
-      /** @var \Drupal\entity_template\BlueprintInterface $blueprint */
+      /** @var BlueprintInterface $blueprint */
       $blueprint = array_shift($available);
       if (!empty($available)) {
         if (reset($available)->getPriority() == $blueprint->getPriority()) {
@@ -214,7 +216,7 @@ abstract class BuilderBase extends ContextAwarePluginBase implements BuilderInte
   /**
    * Get the return type label.
    *
-   * @return string|\Drupal\Component\Render\MarkupInterface
+   * @return string|MarkupInterface
    */
   public function getReturnTypeLabel() {
     $return_type = $this->getReturnType();
diff --git a/src/Plugin/EntityTemplate/Builder/BuilderInterface.php b/src/Plugin/EntityTemplate/Builder/BuilderInterface.php
index 1c3754f..95bc499 100644
--- a/src/Plugin/EntityTemplate/Builder/BuilderInterface.php
+++ b/src/Plugin/EntityTemplate/Builder/BuilderInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;
 
+use Drupal\entity_template\BlueprintInterface;
+use Drupal\entity_template\BlueprintResult;
+use Drupal\entity_template\Exception\MultipleAvailableBlueprintException;
+use Drupal\entity_template\Exception\NoAvailableBlueprintException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -26,26 +30,26 @@ interface BuilderInterface extends PluginInspectionInterface, ContextAwarePlugin
   /**
    * Get the default blueprint for this builder.
    *
-   * @return \Drupal\entity_template\BlueprintInterface|null
+   * @return BlueprintInterface|null
    */
   public function getDefaultBlueprint();
 
   /**
    * Get the default blueprint storage.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider
+   * @param BlueprintProviderInterface $provider
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface|null
+   * @return BlueprintStorageInterface|null
    */
   public function getDefaultBlueprintStorage(BlueprintProviderInterface $provider);
 
   /**
    * Get the default blueprint edit template url.
    *
-   * @param \Drupal\entity_template\BlueprintStorageInterface $blueprint_storage
+   * @param BlueprintStorageInterface $blueprint_storage
    * @param string $key
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getDefaultBlueprintEditTemplateUrl(BlueprintStorageInterface $blueprint_storage, string $key): Url;
 
@@ -69,9 +73,9 @@ interface BuilderInterface extends PluginInspectionInterface, ContextAwarePlugin
    * Get the available blueprints for this builder.
    *
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *
-   * @return \Drupal\entity_template\BlueprintInterface[]
+   * @return BlueprintInterface[]
    */
   public function getAvailableBlueprints(array $parameters = [], AccountInterface $account = NULL);
 
@@ -79,16 +83,16 @@ interface BuilderInterface extends PluginInspectionInterface, ContextAwarePlugin
    * Execute the builder.
    *
    * @param array $parameters
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    * @param string $blueprint_key
    *
-   * @return \Drupal\entity_template\BlueprintResult
+   * @return BlueprintResult
    *
    * @throws \InvalidArgumentException
    *   If an invalid blueprint key is provided.
-   * @throws \Drupal\entity_template\Exception\MultipleAvailableBlueprintException
+   * @throws MultipleAvailableBlueprintException
    *   If the builder can't decide on a best blueprint to use.
-   * @throws \Drupal\entity_template\Exception\NoAvailableBlueprintException
+   * @throws NoAvailableBlueprintException
    *   If the builder hasn't got any available blueprints.
    */
   public function execute(array $parameters = [], AccountInterface $account = NULL, $blueprint_key = NULL);
diff --git a/src/Plugin/EntityTemplate/Builder/ConfigTemplateBuilder.php b/src/Plugin/EntityTemplate/Builder/ConfigTemplateBuilder.php
index 1fa41cd..5de4fd1 100644
--- a/src/Plugin/EntityTemplate/Builder/ConfigTemplateBuilder.php
+++ b/src/Plugin/EntityTemplate/Builder/ConfigTemplateBuilder.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;
+use Drupal\entity_template\Entity\TemplateBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -31,7 +32,7 @@ class ConfigTemplateBuilder extends BuilderBase implements ConfigurableDefaultBl
   /**
    * Get the template builder entity.
    *
-   * @return \Drupal\entity_template\Entity\TemplateBuilder
+   * @return TemplateBuilder
    */
   protected function getTemplateBuilder() {
     return $this->entityTypeManager->getStorage('entity_template_builder')
@@ -48,7 +49,7 @@ class ConfigTemplateBuilder extends BuilderBase implements ConfigurableDefaultBl
       $this->getTemplateBuilder()->get('default_blueprint') &&
       ($default_blueprint = $blueprint_storage->load($this->getTemplateBuilder()->get('default_blueprint')))
     ) {
-      /** @var \Drupal\entity_template\Entity\TemplateBlueprint $default_blueprint */
+      /** @var TemplateBlueprint $default_blueprint */
       $default_blueprint->set('is_default', TRUE);
       return $default_blueprint;
     }
diff --git a/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintInterface.php b/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintInterface.php
index e980c58..699b84d 100644
--- a/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintInterface.php
+++ b/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\entity_template\Entity\TemplateBlueprint;
 
 /**
@@ -14,11 +16,11 @@ interface ConfigurableDefaultBlueprintInterface {
   /**
    * Get the default blueprint config.
    *
-   * @return \Drupal\entity_template\Entity\TemplateBlueprint
+   * @return TemplateBlueprint
    *   The default blueprint entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprintConfig() : TemplateBlueprint;
 
diff --git a/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintTrait.php b/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintTrait.php
index ad79226..9ff6ccb 100644
--- a/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintTrait.php
+++ b/src/Plugin/EntityTemplate/Builder/ConfigurableDefaultBlueprintTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Builder;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_template\BlueprintInterface;
+use Drupal\entity_template\BlueprintStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\entity_template\BlueprintEntityAdaptor;
@@ -19,7 +23,7 @@ trait ConfigurableDefaultBlueprintTrait {
   /**
    * Get the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function entityTypeManager() : EntityTypeManagerInterface {
     return $this->entityTypeManager ?: \Drupal::entityTypeManager();
@@ -35,18 +39,18 @@ trait ConfigurableDefaultBlueprintTrait {
   /**
    * Get the default blueprint config.
    *
-   * @return \Drupal\entity_template\Entity\TemplateBlueprint
+   * @return TemplateBlueprint
    *   The default blueprint entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprintConfig() : TemplateBlueprint {
     $blueprint_storage = $this->entityTypeManager()->getStorage('entity_template_blueprint');
     $default_blueprint_id = $this->getPluginId().'.default';
 
     while (true) {
-      /** @var \Drupal\entity_template\Entity\TemplateBlueprint $default_blueprint */
+      /** @var TemplateBlueprint $default_blueprint */
       if ($default_blueprint = $blueprint_storage->load($default_blueprint_id)) {
         // If this blueprint already exists and isn't part of this builder, then
         // try a different name.
@@ -72,11 +76,11 @@ trait ConfigurableDefaultBlueprintTrait {
   /**
    * Get the default blueprint for this builder.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    *   The default blueprint.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprint() {
     return new BlueprintEntityAdaptor($this->getDefaultBlueprintConfig());
@@ -85,13 +89,13 @@ trait ConfigurableDefaultBlueprintTrait {
   /**
    * Get the default blueprint storage.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\BlueprintProvider\BlueprintProviderInterface $provider
+   * @param BlueprintProviderInterface $provider
    *   The blueprint provider.
    *
-   * @return \Drupal\entity_template\BlueprintStorageInterface
+   * @return BlueprintStorageInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDefaultBlueprintStorage(BlueprintProviderInterface $provider) {
     return new BlueprintEntityStorageAdaptor($this->getDefaultBlueprintConfig(), $provider);
@@ -103,8 +107,8 @@ trait ConfigurableDefaultBlueprintTrait {
    * @return array
    *   The operations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAdminOperations() {
     $operations = [];
diff --git a/src/Plugin/EntityTemplate/Component/ComponentInterface.php b/src/Plugin/EntityTemplate/Component/ComponentInterface.php
index cadcabf..77048cb 100644
--- a/src/Plugin/EntityTemplate/Component/ComponentInterface.php
+++ b/src/Plugin/EntityTemplate/Component/ComponentInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,22 +19,22 @@ interface ComponentInterface extends PluginInspectionInterface, ConfigurableInte
   /**
    * Get the label of this plugin.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function label();
 
   /**
    * Get the description of this plugin.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function description();
 
   /**
    * Apply this component to the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\entity_template\TemplateResult $result
+   * @param EntityInterface $entity
+   * @param TemplateResult $result
    */
   public function apply(EntityInterface $entity, TemplateResult $result);
 
diff --git a/src/Plugin/EntityTemplate/Component/DataSelectComponentTrait.php b/src/Plugin/EntityTemplate/Component/DataSelectComponentTrait.php
index cfcdcba..f147fd3 100644
--- a/src/Plugin/EntityTemplate/Component/DataSelectComponentTrait.php
+++ b/src/Plugin/EntityTemplate/Component/DataSelectComponentTrait.php
@@ -17,7 +17,7 @@ trait DataSelectComponentTrait {
   /**
    * The data fetcher service.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;
 
@@ -27,10 +27,10 @@ trait DataSelectComponentTrait {
    * @param string $selector
    *   The selector string.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The selected and filtered data.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    *   If data is missing.
    */
   protected function selectData(string $selector) : TypedDataInterface {
@@ -65,7 +65,7 @@ trait DataSelectComponentTrait {
   /**
    * Get the data fetcher service.
    *
-   * @return \Drupal\typed_data\DataFetcherInterface
+   * @return DataFetcherInterface
    *   The data fetcher service.
    */
   protected function getDataFetcher() : DataFetcherInterface {
@@ -79,7 +79,7 @@ trait DataSelectComponentTrait {
   /**
    * Get the context providing template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    *   The context providing template.
    */
   public abstract function getContextProvidingTemplate() : TemplateInterface;
diff --git a/src/Plugin/EntityTemplate/Component/FieldComponentBase.php b/src/Plugin/EntityTemplate/Component/FieldComponentBase.php
index ca407c3..c3f41f8 100644
--- a/src/Plugin/EntityTemplate/Component/FieldComponentBase.php
+++ b/src/Plugin/EntityTemplate/Component/FieldComponentBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
@@ -11,17 +15,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class FieldComponentBase extends ComponentBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;
 
@@ -45,7 +49,7 @@ abstract class FieldComponentBase extends ComponentBase implements ContainerFact
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(
     array $configuration,
@@ -79,7 +83,7 @@ abstract class FieldComponentBase extends ComponentBase implements ContainerFact
   /**
    * Get the field definition.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    */
   public function getFieldDefinition() {
     return $this->entityFieldManager->getFieldDefinitions($this->getEntityTypeId(), $this->getBundle())[$this->getFieldName()];
@@ -117,10 +121,10 @@ abstract class FieldComponentBase extends ComponentBase implements ContainerFact
   /**
    * Get a sample entity.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSampleEntity() {
     $entity_type = $this->entityTypeManager->getDefinition($this->getEntityTypeId());
diff --git a/src/Plugin/EntityTemplate/Component/FieldDataSelectComponent.php b/src/Plugin/EntityTemplate/Component/FieldDataSelectComponent.php
index f4c8f7e..61b3e10 100644
--- a/src/Plugin/EntityTemplate/Component/FieldDataSelectComponent.php
+++ b/src/Plugin/EntityTemplate/Component/FieldDataSelectComponent.php
@@ -1,6 +1,9 @@
 <?php
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\typed_data\Exception\InvalidArgumentException;
+use Drupal\Core\TypedData\ListDataDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -56,10 +59,10 @@ class FieldDataSelectComponent extends FieldComponentBase implements TemplateCon
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
+   * @param DataFetcherInterface $data_fetcher
    */
   public function __construct(
     array $configuration,
@@ -78,8 +81,8 @@ class FieldDataSelectComponent extends FieldComponentBase implements TemplateCon
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws PluginException
+   * @throws InvalidArgumentException
    */
   public function apply(EntityInterface $entity, TemplateResult $result) {
     $selector = $this->configuration['selector'];
@@ -99,7 +102,7 @@ class FieldDataSelectComponent extends FieldComponentBase implements TemplateCon
   /**
    * Get the massaged value.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The selected and filtered data.
    *
    * @return mixed
@@ -173,11 +176,11 @@ class FieldDataSelectComponent extends FieldComponentBase implements TemplateCon
   /**
    * Check whether the data definition is compatible with this field.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    */
   protected function definitionIsCompatible(DataDefinitionInterface $definition) {
     if ($definition->getDataType() === 'list') {
-      /** @var \Drupal\Core\TypedData\ListDataDefinitionInterface $definition */
+      /** @var ListDataDefinitionInterface $definition */
       // Check the compatability of the item definition.
       $definition = $definition->getItemDefinition();
     }
diff --git a/src/Plugin/EntityTemplate/Component/FieldWidgetInputComponent.php b/src/Plugin/EntityTemplate/Component/FieldWidgetInputComponent.php
index f5939c5..62c6290 100644
--- a/src/Plugin/EntityTemplate/Component/FieldWidgetInputComponent.php
+++ b/src/Plugin/EntityTemplate/Component/FieldWidgetInputComponent.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;
 
+use Drupal\Core\Field\WidgetInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -29,7 +32,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class FieldWidgetInputComponent extends FieldComponentBase implements SwappableComponentInterface {
 
   /**
-   * @var \Drupal\Core\Field\WidgetPluginManager
+   * @var WidgetPluginManager
    */
   protected $widgetManager;
 
@@ -54,10 +57,10 @@ class FieldWidgetInputComponent extends FieldComponentBase implements SwappableC
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   * @param \Drupal\Core\Field\WidgetPluginManager $widget_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
+   * @param WidgetPluginManager $widget_manager
    */
   public function __construct(
     array $configuration,
@@ -120,12 +123,12 @@ class FieldWidgetInputComponent extends FieldComponentBase implements SwappableC
   /**
    * Get the widget for this field definition.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *
-   * @return \Drupal\Core\Field\WidgetInterface
+   * @return WidgetInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   protected function getWidget(FieldDefinitionInterface $field_definition) {
     if (($display = $field_definition->getDisplayOptions('form')) && isset($display['type'])) {
diff --git a/src/Plugin/EntityTemplate/Component/InlineTemplate.php b/src/Plugin/EntityTemplate/Component/InlineTemplate.php
index dbb27dd..3b75f8f 100644
--- a/src/Plugin/EntityTemplate/Component/InlineTemplate.php
+++ b/src/Plugin/EntityTemplate/Component/InlineTemplate.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;
 
+use Drupal\entity_template\TemplateLazyComponentsCollection;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\entity_template\Exception\TemplateException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -48,22 +52,22 @@ class InlineTemplate extends FieldComponentBase implements TemplateContextAwareC
   }
 
   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;
 
   /**
-   * @var \Drupal\entity_template\TemplateLazyComponentsCollection
+   * @var TemplateLazyComponentsCollection
    */
   protected $componentPluginCollection;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
@@ -90,12 +94,12 @@ class InlineTemplate extends FieldComponentBase implements TemplateContextAwareC
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
+   * @param TemplateComponentManager $component_manager
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param ContextHandlerInterface $context_handler
    */
   public function __construct(
     array $configuration,
@@ -127,11 +131,11 @@ class InlineTemplate extends FieldComponentBase implements TemplateContextAwareC
   /**
    * Apply this component to the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\entity_template\TemplateResult $result
+   * @param EntityInterface $entity
+   * @param TemplateResult $result
    */
   public function apply(EntityInterface $entity, TemplateResult $result) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $template_result = $this->execute();
     if ($generated = $template_result->getEntity()) {
       if ($this->getFieldDefinition()->getFieldStorageDefinition()->getCardinality() === 1) {
@@ -171,14 +175,14 @@ class InlineTemplate extends FieldComponentBase implements TemplateContextAwareC
   /**
    * Execute the template.
    *
-   * @return \Drupal\entity_template\TemplateResult
+   * @return TemplateResult
    */
   public function execute() {
     $template_result = new TemplateResult();
     try {
       $entity = $this->createEntity();
 
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $plugin */
+      /** @var ComponentInterface $plugin */
       foreach ($this->getComponents() as $plugin) {
         if ($plugin instanceof ContextAwarePluginInterface) {
           $this->contextHandler->applyContextMapping($plugin, $this->getContextProvidingTemplate()->getContexts());
@@ -241,7 +245,7 @@ class InlineTemplate extends FieldComponentBase implements TemplateContextAwareC
   /**
    * Get the return type label.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function getReturnTypeLabel() {
     return $this->getTypeLabel($this->getReturnType());
@@ -250,7 +254,7 @@ class InlineTemplate extends FieldComponentBase implements TemplateContextAwareC
   /**
    * Get the parent template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getParentTemplate() : ?TemplateInterface {
     return $this->template;
@@ -260,9 +264,9 @@ class InlineTemplate extends FieldComponentBase implements TemplateContextAwareC
   /**
    * Create the entity initially.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException;
+   * @throws TemplateException ;
    */
   protected function createEntity() {
     $target_type_id = $this->getFieldDefinition()->getSetting('target_type');
diff --git a/src/Plugin/EntityTemplate/Component/StringFieldWidgetInputComponent.php b/src/Plugin/EntityTemplate/Component/StringFieldWidgetInputComponent.php
index cb74e03..62c7aaa 100644
--- a/src/Plugin/EntityTemplate/Component/StringFieldWidgetInputComponent.php
+++ b/src/Plugin/EntityTemplate/Component/StringFieldWidgetInputComponent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Component;
 
+use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,12 +23,12 @@ class StringFieldWidgetInputComponent extends FieldWidgetInputComponent implemen
   use TemplateContextAwareComponentTrait;
 
   /**
-   * @var \Drupal\typed_data\PlaceholderResolverInterface
+   * @var PlaceholderResolverInterface
    */
   protected $placeholderResolver;
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
@@ -56,15 +57,15 @@ class StringFieldWidgetInputComponent extends FieldWidgetInputComponent implemen
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type manager.
-   * @param \Drupal\Core\Field\WidgetPluginManager $widget_manager
+   * @param WidgetPluginManager $widget_manager
    *   The widget manager.
-   * @param \Drupal\typed_data\PlaceholderResolverInterface $placeholder_resolver
+   * @param PlaceholderResolverInterface $placeholder_resolver
    *   The placeholder resolver service.
    */
   public function __construct(
diff --git a/src/Plugin/EntityTemplate/Component/SwappableComponentInterface.php b/src/Plugin/EntityTemplate/Component/SwappableComponentInterface.php
index 9c3836b..f096069 100644
--- a/src/Plugin/EntityTemplate/Component/SwappableComponentInterface.php
+++ b/src/Plugin/EntityTemplate/Component/SwappableComponentInterface.php
@@ -21,9 +21,9 @@ interface SwappableComponentInterface extends ComponentInterface {
   /**
    * Swap configuration to another component.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $component
+   * @param ComponentInterface $component
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @return ComponentInterface
    */
   public function swapConfigurationTo(ComponentInterface $component): ComponentInterface;
 
diff --git a/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentInterface.php b/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentInterface.php
index 70066e0..68278c7 100644
--- a/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentInterface.php
+++ b/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentInterface.php
@@ -9,7 +9,7 @@ interface TemplateContextAwareComponentInterface {
   /**
    * Set the template.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
+   * @param TemplateInterface $template
    *
    * @return static
    */
@@ -18,14 +18,14 @@ interface TemplateContextAwareComponentInterface {
   /**
    * Get the template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate() : TemplateInterface;
 
   /**
    * Get the context providing template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getContextProvidingTemplate() : TemplateInterface;
 
diff --git a/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentTrait.php b/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentTrait.php
index 4e8c7c9..e65cc98 100644
--- a/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentTrait.php
+++ b/src/Plugin/EntityTemplate/Component/TemplateContextAwareComponentTrait.php
@@ -14,7 +14,7 @@ trait TemplateContextAwareComponentTrait {
   /**
    * Set the template.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
+   * @param TemplateInterface $template
    *
    * @return static
    */
@@ -26,7 +26,7 @@ trait TemplateContextAwareComponentTrait {
   /**
    * Get the template that this component is aware of.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getTemplate() : TemplateInterface {
     return $this->template;
@@ -35,7 +35,7 @@ trait TemplateContextAwareComponentTrait {
   /**
    * Get the context providing template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getContextProvidingTemplate() : TemplateInterface {
     return $this->getTemplate()->getContextProvidingTemplate();
diff --git a/src/Plugin/EntityTemplate/Template/BlueprintTemplate.php b/src/Plugin/EntityTemplate/Template/BlueprintTemplate.php
index 6c4abec..4805edc 100644
--- a/src/Plugin/EntityTemplate/Template/BlueprintTemplate.php
+++ b/src/Plugin/EntityTemplate/Template/BlueprintTemplate.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;
 
+use Drupal\entity_template\BlueprintInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Component\Plugin\Context\ContextInterface as ComponentContextInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\PluginException;
@@ -36,17 +39,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class BlueprintTemplate extends Template implements BlueprintTemplateInterface {
 
   /**
-   * @var \Drupal\entity_template\BlueprintInterface
+   * @var BlueprintInterface
    */
   protected $blueprint;
 
   /**
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $conditionPluginCollection;
 
   /**
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
@@ -73,12 +76,12 @@ class BlueprintTemplate extends Template implements BlueprintTemplateInterface {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_generator
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfo $entity_type_bundle_info
+   * @param ContextHandlerInterface $context_handler
+   * @param ConditionManager $condition_manager
+   * @param TemplateComponentManager $component_manager
+   * @param UuidInterface $uuid_generator
    */
   public function __construct(
     array $configuration,
@@ -110,7 +113,7 @@ class BlueprintTemplate extends Template implements BlueprintTemplateInterface {
   /**
    * Get the blueprint.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    */
   public function getBlueprint() {
     return $this->blueprint;
@@ -154,7 +157,7 @@ class BlueprintTemplate extends Template implements BlueprintTemplateInterface {
   /**
    * Get all the context definition interfaces
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   public function getContextDefinitions() {
     return $this->getBlueprint()->getContextDefinitions() + parent::getContextDefinitions();
@@ -174,7 +177,7 @@ class BlueprintTemplate extends Template implements BlueprintTemplateInterface {
   }
 
   /**
-   * @param \Drupal\entity_template\BlueprintResult $result
+   * @param BlueprintResult $result
    *
    * @return static
    */
@@ -249,7 +252,7 @@ class BlueprintTemplate extends Template implements BlueprintTemplateInterface {
    *
    * @return string
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException
+   * @throws TemplateException
    */
   protected function getTargetEntityBundle() {
     $return_type = $this->getBlueprint()->getBuilder()->getReturnType();
@@ -275,7 +278,7 @@ class BlueprintTemplate extends Template implements BlueprintTemplateInterface {
   /**
    * Get the conditions of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getConditions() {
     if (!$this->conditionPluginCollection) {
diff --git a/src/Plugin/EntityTemplate/Template/BlueprintTemplateInterface.php b/src/Plugin/EntityTemplate/Template/BlueprintTemplateInterface.php
index c4094ff..7045299 100644
--- a/src/Plugin/EntityTemplate/Template/BlueprintTemplateInterface.php
+++ b/src/Plugin/EntityTemplate/Template/BlueprintTemplateInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;
 
+use Drupal\entity_template\BlueprintInterface;
 use Drupal\entity_template\BlueprintResult;
 
 interface BlueprintTemplateInterface extends ConditionalTemplateInterface {
@@ -9,12 +10,12 @@ interface BlueprintTemplateInterface extends ConditionalTemplateInterface {
   /**
    * Get the blueprint.
    *
-   * @return \Drupal\entity_template\BlueprintInterface
+   * @return BlueprintInterface
    */
   public function getBlueprint();
 
   /**
-   * @param \Drupal\entity_template\BlueprintResult $result
+   * @param BlueprintResult $result
    *
    * @return static
    */
diff --git a/src/Plugin/EntityTemplate/Template/ConditionalTemplateInterface.php b/src/Plugin/EntityTemplate/Template/ConditionalTemplateInterface.php
index 7c5c5d7..e1fe839 100644
--- a/src/Plugin/EntityTemplate/Template/ConditionalTemplateInterface.php
+++ b/src/Plugin/EntityTemplate/Template/ConditionalTemplateInterface.php
@@ -2,13 +2,14 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;
 
-
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
 interface ConditionalTemplateInterface extends TemplateInterface {
 
   /**
    * Get the components of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getConditions();
 
@@ -33,7 +34,7 @@ interface ConditionalTemplateInterface extends TemplateInterface {
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @return ComponentInterface
    */
   public function getCondition($id);
 
diff --git a/src/Plugin/EntityTemplate/Template/SubTemplateInterface.php b/src/Plugin/EntityTemplate/Template/SubTemplateInterface.php
index c4149bf..6465870 100644
--- a/src/Plugin/EntityTemplate/Template/SubTemplateInterface.php
+++ b/src/Plugin/EntityTemplate/Template/SubTemplateInterface.php
@@ -7,7 +7,7 @@ interface SubTemplateInterface extends TemplateInterface {
   /**
    * Get the parent template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getParentTemplate() : ?TemplateInterface;
 
diff --git a/src/Plugin/EntityTemplate/Template/SubTemplateTrait.php b/src/Plugin/EntityTemplate/Template/SubTemplateTrait.php
index 74d7be4..bb7db6b 100644
--- a/src/Plugin/EntityTemplate/Template/SubTemplateTrait.php
+++ b/src/Plugin/EntityTemplate/Template/SubTemplateTrait.php
@@ -7,7 +7,7 @@ trait SubTemplateTrait {
   /**
    * Get the parent template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   abstract public function getParentTemplate() : ?TemplateInterface;
 
@@ -21,7 +21,7 @@ trait SubTemplateTrait {
   /**
    * Get the root template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getRootTemplate() {
     $parent = $this;
@@ -37,10 +37,10 @@ trait SubTemplateTrait {
   /**
    * Get the template that provides the contexts.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   public function getContextProvidingTemplate() : TemplateInterface{
-    /** @var \Drupal\entity_template\Plugin\EntityTemplate\Template\SubTemplateInterface $template */
+    /** @var SubTemplateInterface $template */
     $template = $this;
 
     do {
diff --git a/src/Plugin/EntityTemplate/Template/Template.php b/src/Plugin/EntityTemplate/Template/Template.php
index 03b4f05..7f6f927 100644
--- a/src/Plugin/EntityTemplate/Template/Template.php
+++ b/src/Plugin/EntityTemplate/Template/Template.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;
 
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\entity_template\BlueprintInterface;
+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Context\ContextInterface as ComponentContextInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\PluginException;
@@ -42,32 +47,32 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
   protected $extraContexts = [];
 
   /**
-   * @var \Drupal\Component\Plugin\LazyPluginCollection
+   * @var LazyPluginCollection
    */
   protected $componentPluginCollection;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;
 
   /**
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
-   * @var \Drupal\entity_template\TemplateComponentManager
+   * @var TemplateComponentManager
    */
   protected $componentManager;
 
   /**
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
@@ -90,12 +95,12 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
   /**
    * Template constructor.
    *
-   * @param \Drupal\entity_template\BlueprintInterface $blueprint
+   * @param BlueprintInterface $blueprint
    * @param array $configuration
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
-   * @param \Drupal\entity_template\TemplateComponentManager $component_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ContextHandlerInterface $context_handler
+   * @param ConditionManager $condition_manager
+   * @param TemplateComponentManager $component_manager
    */
   public function __construct(
     $configuration,
@@ -203,10 +208,10 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
   }
 
   /**
- * Get all the context definition interfaces
- *
- * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
- */
+   * Get all the context definition interfaces
+   *
+   * @return ContextDefinitionInterface[]
+   */
   public function getContextDefinitions() {
     return $this->getExtraContextDefinitions();
   }
@@ -214,7 +219,7 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
   /**
    * Get extra context definitions.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    */
   protected function getExtraContextDefinitions() {
     return [];
@@ -225,7 +230,7 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    */
   public function getContextDefinition($name) {
     $definitions = $this->getContextDefinitions();
@@ -242,7 +247,7 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
    *
    * @param $name
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    */
   protected function getExtraContextDefinition($name) {
     $definitions = $this->getExtraContextDefinitions();
@@ -264,7 +269,7 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
   /**
    * Execute the template.
    *
-   * @return \Drupal\entity_template\TemplateResult
+   * @return TemplateResult
    */
   public function execute() {
     $this->prepareContexts();
@@ -273,7 +278,7 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
     try {
       $entity = $this->createEntity();
 
-      /** @var \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface $plugin */
+      /** @var ComponentInterface $plugin */
       foreach ($this->getComponents() as $plugin) {
         if ($plugin instanceof ContextAwarePluginInterface) {
           $this->contextHandler->applyContextMapping($plugin, $this->getContexts());
@@ -300,9 +305,9 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
   /**
    * Create the entity initially.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException;
+   * @throws TemplateException ;
    */
   protected function createEntity() {
     $target_type_id = $this->getTargetEntityTypeId();
@@ -333,7 +338,7 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
   /**
    * Get the target entity type id.
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException
+   * @throws TemplateException
    */
   abstract protected function getTargetEntityTypeId();
 
@@ -342,7 +347,7 @@ abstract class Template extends ContextAwarePluginBase implements TemplateInterf
    *
    * @return string
    *
-   * @throws \Drupal\entity_template\Exception\TemplateException
+   * @throws TemplateException
    */
   abstract protected function getTargetEntityBundle();
 
diff --git a/src/Plugin/EntityTemplate/Template/TemplateComponentTrait.php b/src/Plugin/EntityTemplate/Template/TemplateComponentTrait.php
index bb88198..705a81b 100644
--- a/src/Plugin/EntityTemplate/Template/TemplateComponentTrait.php
+++ b/src/Plugin/EntityTemplate/Template/TemplateComponentTrait.php
@@ -2,22 +2,25 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;
 
+use Drupal\entity_template\TemplateComponentManager;
+use Drupal\Component\Uuid\UuidInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\entity_template\TemplateLazyComponentsCollection;
 
 trait TemplateComponentTrait {
 
   /**
-   * @var \Drupal\entity_template\TemplateComponentManager;
+   * @var TemplateComponentManager ;
    */
   protected $componentManager;
 
   /**
-   * @var \Drupal\entity_template\TemplateLazyComponentsCollection
+   * @var TemplateLazyComponentsCollection
    */
   protected $componentPluginCollection;
 
   /**
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
@@ -27,7 +30,7 @@ trait TemplateComponentTrait {
   protected $configuration;
 
   /**
-   * @return \Drupal\Component\Uuid\UuidInterface
+   * @return UuidInterface
    */
   protected function uuidGenerator() {
     if (!$this->uuidGenerator) {
@@ -37,7 +40,7 @@ trait TemplateComponentTrait {
   }
 
   /**
-   * @return \Drupal\entity_template\TemplateComponentManager
+   * @return TemplateComponentManager
    */
   protected function componentManager() {
     if (!$this->componentManager) {
@@ -50,7 +53,7 @@ trait TemplateComponentTrait {
   /**
    * Get the template.
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @return TemplateInterface
    */
   protected function template() {
     return $this;
@@ -59,7 +62,7 @@ trait TemplateComponentTrait {
   /**
    * Get the components of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getComponents() {
     if (!$this->componentPluginCollection) {
diff --git a/src/Plugin/EntityTemplate/Template/TemplateInterface.php b/src/Plugin/EntityTemplate/Template/TemplateInterface.php
index bdc246c..54d7575 100644
--- a/src/Plugin/EntityTemplate/Template/TemplateInterface.php
+++ b/src/Plugin/EntityTemplate/Template/TemplateInterface.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_template\Plugin\EntityTemplate\Template;
 
+use Drupal\entity_template\TemplateResult;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -27,7 +32,7 @@ interface TemplateInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Find out whether this template applies in a given blueprint.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata|null $cacheable_metadata
+   * @param CacheableMetadata|null $cacheable_metadata
    *   The cacheable metadata.
    *
    * @return boolean
@@ -38,14 +43,14 @@ interface TemplateInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Execute the template.
    *
-   * @return \Drupal\entity_template\TemplateResult
+   * @return TemplateResult
    */
   public function execute();
 
   /**
    * Get the components of the template.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    */
   public function getComponents();
 
@@ -70,7 +75,7 @@ interface TemplateInterface extends PluginInspectionInterface, ConfigurableInter
    *
    * @param $id
    *
-   * @return \Drupal\entity_template\Plugin\EntityTemplate\Component\ComponentInterface
+   * @return ComponentInterface
    */
   public function getComponent($id);
 
@@ -84,7 +89,7 @@ interface TemplateInterface extends PluginInspectionInterface, ConfigurableInter
   /**
    * Get the return type label.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function getReturnTypeLabel();
 
@@ -100,7 +105,7 @@ interface TemplateInterface extends PluginInspectionInterface, ConfigurableInter
    *
    * @param bool $sample
    *
-   * @return \Drupal\Core\Plugin\Context\ContextInterface[]
+   * @return ContextInterface[]
    */
   public function getTemplateContexts($sample = FALSE);
 
diff --git a/src/SampleContextValueTrait.php b/src/SampleContextValueTrait.php
index 0ff73ff..5969662 100644
--- a/src/SampleContextValueTrait.php
+++ b/src/SampleContextValueTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\ck_api\Data\Instance\Instance;
 use Drupal\ck_api\Data\TypedData\InstanceSchemaDataDefinition;
 use Drupal\ck_api\Plugin\DataType\InstanceAdaptorInterface;
@@ -17,7 +20,7 @@ trait SampleContextValueTrait {
   /**
    * Get the entity type manager
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function entityTypeManager() {
     if (!$this->entityTypeManager) {
@@ -30,7 +33,7 @@ trait SampleContextValueTrait {
   /**
    * Get the entity type bundle infor manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    */
   protected function entityTypeBundleInfo() {
     if (empty($this->entityTypeBundleInfo)) {
@@ -43,7 +46,7 @@ trait SampleContextValueTrait {
   /**
    * Get the field type manager.
    *
-   * @return \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @return FieldTypePluginManagerInterface
    */
   protected function fieldTypeManager() {
     if (!$this->fieldTypePluginManager) {
diff --git a/src/TemplateBlueprintProviderManager.php b/src/TemplateBlueprintProviderManager.php
index 3496423..cd89ef9 100644
--- a/src/TemplateBlueprintProviderManager.php
+++ b/src/TemplateBlueprintProviderManager.php
@@ -12,8 +12,8 @@ class TemplateBlueprintProviderManager extends DefaultPluginManager  {
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
diff --git a/src/TemplateBuilderManager.php b/src/TemplateBuilderManager.php
index 0911d10..c821079 100644
--- a/src/TemplateBuilderManager.php
+++ b/src/TemplateBuilderManager.php
@@ -17,8 +17,8 @@ class TemplateBuilderManager extends DefaultPluginManager {
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
diff --git a/src/TemplateComponentManager.php b/src/TemplateComponentManager.php
index 215c71d..33e4df2 100644
--- a/src/TemplateComponentManager.php
+++ b/src/TemplateComponentManager.php
@@ -12,8 +12,8 @@ class TemplateComponentManager extends DefaultPluginManager {
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
diff --git a/src/TemplateLazyComponentsCollection.php b/src/TemplateLazyComponentsCollection.php
index 360e584..4417e0f 100644
--- a/src/TemplateLazyComponentsCollection.php
+++ b/src/TemplateLazyComponentsCollection.php
@@ -16,15 +16,15 @@ use Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface;
 class TemplateLazyComponentsCollection extends DefaultLazyPluginCollection {
 
   /**
-   * @var \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface
+   * @var TemplateInterface
    */
   protected $template;
 
   /**
    * TemplateLazyComponentsCollection constructor.
    *
-   * @param \Drupal\entity_template\Plugin\EntityTemplate\Template\TemplateInterface $template
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param TemplateInterface $template
+   * @param PluginManagerInterface $manager
    * @param array $configurations
    */
   public function __construct(TemplateInterface $template, PluginManagerInterface $manager, array $configurations = []) {
diff --git a/src/TemplateManager.php b/src/TemplateManager.php
index 3dafa32..bcba368 100644
--- a/src/TemplateManager.php
+++ b/src/TemplateManager.php
@@ -12,8 +12,8 @@ class TemplateManager extends DefaultPluginManager {
    * TemplateBuilderManager constructor.
    *
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
     parent::__construct(
diff --git a/src/TemplateResult.php b/src/TemplateResult.php
index 93e40c9..8ca8265 100644
--- a/src/TemplateResult.php
+++ b/src/TemplateResult.php
@@ -8,24 +8,24 @@ use Drupal\Core\Entity\EntityInterface;
 class TemplateResult {
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
-   * @var string[]|\Drupal\Component\Render\MarkupInterface[]
+   * @var string[]|MarkupInterface[]
    */
   protected $messages = [];
 
   /**
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity(): ?EntityInterface {
     return $this->entity;
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return static
    */
@@ -38,7 +38,7 @@ class TemplateResult {
   /**
    * Get all messages.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[]|string[]
+   * @return MarkupInterface[]|string[]
    */
   public function getMessages() {
     return $this->messages;
@@ -47,7 +47,7 @@ class TemplateResult {
   /**
    * Add a message
    *
-   * @param string|\Drupal\Component\Render\MarkupInterface $message
+   * @param string|MarkupInterface $message
    *
    * @return static
    */
diff --git a/src/TypeLabelTrait.php b/src/TypeLabelTrait.php
index de52ed0..960b5b9 100644
--- a/src/TypeLabelTrait.php
+++ b/src/TypeLabelTrait.php
@@ -8,24 +8,26 @@
 
 namespace Drupal\entity_template;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 trait TypeLabelTrait {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Get the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   protected function entityTypeManager() {
     return $this->entityTypeManager;
@@ -34,7 +36,7 @@ trait TypeLabelTrait {
   /**
    * Get the entity type bundle info.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    */
   protected function entityTypeBundleInfo() {
     return $this->entityTypeBundleInfo;
