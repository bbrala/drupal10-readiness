modules/contrib/component_blocks/component_blocks.module
modules/contrib/component_blocks/src/Plugin/Block/ComponentBlock.php
modules/contrib/component_blocks/src/Plugin/Deriver/ComponentBlockBlockDeriver.php
modules/contrib/component_blocks/tests/modules/component_blocks_test/src/TestNodeContext.php
modules/contrib/component_blocks/tests/src/Kernel/ComponentBlockDiscoveryTest.php
modules/contrib/component_blocks/tests/src/Kernel/ComponentBlocksOutputTest.php

4 files with changes
====================

1) modules/contrib/component_blocks/tests/src/Kernel/ComponentBlocksOutputTest.php:50

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installConfig(['node', 'filter']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/component_blocks/tests/modules/component_blocks_test/src/TestNodeContext.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * Sets value of Node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Value for Node.
    */
   public function setNode(NodeInterface $node): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/component_blocks/src/Plugin/Deriver/ComponentBlockBlockDeriver.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
    *
    * @param \Drupal\ui_patterns\UiPatternsManager $pluginManager
    *   Plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(UiPatternsManager $pluginManager, EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/component_blocks/src/Plugin/Block/ComponentBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\component_blocks\Plugin\Block;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockBase;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   private $contextHandler;

@@ @@
   /**
    * Formatter manager.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   private $formatterPluginManager;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   private $token;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   Plugin definition.
    * @param \Drupal\ui_patterns\UiPatternsManager $uiPatternsManager
    *   Plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $contextHandler
+   * @param ContextHandlerInterface $contextHandler
    *   Context handler.
-   * @param \Drupal\Core\Field\FormatterPluginManager $formatterPluginManager
+   * @param FormatterPluginManager $formatterPluginManager
    *   Formatter manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(
@@ @@
   public function build() {
     $definition = $this->uiPatternsManager()->getDefinition($this->pluginDefinition['ui_pattern_id']);
     $context = [];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getContextValue('entity');
     $view_builder = $this->entityTypeManager->getViewBuilder($entity->getEntityTypeId());
     $metadata = new BubbleableMetadata();
@@ @@
     ];
     $contexts = $this->contextHandler()->getMatchingContexts($form_state->getTemporaryValue('gathered_contexts') ?: [], $this->getContextDefinition('entity'));
     $context = reset($contexts);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $sample_entity */
+    /** @var ContentEntityInterface $sample_entity */
     $sample_entity = $context->getContextData()->getValue();
     $fields = array_map(function (FieldDefinitionInterface $field) {
       return $field->getLabel();
@@ @@
         $contexts = $this->contextHandler()->getMatchingContexts($this->getAvailableContexts($form_state->getBuildInfo()['args'][0]), $this->getContextDefinition('entity'));
       }
       $context = reset($contexts);
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $sample_entity */
+      /** @var ContentEntityInterface $sample_entity */
       $sample_entity = $context->getContextData()->getValue();
       $field_definition = $sample_entity->getFieldDefinition($configuration['source']);
       $formatter_configuration = array_intersect_key($configuration, ['type' => TRUE, 'settings' => TRUE]) + ['label' => 'hidden'];
@@ @@
    *
    * @param array $parents
    *   The #parents of the element representing the formatter.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array|null
@@ @@
   /**
    * Returns an array of applicable formatter options for a field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return array
@@ @@
    *
    * In some AJAX contexts, the constructor is not called.
    *
-   * @return \Drupal\Core\Field\FormatterPluginManager
+   * @return FormatterPluginManager
    *   Manager.
    */
   protected function formatterPluginManager() : FormatterPluginManager {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

