modules/contrib/inline_entity_form/inline_entity_form.api.php
modules/contrib/inline_entity_form/inline_entity_form.module
modules/contrib/inline_entity_form/src/Element/InlineEntityForm.php
modules/contrib/inline_entity_form/src/ElementSubmit.php
modules/contrib/inline_entity_form/src/Form/EntityInlineForm.php
modules/contrib/inline_entity_form/src/Form/NodeInlineForm.php
modules/contrib/inline_entity_form/src/InlineFormInterface.php
modules/contrib/inline_entity_form/src/MigrationHelper.php
modules/contrib/inline_entity_form/src/Plugin/Field/FieldWidget/InlineEntityFormBase.php
modules/contrib/inline_entity_form/src/Plugin/Field/FieldWidget/InlineEntityFormComplex.php
modules/contrib/inline_entity_form/src/Plugin/Field/FieldWidget/InlineEntityFormSimple.php
modules/contrib/inline_entity_form/src/Plugin/migrate/process/InlineFormEntityFieldInstanceSettings.php
modules/contrib/inline_entity_form/src/ReferenceUpgrader.php
modules/contrib/inline_entity_form/src/TranslationHelper.php
modules/contrib/inline_entity_form/src/WidgetSubmit.php
modules/contrib/inline_entity_form/tests/fixtures/drupal7-small.php
modules/contrib/inline_entity_form/tests/modules/inline_entity_form_test/src/Entity/EntityTestWithoutBundle.php
modules/contrib/inline_entity_form/tests/modules/inline_entity_form_test/src/IefTest.php
modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/ComplexSimpleWidgetTest.php
modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/ComplexWidgetRevisionsTest.php
modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/ComplexWidgetTest.php
modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/ElementWebTest.php
modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/InlineEntityFormTestBase.php
modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/SimpleWidgetTest.php
modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/TranslationTest.php
modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateFieldInstanceTest.php
modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateFieldInstanceWidgetSettingsTest.php
modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateFieldTest.php
modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateTestBase.php

21 files with changes
=====================

1) modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateTestBase.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->loadFixture($this->getFixtureFilePath());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateFieldTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->executeMigration('d7_field');
   }
@@ @@
   protected function assertEntity($id, $expected_type, $expected_translatable, $expected_cardinality) {
     list ($expected_entity_type, $expected_name) = explode('.', $id);

-    /** @var \Drupal\field\FieldStorageConfigInterface $field */
+    /** @var FieldStorageConfigInterface $field */
     $field = FieldStorageConfig::load($id);
     $this->assertInstanceOf(FieldStorageConfigInterface::class, $field);
     $this->assertEquals($expected_name, $field->getName());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateFieldInstanceWidgetSettingsTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('node');
     $this->installEntitySchema('node');
@@ @@
    *   The expected bundle to which the display settings are attached.
    */
   protected function assertEntity($id, $expected_entity_type, $expected_bundle) {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity */
+    /** @var EntityFormDisplayInterface $entity */
     $entity = EntityFormDisplay::load($id);
     $this->assertInstanceOf(EntityFormDisplayInterface::class, $entity);
-    $this->assertIdentical($expected_entity_type, $entity->getTargetEntityTypeId());
-    $this->assertIdentical($expected_bundle, $entity->getTargetBundle());
+    $this->assertSame($expected_entity_type, $entity->getTargetEntityTypeId());
+    $this->assertSame($expected_bundle, $entity->getTargetBundle());
   }

   /**
@@ @@
   protected function assertComponent($display_id, $component_id, $widget_type, $weight) {
     $component = EntityFormDisplay::load($display_id)->getComponent($component_id);
     $this->assertIsArray($component);
-    $this->assertIdentical($widget_type, $component['type']);
-    $this->assertIdentical($weight, $component['weight']);
+    $this->assertSame($widget_type, $component['type']);
+    $this->assertSame($weight, $component['weight']);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/inline_entity_form/tests/src/Kernel/Migrate/MigrateFieldInstanceTest.php:50

    ---------- begin diff ----------
@@ @@
   protected function assertEntity($id, $expected_label, $expected_field_type, $is_required, $expected_translatable) {
     list ($expected_entity_type, $expected_bundle, $expected_name) = explode('.', $id);

-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::load($id);
     $this->assertInstanceOf(FieldConfigInterface::class, $field);
     $this->assertEquals($expected_label, $field->label());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/TranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\inline_entity_form\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\node\Entity\Node;

 /**
@@ @@

     // Allow referencing existing entities.
     $form_display_storage = $this->container->get('entity_type.manager')->getStorage('entity_form_display');
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+    /** @var EntityFormDisplayInterface $display */
     $display = $form_display_storage->load('node.ief_test_complex.default');
     $component = $display->getComponent('multi');
     $component['settings']['allow_existing'] = TRUE;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/SimpleWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\inline_entity_form\FunctionalJavascript;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\NodeInterface;
@@ @@
       2 => 2,
       FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED => 3,
     ];
-    /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+    /** @var FieldStorageConfigInterface $field_storage */
     $field_storage = $this->fieldStorageConfigStorage->load('node.single');

     foreach ($cardinality_options as $cardinality => $number_of_items) {
@@ @@
   /**
    * Tests that user only has access to the their own nodes.
    *
-   * @param \Drupal\node\NodeInterface $host_node
+   * @param NodeInterface $host_node
    *   The node of the type of ief_simple_single.
    * @param int $number_of_items
    *   The number of entity reference values in the "single" field.
@@ @@
     $edit = [];
     // Loop through an update all child node titles.
     while ($delta < $number_of_items) {
-      /** @var \Drupal\node\Entity\Node $child_node */
+      /** @var Node $child_node */
       $child_node = $host_node->single[$delta]->entity;
       $new_titles[$delta] = $child_node->label() . ' - updated';
       $edit["single[$delta][inline_entity_form][title][0][value]"] = $new_titles[$delta];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/InlineEntityFormTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\inline_entity_form\FunctionalJavascript;

+use Drupal\user\Entity\User;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Behat\Mink\Element\NodeElement;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * User with permissions to create content.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * Field config storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorage
+   * @var ConfigEntityStorage
    */
   protected $fieldStorageConfigStorage;

@@ @@
   /**
    * Field config storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $fieldConfigStorage;

@@ @@
    * @param string $title
    *   The title of the row to check.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The <td> element containing the label for the IEF row.
    */
   protected function assertRowByTitle(string $title) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/ComplexWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\inline_entity_form\FunctionalJavascript;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Field\FieldConfigInterface;
 use Behat\Mink\Element\NodeElement;
 use Drupal\node\Entity\Node;
 use Drupal\node\NodeInterface;
@@ @@
   /**
    * Entity form display storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $entityFormDisplayStorage;

@@ @@
   /**
    * Checks that nested IEF entity references can be edited and saved.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Top level node of type ief_test_nested1 to check.
    */
   protected function checkNestedNodeEditing(NodeInterface $node) {
@@ @@
    *   The value to set.
    */
   protected function updateSetting(string $name, $value) {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+    /** @var EntityFormDisplayInterface $display */
     $display = $this->entityFormDisplayStorage->load('node.ief_test_complex.default');
     $component = $display->getComponent('multi');
     $component['settings'][$name] = $value;
@@ @@
   protected function setupNestedComplexForm(bool $required) {
     $assert_session = $this->assertSession();
     $page = $this->getSession()->getPage();
-    /** @var \Drupal\Core\Field\FieldConfigInterface $ief_test_nested1 */
+    /** @var FieldConfigInterface $ief_test_nested1 */
     $this->fieldConfigStorage->load('node.ief_test_nested1.test_ref_nested1')
       ->setRequired($required)
       ->save();
-    /** @var \Drupal\Core\Field\FieldConfigInterface $ief_test_nested2 */
+    /** @var FieldConfigInterface $ief_test_nested2 */
     $this->fieldConfigStorage
       ->load('node.ief_test_nested2.test_ref_nested2')
       ->setRequired($required)
@@ @@
   /**
    * Checks if nested nodes for ief_test_nested1 content are created.
    *
-   * @param \Drupal\node\NodeInterface $top_level_node
+   * @param NodeInterface $top_level_node
    *   The top level node.
-   * @param \Drupal\node\NodeInterface $nested_node
+   * @param NodeInterface $nested_node
    *   The second level node.
-   * @param \Drupal\node\NodeInterface $double_nested_node
+   * @param NodeInterface $double_nested_node
    *   The the third level node.
    */
   protected function checkNestedNodes(NodeInterface $top_level_node, NodeInterface $nested_node, NodeInterface $double_nested_node) {
@@ @@
    * @param string $xpath
    *   The XPath.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The element.
    */
   public function elementWithXpath(string $xpath): NodeElement {
@@ @@
    * @param int $timeout
    *   The timeout in milliseconds.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The element.
    */
   public function waitForXpath(string $xpath, int $timeout = 10000): NodeElement {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/ComplexWidgetRevisionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\inline_entity_form\FunctionalJavascript;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 /**
  * IEF complex entity reference revisions tests.
  *
@@ @@
   /**
    * Entity form display storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $entityFormDisplayStorage;

@@ @@
   /**
    * Data provider for ::testRevisionsAtDepth.
    */
-  public function testRevisionsAtDepthDataProvider(): array {
+  public function revisionsAtDepthDataProvider(): array {
     return [
       [FALSE],
       [TRUE],
@@ @@
   /**
    * Tests saving entity reference revisions' field types at depth.
    *
-   * @dataProvider testRevisionsAtDepthDataProvider
+   * @dataProvider revisionsAtDepthDataProvider
    */
   public function testRevisionsAtDepth(bool $inner_widget_adds_revisions) {
     $level_2_display_config = $this->entityFormDisplayStorage->load('node.err_level_2.default');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/inline_entity_form/tests/src/FunctionalJavascript/ComplexSimpleWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\inline_entity_form\FunctionalJavascript;

+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;

 /**
@@ @@
     $first_title_field_xpath = $this->getXpathForNthInputByLabelText('Title', 1);
     $outer_title_field_xpath = $this->getXpathForNthInputByLabelText('Title', 2);
     $inner_title_field_xpath = $this->getXpathForNthInputByLabelText('Title', 3);
-    /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+    /** @var FieldStorageConfigInterface $field_storage */
     $field_storage = $this->fieldStorageConfigStorage->load('node.ief_complex_outer');
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     $field_config = $this->fieldConfigStorage->load('node.ief_complex_simple.ief_complex_outer');
     foreach ($outer_required_options as $outer_required_option) {
       $field_config->setRequired($outer_required_option);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/inline_entity_form/src/WidgetSubmit.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\inline_entity_form\Element\InlineEntityForm;

@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function attach(&$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function doSubmit(array $form, FormStateInterface $form_state) {
@@ @@
       $widget_state += ['entities' => [], 'delete' => []];
       foreach ($widget_state['entities'] as $delta => &$entity_item) {
         if (!empty($entity_item['entity']) && !empty($entity_item['needs_save'])) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entity = $entity_item['entity'];
           $handler = InlineEntityForm::getInlineFormHandler($entity->getEntityTypeId());
           $referenceUpgrader->upgradeEntityReferences($entity);
@@ @@
         }
       }

-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entities */
+      /** @var ContentEntityInterface $entities */
       foreach ($widget_state['delete'] as $entity) {
         $entity->delete();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/inline_entity_form/src/TranslationHelper.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Prepares the inline entity for translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The inline entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The prepared entity.
    *
    * @see \Drupal\Core\Entity\ContentEntityForm::initFormLangcodes()
@@ @@
    * Called on submit to allow the user to select a different language through
    * the langcode form element, which is then transferred to form state.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ @@
    * If the root entity is being translated, then all of the inline entities
    * are candidates for translating as well.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/inline_entity_form/src/Plugin/Field/FieldWidget/InlineEntityFormSimple.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
     $element['inline_entity_form'] = $this->getInlineEntityForm($op, $bundle, $langcode, $delta, $parents, $entity);

     if ($op == 'edit') {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (!$entity->access('update')) {
         // The user isn't allowed to edit the entity, but still needs to see
         // it, to be able to reorder values.
@@ @@
     $values = [];
     foreach ($items as $delta => $value) {
       if ($element = NestedArray::getValue($form, [$field_name, 'widget', $delta])) {
-        /** @var \Drupal\Core\Entity\EntityInterface $entity */
+        /** @var EntityInterface $entity */
         $entity = $element['inline_entity_form']['#entity'];
         $weight = isset($submitted_values[$delta]['_weight']) ? $submitted_values[$delta]['_weight'] : 0;
         $values[$weight] = ['entity' => $entity];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/inline_entity_form/src/Plugin/Field/FieldWidget/InlineEntityFormComplex.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Tags;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Selection Plugin Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionManager;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_manager
+   * @param SelectionPluginManagerInterface $selection_manager
    *   The selection plugin manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, ModuleHandlerInterface $module_handler, SelectionPluginManagerInterface $selection_manager) {
@@ @@
     foreach ($entities as $key => $value) {
       // Data used by inline-entity-form-entity-table.html.twig.
       // @see template_preprocess_inline_entity_form_entity_table()
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $value['entity'];
       $element['entities'][$key]['#label'] = $this->inlineFormHandler->getEntityLabel($value['entity']);
       $element['entities'][$key]['#entity'] = $value['entity'];
@@ @@
             'target_type' => $element['#target_type'],
             'handler' => $element['#selection_handler'],
           ] + $element['#selection_settings'];
-          /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $handler */
+          /** @var SelectionInterface $handler */
           $handler = $this->selectionManager->getInstance($options);
           $input_values = $element['#tags'] ? Tags::explode($element['#value']) : [$element['#value']];

@@ @@
    *   Form array structure.
    */
   protected function buildRemoveForm(&$form) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $form['#entity'];
     $entity_id = $entity->id();
     $entity_label = $this->inlineFormHandler->getEntityLabel($entity);
@@ @@
     $remove_button = $form_state->getTriggeringElement();
     $delta = $remove_button['#ief_row_delta'];

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $element['entities'][$delta]['form']['#entity'];
     $entity_id = $entity->id();

@@ @@
   /**
    * Determines bundle to be used when creating entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current form state.
    *
    * @return string
@@ @@
     // will do the job instead (either by preventing the parent form submission
     // or by adding a new referenced entity).
     if (!$has_children && !$form_open) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $instance */
+      /** @var FieldDefinitionInterface $instance */
       $instance = $form_state->get(['inline_entity_form', $ief_id, 'instance']);
       $form_state->setError($element, t('@name field is required.', ['@name' => $instance->getLabel()]));
     }
@@ @@
    *
    * @param $form
    *   The IEF Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public static function closeChildForms($form, FormStateInterface &$form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/inline_entity_form/src/Plugin/Field/FieldWidget/InlineEntityFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form\Plugin\Field\FieldWidget;

+use Drupal\inline_entity_form\InlineFormInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityFormModeInterface;
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The inline entity from handler.
    *
-   * @var \Drupal\inline_entity_form\InlineFormInterface
+   * @var InlineFormInterface
    */
   protected $inlineFormHandler;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ @@
   /**
    * Gets the entity type managed by this handler.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type.
    */
   protected function getEntityTypeLabels() {
@@ @@
    * - Is IEF handler loaded?
    * - Are we on a "real" entity form and not on default value widget?
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return bool
@@ @@
   /**
    * Prepares the form state for the current widget.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values.
    * @param bool $translating
    *   Whether there's a translation in progress.
@@ @@
    *   Entity langcode.
    * @param array $parents
    *   Array of parent element names.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Optional entity object.
    *
    * @return array
@@ @@
    * Otherwise the widget will skip translation even if it's happening
    * on the parent form itself.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ @@
    *
    * @param $entity_form
    *   The form of the entity being managed inline.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public static function submitSaveEntity($entity_form, FormStateInterface $form_state) {
     $ief_id = $entity_form['#ief_id'];
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $entity_form['#entity'];

     if (in_array($entity_form['#op'], ['add', 'duplicate'])) {
@@ @@
   /**
    * Gets the entity form mode instance for this widget.
    *
-   * @return \Drupal\Core\Entity\EntityFormModeInterface|null
+   * @return EntityFormModeInterface|null
    *   The form mode instance, or NULL if the default one is used.
    */
   protected function getEntityFormMode() {
@@ @@
   /**
    * Gets the access handler for the target entity type.
    *
-   * @return \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @return EntityAccessControlHandlerInterface
    *   The access handler.
    */
   protected function getAccessHandler() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/inline_entity_form/src/MigrationHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\migrate\Plugin\MigrateSourcePluginManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\field\Plugin\migrate\source\d7\FieldInstance;
 use Drupal\field\Plugin\migrate\source\d7\FieldInstancePerFormDisplay;
@@ @@
    * @param array $migrations
    *   An array of migrations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function alterPlugins(array &$migrations) {
     foreach ($migrations as &$migration) {
-      /** @var \Drupal\migrate\Plugin\MigrateSourcePluginManager $source_plugin_manager */
+      /** @var MigrateSourcePluginManager $source_plugin_manager */
       $source_plugin_manager = \Drupal::service('plugin.manager.migrate.source');
       $source = NULL;
       if (isset($migration['source']['plugin'])) {
@@ @@
    * are listed in the handler settings. Therefore, when the target bundle is an
    * empty array  get all the bundles and put them on the row.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The current row.
-   * @param \Drupal\migrate\Plugin\MigrateSourceInterface $source
+   * @param MigrateSourceInterface $source
    *   The source for this migration.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
    *
    * @throws \Exception
@@ @@
    * case to the switch statement below and either use a query to get the
    * bundles or hard code the values for you source site.
    *
-   * @param \Drupal\migrate\Plugin\MigrateSourceInterface $source_plugin
+   * @param MigrateSourceInterface $source_plugin
    *   The source plugin.
    * @param string $entity_type
    *   The entity type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/inline_entity_form/src/InlineFormInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Gets the entity type managed by this handler.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type.
    */
   public function getEntityType();
@@ @@
   /**
    * Gets the label of the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The given entity.
    *
    * @return string
@@ @@
    *   - #parents: Identifies the position of the entity form in the overall
    *     parent form, and identifies the location where the field values are
    *     placed within $form_state->getValues().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public function entityForm(array $entity_form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $entity_form
    *   The entity form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public function entityFormValidate(array &$entity_form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $entity_form
    *   The entity form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public function entityFormSubmit(array &$entity_form, FormStateInterface $form_state);
@@ @@
   /**
    * Saves the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/inline_entity_form/src/Form/EntityInlineForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form\Form;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type managed by this handler.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs the inline entity form controller.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, EntityTypeInterface $entity_type) {
@@ @@
    * {@inheritdoc}
    */
   public function entityForm(array $entity_form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $entity_form['#entity'];
     $form_display = $this->getFormDisplay($entity, $entity_form['#form_mode']);
     $form_display->buildForm($entity, $entity_form, $form_state);
@@ @@
     // skipping other requests such as file uploads.
     $triggering_element = $form_state->getTriggeringElement();
     if (!empty($triggering_element['#ief_submit_trigger'])) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $entity_form['#entity'];
       $this->buildEntity($entity_form, $entity, $form_state);
       $form_display = $this->getFormDisplay($entity, $entity_form['#form_mode']);
@@ @@
    */
   public function entityFormSubmit(array &$entity_form, FormStateInterface $form_state) {
     $form_state->cleanValues();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $entity_form['#entity'];
     $this->buildEntity($entity_form, $entity, $form_state);
   }
@@ @@
    *
    * @param array $entity_form
    *   The entity form.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function buildEntity(array $entity_form, ContentEntityInterface $entity, FormStateInterface $form_state) {
@@ @@
    *   The form state of the parent form.
    */
   public static function submitCleanFormState(&$entity_form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $entity_form['#entity'];
     $bundle = $entity->bundle();
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $instances */
+    /** @var FieldDefinitionInterface[] $instances */
     $instances = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_form['#entity_type'], $bundle);
     foreach ($instances as $instance) {
       $field_name = $instance->getName();
@@ @@
   /**
    * Gets the form display for the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $form_mode
    *   The form mode.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   The form display.
    */
   protected function getFormDisplay(ContentEntityInterface $entity, $form_mode) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/inline_entity_form/src/ElementSubmit.php:18

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function attach(&$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function trigger(&$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function doSubmit(&$element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/inline_entity_form/src/Element/InlineEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\inline_entity_form\Element;

+use Drupal\inline_entity_form\InlineFormInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * @param array $entity_form
    *   The entity form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    *
    * @param array $entity_form
    *   The entity form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateEntityForm(&$entity_form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $entity_form
    *   The entity form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitEntityForm(&$entity_form, FormStateInterface $form_state) {
@@ @@
    * @throws \InvalidArgumentException
    *   Thrown when the entity type has no inline form handler defined.
    *
-   * @return \Drupal\inline_entity_form\InlineFormInterface
+   * @return InlineFormInterface
    *   The inline form handler.
    */
   public static function getInlineFormHandler($entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/inline_entity_form/inline_entity_form.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Entity\FieldableEntityInterface;
 /**
  * @file
  * Provides a widget for inline management (creation, modification, removal) of
@@ @@
  * Implements hook_entity_type_build().
  */
 function inline_entity_form_entity_type_build(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   if (isset($entity_types['node']) && !$entity_types['node']->getHandlerClass('inline_form')) {
     $entity_types['node']->setHandlerClass('inline_form', '\Drupal\inline_entity_form\Form\NodeInlineForm');
   }
@@ @@
  *
  * @param array $reference_form
  *   The form array that will receive the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the parent form.
  *
  * @return array
@@ @@
 function inline_entity_form_reference_form($reference_form, FormStateInterface &$form_state) {
   $labels = $reference_form['#ief_labels'];
   $ief_id = $reference_form['#ief_id'];
-  /** @var \Drupal\field\Entity\FieldConfig $instance */
+  /** @var FieldConfig $instance */
   $instance = $form_state->get(['inline_entity_form', $ief_id, 'instance']);
   $selection_settings = [
     'match_operator' => $reference_form['#match_operator'],
@@ @@
  *
  * @param array $reference_form
  *   The reference entity form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the parent form.
  */
 function inline_entity_form_reference_form_validate(&$reference_form, FormStateInterface $form_state) {
@@ @@
  *
  * @param array $reference_form
  *   The reference entity form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the parent form.
  */
 function inline_entity_form_reference_form_submit($reference_form, FormStateInterface $form_state) {
@@ @@
   // Build an array of entity rows for the table.
   $rows = [];
   foreach (Element::children($form) as $key) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $form[$key]['#entity'];
     $row_classes = ['ief-row-entity'];
     $cells = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 21 files have been changed by Rector                                      

