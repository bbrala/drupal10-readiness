diff --git a/src/DepthUninstallValidator.php b/src/DepthUninstallValidator.php
index 9bb4dcc..9508b3f 100755
--- a/src/DepthUninstallValidator.php
+++ b/src/DepthUninstallValidator.php
@@ -19,13 +19,13 @@ class DepthUninstallValidator implements ModuleUninstallValidatorInterface {
 
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -33,9 +33,9 @@ class DepthUninstallValidator implements ModuleUninstallValidatorInterface {
   /**
    * DepthUninstallValidator constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param EntityTypeManagerInterface $entity_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param TranslationInterface $string_translation
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, EntityFieldManagerInterface $entity_field_manager, TranslationInterface $string_translation) {
     $this->entityTypeManager = $entity_manager;
diff --git a/src/Form/DepthUpdateForm.php b/src/Form/DepthUpdateForm.php
index a30e4f9..c665771 100755
--- a/src/Form/DepthUpdateForm.php
+++ b/src/Form/DepthUpdateForm.php
@@ -9,6 +9,7 @@
 namespace Drupal\taxonomy_term_depth\Form;
 
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\taxonomy\VocabularyInterface;
@@ -33,7 +34,7 @@ class DepthUpdateForm extends FormBase {
     $vocabulary = \Drupal::request()->get('taxonomy_vocabulary');
 
     /**
-     * @var \Drupal\Core\Database\Connection
+     * @var Connection
      */
     $dbh = \Drupal::database();
     $countAll = $dbh->select('taxonomy_term_field_data', 'ttd')
diff --git a/src/ProxyClass/DepthUninstallValidator.php b/src/ProxyClass/DepthUninstallValidator.php
index 65c8f77..b049fbb 100755
--- a/src/ProxyClass/DepthUninstallValidator.php
+++ b/src/ProxyClass/DepthUninstallValidator.php
@@ -9,15 +9,19 @@
 
 namespace Drupal\taxonomy_term_depth\ProxyClass {
 
+  use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+  use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+  use Symfony\Component\DependencyInjection\ContainerInterface;
+  use Drupal\Core\StringTranslation\TranslationInterface;
   /**
    * Provides a proxy class for
    * \Drupal\taxonomy_term_depth\DepthUninstallValidator.
    *
    * @see \Drupal\Component\ProxyBuilder
    */
-  class DepthUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface {
+  class DepthUninstallValidator implements ModuleUninstallValidatorInterface {
 
-    use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use DependencySerializationTrait;
 
     /**
      * The id of the original proxied service.
@@ -36,19 +40,19 @@ namespace Drupal\taxonomy_term_depth\ProxyClass {
     /**
      * The service container.
      *
-     * @var \Symfony\Component\DependencyInjection\ContainerInterface
+     * @var ContainerInterface
      */
     protected $container;
 
     /**
      * Constructs a ProxyClass Drupal proxy object.
      *
-     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+     * @param ContainerInterface $container
      *   The container.
      * @param string $drupal_proxy_original_service_id
      *   The service ID of the original service.
      */
-    public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id) {
+    public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id) {
       $this->container = $container;
       $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
     }
@@ -77,7 +81,7 @@ namespace Drupal\taxonomy_term_depth\ProxyClass {
     /**
      * {@inheritdoc}
      */
-    public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation) {
+    public function setStringTranslation(TranslationInterface $translation) {
       return $this->lazyLoadItself()->setStringTranslation($translation);
     }
 
diff --git a/taxonomy_term_depth.batch.inc b/taxonomy_term_depth.batch.inc
index ff133a1..ba899a0 100755
--- a/taxonomy_term_depth.batch.inc
+++ b/taxonomy_term_depth.batch.inc
@@ -1,4 +1,5 @@
 <?php
+use Drupal\Core\Database\Connection;
 /**
  * @file
  */
@@ -14,7 +15,7 @@ require_once __DIR__ . '/constants.inc';
  */
 function taxonomy_term_depth_batch_callbacks_update_term_depth($options, &$context) {
   /**
-   * @var \Drupal\Core\Database\Connection.
+   * @var Connection .
    */
   $dbh = \Drupal::database();
 
diff --git a/taxonomy_term_depth.info.yml b/taxonomy_term_depth.info.yml
index 0b7df9b..a1ffd6a 100644
--- a/taxonomy_term_depth.info.yml
+++ b/taxonomy_term_depth.info.yml
@@ -1,6 +1,6 @@
 type: module
 name: Taxonomy term depth
-core_version_requirement: '^8 || ^9'
+core_version_requirement: ^8 || ^9 || ^10
 description: Provides field for storing taxonomy depth value and some wrappers integration with modules
 package: Taxonomy
 dependencies:
diff --git a/taxonomy_term_depth.module b/taxonomy_term_depth.module
index ce1f294..675faef 100755
--- a/taxonomy_term_depth.module
+++ b/taxonomy_term_depth.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\taxonomy_term_depth\QueueManager\Manager;
 use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -294,11 +297,11 @@ function taxonomy_term_depth_views_data_alter(array &$data) {
 /**
  * Implements hook_entity_base_field_info().
  */
-function taxonomy_term_depth_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
+function taxonomy_term_depth_entity_base_field_info(EntityTypeInterface $entity_type) {
   $fields = [];
   if ($entity_type->id() == 'taxonomy_term') {
     // $field_db = \Drupal\Core\Database\Database::getConnection()->schema();
-    $fields['depth_level'] = \Drupal\Core\Field\BaseFieldDefinition::create('integer')
+    $fields['depth_level'] = BaseFieldDefinition::create('integer')
       ->setProvider('taxonomy_term_depth')
       ->setLabel(t('Depth'))
       ->setDescription(t('Term depth (1 based)'))
@@ -311,7 +314,7 @@ function taxonomy_term_depth_entity_base_field_info(\Drupal\Core\Entity\EntityTy
 /**
  * Get QueueManager service.
  *
- * @return Drupal\taxonomy_term_depth\QueueManager\Manager.
+ * @return Manager .
  */
 function taxonomy_term_depth_queue_manager($vid = NULL) {
   return \Drupal::service('taxonomy_term_depth.queue_service')->setVid($vid);
diff --git a/tests/src/Functional/DynamicDepthCalculationTest.php b/tests/src/Functional/DynamicDepthCalculationTest.php
index bb74780..466bb4e 100755
--- a/tests/src/Functional/DynamicDepthCalculationTest.php
+++ b/tests/src/Functional/DynamicDepthCalculationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\taxonomy_term_depth\Functional;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Tests\BrowserTestBase;
@@ -28,7 +29,7 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }
 
@@ -44,7 +45,7 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
 
     $voc->save();
 
-    /** @var \Drupal\taxonomy\TermInterface $term1 */
+    /** @var TermInterface $term1 */
     $term1 = Term::create([
       'vid' => $voc->id(),
       'name' => 'Depth 1 term',
@@ -52,7 +53,7 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
 
     $term1->save();
 
-    /** @var \Drupal\taxonomy\TermInterface $term2 */
+    /** @var TermInterface $term2 */
     $term2 = Term::create([
       'vid' => $voc->id(),
       'name' => 'Depth 2 term',
@@ -61,7 +62,7 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
     $term2->parent->set(0, $term1->id());
     $term2->save();
 
-    /** @var \Drupal\taxonomy\TermInterface $term3 */
+    /** @var TermInterface $term3 */
     $term3 = Term::create([
       'vid' => $voc->id(),
       'name' => 'Depth 2 term',
@@ -71,13 +72,13 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
     $term3->parent->set(1, $term2->id());
     $term3->save();
 
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');
 
-    $this->assertEqual($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
-    $this->assertEqual($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
-    $this->assertEqual($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');
+    $this->assertEquals($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
+    $this->assertEquals($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
+    $this->assertEquals($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');
 
     $chain = taxonomy_term_depth_get_full_chain($term2->id());
     $compare = [
@@ -91,13 +92,13 @@ class DynamicDepthCalculationTest extends BrowserTestBase {
     $chain = taxonomy_term_depth_get_full_chain($term2->id(), TRUE);
     $this->assertTrue($chain === array_reverse($compare), 'Testing reversed fullchain for term2');
 
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term1->id()])
       ->fetchField(), 1, 'DB depth_level field of first term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term2->id()])
       ->fetchField(), 2, 'DB depth_level field of second term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term3->id()])
       ->fetchField(), 3, 'DB depth_level field of third term');
   }
