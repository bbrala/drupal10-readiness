diff --git a/src/Event/MessageEvent.php b/src/Event/MessageEvent.php
index e8174ef..55264ae 100644
--- a/src/Event/MessageEvent.php
+++ b/src/Event/MessageEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\migration_tools\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Render\FormattableMarkup;
-use Symfony\Component\EventDispatcher\Event;
 
 class MessageEvent extends Event {
 
diff --git a/src/EventSubscriber/PostRowSave.php b/src/EventSubscriber/PostRowSave.php
index f35738e..14d769a 100644
--- a/src/EventSubscriber/PostRowSave.php
+++ b/src/EventSubscriber/PostRowSave.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\migration_tools\EventSubscriber;
 
+use Drupal\migrate\MigrateSkipRowException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\Language;
 use Drupal\migrate\Event\MigrateEvents;
@@ -19,7 +20,7 @@ class PostRowSave implements EventSubscriberInterface {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -56,10 +57,10 @@ class PostRowSave implements EventSubscriberInterface {
   /**
    * Callback function for prepare row migration event.
    *
-   * @param \Drupal\migrate\Event\MigratePostRowSaveEvent $event
+   * @param MigratePostRowSaveEvent $event
    *   The prepare row event.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    */
   public function onMigratePostRowSave(MigratePostRowSaveEvent $event) {
     $row = $event->getRow();
diff --git a/src/EventSubscriber/PrepareRow.php b/src/EventSubscriber/PrepareRow.php
index 5a3a211..fbef2d7 100644
--- a/src/EventSubscriber/PrepareRow.php
+++ b/src/EventSubscriber/PrepareRow.php
@@ -26,7 +26,7 @@ class PrepareRow implements EventSubscriberInterface {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Message.php b/src/Message.php
index ded0f15..50c5e52 100644
--- a/src/Message.php
+++ b/src/Message.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\migration_tools;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\migrate\MigrateException;
 use Drupal\Component\Render\FormattableMarkup;
@@ -72,8 +73,8 @@ class Message {
       $event_dispatcher->dispatch(MessageEvent::EVENT_NAME, $event);
 
       $log_levels = RfcLogLevel::getLevels();
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $log_function_markup */
-      $log_function_markup = $log_levels[$severity];
+      /** @var TranslatableMarkup $log_function_markup */
+						$log_function_markup = $log_levels[$severity];
 
       // Use lowercase version of label for method call.
       $log_function = strtolower($log_function_markup->__toString());
diff --git a/src/Operations.php b/src/Operations.php
index a51b14a..29b4687 100644
--- a/src/Operations.php
+++ b/src/Operations.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\migration_tools;
 
+use Drupal\migrate\Row;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\MigrateSkipRowException;
 use Drupal\migration_tools\Modifier\DomModifier;
@@ -16,11 +17,11 @@ class Operations {
    *
    * @param array $migration_tools_settings
    *   Migration Tools Settings.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Migration Row.
    *
-   * @throws \Drupal\migrate\MigrateException
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateException
+   * @throws MigrateSkipRowException
    */
   public static function process(array $migration_tools_settings, $row) {
     if (!empty($migration_tools_settings)) {
@@ -146,7 +147,7 @@ class Operations {
    * @param resource $handle
    *   The curl handle to set the options on.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   protected static function processCurlOptions($migration_tools_setting, &$handle) {
     if (empty($migration_tools_setting['curl_options'])) {
diff --git a/src/Redirects.php b/src/Redirects.php
index 61af955..1c12d9c 100644
--- a/src/Redirects.php
+++ b/src/Redirects.php
@@ -459,7 +459,7 @@ class Redirects {
       if (!empty($file_id)) {
         $file_object = File::load($file_id);
         $file_uri = $file_object->getFileUri();
-        $path = file_url_transform_relative(file_create_url($file_uri));
+        $path = \Drupal::service('file_url_generator')->generateString($file_uri);
       }
     }
 
@@ -482,7 +482,7 @@ class Redirects {
     if (!empty($field[$language])) {
       foreach ($field[$language] as $delta => $item) {
         $file = File::load($item['fid']);
-        $url = file_create_url($file->uri);
+        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->uri);
         $parsed_url = parse_url($url);
         $destination = ltrim($parsed_url['path'], '/');
         redirect_delete_by_path($destination);
@@ -551,7 +551,7 @@ class Redirects {
    *   string 'skip' if there is a redirect but it's broken.
    *   FALSE - no detectable redirects exist in the page.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public function hasValidRedirect($row, $query_path, array $redirect_texts = []) {
     // @TODO refactor for D8 and use setting from RedirectSettings.
diff --git a/src/SourceParser/HtmlBase.php b/src/SourceParser/HtmlBase.php
index d06c0ee..6c14ab5 100644
--- a/src/SourceParser/HtmlBase.php
+++ b/src/SourceParser/HtmlBase.php
@@ -20,7 +20,7 @@ class HtmlBase {
   public $fileId;
   protected $html;
 
-  /** @var \Drupal\migrate\Row $row */
+  /** @var Row $row */
   public $row;
   public $queryPath;
 
@@ -51,7 +51,7 @@ class HtmlBase {
    *   The file id, e.g. careers/legal/pm7205.html.
    * @param string $html
    *   The full HTML data as loaded from the file.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Migrate row to be altered.
    */
   public function __construct($file_id, $html, Row $row) {
@@ -66,7 +66,7 @@ class HtmlBase {
   /**
    * Add obtainer job for this source parser to run.
    *
-   * @param \Drupal\migration_tools\Obtainer\Job $job
+   * @param Job $job
    *   Job to add.
    */
   public function addObtainerJob(Job $job) {
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index d49239c..2df2d24 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\migration_tools\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
