diff --git a/modules/static_build/modules/static_builder_gatsby/src/Plugin/static_build/StaticBuilder/GatsbyStaticBuilder.php b/modules/static_build/modules/static_builder_gatsby/src/Plugin/static_build/StaticBuilder/GatsbyStaticBuilder.php
index 050c4cc..c9be782 100644
--- a/modules/static_build/modules/static_builder_gatsby/src/Plugin/static_build/StaticBuilder/GatsbyStaticBuilder.php
+++ b/modules/static_build/modules/static_builder_gatsby/src/Plugin/static_build/StaticBuilder/GatsbyStaticBuilder.php
@@ -24,7 +24,7 @@ class GatsbyStaticBuilder extends StaticBuilderPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function preBuild(): void {
     $this->deleteTempDirs();
@@ -69,7 +69,7 @@ class GatsbyStaticBuilder extends StaticBuilderPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function postBuild(): void {
     // Move or copy public dir contents to release dir.
@@ -87,7 +87,7 @@ class GatsbyStaticBuilder extends StaticBuilderPluginBase {
   /**
    * Deletes .cache and public dir.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function deleteTempDirs(): void {
     $config = $this->configFactory->get('static_builder_gatsby.settings');
diff --git a/modules/static_build/src/Annotation/StaticBuilder.php b/modules/static_build/src/Annotation/StaticBuilder.php
index 4ae9c07..56a098f 100644
--- a/modules/static_build/src/Annotation/StaticBuilder.php
+++ b/modules/static_build/src/Annotation/StaticBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class StaticBuilder extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class StaticBuilder extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_build/src/Commands/StaticBuildCommands.php b/modules/static_build/src/Commands/StaticBuildCommands.php
index 279d382..754f588 100644
--- a/modules/static_build/src/Commands/StaticBuildCommands.php
+++ b/modules/static_build/src/Commands/StaticBuildCommands.php
@@ -18,23 +18,23 @@ class StaticBuildCommands extends DrushCommands {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static builder.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * StaticBuildCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
diff --git a/modules/static_build/src/Config/ConfigOverrider.php b/modules/static_build/src/Config/ConfigOverrider.php
index e20b31f..360dff4 100644
--- a/modules/static_build/src/Config/ConfigOverrider.php
+++ b/modules/static_build/src/Config/ConfigOverrider.php
@@ -16,23 +16,23 @@ class ConfigOverrider implements ConfigFactoryOverrideInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
diff --git a/modules/static_build/src/Controller/BuilderController.php b/modules/static_build/src/Controller/BuilderController.php
index 9af03df..f9f854c 100644
--- a/modules/static_build/src/Controller/BuilderController.php
+++ b/modules/static_build/src/Controller/BuilderController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\static_build\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_build\Plugin\StaticBuilderPluginInterface;
@@ -19,34 +23,34 @@ class BuilderController extends ControllerBase {
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;
 
   /**
    * BuilderController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Locale exporter manager.
    */
   public function __construct(
@@ -81,7 +85,7 @@ class BuilderController extends ControllerBase {
    * @param string $runMode
    *   Build mode: live or preview.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to previous page.
    */
   public function runBuild(string $builderId, string $runMode): RedirectResponse {
@@ -114,9 +118,9 @@ class BuilderController extends ControllerBase {
    * @param $runMode
    *   Build mode: live or preview.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function executeBuild($builderId, $runMode): void {
     $plugin = $this->staticBuilderPluginManager->getInstance([
@@ -132,9 +136,9 @@ class BuilderController extends ControllerBase {
   /**
    * Exports locale data to be able to run a new build.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
+   * @throws StaticSuiteException
    */
   protected function exportLocale(): void {
     $localeExporter = $this->localeExporterManager->getDefaultInstance();
diff --git a/modules/static_build/src/Controller/LogViewerController.php b/modules/static_build/src/Controller/LogViewerController.php
index 325cd75..c663d71 100644
--- a/modules/static_build/src/Controller/LogViewerController.php
+++ b/modules/static_build/src/Controller/LogViewerController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface;
@@ -21,16 +22,16 @@ class LogViewerController extends ControllerBase {
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
@@ -61,7 +62,7 @@ class LogViewerController extends ControllerBase {
    * @param string $uniqueId
    *   Release's unique id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewBuildLog(string $builderId, string $runMode, string $uniqueId) {
diff --git a/modules/static_build/src/Controller/ReleaseController.php b/modules/static_build/src/Controller/ReleaseController.php
index e11e033..2b4ec83 100644
--- a/modules/static_build/src/Controller/ReleaseController.php
+++ b/modules/static_build/src/Controller/ReleaseController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\LocalRedirectResponse;
@@ -23,43 +24,43 @@ class ReleaseController extends ControllerBase {
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static builder helper.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderHelperInterface
+   * @var StaticBuilderHelperInterface
    */
   protected $staticBuilderHelper;
 
   /**
    * The static builder plugin.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @var StaticBuilderPluginInterface
    */
   protected $builder;
 
   /**
    * Static Builder Releases Controller constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderHelperInterface $staticBuilderHelper
+   * @param StaticBuilderHelperInterface $staticBuilderHelper
    *   The static builder helper.
    */
   public function __construct(
@@ -251,7 +252,7 @@ class ReleaseController extends ControllerBase {
    * @param string $runMode
    *   A run mode. Usually live or preview.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getRunningReleaseData(string $builderId, string $runMode): JsonResponse {
diff --git a/modules/static_build/src/Event/StaticBuildEvent.php b/modules/static_build/src/Event/StaticBuildEvent.php
index 76cdbd6..c207170 100644
--- a/modules/static_build/src/Event/StaticBuildEvent.php
+++ b/modules/static_build/src/Event/StaticBuildEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\static_build\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\static_build\Plugin\StaticBuilderPluginInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Generic static build event to be fired.
@@ -27,7 +27,7 @@ class StaticBuildEvent extends Event {
   /**
    * Constructs the object.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginInterface $builder
+   * @param StaticBuilderPluginInterface $builder
    *   The static builder.
    */
   public function __construct(StaticBuilderPluginInterface $builder) {
@@ -37,7 +37,7 @@ class StaticBuildEvent extends Event {
   /**
    * Get the static builder.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   The static builder.
    */
   public function getBuilder(): StaticBuilderPluginInterface {
diff --git a/modules/static_build/src/EventSubscriber/EventSubscriber.php b/modules/static_build/src/EventSubscriber/EventSubscriber.php
index 110bc1b..45d1adb 100644
--- a/modules/static_build/src/EventSubscriber/EventSubscriber.php
+++ b/modules/static_build/src/EventSubscriber/EventSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_build\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\node\Entity\Node;
@@ -22,41 +24,41 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, EntityUtils $entityUtils, StaticSuiteUtilsInterface $static_suite_utils) {
@@ -92,14 +94,14 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a StaticExportEvents::WRITE_QUEUE_PROCESSING_ENDS event.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function requestLiveBuild(StaticExportEvent $event): StaticExportEvent {
     // Check if received event should request a build.
diff --git a/modules/static_build/src/Form/SettingsForm.php b/modules/static_build/src/Form/SettingsForm.php
index 4ad4f10..573960a 100644
--- a/modules/static_build/src/Form/SettingsForm.php
+++ b/modules/static_build/src/Form/SettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_build\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,43 +25,43 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $static_builder_manager
+   * @param StaticBuilderPluginManagerInterface $static_builder_manager
    *   The static builder plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, RouteProviderInterface $route_provider, StaticBuilderPluginManagerInterface $static_builder_manager) {
@@ -165,10 +167,10 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
diff --git a/modules/static_build/src/Plugin/Derivative/ReleasesListTasks.php b/modules/static_build/src/Plugin/Derivative/ReleasesListTasks.php
index 596d3f2..94fd742 100644
--- a/modules/static_build/src/Plugin/Derivative/ReleasesListTasks.php
+++ b/modules/static_build/src/Plugin/Derivative/ReleasesListTasks.php
@@ -18,14 +18,14 @@ class ReleasesListTasks extends DeriverBase implements ContainerDeriverInterface
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(
diff --git a/modules/static_build/src/Plugin/StaticBuilderHelper.php b/modules/static_build/src/Plugin/StaticBuilderHelper.php
index f3c4535..aa32435 100644
--- a/modules/static_build/src/Plugin/StaticBuilderHelper.php
+++ b/modules/static_build/src/Plugin/StaticBuilderHelper.php
@@ -12,14 +12,14 @@ class StaticBuilderHelper implements StaticBuilderHelperInterface {
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * StaticBuilderHelper constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginBase.php b/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
index 3dd0b66..b7ec9ac 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Plugin;
 
+use Drupal\static_build\Release\Task\Task;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -44,63 +45,63 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Drupal file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Release Manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;
 
   /**
    * Exporter service.
    *
-   * @var \Drupal\static_export\Exporter\ExporterReporterInterface
+   * @var ExporterReporterInterface
    */
   protected $exporterReporter;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;
 
   /**
    * Release being built.
    *
-   * @var \Drupal\static_build\Release\Release
+   * @var Release
    */
   protected $release;
 
   /**
    * Release task.
    *
-   * @var \Drupal\static_build\Release\Task\Task
+   * @var Task
    */
   protected $releaseTask;
 
@@ -164,24 +165,24 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal file system service.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
-   * @param \Drupal\static_export\Exporter\ExporterReporterInterface $exporterReporter
+   * @param ExporterReporterInterface $exporterReporter
    *   The exporter reporter service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Unique ID helper.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function __construct(
     array $configuration,
@@ -215,7 +216,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public static function create(ContainerInterface $container,
                                 array $configuration,
@@ -263,7 +264,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init(): bool {
     // Fork an async process only if not in a cli and async option is true.
@@ -351,7 +352,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function runBuildLoop(): bool {
     $this->dispatchEvent(StaticBuildEvents::START);
@@ -601,7 +602,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function setCurrentSymlink(): bool {
     // Get current id in case we need to execute a rollback.
@@ -747,7 +748,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function createLogDir(): bool {
     if (!is_dir($this->getConf('log-dir'))) {
@@ -846,7 +847,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function setConfiguration(array $configuration) {
     // Check for a proper run-mode.
@@ -989,7 +990,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteInsideBuildDir(string $localPath): bool {
     $pathToDelete = $this->getConf('build-dir') . '/' . $localPath;
@@ -1015,7 +1016,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function copyDataToBuildDir(string $source, string $localDestination, array $excludedPaths, bool $createTar = FALSE): bool {
     clearstatcache(TRUE);
@@ -1114,7 +1115,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
   /**
    * Get release.
    *
-   * @return \Drupal\static_build\Release\Release
+   * @return Release
    *   The release we are working with.
    */
   public function getRelease(): Release {
@@ -1139,7 +1140,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_build\Event\StaticBuildEvent
+   * @return StaticBuildEvent
    *   The event.
    */
   public function dispatchEvent(string $eventName, array $data = []): StaticBuildEvent {
@@ -1148,7 +1149,7 @@ abstract class StaticBuilderPluginBase extends PluginBase implements StaticBuild
 
     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");
 
     // Return the event.
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php b/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php
index 3d7bdfe..c7be8dc 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Plugin;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -48,14 +49,14 @@ interface StaticBuilderPluginInterface extends ConfigurableInterface, DependentP
    * Should typically decide whether to fork an async process or run the build
    * synchronously.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init(): bool;
 
   /**
    * Runs the build task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function runBuildLoop(): bool;
 
@@ -71,7 +72,7 @@ interface StaticBuilderPluginInterface extends ConfigurableInterface, DependentP
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function build(): void;
 
@@ -108,10 +109,10 @@ interface StaticBuilderPluginInterface extends ConfigurableInterface, DependentP
   /**
    * Get the configured release manager.
    *
-   * @return \Drupal\static_build\Release\ReleaseManagerInterface
+   * @return ReleaseManagerInterface
    *   The current release manager.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function getReleaseManager(): ReleaseManagerInterface;
 
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginManager.php b/modules/static_build/src/Plugin/StaticBuilderPluginManager.php
index 516e5df..86dabed 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginManager.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginManager.php
@@ -20,9 +20,9 @@ class StaticBuilderPluginManager extends CacheablePluginManager implements Stati
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -37,10 +37,10 @@ class StaticBuilderPluginManager extends CacheablePluginManager implements Stati
    *
    * Wraps original createInstance() to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created static builder object instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticBuilderPluginInterface {
@@ -57,7 +57,7 @@ class StaticBuilderPluginManager extends CacheablePluginManager implements Stati
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created static builder object instance, or a previously
    *   instantiated one if available.
    */
diff --git a/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php b/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php
index b691c4f..52d0b89 100644
--- a/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php
+++ b/modules/static_build/src/Plugin/StaticBuilderPluginManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_build\Plugin;
 
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -16,10 +18,10 @@ interface StaticBuilderPluginManagerInterface extends PluginManagerInterface, Ca
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created exporter object instance.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function createInstance($plugin_id, array $configuration = []): StaticBuilderPluginInterface;
 
@@ -28,13 +30,13 @@ interface StaticBuilderPluginManagerInterface extends PluginManagerInterface, Ca
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @return StaticBuilderPluginInterface
    *   A newly created exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getInstance(array $options): StaticBuilderPluginInterface;
 
diff --git a/modules/static_build/src/Release/Release.php b/modules/static_build/src/Release/Release.php
index 3c1f059..80cfcd7 100644
--- a/modules/static_build/src/Release/Release.php
+++ b/modules/static_build/src/Release/Release.php
@@ -38,14 +38,14 @@ class Release implements ReleaseInterface {
   /**
    * Task factory.
    *
-   * @var \Drupal\static_build\Release\Task\TaskFactoryInterface
+   * @var TaskFactoryInterface
    */
   protected $taskFactory;
 
   /**
    * Array of added tasks.
    *
-   * @var \Drupal\static_build\Release\Task\TaskInterface[]
+   * @var TaskInterface[]
    */
   protected $tasks = [];
 
@@ -56,7 +56,7 @@ class Release implements ReleaseInterface {
    *   Dir where releases are stored.
    * @param string $uniqueId
    *   A unique id identifying this release.
-   * @param \Drupal\static_build\Release\Task\TaskFactoryInterface $taskFactory
+   * @param TaskFactoryInterface $taskFactory
    *   A task factory.
    */
   public function __construct(string $allReleasesDir, string $uniqueId, TaskFactoryInterface $taskFactory) {
@@ -134,7 +134,7 @@ class Release implements ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function createMetadataDir(): bool {
     $metadataDir = $this->getMetadataDir();
@@ -152,7 +152,7 @@ class Release implements ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function initializeMetadataDir(): bool {
     $uniqueIdFile = $this->dir . '/' . self::UNIQUE_ID_FILE;
@@ -169,7 +169,7 @@ class Release implements ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function createTasksDir(): bool {
     $mkdirResult = @mkdir($this->getTasksDir());
diff --git a/modules/static_build/src/Release/ReleaseFactory.php b/modules/static_build/src/Release/ReleaseFactory.php
index a9a7da0..ca4a2f9 100644
--- a/modules/static_build/src/Release/ReleaseFactory.php
+++ b/modules/static_build/src/Release/ReleaseFactory.php
@@ -12,7 +12,7 @@ class ReleaseFactory implements ReleaseFactoryInterface {
   /**
    * Release cache to avoid creating different instances of the same release.
    *
-   * @var \Drupal\static_build\Release\ReleaseInterface[]
+   * @var ReleaseInterface[]
    */
   protected $releaseCache;
 
diff --git a/modules/static_build/src/Release/ReleaseFactoryInterface.php b/modules/static_build/src/Release/ReleaseFactoryInterface.php
index 6b0caeb..1ef2fe1 100644
--- a/modules/static_build/src/Release/ReleaseFactoryInterface.php
+++ b/modules/static_build/src/Release/ReleaseFactoryInterface.php
@@ -16,10 +16,10 @@ interface ReleaseFactoryInterface {
    *   Dir where releases are stored.
    * @param string $uniqueId
    *   A unique id identifying this release.
-   * @param \Drupal\static_build\Release\Task\TaskFactoryInterface $taskFactory
+   * @param TaskFactoryInterface $taskFactory
    *   A task factory for Release.
    *
-   * @return \Drupal\static_build\Release\ReleaseInterface
+   * @return ReleaseInterface
    *   A release object.
    */
   public function create(string $allReleasesDir, string $uniqueId, TaskFactoryInterface $taskFactory): ReleaseInterface;
diff --git a/modules/static_build/src/Release/ReleaseInterface.php b/modules/static_build/src/Release/ReleaseInterface.php
index cabe90b..5057578 100644
--- a/modules/static_build/src/Release/ReleaseInterface.php
+++ b/modules/static_build/src/Release/ReleaseInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Release;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\static_build\Release\Task\TaskInterface;
 
 /**
@@ -23,7 +24,7 @@ interface ReleaseInterface {
    * @param string $id
    *   Task id.
    *
-   * @return \Drupal\static_build\Release\Task\TaskInterface
+   * @return TaskInterface
    *   A newly created task or a previous one.
    */
   public function task(string $id): TaskInterface;
@@ -66,7 +67,7 @@ interface ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function createReleaseDir(): bool;
 
@@ -76,7 +77,7 @@ interface ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteReleaseDir(): bool;
 
@@ -97,7 +98,7 @@ interface ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function copyToDir(string $source, string $localDestination = '', array $excludedPaths = [], bool $delete = FALSE): bool;
 
@@ -112,7 +113,7 @@ interface ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function moveToDir(string $source, string $localDestination = ""): bool;
 
@@ -130,7 +131,7 @@ interface ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteFiles(string $localPath, array $excludes = []): bool;
 
@@ -147,7 +148,7 @@ interface ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteDirs(string $localPath, array $excludes = []): bool;
 
@@ -162,7 +163,7 @@ interface ReleaseInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteDirsAndFiles(string $localPath): bool;
 
diff --git a/modules/static_build/src/Release/ReleaseManager.php b/modules/static_build/src/Release/ReleaseManager.php
index 1a15cbf..2945ec7 100644
--- a/modules/static_build/src/Release/ReleaseManager.php
+++ b/modules/static_build/src/Release/ReleaseManager.php
@@ -19,28 +19,28 @@ class ReleaseManager implements ReleaseManagerInterface {
   /**
    * Release factory.
    *
-   * @var \Drupal\static_build\Release\ReleaseFactoryInterface
+   * @var ReleaseFactoryInterface
    */
   protected $releaseFactory;
 
   /**
    * Task factory.
    *
-   * @var \Drupal\static_build\Release\Task\TaskFactoryInterface
+   * @var TaskFactoryInterface
    */
   protected $taskFactory;
 
   /**
    * Task supervisor.
    *
-   * @var \Drupal\static_build\Release\Task\TaskSupervisorInterface
+   * @var TaskSupervisorInterface
    */
   protected $taskSupervisor;
 
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;
 
@@ -56,7 +56,7 @@ class ReleaseManager implements ReleaseManagerInterface {
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -76,15 +76,15 @@ class ReleaseManager implements ReleaseManagerInterface {
    * configuration. This is also essential to allow different plugins with
    * different base directories (a Work In Progress not already finished).
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_build\Release\ReleaseFactoryInterface $release_factory
+   * @param ReleaseFactoryInterface $release_factory
    *   Release factory.
-   * @param \Drupal\static_build\Release\Task\TaskFactoryInterface $task_factory
+   * @param TaskFactoryInterface $task_factory
    *   Task factory.
-   * @param \Drupal\static_build\Release\Task\TaskSupervisorInterface $task_supervisor
+   * @param TaskSupervisorInterface $task_supervisor
    *   Task supervisor.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Static Export utils.
    */
   public function __construct(
diff --git a/modules/static_build/src/Release/ReleaseManagerInterface.php b/modules/static_build/src/Release/ReleaseManagerInterface.php
index d8290f8..55989b7 100644
--- a/modules/static_build/src/Release/ReleaseManagerInterface.php
+++ b/modules/static_build/src/Release/ReleaseManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Release;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\static_build\Release\Task\TaskSupervisorInterface;
 
 /**
@@ -22,7 +23,7 @@ interface ReleaseManagerInterface {
    * @param string $baseDir
    *   An absolute path where "current" symlink and "releases" folder exists.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init(string $baseDir): void;
 
@@ -40,7 +41,7 @@ interface ReleaseManagerInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function createReleasesDir(): bool;
 
@@ -58,7 +59,7 @@ interface ReleaseManagerInterface {
   /**
    * Get current release instance.
    *
-   * @return \Drupal\static_build\Release\ReleaseInterface|null
+   * @return ReleaseInterface|null
    *   The current release.
    */
   public function getCurrentRelease(): ?ReleaseInterface;
@@ -101,10 +102,9 @@ interface ReleaseManagerInterface {
    * @param string $uniqueId
    *   A unique Id identifying a release.
    *
-   * @return \Drupal\static_build\Release\ReleaseInterface
+   * @return ReleaseInterface
    *   A new release instance.
    * @todo consider renaming this to bootstrap()
-   *
    */
   public function create(string $uniqueId): ReleaseInterface;
 
@@ -117,7 +117,7 @@ interface ReleaseManagerInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function delete(string $uniqueId): bool;
 
@@ -132,14 +132,14 @@ interface ReleaseManagerInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function publish(string $uniqueId, string $taskId): bool;
 
   /**
    * Get a list of all releases.
    *
-   * @return \Drupal\static_build\Release\Release[]
+   * @return Release[]
    *   An array of Releases.
    */
   public function getAllReleases(): array;
@@ -150,7 +150,7 @@ interface ReleaseManagerInterface {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deleteOldReleases(): bool;
 
@@ -192,7 +192,7 @@ interface ReleaseManagerInterface {
   /**
    * Get task supervisor.
    *
-   * @return \Drupal\static_build\Release\Task\TaskSupervisorInterface
+   * @return TaskSupervisorInterface
    *   The task supervisor
    */
   public function getTaskSupervisor(): TaskSupervisorInterface;
diff --git a/modules/static_build/src/Release/Task/TaskFactoryInterface.php b/modules/static_build/src/Release/Task/TaskFactoryInterface.php
index 96ac789..ac8d7dc 100644
--- a/modules/static_build/src/Release/Task/TaskFactoryInterface.php
+++ b/modules/static_build/src/Release/Task/TaskFactoryInterface.php
@@ -15,7 +15,7 @@ interface TaskFactoryInterface {
    * @param string $id
    *   Task id.
    *
-   * @return \Drupal\static_build\Release\Task\TaskInterface
+   * @return TaskInterface
    *   A task object.
    */
   public function create(string $dir, string $id): TaskInterface;
diff --git a/modules/static_build/src/Release/Task/TaskInterface.php b/modules/static_build/src/Release/Task/TaskInterface.php
index 198b9ba..10994f1 100644
--- a/modules/static_build/src/Release/Task/TaskInterface.php
+++ b/modules/static_build/src/Release/Task/TaskInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_build\Release\Task;
 
+use Drupal\static_suite\StaticSuiteException;
 /**
  * An interface for tasks.
  */
@@ -23,7 +24,7 @@ interface TaskInterface {
    * @param bool $value
    *   TRUE to set flag, and FALSE to unset it.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setFlag(string $name, bool $value): void;
 
@@ -49,7 +50,7 @@ interface TaskInterface {
   /**
    * Set this release has started a task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setStarted(): void;
 
@@ -64,14 +65,14 @@ interface TaskInterface {
   /**
    * Set this release has finished a task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setDone(): void;
 
   /**
    * Set this release has failed finishing a task.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function setFailed(): void;
 
diff --git a/modules/static_build/src/Release/Task/TaskSupervisor.php b/modules/static_build/src/Release/Task/TaskSupervisor.php
index ad13440..7fee42b 100644
--- a/modules/static_build/src/Release/Task/TaskSupervisor.php
+++ b/modules/static_build/src/Release/Task/TaskSupervisor.php
@@ -16,21 +16,21 @@ class TaskSupervisor implements TaskSupervisorInterface {
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;
 
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The release manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;
 
@@ -44,9 +44,9 @@ class TaskSupervisor implements TaskSupervisorInterface {
    * different plugins with different base directories (a Work In Progress not
    * already finished).
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Static Export utils.
    */
   public function __construct(
@@ -60,7 +60,7 @@ class TaskSupervisor implements TaskSupervisorInterface {
   /**
    * Set the release manager.
    *
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
    */
   public function setReleaseManager(ReleaseManagerInterface $releaseManager): void {
diff --git a/modules/static_build/src/Release/Task/TaskSupervisorInterface.php b/modules/static_build/src/Release/Task/TaskSupervisorInterface.php
index 97dca12..ea72dbb 100644
--- a/modules/static_build/src/Release/Task/TaskSupervisorInterface.php
+++ b/modules/static_build/src/Release/Task/TaskSupervisorInterface.php
@@ -20,7 +20,7 @@ interface TaskSupervisorInterface {
   /**
    * Set the release manager.
    *
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   The release manager.
    */
   public function setReleaseManager(ReleaseManagerInterface $releaseManager): void;
@@ -31,7 +31,7 @@ interface TaskSupervisorInterface {
    * @param string $taskId
    *   Task id to check.
    *
-   * @return \Drupal\static_build\Release\Release|null
+   * @return Release|null
    *   Last done release or null if nothing found
    */
   public function getLastDoneRelease(string $taskId): ?Release;
@@ -79,7 +79,7 @@ interface TaskSupervisorInterface {
    * @param string $taskId
    *   Task id to check.
    *
-   * @return \Drupal\static_build\Release\Release|null
+   * @return Release|null
    *   The release with a running task or null if nothing found.
    */
   public function getOngoingRelease(string $taskId): ?Release;
diff --git a/modules/static_build/src/Routing/RouteSubscriber.php b/modules/static_build/src/Routing/RouteSubscriber.php
index 9519a66..d642b07 100644
--- a/modules/static_build/src/Routing/RouteSubscriber.php
+++ b/modules/static_build/src/Routing/RouteSubscriber.php
@@ -16,14 +16,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager) {
diff --git a/modules/static_deploy/src/Annotation/StaticDeployer.php b/modules/static_deploy/src/Annotation/StaticDeployer.php
index a7f788d..a024082 100644
--- a/modules/static_deploy/src/Annotation/StaticDeployer.php
+++ b/modules/static_deploy/src/Annotation/StaticDeployer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class StaticDeployer extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class StaticDeployer extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_deploy/src/Commands/StaticDeployCommands.php b/modules/static_deploy/src/Commands/StaticDeployCommands.php
index ac4f926..3df069b 100644
--- a/modules/static_deploy/src/Commands/StaticDeployCommands.php
+++ b/modules/static_deploy/src/Commands/StaticDeployCommands.php
@@ -17,23 +17,23 @@ class StaticDeployCommands extends DrushCommands {
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * StaticDeployCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $static_deployer_manager
+   * @param StaticDeployerPluginManagerInterface $static_deployer_manager
    *   Static deployer manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticDeployerPluginManagerInterface $static_deployer_manager) {
diff --git a/modules/static_deploy/src/Controller/DeployerController.php b/modules/static_deploy/src/Controller/DeployerController.php
index 6061f6b..ee5d412 100644
--- a/modules/static_deploy/src/Controller/DeployerController.php
+++ b/modules/static_deploy/src/Controller/DeployerController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\static_deploy\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface;
@@ -17,23 +21,23 @@ class DeployerController extends ControllerBase {
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * BuilderController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
    */
   public function __construct(
@@ -65,7 +69,7 @@ class DeployerController extends ControllerBase {
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to previous page.
    */
   public function runDeploy(string $deployerId, string $builderId): RedirectResponse {
@@ -96,9 +100,9 @@ class DeployerController extends ControllerBase {
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function executeDeploy(string $deployerId, string $builderId): void {
     $plugin = $this->staticDeployerPluginManager->getInstance([
diff --git a/modules/static_deploy/src/Controller/LogViewerController.php b/modules/static_deploy/src/Controller/LogViewerController.php
index e85e674..911456d 100644
--- a/modules/static_deploy/src/Controller/LogViewerController.php
+++ b/modules/static_deploy/src/Controller/LogViewerController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -23,18 +24,18 @@ class LogViewerController extends ControllerBase {
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
@@ -68,7 +69,7 @@ class LogViewerController extends ControllerBase {
    * @param string $uniqueId
    *   Release's unique id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewDeployLog(string $builderId, string $deployerId, string $uniqueId) {
diff --git a/modules/static_deploy/src/Controller/ReleaseController.php b/modules/static_deploy/src/Controller/ReleaseController.php
index 9302a0b..de416f0 100644
--- a/modules/static_deploy/src/Controller/ReleaseController.php
+++ b/modules/static_deploy/src/Controller/ReleaseController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -25,52 +26,52 @@ class ReleaseController extends ControllerBase {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;
 
   /**
    * Drupal Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static deployer plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * The static deployer helper.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerHelperInterface
+   * @var StaticDeployerHelperInterface
    */
   protected $staticDeployerHelper;
 
   /**
    * StaticBuilderReleasesController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Drupal language manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer plugin manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerHelperInterface $staticDeployerHelper
+   * @param StaticDeployerHelperInterface $staticDeployerHelper
    *   The static deployer helper.
    */
   public function __construct(
@@ -262,7 +263,7 @@ class ReleaseController extends ControllerBase {
    * @param string $builderId
    *   Static Builder Id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response.
    */
   public function getRunningReleaseData(string $deployerId, string $builderId): JsonResponse {
diff --git a/modules/static_deploy/src/Event/StaticDeployEvent.php b/modules/static_deploy/src/Event/StaticDeployEvent.php
index 8a7fee0..bc9970e 100644
--- a/modules/static_deploy/src/Event/StaticDeployEvent.php
+++ b/modules/static_deploy/src/Event/StaticDeployEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\static_deploy\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\static_deploy\Plugin\StaticDeployerPluginInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Generic static deploy event to be fired.
diff --git a/modules/static_deploy/src/EventSubscriber/EventSubscriber.php b/modules/static_deploy/src/EventSubscriber/EventSubscriber.php
index 61bd84f..285dab0 100644
--- a/modules/static_deploy/src/EventSubscriber/EventSubscriber.php
+++ b/modules/static_deploy/src/EventSubscriber/EventSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_deploy\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\static_build\Event\StaticBuildEvent;
 use Drupal\static_build\Event\StaticBuildEvents;
@@ -17,14 +19,14 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Deployer Manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
@@ -32,18 +34,18 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   Static Deployer Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticDeployerPluginManagerInterface $staticDeployerPluginManager, EntityUtils $entityUtils) {
@@ -63,14 +65,14 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a StaticBuildEvents::ENDS event.
    *
-   * @param \Drupal\static_build\Event\StaticBuildEvent $event
+   * @param StaticBuildEvent $event
    *   The Static Build event.
    *
-   * @return \Drupal\static_build\Event\StaticBuildEvent
+   * @return StaticBuildEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function requestDeploy(StaticBuildEvent $event): StaticBuildEvent {
     // Check if received event is requesting a deploy.
diff --git a/modules/static_deploy/src/Form/SettingsForm.php b/modules/static_deploy/src/Form/SettingsForm.php
index e2ef8d6..801233a 100644
--- a/modules/static_deploy/src/Form/SettingsForm.php
+++ b/modules/static_deploy/src/Form/SettingsForm.php
@@ -21,43 +21,43 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The static deployer plugin manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $static_deployer_manager
+   * @param StaticDeployerPluginManagerInterface $static_deployer_manager
    *   The static deployer plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, MessengerInterface $messenger, RouteProviderInterface $route_provider, StaticDeployerPluginManagerInterface $static_deployer_manager) {
diff --git a/modules/static_deploy/src/Plugin/Derivative/ReleasesListMenu.php b/modules/static_deploy/src/Plugin/Derivative/ReleasesListMenu.php
index 717ebd8..51fe6ce 100644
--- a/modules/static_deploy/src/Plugin/Derivative/ReleasesListMenu.php
+++ b/modules/static_deploy/src/Plugin/Derivative/ReleasesListMenu.php
@@ -19,23 +19,23 @@ class ReleasesListMenu extends DeriverBase implements ContainerDeriverInterface
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
diff --git a/modules/static_deploy/src/Plugin/Derivative/ReleasesListTasks.php b/modules/static_deploy/src/Plugin/Derivative/ReleasesListTasks.php
index 3d2da45..11b3d79 100644
--- a/modules/static_deploy/src/Plugin/Derivative/ReleasesListTasks.php
+++ b/modules/static_deploy/src/Plugin/Derivative/ReleasesListTasks.php
@@ -19,23 +19,23 @@ class ReleasesListTasks extends DeriverBase implements ContainerDeriverInterface
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static deployer manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   The static deployer manager.
    */
   public function __construct(
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
index fd06133..d19e32d 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_deploy\Plugin;
 
+use Drupal\static_build\Release\ReleaseInterface;
+use Drupal\static_build\Release\Task\Task;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -32,28 +35,28 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Drupal file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Release Manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;
 
@@ -67,7 +70,7 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
@@ -88,14 +91,14 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
   /**
    * Current release.
    *
-   * @var \Drupal\static_build\Release\ReleaseInterface
+   * @var ReleaseInterface
    */
   protected $currentRelease;
 
   /**
    * Current release task.
    *
-   * @var \Drupal\static_build\Release\Task\Task
+   * @var Task
    */
   protected $releaseTask;
 
@@ -116,14 +119,14 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
   /**
    * The static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * The static builder that this deployer is using.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginInterface
+   * @var StaticBuilderPluginInterface
    */
   protected $staticBuilder;
 
@@ -136,23 +139,23 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal file system service.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $static_builder_manager
+   * @param StaticBuilderPluginManagerInterface $static_builder_manager
    *   The static builder plugin manager.
-   * @param \Drupal\static_build\Release\ReleaseManager $releaseManager
+   * @param ReleaseManager $releaseManager
    *   The release manager service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function __construct(
     array $configuration,
@@ -181,8 +184,8 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public static function create(ContainerInterface $container,
                                 array $configuration,
@@ -411,8 +414,8 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function setConfiguration(array $configuration) {
     // Check that builder-id option is present.
@@ -458,8 +461,8 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
    * @return array
    *   An associative array with the default configuration.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   protected function baseConfigurationDefaults(string $builderId): array {
     $config = $this->configFactory->get('static_deploy.settings');
@@ -566,7 +569,7 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_deploy\Event\StaticDeployEvent
+   * @return StaticDeployEvent
    *   The event.
    */
   protected function dispatchEvent(string $eventName, array $data = []): StaticDeployEvent {
@@ -575,7 +578,7 @@ abstract class StaticDeployerPluginBase extends PluginBase implements StaticDepl
 
     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");
 
     // Return the event.
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php
index 226e0da..948b85e 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_deploy\Plugin;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
@@ -22,7 +23,7 @@ interface StaticDeployerPluginInterface extends ConfigurableInterface, Dependent
    * It forks a new process if process is asynchronous, or calls run()
    * otherwise.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function init();
 
@@ -31,7 +32,7 @@ interface StaticDeployerPluginInterface extends ConfigurableInterface, Dependent
    *
    * Internally, it calls deploy() or rollback() if needed.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function run();
 
@@ -40,7 +41,7 @@ interface StaticDeployerPluginInterface extends ConfigurableInterface, Dependent
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function deploy(): void;
 
@@ -49,7 +50,7 @@ interface StaticDeployerPluginInterface extends ConfigurableInterface, Dependent
    *
    * This method should be over ridden by plugins to reflect each use case.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function rollback(): void;
 
@@ -78,10 +79,10 @@ interface StaticDeployerPluginInterface extends ConfigurableInterface, Dependent
   /**
    * Get the configured release manager.
    *
-   * @return \Drupal\static_build\Release\ReleaseManagerInterface
+   * @return ReleaseManagerInterface
    *   The current release manager.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function getReleaseManager(): ReleaseManagerInterface;
 
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php
index b5d8f52..b026ed2 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginManager.php
@@ -20,9 +20,9 @@ class StaticDeployerPluginManager extends CacheablePluginManager implements Stat
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -37,10 +37,10 @@ class StaticDeployerPluginManager extends CacheablePluginManager implements Stat
    *
    * Wraps original createInstance() to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created static deployer object instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticDeployerPluginInterface {
@@ -57,7 +57,7 @@ class StaticDeployerPluginManager extends CacheablePluginManager implements Stat
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created static builder object instance, or a previously
    *   instantiated one if available.
    */
diff --git a/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php b/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php
index 9532a62..0b00fe4 100644
--- a/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php
+++ b/modules/static_deploy/src/Plugin/StaticDeployerPluginManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_deploy\Plugin;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -16,7 +18,7 @@ interface StaticDeployerPluginManagerInterface extends PluginManagerInterface, C
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created exporter object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): StaticDeployerPluginInterface;
@@ -26,13 +28,13 @@ interface StaticDeployerPluginManagerInterface extends PluginManagerInterface, C
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_deploy\Plugin\StaticDeployerPluginInterface
+   * @return StaticDeployerPluginInterface
    *   A newly created exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getInstance(array $options): StaticDeployerPluginInterface;
 
diff --git a/modules/static_deploy/src/Routing/RouteSubscriber.php b/modules/static_deploy/src/Routing/RouteSubscriber.php
index 173d9fe..8989539 100644
--- a/modules/static_deploy/src/Routing/RouteSubscriber.php
+++ b/modules/static_deploy/src/Routing/RouteSubscriber.php
@@ -16,23 +16,23 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Static Deployer Manager.
    *
-   * @var \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface
+   * @var StaticDeployerPluginManagerInterface
    */
   protected $staticDeployerPluginManager;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_deploy\Plugin\StaticDeployerPluginManagerInterface $staticDeployerPluginManager
+   * @param StaticDeployerPluginManagerInterface $staticDeployerPluginManager
    *   Static Deployer Manager.
    */
   public function __construct(StaticBuilderPluginManagerInterface $staticBuilderPluginManager, StaticDeployerPluginManagerInterface $staticDeployerPluginManager) {
diff --git a/modules/static_export/modules/static_export_graphql_data_resolver/src/Config/ConfigOverrider.php b/modules/static_export/modules/static_export_graphql_data_resolver/src/Config/ConfigOverrider.php
index 07444f4..cb6204f 100644
--- a/modules/static_export/modules/static_export_graphql_data_resolver/src/Config/ConfigOverrider.php
+++ b/modules/static_export/modules/static_export_graphql_data_resolver/src/Config/ConfigOverrider.php
@@ -16,21 +16,21 @@ class ConfigOverrider implements ConfigFactoryOverrideInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
diff --git a/modules/static_export/modules/static_export_graphql_data_resolver/src/EventSubscriber/ExportableEntityListEventSubscriber.php b/modules/static_export/modules/static_export_graphql_data_resolver/src/EventSubscriber/ExportableEntityListEventSubscriber.php
index 65fea8e..7c493a9 100644
--- a/modules/static_export/modules/static_export_graphql_data_resolver/src/EventSubscriber/ExportableEntityListEventSubscriber.php
+++ b/modules/static_export/modules/static_export_graphql_data_resolver/src/EventSubscriber/ExportableEntityListEventSubscriber.php
@@ -19,14 +19,14 @@ class ExportableEntityListEventSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -44,10 +44,10 @@ class ExportableEntityListEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a ExportableEntityListEvents::ROW_BUILT event.
    *
-   * @param \Drupal\static_export\Event\ExportableEntityListEvent $event
+   * @param ExportableEntityListEvent $event
    *   The Exportable Entity List event.
    *
-   * @return \Drupal\static_export\Event\ExportableEntityListEvent
+   * @return ExportableEntityListEvent
    *   The processed event.
    */
   public function onRowBuilt(ExportableEntityListEvent $event): ExportableEntityListEvent {
diff --git a/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandler.php b/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandler.php
index 6f6121b..95c158a 100644
--- a/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandler.php
+++ b/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandler.php
@@ -23,21 +23,21 @@ class GraphqlQueryHandler implements GraphqlQueryHandlerInterface {
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -51,31 +51,31 @@ class GraphqlQueryHandler implements GraphqlQueryHandlerInterface {
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * The static suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtils
+   * @var StaticSuiteUtils
    */
   protected $staticSuiteUtils;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $accountSwitcher
+   * @param AccountSwitcherInterface $accountSwitcher
    *   The account switcher.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
    * @param \Drupal\graphql\GraphQL\Execution\QueryProcessor $queryProcessor
    *   GraphQL query processor.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Entity utils service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtils $staticSuiteUtils
+   * @param StaticSuiteUtils $staticSuiteUtils
    *   The static suite utils.
    */
   public function __construct(AccountSwitcherInterface $accountSwitcher,
diff --git a/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandlerInterface.php b/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandlerInterface.php
index 21d47dd..34d8e63 100644
--- a/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandlerInterface.php
+++ b/modules/static_export/modules/static_export_graphql_data_resolver/src/GraphqlQueryHandlerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export_graphql_data_resolver;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -23,15 +25,15 @@ interface GraphqlQueryHandlerInterface {
    * @return array
    *   The query result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function query(string $graphqlQuery, array $variables = []): array;
 
   /**
    * Get the contents of a GraphQL query file for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the GraphQL file contents are obtained.
    * @param string|null $variant
    *   Variant key, optional.
@@ -39,15 +41,15 @@ interface GraphqlQueryHandlerInterface {
    * @return string|null
    *   The contents of a GraphQL query file.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
    */
   public function getQueryFileContents(EntityInterface $entity, string $variant = NULL): ?string;
 
   /**
    * Get an array of possible variables to be used in a GraphQL query.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the GraphQL query variables are obtained.
    * @param string|null $langcode
    *   Optional language.
diff --git a/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/Resolver/GraphqlDataResolver.php b/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/Resolver/GraphqlDataResolver.php
index 8433528..ee3f9d4 100644
--- a/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/Resolver/GraphqlDataResolver.php
+++ b/modules/static_export/modules/static_export_graphql_data_resolver/src/Plugin/static_export/Data/Resolver/GraphqlDataResolver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export_graphql_data_resolver\Plugin\static_export\Data\Resolver;
 
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginBase;
@@ -25,21 +27,21 @@ class GraphqlDataResolver extends DataResolverPluginBase {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * Handler for querying GraphQL.
    *
-   * @var \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface
+   * @var GraphqlQueryHandlerInterface
    */
   protected $graphqlQueryHandler;
 
@@ -52,11 +54,11 @@ class GraphqlDataResolver extends DataResolverPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Entity utils service.
-   * @param \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface $graphqlQueryHandler
+   * @param GraphqlQueryHandlerInterface $graphqlQueryHandler
    *   Service for querying GraphQL.
    */
   public function __construct(array $configuration,
@@ -88,8 +90,8 @@ class GraphqlDataResolver extends DataResolverPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function resolve(EntityInterface $entity, string $variant = NULL, string $langcode = NULL): array {
     $query = $this->graphqlQueryHandler->getQueryFileContents($entity, $variant);
diff --git a/modules/static_export/modules/static_export_jsonapi_data_resolver/src/JsonapiRequestHandler.php b/modules/static_export/modules/static_export_jsonapi_data_resolver/src/JsonapiRequestHandler.php
index a61898e..80871d3 100644
--- a/modules/static_export/modules/static_export_jsonapi_data_resolver/src/JsonapiRequestHandler.php
+++ b/modules/static_export/modules/static_export_jsonapi_data_resolver/src/JsonapiRequestHandler.php
@@ -13,14 +13,14 @@ class JsonapiRequestHandler implements JsonapiRequestHandlerInterface {
   /**
    * Symfony\Component\HttpKernel\HttpKernelInterface definition.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   Http kernel service.
    */
   public function __construct(HttpKernelInterface $http_kernel) {
diff --git a/modules/static_export/modules/static_export_jsonapi_data_resolver/src/Plugin/static_export/Data/Resolver/JsonapiDataResolver.php b/modules/static_export/modules/static_export_jsonapi_data_resolver/src/Plugin/static_export/Data/Resolver/JsonapiDataResolver.php
index 6100bb3..289cbbf 100644
--- a/modules/static_export/modules/static_export_jsonapi_data_resolver/src/Plugin/static_export/Data/Resolver/JsonapiDataResolver.php
+++ b/modules/static_export/modules/static_export_jsonapi_data_resolver/src/Plugin/static_export/Data/Resolver/JsonapiDataResolver.php
@@ -23,14 +23,14 @@ class JsonapiDataResolver extends DataResolverPluginBase {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Handler for requesting data from JSON:API.
    *
-   * @var \Drupal\static_export_jsonapi_data_resolver\JsonapiRequestHandlerInterface
+   * @var JsonapiRequestHandlerInterface
    */
   protected $jsonApiRequestHandler;
 
@@ -43,9 +43,9 @@ class JsonapiDataResolver extends DataResolverPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_export_jsonapi_data_resolver\JsonapiRequestHandlerInterface $jsonApiRequestHandler
+   * @param JsonapiRequestHandlerInterface $jsonApiRequestHandler
    *   Handler for requesting data from JSON:API.
    */
   public function __construct(
diff --git a/modules/static_export/modules/static_export_jsonapi_data_resolver/static_export_jsonapi_data_resolver.module b/modules/static_export/modules/static_export_jsonapi_data_resolver/static_export_jsonapi_data_resolver.module
index 17834d2..0b79ab6 100644
--- a/modules/static_export/modules/static_export_jsonapi_data_resolver/static_export_jsonapi_data_resolver.module
+++ b/modules/static_export/modules/static_export_jsonapi_data_resolver/static_export_jsonapi_data_resolver.module
@@ -68,7 +68,7 @@ function static_export_jsonapi_data_resolver_form_alter(&$form, FormStateInterfa
  *
  * @param array $form
  *   Form array
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state
  */
 function _static_export_jsonapi_data_resolver_form_validate($form, FormStateInterface $form_state) {
@@ -86,7 +86,7 @@ function _static_export_jsonapi_data_resolver_form_validate($form, FormStateInte
  *
  * @param array $form
  *   Form array
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state
  */
 function _static_export_jsonapi_data_resolver_form_submit($form, FormStateInterface $form_state) {
diff --git a/modules/static_export/src/Annotation/StaticDataIncludeLoader.php b/modules/static_export/src/Annotation/StaticDataIncludeLoader.php
index 11a125a..e7b8ea4 100644
--- a/modules/static_export/src/Annotation/StaticDataIncludeLoader.php
+++ b/modules/static_export/src/Annotation/StaticDataIncludeLoader.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class StaticDataIncludeLoader extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class StaticDataIncludeLoader extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_export/src/Annotation/StaticDataResolver.php b/modules/static_export/src/Annotation/StaticDataResolver.php
index 26ebb71..8cf4f91 100644
--- a/modules/static_export/src/Annotation/StaticDataResolver.php
+++ b/modules/static_export/src/Annotation/StaticDataResolver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class StaticDataResolver extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class StaticDataResolver extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_export/src/Annotation/StaticExporterAnnotationBase.php b/modules/static_export/src/Annotation/StaticExporterAnnotationBase.php
index b0a7454..73299da 100644
--- a/modules/static_export/src/Annotation/StaticExporterAnnotationBase.php
+++ b/modules/static_export/src/Annotation/StaticExporterAnnotationBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -22,7 +23,7 @@ abstract class StaticExporterAnnotationBase extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -31,7 +32,7 @@ abstract class StaticExporterAnnotationBase extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_export/src/Annotation/StaticOutputFormatter.php b/modules/static_export/src/Annotation/StaticOutputFormatter.php
index a9aca2e..4641c8b 100644
--- a/modules/static_export/src/Annotation/StaticOutputFormatter.php
+++ b/modules/static_export/src/Annotation/StaticOutputFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class StaticOutputFormatter extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class StaticOutputFormatter extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_export/src/Annotation/StaticPagePathUriResolver.php b/modules/static_export/src/Annotation/StaticPagePathUriResolver.php
index 0a32804..a87471f 100644
--- a/modules/static_export/src/Annotation/StaticPagePathUriResolver.php
+++ b/modules/static_export/src/Annotation/StaticPagePathUriResolver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class StaticPagePathUriResolver extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class StaticPagePathUriResolver extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/static_export/src/Commands/ConfigCommands.php b/modules/static_export/src/Commands/ConfigCommands.php
index 65fd9c5..4dd115d 100644
--- a/modules/static_export/src/Commands/ConfigCommands.php
+++ b/modules/static_export/src/Commands/ConfigCommands.php
@@ -18,32 +18,32 @@ class ConfigCommands extends DrushCommands {
   /**
    * Drupal's config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;
 
   /**
    * File collection formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;
 
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal's config factory.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   Config exporter manager.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $file_collection_formatter
+   * @param FileCollectionFormatter $file_collection_formatter
    *   File collection formatter.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigExporterPluginManagerInterface $configExporterManager, FileCollectionFormatter $file_collection_formatter) {
diff --git a/modules/static_export/src/Commands/CopyDataCommands.php b/modules/static_export/src/Commands/CopyDataCommands.php
index e3cb910..2a4c10d 100644
--- a/modules/static_export/src/Commands/CopyDataCommands.php
+++ b/modules/static_export/src/Commands/CopyDataCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Commands;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_suite\Lock\LockBackendInterface;
@@ -17,7 +18,7 @@ class CopyDataCommands extends DrushCommands {
   /**
    * Drupal's config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -31,9 +32,9 @@ class CopyDataCommands extends DrushCommands {
   /**
    * StaticExportCopyDataCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal's config factory.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LockBackendInterface $lock) {
@@ -51,7 +52,7 @@ class CopyDataCommands extends DrushCommands {
    *   An associative array of options whose values come
    *   from cli, aliases, config, etc.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    * @command static-export:copy-data-dir
    *
    * @option tar target tar file
diff --git a/modules/static_export/src/Commands/CustomCommands.php b/modules/static_export/src/Commands/CustomCommands.php
index bc50640..506ec69 100644
--- a/modules/static_export/src/Commands/CustomCommands.php
+++ b/modules/static_export/src/Commands/CustomCommands.php
@@ -17,23 +17,23 @@ class CustomCommands extends DrushCommands {
   /**
    * Custom exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterPluginManager;
 
   /**
    * File collection formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterPluginManager
+   * @param CustomExporterPluginManagerInterface $customExporterPluginManager
    *   Custom exporter manager.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $file_collection_formatter
+   * @param FileCollectionFormatter $file_collection_formatter
    *   File collection formatter.
    */
   public function __construct(CustomExporterPluginManagerInterface $customExporterPluginManager, FileCollectionFormatter $file_collection_formatter) {
diff --git a/modules/static_export/src/Commands/EntityCommands.php b/modules/static_export/src/Commands/EntityCommands.php
index 25e581c..6d887f2 100644
--- a/modules/static_export/src/Commands/EntityCommands.php
+++ b/modules/static_export/src/Commands/EntityCommands.php
@@ -19,34 +19,34 @@ class EntityCommands extends DrushCommands {
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;
 
   /**
    * Entity Exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;
 
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   Entity Exporter Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $fileCollectionFormatter
+   * @param FileCollectionFormatter $fileCollectionFormatter
    *   File collection formatter.
    */
   public function __construct(
diff --git a/modules/static_export/src/Commands/LocaleCommands.php b/modules/static_export/src/Commands/LocaleCommands.php
index f2b3fe3..f127003 100644
--- a/modules/static_export/src/Commands/LocaleCommands.php
+++ b/modules/static_export/src/Commands/LocaleCommands.php
@@ -18,32 +18,32 @@ class LocaleCommands extends DrushCommands {
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;
 
   /**
    * File collection formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;
 
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Locale exporter manager.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $file_collection_formatter
+   * @param FileCollectionFormatter $file_collection_formatter
    *   File collection formatter.
    */
   public function __construct(LanguageManagerInterface $language_manager, LocaleExporterPluginManagerInterface $localeExporterManager, FileCollectionFormatter $file_collection_formatter) {
diff --git a/modules/static_export/src/Commands/StreamWrapperCommands.php b/modules/static_export/src/Commands/StreamWrapperCommands.php
index 2bb46f6..4551f34 100644
--- a/modules/static_export/src/Commands/StreamWrapperCommands.php
+++ b/modules/static_export/src/Commands/StreamWrapperCommands.php
@@ -16,24 +16,24 @@ class StreamWrapperCommands extends DrushCommands {
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * StaticExportCommands constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    */
   public function __construct(FileSystemInterface $fileSystem, UriFactoryInterface $uriFactory) {
diff --git a/modules/static_export/src/Config/ConfigOverrider.php b/modules/static_export/src/Config/ConfigOverrider.php
index 74eeff8..cdf63a4 100644
--- a/modules/static_export/src/Config/ConfigOverrider.php
+++ b/modules/static_export/src/Config/ConfigOverrider.php
@@ -16,22 +16,22 @@ class ConfigOverrider implements ConfigFactoryOverrideInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, StaticSuiteUtilsInterface $static_suite_utils) {
diff --git a/modules/static_export/src/Controller/CustomExporterList.php b/modules/static_export/src/Controller/CustomExporterList.php
index a6217f5..b1833fc 100644
--- a/modules/static_export/src/Controller/CustomExporterList.php
+++ b/modules/static_export/src/Controller/CustomExporterList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Render\Markup;
@@ -19,25 +20,25 @@ class CustomExporterList extends ControllerBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The custom exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $routeProvider
+   * @param RouteProviderInterface $routeProvider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterManager
+   * @param CustomExporterPluginManagerInterface $customExporterManager
    *   The custom exporter manager.
    */
   public function __construct(LanguageManagerInterface $languageManager, RouteProviderInterface $routeProvider, CustomExporterPluginManagerInterface $customExporterManager) {
@@ -60,7 +61,7 @@ class CustomExporterList extends ControllerBase {
   /**
    * Get a list of custom exporters.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function listCustomExporters(): array {
 
diff --git a/modules/static_export/src/Controller/DataResolversList.php b/modules/static_export/src/Controller/DataResolversList.php
index 0c41171..c276a60 100644
--- a/modules/static_export/src/Controller/DataResolversList.php
+++ b/modules/static_export/src/Controller/DataResolversList.php
@@ -16,23 +16,23 @@ class DataResolversList extends ControllerBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The data resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface $dataResolverManager
+   * @param DataResolverPluginManagerInterface $dataResolverManager
    *   The resolver manager.
    */
   public function __construct(RouteProviderInterface $route_provider, DataResolverPluginManagerInterface $dataResolverManager) {
diff --git a/modules/static_export/src/Controller/ExportableConfigList.php b/modules/static_export/src/Controller/ExportableConfigList.php
index e9d9319..6661e11 100644
--- a/modules/static_export/src/Controller/ExportableConfigList.php
+++ b/modules/static_export/src/Controller/ExportableConfigList.php
@@ -15,14 +15,14 @@ class ExportableConfigList extends ControllerBase {
   /**
    * The config exporter path resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface
+   * @var ConfigExporterUriResolverInterface
    */
   protected $configExporterUriResolver;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface $configExporterUriResolver
+   * @param ConfigExporterUriResolverInterface $configExporterUriResolver
    *   The config exporter path resolver.
    */
   public function __construct(ConfigExporterUriResolverInterface $configExporterUriResolver) {
@@ -65,7 +65,7 @@ class ExportableConfigList extends ControllerBase {
             'view' => [
               'title' => $this->t('View'),
               'weight' => 10,
-              'url' => Url::fromUri(file_create_url($exportUri)),
+              'url' => \Drupal::service('file_url_generator')->generate($exportUri),
               'attributes' => [
                 'target' => '_blank',
               ],
diff --git a/modules/static_export/src/Controller/ExportableEntityListBuilder.php b/modules/static_export/src/Controller/ExportableEntityListBuilder.php
index 7c130a4..21b39f3 100644
--- a/modules/static_export/src/Controller/ExportableEntityListBuilder.php
+++ b/modules/static_export/src/Controller/ExportableEntityListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export\Controller;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -26,63 +28,63 @@ class ExportableEntityListBuilder extends ConfigEntityListBuilder {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * The resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;
 
   /**
    * The output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $exporterOutputConfigFactory;
 
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
-   * @param \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface $dataResolverManager
+   * @param DataResolverPluginManagerInterface $dataResolverManager
    *   The data resolver manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $exporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $exporterOutputConfigFactory
    *   The output configuration factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory, EventDispatcherInterface $event_dispatcher, LanguageManagerInterface $languageManager, OutputFormatterPluginManagerInterface $outputFormatterManager, DataResolverPluginManagerInterface $dataResolverManager, ExporterOutputConfigFactoryInterface $exporterOutputConfigFactory) {
@@ -128,14 +130,14 @@ class ExportableEntityListBuilder extends ConfigEntityListBuilder {
     // alter this table's output.
     $event = new ExportableEntityListEvent();
     $event->setData(['header' => $finalHeader]);
-    $processedEvent = $this->eventDispatcher->dispatch(ExportableEntityListEvents::HEADER_BUILT, $event);
+    $processedEvent = $this->eventDispatcher->dispatch($event, ExportableEntityListEvents::HEADER_BUILT);
     return $processedEvent->getData()['header'];
   }
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function buildRow(EntityInterface $entity) {
     $row['label'] = $entity->label();
@@ -164,7 +166,7 @@ class ExportableEntityListBuilder extends ConfigEntityListBuilder {
       // alter this table's output.
       $event = new ExportableEntityListEvent();
       $event->setData(['row' => $finalRow, 'entity' => $entity]);
-      $processedEvent = $this->eventDispatcher->dispatch(ExportableEntityListEvents::ROW_BUILT, $event);
+      $processedEvent = $this->eventDispatcher->dispatch($event, ExportableEntityListEvents::ROW_BUILT);
       return $processedEvent->getData()['row'];
     }
     return $row;
diff --git a/modules/static_export/src/Controller/ExportableLocaleList.php b/modules/static_export/src/Controller/ExportableLocaleList.php
index 865ae44..26128ce 100644
--- a/modules/static_export/src/Controller/ExportableLocaleList.php
+++ b/modules/static_export/src/Controller/ExportableLocaleList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Url;
@@ -18,34 +19,34 @@ class ExportableLocaleList extends ControllerBase {
   /**
    * The locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;
 
   /**
    * The exported locale file resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\Output\Uri\Resolver\LocaleExporterUriResolverInterface
+   * @var LocaleExporterUriResolverInterface
    */
   protected $localeExporterUriResolver;
 
   /**
    * The locale output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $localeExporterOutputConfigFactory;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   The locale exporter manager.
-   * @param \Drupal\static_export\Exporter\Type\Locale\Output\Uri\Resolver\LocaleExporterUriResolverInterface $localeExporterUriResolver
+   * @param LocaleExporterUriResolverInterface $localeExporterUriResolver
    *   Locale exporter path resolver.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
    *   The locale output configuration factory.
    */
   public function __construct(LanguageManagerInterface $languageManager, LocaleExporterPluginManagerInterface $localeExporterManager, LocaleExporterUriResolverInterface $localeExporterUriResolver, ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory) {
@@ -70,7 +71,7 @@ class ExportableLocaleList extends ControllerBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function listExportableLocales() {
     $config = $this->config('static_export.settings');
@@ -102,7 +103,7 @@ class ExportableLocaleList extends ControllerBase {
                 'view' => [
                   'title' => $this->t('View'),
                   'weight' => 10,
-                  'url' => Url::fromUri(file_create_url($exportUri)),
+                  'url' => \Drupal::service('file_url_generator')->generate($exportUri),
                   'attributes' => [
                     'target' => '_blank',
                   ],
diff --git a/modules/static_export/src/Controller/ExportedUriResolverController.php b/modules/static_export/src/Controller/ExportedUriResolverController.php
index db9356a..e2e58d8 100644
--- a/modules/static_export/src/Controller/ExportedUriResolverController.php
+++ b/modules/static_export/src/Controller/ExportedUriResolverController.php
@@ -19,32 +19,32 @@ class ExportedUriResolverController extends ControllerBase {
   /**
    * Entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;
 
   /**
    * Entity exporter path resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolverInterface
+   * @var EntityExporterUriResolverInterface
    */
   protected $entityExporterUriResolver;
 
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface
+   * @var PagePathUriResolverInterface
    */
   protected $pagePathUriResolver;
 
   /**
    * Resolver controller constructor.
    *
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
-   * @param \Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolverInterface $entityExporterUriResolver
+   * @param EntityExporterUriResolverInterface $entityExporterUriResolver
    *   Exported URI resolver.
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface $pagePathUriResolver
+   * @param PagePathUriResolverInterface $pagePathUriResolver
    *   The URI resolver for page paths.
    */
   public function __construct(
@@ -83,7 +83,7 @@ class ExportedUriResolverController extends ControllerBase {
    * @param string|null $langcode
    *   Optional language id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function getExportedUriByEntityData(string $entityTypeId, string $entityId, string $langcode = NULL): JsonResponse {
@@ -106,10 +106,10 @@ class ExportedUriResolverController extends ControllerBase {
    * meant to be accessed from outside Drupal, so we make the scheme visible
    * to make it usable.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function getExportedUriByPagePath(Request $request): JsonResponse {
diff --git a/modules/static_export/src/Controller/FileViewerController.php b/modules/static_export/src/Controller/FileViewerController.php
index e5db427..a575c07 100644
--- a/modules/static_export/src/Controller/FileViewerController.php
+++ b/modules/static_export/src/Controller/FileViewerController.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\static_export\Controller;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface;
 use Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -23,55 +23,55 @@ class FileViewerController extends ControllerBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $uriFactory;
 
   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * The data include loader.
    *
-   * @var \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface
+   * @var DataIncludeLoaderInterface
    */
   protected $dataIncludeLoader;
 
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param MimeTypesInterface $mimeTypeGuesser
    *   The mime type guesser.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
-   * @param \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface $dataIncludeLoader
+   * @param DataIncludeLoaderInterface $dataIncludeLoader
    *   The data include loader.
    */
   public function __construct(
     AccountProxyInterface $current_user,
-    MimeTypeGuesserInterface $mimeTypeGuesser,
+    MimeTypesInterface $mimeTypeGuesser,
     UriFactoryInterface $uriFactory,
     OutputFormatterPluginManagerInterface $outputFormatterManager,
     DataIncludeLoaderInterface $dataIncludeLoader
@@ -101,10 +101,10 @@ class FileViewerController extends ControllerBase {
   /**
    * Controller to return a POST or a GET parameter.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function viewPath(Request $request) {
diff --git a/modules/static_export/src/Controller/LogViewerController.php b/modules/static_export/src/Controller/LogViewerController.php
index d7e8047..cbf5099 100644
--- a/modules/static_export/src/Controller/LogViewerController.php
+++ b/modules/static_export/src/Controller/LogViewerController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -18,7 +19,7 @@ class LogViewerController extends ControllerBase {
   /**
    * FileViewer controller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -40,7 +41,7 @@ class LogViewerController extends ControllerBase {
    * @param string $uniqueId
    *   A unique id from a export operation.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return RedirectResponse|Response
    *   The response.
    */
   public function viewExportLog(string $uniqueId) {
diff --git a/modules/static_export/src/Controller/OutputFormattersList.php b/modules/static_export/src/Controller/OutputFormattersList.php
index 50bde7b..2d82c05 100644
--- a/modules/static_export/src/Controller/OutputFormattersList.php
+++ b/modules/static_export/src/Controller/OutputFormattersList.php
@@ -16,23 +16,23 @@ class OutputFormattersList extends ControllerBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
    */
   public function __construct(RouteProviderInterface $route_provider, OutputFormatterPluginManagerInterface $outputFormatterManager) {
diff --git a/modules/static_export/src/Entity/ExportableEntityInterface.php b/modules/static_export/src/Entity/ExportableEntityInterface.php
index f6a1c1a..ad77bc1 100644
--- a/modules/static_export/src/Entity/ExportableEntityInterface.php
+++ b/modules/static_export/src/Entity/ExportableEntityInterface.php
@@ -76,7 +76,7 @@ interface ExportableEntityInterface extends ConfigEntityInterface {
   /**
    * Get export extension.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to get extension from.
    *
    * @return string
@@ -92,7 +92,7 @@ interface ExportableEntityInterface extends ConfigEntityInterface {
    * Injection. Drupal Core uses a different strategy for such cases, where
    * dependencies are returned by a wrapper method like this one.
    *
-   * @return \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @return OutputFormatterPluginManagerInterface
    */
   public function outputFormatterManager(): OutputFormatterPluginManagerInterface;
 
diff --git a/modules/static_export/src/Entity/ExportableEntityManager.php b/modules/static_export/src/Entity/ExportableEntityManager.php
index 0aeafac..a51a2cd 100644
--- a/modules/static_export/src/Entity/ExportableEntityManager.php
+++ b/modules/static_export/src/Entity/ExportableEntityManager.php
@@ -15,14 +15,14 @@ class ExportableEntityManager implements ExportableEntityManagerInterface {
   /**
    * Entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;
 
   /**
    * ExportableEntityManager constructor.
    *
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
    */
   public function __construct(EntityUtilsInterface $entityUtils) {
@@ -32,8 +32,8 @@ class ExportableEntityManager implements ExportableEntityManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getAllExportableEntities(): array {
     $allExportableEntities = [];
@@ -48,8 +48,8 @@ class ExportableEntityManager implements ExportableEntityManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getExportableEntitiesThatAreStatifiedPages(): array {
     $exportableEntitiesThatAreStatifiedPages = [];
diff --git a/modules/static_export/src/Entity/ExportableEntityManagerInterface.php b/modules/static_export/src/Entity/ExportableEntityManagerInterface.php
index 93db560..b9fca39 100644
--- a/modules/static_export/src/Entity/ExportableEntityManagerInterface.php
+++ b/modules/static_export/src/Entity/ExportableEntityManagerInterface.php
@@ -28,10 +28,10 @@ interface ExportableEntityManagerInterface {
   /**
    * Given an entity, get its ExportableEntity with its export config.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
-   * @return \Drupal\static_export\Entity\ExportableEntityInterface|null
+   * @return ExportableEntityInterface|null
    *   The ExportableEntity for the $entity param
    */
   public function getExportableEntity(EntityInterface $entity): ?ExportableEntityInterface;
@@ -39,7 +39,7 @@ interface ExportableEntityManagerInterface {
   /**
    * Tells whether an entity is exportable (exists and it's enabled).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to be checked.
    *
    * @return bool
diff --git a/modules/static_export/src/Event/ExportableEntityListEvent.php b/modules/static_export/src/Event/ExportableEntityListEvent.php
index b440ce8..89359d2 100644
--- a/modules/static_export/src/Event/ExportableEntityListEvent.php
+++ b/modules/static_export/src/Event/ExportableEntityListEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\static_export\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event for Exportable Entity List.
diff --git a/modules/static_export/src/Event/StaticExportEvent.php b/modules/static_export/src/Event/StaticExportEvent.php
index 65a5ec0..e9e16c5 100644
--- a/modules/static_export/src/Event/StaticExportEvent.php
+++ b/modules/static_export/src/Event/StaticExportEvent.php
@@ -2,11 +2,12 @@
 
 namespace Drupal\static_export\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\File\FileCollection;
 use Drupal\static_export\File\FileCollectionGroup;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Generic static export event to be fired.
@@ -31,14 +32,14 @@ class StaticExportEvent extends Event {
   /**
    * The exporter that triggers the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;
 
   /**
    * An ExporterOutputConfig object.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @var ExporterOutputConfigInterface
    */
   protected $outputConfig;
 
@@ -66,21 +67,21 @@ class StaticExportEvent extends Event {
   /**
    * Array of translation languages.
    *
-   * @var \Drupal\Core\Language\LanguageInterface[]
+   * @var LanguageInterface[]
    */
   protected $translationLanguages;
 
   /**
    * A FileCollection with processed files.
    *
-   * @var \Drupal\static_export\File\FileCollection
+   * @var FileCollection
    */
   protected $fileCollection;
 
   /**
    * A FileCollectionGroup with processed files.
    *
-   * @var \Drupal\static_export\File\FileCollectionGroup
+   * @var FileCollectionGroup
    */
   protected $fileCollectionGroup;
 
@@ -94,7 +95,7 @@ class StaticExportEvent extends Event {
   /**
    * Constructs the object.
    *
-   * @param \Drupal\static_export\Exporter\ExporterPluginInterface $exporter
+   * @param ExporterPluginInterface $exporter
    *   The exporter.
    */
   public function __construct(ExporterPluginInterface $exporter) {
@@ -104,7 +105,7 @@ class StaticExportEvent extends Event {
   /**
    * Get the exporter.
    *
-   * @return \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @return ExporterPluginInterface
    *   The exporter.
    */
   public function getExporter(): ExporterPluginInterface {
@@ -114,7 +115,7 @@ class StaticExportEvent extends Event {
   /**
    * Get config data.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface|null
+   * @return ExporterOutputConfigInterface|null
    *   Config data.
    */
   public function getOutputConfig(): ?ExporterOutputConfigInterface {
@@ -124,7 +125,7 @@ class StaticExportEvent extends Event {
   /**
    * Sets config data.
    *
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface $outputConfig
+   * @param ExporterOutputConfigInterface $outputConfig
    *   Output config.
    */
   public function setOutputConfig(ExporterOutputConfigInterface $outputConfig): void {
@@ -194,7 +195,7 @@ class StaticExportEvent extends Event {
   /**
    * Get translation languages.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]|null
+   * @return LanguageInterface[]|null
    *   Array of translation languages.
    */
   public function getTranslationLanguages(): ?array {
@@ -204,7 +205,7 @@ class StaticExportEvent extends Event {
   /**
    * Set translation languages.
    *
-   * @param \Drupal\Core\Language\LanguageInterface[] $translationLanguages
+   * @param LanguageInterface[] $translationLanguages
    *   Array of translation languages.
    */
   public function setTranslationLanguages(array $translationLanguages): void {
@@ -214,7 +215,7 @@ class StaticExportEvent extends Event {
   /**
    * Get FileCollection.
    *
-   * @return \Drupal\static_export\File\FileCollection|null
+   * @return FileCollection|null
    *   Exporter's FileCollection.
    */
   public function getFileCollection(): ?FileCollection {
@@ -224,7 +225,7 @@ class StaticExportEvent extends Event {
   /**
    * Set exporter's FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   A FileCollection.
    */
   public function setFileCollection(FileCollection $fileCollection): void {
@@ -234,7 +235,7 @@ class StaticExportEvent extends Event {
   /**
    * Get FileCollectionGroup.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup|null
+   * @return FileCollectionGroup|null
    *   A FileCollectionGroup.
    */
   public function getFileCollectionGroup(): ?FileCollectionGroup {
@@ -264,7 +265,7 @@ class StaticExportEvent extends Event {
   /**
    * Set exporter's FileCollectionGroup.
    *
-   * @param \Drupal\static_export\File\FileCollectionGroup $fileCollectionGroup
+   * @param FileCollectionGroup $fileCollectionGroup
    *   A FileCollectionGroup.
    */
   public function setFileCollectionGroup(FileCollectionGroup $fileCollectionGroup): void {
diff --git a/modules/static_export/src/EventSubscriber/ConfigEventSubscriber.php b/modules/static_export/src/EventSubscriber/ConfigEventSubscriber.php
index a9e0887..6ca7549 100644
--- a/modules/static_export/src/EventSubscriber/ConfigEventSubscriber.php
+++ b/modules/static_export/src/EventSubscriber/ConfigEventSubscriber.php
@@ -24,48 +24,48 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;
 
   /**
    * Messenger service.
    *
-   * @var \Drupal\static_export\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Static Suite Utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * The exporter that will handle the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   Config exporter manager.
-   * @param \Drupal\static_export\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   Messenger service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $staticSuiteUtils
+   * @param StaticSuiteUtilsInterface $staticSuiteUtils
    *   Static Suite Utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ConfigExporterPluginManagerInterface $configExporterManager, Messenger $messenger, StaticSuiteUtilsInterface $staticSuiteUtils) {
@@ -91,7 +91,7 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ -105,7 +105,7 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a save override event.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ -123,7 +123,7 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
    * ExporterPluginInterface::OPERATION_DELETE operation on the exporter, since
    * the whole configuration object is being deleted, not only a translation.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ -142,7 +142,7 @@ class ConfigEventSubscriber implements EventSubscriberInterface {
    * configuration translation is deleted, the configuration object still exists
    * and needs to be re-exported.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    *
    * @return bool
diff --git a/modules/static_export/src/EventSubscriber/EntityReferenceEventSubscriber.php b/modules/static_export/src/EventSubscriber/EntityReferenceEventSubscriber.php
index 9ffa6e8..2296d07 100644
--- a/modules/static_export/src/EventSubscriber/EntityReferenceEventSubscriber.php
+++ b/modules/static_export/src/EventSubscriber/EntityReferenceEventSubscriber.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\static_export\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\node\Entity\Node;
 use Drupal\static_export\Entity\ExportableEntityManagerInterface;
 use Drupal\static_export\Event\StaticExportEvent;
@@ -21,41 +26,41 @@ class EntityReferenceEventSubscriber implements EventSubscriberInterface {
   /**
    * Entity exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;
 
   /**
    * Entity reference finder.
    *
-   * @var \Drupal\static_suite\Entity\EntityReferenceFinderInterface
+   * @var EntityReferenceFinderInterface
    */
   protected $entityReferenceFinder;
 
   /**
    * Exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * Constructs the EntityEventSubscriber object.
    *
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   Exporter Manager.
-   * @param \Drupal\static_suite\Entity\EntityReferenceFinderInterface $entityReferenceFinder
+   * @param EntityReferenceFinderInterface $entityReferenceFinder
    *   Entity reference finder.
-   * @param \Drupal\static_export\Entity\ExportableEntityManagerInterface $exportableEntityManager
+   * @param ExportableEntityManagerInterface $exportableEntityManager
    *   Exportable entity manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entity_utils
+   * @param EntityUtils $entity_utils
    *   Utils for working with entities.
    */
   public function __construct(EntityExporterPluginManagerInterface $entityExporterPluginManager, EntityReferenceFinderInterface $entityReferenceFinder, ExportableEntityManagerInterface $exportableEntityManager, EntityUtils $entity_utils) {
@@ -76,17 +81,17 @@ class EntityReferenceEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a StaticExportEvents::WRITE_STARTS event.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
+   * @throws StaticSuiteException
    */
   public function onWriteStarts(StaticExportEvent $event): StaticExportEvent {
     $eventExporter = $event->getExporter();
@@ -134,15 +139,15 @@ class EntityReferenceEventSubscriber implements EventSubscriberInterface {
   /**
    * Exports entities referenced by the original one.
    *
-   * @param \Drupal\static_export\Exporter\ExporterPluginInterface $entityExporter
+   * @param ExporterPluginInterface $entityExporter
    *   The event entity exporter.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *   A file collection.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteUserException
+   * @throws StaticSuiteException
    */
   protected function exportReferencedEntities(ExporterPluginInterface $entityExporter): FileCollection {
     $fileCollection = new FileCollection($entityExporter->uniqueId());
diff --git a/modules/static_export/src/EventSubscriber/LanguageConfigEventSubscriber.php b/modules/static_export/src/EventSubscriber/LanguageConfigEventSubscriber.php
index 230d7cf..b1e208e 100644
--- a/modules/static_export/src/EventSubscriber/LanguageConfigEventSubscriber.php
+++ b/modules/static_export/src/EventSubscriber/LanguageConfigEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\EventSubscriber;
 
+use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ -23,48 +24,48 @@ class LanguageConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Custom exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterPluginManager;
 
   /**
    * Messenger service.
    *
-   * @var \Drupal\static_export\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Static Suite Utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * The exporter that will handle the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory.
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterPluginManager
+   * @param CustomExporterPluginManagerInterface $customExporterPluginManager
    *   Custom exporter manager.
-   * @param \Drupal\static_export\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   Messenger service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $staticSuiteUtils
+   * @param StaticSuiteUtilsInterface $staticSuiteUtils
    *   Static Suite Utils.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CustomExporterPluginManagerInterface $customExporterPluginManager, Messenger $messenger, StaticSuiteUtilsInterface $staticSuiteUtils) {
@@ -89,7 +90,7 @@ class LanguageConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a CRUD event on language.negotiation.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    *
    * @return bool
@@ -106,7 +107,7 @@ class LanguageConfigEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a CRUD override event on language.negotiation.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The configuration event.
    *
    * @return bool
diff --git a/modules/static_export/src/EventSubscriber/LocaleEventSubscriber.php b/modules/static_export/src/EventSubscriber/LocaleEventSubscriber.php
index d508339..d35457b 100644
--- a/modules/static_export/src/EventSubscriber/LocaleEventSubscriber.php
+++ b/modules/static_export/src/EventSubscriber/LocaleEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\EventSubscriber;
 
+use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\locale\LocaleEvent;
@@ -21,48 +22,48 @@ class LocaleEventSubscriber implements EventSubscriberInterface {
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;
 
   /**
    * Messenger service.
    *
-   * @var \Drupal\static_export\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Static Suite Utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * The exporter that will handle the event.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Exporter Manager.
-   * @param \Drupal\static_export\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   Messenger service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Suite Utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LocaleExporterPluginManagerInterface $localeExporterManager, Messenger $messenger, StaticSuiteUtilsInterface $static_suite_utils) {
@@ -83,7 +84,7 @@ class LocaleEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a save event.
    *
-   * @param \Drupal\locale\LocaleEvent $event
+   * @param LocaleEvent $event
    *   A locale save event.
    *
    * @return bool
diff --git a/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerBase.php b/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerBase.php
index 240e911..32ed173 100644
--- a/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerBase.php
+++ b/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_suite\Plugin\CacheablePluginManager;
 
@@ -13,7 +14,7 @@ abstract class ConstrainedExporterPluginManagerBase extends CacheablePluginManag
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
diff --git a/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerInterface.php b/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerInterface.php
index b8a78b1..2b32771 100644
--- a/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/ConstrainedExporterPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -32,7 +33,7 @@ interface ConstrainedExporterPluginManagerInterface extends PluginManagerInterfa
    * @return ExporterPluginInterface
    *   Default exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Define ExporterInterface as the return type when minimum requirements
    *   are upgraded to PHP 7.4
@@ -45,7 +46,7 @@ interface ConstrainedExporterPluginManagerInterface extends PluginManagerInterfa
    * @return ExporterPluginInterface
    *   Default exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Define ExporterInterface as the return type when minimum requirements
    *   are upgraded to PHP 7.4
diff --git a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php
index f18f862..28389e3 100644
--- a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php
+++ b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoader.php
@@ -2,8 +2,9 @@
 
 namespace Drupal\static_export\Exporter\Data\Includes\Loader;
 
+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * The data include loader.
@@ -13,14 +14,14 @@ class DataIncludeLoader implements DataIncludeLoaderInterface {
   /**
    * The mime type guesser.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
   /**
    * The data include loader plugin manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginManagerInterface
+   * @var DataIncludeLoaderPluginManagerInterface
    */
   protected $dataIncludeLoaderPluginManager;
 
@@ -29,10 +30,10 @@ class DataIncludeLoader implements DataIncludeLoaderInterface {
    *
    * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface; $mimeTypeGuesser
    *   The mime type guesser.
-   * @param \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager
+   * @param DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager
    *   The data include loader plugin manager.
    */
-  public function __construct(MimeTypeGuesserInterface $mimeTypeGuesser, DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager) {
+  public function __construct(MimeTypesInterface $mimeTypeGuesser, DataIncludeLoaderPluginManagerInterface $dataIncludeLoaderPluginManager) {
     $this->mimeTypeGuesser = $mimeTypeGuesser;
     $this->dataIncludeLoaderPluginManager = $dataIncludeLoaderPluginManager;
   }
@@ -40,7 +41,7 @@ class DataIncludeLoader implements DataIncludeLoaderInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function loadUri(UriInterface $uri, string $mimeType = NULL): string {
     if (!$mimeType) {
@@ -53,7 +54,7 @@ class DataIncludeLoader implements DataIncludeLoaderInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function loadString(string $contents, string $mimeType = NULL): string {
     if (!$mimeType) {
@@ -73,7 +74,7 @@ class DataIncludeLoader implements DataIncludeLoaderInterface {
    * @return string
    *   The processed string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function load(string $contents, string $mimeType): string {
     $definitionsByMimetype = $this->dataIncludeLoaderPluginManager->getDefinitionsByMimeType($mimeType);
diff --git a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderInterface.php b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderInterface.php
index 6434c51..78f4a13 100644
--- a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderInterface.php
+++ b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderInterface.php
@@ -14,7 +14,7 @@ interface DataIncludeLoaderInterface {
    *
    * Find all includes in a URI's content and replace them.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   URI to be parsed.
    * @param string|null $mimeType
    *   Optional content mime type.
diff --git a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginBase.php b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginBase.php
index 7c72cff..799ab4d 100644
--- a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginBase.php
+++ b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginBase.php
@@ -23,7 +23,7 @@ abstract class DataIncludeLoaderPluginBase extends PluginBase implements DataInc
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;
 
@@ -36,7 +36,7 @@ abstract class DataIncludeLoaderPluginBase extends PluginBase implements DataInc
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    */
   public function __construct(array $configuration,
@@ -120,7 +120,7 @@ abstract class DataIncludeLoaderPluginBase extends PluginBase implements DataInc
    *
    * Internally it uses isIncludeAlreadyLoaded() and markIncludeAsLoaded().
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   Th inclde to be loaded.
    *
    * @return string|null
@@ -137,7 +137,7 @@ abstract class DataIncludeLoaderPluginBase extends PluginBase implements DataInc
    *
    * GraphQL fragments can not be repeated.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   The file to check.
    *
    * @return bool
@@ -150,7 +150,7 @@ abstract class DataIncludeLoaderPluginBase extends PluginBase implements DataInc
   /**
    * Marks a fragment as already loaded.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriInterface $uri
+   * @param UriInterface $uri
    *   The file to be marked as already loaded.
    */
   protected function markIncludeAsLoaded(UriInterface $uri): void {
diff --git a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManager.php b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManager.php
index ae117db..52bb648 100644
--- a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManager.php
+++ b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManager.php
@@ -27,9 +27,9 @@ class DataIncludeLoaderPluginManager extends CacheablePluginManager implements D
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -44,7 +44,7 @@ class DataIncludeLoaderPluginManager extends CacheablePluginManager implements D
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginInterface
+   * @return DataIncludeLoaderPluginInterface
    *   A newly created data include loader object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): DataIncludeLoaderPluginInterface {
@@ -61,7 +61,7 @@ class DataIncludeLoaderPluginManager extends CacheablePluginManager implements D
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderPluginInterface
+   * @return DataIncludeLoaderPluginInterface
    *   A newly created data include loader object instance, or a previously
    *   instantiated one if available.
    */
diff --git a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManagerInterface.php b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManagerInterface.php
index e8f8376..8fe6531 100644
--- a/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Data/Includes/Loader/DataIncludeLoaderPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Data\Includes\Loader;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -30,7 +31,7 @@ interface DataIncludeLoaderPluginManagerInterface extends PluginManagerInterface
    *   A newly created data include loader object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): DataIncludeLoaderPluginInterface;
diff --git a/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginInterface.php b/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginInterface.php
index 739bae0..8a7890c 100644
--- a/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginInterface.php
+++ b/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginInterface.php
@@ -13,7 +13,7 @@ interface DataResolverPluginInterface extends PluginInspectionInterface {
   /**
    * Gets the data for an entity, using an specific resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity to export.
    * @param string|null $variant
    *   Variant key, optional.
@@ -30,7 +30,7 @@ interface DataResolverPluginInterface extends PluginInspectionInterface {
   /**
    * Get variant keys of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity to search for variants.
    *
    * @return array
diff --git a/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManager.php b/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManager.php
index f867946..4285932 100644
--- a/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManager.php
+++ b/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManager.php
@@ -27,9 +27,9 @@ class DataResolverPluginManager extends CacheablePluginManager implements DataRe
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -44,7 +44,7 @@ class DataResolverPluginManager extends CacheablePluginManager implements DataRe
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created resolver object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): DataResolverPluginInterface {
@@ -61,7 +61,7 @@ class DataResolverPluginManager extends CacheablePluginManager implements DataRe
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created resolver object instance, or a previously
    *   instantiated one if available.
    */
diff --git a/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManagerInterface.php b/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManagerInterface.php
index ea8482e..dd80823 100644
--- a/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Data/Resolver/DataResolverPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Data\Resolver;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -16,7 +17,7 @@ interface DataResolverPluginManagerInterface extends PluginManagerInterface, Cac
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created data resolver object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): DataResolverPluginInterface;
@@ -26,11 +27,11 @@ interface DataResolverPluginManagerInterface extends PluginManagerInterface, Cac
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   A newly created formatter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): DataResolverPluginInterface;
diff --git a/modules/static_export/src/Exporter/ExporterPluginBase.php b/modules/static_export/src/Exporter/ExporterPluginBase.php
index 85ca723..2ccca28 100644
--- a/modules/static_export/src/Exporter/ExporterPluginBase.php
+++ b/modules/static_export/src/Exporter/ExporterPluginBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Exporter;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface;
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -47,63 +50,63 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * Output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Disk writer.
    *
-   * @var \Drupal\static_export\File\FileCollectionWriter
+   * @var FileCollectionWriter
    */
   protected $fileCollectionWriter;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * The language context service.
    *
-   * @var \Drupal\static_suite\Language\LanguageContextInterface
+   * @var LanguageContextInterface
    */
   protected $languageContext;
 
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;
 
@@ -113,14 +116,14 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * It must be previously configured for each exported type, and instantiated
    * in the base abstract exporter of each type (entity, config, etc)
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $exporterOutputConfigFactory;
 
   /**
    * Final FileCollectionGroup the exporter returns after doing all its work.
    *
-   * @var \Drupal\static_export\File\FileCollectionGroup
+   * @var FileCollectionGroup
    */
   protected $resultingFileCollectionGroup;
 
@@ -176,7 +179,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
   /**
    * Output config data.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @var ExporterOutputConfigInterface
    */
   protected $outputConfig;
 
@@ -231,23 +234,23 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   Output formatter manager.
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entity_utils
+   * @param EntityUtilsInterface $entity_utils
    *   Entity utils service.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
-   * @param \Drupal\static_suite\Language\LanguageContextInterface $languageContext
+   * @param LanguageContextInterface $languageContext
    *   The language context service.
-   * @param \Drupal\static_export\File\FileCollectionWriter $file_collection_writer
+   * @param FileCollectionWriter $file_collection_writer
    *   Disk Writer.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Unique ID helper.
    */
   public function __construct(
@@ -308,7 +311,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    *
    * A helper method for exporter plugins to define their own dependencies.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    */
   protected function setExtraDependencies(ContainerInterface $container): void {
@@ -821,7 +824,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    *
    * Variants are not defined here but in calculateOutputConfig().
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface|null
+   * @return ExporterOutputConfigInterface|null
    *   Output config data.
    */
   abstract protected function getOutputDefinition(): ?ExporterOutputConfigInterface;
@@ -832,17 +835,17 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * @return array|string
    *   Exported data.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   abstract protected function calculateDataFromResolver();
 
   /**
    * Calculate output config.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface|null
+   * @return ExporterOutputConfigInterface|null
    *   Output config data.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function calculateOutputConfig(): ?ExporterOutputConfigInterface {
     $outputConfig = $this->dispatchEvent(StaticExportEvents::CONFIG_STARTS)
@@ -873,7 +876,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * @return array|string
    *   Data to be exported.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function handleResolver() {
     $this->logMessage("Handling resolver.");
@@ -907,7 +910,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * @return string
    *   Formatted entity data.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function handleFormatter(array $data) {
     $this->logMessage("Handling formatter.");
@@ -946,12 +949,12 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * @param string $formattedData
    *   The data to be saved.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup. It could be more than one FileCollection because
    *   the fileCollectionWriter manages a queue.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteException
+   * @throws PluginException
    */
   protected function handleOutput(string $formattedData = "") {
     $this->logMessage("Handling output.");
@@ -1041,7 +1044,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    *
    * Always export variants unless this is already a variant export.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *   A file collection.
    */
   protected function exportVariants(): FileCollection {
@@ -1060,7 +1063,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * For example, entityExporter and configExporter does export translations,
    * while localeExporter does not.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *   A file collection.
    */
   protected function exportTranslations(): FileCollection {
@@ -1098,7 +1101,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
   /**
    * Get logger object.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   A logger object
    */
   public function logger(): LoggerInterface {
@@ -1108,7 +1111,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
   /**
    * Returns output config.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @return ExporterOutputConfigInterface
    *   Config data.
    */
   public function getOutputConfig(): ExporterOutputConfigInterface {
@@ -1123,7 +1126,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * @param array $data
    *   Data for the event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The event.
    */
   public function dispatchEvent(string $eventName, array $data = []): StaticExportEvent {
@@ -1132,7 +1135,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
 
     // Dispatch the event.
     $this->logMessage("EVENT DISPATCH '$eventName' TRIGGERED");
-    $this->eventDispatcher->dispatch($eventName, $event);
+    $this->eventDispatcher->dispatch($event, $eventName);
     $this->logMessage("EVENT DISPATCH '$eventName' DONE");
 
     // Return the event.
@@ -1263,7 +1266,7 @@ abstract class ExporterPluginBase extends PluginBase implements ExporterPluginIn
    * It's a protected method wrapped in getTranslationLanguages(), which is in
    * charge of getting these definitions and dispatching events.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   Array of languages
    */
   protected function getTranslationLanguageDefinitions(): array {
diff --git a/modules/static_export/src/Exporter/ExporterPluginInterface.php b/modules/static_export/src/Exporter/ExporterPluginInterface.php
index 0131a8d..f115473 100644
--- a/modules/static_export/src/Exporter/ExporterPluginInterface.php
+++ b/modules/static_export/src/Exporter/ExporterPluginInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export\Exporter;
 
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ -65,7 +67,7 @@ interface ExporterPluginInterface extends PluginInspectionInterface, ContainerFa
    * @return bool
    *   True if params are ok.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @see \Drupal\static_export\Exporter\ExporterPluginInterface::setOptions()
    */
   public function checkParams(array $options): bool;
@@ -89,7 +91,7 @@ interface ExporterPluginInterface extends PluginInspectionInterface, ContainerFa
    * @return ExporterPluginInterface
    *   The exporter's instance.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function setOptions(array $options): ExporterPluginInterface;
 
@@ -139,11 +141,11 @@ interface ExporterPluginInterface extends PluginInspectionInterface, ContainerFa
    * @param bool $lock
    *   Whether it should enable locking for disk operations.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup of FileCollections with FileItems.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException *
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException *
    */
   public function write(array $options = [], bool $isStandalone = FALSE, bool $logToFile = TRUE, bool $lock = TRUE);
 
@@ -159,13 +161,12 @@ interface ExporterPluginInterface extends PluginInspectionInterface, ContainerFa
    * @param bool $lock
    *   Whether it should enable locking for disk operations.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup of FileCollections with FileItems.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException *
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException *
    * @todo rename to write
-   *
    */
   public function export(array $options = [], bool $isStandalone = FALSE, bool $logToFile = TRUE, bool $lock = TRUE);
 
@@ -181,11 +182,11 @@ interface ExporterPluginInterface extends PluginInspectionInterface, ContainerFa
    * @param bool $lock
    *   Whether it should enable locking for disk operations.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   A FileCollectionGroup of FileCollection with FileItems.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   public function delete(array $options = [], bool $isStandalone = FALSE, bool $logToFile = TRUE, bool $lock = TRUE);
 
@@ -237,7 +238,7 @@ interface ExporterPluginInterface extends PluginInspectionInterface, ContainerFa
    *
    * It can be obtained without actually running the exporter.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   URI where data is stored
    */
   public function getUri(): ?UriInterface;
@@ -273,7 +274,7 @@ interface ExporterPluginInterface extends PluginInspectionInterface, ContainerFa
   /**
    * Get the resulting FileCollectionGroup.
    *
-   * @return \Drupal\static_export\File\FileCollectionGroup
+   * @return FileCollectionGroup
    *   The resulting FileCollectionGroup.
    */
   public function getResultingFileCollectionGroup(): FileCollectionGroup;
diff --git a/modules/static_export/src/Exporter/ExporterReporter.php b/modules/static_export/src/Exporter/ExporterReporter.php
index 50b5cbf..ee02d10 100644
--- a/modules/static_export/src/Exporter/ExporterReporter.php
+++ b/modules/static_export/src/Exporter/ExporterReporter.php
@@ -13,14 +13,14 @@ class ExporterReporter implements ExporterReporterInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Resolver service constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinition.php b/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinition.php
index f8be847..8125f77 100644
--- a/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinition.php
+++ b/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinition.php
@@ -18,21 +18,21 @@ class ExporterOutputConfigDefinition implements ExporterOutputConfigDefinitionIn
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The path object to use in a configuration definition.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\Definition\Path\ExporterOutputConfigDefinitionPathInterface
+   * @var ExporterOutputConfigDefinitionPathInterface
    */
   protected $path;
 
   /**
    * Export language.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $language;
 
@@ -46,11 +46,11 @@ class ExporterOutputConfigDefinition implements ExporterOutputConfigDefinitionIn
   /**
    * Exporter output config definition constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\Definition\Path\ExporterOutputConfigDefinitionPathInterface $path
+   * @param ExporterOutputConfigDefinitionPathInterface $path
    *   The path object to use in a configuration definition.
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   Optional export language.
    * @param string|null $format
    *   Optional export format.
diff --git a/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinitionInterface.php b/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinitionInterface.php
index dce7866..9857e20 100644
--- a/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinitionInterface.php
+++ b/modules/static_export/src/Exporter/Output/Config/Definition/ExporterOutputConfigDefinitionInterface.php
@@ -13,7 +13,7 @@ interface ExporterOutputConfigDefinitionInterface {
   /**
    * Get the path object to use in a configuration definition.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\Definition\Path\ExporterOutputConfigDefinitionPathInterface
+   * @return ExporterOutputConfigDefinitionPathInterface
    *   The path object.
    */
   public function getPath(): ExporterOutputConfigDefinitionPathInterface;
@@ -21,7 +21,7 @@ interface ExporterOutputConfigDefinitionInterface {
   /**
    * Get export language.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   The export language.
    */
   public function getLanguage(): LanguageInterface;
@@ -34,7 +34,7 @@ interface ExporterOutputConfigDefinitionInterface {
    * depending on the language of the UI that triggered the operation, which is
    * an error.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Export language.
    *
    * @return ExporterOutputConfigDefinitionInterface
diff --git a/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPath.php b/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPath.php
index 5d5a087..0c96510 100644
--- a/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPath.php
+++ b/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPath.php
@@ -11,7 +11,7 @@ use Drupal\static_suite\StaticSuiteUserException;
 class ExporterOutputConfigDefinitionPath implements ExporterOutputConfigDefinitionPathInterface {
 
   /**
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;
 
@@ -43,7 +43,7 @@ class ExporterOutputConfigDefinitionPath implements ExporterOutputConfigDefiniti
    * ExporterOutputConfigFactoryInterface::create() method and shouldn't be
    * manually instantiated.
    *
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
    * @param string $dir
    *   The export directory, relative to base dir inside data dir. It can
@@ -58,7 +58,7 @@ class ExporterOutputConfigDefinitionPath implements ExporterOutputConfigDefiniti
    * @param string|null $extension
    *   Export extension. Optional, it can be null or an empty string.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @see ExporterOutputConfigDefinitionPathInterface::setExtension();
    *
    * @see ExporterOutputConfigDefinitionPathInterface::setFilename();
diff --git a/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPathInterface.php b/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPathInterface.php
index d96460f..2f31a52 100644
--- a/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPathInterface.php
+++ b/modules/static_export/src/Exporter/Output/Config/Definition/Path/ExporterOutputConfigDefinitionPathInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Output\Config\Definition\Path;
 
+use Drupal\static_suite\StaticSuiteUserException;
 /**
  * An interface for paths used in the definition of output configurations.
  */
@@ -45,7 +46,7 @@ interface ExporterOutputConfigDefinitionPathInterface {
    * @return ExporterOutputConfigDefinitionPathInterface
    *   This instance, to make this method chainable.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function setFilename(string $filename): ExporterOutputConfigDefinitionPathInterface;
 
diff --git a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfig.php b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfig.php
index 5dcada5..13243e6 100644
--- a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfig.php
+++ b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfig.php
@@ -14,14 +14,14 @@ use Drupal\static_suite\Security\FilePathSanitizerInterface;
 class ExporterOutputConfig implements ExporterOutputConfigInterface {
 
   /**
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;
 
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;
 
@@ -39,7 +39,7 @@ class ExporterOutputConfig implements ExporterOutputConfigInterface {
   /**
    * The configuration definition.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface
+   * @var ExporterOutputConfigDefinitionInterface
    */
   protected $definition;
 
@@ -49,13 +49,13 @@ class ExporterOutputConfig implements ExporterOutputConfigInterface {
    * This class is used by all exporters, so it's quite permissive in its
    * parameters and only requires a.
    *
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    * @param string $baseDir
    *   Base directory (entity, config, etc)
-   * @param \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface $definition
+   * @param ExporterOutputConfigDefinitionInterface $definition
    *   The configuration definition.
    */
   public function __construct(FilePathSanitizerInterface $filePathSanitizer, UriFactoryInterface $uriFactory, string $baseDir, ExporterOutputConfigDefinitionInterface $definition) {
@@ -104,7 +104,7 @@ class ExporterOutputConfig implements ExporterOutputConfigInterface {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface
+   * @return ExporterOutputConfigDefinitionInterface
    *   The configuration definition.
    */
   public function getDefinition(): ExporterOutputConfigDefinitionInterface {
diff --git a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactory.php b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactory.php
index 5f883d0..153a2d3 100644
--- a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactory.php
+++ b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Output\Config;
 
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinition;
@@ -29,21 +30,21 @@ class ExporterOutputConfigFactory implements ExporterOutputConfigFactoryInterfac
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The file path sanitizer.
    *
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;
 
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface
+   * @var UriFactoryInterface
    */
   protected $uriFactory;
 
@@ -57,11 +58,11 @@ class ExporterOutputConfigFactory implements ExporterOutputConfigFactoryInterfac
   /**
    * ExporterOutputConfigFactory constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
-   * @param \Drupal\static_export\Exporter\Output\Uri\UriFactoryInterface $uriFactory
+   * @param UriFactoryInterface $uriFactory
    *   The URI factory.
    * @param string $defaultBaseDir
    *   The default base dir for exported files.
@@ -83,7 +84,7 @@ class ExporterOutputConfigFactory implements ExporterOutputConfigFactoryInterfac
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function create(string $dir, string $filename, string $extension = NULL, LanguageInterface $language = NULL, string $format = NULL): ExporterOutputConfigInterface {
     // First, create a path.
diff --git a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactoryInterface.php b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactoryInterface.php
index 88647cb..2f87c0b 100644
--- a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactoryInterface.php
+++ b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigFactoryInterface.php
@@ -79,7 +79,7 @@ interface ExporterOutputConfigFactoryInterface {
    * @param string|null $extension
    *   Export extension.
    *   Optional, it can be null or an empty string.
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   Optional export language.
    *   If not defined, it uses a non-linguistic language
    *   (LanguageInterface::LANGCODE_NOT_APPLICABLE), which makes the language
@@ -98,7 +98,7 @@ interface ExporterOutputConfigFactoryInterface {
    *   This argument is rarely used, so it's the last one of this method's
    *   signature, instead of being next to $extension.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface
+   * @return ExporterOutputConfigInterface
    *   A exporter output config.
    */
   public function create(string $dir, string $filename, string $extension = NULL, LanguageInterface $language = NULL, string $format = NULL): ExporterOutputConfigInterface;
diff --git a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigInterface.php b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigInterface.php
index cba8908..d7a1e1e 100644
--- a/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigInterface.php
+++ b/modules/static_export/src/Exporter/Output/Config/ExporterOutputConfigInterface.php
@@ -15,7 +15,7 @@ interface ExporterOutputConfigInterface {
    *
    * This is where the structure of the output of exporters must be defined.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface
+   * @return UriInterface
    *   The URI representing this configuration.
    */
   public function uri(): UriInterface;
@@ -42,7 +42,7 @@ interface ExporterOutputConfigInterface {
   /**
    * Get the definition used in this configuration.
    *
-   * @return \Drupal\static_export\Exporter\Output\Config\Definition\ExporterOutputConfigDefinitionInterface
+   * @return ExporterOutputConfigDefinitionInterface
    *   The configuration definition.
    */
   public function getDefinition(): ExporterOutputConfigDefinitionInterface;
diff --git a/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManager.php b/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManager.php
index 771905a..13d91f1 100644
--- a/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManager.php
+++ b/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManager.php
@@ -20,9 +20,9 @@ class OutputFormatterPluginManager extends CacheablePluginManager implements Out
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManagerInterface.php b/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManagerInterface.php
index 792b3c1..fda2d67 100644
--- a/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Output/Formatter/OutputFormatterPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Output\Formatter;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -16,7 +17,7 @@ interface OutputFormatterPluginManagerInterface extends PluginManagerInterface,
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginInterface
+   * @return OutputFormatterPluginInterface
    *   A newly created formatter object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): OutputFormatterPluginInterface;
@@ -26,11 +27,11 @@ interface OutputFormatterPluginManagerInterface extends PluginManagerInterface,
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginInterface
+   * @return OutputFormatterPluginInterface
    *   A newly created formatter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): OutputFormatterPluginInterface;
diff --git a/modules/static_export/src/Exporter/Output/Uri/Resolver/ExporterUriResolverInterface.php b/modules/static_export/src/Exporter/Output/Uri/Resolver/ExporterUriResolverInterface.php
index 9232664..758fca7 100644
--- a/modules/static_export/src/Exporter/Output/Uri/Resolver/ExporterUriResolverInterface.php
+++ b/modules/static_export/src/Exporter/Output/Uri/Resolver/ExporterUriResolverInterface.php
@@ -18,7 +18,7 @@ interface ExporterUriResolverInterface {
    *
    * It returns the main URI and its variants and translations.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @return UriInterface[]
    *   Array of URIs.
    */
   public function getUris(): array;
@@ -26,7 +26,7 @@ interface ExporterUriResolverInterface {
   /**
    * Get a exported item (entity/config/locale) main URI.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   The main URI or null if nothing found.
    */
   public function getMainUri(): ?UriInterface;
@@ -34,10 +34,10 @@ interface ExporterUriResolverInterface {
   /**
    * Get a exported item (entity/config/locale) variant URIs.
    *
-   * @param \Drupal\Core\Language\LanguageInterface|null $language
+   * @param LanguageInterface|null $language
    *   Optional language.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @return UriInterface[]
    *   Array of URIs.
    */
   public function getVariantUris(LanguageInterface $language = NULL): array;
@@ -45,7 +45,7 @@ interface ExporterUriResolverInterface {
   /**
    * Get a exported item (entity/config) translation URIs.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @return UriInterface[]
    *   Array of URIs.
    */
   public function getTranslationUris(): array;
diff --git a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolver.php b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolver.php
index 1aaade2..a72923d 100644
--- a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolver.php
+++ b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolver.php
@@ -13,7 +13,7 @@ class PagePathUriResolver implements PagePathUriResolverInterface {
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginManagerInterface
+   * @var PagePathUriResolverPluginManagerInterface
    */
   protected $pagePathUriResolverPluginManager;
 
@@ -27,7 +27,7 @@ class PagePathUriResolver implements PagePathUriResolverInterface {
   /**
    * PagePathUriResolver constructor.
    *
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginManagerInterface $pagePathUriResolverPluginManager
+   * @param PagePathUriResolverPluginManagerInterface $pagePathUriResolverPluginManager
    *   The URI resolver for page paths.
    */
   public function __construct(PagePathUriResolverPluginManagerInterface $pagePathUriResolverPluginManager) {
diff --git a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverInterface.php b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverInterface.php
index 2e47941..9623034 100644
--- a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverInterface.php
+++ b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverInterface.php
@@ -47,7 +47,7 @@ interface PagePathUriResolverInterface {
    * @param string|null $langcode
    *   Optional language id.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   Exported URI.
    */
   public function resolve(string $pagePath, string $langcode = NULL): ?UriInterface;
diff --git a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginInterface.php b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginInterface.php
index 961cf91..eefbedc 100644
--- a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginInterface.php
+++ b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ -19,10 +20,10 @@ interface PagePathUriResolverPluginInterface extends PluginInspectionInterface,
    * @param string|null $langcode
    *   Optional language id.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   Exported URI.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function resolve(string $pagePath, string $langcode = NULL): ?UriInterface;
 
diff --git a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManager.php b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManager.php
index 8225754..bbe11bf 100644
--- a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManager.php
+++ b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManager.php
@@ -20,9 +20,9 @@ class PagePathUriResolverPluginManager extends CacheablePluginManager implements
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManagerInterface.php b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManagerInterface.php
index 450dbcc..d20cb03 100644
--- a/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Output/Uri/Resolver/PagePath/PagePathUriResolverPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -30,7 +31,7 @@ interface PagePathUriResolverPluginManagerInterface extends PluginManagerInterfa
    *   A newly created converter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): PagePathUriResolverPluginInterface;
diff --git a/modules/static_export/src/Exporter/Output/Uri/UriFactory.php b/modules/static_export/src/Exporter/Output/Uri/UriFactory.php
index 8473522..9dad702 100644
--- a/modules/static_export/src/Exporter/Output/Uri/UriFactory.php
+++ b/modules/static_export/src/Exporter/Output/Uri/UriFactory.php
@@ -13,23 +13,23 @@ class UriFactory implements UriFactoryInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The file path sanitizer.
    *
-   * @var \Drupal\static_suite\Security\FilePathSanitizerInterface
+   * @var FilePathSanitizerInterface
    */
   protected $filePathSanitizer;
 
   /**
    * UriFactory constructor.
    *
-   * @param \Drupal\static_suite\Security\FilePathSanitizerInterface $filePathSanitizer
+   * @param FilePathSanitizerInterface $filePathSanitizer
    *   The file path sanitizer.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(FilePathSanitizerInterface $filePathSanitizer, ConfigFactoryInterface $configFactory) {
diff --git a/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManager.php b/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManager.php
index ba5039e..28d7f70 100644
--- a/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManager.php
+++ b/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManager.php
@@ -21,11 +21,11 @@ class ConfigExporterPluginManager extends ConstrainedExporterPluginManagerBase i
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
diff --git a/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManagerInterface.php b/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManagerInterface.php
index f5365f8..570cb64 100644
--- a/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Type/Config/ConfigExporterPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Type\Config;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -17,7 +18,7 @@ interface ConfigExporterPluginManagerInterface extends PluginManagerInterface, C
    * @return ConfigExporterPluginInterface
    *   Default config exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createDefaultInstance(): ConfigExporterPluginInterface;
 
@@ -27,7 +28,7 @@ interface ConfigExporterPluginManagerInterface extends PluginManagerInterface, C
    * @return ConfigExporterPluginInterface
    *   Default config exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDefaultInstance(): ConfigExporterPluginInterface;
 
diff --git a/modules/static_export/src/Exporter/Type/Config/Output/Uri/Resolver/ConfigExporterUriResolver.php b/modules/static_export/src/Exporter/Type/Config/Output/Uri/Resolver/ConfigExporterUriResolver.php
index 0192a04..e924916 100644
--- a/modules/static_export/src/Exporter/Type/Config/Output/Uri/Resolver/ConfigExporterUriResolver.php
+++ b/modules/static_export/src/Exporter/Type/Config/Output/Uri/Resolver/ConfigExporterUriResolver.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver;
 
+use Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\ExporterUriResolverBase;
@@ -18,35 +21,35 @@ class ConfigExporterUriResolver extends ExporterUriResolverBase implements Confi
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Config exporter instance.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginInterface
+   * @var ConfigExporterPluginInterface
    */
   protected $configExporter;
 
   /**
    * Config exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;
 
   /**
    * Language context.
    *
-   * @var \Drupal\static_suite\Language\LanguageContextInterface
+   * @var LanguageContextInterface
    */
   protected $languageContext;
 
   /**
    * The entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;
 
@@ -60,13 +63,13 @@ class ConfigExporterUriResolver extends ExporterUriResolverBase implements Confi
   /**
    * Uri Resolver service constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   Config exporter Manager.
-   * @param \Drupal\static_suite\Language\LanguageContextInterface $languageContext
+   * @param LanguageContextInterface $languageContext
    *   Language context.
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
    */
   public function __construct(
@@ -84,7 +87,7 @@ class ConfigExporterUriResolver extends ExporterUriResolverBase implements Confi
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function setConfigName(string $configName): ConfigExporterUriResolverInterface {
     $this->configName = $configName;
@@ -95,7 +98,7 @@ class ConfigExporterUriResolver extends ExporterUriResolverBase implements Confi
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getMainUri(): ?UriInterface {
     return $this->configExporter->setOptions(['name' => $this->configName])
@@ -105,7 +108,7 @@ class ConfigExporterUriResolver extends ExporterUriResolverBase implements Confi
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @throws \Exception
    */
   public function getVariantUris(LanguageInterface $language = NULL): array {
@@ -135,7 +138,7 @@ class ConfigExporterUriResolver extends ExporterUriResolverBase implements Confi
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    * @throws \Exception
    */
   public function getTranslationUris(): array {
diff --git a/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManager.php b/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManager.php
index 63002be..473a384 100644
--- a/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManager.php
+++ b/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManager.php
@@ -20,9 +20,9 @@ class CustomExporterPluginManager extends CacheablePluginManager implements Cust
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManagerInterface.php b/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManagerInterface.php
index 459ab91..732ae6e 100644
--- a/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Type/Custom/CustomExporterPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Type\Custom;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -16,7 +17,7 @@ interface CustomExporterPluginManagerInterface extends PluginManagerInterface, C
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginInterface
+   * @return CustomExporterPluginInterface
    *   A newly created exporter object instance.
    */
   public function createInstance($plugin_id, array $configuration = []): CustomExporterPluginInterface;
@@ -26,11 +27,11 @@ interface CustomExporterPluginManagerInterface extends PluginManagerInterface, C
    *
    * Wraps parent method to add typing.
    *
-   * @return \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginInterface
+   * @return CustomExporterPluginInterface
    *   A newly created custom exporter object instance, or a previously
    *   instantiated one if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options): CustomExporterPluginInterface;
diff --git a/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManager.php b/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManager.php
index ac4eb8e..fa0e25a 100644
--- a/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManager.php
+++ b/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManager.php
@@ -18,7 +18,7 @@ class EntityExporterPluginManager extends ConstrainedExporterPluginManagerBase i
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -28,11 +28,11 @@ class EntityExporterPluginManager extends ConstrainedExporterPluginManagerBase i
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
diff --git a/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManagerInterface.php b/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManagerInterface.php
index 391d3d9..83907d5 100644
--- a/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Type/Entity/EntityExporterPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Type\Entity;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -17,7 +18,7 @@ interface EntityExporterPluginManagerInterface extends PluginManagerInterface, C
    * @return EntityExporterPluginInterface
    *   Default entity exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createDefaultInstance(): EntityExporterPluginInterface;
 
@@ -27,7 +28,7 @@ interface EntityExporterPluginManagerInterface extends PluginManagerInterface, C
    * @return EntityExporterPluginInterface
    *   Default entity exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDefaultInstance(): EntityExporterPluginInterface;
 
diff --git a/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolver.php b/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolver.php
index f7a5879..9ac2c14 100644
--- a/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolver.php
+++ b/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolver.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver;
 
+use Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -19,62 +22,62 @@ class EntityExporterUriResolver extends ExporterUriResolverBase implements Entit
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;
 
   /**
    * Entity exporter instance.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginInterface
+   * @var EntityExporterPluginInterface
    */
   protected $entityExporter;
 
   /**
    * Custom exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterManager;
 
   /**
    * The entity utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtilsInterface
+   * @var EntityUtilsInterface
    */
   protected $entityUtils;
 
   /**
    * Entity to work with.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * An internal cache for custom exported URIs.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @var UriInterface[]
    */
   protected $customExportedUriCache;
 
   /**
    * URI Resolver service constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   Entity exporter Manager.
-   * @param \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface $customExporterManager
+   * @param CustomExporterPluginManagerInterface $customExporterManager
    *   Custom exporter Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtilsInterface $entityUtils
+   * @param EntityUtilsInterface $entityUtils
    *   Entity utils.
    */
   public function __construct(
@@ -92,7 +95,7 @@ class EntityExporterUriResolver extends ExporterUriResolverBase implements Entit
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function setEntity(EntityInterface $entity): EntityExporterUriResolverInterface {
     $this->entity = $entity;
@@ -103,7 +106,7 @@ class EntityExporterUriResolver extends ExporterUriResolverBase implements Entit
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getMainUri(): ?UriInterface {
     return $this->entityExporter
@@ -114,8 +117,8 @@ class EntityExporterUriResolver extends ExporterUriResolverBase implements Entit
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function getVariantUris(LanguageInterface $language = NULL): array {
     $uris = [];
@@ -149,8 +152,8 @@ class EntityExporterUriResolver extends ExporterUriResolverBase implements Entit
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function getTranslationUris(): array {
     $uris = [];
diff --git a/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolverInterface.php b/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolverInterface.php
index df617d7..388cf48 100644
--- a/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolverInterface.php
+++ b/modules/static_export/src/Exporter/Type/Entity/Output/Uri/Resolver/EntityExporterUriResolverInterface.php
@@ -13,7 +13,7 @@ interface EntityExporterUriResolverInterface extends ExporterUriResolverInterfac
   /**
    * Set entity to work with.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to work with.
    *
    * @return EntityExporterUriResolverInterface
diff --git a/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManager.php b/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManager.php
index b2fe663..60f1ae7 100644
--- a/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManager.php
+++ b/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManager.php
@@ -21,11 +21,11 @@ class LocaleExporterPluginManager extends ConstrainedExporterPluginManagerBase i
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
diff --git a/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManagerInterface.php b/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManagerInterface.php
index d3e5f74..2f6dc0e 100644
--- a/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManagerInterface.php
+++ b/modules/static_export/src/Exporter/Type/Locale/LocaleExporterPluginManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Exporter\Type\Locale;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -17,7 +18,7 @@ interface LocaleExporterPluginManagerInterface extends PluginManagerInterface, C
    * @return LocaleExporterPluginInterface
    *   Default locale exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createDefaultInstance(): LocaleExporterPluginInterface;
 
@@ -27,7 +28,7 @@ interface LocaleExporterPluginManagerInterface extends PluginManagerInterface, C
    * @return LocaleExporterPluginInterface
    *   Default locale exporter.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDefaultInstance(): LocaleExporterPluginInterface;
 
diff --git a/modules/static_export/src/Exporter/Type/Locale/Output/Uri/Resolver/LocaleExporterUriResolver.php b/modules/static_export/src/Exporter/Type/Locale/Output/Uri/Resolver/LocaleExporterUriResolver.php
index 86e69f5..d8ab99d 100644
--- a/modules/static_export/src/Exporter/Type/Locale/Output/Uri/Resolver/LocaleExporterUriResolver.php
+++ b/modules/static_export/src/Exporter/Type/Locale/Output/Uri/Resolver/LocaleExporterUriResolver.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Exporter\Type\Locale\Output\Uri\Resolver;
 
+use Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\ExporterUriResolverBase;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ -15,14 +18,14 @@ class LocaleExporterUriResolver extends ExporterUriResolverBase implements Local
   /**
    * Locale exporter Manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;
 
   /**
    * Locale exporter instance.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginInterface
+   * @var LocaleExporterPluginInterface
    */
   protected $localeExporter;
 
@@ -36,7 +39,7 @@ class LocaleExporterUriResolver extends ExporterUriResolverBase implements Local
   /**
    * URI Resolver service constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   Locale exporter Manager.
    */
   public function __construct(LocaleExporterPluginManagerInterface $localeExporterManager) {
@@ -46,7 +49,7 @@ class LocaleExporterUriResolver extends ExporterUriResolverBase implements Local
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function setLanguage(string $langcode): LocaleExporterUriResolverInterface {
     $this->langcode = $langcode;
@@ -58,7 +61,7 @@ class LocaleExporterUriResolver extends ExporterUriResolverBase implements Local
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getMainUri(): ?UriInterface {
     return $this->localeExporter->setOptions(['language' => $this->langcode])
@@ -71,7 +74,7 @@ class LocaleExporterUriResolver extends ExporterUriResolverBase implements Local
    * @param string $langcode
    *   Optional language id.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getVariantUris(LanguageInterface $language = NULL): array {
     $uris = [];
@@ -98,7 +101,7 @@ class LocaleExporterUriResolver extends ExporterUriResolverBase implements Local
    * $localeExporter->getTranslationLanguages() returns something, which is a
    * method that can be easily overridden.
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function getTranslationUris(): array {
     $uris = [];
diff --git a/modules/static_export/src/File/FileCollection.php b/modules/static_export/src/File/FileCollection.php
index f5c624d..634f7f4 100644
--- a/modules/static_export/src/File/FileCollection.php
+++ b/modules/static_export/src/File/FileCollection.php
@@ -44,7 +44,7 @@ class FileCollection {
   /**
    * Get all FileItems.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   An array of FileItem.
    */
   public function getFileItems(): array {
@@ -54,7 +54,7 @@ class FileCollection {
   /**
    * Get all executed FileItems.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   An array of FileItem.
    */
   public function getExecutedFileItems(): array {
@@ -85,7 +85,7 @@ class FileCollection {
   /**
    * Set all FileItems.
    *
-   * @param \Drupal\static_export\File\FileItem[] $fileItems
+   * @param FileItem[] $fileItems
    *   An array of FileItem.
    */
   public function setFileItems(array $fileItems) {
@@ -95,7 +95,7 @@ class FileCollection {
   /**
    * Get first FileItem.
    *
-   * @return \Drupal\static_export\File\FileItem|null
+   * @return FileItem|null
    *   First FileItem.
    */
   public function getFirstFileItem(): ?FileItem {
@@ -108,7 +108,7 @@ class FileCollection {
   /**
    * Set an individual FileItem.
    *
-   * @param \Drupal\static_export\File\FileItem $fileItem
+   * @param FileItem $fileItem
    *   An individual FileItem.
    */
   public function addFileItem(FileItem $fileItem) {
diff --git a/modules/static_export/src/File/FileCollectionFormatter.php b/modules/static_export/src/File/FileCollectionFormatter.php
index 3697dd4..75696df 100644
--- a/modules/static_export/src/File/FileCollectionFormatter.php
+++ b/modules/static_export/src/File/FileCollectionFormatter.php
@@ -16,30 +16,30 @@ class FileCollectionFormatter {
   /**
    * A FileCollection to format.
    *
-   * @var \Drupal\static_export\File\FileCollection
+   * @var FileCollection
    */
   protected $fileCollection;
 
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Suite utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * FileCollectionFormatter constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The base config provider.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $staticSuiteUtils
+   * @param StaticSuiteUtilsInterface $staticSuiteUtils
    *   Static Suite utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticSuiteUtilsInterface $staticSuiteUtils) {
@@ -50,7 +50,7 @@ class FileCollectionFormatter {
   /**
    * Set a FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   A FileCollection to format.
    */
   public function setFileCollection(FileCollection $fileCollection) {
@@ -124,7 +124,7 @@ class FileCollectionFormatter {
   /**
    * Formats a FileCollection using html format and returns an array.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The user to get the html for.
    * @param int $delta
    *   Batch delta.
@@ -149,7 +149,7 @@ class FileCollectionFormatter {
 
       // Parse file link.
       if ($user->hasPermission("view static export files") && $index !== 0 && preg_match("/ (\S+)$/", $line, $matches)) {
-        $htmlForFilePath = '<a href="' . file_create_url($scheme . '://' . $matches[1]) . '" target="_blank">' . $matches[1] . '</a>';
+        $htmlForFilePath = '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($scheme . '://' . $matches[1]) . '" target="_blank">' . $matches[1] . '</a>';
         $lines[$index] = str_replace($matches[1], $htmlForFilePath, $lines[$index]);
       }
     }
diff --git a/modules/static_export/src/File/FileCollectionGroup.php b/modules/static_export/src/File/FileCollectionGroup.php
index 4005d74..125369c 100644
--- a/modules/static_export/src/File/FileCollectionGroup.php
+++ b/modules/static_export/src/File/FileCollectionGroup.php
@@ -10,7 +10,7 @@ class FileCollectionGroup {
   /**
    * An array of FileCollection.
    *
-   * @var \Drupal\static_export\File\FileCollection[]
+   * @var FileCollection[]
    */
   protected $fileCollections = [];
 
@@ -29,7 +29,7 @@ class FileCollectionGroup {
   /**
    * Get all FileCollections.
    *
-   * @return \Drupal\static_export\File\FileCollection[]
+   * @return FileCollection[]
    *   An array of FileCollection.
    */
   public function getFileCollections(): array {
@@ -39,7 +39,7 @@ class FileCollectionGroup {
   /**
    * Set all FileCollections.
    *
-   * @param \Drupal\static_export\File\FileCollection[] $fileCollections
+   * @param FileCollection[] $fileCollections
    *   An array of FileCollection.
    */
   public function setFileCollections(array $fileCollections) {
@@ -49,7 +49,7 @@ class FileCollectionGroup {
   /**
    * Add an individual FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   An individual FileCollection.
    */
   public function addFileCollection(FileCollection $fileCollection) {
@@ -59,7 +59,7 @@ class FileCollectionGroup {
   /**
    * Adds multiple FileCollections.
    *
-   * @param \Drupal\static_export\File\FileCollection[] $fileCollections
+   * @param FileCollection[] $fileCollections
    *   An array of FileCollection.
    */
   public function addFileCollections(array $fileCollections) {
@@ -71,7 +71,7 @@ class FileCollectionGroup {
   /**
    * Get first FileCollection.
    *
-   * @return \Drupal\static_export\File\FileCollection|null
+   * @return FileCollection|null
    *   First FileCollection.
    */
   public function getFirstFileCollection(): ?FileCollection {
@@ -125,7 +125,7 @@ class FileCollectionGroup {
   /**
    * Get executed items from all file collections.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   Array of FileItem
    */
   public function getExecutedFileItemsFromAllFileCollections() {
@@ -142,7 +142,7 @@ class FileCollectionGroup {
   /**
    * Get file paths from all file collections.
    *
-   * @return \Drupal\static_export\File\FileItem[]
+   * @return FileItem[]
    *   Array of FileItem
    */
   public function getExecutedFilePathsFromAllFileCollections() {
@@ -157,7 +157,7 @@ class FileCollectionGroup {
   /**
    * Get FileCollections newest item.
    *
-   * @return \Drupal\static_export\File\FileCollection|null
+   * @return FileCollection|null
    *   A FileCollection or NULL if nothing found.
    */
   public function getNewestFileCollection() {
diff --git a/modules/static_export/src/File/FileCollectionWriter.php b/modules/static_export/src/File/FileCollectionWriter.php
index 67ef662..7862d0b 100644
--- a/modules/static_export/src/File/FileCollectionWriter.php
+++ b/modules/static_export/src/File/FileCollectionWriter.php
@@ -117,7 +117,7 @@ class FileCollectionWriter {
   /**
    * The exporter that controls this writer.
    *
-   * @var \Drupal\static_export\Exporter\ExporterPluginInterface
+   * @var ExporterPluginInterface
    */
   protected $exporter;
 
@@ -131,41 +131,41 @@ class FileCollectionWriter {
   /**
    * A FileCollectionGroup.
    *
-   * @var \Drupal\static_export\File\FileCollectionGroup
+   * @var FileCollectionGroup
    */
   protected $fileCollectionGroup;
 
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * Unique ID helper.
    *
-   * @var \Drupal\static_suite\Utility\UniqueIdHelperInterface
+   * @var UniqueIdHelperInterface
    */
   protected $uniqueIdHelper;
 
   /**
    * FileCollectionWriter constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory.
-   * @param \Drupal\static_suite\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock system from Static Suite.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
-   * @param \Drupal\static_suite\Utility\UniqueIdHelperInterface $unique_id_helper
+   * @param UniqueIdHelperInterface $unique_id_helper
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LockBackendInterface $lock, StaticSuiteUtilsInterface $static_suite_utils, UniqueIdHelperInterface $unique_id_helper) {
@@ -178,7 +178,7 @@ class FileCollectionWriter {
   /**
    * Set exporter.
    *
-   * @param \Drupal\static_export\Exporter\ExporterPluginInterface $exporter
+   * @param ExporterPluginInterface $exporter
    *   The exporter that controls this writer.
    */
   public function setExporter(ExporterPluginInterface $exporter) {
@@ -224,7 +224,7 @@ class FileCollectionWriter {
    * @return FileCollectionGroup
    *   A FileCollectionGroup with stats.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function save(FileCollection $fileCollection) {
     // We assign it to a property to easily pass it to events.
@@ -271,7 +271,7 @@ class FileCollectionWriter {
    * @return FileCollectionGroup
    *   A FileCollectionGroup.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function processQueue() {
     $this->exporter->dispatchEvent(StaticExportEvents::WRITE_QUEUE_PROCESSING_STARTS);
@@ -321,7 +321,7 @@ class FileCollectionWriter {
    * @return array
    *   The committed queue item.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function commitQueueItem(array $item) {
     $item['file-collection'] = $this->commitFileCollection($item['file-collection']);
@@ -337,7 +337,7 @@ class FileCollectionWriter {
    * @return FileCollection
    *   The processed FileCollection.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function commitFileCollection(FileCollection $fileCollection) {
     $fileItems = $fileCollection->getFileItems();
@@ -392,7 +392,7 @@ class FileCollectionWriter {
    * @return bool
    *   True on success, false otherwise
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function saveLockExecutedLog(FileCollection $fileCollection) {
     $fileItems = $fileCollection->getFileItems();
@@ -420,7 +420,7 @@ class FileCollectionWriter {
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function deleteFileItem(string $filePath) {
     // Do nothing if $filePath does not exist.
@@ -442,7 +442,7 @@ class FileCollectionWriter {
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function saveFileItem(string $filePath, string $fileContents) {
     // Do nothing if contents are the same.
@@ -471,7 +471,7 @@ class FileCollectionWriter {
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function writeFile(string $filePath, string $fileContents, bool $overwrite = FALSE, bool $createDirs = FALSE) {
     // Ensure proper paths.
@@ -517,7 +517,7 @@ class FileCollectionWriter {
    * @return bool
    *   TRUE on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function deleteFile(string $filePath) {
     // Ensure proper paths.
@@ -567,7 +567,7 @@ class FileCollectionWriter {
    * @return bool
    *   True if it's stale.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function isQueueItemStale(array $item) {
     $lastCommittedUniqueIdDate = $this->getLastLockCommittedUniqueIdDate();
@@ -593,7 +593,7 @@ class FileCollectionWriter {
    * @return \DateTime
    *   A DateTime representing a unique id timestamp.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function getLastLockCommittedUniqueIdDate() {
     $filePath = $this->getWorkDir() . "/" . self::LAST_LOCK_COMMITTED_UNIQUE_ID_FILE;
@@ -610,7 +610,7 @@ class FileCollectionWriter {
    * @return array|bool
    *   A queue item, or false if queue is empty
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function pullItemFromQueue() {
     $pattern = $this->getWorkDir() . '/' . self::QUEUE_DIR . '/*';
@@ -667,7 +667,7 @@ class FileCollectionWriter {
    * @return bool
    *   True if locked.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   protected function finishQueueInsertion(FileCollection $fileCollection) {
     $this->exporter->logMessage("[writer] Queue insertion finishing...");
@@ -689,7 +689,7 @@ class FileCollectionWriter {
    * @return bool
    *   True on success.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function startQueueInsertion() {
     // Honor the value defined in self::QUEUE_INSERTION_MAX_SECONDS.
@@ -770,7 +770,7 @@ class FileCollectionWriter {
    * @param string $uniqueId
    *   The unique id to save.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function saveLastLockCommittedUniqueId(string $uniqueId) {
     $filePath = $this->getWorkDir() . "/" . self::LAST_LOCK_COMMITTED_UNIQUE_ID_FILE;
@@ -786,7 +786,7 @@ class FileCollectionWriter {
    * @param FileCollection $fileCollection
    *   The FileCollection to get the unique id to save.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function saveLastLockExecutedUniqueId(FileCollection $fileCollection) {
     $filePath = $this->getWorkDir() . "/" . self::LAST_LOCK_EXECUTED_LIVE_UNIQUE_ID_FILE;
diff --git a/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php b/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php
index ebd2856..03a8205 100644
--- a/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php
+++ b/modules/static_export/src/File/MimeType/ContentMimeTypeGuesser.php
@@ -2,14 +2,14 @@
 
 namespace Drupal\static_export\File\MimeType;
 
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
+use Symfony\Component\Mime\MimeTypesInterface;
 
 /**
  * Guess the MIME type of a file by reading its contents.
  *
  * It supports the tree formats offered by Static Export: JSON, XML and YAML.
  */
-class ContentMimeTypeGuesser implements MimeTypeGuesserInterface {
+class ContentMimeTypeGuesser implements MimeTypesInterface {
 
   /**
    * {@inheritdoc}
diff --git a/modules/static_export/src/File/MimeType/MimeTypeGuesser.php b/modules/static_export/src/File/MimeType/MimeTypeGuesser.php
index f523747..dcff8e3 100644
--- a/modules/static_export/src/File/MimeType/MimeTypeGuesser.php
+++ b/modules/static_export/src/File/MimeType/MimeTypeGuesser.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\static_export\File\MimeType;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\File\MimeType\MimeTypeGuesser as BaseMimeTypeGuesser;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Defines a MIME type guesser for Static Export.
@@ -14,19 +14,19 @@ class MimeTypeGuesser extends BaseMimeTypeGuesser {
   /**
    * The default mimeType guesser from Drupal's core.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $defaultMimeTypeGuesser;
 
   /**
    * Constructs a MimeTypeGuesser object.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $defaultMimeTypeGuesser
+   * @param MimeTypesInterface $defaultMimeTypeGuesser
    *   The default mimeType guesser from Drupal's core.
    */
-  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypeGuesserInterface $defaultMimeTypeGuesser) {
+  public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager, MimeTypesInterface $defaultMimeTypeGuesser) {
     $this->defaultMimeTypeGuesser = $defaultMimeTypeGuesser;
     parent::__construct($stream_wrapper_manager);
   }
diff --git a/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php b/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php
index cd65848..adec4ef 100644
--- a/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php
+++ b/modules/static_export/src/File/MimeType/OutputFormatterMimeTypeGuesser.php
@@ -2,25 +2,25 @@
 
 namespace Drupal\static_export\File\MimeType;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 /**
  * Guess the MIME type of a file using StaticOutputFormatter annotation.
  */
-class OutputFormatterMimeTypeGuesser implements MimeTypeGuesserInterface {
+class OutputFormatterMimeTypeGuesser implements MimeTypesInterface {
 
   /**
    * The output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * Constructs a new OutputFormatterMimeTypeGuesser.
    *
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The output formatter manager.
    */
   public function __construct(OutputFormatterPluginManagerInterface $outputFormatterManager) {
diff --git a/modules/static_export/src/Form/ConstrainedExporterSettingsFormBase.php b/modules/static_export/src/Form/ConstrainedExporterSettingsFormBase.php
index 385d983..762abea 100644
--- a/modules/static_export/src/Form/ConstrainedExporterSettingsFormBase.php
+++ b/modules/static_export/src/Form/ConstrainedExporterSettingsFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\Core\Routing\RouteProviderInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Url;
 
@@ -13,7 +14,7 @@ abstract class ConstrainedExporterSettingsFormBase extends ConfigFormBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
diff --git a/modules/static_export/src/Form/ExportableConfigAddForm.php b/modules/static_export/src/Form/ExportableConfigAddForm.php
index e163667..ea87972 100644
--- a/modules/static_export/src/Form/ExportableConfigAddForm.php
+++ b/modules/static_export/src/Form/ExportableConfigAddForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,23 +20,23 @@ class ExportableConfigAddForm extends ConfigFormBase {
   /**
    * The config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;
 
   /**
    * The static exporter messenger.
    *
-   * @var \Drupal\static_export\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $staticExportMessenger;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   The config exporter manager.
-   * @param \Drupal\static_export\Messenger\MessengerInterface $staticExportMessenger
+   * @param MessengerInterface $staticExportMessenger
    *   The static exporter messenger.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ConfigExporterPluginManagerInterface $configExporterManager, MessengerInterface $staticExportMessenger) {
@@ -115,9 +118,9 @@ class ExportableConfigAddForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $config = $this->config('static_export.settings');
diff --git a/modules/static_export/src/Form/ExportableConfigDeleteForm.php b/modules/static_export/src/Form/ExportableConfigDeleteForm.php
index 0093c06..65cfc8e 100644
--- a/modules/static_export/src/Form/ExportableConfigDeleteForm.php
+++ b/modules/static_export/src/Form/ExportableConfigDeleteForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\static_suite\StaticSuiteUserException;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -19,32 +22,32 @@ class ExportableConfigDeleteForm extends ConfirmFormBase {
   /**
    * The config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;
 
   /**
    * The static exporter messenger.
    *
-   * @var \Drupal\static_export\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $staticExportMessenger;
 
   /**
    * The config exporter path resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface
+   * @var ConfigExporterUriResolverInterface
    */
   protected $configExporterUriResolver;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   The config exporter manager.
-   * @param \Drupal\static_export\Messenger\MessengerInterface $staticExportMessenger
+   * @param MessengerInterface $staticExportMessenger
    *   The static exporter messenger.
-   * @param \Drupal\static_export\Exporter\Type\Config\Output\Uri\Resolver\ConfigExporterUriResolverInterface $configExporterUriResolver
+   * @param ConfigExporterUriResolverInterface $configExporterUriResolver
    *   The config exporter path resolver.
    */
   public function __construct(ConfigExporterPluginManagerInterface $configExporterManager, MessengerInterface $staticExportMessenger, ConfigExporterUriResolverInterface $configExporterUriResolver) {
@@ -124,9 +127,9 @@ class ExportableConfigDeleteForm extends ConfirmFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $config = $this->configFactory()->getEditable('static_export.settings');
diff --git a/modules/static_export/src/Form/ExportableConfigSettingsForm.php b/modules/static_export/src/Form/ExportableConfigSettingsForm.php
index 162c4d2..8490d24 100644
--- a/modules/static_export/src/Form/ExportableConfigSettingsForm.php
+++ b/modules/static_export/src/Form/ExportableConfigSettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,28 +21,28 @@ class ExportableConfigSettingsForm extends ConstrainedExporterSettingsFormBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The config exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterManager;
 
   /**
    * The static output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * The config output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $configExporterOutputConfigFactory;
 
@@ -49,13 +51,13 @@ class ExportableConfigSettingsForm extends ConstrainedExporterSettingsFormBase {
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface $configExporterManager
+   * @param ConfigExporterPluginManagerInterface $configExporterManager
    *   The config exporter manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The static output formatter manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $configExporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $configExporterOutputConfigFactory
    *   The config output configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider, ConfigExporterPluginManagerInterface $configExporterManager, OutputFormatterPluginManagerInterface $outputFormatterManager, ExporterOutputConfigFactoryInterface $configExporterOutputConfigFactory) {
@@ -96,7 +98,7 @@ class ExportableConfigSettingsForm extends ConstrainedExporterSettingsFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $config = $this->config('static_export.settings');
@@ -177,7 +179,7 @@ class ExportableConfigSettingsForm extends ConstrainedExporterSettingsFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('static_export.settings');
     $config
       ->set('exportable_config.exporter', $form_state->getValue('exporter'))
diff --git a/modules/static_export/src/Form/ExportableEntityForm.php b/modules/static_export/src/Form/ExportableEntityForm.php
index b1fa12b..c3f62c3 100644
--- a/modules/static_export/src/Form/ExportableEntityForm.php
+++ b/modules/static_export/src/Form/ExportableEntityForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\static_export\Entity\ExportableEntityInterface;
+use Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -20,50 +23,50 @@ class ExportableEntityForm extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityInterface
+   * @var ExportableEntityInterface
    */
   protected $entity;
 
   /**
    * Entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;
 
   /**
    * The static data resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;
 
   /**
    * The static output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * Constructs an StaticExportEntityForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The Entity Type Manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   Entity type bundle info service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory.
-   * @param \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface $dataResolverManager
+   * @param DataResolverPluginManagerInterface $dataResolverManager
    *   The static data resolver manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The static output formatter manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entityTypeBundleInfo, ConfigFactoryInterface $configFactory, DataResolverPluginManagerInterface $dataResolverManager, OutputFormatterPluginManagerInterface $outputFormatterManager) {
@@ -90,7 +93,7 @@ class ExportableEntityForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
diff --git a/modules/static_export/src/Form/ExportableEntitySettingsForm.php b/modules/static_export/src/Form/ExportableEntitySettingsForm.php
index db0ba2c..a29f703 100644
--- a/modules/static_export/src/Form/ExportableEntitySettingsForm.php
+++ b/modules/static_export/src/Form/ExportableEntitySettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,14 +18,14 @@ class ExportableEntitySettingsForm extends ConstrainedExporterSettingsFormBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;
 
@@ -33,9 +34,9 @@ class ExportableEntitySettingsForm extends ConstrainedExporterSettingsFormBase {
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface $entityExporterPluginManager
+   * @param EntityExporterPluginManagerInterface $entityExporterPluginManager
    *   The entity exporter manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider, EntityExporterPluginManagerInterface $entityExporterPluginManager) {
@@ -107,7 +108,7 @@ class ExportableEntitySettingsForm extends ConstrainedExporterSettingsFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('static_export.settings');
     $config
       ->set('exportable_entity.exporter', $form_state->getValue('exporter'))
diff --git a/modules/static_export/src/Form/ExportableLocaleSettingsForm.php b/modules/static_export/src/Form/ExportableLocaleSettingsForm.php
index 237517f..02ec89d 100644
--- a/modules/static_export/src/Form/ExportableLocaleSettingsForm.php
+++ b/modules/static_export/src/Form/ExportableLocaleSettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,28 +20,28 @@ class ExportableLocaleSettingsForm extends ConstrainedExporterSettingsFormBase {
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The locale exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterManager;
 
   /**
    * The static output formatter manager.
    *
-   * @var \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface
+   * @var OutputFormatterPluginManagerInterface
    */
   protected $outputFormatterManager;
 
   /**
    * The locale output configuration factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface
+   * @var ExporterOutputConfigFactoryInterface
    */
   protected $localeExporterOutputConfigFactory;
 
@@ -49,13 +50,13 @@ class ExportableLocaleSettingsForm extends ConstrainedExporterSettingsFormBase {
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface $localeExporterManager
+   * @param LocaleExporterPluginManagerInterface $localeExporterManager
    *   The locale exporter manager.
-   * @param \Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginManagerInterface $outputFormatterManager
+   * @param OutputFormatterPluginManagerInterface $outputFormatterManager
    *   The static output formatter manager.
-   * @param \Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
+   * @param ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory
    *   The locale output configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider, LocaleExporterPluginManagerInterface $localeExporterManager, OutputFormatterPluginManagerInterface $outputFormatterManager, ExporterOutputConfigFactoryInterface $localeExporterOutputConfigFactory) {
@@ -168,7 +169,7 @@ class ExportableLocaleSettingsForm extends ConstrainedExporterSettingsFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->config('static_export.settings');
     $config
       ->set('exportable_locale.exporter', $form_state->getValue('exporter'))
diff --git a/modules/static_export/src/Form/SettingsForm.php b/modules/static_export/src/Form/SettingsForm.php
index 9be6ab0..cb6f15d 100644
--- a/modules/static_export/src/Form/SettingsForm.php
+++ b/modules/static_export/src/Form/SettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export\Form;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -16,7 +18,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -55,9 +57,9 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
diff --git a/modules/static_export/src/Messenger/Messenger.php b/modules/static_export/src/Messenger/Messenger.php
index f3774a7..01b25c1 100644
--- a/modules/static_export/src/Messenger/Messenger.php
+++ b/modules/static_export/src/Messenger/Messenger.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Messenger;
 
+use Drupal\Core\Session\AccountProxy;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\MarkupTrait;
 use Drupal\Core\Messenger\Messenger as BaseMessenger;
@@ -25,27 +26,27 @@ class Messenger extends BaseMessenger implements MessengerInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The File Collection Formatter.
    *
-   * @var \Drupal\static_export\File\FileCollectionFormatter
+   * @var FileCollectionFormatter
    */
   protected $fileCollectionFormatter;
 
   /**
    * Messenger constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface $flash_bag
+   * @param FlashBagInterface $flash_bag
    *   The flash bag.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $killSwitch
+   * @param KillSwitch $killSwitch
    *   The kill switch.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\static_export\File\FileCollectionFormatter $fileCollectionFormatter
+   * @param FileCollectionFormatter $fileCollectionFormatter
    *   The File Collection Formatter.
    */
   public function __construct(FlashBagInterface $flash_bag, KillSwitch $killSwitch, AccountProxyInterface $currentUser, FileCollectionFormatter $fileCollectionFormatter) {
@@ -92,7 +93,7 @@ class Messenger extends BaseMessenger implements MessengerInterface {
   /**
    * Shows a message coming from a FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollection $fileCollection
+   * @param FileCollection $fileCollection
    *   A FileCollection.
    */
   protected function addFileCollection(FileCollection $fileCollection): void {
diff --git a/modules/static_export/src/Messenger/MessengerInterface.php b/modules/static_export/src/Messenger/MessengerInterface.php
index 542ae03..cce6fe6 100644
--- a/modules/static_export/src/Messenger/MessengerInterface.php
+++ b/modules/static_export/src/Messenger/MessengerInterface.php
@@ -30,7 +30,7 @@ interface MessengerInterface extends BaseMessengerInterface {
   /**
    * Shows a message coming from an array of FileCollection.
    *
-   * @param \Drupal\static_export\File\FileCollectionGroup $fileCollectionGroup
+   * @param FileCollectionGroup $fileCollectionGroup
    *   A FileCollectionGroup.
    *
    * @return MessengerInterface
diff --git a/modules/static_export/src/Plugin/static_export/Data/Resolver/JsonSerializerDataResolver.php b/modules/static_export/src/Plugin/static_export/Data/Resolver/JsonSerializerDataResolver.php
index 545b474..07f16a1 100644
--- a/modules/static_export/src/Plugin/static_export/Data/Resolver/JsonSerializerDataResolver.php
+++ b/modules/static_export/src/Plugin/static_export/Data/Resolver/JsonSerializerDataResolver.php
@@ -22,7 +22,7 @@ class JsonSerializerDataResolver extends DataResolverPluginBase {
   /**
    * Serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
@@ -35,7 +35,7 @@ class JsonSerializerDataResolver extends DataResolverPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   Serializer service.
    */
   public function __construct(
diff --git a/modules/static_export/src/Plugin/static_export/Exporter/Config/ConfigExporter.php b/modules/static_export/src/Plugin/static_export/Exporter/Config/ConfigExporter.php
index ab7ca4e..f9ff954 100644
--- a/modules/static_export/src/Plugin/static_export/Exporter/Config/ConfigExporter.php
+++ b/modules/static_export/src/Plugin/static_export/Exporter/Config/ConfigExporter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Plugin\static_export\Exporter\Config;
 
+use Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface;
+use Drupal\Core\Config\Config;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginBase;
@@ -26,7 +29,7 @@ class ConfigExporter extends ConfigExporterPluginBase {
   /**
    * The config exporter plugin manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Config\ConfigExporterPluginManagerInterface
+   * @var ConfigExporterPluginManagerInterface
    */
   protected $configExporterPluginManager;
 
@@ -47,7 +50,7 @@ class ConfigExporter extends ConfigExporterPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Config\Config
+   * @return Config
    *   Drupal configuration object.
    */
   public function getExporterItem() {
@@ -80,7 +83,7 @@ class ConfigExporter extends ConfigExporterPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   public function checkParams(array $options): bool {
     if (!isset($options[self::PARAM_NAME])) {
@@ -165,7 +168,7 @@ class ConfigExporter extends ConfigExporterPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function exportTranslations(): FileCollection {
diff --git a/modules/static_export/src/Plugin/static_export/Exporter/Custom/LanguageConfigExporter.php b/modules/static_export/src/Plugin/static_export/Exporter/Custom/LanguageConfigExporter.php
index 6fca295..93fd306 100644
--- a/modules/static_export/src/Plugin/static_export/Exporter/Custom/LanguageConfigExporter.php
+++ b/modules/static_export/src/Plugin/static_export/Exporter/Custom/LanguageConfigExporter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Plugin\static_export\Exporter\Custom;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginBase;
 
@@ -40,7 +41,7 @@ class LanguageConfigExporter extends CustomExporterPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getOutputDefinition(): ?ExporterOutputConfigInterface {
     $format = $this->configFactory->get('static_export.settings')
diff --git a/modules/static_export/src/Plugin/static_export/Exporter/Entity/EntityExporter.php b/modules/static_export/src/Plugin/static_export/Exporter/Entity/EntityExporter.php
index 20d6aeb..758324e 100644
--- a/modules/static_export/src/Plugin/static_export/Exporter/Entity/EntityExporter.php
+++ b/modules/static_export/src/Plugin/static_export/Exporter/Entity/EntityExporter.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\static_export\Plugin\static_export\Exporter\Entity;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\locale\LocaleConfigManager;
+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface;
+use Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface;
+use Drupal\static_export\Entity\ExportableEntityManagerInterface;
+use Drupal\static_suite\StaticSuiteException;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\ContentEntityBase;
@@ -37,42 +45,42 @@ class EntityExporter extends EntityExporterPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager|object|null
+   * @var EntityTypeManager|object|null
    */
   protected $entityTypeManager;
 
   /**
    * The locale config manager.
    *
-   * @var \Drupal\locale\LocaleConfigManager|object|null
+   * @var LocaleConfigManager|object|null
    */
   protected $localeConfigManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * Entity exporter manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface
+   * @var EntityExporterPluginManagerInterface
    */
   protected $entityExporterPluginManager;
 
   /**
    * Data resolver manager.
    *
-   * @var \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginManagerInterface
+   * @var DataResolverPluginManagerInterface
    */
   protected $dataResolverManager;
 
   /**
    * Exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;
 
@@ -91,7 +99,7 @@ class EntityExporter extends EntityExporterPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Item being exported (an entity)
    */
   public function getExporterItem() {
@@ -257,9 +265,9 @@ class EntityExporter extends EntityExporterPluginBase {
    * Being a completely different translation strategy, we split this method out
    * into two different ones.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    * @throws \Exception
    */
   protected function exportTranslations(): FileCollection {
@@ -284,14 +292,14 @@ class EntityExporter extends EntityExporterPluginBase {
   /**
    * Export translations for entities implementing TranslatableInterface.
    *
-   * @param \Drupal\Core\TypedData\TranslatableInterface $translatableEntity
+   * @param TranslatableInterface $translatableEntity
    *   A translatable entity implementing TranslatableInterface.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws PluginException
+   * @throws StaticSuiteException
+   * @throws StaticSuiteUserException
    */
   protected function exportTranslatableEntityTranslations(TranslatableInterface $translatableEntity): FileCollection {
     $fileCollection = new FileCollection($this->uniqueId());
@@ -347,10 +355,10 @@ class EntityExporter extends EntityExporterPluginBase {
   /**
    * Export translations for entities instance of ConfigEntityInterface.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $configEntity
+   * @param ConfigEntityInterface $configEntity
    *   An entity implementing ConfigEntityInterface.
    *
-   * @return \Drupal\static_export\File\FileCollection
+   * @return FileCollection
    *
    * @throws \Exception
    */
@@ -363,10 +371,10 @@ class EntityExporter extends EntityExporterPluginBase {
     // object being edited, and this responds to an action triggered by a user,
     // avoid executing this code while on CLI.
     if (!$this->staticSuiteUtils->isRunningOnCli()) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entityBeingExported */
+      /** @var ConfigEntityInterface $entityBeingExported */
       $entityBeingExported = $this->getExporterItem();
       $translationLanguages = $this->entityUtils->getConfigEntityTranslationLanguages($entityBeingExported, TRUE);
-      /** @var \Drupal\Core\Routing\RouteMatchInterface $currentRouteMatch */
+      /** @var RouteMatchInterface $currentRouteMatch */
       $langcodeBeingEdited = $this->currentRouteMatch->getParameter('langcode');
       $languageBeingEdited = $this->languageManager->getLanguage($langcodeBeingEdited);
       if ($languageBeingEdited && empty($translationLanguages[$langcodeBeingEdited])) {
@@ -416,10 +424,10 @@ class EntityExporter extends EntityExporterPluginBase {
   /**
    * Get the data resolver plugin being used by this entity exporter.
    *
-   * @return \Drupal\static_export\Exporter\Data\Resolver\DataResolverPluginInterface
+   * @return DataResolverPluginInterface
    *   Data resolver plugin
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function getDataResolver(): ?DataResolverPluginInterface {
     $entity = $this->options[self::PARAM_ENTITY];
@@ -454,7 +462,7 @@ class EntityExporter extends EntityExporterPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
+   * @throws StaticSuiteUserException
    */
   protected function getVariantKeyDefinitions(): array {
     $dataResolver = $this->getDataResolver();
diff --git a/modules/static_export/src/Plugin/static_export/Exporter/Locale/LocaleExporter.php b/modules/static_export/src/Plugin/static_export/Exporter/Locale/LocaleExporter.php
index 77e1874..41ce7e0 100644
--- a/modules/static_export/src/Plugin/static_export/Exporter/Locale/LocaleExporter.php
+++ b/modules/static_export/src/Plugin/static_export/Exporter/Locale/LocaleExporter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_export\Plugin\static_export\Exporter\Locale;
 
+use Drupal\locale\StringStorageInterface;
+use Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface;
+use Drupal\locale\StringInterface;
 use Drupal\static_export\Exporter\ExporterPluginInterface;
 use Drupal\static_export\Exporter\Output\Config\ExporterOutputConfigInterface;
 use Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginBase;
@@ -24,14 +27,14 @@ class LocaleExporter extends LocaleExporterPluginBase {
   /**
    * Locale storage.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localeStorage;
 
   /**
    * The locale exporter plugin manager.
    *
-   * @var \Drupal\static_export\Exporter\Type\Locale\LocaleExporterPluginManagerInterface
+   * @var LocaleExporterPluginManagerInterface
    */
   protected $localeExporterPluginManager;
 
@@ -53,7 +56,7 @@ class LocaleExporter extends LocaleExporterPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\locale\StringInterface[]
+   * @return StringInterface[]
    *   Array of StringInterface
    */
   public function getExporterItem() {
diff --git a/modules/static_export/src/Plugin/static_export/Output/Formatter/XmlOutputFormatter.php b/modules/static_export/src/Plugin/static_export/Output/Formatter/XmlOutputFormatter.php
index 523cbb2..2731f8c 100644
--- a/modules/static_export/src/Plugin/static_export/Output/Formatter/XmlOutputFormatter.php
+++ b/modules/static_export/src/Plugin/static_export/Output/Formatter/XmlOutputFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\Plugin\static_export\Output\Formatter;
 
+use Symfony\Component\Serializer\Serializer;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\static_export\Exporter\Output\Formatter\OutputFormatterPluginInterface;
@@ -24,7 +25,7 @@ class XmlOutputFormatter extends PluginBase implements OutputFormatterPluginInte
   /**
    * Serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -37,7 +38,7 @@ class XmlOutputFormatter extends PluginBase implements OutputFormatterPluginInte
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   Serializer.
    */
   public function __construct(
diff --git a/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/CustomPagePathUriResolver.php b/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/CustomPagePathUriResolver.php
index 51f49a7..88b3ca3 100644
--- a/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/CustomPagePathUriResolver.php
+++ b/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/CustomPagePathUriResolver.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\static_export\Plugin\static_export\Output\Uri\Resolver\PagePath;
 
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface;
+use Drupal\static_export\Exporter\Output\Uri\UriFactory;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginInterface;
@@ -23,35 +27,35 @@ class CustomPagePathUriResolver extends PluginBase implements PagePathUriResolve
   /**
    * Drupal cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The entity exporter URI resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Custom\CustomExporterPluginManagerInterface
+   * @var CustomExporterPluginManagerInterface
    */
   protected $customExporterManager;
 
   /**
    * The URI factory.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriFactory|object|null
+   * @var UriFactory|object|null
    */
   protected $uriFactory;
 
   /**
    * A simple cache to avoid running the resolver twice for the same resource.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\UriInterface[]
+   * @var UriInterface[]
    */
   protected $localUriCache;
 
@@ -115,7 +119,7 @@ class CustomPagePathUriResolver extends PluginBase implements PagePathUriResolve
    * @param string $pagePath
    *   Page path to serach for inside $supportedPagePaths.
    *
-   * @return \Drupal\static_export\Exporter\Output\Uri\UriInterface|null
+   * @return UriInterface|null
    *   An URI if something found, or NULL otherwise.
    * @see CustomExporterPluginInterface::getSupportedPagePaths()
    */
diff --git a/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/EntityPagePathUriResolver.php b/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/EntityPagePathUriResolver.php
index d411806..8d2b3bd 100644
--- a/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/EntityPagePathUriResolver.php
+++ b/modules/static_export/src/Plugin/static_export/Output/Uri/Resolver/PagePath/EntityPagePathUriResolver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_export\Plugin\static_export\Output\Uri\Resolver\PagePath;
 
+use Drupal\static_suite\Entity\EntityUtils;
+use Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolver;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverPluginInterface;
 use Drupal\static_export\Exporter\Output\Uri\UriInterface;
@@ -22,14 +24,14 @@ class EntityPagePathUriResolver extends PluginBase implements PagePathUriResolve
   /**
    * Entity utils from Static Suite.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * The entity exporter URI resolver.
    *
-   * @var \Drupal\static_export\Exporter\Type\Entity\Output\Uri\Resolver\EntityExporterUriResolver
+   * @var EntityExporterUriResolver
    */
   protected $entityExporterUriResolver;
 
diff --git a/modules/static_export/src/StreamWrapper/StaticStream.php b/modules/static_export/src/StreamWrapper/StaticStream.php
index 8bde8c6..cf6033f 100644
--- a/modules/static_export/src/StreamWrapper/StaticStream.php
+++ b/modules/static_export/src/StreamWrapper/StaticStream.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_export\StreamWrapper;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StreamWrapper\LocalStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Core\Url;
@@ -16,7 +17,7 @@ class StaticStream extends LocalStream {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
diff --git a/modules/static_export/static_export.module b/modules/static_export/static_export.module
index 570d365..e243c78 100644
--- a/modules/static_export/static_export.module
+++ b/modules/static_export/static_export.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Routing\RouteMatchInterface;
 /**
  * @file
  * Exports entities to files in different formats (MarkDown, JSON, etc).
@@ -155,7 +156,7 @@ function static_export_entity_delete(EntityInterface $entity) {
 /**
  * Save entity data in disk for the configured format.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginException
+ * @throws PluginException
  */
 function static_export_do_entity_write(EntityInterface $entity) {
   /* @var $entityExporterPluginManager \Drupal\static_export\Exporter\Type\Entity\EntityExporterPluginManagerInterface */
@@ -231,10 +232,10 @@ function static_export_was_entity_published(EntityInterface $entity) {
 /**
  * Get a Menu Entity from MenuLinkContent.
  *
- * @param \Drupal\Core\Entity\EntityInterface $menuLink
+ * @param EntityInterface $menuLink
  *   A MenuLinkContent object
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   An Exportable Entity
  */
 function _static_export_getMenuFromMenuLink(EntityInterface $menuLink) {
@@ -274,11 +275,10 @@ function _static_export_getMenuFromMenuLink(EntityInterface $menuLink) {
  * So we need to fix the first case, detecting it to manually return menu
  * and not MenuLinkContent.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   An Entity
  *
  * @return bool
- *
  */
 function _static_export_isMenuLink(EntityInterface $entity) {
   if ($entity instanceof MenuLinkContent) {
@@ -364,7 +364,7 @@ function static_export_form_node_form_alter(&$form, FormStateInterface $form_sta
             '#title' => str_replace('/', '/​', $exportedUriTarget),
             '#type' => 'link',
             '#attributes' => ['target' => '_blank'],
-            '#url' => Url::fromUri(file_create_url($uri)),
+            '#url' => \Drupal::service('file_url_generator')->generate($uri),
           ],
         ];
       }
@@ -431,7 +431,7 @@ function static_export_form_config_translation_delete_form_alter(&$form, FormSta
   $buildInfo = $form_state->getBuildInfo();
   if (!empty($buildInfo['args'][0])) {
     $languageManager = \Drupal::service('language_manager');
-    /** @var \Drupal\Core\Routing\RouteMatchInterface $routeMatch */
+    /** @var RouteMatchInterface $routeMatch */
     $routeMatch = $buildInfo['args'][0];
     $pluginId = $routeMatch->getParameter('plugin_id');
     if ($pluginId) {
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php
index 1592f73..317cf70 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/NodePreviewController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_preview_gatsby_instant\Controller;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,61 +26,61 @@ class NodePreviewController extends BaseNodePreviewController {
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $pathAliasManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;
 
   /**
    * The Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMockerInterface
+   * @var GatsbyMockerInterface
    */
   protected $gatsbyMocker;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The current path for the current request.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * Creates an NodeViewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.º.
-   * @param \Drupal\path_alias\AliasManagerInterface $pathAliasManager
+   * @param AliasManagerInterface $pathAliasManager
    *   The path alias manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\static_export\Entity\ExportableEntityManagerInterface $exportableEntityManager
+   * @param ExportableEntityManagerInterface $exportableEntityManager
    *   The exportable entity manager.
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMockerInterface $gatsbyMocker
+   * @param GatsbyMockerInterface $gatsbyMocker
    *   The Gatsby mocker service.
    */
   public function __construct(
@@ -127,7 +128,7 @@ class NodePreviewController extends BaseNodePreviewController {
     if ($exportableEntity) {
       $isStatifiedPage = $exportableEntity->getIsStatifiedPage();
       $event = new StaticPreviewEvent($node_preview);
-      $this->eventDispatcher->dispatch(StaticPreviewEvents::PRE_RENDER, $event);
+      $this->eventDispatcher->dispatch($event, StaticPreviewEvents::PRE_RENDER);
       $isPreviewable = $event->isPreviewable();
     }
 
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageDataResolverController.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageDataResolverController.php
index e2dce58..21a6cd0 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageDataResolverController.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageDataResolverController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_preview_gatsby_instant\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,14 +18,14 @@ class PageDataResolverController extends ControllerBase {
   /**
    * The Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker
+   * @var GatsbyMocker
    */
   protected $gatsbyMocker;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker $gatsbyMocker
+   * @param GatsbyMocker $gatsbyMocker
    *   Gatsby mocker service.
    */
   public function __construct(GatsbyMocker $gatsbyMocker) {
@@ -45,11 +47,11 @@ class PageDataResolverController extends ControllerBase {
    * @param string $pagePath
    *   Page path with leading slash.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\Response
+   * @return JsonResponse|Response
    *   JSON response on success, or Response with 404 code on error.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    * @throws \JsonException
    */
   public function pageDataResolver(string $pagePath) {
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageHtmlCustomUrlResolverController.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageHtmlCustomUrlResolverController.php
index 6c6b37e..e3b46fe 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageHtmlCustomUrlResolverController.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/Controller/PageHtmlCustomUrlResolverController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_preview_gatsby_instant\Controller;
 
+use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -15,14 +16,14 @@ class PageHtmlCustomUrlResolverController extends ControllerBase {
   /**
    * The Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker
+   * @var GatsbyMocker
    */
   protected $gatsbyMocker;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker $gatsby_mocker
+   * @param GatsbyMocker $gatsby_mocker
    *   Gatsby mocker service.
    */
   public function __construct(GatsbyMocker $gatsby_mocker) {
@@ -44,7 +45,7 @@ class PageHtmlCustomUrlResolverController extends ControllerBase {
    * @param string $pagePath
    *   Page path with leading slash.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\Response
+   * @return JsonResponse|Response
    *   JSON response on success, or Response with 404 code on error.
    */
   public function pageHtmlResolver(string $pagePath) {
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/EventSubscriber.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/EventSubscriber.php
index 384cf0a..02d1d51 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/EventSubscriber.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/EventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_preview_gatsby_instant\EventSubscriber;
 
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\static_build\Plugin\StaticBuilderPluginInterface;
 use Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface;
@@ -19,41 +20,41 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Static Builder Manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * Static Export utils.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * Constructs the subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static Builder Manager.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Utils for working with entities.
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export utils.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, EntityUtils $entityUtils, StaticSuiteUtilsInterface $static_suite_utils) {
@@ -74,13 +75,13 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a StaticExportEvents::CHECK_PARAMS_ENDS event.
    *
-   * @param \Drupal\static_export\Event\StaticExportEvent $event
+   * @param StaticExportEvent $event
    *   The Static Export event.
    *
-   * @return \Drupal\static_export\Event\StaticExportEvent
+   * @return StaticExportEvent
    *   The processed event.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function triggerPreviewBuild(StaticExportEvent $event) {
     $exporter = $event->getExporter();
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php
index c665286..c352cd8 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/EventSubscriber/PreviewControllerWrapperSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_preview_gatsby_instant\EventSubscriber;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Symfony\Component\HttpKernel\Event\ControllerEvent;
 use Drupal\Core\Controller\ControllerResolverInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -16,7 +18,6 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -27,50 +28,50 @@ class PreviewControllerWrapperSubscriber implements EventSubscriberInterface {
   /**
    * The controller resolver.
    *
-   * @var \Drupal\Core\Controller\ControllerResolverInterface
+   * @var ControllerResolverInterface
    */
   protected $controllerResolver;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The exportable entity manager.
    *
-   * @var \Drupal\static_export\Entity\ExportableEntityManagerInterface
+   * @var ExportableEntityManagerInterface
    */
   protected $exportableEntityManager;
 
   /**
    * Gatsby mocker service.
    *
-   * @var \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker
+   * @var GatsbyMocker
    */
   protected $gatsbyMocker;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructs a new ControllerWrapperSubscriber instance.
    *
-   * @param \Drupal\Core\Controller\ControllerResolverInterface $controller_resolver
+   * @param ControllerResolverInterface $controller_resolver
    *   The controller resolver.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\static_preview_gatsby_instant\Mocker\GatsbyMocker $gatsbyMocker
+   * @param GatsbyMocker $gatsbyMocker
    *   Gatsby mocker service.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder plugin manager.
-   * @param \Drupal\static_export\Entity\ExportableEntityManagerInterface $exportableEntityManager
+   * @param ExportableEntityManagerInterface $exportableEntityManager
    *   The exportable entity manager.
    */
   public function __construct(
@@ -99,10 +100,10 @@ class PreviewControllerWrapperSubscriber implements EventSubscriberInterface {
   /**
    * Wraps a controller execution in a preview handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+   * @param ControllerEvent $event
    *   The controller event.
    */
-  public function onController(FilterControllerEvent $event): void {
+  public function onController(ControllerEvent $event): void {
     $controller = $event->getController();
 
     // See \Symfony\Component\HttpKernel\HttpKernel::handleRaw().
@@ -129,7 +130,7 @@ class PreviewControllerWrapperSubscriber implements EventSubscriberInterface {
    *   The controller to execute.
    * @param array $arguments
    *   The arguments to pass to the controller.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return mixed
@@ -160,7 +161,7 @@ class PreviewControllerWrapperSubscriber implements EventSubscriberInterface {
                 $isStatifiedPage = $exportableEntity->getIsStatifiedPage();
                 // Check if this exportable entity can be previewed.
                 $event = new StaticPreviewEvent($argument);
-                $this->eventDispatcher->dispatch(StaticPreviewEvents::PRE_RENDER, $event);
+                $this->eventDispatcher->dispatch($event, StaticPreviewEvents::PRE_RENDER);
                 $isPreviewable = $event->isPreviewable();
               }
 
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/Form/SettingsForm.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/Form/SettingsForm.php
index bd695cd..bbc6673 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/Form/SettingsForm.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/Form/SettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_preview_gatsby_instant\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\static_suite\StaticSuiteException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,25 +21,25 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Release manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;
 
   /**
    * Static builder manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   Static builder manager.
-   * @param \Drupal\static_build\Release\ReleaseManagerInterface $releaseManager
+   * @param ReleaseManagerInterface $releaseManager
    *   Release manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StaticBuilderPluginManagerInterface $staticBuilderPluginManager, ReleaseManagerInterface $releaseManager) {
@@ -74,8 +76,8 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $builder = $this->staticBuilderPluginManager->getInstance([
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolver.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolver.php
index f52eadf..488d289 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolver.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolver.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\static_preview_gatsby_instant\GraphQL\Data\Resolver;
 
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\static_suite\StaticSuiteUserException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\node\NodeInterface;
 use Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface;
@@ -15,39 +18,39 @@ class GraphqlNodePreviewDataResolver implements GraphqlNodePreviewDataResolverIn
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Entity Utils.
    *
-   * @var \Drupal\static_suite\Entity\EntityUtils
+   * @var EntityUtils
    */
   protected $entityUtils;
 
   /**
    * Handler for querying GraphQL.
    *
-   * @var \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface
+   * @var GraphqlQueryHandlerInterface
    */
   protected $graphqlQueryHandler;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\static_suite\Entity\EntityUtils $entityUtils
+   * @param EntityUtils $entityUtils
    *   Entity utils service.
-   * @param \Drupal\static_export_graphql_data_resolver\GraphqlQueryHandlerInterface $graphqlQueryHandler
+   * @param GraphqlQueryHandlerInterface $graphqlQueryHandler
    *   Service for querying GraphQL.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityUtils $entityUtils, GraphqlQueryHandlerInterface $graphqlQueryHandler) {
@@ -59,8 +62,8 @@ class GraphqlNodePreviewDataResolver implements GraphqlNodePreviewDataResolverIn
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\static_suite\StaticSuiteUserException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws StaticSuiteUserException
+   * @throws PluginException
    */
   public function resolve(NodeInterface $node): array {
     $query = $this->graphqlQueryHandler->getQueryFileContents($node);
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolverInterface.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolverInterface.php
index 3b4c485..27c6a7c 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolverInterface.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/GraphQL/Data/Resolver/GraphqlNodePreviewDataResolverInterface.php
@@ -16,7 +16,7 @@ interface GraphqlNodePreviewDataResolverInterface {
    * That query works only with nodes, hence this method allows only nodes
    * instead of entities.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to get preview data for.
    *
    * @return array
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/Mocker/GatsbyMocker.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/Mocker/GatsbyMocker.php
index 8dead0f..a725f34 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/Mocker/GatsbyMocker.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/Mocker/GatsbyMocker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_preview_gatsby_instant\Mocker;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -25,93 +26,93 @@ class GatsbyMocker implements GatsbyMockerInterface {
   /**
    * Drupal config.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface
+   * @var PagePathUriResolverInterface
    */
   protected $pagePathUriResolver;
 
   /**
    * The static builder plugin manager.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface
+   * @var StaticBuilderPluginManagerInterface
    */
   protected $staticBuilderPluginManager;
 
   /**
    * Release manager.
    *
-   * @var \Drupal\static_build\Release\ReleaseManagerInterface
+   * @var ReleaseManagerInterface
    */
   protected $releaseManager;
 
   /**
    * The static builder helper.
    *
-   * @var \Drupal\static_build\Plugin\StaticBuilderHelperInterface
+   * @var StaticBuilderHelperInterface
    */
   protected $staticBuilderHelper;
 
   /**
    * The data include loader.
    *
-   * @var \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface
+   * @var DataIncludeLoaderInterface
    */
   protected $dataIncludeLoader;
 
   /**
    * The GraphQL preview data resolver.
    *
-   * @var \Drupal\static_preview_gatsby_instant\GraphQL\Data\Resolver\GraphqlNodePreviewDataResolverInterface
+   * @var GraphqlNodePreviewDataResolverInterface
    */
   protected $graphqlNodePreviewDataResolver;
 
   /**
    * GatsbyMocker service constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository.
-   * @param \Drupal\static_build\Plugin\StaticBuilderPluginManagerInterface $staticBuilderPluginManager
+   * @param StaticBuilderPluginManagerInterface $staticBuilderPluginManager
    *   The static builder manager.
-   * @param \Drupal\static_build\Plugin\StaticBuilderHelperInterface $staticBuilderHelper
+   * @param StaticBuilderHelperInterface $staticBuilderHelper
    *   The static builder helper.
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface $pagePathUriResolver
+   * @param PagePathUriResolverInterface $pagePathUriResolver
    *   The URI resolver for page paths.
-   * @param \Drupal\static_export\Exporter\Data\Includes\Loader\DataIncludeLoaderInterface $dataIncludeLoader
+   * @param DataIncludeLoaderInterface $dataIncludeLoader
    *   The data include loader.
-   * @param \Drupal\static_preview_gatsby_instant\GraphQL\Data\Resolver\GraphqlNodePreviewDataResolverInterface $graphqlNodePreviewDataResolver
+   * @param GraphqlNodePreviewDataResolverInterface $graphqlNodePreviewDataResolver
    *   The GraphQL preview data resolver.
    */
   public function __construct(
@@ -139,10 +140,10 @@ class GatsbyMocker implements GatsbyMockerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    * @throws \JsonException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function getMockedPageData(string $pagePath): ?array {
     // EntityExporterUriResolverInterface ($this->entityExporterUriResolver)
@@ -263,8 +264,8 @@ class GatsbyMocker implements GatsbyMockerInterface {
    * @return array|null
    *   The page data in array format.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    * @throws \JsonException
    */
   protected function getPreviewComponentPageData(): ?array {
@@ -289,8 +290,8 @@ class GatsbyMocker implements GatsbyMockerInterface {
    * @return string|null
    *   Component's html.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   protected function getPreviewComponentHtml(): ?string {
     $currentRelease = $this->releaseManager()->getCurrentRelease();
@@ -318,11 +319,11 @@ class GatsbyMocker implements GatsbyMockerInterface {
   /**
    * Get release manager from plugin.
    *
-   * @return \Drupal\static_build\Release\ReleaseManagerInterface
+   * @return ReleaseManagerInterface
    *   The plugin's release manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws PluginException
+   * @throws StaticSuiteException
    */
   protected function releaseManager(): ReleaseManagerInterface {
     if (!$this->releaseManager) {
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageDataPathProcessor.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageDataPathProcessor.php
index cef9e2a..ef50b28 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageDataPathProcessor.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageDataPathProcessor.php
@@ -19,7 +19,7 @@ class PageDataPathProcessor implements InboundPathProcessorInterface {
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
diff --git a/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageHtmlCustomUrlProcessor.php b/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageHtmlCustomUrlProcessor.php
index caf6406..1600c1c 100644
--- a/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageHtmlCustomUrlProcessor.php
+++ b/modules/static_preview/modules/static_preview_gatsby_instant/src/PathProcessor/PageHtmlCustomUrlProcessor.php
@@ -20,14 +20,14 @@ class PageHtmlCustomUrlProcessor implements InboundPathProcessorInterface {
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The URI resolver for page paths.
    *
-   * @var \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface
+   * @var PagePathUriResolverInterface
    */
   protected $pagePathUriResolver;
 
@@ -36,7 +36,7 @@ class PageHtmlCustomUrlProcessor implements InboundPathProcessorInterface {
    *
    * @param \Drupal\Core\Language\LanguageManagerInterface languageManager
    *   Language manager.
-   * @param \Drupal\static_export\Exporter\Output\Uri\Resolver\PagePath\PagePathUriResolverInterface $pagePathUriResolver
+   * @param PagePathUriResolverInterface $pagePathUriResolver
    *   The URI resolver for page paths.
    */
   public function __construct(LanguageManagerInterface $languageManager, PagePathUriResolverInterface $pagePathUriResolver) {
diff --git a/modules/static_preview/src/Event/StaticPreviewEvent.php b/modules/static_preview/src/Event/StaticPreviewEvent.php
index 988aa3d..ba2c78a 100644
--- a/modules/static_preview/src/Event/StaticPreviewEvent.php
+++ b/modules/static_preview/src/Event/StaticPreviewEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\static_preview\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 
 /**
@@ -21,14 +21,14 @@ class StaticPreviewEvent extends Event {
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * StaticPreviewEvent constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function __construct(EntityInterface $entity) {
@@ -58,7 +58,7 @@ class StaticPreviewEvent extends Event {
   /**
    * Get the entity being previewed.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity(): EntityInterface {
diff --git a/src/Entity/EntityReferenceFinder.php b/src/Entity/EntityReferenceFinder.php
index 657f190..6fec214 100644
--- a/src/Entity/EntityReferenceFinder.php
+++ b/src/Entity/EntityReferenceFinder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_suite\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,14 +20,14 @@ class EntityReferenceFinder implements EntityReferenceFinderInterface {
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -40,9 +42,9 @@ class EntityReferenceFinder implements EntityReferenceFinderInterface {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityFieldManager $entityFieldManager, EntityTypeManagerInterface $entityTypeManager) {
@@ -74,7 +76,7 @@ class EntityReferenceFinder implements EntityReferenceFinderInterface {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to search.
    * @param int $maxRecursionLevel
    *   Maximum level of recursion. Defaults to 1.
@@ -86,8 +88,8 @@ class EntityReferenceFinder implements EntityReferenceFinderInterface {
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function findReferences(EntityInterface $entity, int $maxRecursionLevel = 1, int $currentRecursionLevel = 1, array $referencingEntities = []): array {
     // Find the entity id string inside "entity_reference" fields.
@@ -125,12 +127,12 @@ class EntityReferenceFinder implements EntityReferenceFinderInterface {
    * @param string $entityId
    *   Id of the entity to be searched.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entity_reference fields by entity type that contain the entity
    *   id string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function findEntitiesContainingAnotherEntityIdInsideItsFields(string $entityId): array {
     $entitiesContainingEntityIdInsideItsFields = [];
@@ -176,14 +178,14 @@ class EntityReferenceFinder implements EntityReferenceFinderInterface {
    *
    * @param array $entitiesContainingEntityIdStringInsideItsFields
    *   Array of entities that contain the entity id inside its fields.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we are searching for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities referencing our entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntitiesPointingToAnotherEntity(array $entitiesContainingEntityIdStringInsideItsFields, EntityInterface $entity): array {
     $referencingEntities = [];
@@ -243,7 +245,7 @@ class EntityReferenceFinder implements EntityReferenceFinderInterface {
    * @param \Drupal\paragraphs\ParagraphInterface $paragraph
    *   Paragraph.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   Parent Entity.
    */
   protected function getParagraphParentEntity(ParagraphInterface $paragraph): ?ContentEntityInterface {
diff --git a/src/Entity/EntityReferenceFinderInterface.php b/src/Entity/EntityReferenceFinderInterface.php
index 01e7093..17848f8 100644
--- a/src/Entity/EntityReferenceFinderInterface.php
+++ b/src/Entity/EntityReferenceFinderInterface.php
@@ -22,12 +22,12 @@ interface EntityReferenceFinderInterface {
   /**
    * Find references to an entity in nodes or paragraphs.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to be found.
    * @param int $maxRecursionLevel
    *   Optional, defaults to 1. 0 for infinite recursion.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Empty array or ids of the related nodes.
    */
   public function findReferences(EntityInterface $entity, int $maxRecursionLevel = 1): array;
diff --git a/src/Entity/EntityUtils.php b/src/Entity/EntityUtils.php
index da8d469..c9f569f 100644
--- a/src/Entity/EntityUtils.php
+++ b/src/Entity/EntityUtils.php
@@ -25,28 +25,28 @@ class EntityUtils implements EntityUtilsInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The locale config manager.
    *
-   * @var \Drupal\locale\LocaleConfigManager|object|null
+   * @var LocaleConfigManager|object|null
    */
   protected $localeConfigManager;
 
@@ -60,13 +60,13 @@ class EntityUtils implements EntityUtilsInterface {
   /**
    * Constructs the entity utils.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language Manager.
-   * @param \Drupal\path_alias\AliasManagerInterface $aliasManager
+   * @param AliasManagerInterface $aliasManager
    *   The alias manager.
-   * @param \Drupal\locale\LocaleConfigManager $localeConfigManager
+   * @param LocaleConfigManager $localeConfigManager
    *   The locale config manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, AliasManagerInterface $aliasManager, LocaleConfigManager $localeConfigManager) {
@@ -149,7 +149,7 @@ class EntityUtils implements EntityUtilsInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getConfigEntityTranslationLanguages(ConfigEntityInterface $configEntity, bool $include_default = TRUE): array {
     $translationLanguages = [];
diff --git a/src/Entity/EntityUtilsInterface.php b/src/Entity/EntityUtilsInterface.php
index 7a22c7c..5f5f85d 100644
--- a/src/Entity/EntityUtilsInterface.php
+++ b/src/Entity/EntityUtilsInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_suite\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\Core\Entity\EntityInterface;
@@ -25,7 +27,7 @@ interface EntityUtilsInterface {
    * @param string|null $langcode
    *   Optional language code of the entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Loaded entity.
    */
   public function loadEntity(string $entityTypeId, string $entityId, string $langcode = NULL): ?EntityInterface;
@@ -54,9 +56,9 @@ interface EntityUtilsInterface {
    * @return array
    *   Entity ids
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
    */
   public function getEntityIds(string $entityTypeId, $options = []): array;
@@ -64,13 +66,13 @@ interface EntityUtilsInterface {
   /**
    * Returns the languages the config entity is translated to.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $configEntity
+   * @param ConfigEntityInterface $configEntity
    *   The config entity.
    * @param bool $include_default
    *   (optional) Whether the default language should be included. Defaults to
    *   TRUE.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   An associative array of language objects, keyed by language codes.
    */
   public function getConfigEntityTranslationLanguages(ConfigEntityInterface $configEntity, bool $include_default = TRUE): array;
@@ -78,7 +80,7 @@ interface EntityUtilsInterface {
   /**
    * Check if entity status has changed.
    *
-   * @param \Drupal\Core\Entity\EditorialContentEntityBase $entity
+   * @param EditorialContentEntityBase $entity
    *   The Entity to be checked.
    *
    * @return bool
@@ -113,14 +115,14 @@ interface EntityUtilsInterface {
    * LanguageInterface::LANGCODE_DEFAULT, etc). In such cases, we filter out
    * those languages and use the default one.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to get its language.
    *
    * @param bool $useLockedLanguages
    *   If true, and a locked language if found, it returns that language.
    *   If false, and a locked language if found, it returns the default one.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   Normalized language
    */
   public function getNormalizedEntityLanguage(EntityInterface $entity, bool $useLockedLanguages = TRUE): LanguageInterface;
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 5dc67d7..9650e4a 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\static_suite\Form;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -16,7 +18,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -55,9 +57,9 @@ class SettingsForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
diff --git a/src/Language/LanguageContext.php b/src/Language/LanguageContext.php
index 3f5b43a..d253a15 100644
--- a/src/Language/LanguageContext.php
+++ b/src/Language/LanguageContext.php
@@ -16,32 +16,32 @@ class LanguageContext implements LanguageContextInterface {
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Externally overridable language negotiator.
    *
-   * @var \Drupal\static_suite\Language\OverridableLanguageNegotiatorInterface
+   * @var OverridableLanguageNegotiatorInterface
    */
   protected $languageNegotiator;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * GraphQLLanguageContext constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\static_suite\Language\OverridableLanguageNegotiatorInterface $languageNegotiator
+   * @param OverridableLanguageNegotiatorInterface $languageNegotiator
    *   Externally overridable language negotiator.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user.
    */
   public function __construct(LanguageManagerInterface $languageManager, OverridableLanguageNegotiatorInterface $languageNegotiator, AccountProxyInterface $currentUser) {
diff --git a/src/Plugin/CacheablePluginManager.php b/src/Plugin/CacheablePluginManager.php
index 2b546b4..fb0b1d5 100644
--- a/src/Plugin/CacheablePluginManager.php
+++ b/src/Plugin/CacheablePluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_suite\Plugin;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\DefaultPluginManager;
 
 /**
@@ -26,7 +27,7 @@ class CacheablePluginManager extends DefaultPluginManager {
    *   - plugin_id: (string) The plugin id
    *   - configuration: (array) the configuration for the plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getInstance(array $options) {
diff --git a/src/Security/UriSanitizerBase.php b/src/Security/UriSanitizerBase.php
index 3e410b1..432a781 100644
--- a/src/Security/UriSanitizerBase.php
+++ b/src/Security/UriSanitizerBase.php
@@ -15,7 +15,7 @@ abstract class UriSanitizerBase implements UriSanitizerInterface {
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;
 
@@ -31,7 +31,7 @@ abstract class UriSanitizerBase implements UriSanitizerInterface {
   /**
    * UriSanitizerBase constructor.
    *
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
    */
   public function __construct(TransliterationInterface $transliteration) {
diff --git a/src/Utility/UniqueIdHelper.php b/src/Utility/UniqueIdHelper.php
index 1a25810..d4d74fb 100644
--- a/src/Utility/UniqueIdHelper.php
+++ b/src/Utility/UniqueIdHelper.php
@@ -16,14 +16,14 @@ class UniqueIdHelper implements UniqueIdHelperInterface {
   /**
    * Static Export misc utilities.
    *
-   * @var \Drupal\static_suite\Utility\StaticSuiteUtilsInterface
+   * @var StaticSuiteUtilsInterface
    */
   protected $staticSuiteUtils;
 
   /**
    * UniqueIdHelper constructor.
    *
-   * @param \Drupal\static_suite\Utility\StaticSuiteUtilsInterface $static_suite_utils
+   * @param StaticSuiteUtilsInterface $static_suite_utils
    *   Static Export misc utilities.
    */
   public function __construct(StaticSuiteUtilsInterface $static_suite_utils) {
diff --git a/src/Utility/UniqueIdHelperInterface.php b/src/Utility/UniqueIdHelperInterface.php
index 9882974..039cc7c 100644
--- a/src/Utility/UniqueIdHelperInterface.php
+++ b/src/Utility/UniqueIdHelperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\static_suite\Utility;
 
+use Drupal\static_suite\StaticSuiteException;
 use DateTime;
 
 /**
@@ -53,7 +54,7 @@ interface UniqueIdHelperInterface {
    * @return \DateTime
    *   A DateTime object.
    *
-   * @throws \Drupal\static_suite\StaticSuiteException
+   * @throws StaticSuiteException
    */
   public function getDateFromUniqueId(string $uniqueId): DateTime;
 
