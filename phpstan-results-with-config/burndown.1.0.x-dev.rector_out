modules/contrib/burndown/burndown.install
modules/contrib/burndown/burndown.module
modules/contrib/burndown/burndown_project.page.inc
modules/contrib/burndown/burndown_sprint.page.inc
modules/contrib/burndown/burndown_swimlane.page.inc
modules/contrib/burndown/burndown_task.page.inc
modules/contrib/burndown/src/Commands/BurndownDrushCommands.php
modules/contrib/burndown/src/Controller/BacklogController.php
modules/contrib/burndown/src/Controller/BoardController.php
modules/contrib/burndown/src/Controller/CompletedController.php
modules/contrib/burndown/src/Controller/ProjectController.php
modules/contrib/burndown/src/Controller/SprintController.php
modules/contrib/burndown/src/Controller/SwimlaneController.php
modules/contrib/burndown/src/Controller/TaskController.php
modules/contrib/burndown/src/DefaultSwimlaneHtmlRouteProvider.php
modules/contrib/burndown/src/DefaultSwimlaneListBuilder.php
modules/contrib/burndown/src/Entity/DefaultSwimlane.php
modules/contrib/burndown/src/Entity/DefaultSwimlaneInterface.php
modules/contrib/burndown/src/Entity/Project.php
modules/contrib/burndown/src/Entity/ProjectInterface.php
modules/contrib/burndown/src/Entity/ProjectType.php
modules/contrib/burndown/src/Entity/ProjectTypeInterface.php
modules/contrib/burndown/src/Entity/ProjectViewsData.php
modules/contrib/burndown/src/Entity/Sprint.php
modules/contrib/burndown/src/Entity/SprintInterface.php
modules/contrib/burndown/src/Entity/SprintViewsData.php
modules/contrib/burndown/src/Entity/Swimlane.php
modules/contrib/burndown/src/Entity/SwimlaneInterface.php
modules/contrib/burndown/src/Entity/SwimlaneViewsData.php
modules/contrib/burndown/src/Entity/Task.php
modules/contrib/burndown/src/Entity/TaskInterface.php
modules/contrib/burndown/src/Entity/TaskType.php
modules/contrib/burndown/src/Entity/TaskTypeInterface.php
modules/contrib/burndown/src/Entity/TaskViewsData.php
modules/contrib/burndown/src/Event/TaskChangedEvent.php
modules/contrib/burndown/src/Event/TaskClosedEvent.php
modules/contrib/burndown/src/Event/TaskCommentEvent.php
modules/contrib/burndown/src/Event/TaskCreatedEvent.php
modules/contrib/burndown/src/Event/TaskWorkEvent.php
modules/contrib/burndown/src/EventSubscriber/TaskNotificationsSubscriber.php
modules/contrib/burndown/src/Form/DefaultSwimlaneDeleteForm.php
modules/contrib/burndown/src/Form/DefaultSwimlaneForm.php
modules/contrib/burndown/src/Form/ProjectDeleteForm.php
modules/contrib/burndown/src/Form/ProjectForm.php
modules/contrib/burndown/src/Form/ProjectRevisionDeleteForm.php
modules/contrib/burndown/src/Form/ProjectRevisionRevertForm.php
modules/contrib/burndown/src/Form/ProjectRevisionRevertTranslationForm.php
modules/contrib/burndown/src/Form/ProjectSettingsForm.php
modules/contrib/burndown/src/Form/ProjectTypeDeleteForm.php
modules/contrib/burndown/src/Form/ProjectTypeForm.php
modules/contrib/burndown/src/Form/SettingsForm.php
modules/contrib/burndown/src/Form/SprintCloseForm.php
modules/contrib/burndown/src/Form/SprintDeleteForm.php
modules/contrib/burndown/src/Form/SprintForm.php
modules/contrib/burndown/src/Form/SprintRevisionDeleteForm.php
modules/contrib/burndown/src/Form/SprintRevisionRevertForm.php
modules/contrib/burndown/src/Form/SprintRevisionRevertTranslationForm.php
modules/contrib/burndown/src/Form/SprintSettingsForm.php
modules/contrib/burndown/src/Form/SwimlaneDeleteForm.php
modules/contrib/burndown/src/Form/SwimlaneForm.php
modules/contrib/burndown/src/Form/SwimlaneSettingsForm.php
modules/contrib/burndown/src/Form/TaskCloseForm.php
modules/contrib/burndown/src/Form/TaskDeleteForm.php
modules/contrib/burndown/src/Form/TaskForm.php
modules/contrib/burndown/src/Form/TaskRevisionDeleteForm.php
modules/contrib/burndown/src/Form/TaskRevisionRevertForm.php
modules/contrib/burndown/src/Form/TaskRevisionRevertTranslationForm.php
modules/contrib/burndown/src/Form/TaskSettingsForm.php
modules/contrib/burndown/src/Form/TaskTypeDeleteForm.php
modules/contrib/burndown/src/Form/TaskTypeForm.php
modules/contrib/burndown/src/Plugin/Block/ProjectCloudBlock.php
modules/contrib/burndown/src/Plugin/Block/ProjectNavBlock.php
modules/contrib/burndown/src/Plugin/Field/FieldFormatter/BurndownLogDefaultFormatter.php
modules/contrib/burndown/src/Plugin/Field/FieldFormatter/BurndownTaskRelationshipDefaultFormatter.php
modules/contrib/burndown/src/Plugin/Field/FieldType/BurndownLog.php
modules/contrib/burndown/src/Plugin/Field/FieldType/BurndownTaskRelationship.php
modules/contrib/burndown/src/Plugin/Field/FieldWidget/BurndownLogDefaultWidget.php
modules/contrib/burndown/src/Plugin/Field/FieldWidget/BurndownTaskRelationshipDefaultWidget.php
modules/contrib/burndown/src/Plugin/Validation/Constraint/ShortcodeUniqueConstraint.php
modules/contrib/burndown/src/Plugin/Validation/Constraint/ShortcodeUniqueConstraintValidator.php
modules/contrib/burndown/src/ProjectAccessControlHandler.php
modules/contrib/burndown/src/ProjectHtmlRouteProvider.php
modules/contrib/burndown/src/ProjectListBuilder.php
modules/contrib/burndown/src/ProjectPermissions.php
modules/contrib/burndown/src/ProjectStorage.php
modules/contrib/burndown/src/ProjectStorageInterface.php
modules/contrib/burndown/src/ProjectTranslationHandler.php
modules/contrib/burndown/src/ProjectTypeHtmlRouteProvider.php
modules/contrib/burndown/src/ProjectTypeListBuilder.php
modules/contrib/burndown/src/Services/ChangeDiffService.php
modules/contrib/burndown/src/Services/ProjectCloudService.php
modules/contrib/burndown/src/Services/TaskIdService.php
modules/contrib/burndown/src/SprintAccessControlHandler.php
modules/contrib/burndown/src/SprintHtmlRouteProvider.php
modules/contrib/burndown/src/SprintListBuilder.php
modules/contrib/burndown/src/SprintStorage.php
modules/contrib/burndown/src/SprintStorageInterface.php
modules/contrib/burndown/src/SprintTranslationHandler.php
modules/contrib/burndown/src/SwimlaneAccessControlHandler.php
modules/contrib/burndown/src/SwimlaneHtmlRouteProvider.php
modules/contrib/burndown/src/SwimlaneListBuilder.php
modules/contrib/burndown/src/SwimlaneTranslationHandler.php
modules/contrib/burndown/src/TaskAccessControlHandler.php
modules/contrib/burndown/src/TaskHtmlRouteProvider.php
modules/contrib/burndown/src/TaskListBuilder.php
modules/contrib/burndown/src/TaskPermissions.php
modules/contrib/burndown/src/TaskStorage.php
modules/contrib/burndown/src/TaskStorageInterface.php
modules/contrib/burndown/src/TaskTranslationHandler.php
modules/contrib/burndown/src/TaskTypeHtmlRouteProvider.php
modules/contrib/burndown/src/TaskTypeListBuilder.php
modules/contrib/burndown/tests/src/Functional/LoadTest.php

58 files with changes
=====================

1) modules/contrib/burndown/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\burndown\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/burndown/src/TaskStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Task revision IDs for a specific Task.
    *
-   * @param \Drupal\burndown\Entity\TaskInterface $entity
+   * @param TaskInterface $entity
    *   The Task entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Task author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\burndown\Entity\TaskInterface $entity
+   * @param TaskInterface $entity
    *   The Task entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Task with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/burndown/src/TaskPermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\burndown\Entity\Task $type
+   * @param Task $type
    *   The Task type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/burndown/src/TaskListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\Task;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Task $entity */
+    /** @var Task $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/burndown/src/TaskHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/burndown/src/TaskAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\TaskInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\TaskInterface $entity */
-
+    /** @var TaskInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which ownership is being checked.
    * @param string $operation
    *   The operation which user is attempting to carry out.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which ownership and permissions are being checked.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/burndown/src/SwimlaneListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\Swimlane;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Swimlane $entity */
+    /** @var Swimlane $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/burndown/src/SwimlaneHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/burndown/src/SwimlaneAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\SwimlaneInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\SwimlaneInterface $entity */
-
+    /** @var SwimlaneInterface $entity */
     switch ($operation) {

       case 'view':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/burndown/src/SprintStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Sprint revision IDs for a specific Sprint.
    *
-   * @param \Drupal\burndown\Entity\SprintInterface $entity
+   * @param SprintInterface $entity
    *   The Sprint entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Sprint author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\burndown\Entity\SprintInterface $entity
+   * @param SprintInterface $entity
    *   The Sprint entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Sprint with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/burndown/src/SprintListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\Sprint;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Sprint $entity */
+    /** @var Sprint $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/burndown/src/SprintHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/burndown/src/SprintAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\SprintInterface $entity */
-
+    /** @var SprintInterface $entity */
     switch ($operation) {

       case 'view':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/burndown/src/Services/TaskIdService.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * A database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/burndown/src/ProjectStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Project revision IDs for a specific Project.
    *
-   * @param \Drupal\burndown\Entity\ProjectInterface $entity
+   * @param ProjectInterface $entity
    *   The Project entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Project author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\burndown\Entity\ProjectInterface $entity
+   * @param ProjectInterface $entity
    *   The Project entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Project with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/burndown/src/ProjectPermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\burndown\Entity\Project $type
+   * @param Project $type
    *   The Project type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/burndown/src/ProjectListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\Project;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Project $entity */
+    /** @var Project $entity */
     $row['id'] = $entity->getShortcode() . ' - ' . $entity->label();
     $row['backlog'] = Link::createFromRoute(
       $this->t('Backlog'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/burndown/src/ProjectHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/burndown/src/ProjectAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown;

+use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\ProjectInterface $entity */
-
+    /** @var ProjectInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which ownership is being checked.
    * @param string $operation
    *   The operation which user is attempting to carry out.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which ownership and permissions are being checked.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/burndown/src/Plugin/Block/ProjectNavBlock.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $pathService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/burndown/src/Plugin/Block/ProjectCloudBlock.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * A service for generating a project word cloud.
    *
-   * @var \Drupal\burndown\Services\ProjectCloudService
+   * @var ProjectCloudService
    */
   protected $projectCloudService;

@@ @@
   /**
    * A service for getting the current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $pathService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/burndown/src/Form/TaskSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/burndown/src/Form/TaskRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\burndown\Entity\TaskInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(TaskInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\burndown\Entity\TaskInterface $default_revision */
+    /** @var TaskInterface $default_revision */
     $latest_revision = $this->TaskStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/burndown/src/Form/TaskRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\burndown\Entity\TaskInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Task revision.
    *
-   * @var \Drupal\burndown\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $revision;

@@ @@
   /**
    * The Task storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $taskStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\burndown\Entity\TaskInterface $revision
+   * @param TaskInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\burndown\Entity\TaskInterface
+   * @return TaskInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(TaskInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/burndown/src/Form/TaskRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\burndown\Entity\TaskInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Task revision.
    *
-   * @var \Drupal\burndown\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $revision;

@@ @@
   /**
    * The Task storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $taskStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/burndown/src/Form/TaskForm.php:44

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Task $entity */
-    $form = parent::buildForm($form, $form_state);
+    /** @var Task $entity */
+				$form = parent::buildForm($form, $form_state);
 	
 	// Disable form cache so that the image upload can work.
 	$form_state->disableCache();
@@ @@
       }

       $link = $link->toRenderable();
-      $link = render($link);
+      $link = \Drupal::service('renderer')->render($link);
       $link = (String) $link;

       $form['watchlist_link'] = [
@@ @@
         );

       $link = $link->toRenderable();
-      $link = render($link);
+      $link = \Drupal::service('renderer')->render($link);
       $link = (String) $link;

       $form['reopen_task'] = [
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/burndown/src/Form/TaskCloseForm.php:54

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int|null $ticket_id
    *   The id of the ticket from which to load the Task.
@@ @@
   /**
    * Close the modal form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An Ajax Response object.
    */
   public function closeModalForm() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/burndown/src/Form/SwimlaneSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/burndown/src/Form/SwimlaneForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\burndown\Entity\Swimlane;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Swimlane $entity */
+    /** @var Swimlane $entity */
     $form = parent::buildForm($form, $form_state);

     // Hide miscellaneous items.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/burndown/src/Form/SprintSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/burndown/src/Form/SprintRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(SprintInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\burndown\Entity\SprintInterface $default_revision */
+    /** @var SprintInterface $default_revision */
     $latest_revision = $this->SprintStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/burndown/src/Form/SprintRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Sprint revision.
    *
-   * @var \Drupal\burndown\Entity\SprintInterface
+   * @var SprintInterface
    */
   protected $revision;

@@ @@
   /**
    * The Sprint storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sprintStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\burndown\Entity\SprintInterface $revision
+   * @param SprintInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\burndown\Entity\SprintInterface
+   * @return SprintInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(SprintInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/burndown/src/Form/SprintRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\burndown\Entity\SprintInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Sprint revision.
    *
-   * @var \Drupal\burndown\Entity\SprintInterface
+   * @var SprintInterface
    */
   protected $revision;

@@ @@
   /**
    * The Sprint storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sprintStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/burndown/src/Form/SprintForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\burndown\Entity\Sprint;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Sprint $entity */
+    /** @var Sprint $entity */
     $form = parent::buildForm($form, $form_state);

     if (!$this->entity->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/burndown/src/Form/SprintCloseForm.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int $sprint_id
    *   The entity ID of the Sprint to be loaded.
@@ @@
   /**
    * Ajax callback to close the modal dialog.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An Ajax Response object.
    */
   public function closeModalForm() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/burndown/src/Form/ProjectSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/burndown/src/Form/ProjectRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(ProjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\burndown\Entity\ProjectInterface $default_revision */
+    /** @var ProjectInterface $default_revision */
     $latest_revision = $this->ProjectStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/burndown/src/Form/ProjectRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Project revision.
    *
-   * @var \Drupal\burndown\Entity\ProjectInterface
+   * @var ProjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The Project storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $projectStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\burndown\Entity\ProjectInterface $revision
+   * @param ProjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\burndown\Entity\ProjectInterface
+   * @return ProjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ProjectInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/burndown/src/Form/ProjectRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\burndown\Entity\ProjectInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Project revision.
    *
-   * @var \Drupal\burndown\Entity\ProjectInterface
+   * @var ProjectInterface
    */
   protected $revision;

@@ @@
   /**
    * The Project storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $projectStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/burndown/src/Form/ProjectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\burndown\Entity\Project;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Project $entity */
+    /** @var Project $entity */
     $form = parent::buildForm($form, $form_state);

     if (!$this->entity->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/burndown/src/EventSubscriber/TaskNotificationsSubscriber.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * React to a task being created.
    *
-   * @param Drupal\burndown\Event\TaskCreatedEvent $event
+   * @param TaskCreatedEvent $event
    *   Task added event.
    */
   public function taskAdded(TaskCreatedEvent $event) {
@@ @@
   /**
    * React to a task being edited.
    *
-   * @param Drupal\burndown\Event\TaskChangedEvent $event
+   * @param TaskChangedEvent $event
    *   Task changed event.
    */
   public function taskChanged(TaskChangedEvent $event) {
@@ @@
   /**
    * React to a task comment.
    *
-   * @param Drupal\burndown\Event\TaskCommentEvent $event
+   * @param TaskCommentEvent $event
    *   Task comment event.
    */
   public function taskCommented(TaskCommentEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/burndown/src/Event/TaskWorkEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The newly created task.
    * @param string $comment
    *   The comment.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/burndown/src/Event/TaskCreatedEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The newly created task.
    */
   public function __construct(EntityInterface $task) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/burndown/src/Event/TaskCommentEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The newly created task.
    * @param string $comment
    *   The text of the comment.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/burndown/src/Event/TaskClosedEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The task that was closed.
    */
   public function __construct(EntityInterface $task) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/burndown/src/Event/TaskChangedEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The modified task.
    */
   public function __construct(EntityInterface $task) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/burndown/src/Entity/TaskInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
   /**
    * Gets the Task revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


48) modules/contrib/burndown/src/Entity/Task.php:902

    ---------- begin diff ----------
@@ @@
     $user = User::load($user_id);
     if ($user->hasField('user_picture') &&
       !$user->user_picture->isEmpty()) {
-      return file_create_url($user->user_picture->entity->getFileUri());
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($user->user_picture->entity->getFileUri());
     }

     return FALSE;
@@ @@
     $user = User::load($user_id);
     if ($user->hasField('user_picture') &&
       !$user->user_picture->isEmpty()) {
-      return file_create_url($user->user_picture->entity->getFileUri());
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($user->user_picture->entity->getFileUri());
     }

     return FALSE;
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/burndown/src/Entity/SprintInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
   /**
    * Gets the Sprint revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


50) modules/contrib/burndown/src/Entity/ProjectInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
   /**
    * Gets the Project revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


51) modules/contrib/burndown/src/Controller/TaskController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\burndown\Entity\Swimlane;
 use Drupal\burndown\Entity\Task;
 use Drupal\burndown\Entity\TaskInterface;
@@ @@
   protected $account;

   /**
-   * The date formatter.
-   *
-   * @var \Drupal\Core\Datetime\DateFormatter
-   */
-  protected $dateFormatter;
+		 * The date formatter.
+		 *
+		 * @var DateFormatter
+		 */
+		protected $dateFormatter;

   /**
-   * The Messenger service.
-   *
-   * @var \Drupal\Core\Messenger\MessengerInterface
-   */
-  protected $messenger;
+		 * The Messenger service.
+		 *
+		 * @var MessengerInterface
+		 */
+		protected $messenger;

   /**
-   * The renderer.
-   *
-   * @var \Drupal\Core\Render\Renderer
-   */
-  protected $renderer;
+		 * The renderer.
+		 *
+		 * @var Renderer
+		 */
+		protected $renderer;

   /**
-   * Event dispatcher.
-   *
-   * @var Symfony\Component\EventDispatcher\EventDispatcher
-   */
-  protected $eventDispatcher;
+		 * Event dispatcher.
+		 *
+		 * @var EventDispatcher
+		 */
+		protected $eventDispatcher;

   /**
    * {@inheritdoc}
@@ @@
       '#data' => $data,
     ];

-    return new Response(render($build));
+    return new Response(\Drupal::service('renderer')->render($build));
   }

   /**
-   * Add a comment to a Task.
-   *
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   *   The Request object from which to determine the Task to comment.
-   */
-  public function addComment(Request $request) {
+		 * Add a comment to a Task.
+		 *
+		 * @param Request $request
+		 *   The Request object from which to determine the Task to comment.
+		 */
+		public function addComment(Request $request) {
     // Get data from request (validated below).
     $ticket_id = $request->request->get('ticket_id');
     $comment = $request->request->get('comment');
@@ @@
   }

   /**
-   * Add a work log to the Task.
-   *
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   *   The Request object from which to determine the Task to add work to.
-   */
-  public static function addWork(Request $request) {
+		 * Add a work log to the Task.
+		 *
+		 * @param Request $request
+		 *   The Request object from which to determine the Task to add work to.
+		 */
+		public static function addWork(Request $request) {
     // Get data from request (validated below).
     $ticket_id = $request->request->get('ticket_id');
     $comment = $request->request->get('comment');
@@ @@
       '#data' => $data,
     ];

-    return new Response(render($build));
+    return new Response(\Drupal::service('renderer')->render($build));

   }

@@ @@
   }

   /**
-   * Generates an overview table of older revisions of a Task.
-   *
-   * @param \Drupal\burndown\Entity\TaskInterface $burndown_task
-   *   A Task object.
-   *
-   * @return array
-   *   An array as expected by drupal_render().
-   */
-  public function revisionOverview(TaskInterface $burndown_task) {
+		 * Generates an overview table of older revisions of a Task.
+		 *
+		 * @param TaskInterface $burndown_task
+		 *   A Task object.
+		 *
+		 * @return array
+		 *   An array as expected by drupal_render().
+		 */
+		public function revisionOverview(TaskInterface $burndown_task) {
     $account = $this->currentUser();
     $burndown_task_storage = $this->entityTypeManager()->getStorage('burndown_task');
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/burndown/src/Controller/SwimlaneController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a BoardController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/burndown/src/Controller/SprintController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
 class SprintController extends ControllerBase implements ContainerInjectionInterface {

   /**
-   * The date formatter.
-   *
-   * @var \Drupal\Core\Datetime\DateFormatter
-   */
-  protected $dateFormatter;
+		 * The date formatter.
+		 *
+		 * @var DateFormatter
+		 */
+		protected $dateFormatter;

   /**
-   * The renderer.
-   *
-   * @var \Drupal\Core\Render\Renderer
-   */
-  protected $renderer;
+		 * The renderer.
+		 *
+		 * @var Renderer
+		 */
+		protected $renderer;

   /**
    * {@inheritdoc}
@@ @@
   }

   /**
-   * Generates an overview table of older revisions of a Sprint.
-   *
-   * @param \Drupal\burndown\Entity\SprintInterface $burndown_sprint
-   *   A Sprint object.
-   *
-   * @return array
-   *   An array as expected by drupal_render().
-   */
-  public function revisionOverview(SprintInterface $burndown_sprint) {
+		 * Generates an overview table of older revisions of a Sprint.
+		 *
+		 * @param SprintInterface $burndown_sprint
+		 *   A Sprint object.
+		 *
+		 * @return array
+		 *   An array as expected by drupal_render().
+		 */
+		public function revisionOverview(SprintInterface $burndown_sprint) {
     $account = $this->currentUser();
     $burndown_sprint_storage = $this->entityTypeManager()->getStorage('burndown_sprint');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/burndown/src/Controller/ProjectController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\burndown\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
 class ProjectController extends ControllerBase implements ContainerInjectionInterface {

   /**
-   * The date formatter.
-   *
-   * @var \Drupal\Core\Datetime\DateFormatter
-   */
-  protected $dateFormatter;
+		 * The date formatter.
+		 *
+		 * @var DateFormatter
+		 */
+		protected $dateFormatter;

   /**
-   * The renderer.
-   *
-   * @var \Drupal\Core\Render\Renderer
-   */
-  protected $renderer;
+		 * The renderer.
+		 *
+		 * @var Renderer
+		 */
+		protected $renderer;

   /**
    * {@inheritdoc}
@@ @@
   }

   /**
-   * Generates an overview table of older revisions of a Project.
-   *
-   * @param \Drupal\burndown\Entity\ProjectInterface $burndown_project
-   *   A Project object.
-   *
-   * @return array
-   *   An array as expected by drupal_render().
-   */
-  public function revisionOverview(ProjectInterface $burndown_project) {
+		 * Generates an overview table of older revisions of a Project.
+		 *
+		 * @param ProjectInterface $burndown_project
+		 *   A Project object.
+		 *
+		 * @return array
+		 *   An array as expected by drupal_render().
+		 */
+		public function revisionOverview(ProjectInterface $burndown_project) {
     $account = $this->currentUser();
     $burndown_project_storage = $this->entityTypeManager()->getStorage('burndown_project');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/burndown/src/Controller/CompletedController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a BoardController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/burndown/src/Controller/BoardController.php:17

    ---------- begin diff ----------
@@ @@
  */
 class BoardController extends ControllerBase {
   /**
-   * The entity type manager.
-   *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
-   */
-  protected $entityTypeManager;
+		 * The entity type manager.
+		 *
+		 * @var EntityTypeManagerInterface
+		 */
+		protected $entityTypeManager;

   /**
-   * Constructs a BoardController object.
-   *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   *   The entityTypeManager.
-   */
-  public function __construct(EntityTypeManagerInterface $entityTypeManager) {
+		 * Constructs a BoardController object.
+		 *
+		 * @param EntityTypeManagerInterface $entityTypeManager
+		 *   The entityTypeManager.
+		 */
+		public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->entityTypeManager = $entityTypeManager;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/burndown/src/Controller/BacklogController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a BoardController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/burndown/burndown.module:426

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form that will be altered.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   FormState Object.
  */
 function _burndown_task_ajax_submit(array $form, FormStateInterface &$form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 58 files have been changed by Rector                                      

