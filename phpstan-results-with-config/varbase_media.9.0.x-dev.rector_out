modules/contrib/varbase_media/modules/entity_browser_generic_embed/entity_browser_generic_embed.module
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Exception/IndeterminateBundleException.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/FileInputExtensionMatchTrait.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Form/BulkCreationEntityFormTrait.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Form/EntityEmbedDialog.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Form/MediaForm.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/InputMatchInterface.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/MediaHelper.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/OverrideHelper.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Plugin/EntityBrowser/Widget/EmbedCode.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Routing/RouteSubscriber.php
modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/ValidationConstraintMatchTrait.php
modules/contrib/varbase_media/modules/varbase_media_instagram/src/Plugin/media/Source/VarbaseMediaInstagram.php
modules/contrib/varbase_media/modules/varbase_media_instagram/varbase_media_instagram.module
modules/contrib/varbase_media/modules/varbase_media_twitter/src/Plugin/media/Source/VarbaseMediaTwitter.php
modules/contrib/varbase_media/modules/varbase_media_twitter/varbase_media_twitter.module
modules/contrib/varbase_media/src/Form/VarbaseMediaSettingsForm.php
modules/contrib/varbase_media/src/Plugin/Field/FieldFormatter/VarbaseOEmbedFormatter.php
modules/contrib/varbase_media/src/Plugin/Validation/Constraint/MediaItemsCountConstraint.php
modules/contrib/varbase_media/src/Plugin/Validation/Constraint/MediaItemsCountConstraintValidator.php
modules/contrib/varbase_media/src/Plugin/media/Source/VarbaseMediaAudioFile.php
modules/contrib/varbase_media/src/Plugin/media/Source/VarbaseMediaFile.php
modules/contrib/varbase_media/src/Plugin/media/Source/VarbaseMediaGallery.php
modules/contrib/varbase_media/src/Plugin/media/Source/VarbaseMediaImage.php
modules/contrib/varbase_media/src/Plugin/media/Source/VarbaseMediaRemoteVideo.php
modules/contrib/varbase_media/src/Plugin/media/Source/VarbaseMediaVideoFile.php
modules/contrib/varbase_media/src/Routing/VarbaseMediaBulkUploadRouteSubscriber.php
modules/contrib/varbase_media/tests/src/FunctionalJavascript/VarbaseMediaTests.php
modules/contrib/varbase_media/varbase_media.install
modules/contrib/varbase_media/varbase_media.module

14 files with changes
=====================

1) modules/contrib/varbase_media/varbase_media.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\MediaInterface;
 /**
  * @file
  * Contains varbase_media.module.
@@ @@

   $replacements = [];
   if ($type === 'media' && !empty($data['media'])) {
-    /** @var \Drupal\media\MediaInterface $media_entity */
+    /** @var MediaInterface $media_entity */
     $media_entity = \Drupal::service('entity.repository')->getTranslationFromContext($data['media'], $langcode, ['operation' => 'media_entity_tokens']);

     foreach ($tokens as $token_name => $original) {
@@ @@
             ->getString());
       }
       else {
-        return file_create_url($file_entity->get('uri')->getString());
+        return \Drupal::service('file_url_generator')->generateAbsoluteString($file_entity->get('uri')->getString());
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


2) modules/contrib/varbase_media/tests/src/FunctionalJavascript/VarbaseMediaTests.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Insall the Claro admin theme.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/varbase_media/src/Form/VarbaseMediaSettingsForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new Varbase Media settings form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/ValidationConstraintMatchTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_generic_embed;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\Core\TypedData\Plugin\DataType\StringData;
 use Drupal\media\MediaTypeInterface;

@@ @@
   /**
    * Returns the typed data manager.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   The typed data manager.
    */
   private function typedDataManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_generic_embed\Plugin\entity_embed\EntityEmbedDisplay;

+use Drupal\media\MediaInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay\ImageFieldFormatter;
@@ @@
   /**
    * Returns the image field item to use for the embedded entity.
    *
-   * @return \Drupal\image\Plugin\Field\FieldType\ImageItem
+   * @return ImageItem
    *   The image field item.
    */
   protected function getItem() {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->getEntityFromContext();

     $item = MediaHelper::getSourceField($entity)->first();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The media helper service.
    *
-   * @var \Drupal\entity_browser_generic_embed\MediaHelper
+   * @var MediaHelper
    */
   protected $helper;

@@ @@
    *   The entity type manager service.
    * @param mixed $widget_validation_manager
    *   The widget validation manager.
-   * @param \Drupal\entity_browser_generic_embed\MediaHelper $helper
+   * @param MediaHelper $helper
    *   The media helper service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, $event_dispatcher, $entity_type_manager, $widget_validation_manager, MediaHelper $helper) {
@@ @@
   /**
    * Returns the bundles that this widget may use.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return string[]
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public static function ajax(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Returns the current input value, if any.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Plugin/EntityBrowser/Widget/EmbedCode.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Get Embed Description.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The Status of the form.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/OverrideHelper.php:31

    ---------- begin diff ----------
@@ @@
    * The replacement class is only used if its immediate parent is the class
    * specified by the entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $replacement_class
    *   The class to use.
@@ @@
    * The replacement class is only used if its immediate parent is the form
    * class used for the specified operation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $replacement_class
    *   The class to use.
@@ @@
    * The replacement class is only used if its immediate parent is the handler
    * class specified by the entity type definition.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $handler_type
    *   The handler type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/MediaHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_generic_embed;

+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file\FileInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * MediaHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       ->getStorage('media_type');
     $media_types = $storage->loadMultiple($bundles ?: NULL, $check_access);

-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($media_types as $media_type) {
       $field = $media_type->getSource()->getSourceFieldDefinition($media_type);

@@ @@
   }

   /**
-   * Returns the first media bundle that can accept an input value.
-   *
-   * @param mixed $value
-   *   The input value.
-   * @param bool $check_access
-   *   (optional) Whether to filter the bundles by create access for the current
-   *   user. Defaults to TRUE.
-   * @param string[] $bundles
-   *   (optional) A set of media bundle IDs which might match the input. If
-   *   omitted, all available bundles are checked.
-   *
-   * @return \Drupal\media\MediaTypeInterface
-   *   A media bundle that can accept the input value.
-   *
-   * @throws \Drupal\entity_browser_generic_embed\Exception\IndeterminateBundleException if
-   *   No bundle can be matched to the input value.
-   */
+  * Returns the first media bundle that can accept an input value.
+  *
+  * @param mixed $value
+  *   The input value.
+  * @param bool $check_access
+  *   (optional) Whether to filter the bundles by create access for the current
+  *   user. Defaults to TRUE.
+  * @param string[] $bundles
+  *   (optional) A set of media bundle IDs which might match the input. If
+  *   omitted, all available bundles are checked.
+  *
+   * @return MediaTypeInterface
+  *   A media bundle that can accept the input value.
+  *
+   * @throws IndeterminateBundleException if
+    No bundle can be matched to the input value.
+  */
   public function getBundleFromInput($value, $check_access = TRUE, array $bundles = []) {
     // entity_browser_generic_embed Media overrides the media_bundle.
     // storage handler with a special.
@@ @@
       ->loadMultiple($bundles ?: NULL, $check_access);
     ksort($media_types);

-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($media_types as $media_type) {
       $source = $media_type->getSource();

@@ @@
    *   (optional) A set of media bundle IDs which might match the input value.
    *   If omitted, all bundles to which the user has create access are checked.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The unsaved media entity.
    */
   public function createFromInput($value, array $bundles = []) {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->entityTypeManager
       ->getStorage('media')
       ->create([
@@ @@
   /**
    * Attaches a file entity to a media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    * @param int $replace
    *   (optional) What to do if the file already exists. Can be any of the
    *   constants accepted by file_move().
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The final file entity (unsaved), or FALSE if an error occurred.
    */
   public static function useFile(MediaInterface $entity, FileInterface $file, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ @@
       return $file;
     }
     else {
-      $file = file_move($file, $destination, $replace);
+      $file = \Drupal::service('file.repository')->move($file, $destination, $replace);

       if ($file) {
         $field->setValue($file);
@@ @@
   /**
    * Prepares the destination directory for a file attached to a media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
    * @return string
@@ @@
    *   If the destination directory is not writable.
    */
   public static function prepareFileDestination(MediaInterface $entity) {
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+    /** @var FileItem $item */
     $item = static::getSourceField($entity)->first();

     $dir = $item->getUploadLocation();
@@ @@
   /**
    * Indicates if the media entity's type plugin supports dynamic previews.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
    * @return bool
@@ @@
   /**
    * Returns the media entity's source field item list.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The media entity's source field item list, or NULL if the media type
    *   plugin does not define a source field.
    */
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/InputMatchInterface.php:13

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The input value.
-   * @param \Drupal\media\MediaTypeInterface $bundle
+   * @param MediaTypeInterface $bundle
    *   The media bundle that is using this plugin.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Form/MediaForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_generic_embed\Form;

+use Drupal\media\MediaInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser_generic_embed\MediaHelper;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->getEntity();

     $field = MediaHelper::getSourceField($entity);
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/Form/BulkCreationEntityFormTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_generic_embed\Form;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     $query = $this->getRequest()->query;

     if ($query->has('bulk_create')) {
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $this->getEntity();

       // If there are more entities to create, redirect to the edit form for the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/varbase_media/modules/entity_browser_generic_embed/src/FileInputExtensionMatchTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_generic_embed;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\file\FileInterface;
 use Drupal\media\MediaTypeInterface;

@@ @@
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   private function entityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/varbase_media/modules/entity_browser_generic_embed/entity_browser_generic_embed.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\MediaTypeInterface;
+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\embed\EmbedButtonInterface;
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Core media asset support for .
@@ @@
   $extra_fields = [];

   if (\Drupal::moduleHandler()->moduleExists('media')) {
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach (MediaType::loadMultiple() as $id => $media_type) {
       $plugin_definition = $media_type->getSource()->getPluginDefinition();

@@ @@
 /**
  * Validates a file using media entity source field criteria.
  *
- * @param \Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   The file to validate.
  * @param string[] $bundles
  *   (optional) A set of media bundle IDs which might match the input. If
@@ @@
     return [];
   }

-  /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+  /** @var FileItem $item */
   $item = MediaHelper::getSourceField($entity)->first();

   $validators = [
@@ @@
 function entity_browser_generic_embed_form_entity_embed_dialog_alter(array &$form, FormStateInterface $form_state) {
   list ($editor, $embed_button) = $form_state->getBuildInfo()['args'];

-  /** @var \Drupal\embed\EmbedButtonInterface $embed_button */
+  /** @var EmbedButtonInterface $embed_button */
   if (isset($editor) && $embed_button->id() == 'media_browser') {
     $element = &$form['attributes']['data-entity-embed-settings']['view_mode'];
     if (isset($element['#options']['embedded'])) {
@@ @@
  *   Template variables.
  */
 function entity_browser_generic_embed_preprocess_views_view_grid(array &$variables) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $variables['view'];

   if ($view->display_handler->getPluginId() == 'entity_browser') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

