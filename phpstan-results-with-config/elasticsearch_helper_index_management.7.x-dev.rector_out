modules/contrib/elasticsearch_helper_index_management/elasticsearch_helper_index_management.install
modules/contrib/elasticsearch_helper_index_management/elasticsearch_helper_index_management.module
modules/contrib/elasticsearch_helper_index_management/elasticsearch_helper_index_management.views.inc
modules/contrib/elasticsearch_helper_index_management/src/EventSubscriber/IndexingStatus.php
modules/contrib/elasticsearch_helper_index_management/src/EventSubscriber/IndexingStatusFlush.php
modules/contrib/elasticsearch_helper_index_management/src/Form/IndexConfirmFormBase.php
modules/contrib/elasticsearch_helper_index_management/src/Form/IndexDropConfirmForm.php
modules/contrib/elasticsearch_helper_index_management/src/Form/IndexListForm.php
modules/contrib/elasticsearch_helper_index_management/src/Form/IndexReindexConfirmForm.php
modules/contrib/elasticsearch_helper_index_management/src/Form/IndexSetupConfirmForm.php
modules/contrib/elasticsearch_helper_index_management/src/Form/IndexViewForm.php
modules/contrib/elasticsearch_helper_index_management/src/Form/QueueClearConfirmForm.php
modules/contrib/elasticsearch_helper_index_management/src/Index.php
modules/contrib/elasticsearch_helper_index_management/src/IndexingStatusManager.php
modules/contrib/elasticsearch_helper_index_management/src/IndexingStatusManagerInterface.php
modules/contrib/elasticsearch_helper_index_management/src/IndexingStatusOperationManager.php
modules/contrib/elasticsearch_helper_index_management/src/IndexingStatusOperationManagerInterface.php
modules/contrib/elasticsearch_helper_index_management/src/ParamConverter/IndexPlugin.php
modules/contrib/elasticsearch_helper_index_management/src/Plugin/QueueWorker/Reindex.php
modules/contrib/elasticsearch_helper_index_management/src/Plugin/QueueWorker/ReindexComplete.php
modules/contrib/elasticsearch_helper_index_management/src/Plugin/QueueWorker/ReindexFailedOnly.php
modules/contrib/elasticsearch_helper_index_management/src/Plugin/QueueWorker/ReindexUnprocessedOnly.php
modules/contrib/elasticsearch_helper_index_management/src/ViewsData.php

17 files with changes
=====================

1) modules/contrib/elasticsearch_helper_index_management/src/Plugin/QueueWorker/ReindexUnprocessedOnly.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_index_management\Plugin\QueueWorker;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
 class ReindexUnprocessedOnly extends QueueWorkerBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   public $elasticsearchIndexManager;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param QueueFactory $queue_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElasticsearchIndexManager $elasticsearch_index_manager, Connection $database, EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getUnprocessedItems($entity_type_id, $bundle) {
     if ($entity_type_instance = $this->entityTypeManager->getDefinition($entity_type_id, FALSE)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/elasticsearch_helper_index_management/src/Plugin/QueueWorker/ReindexFailedOnly.php:20

    ---------- begin diff ----------
@@ @@
 class ReindexFailedOnly extends QueueWorkerBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   public $elasticsearchIndexManager;

   /**
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface
+   * @var IndexingStatusManagerInterface
    */
   protected $indexingStatusManager;

   /**
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
+   * @param QueueFactory $queue_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElasticsearchIndexManager $elasticsearch_index_manager, IndexingStatusManagerInterface $indexing_status_manager, QueueFactory $queue_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/elasticsearch_helper_index_management/src/Plugin/QueueWorker/Reindex.php:18

    ---------- begin diff ----------
@@ @@
 class Reindex extends QueueWorkerBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   public $elasticsearchIndexManager;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElasticsearchIndexManager $elasticsearch_index_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/elasticsearch_helper_index_management/src/ParamConverter/IndexPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_index_management\ParamConverter;

+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 use Drupal\Core\ParamConverter\ParamConverterInterface;
 use Drupal\Core\ParamConverter\ParamNotConvertedException;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager;
@@ @@
 class IndexPlugin implements ParamConverterInterface {

   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   protected $elasticsearchIndexManager;

@@ @@
   /**
    * IndexPlugin constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
    */
   public function __construct(ElasticsearchIndexManager $elasticsearch_index_manager) {
     $this->elasticsearchIndexManager = $elasticsearch_index_manager;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\ParamConverter\ParamNotConvertedException
+   * @throws ParamNotConvertedException
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface[]
+   * @return ElasticsearchIndexInterface[]
    */
   public function convert($value, $definition, $name, array $defaults) {
     $plugin_ids = explode(',', $defaults['plugin']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/elasticsearch_helper_index_management/src/IndexingStatusOperationManagerInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $object
    *   The index-able object.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function setSuccessIndexingStatus($object, ElasticsearchIndexInterface $index_plugin);
@@ @@
    *
    * @param mixed $object
    *   The index-able object.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function setErrorIndexingStatus($object, ElasticsearchIndexInterface $index_plugin);
@@ @@
    *
    * @param $object
    *   The index-able object.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface|null $index_plugin
+   * @param ElasticsearchIndexInterface|null $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function deleteIndexingStatus($object, ElasticsearchIndexInterface $index_plugin = NULL);
@@ @@
   /**
    * Sets indexing status for index-able entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The index-able entity.
    * @param $status
    *   Status name.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function setEntityIndexingStatus(EntityInterface $entity, $status, ElasticsearchIndexInterface $index_plugin);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/elasticsearch_helper_index_management/src/IndexingStatusOperationManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Indexing status manager instance.
    *
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface
+   * @var IndexingStatusManagerInterface
    */
   protected $indexingStatusManager;

@@ @@
   /**
    * OperationsManager constructor.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
    */
   public function __construct(IndexingStatusManagerInterface $indexing_status_manager) {
     $this->indexingStatusManager = $indexing_status_manager;
@@ @@
   /**
    * Deletes indexing status for given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface|null $index_plugin
+   * @param EntityInterface $entity
+   * @param ElasticsearchIndexInterface|null $index_plugin
    */
   protected function deleteEntityIndexingStatus(EntityInterface $entity, ElasticsearchIndexInterface $index_plugin = NULL) {
     $conditions = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/elasticsearch_helper_index_management/src/IndexingStatusManager.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Database instance.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Time instance.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * IndexingStatusManager constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param Connection $database
+   * @param TimeInterface $time
    */
   public function __construct(Connection $database, TimeInterface $time) {
     $this->database = $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/elasticsearch_helper_index_management/src/Index.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_index_management;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Url;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;

@@ @@
 class Index {

   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @var ElasticsearchIndexInterface
    */
   protected $indexPlugin;

@@ @@
   /**
    * Index constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    */
   public function __construct(ElasticsearchIndexInterface $index_plugin) {
     $this->indexPlugin = $index_plugin;
@@ @@
    *
    * @return static
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function createFromPluginId($plugin_id) {
-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager */
+    /** @var ElasticsearchIndexManager $elasticsearch_index_manager */
     $elasticsearch_index_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');

-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin */
+    /** @var ElasticsearchIndexInterface $plugin */
     $plugin = $elasticsearch_index_manager->createInstance($plugin_id);

     return new static($plugin);
@@ @@
   /**
    * Returns plugin instance.
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @return ElasticsearchIndexInterface
    */
   public function getPluginInstance() {
     return $this->indexPlugin;
@@ @@
   /**
    * Returns index plugin label.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function getLabel() {
     return $this->indexPlugin->getPluginDefinition()['label'];
@@ @@
    * @param array $route_parameters
    * @param array $options
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function toUrl($rel = 'view', $route_parameters = [], array $options = []) {
     // Prepare route parameters.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/elasticsearch_helper_index_management/src/Form/QueueClearConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_index_management\Form;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Queue\QueueFactory;
@@ @@
 class QueueClearConfirmForm extends ConfirmFormBase {

   /**
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $indexingQueue;

@@ @@
   /**
    * ReindexConfirmForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   Query factory service.
    */
   public function __construct(QueueFactory $queue_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/elasticsearch_helper_index_management/src/Form/IndexViewForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_index_management\Form;

+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\elasticsearch_helper_index_management\Index;
@@ @@
   /**
    * Returns title for the view page.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface[] $plugin
+   * @param ElasticsearchIndexInterface[] $plugin
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function viewTitle($plugin = []) {
     // View only the first plugin.
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     // View only the first plugin.
-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface[] $plugin */
+    /** @var ElasticsearchIndexInterface[] $plugin */
     $plugin = $form_state->getBuildInfo()['args'][0];
     $plugin = reset($plugin);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/elasticsearch_helper_index_management/src/Form/IndexReindexConfirmForm.php:12

    ---------- begin diff ----------
@@ @@
 class IndexReindexConfirmForm extends IndexConfirmFormBase {

   /**
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * ReindexConfirmForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    */
   public function __construct(QueueFactory $queue_factory) {
     $this->queueFactory = $queue_factory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/elasticsearch_helper_index_management/src/Form/IndexListForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_index_management\Form;

+use Drupal\elasticsearch_helper_index_management\IndexingStatusManager;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class IndexListForm extends FormBase {

   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   protected $elasticsearchIndexManager;

   /**
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManager
+   * @var IndexingStatusManager
    */
   protected $indexingStatusManager;

@@ @@
   /**
    * IndexController constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
    *   The index manager service.
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
    *   The indexing status manager service.
    */
   public function __construct(ElasticsearchIndexManager $elasticsearch_index_manager, IndexingStatusManagerInterface $indexing_status_manager) {
@@ @@
   /**
    * Returns successful items count.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\Index $index
+   * @param Index $index
    *
    * @return int
    */
@@ @@
   /**
    * Returns failed items count.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\Index $index
+   * @param Index $index
    *
    * @return int
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/elasticsearch_helper_index_management/src/Form/IndexConfirmFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elasticsearch_helper_index_management\Form;

+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
 abstract class IndexConfirmFormBase extends ConfirmFormBase {

   /**
-   * @var \Drupal\elasticsearch_helper_index_management\Index[]
+   * @var Index[]
    */
   protected $indices = [];

@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $route_match = $this->getRouteMatch();

-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin */
+    /** @var ElasticsearchIndexInterface $index_plugin */
     foreach ($route_match->getParameter('plugin') as $index_plugin) {
       $this->indices[] = new Index($index_plugin);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/elasticsearch_helper_index_management/src/EventSubscriber/IndexingStatusFlush.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Indexing status manager instance.
    *
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface
+   * @var IndexingStatusManagerInterface
    */
   protected $indexingStatusManager;

@@ @@
   /**
    * IndexingStatusFlush constructor.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
    */
   public function __construct(IndexingStatusManagerInterface $indexing_status_manager) {
     $this->indexingStatusManager = $indexing_status_manager;
@@ @@
   /**
    * Listens to Elasticsearch drop operation request result event.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationRequestResultEvent $event
+   * @param ElasticsearchOperationRequestResultEvent $event
    */
   public function onRequestResult(ElasticsearchOperationRequestResultEvent $event) {
     $result = $event->getResult()->getResultBody();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/elasticsearch_helper_index_management/src/EventSubscriber/IndexingStatus.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Indexing status operations manager instance.
    *
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface
+   * @var IndexingStatusOperationManagerInterface
    */
   protected $indexingStatusOperationManager;

@@ @@
   /**
    * IndexingStatus constructor.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface $operationsManager
+   * @param IndexingStatusOperationManagerInterface $operationsManager
    */
   public function __construct(IndexingStatusOperationManagerInterface $operationsManager) {
     $this->indexingStatusOperationManager = $operationsManager;
@@ @@
    * Sets the indexing status to "error". This allows selective reindexing
    * based on failed indexing status.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationErrorEvent $event
+   * @param ElasticsearchOperationErrorEvent $event
    *   The dispatched operation error event.
    */
   public function onOperationError(ElasticsearchOperationErrorEvent $event) {
@@ @@
   /**
    * Listens to Elasticsearch operation request result event.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationRequestResultEvent $event
+   * @param ElasticsearchOperationRequestResultEvent $event
    */
   public function onRequestResult(ElasticsearchOperationRequestResultEvent $event) {
     $result = $event->getResult();
@@ @@
   /**
    * Returns TRUE if document index result is successful.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface $result
+   * @param ElasticsearchRequestResultInterface $result
    *
    * @return bool
    */
@@ @@
   /**
    * Returns TRUE if document delete result is successful.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface $result
+   * @param ElasticsearchRequestResultInterface $result
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/elasticsearch_helper_index_management/elasticsearch_helper_index_management.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\elasticsearch_helper_index_management\ViewsData;
 /**
  * @file
  * Provide views data for index management tables.
  */
-
 /**
  * Implements hook_views_data().
  */
@@ @@
 function elasticsearch_helper_index_management_views_data() {
   $class = '\Drupal\elasticsearch_helper_index_management\ViewsData';

-  /** @var \Drupal\elasticsearch_helper_index_management\ViewsData $instance */
+  /** @var ViewsData $instance */
   $instance = \Drupal::service('class_resolver')->getInstanceFromDefinition($class);

   return $instance->getViewsData();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


17) modules/contrib/elasticsearch_helper_index_management/elasticsearch_helper_index_management.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface;
 /**
  * @file
  *
@@ @@
  * Implements hook_entity_delete().
  */
 function elasticsearch_helper_index_management_entity_delete(EntityInterface $entity) {
-  /** @var \Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface $status_manager */
+  /** @var IndexingStatusOperationManagerInterface $status_manager */
   $status_manager = \Drupal::service('elasticsearch_helper_index_management.index_status_operation_manager');

   // Remove all reference to an entity in indexing status table.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 17 files have been changed by Rector                                      

