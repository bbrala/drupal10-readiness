modules/contrib/alexa/alexa.module
modules/contrib/alexa/alexa_chatbot_api/alexa_chatbot_api.module
modules/contrib/alexa/alexa_chatbot_api/src/EventSubscriber/RequestSubscriber.php
modules/contrib/alexa/alexa_chatbot_api/src/IntentRequestAlexaProxy.php
modules/contrib/alexa/alexa_chatbot_api/src/IntentResponseAlexaProxy.php
modules/contrib/alexa/alexa_chatbot_api/tests/src/Kernel/ChatbotApiHelloWorldTest.php
modules/contrib/alexa/alexa_chatbot_api/tests/src/Unit/IntentAttributeSetGetTest.php
modules/contrib/alexa/alexa_demo/src/EventSubscriber/RequestSubscriber.php
modules/contrib/alexa/src/AlexaEvent.php
modules/contrib/alexa/src/Controller/AlexaEndpointController.php
modules/contrib/alexa/src/Form/ModuleConfigurationForm.php
modules/contrib/alexa/tests/src/Kernel/AlexaEndpointControllerTest.php

6 files with changes
====================

1) modules/contrib/alexa/tests/src/Kernel/AlexaEndpointControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\alexa\Kernel;

+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\RoleInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * Symfony 'http_kernel' service.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['user']);
@@ @@
         'name' => '',
       ]);
     $anonymous->save();
-    /** @var \Drupal\user\RoleInterface $anonymous_role */
+    /** @var RoleInterface $anonymous_role */
     $anonymous_role = $this->container->get('entity_type.manager')
       ->getStorage('user_role')
       ->load(RoleInterface::ANONYMOUS_ID);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/alexa/src/Form/ModuleConfigurationForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * State Manager.
    *
-   * @var \Drupal\Core\State\StateInterface $stateManager
+   * @var StateInterface $stateManager
    */
   protected $stateManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/alexa/src/Controller/AlexaEndpointController.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The Symfony event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * AlexaEndpointController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The Symfony event dispatcher to use.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ @@
    * @param \Symfony\Component\HttpFoundation\Request $request
    *   The HTTP Alexa request that was received.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The Alexa response in JSON format.
    */
   public function callback(Request $request) {
@@ @@
         $response = new AlexaResponse();

         $event = new AlexaEvent($alexaRequest, $response);
-        $this->eventDispatcher->dispatch('alexaevent.request', $event);
+        $this->eventDispatcher->dispatch($event, 'alexaevent.request');

         return new JsonResponse($response->render());
       }
@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheService;

@@ @@
    *   The Alexa certificate URL.
    * @param string $signature
    *   The Alexa request signature.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheService
+   * @param CacheBackendInterface $cacheService
    *   The cache service to use.
    */
   public function __construct($certificateUrl, $signature, CacheBackendInterface $cacheService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/alexa/src/AlexaEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\alexa;

+use Symfony\Contracts\EventDispatcher\Event;
 use Alexa\Request\Request as AlexaRequest;
 use Alexa\Response\Response as AlexaResponse;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Implements a new Symfony event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/alexa/alexa_demo/src/EventSubscriber/RequestSubscriber.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Called upon a request event.
    *
-   * @param \Drupal\alexa\AlexaEvent $event
+   * @param AlexaEvent $event
    *   The event object.
    */
   public function onRequest(AlexaEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/alexa/alexa_chatbot_api/tests/src/Kernel/ChatbotApiHelloWorldTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['user']);
@@ @@
         'name' => '',
       ]);
     $anonymous->save();
-    /** @var \Drupal\user\RoleInterface $anonymous_role */
+    /** @var RoleInterface $anonymous_role */
     $anonymous_role = $this->container->get('entity_type.manager')
       ->getStorage('user_role')
       ->load(RoleInterface::ANONYMOUS_ID);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/alexa/alexa_chatbot_api/tests/src/Unit/IntentAttributeSe
         tGetTest.php" file, due to:                                            
         "Analyze error: "Class Drupal\chatbot_api\IntentRequestInterface not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/alexa/alexa_chatbot_api/src/IntentResponseAlexaProxy.php
         " file, due to:                                                        
         "Analyze error: "Class Drupal\chatbot_api\IntentResponseInterface not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/alexa/alexa_chatbot_api/src/IntentRequestAlexaProxy.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\chatbot_api\IntentRequestInterface not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/alexa/alexa_chatbot_api/src/EventSubscriber/RequestSubsc
         riber.php" file, due to:                                               
         "Analyze error: "Class Drupal\chatbot_api\IntentRequestInterface not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

