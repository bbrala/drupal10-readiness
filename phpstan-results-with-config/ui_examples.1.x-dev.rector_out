modules/contrib/ui_examples/src/Controller/ExamplesLibraryController.php
modules/contrib/ui_examples/src/ExamplePluginManager.php
modules/contrib/ui_examples/src/ExamplePluginManagerInterface.php
modules/contrib/ui_examples/tests/src/Kernel/PluginTest.php
modules/contrib/ui_examples/ui_examples.install
modules/contrib/ui_examples/ui_examples.module

3 files with changes
====================

1) modules/contrib/ui_examples/tests/src/Kernel/PluginTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ui_examples\Kernel;

+use Drupal\ui_examples\ExamplePluginManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
    * Tests that examples can be provided by YAML files.
    */
   public function testDetectedExamples(): void {
-    /** @var \Drupal\ui_examples\ExamplePluginManagerInterface $examples_manager */
+    /** @var ExamplePluginManagerInterface $examples_manager */
     $examples_manager = $this->container->get('plugin.manager.ui_examples');
     /** @var array $definitions */
     $definitions = $examples_manager->getDefinitions();
@@ @@

     // Test when the module overriding the definition is executed before.
     \module_set_weight('ui_examples_test_disabled', -1);
-    /** @var \Drupal\ui_examples\ExamplePluginManagerInterface $examples_manager */
+    /** @var ExamplePluginManagerInterface $examples_manager */
     $examples_manager = $this->container->get('plugin.manager.ui_examples');
     $this->assertArrayHasKey('test', $examples_manager->getDefinitions());

@@ @@
     // Test when the module overriding the definition is executed after.
     \module_set_weight('ui_examples_test_disabled', 1);
     \drupal_flush_all_caches();
-    /** @var \Drupal\ui_examples\ExamplePluginManagerInterface $examples_manager */
+    /** @var ExamplePluginManagerInterface $examples_manager */
     $examples_manager = $this->container->get('plugin.manager.ui_examples');
     $this->assertArrayNotHasKey('test', $examples_manager->getDefinitions());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ui_examples/src/ExamplePluginManager.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ui_examples/src/Controller/ExamplesLibraryController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_examples\Controller;

+use Drupal\ui_examples\ExamplePluginManagerInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Examples manager service.
    *
-   * @var \Drupal\ui_examples\ExamplePluginManagerInterface
+   * @var ExamplePluginManagerInterface
    */
   protected $examplesManager;

@@ @@
    * @param string $name
    *   The ID of the example plugin.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   Example title.
    */
   public function title(string $name): MarkupInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

