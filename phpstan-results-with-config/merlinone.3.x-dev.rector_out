modules/contrib/merlinone/merlinone.install
modules/contrib/merlinone/merlinone.module
modules/contrib/merlinone/src/Controller/MerlinOneBulkAddController.php
modules/contrib/merlinone/src/Controller/MerlinOneFinalizeMediaController.php
modules/contrib/merlinone/src/Controller/MerlinOnePrepareMediaController.php
modules/contrib/merlinone/src/Form/MerlinOneBulkAddForm.php
modules/contrib/merlinone/src/Form/MerlinOneConfigurationForm.php
modules/contrib/merlinone/src/MerlinOneApi.php
modules/contrib/merlinone/src/MerlinOneApiInterface.php
modules/contrib/merlinone/src/Plugin/EntityBrowser/Widget/MerlinOneSearch.php
modules/contrib/merlinone/src/Plugin/media/Source/MerlinOneFile.php
modules/contrib/merlinone/src/Plugin/media/Source/MerlinOneImage.php
modules/contrib/merlinone/src/Plugin/media/Source/MerlinOneMediaSourceInterface.php
modules/contrib/merlinone/src/Traits/MerlinOneBrowserTrait.php
modules/contrib/merlinone/src/Traits/MerlinOneMediaSourceTrait.php

12 files with changes
=====================

1) modules/contrib/merlinone/src/Traits/MerlinOneMediaSourceTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone\Traits;

+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Handle Merlin metadata attribute for a given media item.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   A media item.
    * @param string $attribute_name
    *   Name of the attribute to fetch.
@@ @@
           $keyword_strings = array_filter(array_unique($keyword_strings));

           if (count($keyword_strings)) {
-            /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
+            /** @var TermStorageInterface $term_storage */
             $term_storage = $this->getEntityTypeManager()->getStorage('taxonomy_term');
             $keywords = [];

@@ @@
   /**
    * Get the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   abstract protected function getEntityTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/merlinone/src/Traits/MerlinOneBrowserTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone\Traits;

+use Drupal\merlinone\MerlinOneApiInterface;
 use Drupal\media\MediaTypeInterface;
 use Drupal\merlinone\Plugin\media\Source\MerlinOneMediaSourceInterface;

@@ @@
   /**
    * The MerlinOne API Service.
    *
-   * @var \Drupal\merlinone\MerlinOneApiInterface
+   * @var MerlinOneApiInterface
    */
   protected $merlinOneApi;

@@ @@
   /**
    * Gets the MerlinOne API service.
    *
-   * @return \Drupal\merlinone\MerlinOneApiInterface
+   * @return MerlinOneApiInterface
    *   The MerlinOne API service.
    */
   protected function getMerlinOneApi() {
@@ @@
   /**
    * Get Merlin browser settings.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    * @return array
    *   Settings for the Merlin browser.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/merlinone/src/Plugin/media/Source/MerlinOneMediaSourceInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get supported file extensions for the given media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type to check.
    * @return array
    *   An array of file extensions.
@@ @@
    * type (currently need to force JPEG for non-supported, so only image media
    * types should limit).
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type to check.
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/merlinone/src/Plugin/EntityBrowser/Widget/MerlinOneSearch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone\Plugin\EntityBrowser\Widget;

+use Drupal\media\MediaInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Returns the media type that this widget creates.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   Media type.
    */
   protected function getType() {
@@ @@
    * Validate Media Type
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $form
    */
   public function validateType($element, FormStateInterface $form_state, $form) {
@@ @@
     $type_id = $form_state->getValue($element['#parents']);

     if ($type_id) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager
         ->getStorage('media_type')
         ->load($type_id);
@@ @@
   /**
    * Indicates if the Media Type source has the Merlin ID field mapped.
    *
-   * @param \Drupal\media\MediaTypeInterface $type
+   * @param MediaTypeInterface $type
    * @return bool
    */
   protected function typeHasMerlinIdMapped(MediaTypeInterface $type) {
@@ @@
    * {@inheritdoc}
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\media\MediaInterface[] $media */
+    /** @var MediaInterface[] $media */
     $media = $form_state->get('merlinone_prepared_entities');
     $this->selectEntities($media, $form_state);
     $this->clearFormValues($element, $form_state);
@@ @@
    *
    * @param array $element
    *   Upload form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function clearFormValues(array &$element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/merlinone/src/MerlinOneApiInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone;

+use Drupal\file\FileInterface;
 /**
  * Provides the MerlinOne API.
  */
@@ @@
    * @param string $directory
    *   Destination directory.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   A managed file
    */
   public function createPlaceholderFromItem($item, $transaction, $settings, $directory);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/merlinone/src/MerlinOneApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone;

+use Drupal\file\FileInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Image\ImageFactory;
@@ @@
   /**
    * The Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * The file system interface.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

   /**
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   private $imageFactory;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   String translation manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system interface.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The steam wrapper manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TranslationInterface $string_translation, FileSystemInterface $file_system, StreamWrapperManagerInterface $stream_wrapper_manager, ImageFactory $imageFactory) {
@@ @@
     // Destination is the upload directory and the filename.
     $destination = $this->streamWrapperManager->normalizeUri($directory . '/' . $filename);

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = system_retrieve_file($itemUrl, $destination, true, FileSystemInterface::EXISTS_RENAME);

     // If source width and height are specified, or there's a crop, resize the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/merlinone/src/Form/MerlinOneConfigurationForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The MerlinOne API Service.
    *
-   * @var \Drupal\merlinone\MerlinOneApiInterface
+   * @var MerlinOneApiInterface
    */
   private $merlinOneApi;

@@ @@
   /**
    * Constructs a MerlinOneConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\merlinone\MerlinOneApiInterface $merlinOneApi
+   * @param MerlinOneApiInterface $merlinOneApi
    *   The MerlinOne API service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, MerlinOneApiInterface $merlinOneApi) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/merlinone/src/Form/MerlinOneBulkAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\media\MediaTypeInterface;
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\media\MediaTypeInterface|null $media_type
+   * @param MediaTypeInterface|null $media_type
    *   The media type configuration entity.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $form_state->setRedirect('entity.media.collection');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/merlinone/src/Controller/MerlinOnePrepareMediaController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone\Controller;

+use Drupal\media\MediaTypeInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
 class MerlinOnePrepareMediaController extends ControllerBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The MerlinOne API Service.
    *
-   * @var \Drupal\merlinone\MerlinOneApiInterface
+   * @var MerlinOneApiInterface
    */
   protected $merlinOneApi;

   /**
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   private $token;

@@ @@
   /**
    * Constructs widget plugin.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\merlinone\MerlinOneApiInterface $merlinOneApi
+   * @param MerlinOneApiInterface $merlinOneApi
    *   The MerlinOne API service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token utility.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MerlinOneApiInterface $merlinOneApi, Token $token) {
@@ @@
    * @param string $media_type
    *   The media type ID.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   Media type.
    */
   protected function getType($media_type) {
@@ @@
   /**
    * Prepare Media entities by using their large thumbnail.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $media_type
    *   The media type to create.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function prepareMedia(Request $request, $media_type) {
     $type = $this->getType($media_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/merlinone/src/Controller/MerlinOneFinalizeMediaController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone\Controller;

+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\media\MediaTypeInterface;
+use Drupal\media\MediaInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
 use Drupal\media\Entity\Media;
 use Drupal\merlinone\MerlinOneApiInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;

@@ @@
 class MerlinOneFinalizeMediaController extends ControllerBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The MerlinOne API Service.
    *
-   * @var \Drupal\merlinone\MerlinOneApiInterface
+   * @var MerlinOneApiInterface
    */
   protected $merlinOneApi;

@@ @@
   /**
    * The file system interface.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The mime type guesser service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * Constructs widget plugin.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\merlinone\MerlinOneApiInterface $merlinOneApi
+   * @param MerlinOneApiInterface $merlinOneApi
    *   The MerlinOne API service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system interface.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimeTypeGuesser
+   * @param MimeTypesInterface $mimeTypeGuesser
    *   The MIME type guesser.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, MerlinOneApiInterface $merlinOneApi, FileSystemInterface $fileSystem, MimeTypeGuesserInterface $mimeTypeGuesser) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, MerlinOneApiInterface $merlinOneApi, FileSystemInterface $fileSystem, MimeTypesInterface $mimeTypeGuesser) {
     $this->entityTypeManager = $entity_type_manager;
     $this->merlinOneApi = $merlinOneApi;
     $this->fileSystem = $fileSystem;
@@ @@
    * @param string $media_type
    *   The media type ID.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   Media type.
    */
   protected function getType($media_type) {
@@ @@
    * Finalize Media entities by replacing their source file with the full asset
    * URL.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param $media_type
    *   The media type.
@@ @@
    * @param $media_id
    *   The media entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function finalizeMedia(Request $request, $media_type, $media_id) {
     $type = $this->getType($media_type);
@@ @@
     $sourceFieldDefinition = $plugin->getSourceFieldDefinition($type);

     // Load the media item and get its managed file from the source field.
-    /** @var \Drupal\media\MediaInterface $mediaItem */
+    /** @var MediaInterface $mediaItem */
     $mediaItem = Media::load($media_id);
     $sourceField = $mediaItem->get($sourceFieldDefinition->getName());

-    /** @var \Drupal\file\FileInterface $mediaFile */
+    /** @var FileInterface $mediaFile */
     $mediaFile = $sourceField->entity;
     $mediaFileUri = $mediaFile->getFileUri();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/merlinone/src/Controller/MerlinOneBulkAddController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\merlinone\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new MediaBulkUploadController.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * Redirects to the add form if there's only one bundle available.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|array
+   * @return RedirectResponse|array
    *   If there's only one available bundle, a redirect response.
    *   Otherwise, a render array with the add links for each bundle.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function addLinksList() {
     $build = [
@@ @@
   /**
    * Access callback to validate if the user has access to the upload form list.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User to validate access on.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return AccessResultAllowed|AccessResultForbidden
+   * @throws InvalidPluginDefinitionException
    */
   public function accessList(AccountInterface $account) {
     if ($account->hasPermission('administer media')) {
@@ @@
   /**
    * Access callback to validate if the user has access to a bulk upload form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User to validate access on.
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type the upload form belongs to.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function accessForm(AccountInterface $account, MediaTypeInterface $media_type) {
     $permissions = [
@@ @@
   /**
    * The _title_callback for the merlinone.bulk.upload_form route.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The current media type.
    *
    * @return string
@@ @@
    * Finds all of the media types that have a MerlinOne source type.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getMerlinMediaTypes() {
     $mediaStorage = $this->entityTypeManager->getStorage('media_type');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/merlinone/merlinone.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Update hooks for the MerlinOne module.
@@ @@
  * plugin ID for Media Entity Browser widgets.
  */
 function merlinone_update_8201() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');

   // Save browsers we changed to clear cached forms.
@@ @@
  * Updates the plugin ID.
  */
 function merlinone_update_8202() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');

   foreach ($config_factory->listAll('media.type.') as $name) {
@@ @@
   \Drupal::getContainer()
     ->get('plugin.manager.media.source')
     ->clearCachedDefinitions();
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 12 files have been changed by Rector                                      

