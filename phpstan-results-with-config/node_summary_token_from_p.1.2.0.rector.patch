diff --git a/node_summary_token_from_p.info.yml b/node_summary_token_from_p.info.yml
index aca4087..97abfd7 100644
--- a/node_summary_token_from_p.info.yml
+++ b/node_summary_token_from_p.info.yml
@@ -2,8 +2,7 @@ name: Node Summary Token From P Tags
 type: module
 description: 'Generates the [node:summary] token for Nodes which do not have a body field by using P tags from the rendered node.'
 package: Yource
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 dependencies:
   - drupal:node
 
diff --git a/node_summary_token_from_p.module b/node_summary_token_from_p.module
index cda016b..fe03aa7 100644
--- a/node_summary_token_from_p.module
+++ b/node_summary_token_from_p.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  */
@@ -24,7 +25,7 @@ function node_summary_token_from_p_tokens($type, $tokens, array $data, array $op
   }
 
   if ($type == 'node' && !empty($data['node'])) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $data['node'];
 
     foreach ($tokens as $name => $original) {
@@ -51,7 +52,7 @@ function node_summary_token_from_p_tokens($type, $tokens, array $data, array $op
  * This function will look for <p> elements in the rendered node HTML
  * and will return the first three sentences as a meta description.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node to generate the meta description for.
  *
  * @return string
@@ -78,7 +79,7 @@ function node_summary_token_from_p_generate_for_node(NodeInterface $node) {
 
   $view_builder = Drupal::entityTypeManager()->getViewBuilder('node');
   /**
-   * @var \Drupal\Core\Render\RendererInterface $renderer
+   * @var RendererInterface $renderer
    */
   $renderer = Drupal::service('renderer');
 
diff --git a/tests/src/HookTokensTest.php b/tests/src/HookTokensTest.php
index 9bdf6b9..6874b8f 100644
--- a/tests/src/HookTokensTest.php
+++ b/tests/src/HookTokensTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\node_summary_token_from_p;
 
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\field\Entity\FieldConfig;
@@ -27,14 +29,14 @@ class HookTokensTest extends TokenReplaceKernelTestBase {
   /**
    * Cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['filter', 'node']);
     $this->installEntitySchema('node');
@@ -78,7 +80,7 @@ class HookTokensTest extends TokenReplaceKernelTestBase {
     $field->save();
 
     /**
-     * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository
+     * @var EntityDisplayRepositoryInterface $entityDisplayRepository
      */
     $entityDisplayRepository = $this->container->get('entity_display.repository');
 
@@ -129,8 +131,8 @@ class HookTokensTest extends TokenReplaceKernelTestBase {
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $this->tokenService->replace($input, ['node' => $node], ['langcode' => $this->interfaceLanguage->getId()], $bubbleable_metadata);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
-      $this->assertEqual($bubbleable_metadata, $metadata_tests[$input]);
+      $this->assertEquals($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($bubbleable_metadata, $metadata_tests[$input]);
     }
 
     // Repeat for a node without a summary.
@@ -156,7 +158,7 @@ class HookTokensTest extends TokenReplaceKernelTestBase {
 
     foreach ($tests as $input => $expected) {
       $output = $this->tokenService->replace($input, ['node' => $node], ['language' => $this->interfaceLanguage]);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Node token %token replaced for node without a summary.', ['%token' => $input]));
+      $this->assertEquals($output, $expected, new FormattableMarkup('Node token %token replaced for node without a summary.', ['%token' => $input]));
     }
   }
 
@@ -196,8 +198,8 @@ class HookTokensTest extends TokenReplaceKernelTestBase {
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $this->tokenService->replace($input, ['node' => $node], ['langcode' => $this->interfaceLanguage->getId()], $bubbleable_metadata);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
-      $this->assertEqual($bubbleable_metadata, $metadata_tests[$input]);
+      $this->assertEquals($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($bubbleable_metadata, $metadata_tests[$input]);
     }
   }
 
