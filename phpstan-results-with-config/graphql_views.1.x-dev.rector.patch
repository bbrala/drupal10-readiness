diff --git a/src/Plugin/Deriver/Enums/ViewSortByDeriver.php b/src/Plugin/Deriver/Enums/ViewSortByDeriver.php
index 4851f1f..b558d0c 100644
--- a/src/Plugin/Deriver/Enums/ViewSortByDeriver.php
+++ b/src/Plugin/Deriver/Enums/ViewSortByDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\Enums;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ -16,13 +18,13 @@ class ViewSortByDeriver extends ViewDeriverBase {
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$type = $this->getRowResolveType($view, $displayId)) {
           continue;
         }
 
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         $sorts = array_filter($display->getOption('sorts') ?: [], function ($sort) {
           return $sort['exposed'];
diff --git a/src/Plugin/Deriver/Fields/ViewDeriver.php b/src/Plugin/Deriver/Fields/ViewDeriver.php
index fe8577b..86fdb25 100644
--- a/src/Plugin/Deriver/Fields/ViewDeriver.php
+++ b/src/Plugin/Deriver/Fields/ViewDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\Fields;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ -19,13 +21,13 @@ class ViewDeriver extends ViewDeriverBase implements ContainerDeriverInterface {
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
         }
 
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
 
         $id = implode('-', [$viewId, $displayId, 'view']);
diff --git a/src/Plugin/Deriver/Fields/ViewResultCountDeriver.php b/src/Plugin/Deriver/Fields/ViewResultCountDeriver.php
index fa48865..116e95d 100644
--- a/src/Plugin/Deriver/Fields/ViewResultCountDeriver.php
+++ b/src/Plugin/Deriver/Fields/ViewResultCountDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\Fields;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
 
@@ -18,9 +20,9 @@ class ViewResultCountDeriver extends ViewDeriverBase {
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         if (!$this->isPaged($display)) {
           continue;
diff --git a/src/Plugin/Deriver/Fields/ViewResultListDeriver.php b/src/Plugin/Deriver/Fields/ViewResultListDeriver.php
index 04e5017..4e0cb9a 100644
--- a/src/Plugin/Deriver/Fields/ViewResultListDeriver.php
+++ b/src/Plugin/Deriver/Fields/ViewResultListDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\Fields;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ -19,13 +21,13 @@ class ViewResultListDeriver extends ViewDeriverBase {
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$type = $this->getRowResolveType($view, $displayId)) {
           continue;
         }
 
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
 
         $id = implode('-', [$viewId, $displayId, 'result', 'list']);
diff --git a/src/Plugin/Deriver/Fields/ViewRowFieldDeriver.php b/src/Plugin/Deriver/Fields/ViewRowFieldDeriver.php
index f42f33f..05f20e7 100644
--- a/src/Plugin/Deriver/Fields/ViewRowFieldDeriver.php
+++ b/src/Plugin/Deriver/Fields/ViewRowFieldDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\Fields;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\views\row\GraphQLFieldRow;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ -19,9 +21,9 @@ class ViewRowFieldDeriver extends ViewDeriverBase {
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         $rowPlugin = $display->getPlugin('row');
 
diff --git a/src/Plugin/Deriver/InputTypes/ViewContextualFilterInputDeriver.php b/src/Plugin/Deriver/InputTypes/ViewContextualFilterInputDeriver.php
index d7e0825..db90fde 100644
--- a/src/Plugin/Deriver/InputTypes/ViewContextualFilterInputDeriver.php
+++ b/src/Plugin/Deriver/InputTypes/ViewContextualFilterInputDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\InputTypes;
 
+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
@@ -20,7 +21,7 @@ class ViewContextualFilterInputDeriver extends ViewDeriverBase implements Contai
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
diff --git a/src/Plugin/Deriver/InputTypes/ViewFilterInputDeriver.php b/src/Plugin/Deriver/InputTypes/ViewFilterInputDeriver.php
index 78c727f..7c4abbc 100644
--- a/src/Plugin/Deriver/InputTypes/ViewFilterInputDeriver.php
+++ b/src/Plugin/Deriver/InputTypes/ViewFilterInputDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\InputTypes;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
@@ -20,13 +22,13 @@ class ViewFilterInputDeriver extends ViewDeriverBase implements ContainerDeriver
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
         }
 
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         $id = implode('_', [$viewId, $displayId, 'view', 'filter', 'input']);
 
diff --git a/src/Plugin/Deriver/Types/ViewResultTypeDeriver.php b/src/Plugin/Deriver/Types/ViewResultTypeDeriver.php
index 2d4c71e..c969f77 100644
--- a/src/Plugin/Deriver/Types/ViewResultTypeDeriver.php
+++ b/src/Plugin/Deriver/Types/ViewResultTypeDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\Types;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
 
@@ -18,13 +20,13 @@ class ViewResultTypeDeriver extends ViewDeriverBase {
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
         }
 
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
 
         $id = implode('-', [$viewId, $displayId, 'result']);
diff --git a/src/Plugin/Deriver/Types/ViewRowTypeDeriver.php b/src/Plugin/Deriver/Types/ViewRowTypeDeriver.php
index 0a69781..734278a 100644
--- a/src/Plugin/Deriver/Types/ViewRowTypeDeriver.php
+++ b/src/Plugin/Deriver/Types/ViewRowTypeDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\graphql_views\Plugin\Deriver\Types;
 
+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
 
@@ -18,7 +20,7 @@ class ViewRowTypeDeriver extends ViewDeriverBase {
       $viewStorage = $this->entityTypeManager->getStorage('view');
 
       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
@@ -30,7 +32,7 @@ class ViewRowTypeDeriver extends ViewDeriverBase {
           continue;
         }
 
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
 
         $id = implode('-', [$viewId, $displayId, 'row']);
diff --git a/src/Plugin/Deriver/ViewDeriverBase.php b/src/Plugin/Deriver/ViewDeriverBase.php
index 685088d..47d569e 100644
--- a/src/Plugin/Deriver/ViewDeriverBase.php
+++ b/src/Plugin/Deriver/ViewDeriverBase.php
@@ -25,14 +25,14 @@ abstract class ViewDeriverBase extends DeriverBase implements ContainerDeriverIn
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The interface plugin manager to search for return type candidates.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $interfacePluginManager;
 
@@ -56,9 +56,9 @@ abstract class ViewDeriverBase extends DeriverBase implements ContainerDeriverIn
   /**
    * Creates a ViewDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   An entity type manager instance.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $interfacePluginManager
+   * @param PluginManagerInterface $interfacePluginManager
    *   The plugin manager for graphql interfaces.
    */
   public function __construct(
@@ -98,7 +98,7 @@ abstract class ViewDeriverBase extends DeriverBase implements ContainerDeriverIn
   /**
    * Retrieves the type the view's rows resolve to.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view entity.
    * @param string $displayId
    *   Interface plugin manager.
diff --git a/src/Plugin/views/row/GraphQLEntityRow.php b/src/Plugin/views/row/GraphQLEntityRow.php
index 82b4fbb..a86968a 100644
--- a/src/Plugin/views/row/GraphQLEntityRow.php
+++ b/src/Plugin/views/row/GraphQLEntityRow.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql_views\Plugin\views\row;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\EntityRepository;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
@@ -37,44 +40,44 @@ class GraphQLEntityRow extends RowPluginBase {
   /**
    * Contains the entity type of this row plugin instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeBundleInfo $entityTypeBundleInfo, LanguageManagerInterface $languageManager, EntityTypeManagerInterface $entityTypeManager, EntityRepositoryInterface $entityRepository) {
@@ -168,7 +171,7 @@ class GraphQLEntityRow extends RowPluginBase {
    * @param \Drupal\Views\ResultRow $row
    *   The views result row object.
    *
-   * @return null|\Drupal\Core\Entity\EntityInterface
+   * @return null|EntityInterface
    *   The extracted entity object or NULL if it could not be retrieved.
    */
   protected function getEntityFromRow(ResultRow $row) {
diff --git a/src/ViewDeriverHelperTrait.php b/src/ViewDeriverHelperTrait.php
index a64325b..9eb0a5a 100644
--- a/src/ViewDeriverHelperTrait.php
+++ b/src/ViewDeriverHelperTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\graphql_views;
 
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
+use Drupal\views\Plugin\views\style\StylePluginBase;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\graphql\Utility\StringHelper;
@@ -41,7 +44,7 @@ trait ViewDeriverHelperTrait {
   /**
    * Helper function to retrieve the sort arguments if any are exposed.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display plugin.
    * @param string $id
    *   The plugin derivative id.
@@ -67,7 +70,7 @@ trait ViewDeriverHelperTrait {
   /**
    * Helper function to return the filter argument if applicable.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display plugin.
    * @param string $id
    *   The plugin derivative id.
@@ -90,7 +93,7 @@ trait ViewDeriverHelperTrait {
   /**
    * Helper function to retrieve the pager arguments if the display is paged.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display plugin.
    *
    * @return array
@@ -150,7 +153,7 @@ trait ViewDeriverHelperTrait {
   /**
    * Check if a pager is configured.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display configuration.
    *
    * @return bool
@@ -167,12 +170,12 @@ trait ViewDeriverHelperTrait {
   /**
    * Returns a view display object.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view object.
    * @param string $displayId
    *   The display ID to use.
    *
-   * @return \Drupal\views\Plugin\views\display\DisplayPluginInterface
+   * @return DisplayPluginInterface
    *   The view display object.
    */
   protected function getViewDisplay(ViewEntityInterface $view, $displayId) {
@@ -184,7 +187,7 @@ trait ViewDeriverHelperTrait {
   /**
    * Get the configured default limit.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display configuration.
    *
    * @return int
@@ -201,7 +204,7 @@ trait ViewDeriverHelperTrait {
   /**
    * Get the configured default offset.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display configuration.
    *
    * @return int
@@ -220,7 +223,7 @@ trait ViewDeriverHelperTrait {
    *
    * @param string $interface
    *   The GraphQL interface name.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $interfacePluginManager
+   * @param PluginManagerInterface $interfacePluginManager
    *   Plugin interface manager.
    *
    * @return bool
@@ -235,18 +238,18 @@ trait ViewDeriverHelperTrait {
   /**
    * Retrieves the type the view's rows resolve to.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view entity.
    * @param string $displayId
    *   The id of the current display.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $interfacePluginManager
+   * @param PluginManagerInterface $interfacePluginManager
    *   Interface plugin manager.
    *
    * @return null|string
    *   The name of the type or NULL if the type could not be derived.
    */
   protected function getRowResolveType(ViewEntityInterface $view, $displayId, PluginManagerInterface $interfacePluginManager) {
-    /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+    /** @var GraphQL $display */
     $display = $this->getViewDisplay($view, $displayId);
     $rowPlugin = $display->getPlugin('row');
 
@@ -290,12 +293,12 @@ trait ViewDeriverHelperTrait {
   /**
    * Returns a view style object.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view object.
    * @param string $displayId
    *   The display ID to use.
    *
-   * @return \Drupal\views\Plugin\views\style\StylePluginBase
+   * @return StylePluginBase
    *   The view style object.
    */
   protected function getViewStyle(ViewEntityInterface $view, $displayId) {
@@ -307,9 +310,9 @@ trait ViewDeriverHelperTrait {
   /**
    * Returns cache metadata plugin definitions.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view object.
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The view display.
    *
    * @return array
@@ -343,7 +346,7 @@ trait ViewDeriverHelperTrait {
    *     - entity_type: target entity type.
    *     - bundles: target bundles (can be empty).
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getArgumentsInfo(array $viewArguments) {
     $argumentsInfo = [];
