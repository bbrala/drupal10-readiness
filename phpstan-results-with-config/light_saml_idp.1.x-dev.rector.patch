diff --git a/light_saml_idp.info.yml b/light_saml_idp.info.yml
index d5a8bc5..346edaa 100644
--- a/light_saml_idp.info.yml
+++ b/light_saml_idp.info.yml
@@ -1,4 +1,4 @@
 name: 'Light Saml Identity Provider'
 description: ''
 type: module
-core_version_requirement: ^8.8.0 || ^9
+core_version_requirement: ^8.8.0 || ^9 || ^10
diff --git a/light_saml_idp.module b/light_saml_idp.module
index 6f04ece..3aa3fee 100644
--- a/light_saml_idp.module
+++ b/light_saml_idp.module
@@ -1,21 +1,23 @@
 <?php
 
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use LightSaml\Credential\X509Certificate;
 use Drupal\Component\Render\MarkupInterface;
 
 /**
  * Outputs readable x509 certificate info.
  *
- * @param \LightSaml\Credential\X509Certificate $cert
+ * @param X509Certificate $cert
  *
- * @return \Drupal\Component\Render\MarkupInterface|null
+ * @return MarkupInterface|null
  * @throws \Exception
  */
 function _light_saml_idp_cert_info(X509Certificate $cert): ?MarkupInterface {
   if ($cert->getInfo() !== null) {
-    /** @var \Drupal\Core\Datetime\DateFormatter $dateFormatter */
+    /** @var DateFormatter $dateFormatter */
     $dateFormatter = \Drupal::service('date.formatter');
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');
 
     $info = [
diff --git a/src/Controller/LightSamlIdpController.php b/src/Controller/LightSamlIdpController.php
index 681b595..0bd310f 100644
--- a/src/Controller/LightSamlIdpController.php
+++ b/src/Controller/LightSamlIdpController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\light_saml_idp\Controller;
 
+use Drupal\light_saml_idp\SamlGenerator;
+use LightSaml\Binding\BindingFactory;
+use LightSaml\Context\Profile\MessageContext;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Session\AccountProxy;
@@ -30,58 +33,58 @@ class LightSamlIdpController extends ControllerBase {
   /**
    * A SamlGenerator instance.
    *
-   * @var \Drupal\light_saml_idp\SamlGenerator
+   * @var SamlGenerator
    */
   protected $samlGenerator;
 
   /**
    * A SamlParser instance.
    *
-   * @var \Drupal\light_saml_idp\SamlParser
+   * @var SamlParser
    */
   protected $samlParser;
 
   /**
-   * @var \LightSaml\Validator\Model\Xsd\XsdValidator
+   * @var XsdValidator
    */
   protected $xsdValidator;
 
   /**
    * Service provider repository.
    *
-   * @var \Drupal\light_saml_idp\Entity\ServiceProviderRepository
+   * @var ServiceProviderRepository
    */
   protected $serviceProviderRepository;
 
   /**
    * A IdentityProvider instance.
    *
-   * @var \Drupal\light_saml_idp\IdentityProvider
+   * @var IdentityProvider
    */
   protected $identityProvider;
 
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * LightSamlIdpController constructor.
    *
-   * @param \Drupal\light_saml_idp\SamlGeneratorInterface $samlGenerator
-   * @param \Drupal\light_saml_idp\SamlParser $samlParser
-   * @param \LightSaml\Validator\Model\Xsd\XsdValidator $xsdValidator
-   * @param \Drupal\light_saml_idp\Entity\ServiceProviderRepository $serviceProviderRepository
-   * @param \Drupal\Core\Session\AccountProxy $currentUser
-   * @param \Drupal\light_saml_idp\IdentityProvider $identityProvider
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param SamlGeneratorInterface $samlGenerator
+   * @param SamlParser $samlParser
+   * @param XsdValidator $xsdValidator
+   * @param ServiceProviderRepository $serviceProviderRepository
+   * @param AccountProxy $currentUser
+   * @param IdentityProvider $identityProvider
+   * @param MessengerInterface $messenger
    */
   public function __construct(
     SamlGeneratorInterface $samlGenerator,
@@ -149,10 +152,10 @@ class LightSamlIdpController extends ControllerBase {
   /**
    * Logs in a user by parsing a AuthnRequest from a ServiceProvider.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function login(Request $request) {
     $session = $request->getSession();
@@ -190,7 +193,7 @@ class LightSamlIdpController extends ControllerBase {
    *
    * @param null $relayState
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   protected function getSamlHttpPostResponse($serviceProvider, $requestId = '', $relayState = NULL): Response {
     $samlMessage = $this->samlGenerator->buildSamlMessage($serviceProvider, $requestId);
@@ -199,9 +202,9 @@ class LightSamlIdpController extends ControllerBase {
     }
     $assertion = $this->samlGenerator->buildAssertion($serviceProvider, $this->currentUser, $requestId);
     $this->samlGenerator->addAssertionToResponse($serviceProvider, $samlMessage, $assertion);
-    $bindingFactory = new \LightSaml\Binding\BindingFactory();
+    $bindingFactory = new BindingFactory();
 
-    $messageContext = new \LightSaml\Context\Profile\MessageContext();
+    $messageContext = new MessageContext();
     $messageContext->setMessage($samlMessage)->asResponse();
 
     // We only support SAML 2.0 HTTP POST binding for now.
diff --git a/src/Entity/ServiceProviderInterface.php b/src/Entity/ServiceProviderInterface.php
index aba16d4..63b9c72 100644
--- a/src/Entity/ServiceProviderInterface.php
+++ b/src/Entity/ServiceProviderInterface.php
@@ -121,12 +121,12 @@ interface ServiceProviderInterface extends ConfigEntityInterface {
   public function setEncryptionMethod(string $encryption_method): void;
 
   /**
-   * @return \RobRichards\XMLSecLibs\XMLSecurityKey
+   * @return XMLSecurityKey
    */
   public function getEncryptionPublicKey(): XMLSecurityKey;
 
   /**
-   * @return \RobRichards\XMLSecLibs\XMLSecurityKey
+   * @return XMLSecurityKey
    */
   public function getSigningPublicKey(): XMLSecurityKey;
 }
diff --git a/src/Entity/ServiceProviderRepository.php b/src/Entity/ServiceProviderRepository.php
index 4eca59d..8c55a38 100644
--- a/src/Entity/ServiceProviderRepository.php
+++ b/src/Entity/ServiceProviderRepository.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\light_saml_idp\Entity;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityRepository;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -9,18 +12,18 @@ use Drupal\Core\Language\LanguageManagerInterface;
 class ServiceProviderRepository extends EntityRepository {
 
   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * ServiceProviderRepository constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param LanguageManagerInterface $language_manager
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -33,7 +36,7 @@ class ServiceProviderRepository extends EntityRepository {
   /**
    * @param string $entityId
    *
-   * @return \Drupal\light_saml_idp\Entity\ServiceProviderInterface|null
+   * @return ServiceProviderInterface|null
    */
   public function loadEntityByEntityId(string $entityId): ?ServiceProviderInterface {
     $entities = $this->entityStorage->loadByProperties(['entityId'=> $entityId]);
diff --git a/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php b/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php
index b0fc685..0a02b10 100644
--- a/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php
+++ b/src/EventSubscriber/StoreAnonymousSAMLRequestSubscriber.php
@@ -2,9 +2,10 @@
 
 namespace Drupal\light_saml_idp\EventSubscriber;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Routing\RouteMatch;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 
@@ -15,7 +16,7 @@ use Symfony\Component\HttpKernel\KernelEvents;
  */
 class StoreAnonymousSAMLRequestSubscriber implements EventSubscriberInterface {
 
-  /** @var \Drupal\Core\Session\AccountProxyInterface */
+  /** @var AccountProxyInterface */
   protected $account;
 
   /**
@@ -28,10 +29,10 @@ class StoreAnonymousSAMLRequestSubscriber implements EventSubscriberInterface {
   /**
    * Store the SAML request data in the user's session.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    */
-  public function storeSAMLRequest(GetResponseForExceptionEvent $event) {
-    if ($event->getException() instanceof AccessDeniedHttpException && $this->account->isAnonymous()) {
+  public function storeSAMLRequest(ExceptionEvent $event) {
+    if ($event->getThrowable() instanceof AccessDeniedHttpException && $this->account->isAnonymous()) {
       $request = $event->getRequest();
       $routeName = RouteMatch::createFromRequest($request)->getRouteName();
       $samlRequest = $request->get('SAMLRequest');
diff --git a/src/Form/ServiceProviderForm.php b/src/Form/ServiceProviderForm.php
index eecd881..6cdd3e4 100644
--- a/src/Form/ServiceProviderForm.php
+++ b/src/Form/ServiceProviderForm.php
@@ -162,7 +162,7 @@ class ServiceProviderForm extends EntityForm {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     foreach (['signingCertificate', 'encryptionCertificate'] as $certificate) {
@@ -173,7 +173,7 @@ class ServiceProviderForm extends EntityForm {
   }
 
   /**
-   * @return \Drupal\light_saml_idp\Entity\ServiceProviderInterface
+   * @return ServiceProviderInterface
    */
   public function getEntity(): ServiceProviderInterface {
     return parent::getEntity();
diff --git a/src/IdentityProvider.php b/src/IdentityProvider.php
index 8877a90..2215f37 100644
--- a/src/IdentityProvider.php
+++ b/src/IdentityProvider.php
@@ -24,17 +24,17 @@ class IdentityProvider {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \LightSaml\Credential\X509Certificate|null
+   * @var X509Certificate|null
    */
   protected $signingCertificate;
 
   /**
-   * @var \RobRichards\XMLSecLibs\XMLSecurityKey|null
+   * @var XMLSecurityKey|null
    */
   protected $signingPrivateKey;
 
@@ -73,7 +73,7 @@ class IdentityProvider {
   /**
    * IdentityProvider constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
     $this->configFactory = $configFactory;
@@ -110,7 +110,7 @@ class IdentityProvider {
   /**
    * @param $certificateLocation
    *
-   * @return \LightSaml\Credential\X509Certificate|null
+   * @return X509Certificate|null
    */
   protected function loadX509Certificate($certificateLocation): ?X509Certificate {
     try {
@@ -127,7 +127,7 @@ class IdentityProvider {
    *
    * @param $privateKeyLocation
    *
-   * @return \RobRichards\XMLSecLibs\XMLSecurityKey|null
+   * @return XMLSecurityKey|null
    */
   protected function loadPrivateKey($privateKeyLocation): ?XMLSecurityKey {
     if (is_file($privateKeyLocation)) {
@@ -143,21 +143,21 @@ class IdentityProvider {
   }
 
   /**
-   * @return \LightSaml\Credential\X509Certificate|null
+   * @return X509Certificate|null
    */
   public function getSigningCertificate(): ?X509Certificate {
     return $this->signingCertificate;
   }
 
   /**
-   * @return \RobRichards\XMLSecLibs\XMLSecurityKey|null
+   * @return XMLSecurityKey|null
    */
   public function getSigningPublicKey(): ?XMLSecurityKey {
     return KeyHelper::createPublicKey($this->getSigningCertificate());
   }
 
   /**
-   * @return \RobRichards\XMLSecLibs\XMLSecurityKey|null
+   * @return XMLSecurityKey|null
    */
   public function getSigningPrivateKey(): ?XMLSecurityKey {
     return $this->signingPrivateKey;
diff --git a/src/SamlGenerator.php b/src/SamlGenerator.php
index 863e2a5..c00c78e 100644
--- a/src/SamlGenerator.php
+++ b/src/SamlGenerator.php
@@ -34,28 +34,28 @@ class SamlGenerator implements SamlGeneratorInterface {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * A IdentityProvider instance.
    *
-   * @var \Drupal\light_saml_idp\IdentityProvider
+   * @var IdentityProvider
    */
   protected $identityProvider;
 
   /**
    * A time instance.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -91,7 +91,7 @@ class SamlGenerator implements SamlGeneratorInterface {
   }
 
   /**
-   * @return \LightSaml\Model\Assertion\Issuer|null
+   * @return Issuer|null
    */
   public function getAssertionIssuer(): ?Issuer {
     if ($entityId = $this->identityProvider->getEntityId()) {
@@ -101,9 +101,9 @@ class SamlGenerator implements SamlGeneratorInterface {
   }
 
   /**
-   * @param \Drupal\light_saml_idp\Entity\ServiceProviderInterface $serviceProvider
+   * @param ServiceProviderInterface $serviceProvider
    *
-   * @return \LightSaml\Model\XmlDSig\SignatureWriter
+   * @return SignatureWriter
    */
   protected function getSignature(ServiceProviderInterface $serviceProvider): SignatureWriter {
     return new SignatureWriter(
@@ -185,9 +185,9 @@ class SamlGenerator implements SamlGeneratorInterface {
   }
 
   /**
-   * @param \Drupal\light_saml_idp\Entity\ServiceProviderInterface $serviceProvider
+   * @param ServiceProviderInterface $serviceProvider
    * @param \LightSaml\Model\Protocol\Response $samlMessage
-   * @param \LightSaml\Model\Assertion\Assertion $assertion
+   * @param Assertion $assertion
    */
   public function addAssertionToResponse(
     ServiceProviderInterface $serviceProvider,
diff --git a/src/SamlGeneratorInterface.php b/src/SamlGeneratorInterface.php
index 1b26303..baea7ba 100644
--- a/src/SamlGeneratorInterface.php
+++ b/src/SamlGeneratorInterface.php
@@ -17,7 +17,7 @@ interface SamlGeneratorInterface {
   ): SAMLResponse;
 
   /**
-   * @return \LightSaml\Model\Assertion\Issuer|null
+   * @return Issuer|null
    */
   public function getAssertionIssuer(): ?Issuer;
 
@@ -28,9 +28,9 @@ interface SamlGeneratorInterface {
   ): Assertion;
 
   /**
-   * @param \Drupal\light_saml_idp\Entity\ServiceProviderInterface $serviceProvider
+   * @param ServiceProviderInterface $serviceProvider
    * @param \LightSaml\Model\Protocol\Response $samlMessage
-   * @param \LightSaml\Model\Assertion\Assertion $assertion
+   * @param Assertion $assertion
    */
   public function addAssertionToResponse(
     ServiceProviderInterface $serviceProvider,
diff --git a/src/SamlParser.php b/src/SamlParser.php
index b7b8496..cbc2297 100644
--- a/src/SamlParser.php
+++ b/src/SamlParser.php
@@ -11,7 +11,7 @@ class SamlParser {
   /**
    * @param string $samlRequest
    *
-   * @return \LightSaml\Model\Protocol\AuthnRequest
+   * @return AuthnRequest
    */
   public function buildAuthnRequest(string $samlRequest): AuthnRequest {
     $xml = base64_decode($samlRequest);
diff --git a/src/ServiceProviderListBuilder.php b/src/ServiceProviderListBuilder.php
index 1b727e1..7fe61b3 100644
--- a/src/ServiceProviderListBuilder.php
+++ b/src/ServiceProviderListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\light_saml_idp;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -32,10 +33,10 @@ class ServiceProviderListBuilder extends ConfigEntityListBuilder {
   /**
    * Overridden for consistent camelCasing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return array
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getOperations(EntityInterface $entity) {
     $operations = parent::getOperations($entity);
