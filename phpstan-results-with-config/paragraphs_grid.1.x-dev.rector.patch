diff --git a/paragraphs_grid.info.yml b/paragraphs_grid.info.yml
index db7780b..6b8523c 100644
--- a/paragraphs_grid.info.yml
+++ b/paragraphs_grid.info.yml
@@ -1,9 +1,8 @@
 name: Paragraphs Grid
 type: module
 description: Provides a flexible grid system for paragraphs entities.
-core: 8.x
 package: Paragraphs
 configure: paragraphs_grid.paragraphs_grid_config_form
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - paragraphs:paragraphs
diff --git a/paragraphs_grid.module b/paragraphs_grid.module
index 58aa89f..727665a 100644
--- a/paragraphs_grid.module
+++ b/paragraphs_grid.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\paragraphs\Entity\Paragraph;
+use Drupal\Core\Field\FieldItemListInterface;
 /**
  * @file
  * Contains paragraphs_grid.module.
@@ -73,7 +75,7 @@ function paragraphs_grid_theme_suggestions_alter(array &$suggestions, array $var
 function paragraphs_grid_theme_registry_alter(&$theme_registry) {
   $theme_registry['field__entity_reference_revisions'] = $theme_registry['field'];
   $theme_registry['field__entity_reference_revisions']['template'] = 'field--paragraphs-grid-formatter';
-  $theme_registry['field__entity_reference_revisions']['path'] = drupal_get_path('module', 'paragraphs_grid') . '/templates';
+  $theme_registry['field__entity_reference_revisions']['path'] = \Drupal::service('extension.list.module')->getPath('paragraphs_grid') . '/templates';
 }
 
 /**
@@ -152,7 +154,7 @@ function paragraphs_grid_page_attachments(array &$page) {
  */
 function paragraphs_grid_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
   if ($entity->getEntityTypeId() == 'paragraph' && $view_mode != 'preview') {
-    /** @var \Drupal\paragraphs\Entity\Paragraph $entity */
+    /** @var Paragraph $entity */
     // Find grid_field_type field, get set view mode and change the view mode.
     $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle());
     foreach ($fields as $field_name => $field) {
@@ -168,10 +170,10 @@ function paragraphs_grid_entity_view_mode_alter(&$view_mode, EntityInterface $en
 /**
  * Get active page field.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The Entity which should be checked.
  *
- * @return \Drupal\Core\Field\FieldItemListInterface|null
+ * @return FieldItemListInterface|null
  *   Return the field or null.
  */
 function _paragraphs_grid_get_field_by_type(FieldableEntityInterface $entity, $type) {
diff --git a/src/Form/ParagraphsGridConfigForm.php b/src/Form/ParagraphsGridConfigForm.php
index d01a495..337e44f 100644
--- a/src/Form/ParagraphsGridConfigForm.php
+++ b/src/Form/ParagraphsGridConfigForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\paragraphs_grid\Form;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\paragraphs_grid\Entity\GridEntity;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,14 +21,14 @@ class ParagraphsGridConfigForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -38,11 +42,11 @@ class ParagraphsGridConfigForm extends ConfigFormBase {
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The great and only Entity-Type-Manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The great and only EntityType Manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -74,11 +78,11 @@ class ParagraphsGridConfigForm extends ConfigFormBase {
   /**
    * Returns grid entities as an array.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   Grid entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getGrids() {
     if (!$this->grids) {
@@ -93,13 +97,13 @@ class ParagraphsGridConfigForm extends ConfigFormBase {
    * @return array
    *   The grids as select options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getGridTypeOptions() {
     $options = [];
     foreach ($this->getGrids() as $grid) {
-      /** @var \Drupal\paragraphs_grid\Entity\GridEntity $grid */
+      /** @var GridEntity $grid */
       $options['paragraphs_grid.grid_entity.' . $grid->id()] = $grid->label();
     }
     return $options;
@@ -115,8 +119,8 @@ class ParagraphsGridConfigForm extends ConfigFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $field_map = $this->entityFieldManager->getFieldMapByFieldType('grid_field_type');
diff --git a/src/Plugin/Field/FieldFormatter/ParagraphsGridFormatter.php b/src/Plugin/Field/FieldFormatter/ParagraphsGridFormatter.php
index 15ffcd1..2e4e064 100644
--- a/src/Plugin/Field/FieldFormatter/ParagraphsGridFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ParagraphsGridFormatter.php
@@ -30,7 +30,7 @@ class ParagraphsGridFormatter extends EntityReferenceRevisionsEntityFormatter im
   /**
    * The Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
@@ -41,7 +41,7 @@ class ParagraphsGridFormatter extends EntityReferenceRevisionsEntityFormatter im
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -51,11 +51,11 @@ class ParagraphsGridFormatter extends EntityReferenceRevisionsEntityFormatter im
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The entity display repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LoggerChannelFactoryInterface $logger_factory, EntityDisplayRepositoryInterface $entity_display_repository, ConfigFactory $config_factory) {
diff --git a/src/Plugin/Field/FieldType/GridFieldType.php b/src/Plugin/Field/FieldType/GridFieldType.php
index 11f5c75..e6743a3 100644
--- a/src/Plugin/Field/FieldType/GridFieldType.php
+++ b/src/Plugin/Field/FieldType/GridFieldType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\paragraphs_grid\Plugin\Field\FieldType;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ -32,14 +33,14 @@ class GridFieldType extends FieldItemBase {
   /**
    * The module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moduleConfig;
 
   /**
    * The configured grid_entity.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $gridConfig;
 
diff --git a/src/Plugin/Field/FieldWidget/GridWidget.php b/src/Plugin/Field/FieldWidget/GridWidget.php
index be1e70c..cb9f490 100644
--- a/src/Plugin/Field/FieldWidget/GridWidget.php
+++ b/src/Plugin/Field/FieldWidget/GridWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\paragraphs_grid\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityDisplayRepository;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -33,28 +34,28 @@ class GridWidget extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * The paragraphs_grid settings from config form used for the site.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moduleConfig;
 
   /**
    * The grid config entity used for the site.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $gridConfig;
 
   /**
    * The current users account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity display repository from drupal.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepository
+   * @var EntityDisplayRepository
    */
   protected $entityDisplayRepository;
 
@@ -65,17 +66,17 @@ class GridWidget extends WidgetBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   Drupal config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current Drupal user.
-   * @param \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository
+   * @param EntityDisplayRepository $entity_display_repository
    *   Entity display repository, to get view modes by bundle.
    */
   public function __construct(
