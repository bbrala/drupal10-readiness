modules/contrib/doccheck_basic/doccheck_basic.install
modules/contrib/doccheck_basic/doccheck_basic.module
modules/contrib/doccheck_basic/src/Authentication/Provider/DoccheckIpAuth.php
modules/contrib/doccheck_basic/src/Controller/CallbackController.php
modules/contrib/doccheck_basic/src/DoccheckBasicCommon.php
modules/contrib/doccheck_basic/src/Form/SettingsForm.php
modules/contrib/doccheck_basic/src/Plugin/Block/FormBlock.php
modules/contrib/doccheck_basic/tests/src/Functional/DoccheckBasicTest.php

6 files with changes
====================

1) modules/contrib/doccheck_basic/tests/src/Functional/DoccheckBasicTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\doccheck_basic\Functional;

+use Drupal\user\Entity\User;
+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $admin;

@@ @@
   /**
    * Doccheck user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $doccheckUser;

@@ @@
   /**
    * Doccheck node page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $doccheckNodePage;

@@ @@
   /**
    * Doccheck node article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $doccheckNodeArticle;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/doccheck_basic/src/Plugin/Block/FormBlock.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The DoccheckBassicCommon service.
    *
-   * @var \Drupal\doccheck_basic\DoccheckBasicCommon
+   * @var DoccheckBasicCommon
    */
   protected $docCheckBasicCommon;

@@ @@
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\doccheck_basic\DoccheckBasicCommon $docCheckBasicCommon
+   * @param DoccheckBasicCommon $docCheckBasicCommon
    *   The DoccheckBassicCommon service.
    */
   public function __construct(array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/doccheck_basic/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\doccheck_basic\Form;

+use Drupal\user\UserStorage;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The variable containing the user manager.
    *
-   * @var \Drupal\user\UserStorage
+   * @var UserStorage
    */
   protected $userManager;

@@ @@
   /**
    * The variable containing the request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * Dependency injection through the constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The request stack service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entityTypeManager, RequestStack $requestStack, AliasManagerInterface $alias_manager) {
@@ @@
       ->condition('roles', 'administrator', '<>')
       ->execute();
     $all_users = $this->userManager->loadMultiple($ids);
-    /** @var \Drupal\Core\Session\AccountInterface $value */
+    /** @var AccountInterface $value */
     foreach ($all_users as $key => $value) {
       $filtered_users[$key] = $value->getDisplayName();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/doccheck_basic/src/DoccheckBasicCommon.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\doccheck_basic;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ @@
   /**
    * The variable containing the conditions configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The variable containing the current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The variable containing the request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The variable containing the language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * The variable containing the KillSwitch service.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;

@@ @@
   /**
    * Dependency injection through the constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $killSwitch
+   * @param KillSwitch $killSwitch
    *   The killSwitch service.
    */
   public function __construct(LoggerInterface $logger,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/doccheck_basic/src/Controller/CallbackController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\doccheck_basic\Controller;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserStorageInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The variable containing the conditions configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The variable containing the conditions configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The variable containing the current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The variable containing the user manager.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;

@@ @@
   /**
    * The variable containing the request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The variable containing the request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The variable containing the KillSwitch service.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;

@@ @@
   /**
    * The DoccheckBassicCommon service.
    *
-   * @var \Drupal\doccheck_basic\DoccheckBasicCommon
+   * @var DoccheckBasicCommon
    */
   protected $docCheckBasicCommon;

@@ @@
   /**
    * Dependency injection through the constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $killSwitch
+   * @param KillSwitch $killSwitch
    *   The killSwitch service.
-   * @param \Drupal\doccheck_basic\DoccheckBasicCommon $docCheckBasicCommon
+   * @param DoccheckBasicCommon $docCheckBasicCommon
    *   The DoccheckBassicCommon service.
    */
   public function __construct(ConfigFactoryInterface $configFactory,
@@ @@
       return self::errorMsg($err_msg);
     }
     if ($this->currentUser->getAccount()->isAnonymous()) {
-      /** @var \Drupal\Core\Session\AccountInterface|NULL $dc_user */
+      /** @var AccountInterface|NULL $dc_user */
       $dc_user = $this->userManager->load($this->config->get('dc_user'));
       if ($dc_user === NULL) {
         $err_msg = $this->t('DocCheck login username not valid or not selected.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/doccheck_basic/src/Authentication/Provider/DoccheckIpAuth.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\doccheck_basic\Authentication\Provider;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserStorage;
 use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * A configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The variable containing the user manager.
    *
-   * @var \Drupal\user\UserStorage
+   * @var UserStorage
    */
   protected $userManager;

@@ @@
   /**
    * Constructs an IP authentication provider object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $current_user, LoggerInterface $logger, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
     $ip = $request->getClientIp();

     if (\in_array($ip, $crawler_ip, FALSE)) {
-      /** @var \Drupal\Core\Session\AccountInterface|NULL $account */
+      /** @var AccountInterface|NULL $account */
       $account = $this->userManager->load($uid);
       if (\is_object($account)) {
         user_login_finalize($account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 6 files have been changed by Rector                                       

