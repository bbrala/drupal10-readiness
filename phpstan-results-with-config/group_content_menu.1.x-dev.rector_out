modules/contrib/group_content_menu/group_content_menu.module
modules/contrib/group_content_menu/group_content_menu.post_update.php
modules/contrib/group_content_menu/src/Access/GroupOwnsMenuContentAccessChecker.php
modules/contrib/group_content_menu/src/Controller/GroupContentMenuController.php
modules/contrib/group_content_menu/src/Entity/GroupContentMenu.php
modules/contrib/group_content_menu/src/Entity/GroupContentMenuType.php
modules/contrib/group_content_menu/src/Form/GroupContentMenuDeleteForm.php
modules/contrib/group_content_menu/src/Form/GroupContentMenuForm.php
modules/contrib/group_content_menu/src/Form/GroupContentMenuTypeForm.php
modules/contrib/group_content_menu/src/GroupContentMenuInterface.php
modules/contrib/group_content_menu/src/GroupContentMenuListBuilder.php
modules/contrib/group_content_menu/src/GroupContentMenuParentFormSelector.php
modules/contrib/group_content_menu/src/GroupContentMenuServiceProvider.php
modules/contrib/group_content_menu/src/GroupContentMenuTypeListBuilder.php
modules/contrib/group_content_menu/src/NodeFormAlter.php
modules/contrib/group_content_menu/src/Plugin/Block/GroupMenuBlock.php
modules/contrib/group_content_menu/src/Plugin/Derivative/GroupMenuBlock.php
modules/contrib/group_content_menu/src/Plugin/GroupContentEnabler/GroupContentMenu.php
modules/contrib/group_content_menu/src/Plugin/GroupContentEnabler/GroupContentMenuDeriver.php
modules/contrib/group_content_menu/src/Plugin/GroupContentMenuPermissionProvider.php
modules/contrib/group_content_menu/src/Routing/GroupContentMenuRouteProvider.php
modules/contrib/group_content_menu/tests/src/Functional/GroupContentMenuTest.php

13 files with changes
=====================

1) modules/contrib/group_content_menu/tests/src/Functional/GroupContentMenuTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\group_content_menu\Functional;

+use Drupal\Tests\WebAssert;
+use Behat\Mink\Element\DocumentElement;
 use Drupal\Core\Url;
 use Drupal\group\Entity\GroupType;
 use Drupal\Tests\group\Functional\GroupBrowserTestBase;
@@ @@
    * Test creation of a group content menu with group nodes.
    */
   public function testNodeGroupContentMenu() {
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
-    /** @var \Behat\Mink\Element\DocumentElement $page */
+    /** @var DocumentElement $page */
     $page = $this->getSession()->getPage();

     // Create a group.
@@ @@
    * Test creation of a group content menu.
    */
   public function testCreateGroupContentMenu() {
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
-    /** @var \Behat\Mink\Element\DocumentElement $page */
+    /** @var DocumentElement $page */
     $page = $this->getSession()->getPage();

     // Generate a group content menu type.
@@ @@
    * Test adding the group content menu item manually.
    */
   public function testAddMenuManually() {
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
-    /** @var \Behat\Mink\Element\DocumentElement $page */
+    /** @var DocumentElement $page */
     $page = $this->getSession()->getPage();

     // Generate a group content menu type.
@@ @@
    * Test creation of a group content menu with multiple menu types available.
    */
   public function testMultipleMenus() {
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
-    /** @var \Behat\Mink\Element\DocumentElement $page */
+    /** @var DocumentElement $page */
     $page = $this->getSession()->getPage();

     // Generate Group Menu One content menu type.
@@ @@
    * Test Expand All Menu Items option.
    */
   public function testExpandAllItems() {
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
-    /** @var \Behat\Mink\Element\DocumentElement $page */
+    /** @var DocumentElement $page */
     $page = $this->getSession()->getPage();

     // Generate a group content menu type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/group_content_menu/src/Routing/GroupContentMenuRouteProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu\Routing;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider;
 use Drupal\group_content_menu\Controller\GroupContentMenuController;
@@ @@
   /**
    * Gets the add-menu-link route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddMenuLink(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the edit-menu-link route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEditMenuLink(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
     if ($entity_type->hasLinkTemplate('collection') && $entity_type->hasListBuilderClass()) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $entity_type->getCollectionLabel();
       $route = new Route($entity_type->getLinkTemplate('collection'));
       return $route
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/group_content_menu/src/Plugin/GroupContentEnabler/GroupContentMenu.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu\Plugin\GroupContentEnabler;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\group\Entity\GroupInterface;
@@ @@
   /**
    * Retrieves the menu type this plugin supports.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The menu type this plugin supports.
    */
   protected function getMenuType() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/group_content_menu/src/Plugin/Derivative/GroupMenuBlock.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The menu storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $menuStorage;

@@ @@
   /**
    * Constructs new SystemMenuBlock.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $menu_storage
+   * @param EntityStorageInterface $menu_storage
    *   The menu storage.
    */
   public function __construct(EntityStorageInterface $menu_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/group_content_menu/src/Plugin/Block/GroupMenuBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu\Plugin\Block;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\group\Entity\Storage\GroupContentStorage;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   /**
    * The active menu trail service.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrailInterface
+   * @var MenuActiveTrailInterface
    */
   protected $menuActiveTrail;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree
+   * @param MenuLinkTreeInterface $menu_tree
    *   The menu tree service.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The active menu trail service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, MenuLinkTreeInterface $menu_tree, MenuActiveTrailInterface $menu_active_trail, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Gets the menu instance for the current group.
    *
-   * @return \Drupal\group_content_menu\GroupContentMenuInterface|null
+   * @return GroupContentMenuInterface|null
    *   The instance of the menu or null if no instance is found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function getMenuInstance() {
     $entity = $this->getContext('group')->getContextData()->getValue();
@@ @@
       return NULL;
     }

-    /** @var \Drupal\group\Entity\Storage\GroupContentStorage $groupStorage */
+    /** @var GroupContentStorage $groupStorage */
     $groupStorage = $this->entityTypeManager->getStorage('group_content');
     $contentPluginId = $groupStorage->loadByContentPluginId($this->getPluginId());

@@ @@
    * @return string
    *   The name of the menu.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function getMenuName() {
     if (isset($this->menuName)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/group_content_menu/src/NodeFormAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\node\NodeTypeInterface;
+use Drupal\group\Entity\GroupInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The `entity_type.manager` service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The `menu.parent_form_selector` service.
    *
-   * @var \Drupal\Core\Menu\MenuParentFormSelectorInterface
+   * @var MenuParentFormSelectorInterface
    */
   protected $menuParentSelector;

@@ @@
   /**
    * The `current_user` service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The `context.repository` service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Construct our class and inject dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The `entity_type.manager` service.
-   * @param \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_form_selector
+   * @param MenuParentFormSelectorInterface $menu_parent_form_selector
    *   The `menu.parent_form_selector` service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The `current_user` service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The `context.repository` service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MenuParentFormSelectorInterface $menu_parent_form_selector, AccountProxyInterface $current_user, ContextRepositoryInterface $context_repository) {
@@ @@
    *
    * @param array $form
    *   A form array as from hook_form_alter().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A form state object as from hook_form_alter().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see group_content_menu_form_node_form_alter()
    */
   public function alter(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $form_state->getFormObject()->getEntity();
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = $this->entityTypeManager
       ->getStorage('node_type')
       ->load($node->bundle());
@@ @@
   /**
    * Get a node's groups for the edit form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object from hook_form_node_form_alter().
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node object being edited.
    *
-   * @return array|\Drupal\group\Entity\GroupInterface[]
+   * @return array|GroupInterface[]
    *   An empty array or an array of Groups.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getGroups(FormStateInterface $form_state, NodeInterface $node): array {
     $groups = [];
@@ @@
   /**
    * Get an array of GroupContentMenus.
    *
-   * @param \Drupal\group\Entity\GroupInterface[] $groups
+   * @param GroupInterface[] $groups
    *   An array of groups to get menus for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/group_content_menu/src/GroupContentMenuParentFormSelector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu;

+use Drupal\system\MenuInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Menu\MenuParentFormSelector;

@@ @@

     $menus = $this->entityTypeManager->getStorage($entity_type)->loadMultiple($menu_names);
     $options = [];
-    /** @var \Drupal\system\MenuInterface[] $menus */
+    /** @var MenuInterface[] $menus */
     foreach ($menus as $menu) {
       if ($this->isGroupMenu) {
         if ($route_group = \Drupal::routeMatch()->getParameter('group')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/group_content_menu/src/GroupContentMenuListBuilder.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new GroupContentMenuListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    */
   protected function getDefaultOperations(EntityInterface $entity) {
     $operations = parent::getDefaultOperations($entity);
-    /** @var \Drupal\group\Entity\GroupContentInterface[] $group_contents */
+    /** @var GroupContentInterface[] $group_contents */
     $group_contents = \Drupal::entityTypeManager()->getStorage('group_content')->loadByEntity($entity);
     if ($group_content = reset($group_contents)) {
       $entity_type_id = $entity->getEntityTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/group_content_menu/src/Form/GroupContentMenuForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu\Form;

+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\Core\Menu\MenuLinkTreeInterface;
+use Drupal\Core\Utility\LinkGeneratorInterface;
+use Drupal\group_content_menu\Entity\GroupContentMenu;
+use Drupal\group\Entity\GroupContentInterface;
+use Drupal\Core\Menu\MenuLinkInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\ContentEntityForm;
@@ @@
   /**
    * The menu link manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;

@@ @@
   /**
    * The menu tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;

@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\group_content_menu\Entity\GroupContentMenu
+   * @var GroupContentMenu
    */
   protected $entity;

@@ @@
     }
     $group = $form_state->get('group');
     if (!$group) {
-      /** @var \Drupal\group\Entity\GroupContentInterface[] $group_contents */
+      /** @var GroupContentInterface[] $group_contents */
       $group_contents = $this->entityTypeManager->getStorage('group_content')->loadByEntity($this->entity);
       // If no related group content, nothing to do. Bail early.
       if (!$group_contents) {
@@ @@
         continue;
       }

-      /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
+      /** @var MenuLinkInterface $link */
       $link = $element->link;
       if ($link) {
         $id = 'menu_plugin_id:' . $link->getPluginId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/group_content_menu/src/Entity/GroupContentMenu.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu\Entity;

+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\group\Entity\GroupContentInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
    * {@inheritdoc}
    */
   public static function preDelete(EntityStorageInterface $storage, array $entities) {
-    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+    /** @var MenuLinkManagerInterface $menu_link_manager */
     $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       $menu_link_manager->deleteLinksInMenu(GroupContentMenuInterface::MENU_PREFIX . $entity->id());

@@ @@
     // Remove any group contents related to this menu before removing the menu.
     if ($entity instanceof ContentEntityInterface) {
       if ($group_contents = GroupContent::loadByEntity($entity)) {
-        /** @var \Drupal\group\Entity\GroupContent $group_content */
+        /** @var GroupContent $group_content */
         foreach ($group_contents as $group_content) {
           $group_content->delete();
         }
@@ @@
    */
   protected function urlRouteParameters($rel) {
     $uri_route_parameters = parent::urlRouteParameters($rel);
-    /** @var \Drupal\group\Entity\GroupContentInterface[] $group_contents */
+    /** @var GroupContentInterface[] $group_contents */
     $group_contents = \Drupal::entityTypeManager()->getStorage('group_content')->loadByEntity($this);
     if ($group_content = reset($group_contents)) {
       // The group is needed as a route parameter.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/group_content_menu/src/Controller/GroupContentMenuController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu\Controller;

+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\group\Entity\GroupContentTypeInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\group\Entity\Controller\GroupContentController;
@@ @@
   /**
    * The group content plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * Handle one menu per group limitation.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group.
    * @param string $plugin_id
    *   The group content plugin ID.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|bool
+   * @return RedirectResponse|bool
    *   The redirect response or FALSE if no need to handle..
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function handleOneMenuLimitation(GroupInterface $group, $plugin_id) {
     if ($group_contents = $this->entityTypeManager->getStorage('group_content')->loadByGroup($group, $plugin_id)) {
@@ @@
     $storage = $this->entityTypeManager->getStorage('group_content_type');
     $properties = ['group_type' => $group->bundle(), 'content_plugin' => $plugin_ids];
     foreach ($storage->loadByProperties($properties) as $bundle => $group_content_type) {
-      /** @var \Drupal\group\Entity\GroupContentTypeInterface $group_content_type */
+      /** @var GroupContentTypeInterface $group_content_type */
       $bundles[$group_content_type->getContentPluginId()] = $bundle;
     }

@@ @@
   /**
    * Provides the menu link creation form.
    *
-   * @param \Drupal\group_content_menu\GroupContentMenuInterface $group_content_menu
+   * @param GroupContentMenuInterface $group_content_menu
    *   An entity representing a custom menu.
    *
    * @return array
@@ @@
   /**
    * Provides the menu link edit form.
    *
-   * @param \Drupal\menu_link_content\MenuLinkContentInterface $menu_link_content
+   * @param MenuLinkContentInterface $menu_link_content
    *   The menu link content.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/group_content_menu/src/Access/GroupOwnsMenuContentAccessChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_content_menu\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * GroupOwnsMenuContentAccessChecker constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to check access for.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
     $must_own_content = $route->getRequirement('_group_menu_owns_content') === 'TRUE';
@@ @@
       return AccessResult::neutral();
     }

-    /** @var \Drupal\group\Entity\GroupContentInterface[] $group_contents */
+    /** @var GroupContentInterface[] $group_contents */
     $group_contents = $this->entityTypeManager->getStorage('group_content')->loadByEntity($parameters->get('group_content_menu'));
     $group_content = reset($group_contents);
     if (!$group_content) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/group_content_menu/group_content_menu.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\Entity\GroupContentInterface;
+use Drupal\group\Plugin\GroupContentEnablerInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
+use Drupal\node\NodeTypeInterface;
 /**
  * @file
  * Provides a group content menu entity type.
@@ @@
 /**
  * Get group content menus per group.
  *
- * @param \Drupal\group\Entity\GroupInterface $group
+ * @param GroupInterface $group
  *   The group.
  *
- * @return \Drupal\group\Entity\GroupContentInterface[]
+ * @return GroupContentInterface[]
  *   The related group contents.
  */
 function group_content_menu_get_menus_per_group(GroupInterface $group) {
@@ @@
 /**
  * Get group content menu plugins per group.
  *
- * @param \Drupal\group\Entity\GroupInterface $group
+ * @param GroupInterface $group
  *   The group.
  *
- * @return \Drupal\group\Plugin\GroupContentEnablerInterface[]
+ * @return GroupContentEnablerInterface[]
  *   The group menu plugins.
  */
 function group_content_menu_get_plugins_per_group(GroupInterface $group) {
   $group_type = GroupType::load($group->bundle());
-  /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $plugin_manager */
+  /** @var GroupContentEnablerManagerInterface $plugin_manager */
   $plugin_manager = \Drupal::service('plugin.manager.group_content_enabler');
   $installed = $plugin_manager->getInstalled($group_type);
   return array_filter($installed->getIterator()->getArrayCopy(), static function ($plugin_id) {
@@ @@
 /**
  * Returns the definition for a menu link for the given node.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node entity.
  * @param array $menu_names
  *   The menu names.
@@ @@
  *   An array that contains default values for the menu link form.
  */
 function group_content_menu_get_menu_link_default(NodeInterface $node, array $menu_names) {
-  /** @var \Drupal\node\NodeTypeInterface $node_type */
+  /** @var NodeTypeInterface $node_type */
   $node_type = $node->type->entity;
   $menu_name = strtok($node_type->getThirdPartySetting('menu_ui', 'parent', 'main:'), ':');
   $defaults = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

