diff --git a/message_integration.module b/message_integration.module
index af4e74a..87f3b99 100644
--- a/message_integration.module
+++ b/message_integration.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Holds hook implementation for the Custom Message Integration module.
@@ -114,7 +115,7 @@ function message_integration_node_presave(Node $node) {
 /**
  * Implements hook_node_update()
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function message_integration_node_update(Node $node) {
   // See if this handling should be skipped.
@@ -223,10 +224,10 @@ function message_integration_node_update(Node $node) {
  *
  * TODO Figure out if this is needed
  *
- * @param \Drupal\Core\Entity\ContentEntityBase $entity
+ * @param ContentEntityBase $entity
  *   The entity objects.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function _message_integration_update_message_status(ContentEntityBase $entity) {
 
diff --git a/message_integration.tokens.inc b/message_integration.tokens.inc
index f18828b..ab1e2e0 100644
--- a/message_integration.tokens.inc
+++ b/message_integration.tokens.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\message\Entity\Message;
 /**
  * @file
  * Message tokens to render view modes.
@@ -49,13 +51,13 @@ function message_integration_token_info() {
 /**
  * Implements hook_tokens().
  *
- * @throws \Drupal\Core\Entity\EntityMalformedException
+ * @throws EntityMalformedException
  */
 function message_integration_tokens($type, $tokens, array $data = [], array $options = []): array {
   $replacements = [];
 
   if ($type == 'message' && !empty($data['message'])) {
-    /** @var \Drupal\message\Entity\Message $message */
+    /** @var Message $message */
     $message = $data['message'];
     $comment = NULL;
     $node = NULL;
@@ -123,7 +125,7 @@ function message_integration_tokens($type, $tokens, array $data = [], array $opt
 /**
  * Helper to show diff between two nodes.
  *
- * @param \Drupal\node\Entity\Node $node
+ * @param Node $node
  *   The latest node.
  * @param int $original_vid
  *   The previous vid.
@@ -137,7 +139,7 @@ function message_integration_tokens($type, $tokens, array $data = [], array $opt
  *
  * @return array|null A render array of the diff between the nodes.
  *   A render array of the diff between the nodes.
- * @throws \Drupal\Core\Entity\EntityMalformedException
+ * @throws EntityMalformedException
  */
 function message_integration_tokens_node_diff(Node $node, int $original_vid, int $new_vid, string $filter): ?array {
 
diff --git a/modules/message_integration_example_user_field/src/EventSubscriber/GetMessageIntegrationInfoSubscriber.php b/modules/message_integration_example_user_field/src/EventSubscriber/GetMessageIntegrationInfoSubscriber.php
index 728b959..4546b2f 100644
--- a/modules/message_integration_example_user_field/src/EventSubscriber/GetMessageIntegrationInfoSubscriber.php
+++ b/modules/message_integration_example_user_field/src/EventSubscriber/GetMessageIntegrationInfoSubscriber.php
@@ -16,14 +16,14 @@ class GetMessageIntegrationInfoSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * Constructs a UserApprovalForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -43,7 +43,7 @@ class GetMessageIntegrationInfoSubscriber implements EventSubscriberInterface {
   /**
    * Subscribe to the user login event dispatched.
    *
-   * @param \Drupal\message_integration\Event\GetMessageIntegrationInfo $event
+   * @param GetMessageIntegrationInfo $event
    *   Dat event object yo.
    */
   public function onNodeSave(GetMessageIntegrationInfo $event) {
diff --git a/src/Event/GetMessageIntegrationInfo.php b/src/Event/GetMessageIntegrationInfo.php
index 8e09d86..7fa9ffe 100644
--- a/src/Event/GetMessageIntegrationInfo.php
+++ b/src/Event/GetMessageIntegrationInfo.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\message_integration\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\node\Entity\Node;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when a user logs in.
@@ -15,14 +15,14 @@ class GetMessageIntegrationInfo extends Event {
   /**
    * The user account.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   public Node $node;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node object.
    */
   public function __construct(Node $node) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 93781d0..15976db 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -17,32 +17,32 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $entityTypeBundleInfo;
 
   /**
    * Constructs a new MessageIntegrationForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration Interface.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    */
   public function __construct(ConfigFactoryInterface $config, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
     $this->configManager = $config;
