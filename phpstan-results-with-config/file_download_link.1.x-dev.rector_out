modules/contrib/file_download_link/modules/file_downoad_link_media/src/Plugin/Field/FieldFormatter/FileDownloadLinkMedia.php
modules/contrib/file_download_link/src/Plugin/Field/FieldFormatter/FileDownloadLink.php
modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaApplicableTest.php
modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaTest.php
modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaTestTrait.php
modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaTokenTest.php
modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkTest.php
modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkTestTrait.php
modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkTokenTest.php

9 files with changes
====================

1) modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkTokenTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['system', 'field']);
     $this->installSchema('file', ['file_usage']);
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'The extension is txt',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'The image width is 88',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'The extension is png',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Testing tokens in title',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Testing tokens in classes',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_delta_0 = [
       '#type' => 'link',
       '#title' => 'This alt text is for the first image.',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_delta_1 = [
       '#type' => 'link',
       '#title' => "When delta is 1 we should see this alt text. Let's add special chars & test them!",
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'file.txt',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Download this, 99',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Download',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkTestTrait.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * A test entity.
    *
-   * @var Drupal\node\Entity\Node
+   * @var Node
    */
   public $entity;

@@ @@
   /**
    * Helper function to create entity that can be used for testing.
    *
-   * @return Drupal\node\Entity\Node
+   * @return Node
    *   An entity to be used for testing.
    */
   protected function createTestEntity() {
@@ @@
     ]);
     $instance->save();

-    $image_path = drupal_get_path('theme', 'stable') . '/images/core/druplicon.png';
+    $image_path = \Drupal::service('extension.list.theme')->getPath('stable') . '/images/core/druplicon.png';
     file_put_contents('public://file.png', file_get_contents($image_path));
     $file_image = File::create([
       'uri' => 'public://file.png',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['system', 'field']);
     $this->installSchema('file', ['file_usage']);
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Download',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'file.txt',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'Download',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_render = [
       '#type' => 'link',
       '#title' => 'file.png',
-      '#url' => Url::fromUri(file_create_url('public://file.png')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.png'),
       '#options' => [
         'attributes' => [
           'class' => [
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaTokenTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['system', 'field']);
     $this->installSchema('file', ['file_usage']);
@@ @@
     $expected_deep_render = [
       '#type' => 'link',
       '#title' => 'Test Media (txt)',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_deep_render = [
       '#type' => 'link',
       '#title' => 'Download Media Now!',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_deep_render = [
       '#type' => 'link',
       '#title' => 'Download Media Now!',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaTestTrait.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * A test node.
    *
-   * @var Drupal\node\Entity\Node
+   * @var Node
    */
   public $node;

@@ @@
   /**
    * A test media.
    *
-   * @var Drupal\media\Entity\Media
+   * @var Media
    */
   public $media;

@@ @@
   /**
    * Helper function to create media that can be used for testing.
    *
-   * @return Drupal\media\Entity\Media
+   * @return Media
    *   A media to be used for testing.
    */
   protected function createTestMedia() {
@@ @@
   /**
    * Helper function to create node that can be used for testing.
    *
-   * @return Drupal\node\Entity\Node
+   * @return Node
    *   An node to be used for testing.
    */
   protected function createTestNode() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['system', 'field']);
     $this->installSchema('file', ['file_usage']);
@@ @@
     $expected_deep_render = [
       '#type' => 'link',
       '#title' => 'Download',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
@@ @@
     $expected_deep_render = [
       '#type' => 'link',
       '#title' => 'file.txt',
-      '#url' => Url::fromUri(file_create_url('public://file.txt')),
+      '#url' => \Drupal::service('file_url_generator')->generate('public://file.txt'),
       '#options' => [
         'attributes' => [
           'class' => [
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/file_download_link/tests/src/Kernel/FileDownloadLinkMediaApplicableTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * A test node.
    *
-   * @var Drupal\node\Entity\Node
+   * @var Node
    */
   public $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['system', 'field']);
     $this->installSchema('user', ['users_data']);
@@ @@
    * This node has several media fields to test with, though no media
    * items are actually created.
    *
-   * @return Drupal\node\Entity\Node
+   * @return Node
    *   An node to be used for testing.
    */
   protected function createTestNode() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/file_download_link/src/Plugin/Field/FieldFormatter/FileDownloadLink.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   Module handler service.
    * @param \Drupal\token\TokenEntityMapper|null $token_entity_mapper
    *   Token entity mapper if token module is installed. Otherwise NULL.
@@ @@
       $elements[$delta] = [
         '#type' => 'link',
         '#title' => $this->getSetting('link_text'),
-        '#url' => Url::fromUri(file_create_url($file->getFileUri())),
+        '#url' => \Drupal::service('file_url_generator')->generate($file->getFileUri()),
         '#options' => $options,
         '#cache' => [
           'tags' => $file->getCacheTags(),
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/file_download_link/modules/file_downoad_link_media/src/Plugin/Field/FieldFormatter/FileDownloadLinkMedia.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   Module handler service.
    * @param \Drupal\token\TokenEntityMapper|null $token_entity_mapper
    *   Token entity mapper if token module is installed. Otherwise NULL.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

