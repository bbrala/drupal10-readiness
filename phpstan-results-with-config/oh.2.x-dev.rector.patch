diff --git a/modules/oh_regular/src/Access/IsOhBundleAccessCheck.php b/modules/oh_regular/src/Access/IsOhBundleAccessCheck.php
index 0b52026..c54defe 100644
--- a/modules/oh_regular/src/Access/IsOhBundleAccessCheck.php
+++ b/modules/oh_regular/src/Access/IsOhBundleAccessCheck.php
@@ -19,14 +19,14 @@ class IsOhBundleAccessCheck implements AccessInterface {
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;
 
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
@@ -36,14 +36,14 @@ class IsOhBundleAccessCheck implements AccessInterface {
   /**
    * Checks access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The currently logged in account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The current route.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $currentUser, RouteMatchInterface $routeMatch): AccessResultInterface {
diff --git a/modules/oh_regular/src/Entity/Form/OhRegularMapDeleteForm.php b/modules/oh_regular/src/Entity/Form/OhRegularMapDeleteForm.php
index 8fb8b54..dbbd541 100644
--- a/modules/oh_regular/src/Entity/Form/OhRegularMapDeleteForm.php
+++ b/modules/oh_regular/src/Entity/Form/OhRegularMapDeleteForm.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\oh_regular\Entity\Form;
 
+use Drupal\oh_regular\OhRegularMapInterface;
 use Drupal\Core\Entity\EntityDeleteForm;
 
 /**
  * Delete form for Oh Map entities.
  *
- * @method \Drupal\oh_regular\OhRegularMapInterface getEntity()
+ * @method OhRegularMapInterface getEntity()
  */
 class OhRegularMapDeleteForm extends EntityDeleteForm {
 
diff --git a/modules/oh_regular/src/Entity/Form/OhRegularMapForm.php b/modules/oh_regular/src/Entity/Form/OhRegularMapForm.php
index 27a18f2..248d6e4 100644
--- a/modules/oh_regular/src/Entity/Form/OhRegularMapForm.php
+++ b/modules/oh_regular/src/Entity/Form/OhRegularMapForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oh_regular\Entity\Form;
 
+use Drupal\oh_regular\OhRegularMapInterface;
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -13,57 +15,57 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Add/edit form for Oh Map entities.
  *
- * @method \Drupal\oh_regular\OhRegularMapInterface getEntity()
+ * @method OhRegularMapInterface getEntity()
  */
 class OhRegularMapForm extends EntityForm {
 
   /**
    * The entity type repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeRepositoryInterface
+   * @var EntityTypeRepositoryInterface
    */
   protected $entityTypeRepository;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Field config storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fieldConfigStorage;
 
   /**
    * Regular map storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $regularMapStorage;
 
   /**
    * Create new OhRegularMapForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entityTypeRepository
+   * @param EntityTypeRepositoryInterface $entityTypeRepository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $fieldConfigStorage
+   * @param EntityStorageInterface $fieldConfigStorage
    *   Field config storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $regularMapStorage
+   * @param EntityStorageInterface $regularMapStorage
    *   Regular map storage.
    */
   public function __construct(EntityTypeRepositoryInterface $entityTypeRepository, EntityTypeBundleInfoInterface $entityTypeBundleInfo, EntityFieldManagerInterface $entityFieldManager, EntityStorageInterface $fieldConfigStorage, EntityStorageInterface $regularMapStorage) {
@@ -136,7 +138,7 @@ class OhRegularMapForm extends EntityForm {
         array_map(
           function (string $fieldName) {
             $fieldConfigId = sprintf('%s.%s.%s', $this->getEntity()->getMapEntityType(), $this->getEntity()->getMapBundle(), $fieldName);
-            /** @var \Drupal\field\FieldConfigInterface $fieldConfig */
+            /** @var FieldConfigInterface $fieldConfig */
             $fieldConfig = $this->fieldConfigStorage->load($fieldConfigId);
             $row['field_name']['data'] = [
               '#plain_text' => $fieldConfig->label(),
diff --git a/modules/oh_regular/src/OhRegular.php b/modules/oh_regular/src/OhRegular.php
index 006d44b..d7fdc42 100644
--- a/modules/oh_regular/src/OhRegular.php
+++ b/modules/oh_regular/src/OhRegular.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oh_regular;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\Cache;
@@ -25,23 +26,23 @@ class OhRegular implements OhRegularInterface {
   /**
    * Regular map storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $regularMapStorage;
 
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, CacheBackendInterface $cache) {
@@ -65,7 +66,7 @@ class OhRegular implements OhRegularInterface {
   public function getAllMapping(): array {
     $mapping = $this->cache->get(static::REGULAR_MAPPING_CID);
     if (FALSE === $mapping) {
-      /** @var \Drupal\oh_regular\OhRegularMapInterface[] $maps */
+      /** @var OhRegularMapInterface[] $maps */
       $maps = $this->regularMapStorage->loadMultiple();
       $mapping = [];
       foreach ($maps as $map) {
diff --git a/modules/oh_regular/src/OhRegularInterface.php b/modules/oh_regular/src/OhRegularInterface.php
index 4b1545e..f34e98d 100644
--- a/modules/oh_regular/src/OhRegularInterface.php
+++ b/modules/oh_regular/src/OhRegularInterface.php
@@ -13,10 +13,10 @@ interface OhRegularInterface {
   /**
    * Determines whether an entity uses opening hours.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether the entity uses opening hours.
    */
   public function hasOpeningHours(EntityInterface $entity): AccessResultInterface;
diff --git a/modules/oh_regular/src/OhRegularMapListBuilder.php b/modules/oh_regular/src/OhRegularMapListBuilder.php
index f61118f..1f47921 100644
--- a/modules/oh_regular/src/OhRegularMapListBuilder.php
+++ b/modules/oh_regular/src/OhRegularMapListBuilder.php
@@ -22,7 +22,7 @@ class OhRegularMapListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\oh_regular\OhRegularMapInterface $entity */
+    /** @var OhRegularMapInterface $entity */
     $row['type'] = $entity->toLink(NULL, 'edit-form');
     return $row + parent::buildRow($entity);
   }
diff --git a/modules/oh_regular/src/OhRegularSubscriber.php b/modules/oh_regular/src/OhRegularSubscriber.php
index 7dff9eb..8d10be7 100644
--- a/modules/oh_regular/src/OhRegularSubscriber.php
+++ b/modules/oh_regular/src/OhRegularSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oh_regular;
 
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\oh\Event\OhEvents;
 use Drupal\oh\Event\OhRegularEvent;
 use Drupal\oh\OhOccurrence;
@@ -15,14 +16,14 @@ class OhRegularSubscriber implements EventSubscriberInterface {
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;
 
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
@@ -32,7 +33,7 @@ class OhRegularSubscriber implements EventSubscriberInterface {
   /**
    * Generates regular hours from field mapping.
    *
-   * @param \Drupal\oh\Event\OhRegularEvent $event
+   * @param OhRegularEvent $event
    *   Regular hours event.
    */
   public function regularHoursField(OhRegularEvent $event): void {
@@ -45,7 +46,7 @@ class OhRegularSubscriber implements EventSubscriberInterface {
 
     foreach ($mapping as $fieldName) {
       foreach ($entity->{$fieldName} as $item) {
-        /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item */
+        /** @var DateRecurItem $item */
         if ($item->isEmpty()) {
           continue;
         }
diff --git a/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php b/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php
index 2b88e4f..81caada 100644
--- a/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php
+++ b/modules/oh_regular/tests/src/Kernel/OhRegularHoursTest.php
@@ -38,7 +38,7 @@ class OhRegularHoursTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $fieldName = 'testfield';
     $fieldStorage = FieldStorageConfig::create([
@@ -53,7 +53,7 @@ class OhRegularHoursTest extends KernelTestBase {
     ]);
     $fieldInstance->save();
 
-    /** @var \Drupal\oh_regular\Entity\OhRegularMap $map */
+    /** @var OhRegularMap $map */
     $map = OhRegularMap::create([
       'entity_type' => 'entity_test',
       'bundle' => 'entity_test',
@@ -95,7 +95,7 @@ class OhRegularHoursTest extends KernelTestBase {
   /**
    * Opening hours service.
    *
-   * @return \Drupal\oh\OhOpeningHoursInterface
+   * @return OhOpeningHoursInterface
    *   The opening hours service.
    */
   protected function openingHoursService(): OhOpeningHoursInterface {
diff --git a/modules/oh_review/oh_review.module b/modules/oh_review/oh_review.module
index aac5a06..26f3c6e 100644
--- a/modules/oh_review/oh_review.module
+++ b/modules/oh_review/oh_review.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\oh\OhDateRange;
 /**
  * @file
  * Hooks for OH Review module.
@@ -54,9 +55,9 @@ function template_preprocess_oh_review_occurrences_list(array &$variables): void
     return $end >= $startPlusFullDay;
   };
 
-  /** @var \Drupal\oh\OhOccurrence[] $occurrences */
+  /** @var OhOccurrence[] $occurrences */
   $occurrences = $variables['occurrences'];
-  /** @var \Drupal\oh\OhDateRange $range */
+  /** @var OhDateRange $range */
   $range = $variables['range'];
 
   uasort($occurrences, [OhOccurrence::class, 'sort']);
@@ -153,10 +154,10 @@ function template_preprocess_oh_review_occurrences_list(array &$variables): void
 function template_preprocess_oh_review_report_list(array &$variables): void {
   $variables['#attached']['library'][] = 'oh_review/report_list';
 
-  /** @var \Drupal\oh\OhOccurrence[] $occurrences */
+  /** @var OhOccurrence[] $occurrences */
   $occurrences = $variables['occurrences'];
 
-  /** @var \Drupal\oh\OhDateRange $range */
+  /** @var OhDateRange $range */
   $range = $variables['range'];
 
   $dayFormat = 'Y-m-d';
diff --git a/modules/oh_review/src/Controller/OhReviewReport.php b/modules/oh_review/src/Controller/OhReviewReport.php
index 92b63ee..b099953 100644
--- a/modules/oh_review/src/Controller/OhReviewReport.php
+++ b/modules/oh_review/src/Controller/OhReviewReport.php
@@ -27,32 +27,32 @@ class OhReviewReport extends ControllerBase {
   /**
    * The opening hours service.
    *
-   * @var \Drupal\oh\OhOpeningHoursInterface
+   * @var OhOpeningHoursInterface
    */
   protected $openingHours;
 
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;
 
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Construct a new OhReviewReport.
    *
-   * @param \Drupal\oh\OhOpeningHoursInterface $openingHours
+   * @param OhOpeningHoursInterface $openingHours
    *   Opening hours service.
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer.
    */
   public function __construct(OhOpeningHoursInterface $openingHours, OhRegularInterface $ohRegular, RendererInterface $renderer) {
@@ -171,7 +171,7 @@ class OhReviewReport extends ControllerBase {
   /**
    * Loads entities progressively.
    *
-   * @return \Generator|\Drupal\Core\Entity\EntityInterface[]
+   * @return \Generator|EntityInterface[]
    *   Generates entities.
    */
   protected function loadEntities() {
diff --git a/modules/oh_review/src/Form/OhReviewSidebarForm.php b/modules/oh_review/src/Form/OhReviewSidebarForm.php
index ab3077d..ac7cb45 100644
--- a/modules/oh_review/src/Form/OhReviewSidebarForm.php
+++ b/modules/oh_review/src/Form/OhReviewSidebarForm.php
@@ -39,23 +39,23 @@ class OhReviewSidebarForm extends FormBase {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The opening hours service.
    *
-   * @var \Drupal\oh\OhOpeningHoursInterface
+   * @var OhOpeningHoursInterface
    */
   protected $openingHours;
 
   /**
    * Constructs a new OhReviewController.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\oh\OhOpeningHoursInterface $openingHours
+   * @param OhOpeningHoursInterface $openingHours
    *   Opening hours service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, OhOpeningHoursInterface $openingHours) {
@@ -159,7 +159,7 @@ class OhReviewSidebarForm extends FormBase {
   /**
    * Generate the opening hours preview.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get opening hours.
    * @param string $mode
    *   The preview mode. See static::PREVIEW_MODE* constants.
diff --git a/modules/oh_review/src/OhReviewUtility.php b/modules/oh_review/src/OhReviewUtility.php
index c51ba85..f42a47a 100644
--- a/modules/oh_review/src/OhReviewUtility.php
+++ b/modules/oh_review/src/OhReviewUtility.php
@@ -13,7 +13,7 @@ class OhReviewUtility {
   /**
    * Groups occurrences into days and weeks.
    *
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   The full occurrence range.
    * @param array $occurrences
    *   An array of occurrences.
diff --git a/modules/oh_review/src/Plugin/Derivative/OhReviewContextualLinks.php b/modules/oh_review/src/Plugin/Derivative/OhReviewContextualLinks.php
index 08fd0ce..952f3ad 100644
--- a/modules/oh_review/src/Plugin/Derivative/OhReviewContextualLinks.php
+++ b/modules/oh_review/src/Plugin/Derivative/OhReviewContextualLinks.php
@@ -15,14 +15,14 @@ class OhReviewContextualLinks extends DeriverBase implements ContainerDeriverInt
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;
 
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
diff --git a/modules/oh_review/src/Routing/OhReviewRouteSubscriber.php b/modules/oh_review/src/Routing/OhReviewRouteSubscriber.php
index 6fba00a..37d215c 100644
--- a/modules/oh_review/src/Routing/OhReviewRouteSubscriber.php
+++ b/modules/oh_review/src/Routing/OhReviewRouteSubscriber.php
@@ -16,14 +16,14 @@ class OhReviewRouteSubscriber extends RouteSubscriberBase {
   /**
    * OH regular service.
    *
-   * @var \Drupal\oh_regular\OhRegularInterface
+   * @var OhRegularInterface
    */
   protected $ohRegular;
 
   /**
    * Construct OhRegularSubscriber service.
    *
-   * @param \Drupal\oh_regular\OhRegularInterface $ohRegular
+   * @param OhRegularInterface $ohRegular
    *   OH regular service.
    */
   public function __construct(OhRegularInterface $ohRegular) {
diff --git a/src/Event/OhExceptionEvent.php b/src/Event/OhExceptionEvent.php
index d18eeed..00557bb 100644
--- a/src/Event/OhExceptionEvent.php
+++ b/src/Event/OhExceptionEvent.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\oh\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
 use Drupal\oh\OhOccurrence;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Used to add exceptions between a date range.
@@ -17,30 +17,30 @@ class OhExceptionEvent extends Event {
   /**
    * The location.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The exceptions for a location.
    *
-   * @var \Drupal\oh\OhOccurrence[]
+   * @var OhOccurrence[]
    */
   protected $exceptions = [];
 
   /**
    * The date range to get exceptions between.
    *
-   * @var \Drupal\oh\OhDateRange
+   * @var OhDateRange
    */
   protected $range;
 
   /**
    * Construct a new OhExceptionEvent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get exceptions between a range of dates.
    */
   public function __construct(EntityInterface $entity, OhDateRange $range) {
@@ -51,7 +51,7 @@ class OhExceptionEvent extends Event {
   /**
    * Get the location.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The location.
    */
   public function getEntity(): EntityInterface {
@@ -61,7 +61,7 @@ class OhExceptionEvent extends Event {
   /**
    * Get the date range to get exceptions between.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   The date range to get exceptions between.
    */
   public function getRange(): OhDateRange {
@@ -71,7 +71,7 @@ class OhExceptionEvent extends Event {
   /**
    * Add an exception for a location.
    *
-   * @param \Drupal\oh\OhOccurrence $occurrence
+   * @param OhOccurrence $occurrence
    *   An exception for a location.
    *
    * @return $this
@@ -90,7 +90,7 @@ class OhExceptionEvent extends Event {
   /**
    * Get the exceptions for a location.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   The exceptions for a location.
    */
   public function getExceptions(): array {
diff --git a/src/Event/OhProcessEvent.php b/src/Event/OhProcessEvent.php
index 433494c..0605ca4 100644
--- a/src/Event/OhProcessEvent.php
+++ b/src/Event/OhProcessEvent.php
@@ -4,9 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\oh\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\oh\OhOccurrence;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Used to process opening hours after they have been computed.
@@ -18,32 +19,32 @@ class OhProcessEvent extends Event {
   /**
    * The location.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The date range of hours.
    *
-   * @var \Drupal\oh\OhDateRange
+   * @var OhDateRange
    */
   protected $range;
 
   /**
    * Occurrences to process.
    *
-   * @var \Drupal\oh\OhOccurrence[]
+   * @var OhOccurrence[]
    */
   protected $occurrences;
 
   /**
    * Construct a new OhProcessEvent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   The date range of hours.
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   An array of occurrences.
    */
   public function __construct(EntityInterface $entity, OhDateRange $range, array $occurrences) {
@@ -55,7 +56,7 @@ class OhProcessEvent extends Event {
   /**
    * Get the location.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The location.
    */
   public function getEntity(): EntityInterface {
@@ -65,7 +66,7 @@ class OhProcessEvent extends Event {
   /**
    * Get the date range of hours.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   The date range of hours.
    */
   public function getRange(): OhDateRange {
@@ -75,7 +76,7 @@ class OhProcessEvent extends Event {
   /**
    * Get occurrences.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   Occurrences to process.
    */
   public function getOccurrences(): array {
@@ -85,7 +86,7 @@ class OhProcessEvent extends Event {
   /**
    * Set occurrences.
    *
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   Occurrences to process.
    */
   public function setOccurrences(array $occurrences): void {
diff --git a/src/Event/OhRegularEvent.php b/src/Event/OhRegularEvent.php
index 31c29b8..51ca779 100644
--- a/src/Event/OhRegularEvent.php
+++ b/src/Event/OhRegularEvent.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\oh\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\oh\OhDateRange;
 use Drupal\oh\OhOccurrence;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Used to add regular hours between a date range.
@@ -17,30 +17,30 @@ class OhRegularEvent extends Event {
   /**
    * The location.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The regular hours for a location.
    *
-   * @var \Drupal\oh\OhOccurrence[]
+   * @var OhOccurrence[]
    */
   protected $regularHours = [];
 
   /**
    * The date range to get regular hours between.
    *
-   * @var \Drupal\oh\OhDateRange
+   * @var OhDateRange
    */
   protected $range;
 
   /**
    * Construct a new OhRegularEvent.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get regular hours between a range of dates.
    */
   public function __construct(EntityInterface $entity, OhDateRange $range) {
@@ -51,7 +51,7 @@ class OhRegularEvent extends Event {
   /**
    * Get the location.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The location.
    */
   public function getEntity(): EntityInterface {
@@ -61,7 +61,7 @@ class OhRegularEvent extends Event {
   /**
    * Get the date range to get regular hours between.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   The date range to get regular hours between.
    */
   public function getRange(): OhDateRange {
@@ -71,7 +71,7 @@ class OhRegularEvent extends Event {
   /**
    * Add regular hours for a location.
    *
-   * @param \Drupal\oh\OhOccurrence $occurrence
+   * @param OhOccurrence $occurrence
    *   Regular hours for a location.
    *
    * @return $this
@@ -90,7 +90,7 @@ class OhRegularEvent extends Event {
   /**
    * Get the regular hours for a location.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   The regular hours for a location.
    */
   public function getRegularHours(): array {
diff --git a/src/EventSubscriber/OhEventSubscriber.php b/src/EventSubscriber/OhEventSubscriber.php
index adb538c..4416746 100644
--- a/src/EventSubscriber/OhEventSubscriber.php
+++ b/src/EventSubscriber/OhEventSubscriber.php
@@ -36,7 +36,7 @@ class OhEventSubscriber implements EventSubscriberInterface {
    * Records full day occurrences, so partial occurrence messages can be
    * removed.
    *
-   * @param \Drupal\oh\Event\OhProcessEvent $event
+   * @param OhProcessEvent $event
    *   Process event.
    */
   public function gatherFullDay(OhProcessEvent $event): void {
@@ -54,7 +54,7 @@ class OhEventSubscriber implements EventSubscriberInterface {
   /**
    * Flattens occurrences.
    *
-   * @param \Drupal\oh\Event\OhProcessEvent $event
+   * @param OhProcessEvent $event
    *   Process event.
    */
   public function flattenOccurrences(OhProcessEvent $event): void {
@@ -68,7 +68,7 @@ class OhEventSubscriber implements EventSubscriberInterface {
    *
    * Removes any messages acquired from partial day.
    *
-   * @param \Drupal\oh\Event\OhProcessEvent $event
+   * @param OhProcessEvent $event
    *   Process event.
    */
   public function reapplyMessages(OhProcessEvent $event): void {
diff --git a/src/OhOccurrence.php b/src/OhOccurrence.php
index df29d6e..3382f37 100644
--- a/src/OhOccurrence.php
+++ b/src/OhOccurrence.php
@@ -149,7 +149,7 @@ class OhOccurrence extends OhDateRange implements RefinableCacheableDependencyIn
   /**
    * Modifies start and end date so they are within a range.
    *
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   A range to modify the range of this occurrence to.
    *
    * @return $this
diff --git a/src/OhOpeningHours.php b/src/OhOpeningHours.php
index c6bccfb..3a1cdfa 100644
--- a/src/OhOpeningHours.php
+++ b/src/OhOpeningHours.php
@@ -22,14 +22,14 @@ class OhOpeningHours implements OhOpeningHoursInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs the opening hours service.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   An event dispatcher instance to use for configuration events.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -42,7 +42,7 @@ class OhOpeningHours implements OhOpeningHoursInterface {
   public function getOccurrences(EntityInterface $entity, OhDateRange $range): array {
     $occurrences = $this->getDimensionalOccurrences($entity, $range);
     $event = new OhProcessEvent($entity, $range, $occurrences);
-    $this->eventDispatcher->dispatch(OhEvents::PROCESS, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::PROCESS);
     return $event->getOccurrences();
   }
 
@@ -82,7 +82,7 @@ class OhOpeningHours implements OhOpeningHoursInterface {
    */
   public function getRegularHours(EntityInterface $entity, OhDateRange $range): array {
     $event = new OhRegularEvent($entity, $range);
-    $this->eventDispatcher->dispatch(OhEvents::REGULAR, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::REGULAR);
     return $event->getRegularHours();
   }
 
@@ -91,7 +91,7 @@ class OhOpeningHours implements OhOpeningHoursInterface {
    */
   public function getExceptions(EntityInterface $entity, OhDateRange $range): array {
     $event = new OhExceptionEvent($entity, $range);
-    $this->eventDispatcher->dispatch(OhEvents::EXCEPTIONS, $event);
+    $this->eventDispatcher->dispatch($event, OhEvents::EXCEPTIONS);
     return $event->getExceptions();
   }
 
diff --git a/src/OhOpeningHoursInterface.php b/src/OhOpeningHoursInterface.php
index 0f6beec..44151a9 100644
--- a/src/OhOpeningHoursInterface.php
+++ b/src/OhOpeningHoursInterface.php
@@ -12,12 +12,12 @@ interface OhOpeningHoursInterface {
   /**
    * Get hours for a location between a range.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get occurrences between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An chronologically ordered array of occurrences, where occurrences
    *   do not overlap/intersect. E.g you may receive occurrences:
    *     For:
@@ -37,12 +37,12 @@ interface OhOpeningHoursInterface {
    * Its recommended to use ::getOccurrences instead as this function flattens
    * opening and closures for easier handling.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get occurrences between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An unordered array of occurrences. Closures time periods will overlap
    *   regular-openings and exception-openings. E.g you may receive occurrences:
    *     For:
@@ -57,12 +57,12 @@ interface OhOpeningHoursInterface {
   /**
    * Get regular hours for a location between a range.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get regular hours between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An unordered array of occurrences.
    */
   public function getRegularHours(EntityInterface $entity, OhDateRange $range): array;
@@ -70,12 +70,12 @@ interface OhOpeningHoursInterface {
   /**
    * Get exceptions for a location between a range.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The location.
-   * @param \Drupal\oh\OhDateRange $range
+   * @param OhDateRange $range
    *   Get exceptions between a range of dates.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An unordered array of occurrences.
    */
   public function getExceptions(EntityInterface $entity, OhDateRange $range): array;
diff --git a/src/OhUtility.php b/src/OhUtility.php
index 0a24796..cde831f 100644
--- a/src/OhUtility.php
+++ b/src/OhUtility.php
@@ -22,10 +22,10 @@ class OhUtility {
    * If occurrences have messages, they will be broken up too. Handle
    * appropriately, such as deduplication, on the front end.
    *
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   An array of occurrences to flatten.
    *
-   * @return \Drupal\oh\OhOccurrence[]
+   * @return OhOccurrence[]
    *   An array of occurrences whose ranges do not overlap.
    */
   public static function flattenOccurrences(array $occurrences) {
diff --git a/tests/modules/oh_test/src/OhTestExceptionSubscriber.php b/tests/modules/oh_test/src/OhTestExceptionSubscriber.php
index dedb7ca..43ebca7 100644
--- a/tests/modules/oh_test/src/OhTestExceptionSubscriber.php
+++ b/tests/modules/oh_test/src/OhTestExceptionSubscriber.php
@@ -32,7 +32,7 @@ class OhTestExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Test exceptions.
    *
-   * @param \Drupal\oh\Event\OhExceptionEvent $event
+   * @param OhExceptionEvent $event
    *   Exception event.
    */
   public function exceptions(OhExceptionEvent $event): void {
diff --git a/tests/modules/oh_test/src/OhTestRegularSubscriber.php b/tests/modules/oh_test/src/OhTestRegularSubscriber.php
index 23f4a6d..d9eb55a 100644
--- a/tests/modules/oh_test/src/OhTestRegularSubscriber.php
+++ b/tests/modules/oh_test/src/OhTestRegularSubscriber.php
@@ -32,7 +32,7 @@ class OhTestRegularSubscriber implements EventSubscriberInterface {
   /**
    * Test regular hours.
    *
-   * @param \Drupal\oh\Event\OhRegularEvent $event
+   * @param OhRegularEvent $event
    *   Regular hours event.
    */
   public function regularHours(OhRegularEvent $event): void {
diff --git a/tests/src/Kernel/OhOpeningHoursServiceTest.php b/tests/src/Kernel/OhOpeningHoursServiceTest.php
index bb175e5..8378bc4 100644
--- a/tests/src/Kernel/OhOpeningHoursServiceTest.php
+++ b/tests/src/Kernel/OhOpeningHoursServiceTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\oh\Kernel;
 
+use Drupal\oh\OhOccurrence;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\oh\OhDateRange;
@@ -158,7 +159,7 @@ class OhOpeningHoursServiceTest extends KernelTestBase {
   /**
    * Opening hours service.
    *
-   * @return \Drupal\oh\OhOpeningHoursInterface
+   * @return OhOpeningHoursInterface
    *   The opening hours service.
    */
   protected function openingHoursService(): OhOpeningHoursInterface {
@@ -168,7 +169,7 @@ class OhOpeningHoursServiceTest extends KernelTestBase {
   /**
    * Utility to group occurrences by day.
    *
-   * @param iterable|\Drupal\oh\OhOccurrence[] $occurrences
+   * @param iterable|OhOccurrence[] $occurrences
    *   A list of occurrences.
    *
    * @return array
diff --git a/tests/src/Kernel/OhProcessTest.php b/tests/src/Kernel/OhProcessTest.php
index 573c358..d1376ef 100644
--- a/tests/src/Kernel/OhProcessTest.php
+++ b/tests/src/Kernel/OhProcessTest.php
@@ -56,7 +56,7 @@ class OhProcessTest extends KernelTestBase {
   /**
    * Opening hours service.
    *
-   * @return \Drupal\oh\OhOpeningHoursInterface
+   * @return OhOpeningHoursInterface
    *   The opening hours service.
    */
   protected function openingHoursService(): OhOpeningHoursInterface {
diff --git a/tests/src/Unit/OhDateRangeTest.php b/tests/src/Unit/OhDateRangeTest.php
index 00551b3..a661916 100644
--- a/tests/src/Unit/OhDateRangeTest.php
+++ b/tests/src/Unit/OhDateRangeTest.php
@@ -89,7 +89,7 @@ class OhDateRangeTest extends UnitTestCase {
    * @covers ::sort
    */
   public function testSort() {
-    /** @var \Drupal\oh\OhDateRange[] $ranges */
+    /** @var OhDateRange[] $ranges */
     $ranges = [];
 
     $start1 = new \DateTime('1 Jan 2016 12:00:00');
@@ -227,7 +227,7 @@ class OhDateRangeTest extends UnitTestCase {
    * @param array $args
    *   Arguments to pass to constructor.
    *
-   * @return \Drupal\oh\OhDateRange
+   * @return OhDateRange
    *   New range object.
    */
   protected function createDateRange(...$args) {
diff --git a/tests/src/Unit/OhFlattenTest.php b/tests/src/Unit/OhFlattenTest.php
index e42f978..bcc73f9 100644
--- a/tests/src/Unit/OhFlattenTest.php
+++ b/tests/src/Unit/OhFlattenTest.php
@@ -25,9 +25,9 @@ class OhFlattenTest extends UnitTestCase {
   /**
    * Tests occurrences are flattened.
    *
-   * @param \Drupal\oh\OhOccurrence[] $occurrences
+   * @param OhOccurrence[] $occurrences
    *   A series of occurrences to flatten.
-   * @param \Drupal\oh\OhOccurrence[] $expected
+   * @param OhOccurrence[] $expected
    *   Expected flattened occurrences.
    *
    * @dataProvider providerCompute
@@ -277,9 +277,7 @@ class OhFlattenTest extends UnitTestCase {
    * Tests occurrences are flattened and cacheability is retained.
    */
   public function testCacheability(): void {
-    $cache_contexts_manager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock(CacheContextsManager::class);
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
     $container = new Container();
     $container->set('cache_contexts_manager', $cache_contexts_manager);
@@ -326,9 +324,9 @@ class OhFlattenTest extends UnitTestCase {
   /**
    * Compares two arrays of occurrences.
    *
-   * @param \Drupal\oh\OhOccurrence[] $expected
+   * @param OhOccurrence[] $expected
    *   Expected array of occurrences.
-   * @param \Drupal\oh\OhOccurrence[] $actual
+   * @param OhOccurrence[] $actual
    *   Actual array of occurrences.
    */
   public function assertCompare(array $expected, array $actual) {
diff --git a/tests/src/Unit/OhOccurrenceTest.php b/tests/src/Unit/OhOccurrenceTest.php
index df3da22..29e425c 100644
--- a/tests/src/Unit/OhOccurrenceTest.php
+++ b/tests/src/Unit/OhOccurrenceTest.php
@@ -77,9 +77,7 @@ class OhOccurrenceTest extends UnitTestCase {
    * @covers ::getCacheMaxAge
    */
   public function testCachability(): void {
-    $cacheContextsManager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cacheContextsManager = $this->createMock(CacheContextsManager::class);
     $cacheContextsManager->method('assertValidTokens')->willReturn(TRUE);
     $container = new ContainerBuilder();
     $container->set('cache_contexts_manager', $cacheContextsManager);
@@ -127,7 +125,7 @@ class OhOccurrenceTest extends UnitTestCase {
   /**
    * Create a new occurrence.
    *
-   * @return \Drupal\oh\OhOccurrence
+   * @return OhOccurrence
    *   New occurrence object.
    */
   protected function createOccurrence() {
