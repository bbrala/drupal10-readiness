diff --git a/content_translation_redirect.info.yml b/content_translation_redirect.info.yml
index 029713e..f46fe80 100644
--- a/content_translation_redirect.info.yml
+++ b/content_translation_redirect.info.yml
@@ -2,8 +2,7 @@ name: 'Content Translation Redirect'
 type: module
 description: 'Allows users to redirect from non-existent content translation to default content translation.'
 package: Multilingual
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: content_translation_redirect.default_settings
 
 dependencies:
diff --git a/src/EventSubscriber/RequestSubscriber.php b/src/EventSubscriber/RequestSubscriber.php
index 70d8d97..4e541e5 100644
--- a/src/EventSubscriber/RequestSubscriber.php
+++ b/src/EventSubscriber/RequestSubscriber.php
@@ -2,9 +2,12 @@
 
 namespace Drupal\content_translation_redirect\EventSubscriber;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\content_translation_redirect\ContentTranslationRedirectInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -28,41 +31,41 @@ class RequestSubscriber implements EventSubscriberInterface {
   /**
    * Configuration object with default settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Content translation redirects storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;
 
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * ContentTranslationRedirectRequestSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The currently active route match object.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match) {
@@ -75,11 +78,11 @@ class RequestSubscriber implements EventSubscriberInterface {
   /**
    * Handles the redirect if any found.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onRequestCheckRedirect(GetResponseEvent $event) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  public function onRequestCheckRedirect(RequestEvent $event) {
+    /** @var ContentEntityInterface $entity */
     $entity = $this->checkContentEntityCanonicalRoute();
     if ($entity && $entity->isTranslatable()) {
       // Get current language and entity translation language.
@@ -89,7 +92,7 @@ class RequestSubscriber implements EventSubscriberInterface {
       $redirect_entity_id = $entity->getEntityTypeId() . '__' . $entity->bundle();
 
       // Check translation into current language.
-      /** @var \Drupal\content_translation_redirect\ContentTranslationRedirectInterface $redirect_entity */
+      /** @var ContentTranslationRedirectInterface $redirect_entity */
       if ($entity_language->getId() != $current_language->getId() && $redirect_entity = $this->storage->load($redirect_entity_id)) {
         // Get current path.
         $url = Url::fromRoute('<current>')->setAbsolute();
@@ -133,7 +136,7 @@ class RequestSubscriber implements EventSubscriberInterface {
   /**
    * Check that the current route is the content entity canonical route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|bool
+   * @return ContentEntityInterface|bool
    *   The entity instance. FALSE if no entity is matched.
    */
   protected function checkContentEntityCanonicalRoute() {
diff --git a/src/Form/ContentTranslationRedirectForm.php b/src/Form/ContentTranslationRedirectForm.php
index cbcb687..a5e11a5 100644
--- a/src/Form/ContentTranslationRedirectForm.php
+++ b/src/Form/ContentTranslationRedirectForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_translation_redirect\Form;
 
+use Drupal\content_translation_redirect\ContentTranslationRedirectInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
@@ -19,16 +20,16 @@ class ContentTranslationRedirectForm extends EntityForm {
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * ContentTranslationRedirectForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entityTypeManager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -51,7 +52,7 @@ class ContentTranslationRedirectForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\content_translation_redirect\ContentTranslationRedirectInterface $entity */
+    /** @var ContentTranslationRedirectInterface $entity */
     $entity = $this->entity;
 
     // If this is a new entity, then list available bundles.
@@ -77,7 +78,7 @@ class ContentTranslationRedirectForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\content_translation_redirect\ContentTranslationRedirectInterface $entity */
+    /** @var ContentTranslationRedirectInterface $entity */
     $entity = $this->entity;
 
     // Set the label on new entity.
