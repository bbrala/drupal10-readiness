modules/contrib/layout_builder_asset/layout_builder_asset.install
modules/contrib/layout_builder_asset/layout_builder_asset.module
modules/contrib/layout_builder_asset/src/Entity/LayoutBuilderAssetBase.php
modules/contrib/layout_builder_asset/src/Entity/LayoutBuilderAssetCss.php
modules/contrib/layout_builder_asset/src/Entity/LayoutBuilderAssetJs.php
modules/contrib/layout_builder_asset/src/EventSubscriber/BlockRendererListener.php
modules/contrib/layout_builder_asset/src/EventSubscriber/RouteSubscriber.php
modules/contrib/layout_builder_asset/src/Form/AddBlockForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetCssForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetDeleteForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetDisableForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetDuplicateCssForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetDuplicateJsForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetEnableForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetForm.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetFormBase.php
modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetJsForm.php
modules/contrib/layout_builder_asset/src/Form/OverridesContentEntityForm.php
modules/contrib/layout_builder_asset/src/Form/RemoveBlockForm.php
modules/contrib/layout_builder_asset/src/Form/RemoveSectionForm.php
modules/contrib/layout_builder_asset/src/Form/UpdateBlockForm.php
modules/contrib/layout_builder_asset/src/LayoutBuilderAssetAccessControlHandler.php
modules/contrib/layout_builder_asset/src/LayoutBuilderAssetFileStorage.php
modules/contrib/layout_builder_asset/src/LayoutBuilderAssetInterface.php
modules/contrib/layout_builder_asset/src/LayoutBuilderAssetListBuilder.php
modules/contrib/layout_builder_asset/tests/src/Functional/LayoutBuilderAssetCssTest.php
modules/contrib/layout_builder_asset/tests/src/Functional/LayoutBuilderAssetJsTest.php

15 files with changes
=====================

1) modules/contrib/layout_builder_asset/tests/src/Functional/LayoutBuilderAssetJsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\layout_builder_asset\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * The account to be used to test access to both workflows.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $administrator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/layout_builder_asset/tests/src/Functional/LayoutBuilderAssetCssTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\layout_builder_asset\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * The account to be used to test access to both workflows.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $administrator;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/layout_builder_asset/src/LayoutBuilderAssetFileStorage.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * A short description of the layoutbuilder.
    *
-   * @var \Drupal\layout_builder_asset\LayoutBuilderAssetInterface
+   * @var LayoutBuilderAssetInterface
    */
   protected $layoutBuilder;

@@ @@
   /**
    * LayoutBuilderInterface constructor.
    *
-   * @param \Drupal\layout_builder_asset\LayoutBuilderAssetInterface $layoutBuilder
+   * @param LayoutBuilderAssetInterface $layoutBuilder
    *   Layout builder.
    */
   public function __construct(LayoutBuilderAssetInterface $layoutBuilder) {
@@ @@
   /**
    * Get the Drupal file system service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   File System service.
    */
   protected static function getFileSystemService() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/layout_builder_asset/src/LayoutBuilderAssetAccessControlHandler.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * The context manager service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Constructs a LayoutBuilderAssetAccessControlHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/layout_builder_asset/src/Form/UpdateBlockForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_asset\Form;

+use Drupal\layout_builder\SectionStorageInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\layout_builder\Form\UpdateBlockForm as OriginalUpdateBlockForm;

 /**
@@ @@
   /**
    * Return the section storage object.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage.
    */
   public function getSectionStorage() {
@@ @@
   /**
    * Return the block plugin.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin object.
    */
   public function getBlock() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/layout_builder_asset/src/Form/RemoveSectionForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/layout_builder_asset/src/Form/RemoveBlockForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/layout_builder_asset/src/Form/OverridesContentEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_asset\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * Layout Builder Asset JS storage entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $assetJs;

@@ @@
   /**
    * Layout Builder Asset CSS storage entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $assetCss;

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a new OverridesEntityForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityManager
+   * @param EntityTypeManagerInterface $entityManager
    *   The Entity Manager Interface.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, LayoutTempstoreRepositoryInterface $layout_tempstore_repository, PrivateTempStoreFactory $tempStoreFactory, EntityTypeManagerInterface $entityManager) {
@@ @@
   /**
    * Delete all the Assets for the layout builder.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws TempStoreException
    */
   protected function deleteAsset() {
     $store = $this->tempStoreFactory->get('layout_builder_asset');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_asset\Form;

+use Drupal\Core\Condition\ConditionManager;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Extension\ThemeHandler;
 use Psr\Log\LoggerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
   /**
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $language;
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

@@ @@
   /**
    * LayoutBuilderInterface constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $manager
+   * @param ExecutableManagerInterface $manager
    *   The ConditionManager for building the conditions UI.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language
+   * @param LanguageManagerInterface $language
    *   The language manager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
    */
   public function __construct(LoggerInterface $logger, ExecutableManagerInterface $manager, ContextRepositoryInterface $context_repository, LanguageManagerInterface $language, ThemeHandlerInterface $theme_handler, PluginFormFactoryInterface $plugin_form_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetEnableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_asset\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->enable()->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetDisableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_asset\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->disable()->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/layout_builder_asset/src/Form/LayoutBuilderAssetDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_asset\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $this->logger('layout_builder_asset')->notice('%type asset %id deleted', [
       '%type' => $entity->get('entityTypeId'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/layout_builder_asset/src/Form/AddBlockForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_builder_asset\Form;

+use Drupal\layout_builder\SectionStorageInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\layout_builder\Form\AddBlockForm as OriginalAddBlockForm;

 /**
@@ @@
   /**
    * Return the section storage object.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage.
    */
   public function getSectionStorage() {
@@ @@
   /**
    * Return the block plugin.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin object.
    */
   public function getBlock() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/layout_builder_asset/src/EventSubscriber/BlockRendererListener.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates a BlockComponentRenderArray object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/layout_builder_asset/layout_builder_asset.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\layout_builder\SectionComponent;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * @file
  * Provides hook implementations for Layout Builder Asset.
@@ @@
     // @TODO: After save it should immediately reflect on node view page.
     $formObject = $formState->getFormObject();

-    /** @var \Drupal\layout_builder\SectionComponent $component */
+    /** @var SectionComponent $component */
     $component = $formObject
       ->getSectionStorage()
       ->getSection($formObject->getDelta())
@@ @@
  * @return array
  *   The entity types.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws PluginNotFoundException
  */
 function layout_builder_asset_get_entity_types(array $types = []) {
   $asset_entity_types = &drupal_static(__FUNCTION__);
@@ @@
  * @return array
  *   Array of assets required to the layout builder.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function layout_builder_asset_get_assets($active = NULL, array $types = []) {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::entityTypeManager();
   $assets = [];
   foreach (layout_builder_asset_get_entity_types($types) as $entity_type_id => $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

