diff --git a/dashboards.install b/dashboards.install
index 70a874b..a715be2 100644
--- a/dashboards.install
+++ b/dashboards.install
@@ -1,19 +1,20 @@
 <?php
 
+use Drupal\user\UserDataInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * @file
  * Install, update, and uninstall functions for dashboards.module.
  */
-
 /**
  * Implements hook_uninstall().
  */
 function dashboards_uninstall() {
-  /** @var \Drupal\user\UserDataInterface $userData */
+  /** @var UserDataInterface $userData */
   $userData = \Drupal::service('user.data');
   $userData->delete('dashboards');
 
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $manager */
+  /** @var EntityTypeManagerInterface $manager */
   $manager = \Drupal::service('entity_type.manager');
   $boards = $manager->getStorage('dashboard')->loadMultiple();
   $manager->getStorage('dashboard')->delete($boards);
diff --git a/dashboards.module b/dashboards.module
index 0c49a9b..792a664 100644
--- a/dashboards.module
+++ b/dashboards.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\dashboards\Entity\DashboardStorage;
 /**
  * @file
  * Contains dashboards.module.
@@ -66,7 +67,7 @@ function dashboards_toolbar() {
   $entityTypeManager = \Drupal::entityTypeManager();
 
   /**
-   * @var \Drupal\dashboards\Entity\DashboardStorage
+   * @var DashboardStorage
    */
   $storage = $entityTypeManager->getStorage('dashboard');
   $boards = $storage->loadMultipleOrderedByWeight();
diff --git a/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php b/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php
index dfd3c05..21f5523 100644
--- a/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php
+++ b/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php
@@ -27,21 +27,21 @@ class Comments extends DashboardBase {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;
 
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php b/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php
index 0faf2dc..bcbdf98 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php
@@ -18,7 +18,7 @@ class Browser extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php b/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php
index ec6b811..110ca9d 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php
@@ -18,7 +18,7 @@ class OsVersion extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php b/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php
index 2c8d76e..2b0f9d7 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php
@@ -28,7 +28,7 @@ class TopUrls extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php b/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php
index af156b6..9a824bb 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php
@@ -52,7 +52,7 @@ class VisitStatistic extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php b/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php
index ce8e731..500e711 100644
--- a/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php
+++ b/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php
@@ -28,21 +28,21 @@ class MostReaded extends DashboardBase {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;
 
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php b/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php
index bd856dd..4e7cdeb 100644
--- a/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php
+++ b/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php
@@ -25,14 +25,14 @@ class Submissions extends DashboardBase {
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Annotation/Dashboard.php b/src/Annotation/Dashboard.php
index 8dd7be2..22a8d41 100644
--- a/src/Annotation/Dashboard.php
+++ b/src/Annotation/Dashboard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class Dashboard extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class Dashboard extends Plugin {
   /**
    * Category of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/DashboardsPermissions.php b/src/DashboardsPermissions.php
index 7e0a4fc..d9dde13 100644
--- a/src/DashboardsPermissions.php
+++ b/src/DashboardsPermissions.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dashboards;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,14 +19,14 @@ class DashboardsPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * Constructs a DashboardsPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -44,8 +46,8 @@ class DashboardsPermissions implements ContainerInjectionInterface {
    * @return array
    *   An array of permissions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function permissions(): array {
     $permissions = [];
diff --git a/src/Entity/Dashboard.php b/src/Entity/Dashboard.php
index 5acc928..fa356e2 100644
--- a/src/Entity/Dashboard.php
+++ b/src/Entity/Dashboard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Entity;
 
+use Drupal\user\UserDataInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\layout_builder\Section;
 use Drupal\Core\Session\AccountInterface;
@@ -98,7 +99,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
   /**
    * Section.
    *
-   * @var \Drupal\layout_builder\Section[]
+   * @var Section[]
    */
   public $sections = [];
 
@@ -119,7 +120,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
   /**
    * Gets the layout sections.
    *
-   * @return \Drupal\layout_builder\Section[]
+   * @return Section[]
    *   A sequentially and numerically keyed array of section objects.
    */
   public function getSections() {
@@ -132,7 +133,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
    * Implementations of this method are expected to call array_values() to rekey
    * the list of sections.
    *
-   * @param \Drupal\layout_builder\Section[] $sections
+   * @param Section[] $sections
    *   An array of section objects.
    *
    * @return $this
@@ -175,7 +176,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
    */
   public static function preDelete(EntityStorageInterface $storage, array $entities) {
     /**
-     * @var \Drupal\user\UserDataInterface
+     * @var UserDataInterface
      */
     $userData = \Drupal::service('user.data');
     foreach ($entities as $entity) {
@@ -186,7 +187,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
   /**
    * Check if is overriden.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account to check.
    *
    * @return bool
@@ -197,7 +198,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
       $account = \Drupal::currentUser();
     }
     /**
-     * @var \Drupal\user\UserDataInterface
+     * @var UserDataInterface
      */
     $dataService = \Drupal::service('user.data');
     $data = $dataService->get('dashboards', $account->id(), $this->id());
diff --git a/src/Entity/DashboardStorage.php b/src/Entity/DashboardStorage.php
index 4f4cfa9..638ea67 100644
--- a/src/Entity/DashboardStorage.php
+++ b/src/Entity/DashboardStorage.php
@@ -32,7 +32,7 @@ class DashboardStorage extends ConfigEntityStorage {
 
     /**
      * @var integer $delta
-     * @var \Drupal\layout_builder\Section $section
+     * @var Section $section
      */
     foreach ($record['sections'] as $delta => $section) {
       $record['sections'][$delta] = $section->toArray();
diff --git a/src/Entity/DashboardViewBuilder.php b/src/Entity/DashboardViewBuilder.php
index ef7545d..1b16502 100644
--- a/src/Entity/DashboardViewBuilder.php
+++ b/src/Entity/DashboardViewBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dashboards\Entity;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\layout_builder\SectionStorage\SectionStorageManager;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Theme\Registry;
 use Drupal\Core\Entity\EntityInterface;
@@ -26,42 +28,42 @@ class DashboardViewBuilder extends EntityViewBuilder {
   /**
    * Dashboard settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Section storage handler.
    *
-   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManager
+   * @var SectionStorageManager
    */
   protected $sectionStorageManager;
 
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new EntityViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface $section_storage_manager
+   * @param SectionStorageManagerInterface $section_storage_manager
    *   Section storage handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Module config factory interface.
    */
   public function __construct(
@@ -105,7 +107,7 @@ class DashboardViewBuilder extends EntityViewBuilder {
   /**
    * View entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to display.
    * @param string $view_mode
    *   View mode.
@@ -114,7 +116,7 @@ class DashboardViewBuilder extends EntityViewBuilder {
    */
   public function view(EntityInterface $entity, $view_mode = 'full', $langcode = NULL) {
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard $entity
+     * @var Dashboard $entity
      */
     $build_list = $this->viewMultiple([$entity], $view_mode, $langcode);
 
diff --git a/src/EventSubscriber/BlockComponentPreviewFormReplace.php b/src/EventSubscriber/BlockComponentPreviewFormReplace.php
index 0ae8031..8edbe68 100644
--- a/src/EventSubscriber/BlockComponentPreviewFormReplace.php
+++ b/src/EventSubscriber/BlockComponentPreviewFormReplace.php
@@ -30,14 +30,14 @@ class BlockComponentPreviewFormReplace implements EventSubscriberInterface {
   /**
    * The core renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Creates a BlockComponentRenderArray object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The core renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ -58,7 +58,7 @@ class BlockComponentPreviewFormReplace implements EventSubscriberInterface {
   /**
    * Change forms to divs if in layout builder's preview mode.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The section component render event.
    */
   public function onBuildRender(SectionComponentBuildRenderArrayEvent $event) {
diff --git a/src/Form/DashboardLayoutBuilderForm.php b/src/Form/DashboardLayoutBuilderForm.php
index 346e579..4eccee8 100644
--- a/src/Form/DashboardLayoutBuilderForm.php
+++ b/src/Form/DashboardLayoutBuilderForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Form;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ -26,35 +27,35 @@ class DashboardLayoutBuilderForm extends EntityForm {
   /**
    * Dashboard settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * LayoutBuiolder Tempstore.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;
 
   /**
    * Section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;
 
   /**
    * User data interface.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -126,11 +127,11 @@ class DashboardLayoutBuilderForm extends EntityForm {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function resetToDefault(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\dashboards\Entity\Dashboard $dashboard */
+    /** @var Dashboard $dashboard */
     $dashboard = $this->sectionStorage->getContextValue(Dashboard::CONTEXT_TYPE);
 
     // Delete the userdata containing the dashboard override.
@@ -214,7 +215,7 @@ class DashboardLayoutBuilderForm extends EntityForm {
   /**
    * Retrieves the section storage object.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage for the current form.
    */
   public function getSectionStorage() {
diff --git a/src/Plugin/Block/DashboardBlock.php b/src/Plugin/Block/DashboardBlock.php
index 86f1ca0..a37bcc4 100644
--- a/src/Plugin/Block/DashboardBlock.php
+++ b/src/Plugin/Block/DashboardBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Plugin\Block;
 
+use Drupal\dashboards\Plugin\DashboardBase;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Block\BlockPluginInterface;
@@ -24,7 +25,7 @@ class DashboardBlock extends BlockBase implements ContainerFactoryPluginInterfac
   /**
    * Base plugin.
    *
-   * @var \Drupal\dashboards\Plugin\DashboardBase
+   * @var DashboardBase
    */
   protected $basePlugin;
 
diff --git a/src/Plugin/Dashboard/Account.php b/src/Plugin/Dashboard/Account.php
index 8d9f7a4..4bca9f8 100644
--- a/src/Plugin/Dashboard/Account.php
+++ b/src/Plugin/Dashboard/Account.php
@@ -25,21 +25,21 @@ class Account extends DashboardBase {
   /**
    * AccountInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * Entity query for entity views displays.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * EntityTypeManagerInterface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/Dashboard/AddContentMenu.php b/src/Plugin/Dashboard/AddContentMenu.php
index 54289b2..a00082d 100644
--- a/src/Plugin/Dashboard/AddContentMenu.php
+++ b/src/Plugin/Dashboard/AddContentMenu.php
@@ -26,21 +26,21 @@ class AddContentMenu extends DashboardBase {
   /**
    * AccountInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * Entity bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * EntityTypeManagerInterface.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/Dashboard/NodeStatistics.php b/src/Plugin/Dashboard/NodeStatistics.php
index 3b9fcb0..de8c0d6 100644
--- a/src/Plugin/Dashboard/NodeStatistics.php
+++ b/src/Plugin/Dashboard/NodeStatistics.php
@@ -25,14 +25,14 @@ class NodeStatistics extends DashboardBase {
   /**
    * Entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $entityQuery;
 
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;
 
diff --git a/src/Plugin/Dashboard/RssNews.php b/src/Plugin/Dashboard/RssNews.php
index db0312b..17e524c 100644
--- a/src/Plugin/Dashboard/RssNews.php
+++ b/src/Plugin/Dashboard/RssNews.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Plugin\Dashboard;
 
+use Drupal\Core\StringTranslation\TranslationManager;
 use Drupal\Core\Url;
 use Zend\Feed\Reader\Reader;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ -86,7 +87,7 @@ class RssNews extends DashboardLazyBuildBase {
   /**
    * Lazy builder callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Plugin id.
    * @param array $configuration
    *   Plugin configuration.
@@ -99,7 +100,7 @@ class RssNews extends DashboardLazyBuildBase {
     $url = $configuration['uri'];
     $max_items = $configuration['max_items'];
     $show_description = $configuration['show_description'];
-    /** @var \Drupal\Core\StringTranslation\TranslationManager $translation_manager */
+    /** @var TranslationManager $translation_manager */
     $translation_manager = \Drupal::service('string_translation');
 
     try {
diff --git a/src/Plugin/Dashboard/ViewEmbed.php b/src/Plugin/Dashboard/ViewEmbed.php
index 95682bc..e4d4393 100644
--- a/src/Plugin/Dashboard/ViewEmbed.php
+++ b/src/Plugin/Dashboard/ViewEmbed.php
@@ -25,7 +25,7 @@ class ViewEmbed extends DashboardBase {
   /**
    * Entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $entityQuery;
 
diff --git a/src/Plugin/DashboardBase.php b/src/Plugin/DashboardBase.php
index 5e00b37..c025e85 100644
--- a/src/Plugin/DashboardBase.php
+++ b/src/Plugin/DashboardBase.php
@@ -38,7 +38,7 @@ abstract class DashboardBase extends PluginBase implements DashboardInterface, C
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
@@ -58,7 +58,7 @@ abstract class DashboardBase extends PluginBase implements DashboardInterface, C
    *
    * @param array $form
    *   Default form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Default form.
    * @param array $configuration
    *   Configuration.
@@ -75,7 +75,7 @@ abstract class DashboardBase extends PluginBase implements DashboardInterface, C
    *
    * @param array $form
    *   Default form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Default form.
    * @param array $configuration
    *   Configuration.
@@ -89,7 +89,7 @@ abstract class DashboardBase extends PluginBase implements DashboardInterface, C
    *
    * @param array $form
    *   Default form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Default form.
    * @param array $configuration
    *   Configuration.
diff --git a/src/Plugin/DashboardLazyBuildInterface.php b/src/Plugin/DashboardLazyBuildInterface.php
index cf2fdb7..c46ee9f 100644
--- a/src/Plugin/DashboardLazyBuildInterface.php
+++ b/src/Plugin/DashboardLazyBuildInterface.php
@@ -10,7 +10,7 @@ interface DashboardLazyBuildInterface {
   /**
    * Callback for lazy build.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/src/Plugin/DashboardManager.php b/src/Plugin/DashboardManager.php
index 5a463df..64f445e 100644
--- a/src/Plugin/DashboardManager.php
+++ b/src/Plugin/DashboardManager.php
@@ -17,9 +17,9 @@ class DashboardManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/Derivative/DashboardBlock.php b/src/Plugin/Derivative/DashboardBlock.php
index 2db19d4..e11ee71 100644
--- a/src/Plugin/Derivative/DashboardBlock.php
+++ b/src/Plugin/Derivative/DashboardBlock.php
@@ -18,7 +18,7 @@ class DashboardBlock extends DeriverBase implements ContainerDeriverInterface {
   /**
    * Plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;
 
@@ -43,7 +43,7 @@ class DashboardBlock extends DeriverBase implements ContainerDeriverInterface {
   /**
    * Constructs new DashboardBlock.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The entity type manager.
    */
   public function __construct(PluginManagerInterface $plugin_manager) {
diff --git a/src/Plugin/SectionStorage/DashboardSectionStorage.php b/src/Plugin/SectionStorage/DashboardSectionStorage.php
index c1ac554..deb6169 100644
--- a/src/Plugin/SectionStorage/DashboardSectionStorage.php
+++ b/src/Plugin/SectionStorage/DashboardSectionStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Plugin\SectionStorage;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Url;
 use Drupal\Core\Access\AccessResult;
 use Drupal\dashboards\Entity\Dashboard;
@@ -37,28 +38,28 @@ class DashboardSectionStorage extends SectionStorageBase implements ContainerFac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;
 
   /**
    * The sample entity generator.
    *
-   * @var \Drupal\layout_builder\Entity\SampleEntityGeneratorInterface
+   * @var SampleEntityGeneratorInterface
    */
   protected $sampleEntityGenerator;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -91,10 +92,10 @@ class DashboardSectionStorage extends SectionStorageBase implements ContainerFac
   /**
    * Gets the dashboard entity.
    *
-   * @return \Drupal\dashboards\Entity\Dashboard
+   * @return Dashboard
    *   Dashboard entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getDashboard() {
     return $this->getContextValue(Dashboard::CONTEXT_TYPE);
diff --git a/src/Plugin/SectionStorage/UserDashboardSectionStorage.php b/src/Plugin/SectionStorage/UserDashboardSectionStorage.php
index f3d1a6a..9b66371 100644
--- a/src/Plugin/SectionStorage/UserDashboardSectionStorage.php
+++ b/src/Plugin/SectionStorage/UserDashboardSectionStorage.php
@@ -34,7 +34,7 @@ class UserDashboardSectionStorage extends DashboardSectionStorage implements Tem
   /**
    * UserDataInterface definition.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
@@ -101,7 +101,7 @@ class UserDashboardSectionStorage extends DashboardSectionStorage implements Tem
 
     $id = !empty($value) ? $value : (!empty($defaults['dashboard']) ? $defaults['dashboard'] : NULL);
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard $entity
+     * @var Dashboard $entity
      */
     if ($id && ($entity = $this->entityTypeManager->getStorage('dashboard')->load($id))) {
       if ($entity->isOverriden()) {
diff --git a/src/Theme/ThemeNegotiator.php b/src/Theme/ThemeNegotiator.php
index f80cde7..e3d89b1 100644
--- a/src/Theme/ThemeNegotiator.php
+++ b/src/Theme/ThemeNegotiator.php
@@ -16,32 +16,32 @@ class ThemeNegotiator implements ThemeNegotiatorInterface {
   /**
    * Theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * Service constructor.
    *
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
    */
   public function __construct(ThemeManagerInterface $theme_manager, ConfigFactoryInterface $configFactory, AccountInterface $currentUser) {
