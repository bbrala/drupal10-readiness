diff --git a/serial.info.yml b/serial.info.yml
index a240765..c0baeeb 100644
--- a/serial.info.yml
+++ b/serial.info.yml
@@ -2,7 +2,6 @@ name: Serial
 type: module
 description: 'Defines atomic auto increment (serial) field type.'
 package: Field types
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - drupal:field
diff --git a/serial.install b/serial.install
index 97deae2..713d9b7 100644
--- a/serial.install
+++ b/serial.install
@@ -1,17 +1,17 @@
 <?php
 
+use Drupal\serial\SerialStorageInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Serial module.
  */
-
 /**
  * Implements hook_schema().
  *
  * Return the schema of all the assistant tables (one per field instance).
  */
 function serial_schema() {
-  /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+  /** @var SerialStorageInterface $serialStorage */
   $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
   $tableSchema = $serialStorage->getSchema();
   $schema = [];
diff --git a/serial.module b/serial.module
index ac70fde..5be1d59 100644
--- a/serial.module
+++ b/serial.module
@@ -31,7 +31,7 @@ function serial_help($route_name, RouteMatchInterface $route_match) {
 function serial_field_config_create(FieldConfig $field) {
   if ($field->getType() == 'serial' && !$field->isDeleted()) {
     // Create the assistant storage.
-    /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+    /** @var SerialStorageInterface $serialStorage */
     $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
     $storageName = $serialStorage->createStorageName(
       $field->getTargetEntityTypeId(),
diff --git a/src/Plugin/Field/FieldType/SerialItem.php b/src/Plugin/Field/FieldType/SerialItem.php
index e21f56b..2f0d427 100644
--- a/src/Plugin/Field/FieldType/SerialItem.php
+++ b/src/Plugin/Field/FieldType/SerialItem.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\serial\Plugin\Field\FieldType;
 
+use Drupal\serial\SerialStorageInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -92,7 +94,7 @@ class SerialItem extends FieldItemBase {
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    */
   public function initializeEntitiesCallback(array &$form, FormStateInterface $form_state) {
@@ -111,7 +113,7 @@ class SerialItem extends FieldItemBase {
       $ids = $query->execute();
 
       if (count($ids) > 0) {
-        /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+        /** @var SerialStorageInterface $serialStorage */
         $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
         // Set serial values for existing entities.
         $oldCount = $serialStorage->initOldEntries(
@@ -204,7 +206,7 @@ class SerialItem extends FieldItemBase {
       // depending of what is the design.
       // This should probably be solved by the end user decision
       // while setting the field translation.
-      /** @var \Drupal\Core\Language\LanguageManagerInterface $languageManager */
+      /** @var LanguageManagerInterface $languageManager */
       $languageManager = \Drupal::getContainer()->get('language_manager');
       // @todo isMultilingual is global, prefer local hasTranslation
       if ($languageManager->isMultilingual() && $entity instanceof TranslatableInterface) {
@@ -213,7 +215,7 @@ class SerialItem extends FieldItemBase {
     }
 
     if ($newSerial) {
-      /** @var \Drupal\serial\SerialStorageInterface $serialStorage */
+      /** @var SerialStorageInterface $serialStorage */
       $serialStorage = \Drupal::getContainer()->get('serial.sql_storage');
       $serial = $serialStorage->generateValue($this->getFieldDefinition(), $this->getEntity());
 
diff --git a/src/SerialSQLStorage.php b/src/SerialSQLStorage.php
index 2cbb7b7..17b41a2 100644
--- a/src/SerialSQLStorage.php
+++ b/src/SerialSQLStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\serial;
 
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -21,7 +22,7 @@ class SerialSQLStorage implements ContainerInjectionInterface, SerialStorageInte
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
diff --git a/src/SerialStorageInterface.php b/src/SerialStorageInterface.php
index d7b302f..80f33ec 100644
--- a/src/SerialStorageInterface.php
+++ b/src/SerialStorageInterface.php
@@ -16,9 +16,9 @@ interface SerialStorageInterface {
   /**
    * Creates the assistant storage name for a specific field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    *
    * @return string
@@ -57,9 +57,9 @@ interface SerialStorageInterface {
   /**
    * Generates a unique serial value (unique per entity bundle).
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    * @param bool $delete
    *   Indicates if temporary records should be deleted.
@@ -92,9 +92,9 @@ interface SerialStorageInterface {
   /**
    * Creates an assistant serial storage for a new created field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    */
   public function createStorage(FieldDefinitionInterface $fieldDefinition, FieldableEntityInterface $entity);
@@ -110,9 +110,9 @@ interface SerialStorageInterface {
   /**
    * Drops an assistant serial storage for a deleted field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   Field definition.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
    */
   public function dropStorage(FieldDefinitionInterface $fieldDefinition, FieldableEntityInterface $entity);
diff --git a/tests/src/Functional/SerialFieldTest.php b/tests/src/Functional/SerialFieldTest.php
index 7ce36d3..f66013d 100644
--- a/tests/src/Functional/SerialFieldTest.php
+++ b/tests/src/Functional/SerialFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\serial\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Tests\BrowserTestBase;
@@ -31,7 +32,7 @@ class SerialFieldTest extends BrowserTestBase {
   /**
    * A user with permission to create test entities.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
@@ -45,7 +46,7 @@ class SerialFieldTest extends BrowserTestBase {
   /**
    * A field storage to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;
 
@@ -59,14 +60,14 @@ class SerialFieldTest extends BrowserTestBase {
   /**
    * The serial field used in this test class.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->webUser = $this->drupalCreateUser([
@@ -134,7 +135,7 @@ class SerialFieldTest extends BrowserTestBase {
 
     // Test basic definition of serial field on entity save.
     $edit = [];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     // Make sure the entity was saved.
     preg_match('|entity_test/manage/(\d+)|', $this->getSession()
       ->getCurrentUrl(), $match);
@@ -160,7 +161,7 @@ class SerialFieldTest extends BrowserTestBase {
     while ($i < $entities) {
       $this->drupalGet('entity_test/add');
       $edit = [];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       // Make sure the entity was saved.
       preg_match('|entity_test/manage/(\d+)|', $this->getSession()
         ->getCurrentUrl(), $match);
