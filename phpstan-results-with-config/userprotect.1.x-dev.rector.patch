diff --git a/src/Access/UserProtectRoleAccessCheck.php b/src/Access/UserProtectRoleAccessCheck.php
index a127d27..1e59cbe 100644
--- a/src/Access/UserProtectRoleAccessCheck.php
+++ b/src/Access/UserProtectRoleAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\userprotect\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -19,12 +20,12 @@ class UserProtectRoleAccessCheck implements AccessInterface {
    *
    * This check will only occur when role_delegation is enabled.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user we are editing.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, UserInterface $user) {
diff --git a/src/Annotation/UserProtection.php b/src/Annotation/UserProtection.php
index 325b5e2..ccae83a 100644
--- a/src/Annotation/UserProtection.php
+++ b/src/Annotation/UserProtection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\userprotect\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class UserProtection extends Plugin {
   /**
    * The human-readable name of the protection.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class UserProtection extends Plugin {
   /**
    * A brief description of the protection.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/ProtectionRuleListBuilder.php b/src/Controller/ProtectionRuleListBuilder.php
index 487918a..25cf78a 100644
--- a/src/Controller/ProtectionRuleListBuilder.php
+++ b/src/Controller/ProtectionRuleListBuilder.php
@@ -43,7 +43,7 @@ class ProtectionRuleListBuilder extends ConfigEntityListBuilder {
   /**
    * Gets enabled protections for entity as a string.
    *
-   * @param \Drupal\userprotect\Entity\ProtectionRuleInterface $entity
+   * @param ProtectionRuleInterface $entity
    *   The entity the to get protections for.
    *
    * @return string
diff --git a/src/Entity/ProtectionRule.php b/src/Entity/ProtectionRule.php
index 0fcbaa3..686815e 100644
--- a/src/Entity/ProtectionRule.php
+++ b/src/Entity/ProtectionRule.php
@@ -97,7 +97,7 @@ class ProtectionRule extends ConfigEntityBase implements ProtectionRuleInterface
   /**
    * Holds the collection of protections that are used by this protection rule.
    *
-   * @var \Drupal\userprotect\Plugin\UserProtection\UserProtectionPluginCollection
+   * @var UserProtectionPluginCollection
    */
   protected $protectionsCollection;
 
diff --git a/src/Entity/ProtectionRuleInterface.php b/src/Entity/ProtectionRuleInterface.php
index 90ab7da..44f845c 100644
--- a/src/Entity/ProtectionRuleInterface.php
+++ b/src/Entity/ProtectionRuleInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\userprotect\Entity;
 
+use Drupal\userprotect\Plugin\UserProtection\UserProtectionInterface;
+use Drupal\userprotect\Plugin\UserProtection\UserProtectionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\UserInterface;
@@ -67,7 +69,7 @@ interface ProtectionRuleInterface extends ConfigEntityInterface {
    * @param string $protection
    *   The user protection plugin ID.
    *
-   * @return \Drupal\userprotect\Plugin\UserProtection\UserProtectionInterface
+   * @return UserProtectionInterface
    *   The user protection object.
    */
   public function getProtection($protection);
@@ -75,7 +77,7 @@ interface ProtectionRuleInterface extends ConfigEntityInterface {
   /**
    * Returns the user protections for this protection rule.
    *
-   * @return \Drupal\userprotect\Plugin\UserProtection\UserProtectionPluginCollection|\Drupal\userprotect\Plugin\UserProtection\UserProtectionInterface[]
+   * @return UserProtectionPluginCollection|UserProtectionInterface[]
    *   The user protection plugin collection.
    */
   public function getProtections();
@@ -145,7 +147,7 @@ interface ProtectionRuleInterface extends ConfigEntityInterface {
   /**
    * Returns if this rule applies to the given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check.
    *
    * @return bool
@@ -169,11 +171,11 @@ interface ProtectionRuleInterface extends ConfigEntityInterface {
   /**
    * Checks if a given operation on an user should be protected.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user object to check access for.
    * @param string $op
    *   The operation that is to be performed on $user.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account trying to access the entity.
    *
    * @return bool
diff --git a/src/Form/ProtectionRuleAddForm.php b/src/Form/ProtectionRuleAddForm.php
index 44a6fb3..80b1f43 100644
--- a/src/Form/ProtectionRuleAddForm.php
+++ b/src/Form/ProtectionRuleAddForm.php
@@ -17,7 +17,7 @@ class ProtectionRuleAddForm extends ProtectionRuleFormBase {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $protected_entity_type_id
    *   (optional) The entity type to protect.
diff --git a/src/Form/ProtectionRuleFormBase.php b/src/Form/ProtectionRuleFormBase.php
index 48498bd..30632ea 100644
--- a/src/Form/ProtectionRuleFormBase.php
+++ b/src/Form/ProtectionRuleFormBase.php
@@ -17,32 +17,32 @@ abstract class ProtectionRuleFormBase extends EntityForm {
   /**
    * The protection rule entity storage controller.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $protectionRuleStorage;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a base class for protection rule add and edit forms.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $protection_rule_storage
+   * @param EntityStorageInterface $protection_rule_storage
    *   The protection rule entity storage controller.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
diff --git a/src/Plugin/UserProtection/UserProtectionInterface.php b/src/Plugin/UserProtection/UserProtectionInterface.php
index 8fa2e09..e3e9e30 100644
--- a/src/Plugin/UserProtection/UserProtectionInterface.php
+++ b/src/Plugin/UserProtection/UserProtectionInterface.php
@@ -50,11 +50,11 @@ interface UserProtectionInterface extends PluginInspectionInterface, Configurabl
   /**
    * Checks if a given operation on an user should be protected.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user object to check access for.
    * @param string $op
    *   The operation that is to be performed on $user.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account trying to access the entity.
    *
    * @return bool
@@ -68,7 +68,7 @@ interface UserProtectionInterface extends PluginInspectionInterface, Configurabl
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
diff --git a/src/Plugin/UserProtection/UserProtectionManager.php b/src/Plugin/UserProtection/UserProtectionManager.php
index a9739ba..cdeffb3 100644
--- a/src/Plugin/UserProtection/UserProtectionManager.php
+++ b/src/Plugin/UserProtection/UserProtectionManager.php
@@ -17,9 +17,9 @@ class UserProtectionManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/UserProtection/UserProtectionPluginCollection.php b/src/Plugin/UserProtection/UserProtectionPluginCollection.php
index 28fc150..89cb0f3 100644
--- a/src/Plugin/UserProtection/UserProtectionPluginCollection.php
+++ b/src/Plugin/UserProtection/UserProtectionPluginCollection.php
@@ -79,9 +79,9 @@ class UserProtectionPluginCollection extends DefaultLazyPluginCollection {
   /**
    * Sorts plugin instances based on weight, label, provider or id.
    *
-   * @param \Drupal\userprotect\Plugin\UserProtection\UserProtectionInterface $a
+   * @param UserProtectionInterface $a
    *   The first plugin in the comparison.
-   * @param \Drupal\userprotect\Plugin\UserProtection\UserProtectionInterface $b
+   * @param UserProtectionInterface $b
    *   The second plugin in the comparison.
    *
    * @return int
diff --git a/src/UserProtect.php b/src/UserProtect.php
index f9d93d5..91be0af 100644
--- a/src/UserProtect.php
+++ b/src/UserProtect.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\userprotect;
 
+use Drupal\userprotect\Plugin\UserProtection\UserProtectionManager;
 /**
  * Provides wrappers for services.
  */
@@ -10,7 +11,7 @@ class UserProtect {
   /**
    * Returns the user protection plugin manager.
    *
-   * @return \Drupal\userprotect\Plugin\UserProtection\UserProtectionManager
+   * @return UserProtectionManager
    *   An instance of UserProtectionManager.
    */
   public static function pluginManager() {
diff --git a/src/UserProtectPermissions.php b/src/UserProtectPermissions.php
index f4961de..9edb1bd 100644
--- a/src/UserProtectPermissions.php
+++ b/src/UserProtectPermissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\userprotect;
 
+use Drupal\userprotect\Entity\ProtectionRuleInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,14 +18,14 @@ class UserProtectPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new UserProtectPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -47,7 +48,7 @@ class UserProtectPermissions implements ContainerInjectionInterface {
   public function permissions() {
     $permissions = [];
     // For each protection rule, create a permission to bypass the rule.
-    /** @var \Drupal\userprotect\Entity\ProtectionRuleInterface[] $rules */
+    /** @var ProtectionRuleInterface[] $rules */
     $rules = $this->entityTypeManager->getStorage('userprotect_rule')->loadMultiple();
     uasort($rules, 'Drupal\Core\Config\Entity\ConfigEntityBase::sort');
     foreach ($rules as $rule) {
diff --git a/tests/src/Functional/InstallTest.php b/tests/src/Functional/InstallTest.php
index c2e19d1..0cc04c7 100644
--- a/tests/src/Functional/InstallTest.php
+++ b/tests/src/Functional/InstallTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\userprotect\Functional;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -19,14 +21,14 @@ class InstallTest extends BrowserTestBase {
   /**
    * Module handler to ensure installed modules.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;
 
@@ -38,7 +40,7 @@ class InstallTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
@@ -62,7 +64,7 @@ class InstallTest extends BrowserTestBase {
     // Ensure an authenticated user can edit its own account.
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id() . '/edit');
-    $this->assertResponse(200, 'Authenticated user has access to edit page of own account.');
+    $this->assertSession()->statusCodeEquals(200, 'Authenticated user has access to edit page of own account.');
 
     // Uninstall userprotect.
     $this->moduleInstaller->uninstall(['userprotect']);
