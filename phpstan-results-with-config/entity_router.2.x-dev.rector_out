modules/contrib/entity_router/entity_router.api.php
modules/contrib/entity_router/src/Annotation/EntityResponseHandler.php
modules/contrib/entity_router/src/Controller/EntityRouterController.php
modules/contrib/entity_router/src/EntityResponseHandlerInterface.php
modules/contrib/entity_router/src/EntityResponseHandlerManager.php
modules/contrib/entity_router/src/Event/EntityResponseEvent.php
modules/contrib/entity_router/src/EventSubscriber.php
modules/contrib/entity_router/src/Plugin/EntityResponseHandler/JsonApiEntityResponseHandler.php
modules/contrib/entity_router/src/Response/EntityResponse.php

6 files with changes
====================

1) modules/contrib/entity_router/src/Response/EntityResponse.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_router/src/Plugin/EntityResponseHandler/JsonApiEntityResponseHandler.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * An instance of the "jsonapi.resource_type.repository" service.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
    *
    * NOTE: available in "jsonapi:2.x" only.
    *
-   * @var \Drupal\jsonapi\Controller\EntityResource|null
+   * @var EntityResource|null
    */
   protected $entityResource;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/entity_router/src/EventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_router;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheableResponseInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * An instance of the "event_dispatcher" service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * An instance of the "MODULE.plugin.manager.event_response_handler" service.
    *
-   * @var \Drupal\entity_router\EntityResponseHandlerManager
+   * @var EntityResponseHandlerManager
    */
   protected $entityResponseHandlerManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function onResponse(FilterResponseEvent $event): void {
+  public function onResponse(ResponseEvent $event): void {
     $response = $event->getResponse();

     if ($response instanceof EntityResponse) {
@@ @@
             );
         }

-        $this->eventDispatcher->dispatch(EntityResponseEvent::NAME, new EntityResponseEvent($request, $response, $entity));
+        $this->eventDispatcher->dispatch(new EntityResponseEvent($request, $response, $entity), EntityResponseEvent::NAME);
       }
       catch (PluginException $e) {
         $status = 400;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_router/src/Event/EntityResponseEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_router\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;

@@ @@
   /**
    * The inbound HTTP request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The response to send.
    *
-   * @var \Symfony\Component\HttpFoundation\Response
+   * @var Response
    */
   protected $response;

@@ @@
   /**
    * The requested entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_router/src/EntityResponseHandlerInterface.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the response for a given entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The inbound request.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity to generate a response for.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    *
    * @see \Drupal\entity_router\Response\EntityResponse
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/entity_router/src/Controller/EntityRouterController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_router\Controller;

+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\AccessAwareRouterInterface;
@@ @@
   /**
    * An instance of the "router" service.
    *
-   * @var \Drupal\Core\Routing\AccessAwareRouterInterface
+   * @var AccessAwareRouterInterface
    */
   protected $router;

@@ @@
   /**
    * Returns a JSON API resource by the path alias or redirect.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The inbound request.
    *
-   * @return \Drupal\entity_router\Response\EntityResponse
+   * @return EntityResponse
    *   The response.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    *
    * @example
    * GET /ROUTE?format=jsonapi&path=/node/1
@@ @@
    * @param string $path
    *   The internal path or alias of an entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity.
    */
   protected function getEntityByPath(string $path): ?EntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 6 files have been changed by Rector                                       

