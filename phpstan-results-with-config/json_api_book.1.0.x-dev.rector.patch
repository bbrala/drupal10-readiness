diff --git a/src/EventSubscriber/ResponseSubscriber.php b/src/EventSubscriber/ResponseSubscriber.php
index 2a1f5f9..0bfb80d 100644
--- a/src/EventSubscriber/ResponseSubscriber.php
+++ b/src/EventSubscriber/ResponseSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\json_api_book\EventSubscriber;
 
+use Drupal\node\NodeInterface;
 use Drupal\book\BookManagerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
@@ -19,14 +20,14 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected RouteMatchInterface $routeMatch;
 
   /**
    * The book manager service.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   protected BookManagerInterface $bookManager;
 
@@ -54,7 +55,7 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * ResponseSubscriber constructor.
    *
-   * @param \Drupal\book\BookManagerInterface $bookManager
+   * @param BookManagerInterface $bookManager
    */
   public function __construct(BookManagerInterface $bookManager) {
     $this->bookManager = $bookManager;
@@ -71,7 +72,7 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * Set route match service.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The  route match service.
    */
   public function setRouteMatch(RouteMatchInterface $route_match): void {
@@ -85,7 +86,7 @@ class ResponseSubscriber implements EventSubscriberInterface {
    * records are nodes to find optional book definitions for those nodes adding
    * them as the new attribute 'drupal_internal__book' to each applicable record.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The filter event.
    */
   public function onResponse(ResponseEvent $event): void {
@@ -148,7 +149,7 @@ class ResponseSubscriber implements EventSubscriberInterface {
         foreach ($references as $reference) {
           $refId = $this->loadedBookDefinitions[$nid][$reference];
           if (!isset($this->loadedUUIDs[$refId])) {
-            /** @var \Drupal\node\NodeInterface $node */
+            /** @var NodeInterface $node */
             $node = Node::load($refId);
             if (!$node) {
               continue;
