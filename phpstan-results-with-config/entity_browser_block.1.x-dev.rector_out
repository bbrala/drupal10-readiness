modules/contrib/entity_browser_block/src/Plugin/Block/EntityBrowserBlock.php
modules/contrib/entity_browser_block/src/Plugin/Derivative/EntityBrowserBlockDeriver.php
modules/contrib/entity_browser_block/tests/src/FunctionalJavascript/EntityBrowserBlockTest.php

3 files with changes
====================

1) modules/contrib/entity_browser_block/tests/src/FunctionalJavascript/EntityBrowserBlockTest.php:60

    ---------- begin diff ----------
@@ @@
     $this->assertSession()->pageTextContains('alpaca.jpg');

     // Save the block.
-    $this->drupalPostForm(NULL, ['region' => 'content'], 'Save block');
+    $this->submitForm(['region' => 'content'], 'Save block');
     $this->assertSession()->pageTextContains('The block configuration has been saved.');

     // Edit the block and ensure the configuration persists.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_browser_block/src/Plugin/Derivative/EntityBrowserBlockDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_block\Plugin\Derivative;

+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The browser storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $browserStorage;

@@ @@
   /**
    * Constructs a EntityBrowserBlockDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $browser_storage
+   * @param EntityStorageInterface $browser_storage
    *   The browser storage.
    */
   public function __construct(EntityStorageInterface $browser_storage) {
@@ @@
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface[] $browsers */
+    /** @var EntityBrowserInterface[] $browsers */
     $browsers = $this->browserStorage->loadMultiple();
     // Reset the discovered definitions.
     $this->derivatives = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_browser_block/src/Plugin/Block/EntityBrowserBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser_block\Plugin\Block;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Block\BlockBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ @@
    * @param array $ids
    *   An array of IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of loaded entities, keyed by an ID.
    */
   public static function loadEntitiesByIDs($ids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

