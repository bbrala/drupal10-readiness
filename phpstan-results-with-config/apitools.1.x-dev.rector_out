modules/contrib/apitools/apitools.module
modules/contrib/apitools/src/Annotation/ApiToolsClient.php
modules/contrib/apitools/src/Annotation/ApiToolsClientObject.php
modules/contrib/apitools/src/Annotation/ApiToolsModel.php
modules/contrib/apitools/src/Annotation/ResponseObject.php
modules/contrib/apitools/src/Batch/BatchBuilder.php
modules/contrib/apitools/src/Batch/BatchProcessorInterface.php
modules/contrib/apitools/src/ClientBase.php
modules/contrib/apitools/src/ClientInterface.php
modules/contrib/apitools/src/ClientManager.php
modules/contrib/apitools/src/ClientManagerInterface.php
modules/contrib/apitools/src/ClientObject.php
modules/contrib/apitools/src/ClientObjectCollection.php
modules/contrib/apitools/src/ClientObjectControllerBase.php
modules/contrib/apitools/src/ClientObjectControllerDefault.php
modules/contrib/apitools/src/ClientObjectControllerInterface.php
modules/contrib/apitools/src/ClientObjectInterface.php
modules/contrib/apitools/src/ClientObjectManager.php
modules/contrib/apitools/src/ClientObjectManagerInterface.php
modules/contrib/apitools/src/EntityDecoratorInterface.php
modules/contrib/apitools/src/EntityDecoratorTrait.php
modules/contrib/apitools/src/ExtensibleObjectTrait.php
modules/contrib/apitools/src/FormAlter/FormAlterBase.php
modules/contrib/apitools/src/ModelBase.php
modules/contrib/apitools/src/ModelControllerBase.php
modules/contrib/apitools/src/ModelControllerDefault.php
modules/contrib/apitools/src/ModelControllerInterface.php
modules/contrib/apitools/src/ModelInterface.php
modules/contrib/apitools/src/ModelManager.php
modules/contrib/apitools/src/ModelManagerInterface.php
modules/contrib/apitools/src/Plugin/Action/WorkflowStateAction.php
modules/contrib/apitools/src/Plugin/Field/FieldFormatter/DateRangeCombined.php
modules/contrib/apitools/src/Plugin/migrate/process/Deepen.php
modules/contrib/apitools/src/Plugin/migrate_plus/data_fetcher/Http.php
modules/contrib/apitools/src/Plugin/views/relationship/Delta.php
modules/contrib/apitools/src/ResponseObject.php
modules/contrib/apitools/src/ResponseObjectInterface.php
modules/contrib/apitools/src/ResponseObjectManager.php
modules/contrib/apitools/src/ResponseObjectManagerInterface.php
modules/contrib/apitools/src/SerializableObjectInterface.php
modules/contrib/apitools/src/SerializableObjectTrait.php
modules/contrib/apitools/src/SyncManager.php
modules/contrib/apitools/src/Testing/ExistingSiteBase.php
modules/contrib/apitools/src/Update/BatchUpdater.php
modules/contrib/apitools/src/Update/ContentUpdater.php
modules/contrib/apitools/src/Update/FieldUpdater.php
modules/contrib/apitools/src/Update/Updater.php
modules/contrib/apitools/src/Utility/ArrayIterator.php
modules/contrib/apitools/src/Utility/ArrayObject.php
modules/contrib/apitools/src/Utility/FieldUtils.php
modules/contrib/apitools/src/Utility/ParameterBag.php
modules/contrib/apitools/src/WorkflowStateActionEvent.php
modules/contrib/apitools/tests/Testing.php
modules/contrib/apitools/tests/modules/apitools_test/apitools_test.module
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client/Address.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client/AddressController.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client/Customer.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client/CustomerController.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client/Location.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Response/Customer.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Response/CustomerInterest.php
modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Response/Location.php
modules/contrib/apitools/tests/src/Traits/ArraySubset.php
modules/contrib/apitools/tests/src/Traits/EmailTestTrait.php

25 files with changes
=====================

1) modules/contrib/apitools/tests/src/Traits/ArraySubset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apitools\Traits;

+use SebastianBergmann\RecursionContext\InvalidArgumentException;
 use PHPUnit\Framework\Constraint\Constraint;
 use PHPUnit\Framework\ExpectationFailedException;
 use SebastianBergmann\Comparator\ComparisonFailure;
@@ @@
    * @param bool $returnResult Whether to return a result or throw an exception
    *
    * @throws ExpectationFailedException
-   * @throws \SebastianBergmann\RecursionContext\InvalidArgumentException
+   * @throws InvalidArgumentException
    */
   public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
   {
@@ @@
   /**
    * Returns a string representation of the constraint.
    *
-   * @throws \SebastianBergmann\RecursionContext\InvalidArgumentException
+   * @throws InvalidArgumentException
    */
   public function toString(): string
   {
@@ @@
    *
    * @param mixed $other evaluated value or object
    *
-   * @throws \SebastianBergmann\RecursionContext\InvalidArgumentException
+   * @throws InvalidArgumentException
    */
   protected function failureDescription($other): string
   {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client/CustomerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools_test\Plugin\ApiTools\Client;

+use Drupal\user\Entity\User;
 use Drupal\apitools\ClientObjectControllerDefault;
 use Drupal\profile\Entity\ProfileInterface;
 use Drupal\user\UserInterface;
@@ @@
   }

   public function getByUid($uid, array $options = []) {
-    if (!$user = \Drupal\user\Entity\User::load($uid)) {
+    if (!$user = User::load($uid)) {
       return FALSE;
     }
     return $this->getByUser($user);
@@ @@
   }

   public function getIdByUid($uid, array $options = []) {
-    if ($user = \Drupal\user\Entity\User::load($uid)) {
+    if ($user = User::load($uid)) {
       return $this->getIdByUser($user, $options);
     }
     return FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client/AddressController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools_test\Plugin\ApiTools\Client;

+use Drupal\commerce_mxmerchant\Plugin\ApiTools\Model\Address;
+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\apitools\ClientObjectControllerDefault;

 class AddressController extends ClientObjectControllerDefault {

   public static function getAddressMapping($type = 'all') {
-    return \Drupal\commerce_mxmerchant\Plugin\ApiTools\Model\Address::getAddressMapping($type);
+    return Address::getAddressMapping($type);
   }

-  public function createFromProfile(\Drupal\profile\Entity\ProfileInterface $profile) {
+  public function createFromProfile(ProfileInterface $profile) {
     $model = $this->create([])->setProfile($profile);
     $address = $profile->address->first()->getValue();
     foreach (self::getAddressMapping() as $drupal_key => $mx_key) {
@@ @@
   /**
    * Loads an address with a customer context.
    */
-  public function getByProfile(\Drupal\profile\Entity\ProfileInterface $profile) {
+  public function getByProfile(ProfileInterface $profile) {
     $address = FALSE;
     if ($id = $profile->commerce_remote_id->remote_id) {
       if (!$customer = $this->getClient()->customers->getByProfile($profile)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/apitools/tests/modules/apitools_test/src/Plugin/ApiTools/Client.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools_test\Plugin\ApiTools;

+use Drupal\apitools\Utility\ParameterBag;
 use Drupal\apitools\ClientBase;
 use Drupal\apitools\ClientManagerInterface;
 use Drupal\apitools\ObjectManagerInterface;
@@ @@
       // create a new mxmerchant client from that.
       $configuration = $gateway->getPluginConfiguration();

-      $this->params = new \Drupal\apitools\Utility\ParameterBag([
+      $this->params = new ParameterBag([
         'oauth_callback' => '',
         'oauth_consumer_key' => '',
         'oauth_nonce' => sha1(microtime()),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/apitools/tests/Testing.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\apitools_test\Plugin\ApiTools\Client;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Url;

@@ @@
   public static function run() {
     $client_manager = \Drupal::service('plugin.manager.apitools_client');
     $client_manager->clearCachedDefinitions();
-    /** @var \Drupal\apitools_test\Plugin\ApiTools\Client $client */
+    /** @var Client $client */
     $client = $client_manager->load('apitools_test_client');
     $client->oauth();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/apitools/src/WorkflowStateActionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\Core\Entity\EntityInterface;
 use Symfony\Contracts\EventDispatcher\Event;

 class WorkflowStateActionEvent extends Event implements \IteratorAggregate {
@@ @@
   /**
    * Get the updated entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getEntities() {
     return $this->entities;
@@ @@
   /**
    * Set the updated entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   An array of the updated entity objects.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/apitools/src/Utility/FieldUtils.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools\Utility;

+use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
    * If the field has a value, return the value of that field. If not, return
    * false.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
    * @param string $field_name
    *   The field name to check for.
    *
-   * @return \Drupal\Core\Field\FieldItemList|bool
+   * @return FieldItemList|bool
    *   Whether we can use this field on this entity. Returns the field value.
    */
   public static function checkField(ContentEntityInterface $entity, $field_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/apitools/src/Update/FieldUpdater.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools\Update;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Database\StatementInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\FileStorage;
@@ @@
   use DependencySerializationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface;
+   * @var EntityTypeManagerInterface ;
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
+   * @var EntityDefinitionUpdateManagerInterface ;
    */
   protected $entityDefinitionUpdateManager;

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface;
+   * @var EntityFieldManagerInterface ;
    */
   protected $entityFieldManager;

   /**
-   * @var \Drupal\Core\Database\Connection;
+   * @var Connection ;
    */
   protected $database;

   /**
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepository;
+   * @var EntityLastInstalledSchemaRepository ;
    */
   protected $entityLastInstalledSchemaRepository;

   /**
-   * @var \Drupal\Core\Config\StorageInterface;
+   * @var StorageInterface ;
    */
   protected $configStorage;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface;
+   * @var ConfigFactoryInterface ;
    */
   protected $configFactory;

@@ @@
    * @param $field_name
    *   The field machine name.
    * @return mixed
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function fetchFieldSharedStorageRevisionData($entity_type_id, $field_name) {
     $id_key = $this->entityTypeManager->getDefinition($entity_type_id)->getKey('revision_id');
@@ @@
    * @param $field_name
    *   The field machine name.
    * @return mixed
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function fetchFieldSharedStorageData($entity_type_id, $field_name) {
     $id_key = $this->entityTypeManager->getDefinition($entity_type_id)->getKey('id');
@@ @@
    *   The entity type id.
    * @param $field_name
    *   The field machine name.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function populateFieldSharedStorageRevisionData(array $data, $entity_type_id, $field_name) {
     $id_key = $this->entityTypeManager->getDefinition($entity_type_id)->getKey('revision_id');
@@ @@
    *   The entity type id.
    * @param $field_name
    *   The field machine name.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function populateFieldSharedStorageData(array $data, $entity_type_id, $field_name) {
     $id_key = $this->entityTypeManager->getDefinition($entity_type_id)->getKey('id');
@@ @@
    *   The entity type id.
    * @param $field_name
    *   The field machine name.
-   * @return \Drupal\Core\Database\StatementInterface|int|string|null
+   * @return StatementInterface|int|string|null
    */
   public function clearFieldDedicatedStorageRevisionData($entity_type_id, $field_name) {
     return $this->doClearFieldStorageData($entity_type_id, $field_name, TRUE, FALSE);
@@ @@
    *   The entity type id.
    * @param $field_name
    *   The field machine name.
-   * @return \Drupal\Core\Database\StatementInterface|int|string|null
+   * @return StatementInterface|int|string|null
    */
   public function clearFieldDedicatedStorageData($entity_type_id, $field_name) {
     return $this->doClearFieldStorageData($entity_type_id, $field_name, FALSE, FALSE);
@@ @@
    *   The entity type id.
    * @param $field_name
    *   The field machine name.
-   * @return \Drupal\Core\Database\StatementInterface|int|string|null
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return StatementInterface|int|string|null
+   * @throws PluginNotFoundException
    */
   public function clearFieldSharedStorageRevisionData($entity_type_id, $field_name) {
     $id_key = $this->entityTypeManager->getDefinition($entity_type_id)->getKey('revision_id');
@@ @@
    *   The entity type id.
    * @param $field_name
    *   The field machine name.
-   * @return \Drupal\Core\Database\StatementInterface|int|string|null
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return StatementInterface|int|string|null
+   * @throws PluginNotFoundException
    */
   public function clearFieldSharedStorageData($entity_type_id, $field_name) {
     $id_key = $this->entityTypeManager->getDefinition($entity_type_id)->getKey('id');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/apitools/src/SyncManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\apitools\ClientManagerInterface definition.
    *
-   * @var \Drupal\apitools\ClientManagerInterface
+   * @var ClientManagerInterface
    */
   protected $client;

@@ @@
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The logger channel if set in services.yml.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\apitools\ClientManagerInterface $client_manager
+   * @param ClientManagerInterface $client_manager
    *   ApiTools client plugin manager.
    * @param QueueFactory $queue_factory
    *   Queue factory services.
@@ @@
    * @param $vocab
    *   The vocabulary to specify in the query.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function ensureTermByFieldValue($field_name, $field_value, $term_name, $vocab) {
     if (empty($field_name) || !isset($field_value)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/apitools/src/ResponseObjectManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;

 interface ResponseObjectManagerInterface {
@@ @@
    *
    * @param $plugin_id
    * @param array $values
-   * @return \Drupal\apitools\ResponseObjectInterface
+   * @return ResponseObjectInterface
    *
    * @throws \Drupal\Component\Plugin\Exception\PluginException
    */
@@ @@
    *
    * @param $plugin_id
    * @param EntityInterface $entity
-   * @return \Drupal\apitools\ResponseObjectInterface
+   * @return ResponseObjectInterface
    *
    * @throws \Drupal\Component\Plugin\Exception\PluginException
    */
@@ @@
   /**
    * @param $plugin_id
    * @param $entity_id
-   * @return \Drupal\apitools\ResponseObjectInterface
+   * @return ResponseObjectInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function loadFromBaseEntity($plugin_id, $entity_id);

@@ @@
    * @param $entity_id
    * @return ResponseObjectInterface|false|object
    * @throws PluginException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadFromBaseEntityId($plugin_id, $entity_id);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/apitools/src/ResponseObjectManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * @param $plugin_id
    * @return false|mixed|null
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getBaseEntityTypeId($plugin_id) {
     if (!$definition = $this->getDefinition($plugin_id, FALSE)) {
@@ @@
   /**
    * @param ResponseObjectInterface $instance
    * @param $configuration
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function initBaseEntity(ResponseObjectInterface $instance, $configuration) {
     $definition = $instance->getPluginDefinition();
@@ @@
    * @param $plugin_id
    * @return bool
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function isBaseEntityPlugin($plugin_id) {
     $definition = $this->getDefinition($plugin_id, FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/apitools/src/ResponseObject.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\Component\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
    * @param $name
    *   The Id of the context in context_definitions.
    *
-   * @return \Drupal\Component\Plugin\Context\ContextDefinitionInterface|mixed
+   * @return ContextDefinitionInterface|mixed
    *
    * @throws ContextException
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/apitools/src/Plugin/Field/FieldFormatter/DateRangeCombined.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the markup array for the date range.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The date_range start date.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The date_range end date.
    */
   protected function buildCombinedDate(DrupalDateTime $start_date, DrupalDateTime $end_date = NULL) {
@@ @@
   /**
    * Formats the combined date_range values.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The date_range start date.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The date_range end date.
    */
   protected function formatCombinedDate(DrupalDateTime $start_date, DrupalDateTime $end_date) {
@@ @@

     foreach ($items as $delta => $item) {
       if (!empty($item->start_date) && !empty($item->end_date)) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+        /** @var DrupalDateTime $start_date */
         $start_date = $item->start_date;
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+        /** @var DrupalDateTime $end_date */
         $end_date = $item->end_date;

         $elements[$delta] = $this->buildCombinedDate($start_date, $end_date);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/apitools/src/Plugin/Action/WorkflowStateAction.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
     $event->setOriginalStatuses($original_statuses)
       ->setToState($this->configuration['state_id']);

-    $this->eventDispatcher->dispatch("entity.bulk_pre_update", $event);
+    $this->eventDispatcher->dispatch($event, "entity.bulk_pre_update");
     $this->eventDispatcher->dispatch("entity.$entity_type.bulk_pre_update", $event);
     parent::executeMultiple($entities);
-    $this->eventDispatcher->dispatch("entity.bulk_post_update", $event);
+    $this->eventDispatcher->dispatch($event, "entity.bulk_post_update");
     $this->eventDispatcher->dispatch("entity.$entity_type.bulk_post_update", $event);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/apitools/src/ModelManager.php:34

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/apitools/src/ModelControllerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

 /**
@@ @@
    *
    * @see \Drupal\Core\Entity\EntityHandlerInterface::createInstance()
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/apitools/src/ClientObjectManager.php:31

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/apitools/src/ClientObjectControllerInterface.php:18

    ---------- begin diff ----------
@@ @@
    *
    * @see \Drupal\Core\Entity\EntityHandlerInterface::createInstance()
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this object should use.
    * @param array $configuration
    *   Plugin configuration to pass to new instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/apitools/src/ClientObjectControllerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use Drupal\Component\Plugin\Exception\InvalidDecoratedMethod;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@

   protected function sendRequest($controller_method, $client_method, $id = NULL, $options = []) {
     if (!$path = $this->buildPath($controller_method, $id)) {
-      throw new \Drupal\Component\Plugin\Exception\InvalidDecoratedMethod($this->t('No path defined for @method', ['@method' => $controller_method]));
+      throw new InvalidDecoratedMethod($this->t('No path defined for @method', ['@method' => $controller_method]));
     }
     return $this->request($client_method, $path, $options);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/apitools/src/ClientManager.php:17

    ---------- begin diff ----------
@@ @@
 class ClientManager extends DefaultPluginManager implements ClientManagerInterface {

   /**
-   * @var \GuzzleHttp\HandlerStack
+   * @var HandlerStack
    */
   protected $http;

   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;

   /**
-   * @var \Drupal\apitools\ClientObjectManagerInterface
+   * @var ClientObjectManagerInterface
    *
    * @deprecated
    *   Use $this->clientObjectManager
@@ @@
   protected $modelManager;

   /**
-   * @var \Drupal\apitools\ClientObjectManagerInterface
+   * @var ClientObjectManagerInterface
    */
   protected $clientObjectManager;

   /**
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;

   /**
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempStoreFactory;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, HandlerStack $handler_stack, ClientFactory $client_factory, ClientObjectManagerInterface $model_manager, KeyRepositoryInterface $key_repository, SharedTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/apitools/src/ClientBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools;

+use GuzzleHttp\Client;
 use Drupal\Core\Http\ClientFactory as HttpClient;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\TempStore\SharedTempStore;
@@ @@
   protected $options;

   /**
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/apitools/src/Annotation/ResponseObject.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


23) modules/contrib/apitools/src/Annotation/ApiToolsModel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


24) modules/contrib/apitools/src/Annotation/ApiToolsClientObject.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


25) modules/contrib/apitools/src/Annotation/ApiToolsClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apitools\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [ERROR] Could not process                                                      
         "modules/contrib/apitools/src/Testing/ExistingSiteBase.php" file, due to:
                                                                                
         "Analyze error: "Class weitzman\DrupalTestTraits\ExistingSiteBase not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/apitools/src/Plugin/migrate_plus/data_fetcher/Http.php"
         file, due to:                                                          
         "Analyze error: "Class                                                 
         Drupal\migrate_plus\Plugin\migrate_plus\data_fetcher\Http not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

