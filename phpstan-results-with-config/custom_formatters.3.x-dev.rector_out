modules/contrib/custom_formatters/custom_formatters.api.php
modules/contrib/custom_formatters/custom_formatters.install
modules/contrib/custom_formatters/custom_formatters.module
modules/contrib/custom_formatters/src/Annotation/FormatterExtras.php
modules/contrib/custom_formatters/src/Annotation/FormatterType.php
modules/contrib/custom_formatters/src/Controller/CustomFormattersController.php
modules/contrib/custom_formatters/src/Entity/Formatter.php
modules/contrib/custom_formatters/src/Form/CustomFormattersSettingsForm.php
modules/contrib/custom_formatters/src/Form/FormatterForm.php
modules/contrib/custom_formatters/src/FormatterAccessControlHandler.php
modules/contrib/custom_formatters/src/FormatterExtrasBase.php
modules/contrib/custom_formatters/src/FormatterExtrasInterface.php
modules/contrib/custom_formatters/src/FormatterExtrasManager.php
modules/contrib/custom_formatters/src/FormatterInterface.php
modules/contrib/custom_formatters/src/FormatterListBuilder.php
modules/contrib/custom_formatters/src/FormatterTypeBase.php
modules/contrib/custom_formatters/src/FormatterTypeInterface.php
modules/contrib/custom_formatters/src/FormatterTypeManager.php
modules/contrib/custom_formatters/src/Plugin/CustomFormatters/FormatterExtras/Contextual.php
modules/contrib/custom_formatters/src/Plugin/CustomFormatters/FormatterType/FormatterPreset.php
modules/contrib/custom_formatters/src/Plugin/CustomFormatters/FormatterType/HTMLToken.php
modules/contrib/custom_formatters/src/Plugin/CustomFormatters/FormatterType/PHP.php
modules/contrib/custom_formatters/src/Plugin/CustomFormatters/FormatterType/Twig.php
modules/contrib/custom_formatters/src/Plugin/Derivative/CustomFormatters.php
modules/contrib/custom_formatters/src/Plugin/Field/FieldFormatter/CustomFormatters.php
modules/contrib/custom_formatters/src/Tests/CustomFormattersGeneralTest.php
modules/contrib/custom_formatters/src/Tests/CustomFormattersTestBase.php
modules/contrib/custom_formatters/tests/modules/custom_formatters_test/custom_formatters_test.module

10 files with changes
=====================

1) modules/contrib/custom_formatters/src/Plugin/Field/FieldFormatter/CustomFormatters.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_formatters\Plugin\Field\FieldFormatter;

+use Drupal\custom_formatters\FormatterInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\custom_formatters\FormatterInterface $formatter */
+    /** @var FormatterInterface $formatter */
     $formatter = \Drupal::entityTypeManager()
       ->getStorage('formatter')
       ->load($this->getPluginDefinition()['formatter']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/custom_formatters/src/Plugin/Derivative/CustomFormatters.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_formatters\Plugin\Derivative;

+use Drupal\custom_formatters\FormatterInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;

 /**
@@ @@
     $formatters = \Drupal::entityTypeManager()
       ->getStorage('formatter')
       ->loadMultiple();
-    /** @var \Drupal\custom_formatters\FormatterInterface $formatter */
+    /** @var FormatterInterface $formatter */
     foreach ($formatters as $formatter) {
       if ($formatter->get('status')) {
         $this->derivatives[$formatter->id()] = $base_plugin_definition;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/custom_formatters/src/Plugin/CustomFormatters/FormatterType/FormatterPreset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_formatters\Plugin\CustomFormatters\FormatterType;

+use Drupal\Core\Field\FormatterPluginManager;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Field\FormatterInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Formatter plugin manager.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $formatterManager = NULL;

@@ @@
     $formatters = $this->formatterManager->getDefinitions();
     foreach ($formatters as $formatter_name => $formatter) {
       if (in_array($field_type, $formatter['field_types'])) {
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+        /** @var TranslatableMarkup $label */
         $label = $formatter['label'];
         $options[$formatter_name] = $label->render();
       }
@@ @@
    * @param string $field_type
    *   The field type.
    *
-   * @return \Drupal\Core\Field\FormatterInterface
+   * @return FormatterInterface
    *   A dummy formatter instance.
    */
   protected function getFormatter($formatter_name, $field_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/custom_formatters/src/FormatterTypeInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a renderable array for a field value.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values to be rendered.
    * @param string $langcode
    *   The language that should be used to render the field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/custom_formatters/src/FormatterTypeBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Formatter entity.
    *
-   * @var \Drupal\custom_formatters\FormatterInterface
+   * @var FormatterInterface
    */
   protected $entity = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/custom_formatters/src/FormatterListBuilder.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new FormatterListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, FormatterTypeManager $formatter_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\custom_formatters\FormatterInterface $formatter */
+    /** @var FormatterInterface $formatter */
     $formatter = $entity;

     $row['label'] = $formatter->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/custom_formatters/src/FormatterExtrasBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Formatter entity.
    *
-   * @var \Drupal\custom_formatters\FormatterInterface
+   * @var FormatterInterface
    */
   protected $entity = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/custom_formatters/src/Form/FormatterForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_formatters\Form;

+use Drupal\custom_formatters\FormatterInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Field\FormatterPluginManager;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\custom_formatters\FormatterInterface
+   * @var FormatterInterface
    */
   protected $entity;

@@ @@
       }
       $list[$entity_type_id]['#items'][$entity->id()] = $entity->label() ?: $entity->id();
     }
-    return render($list);
+    return \Drupal::service('renderer')->render($list);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/custom_formatters/src/Entity/Formatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_formatters\Entity;

+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\custom_formatters\FormatterExtrasInterface;
+use Drupal\custom_formatters\FormatterTypeManager;
+use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
    */
   public function calculateDependencies() {
     // Custom Formatter Type provider.
-    /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager */
+    /** @var FieldTypePluginManagerInterface $field_type_manager */
     $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
     $field_type_definitions = $field_type_manager->getDefinitions();
     /** @var string $field_type */
@@ @@
     }

     // Custom Formatter Extras.
-    /** @var \Drupal\custom_formatters\FormatterExtrasInterface $extras_manager */
+    /** @var FormatterExtrasInterface $extras_manager */
     $extras_manager = \Drupal::service('plugin.manager.custom_formatters.formatter_extras');
     $extras = $extras_manager->getDefinitions();
     if (isset($extras) && is_array($extras)) {
@@ @@
    * {@inheritdoc}
    */
   public function getFormatterType() {
-    /** @var \Drupal\custom_formatters\FormatterTypeManager $plugin_manager */
+    /** @var FormatterTypeManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.custom_formatters.formatter_type');

     // Ensure Formatter Type exists.
@@ @@
    * {@inheritdoc}
    */
   public function getDependentEntities() {
-    /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+    /** @var ConfigManagerInterface $config_manager */
     $config_manager = \Drupal::service('config.manager');

     // Get the dependent entities.
@@ @@
    * {@inheritdoc}
    */
   public static function postLoad(EntityStorageInterface $storage, array &$entities) {
-    /** @var \Drupal\custom_formatters\FormatterInterface $entity */
+    /** @var FormatterInterface $entity */
     foreach ($entities as $entity) {
       if ($entity->getFormatterType()) {
         $entity->getFormatterType()->postLoad();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/custom_formatters/src/Controller/CustomFormattersController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_formatters\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\custom_formatters\FormatterInterface;
@@ @@
   /**
    * Displays add content links for available formatter types.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the formatter types that can be added;
    *   however, if there is only one formatter type available for the user, the
    *   function will return a RedirectResponse to the formatter add page for
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/custom_formatters/src/Tests/CustomFormattersTestBase.php
         " file, due to:                                                        
         "Analyze error: "Class Drupal\simpletest\WebTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/custom_formatters/src/Tests/CustomFormattersGeneralTest.
         php" file, due to:                                                     
         "Analyze error: "Class Drupal\simpletest\WebTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

