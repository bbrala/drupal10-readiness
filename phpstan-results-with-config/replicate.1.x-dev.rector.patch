diff --git a/replicate.drush.inc b/replicate.drush.inc
index c356a4a..030c7c5 100644
--- a/replicate.drush.inc
+++ b/replicate.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\replicate\Replicator;
 /**
  * @file
  * Replicate entities via drush framework.
@@ -43,7 +44,7 @@ function replicate_drush_help($command) {
  */
 function drush_replicate_drush_entity_by_ids($entity_type = NULL, $ids = NULL) {
   $original_ids = explode(',', $ids);
-  /** @var \Drupal\replicate\Replicator $replicator */
+  /** @var Replicator $replicator */
   $replicator = \Drupal::service('replicate.replicator');
 
   foreach ($original_ids as $original_id) {
diff --git a/src/Events/ReplicateAlterEvent.php b/src/Events/ReplicateAlterEvent.php
index 220563c..94bdbdb 100644
--- a/src/Events/ReplicateAlterEvent.php
+++ b/src/Events/ReplicateAlterEvent.php
@@ -7,7 +7,7 @@ use Drupal\Core\Entity\EntityInterface;
 class ReplicateAlterEvent extends ReplicateEventBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $original;
 
@@ -17,7 +17,7 @@ class ReplicateAlterEvent extends ReplicateEventBase {
   }
 
   /**
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getOriginal() {
     return $this->original;
diff --git a/src/Events/ReplicateEntityFieldEvent.php b/src/Events/ReplicateEntityFieldEvent.php
index 6b42383..44b7f28 100644
--- a/src/Events/ReplicateEntityFieldEvent.php
+++ b/src/Events/ReplicateEntityFieldEvent.php
@@ -10,16 +10,16 @@ class ReplicateEntityFieldEvent extends ReplicateEventBase {
   /**
    * The field item list.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $fieldItemList;
 
   /**
    * Creates a new ReplicateEntityFieldEvent instance.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field_item_list
+   * @param FieldItemListInterface $field_item_list
    *   The field item list.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function __construct(FieldItemListInterface $field_item_list, EntityInterface $entity) {
diff --git a/src/Events/ReplicateEventBase.php b/src/Events/ReplicateEventBase.php
index 03d88ea..5526b10 100644
--- a/src/Events/ReplicateEventBase.php
+++ b/src/Events/ReplicateEventBase.php
@@ -8,7 +8,7 @@ use Drupal\Core\Entity\EntityInterface;
 abstract class ReplicateEventBase extends Event {
 
   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
@@ -17,7 +17,7 @@ abstract class ReplicateEventBase extends Event {
   }
 
   /**
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity() {
     return $this->entity;
diff --git a/src/Replicator.php b/src/Replicator.php
index bfe4648..53c66e2 100644
--- a/src/Replicator.php
+++ b/src/Replicator.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\replicate;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -28,23 +32,23 @@ class Replicator {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Creates a new Replicator instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ -61,14 +65,14 @@ class Replicator {
    * @param int $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures, an exception is thrown.
    */
   public function replicateByEntityId($entity_type_id, $entity_id) {
@@ -80,17 +84,17 @@ class Replicator {
   /**
    * Replicate a entity and save it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures, an exception is thrown.
    */
   public function replicateEntity(EntityInterface $entity) {
@@ -110,12 +114,12 @@ class Replicator {
    * @param int $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function cloneByEntityId($entity_type_id, $entity_id) {
@@ -127,10 +131,10 @@ class Replicator {
   /**
    * Clone a entity without saving.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The cloned entity.
    */
   public function cloneEntity(EntityInterface $entity) {
@@ -155,14 +159,14 @@ class Replicator {
    * We can not create and return the target field here, because it needs to
    * know its parent entity, which can not be changed after creation.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to clone.
-   * @param \Drupal\Core\Field\FieldItemListInterface $target_field
+   * @param FieldItemListInterface $target_field
    *   The field to clone into.
    *
    * @throws \InvalidArgumentException
    *   If the value input is inappropriate.
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws ReadOnlyException
    *   If the data is read-only.
    */
   public function cloneEntityField(FieldItemListInterface $field, FieldItemListInterface $target_field) {
@@ -176,7 +180,7 @@ class Replicator {
    *
    * A public API method so modules can e.g. clone a field partially.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $target_field
+   * @param FieldItemListInterface $target_field
    *   The cloned field.
    */
   public function postCloneEntityField(FieldItemListInterface $target_field) {
@@ -200,7 +204,7 @@ class Replicator {
   /**
    * Fires events for each field of a fieldable entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $clone
+   * @param FieldableEntityInterface $clone
    *   The cloned fieldable entity.
    */
   protected function dispatchEventCloneEntityFields(FieldableEntityInterface $clone) {
@@ -212,11 +216,11 @@ class Replicator {
   /**
    * Fires events for a single field of a fieldable entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $clone
+   * @param FieldableEntityInterface $clone
    *   The cloned fieldable entity.
    * @param $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    */
   private function dispatchEventCloneEntityField(FieldableEntityInterface $clone, $field_name, FieldDefinitionInterface $field_definition) {
diff --git a/tests/src/Unit/ReplicatorTest.php b/tests/src/Unit/ReplicatorTest.php
index 0daf3ae..aebd232 100644
--- a/tests/src/Unit/ReplicatorTest.php
+++ b/tests/src/Unit/ReplicatorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\replicate\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -23,6 +24,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class ReplicatorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the cloneEntity method.
    *
