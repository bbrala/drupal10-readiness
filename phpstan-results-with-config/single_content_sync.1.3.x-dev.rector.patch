diff --git a/single_content_sync.api.php b/single_content_sync.api.php
index 6725b7d..71caef0 100644
--- a/single_content_sync.api.php
+++ b/single_content_sync.api.php
@@ -18,7 +18,7 @@ use Drupal\Core\Field\FieldItemListInterface;
  *
  * @param array|string|bool $value
  *   The original value after exporting.
- * @param \Drupal\Core\Field\FieldItemListInterface $field
+ * @param FieldItemListInterface $field
  *   The field item list.
  *
  * @return array|string|bool
@@ -41,7 +41,7 @@ function hook_content_export_field_value_alter(&$value, FieldItemListInterface $
  *
  * @param array $base_fields
  *   The original value of base fields during the import.
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity to be exported.
  */
 function hook_content_export_entity_alter(array &$base_fields, FieldableEntityInterface $entity) {
@@ -57,7 +57,7 @@ function hook_content_export_entity_alter(array &$base_fields, FieldableEntityIn
  *
  * @param array $content
  *   The content array of entity to be imported.
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity to be imported which is just created or updated.
  */
 function hook_content_import_entity_alter(array $content, FieldableEntityInterface &$entity = NULL) {
@@ -75,7 +75,7 @@ function hook_content_import_entity_alter(array $content, FieldableEntityInterfa
 /**
  * Perform alterations on the importing field value.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity to be imported which is just created or updated.
  * @param string $field_name
  *   The name of the field where imported value should be set.
diff --git a/single_content_sync.install b/single_content_sync.install
index 3aa430c..ebf70c9 100644
--- a/single_content_sync.install
+++ b/single_content_sync.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Install/update module.
@@ -12,10 +13,10 @@ use Drupal\Core\Config\FileStorage;
  */
 function single_content_sync_update_9121(&$sandbox) {
   // Get file storage of optional configs in the module.
-  $config_path = drupal_get_path('module', 'single_content_sync') . '/config/install';
+  $config_path = \Drupal::service('extension.list.module')->getPath('single_content_sync') . '/config/install';
   $source = new FileStorage($config_path);
 
-  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
+  /** @var StorageInterface $config_storage */
   $config_storage = \Drupal::service('config.storage');
 
   $config_names = [
diff --git a/single_content_sync.module b/single_content_sync.module
index 97b392b..74f8c29 100644
--- a/single_content_sync.module
+++ b/single_content_sync.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Single Content Sync module functionality.
@@ -15,7 +16,7 @@ use Drupal\Core\Url;
 function single_content_sync_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'single_content_sync.node_export':
-      /** @var \Drupal\node\NodeInterface $node */
+      /** @var NodeInterface $node */
       $node = $route_match->getParameter('node');
       $output = '';
       $output .= '<p>' . t('Here is the exported content of %title in %language.', [
diff --git a/src/ContentExporter.php b/src/ContentExporter.php
index 2a548d0..7e3ed0e 100644
--- a/src/ContentExporter.php
+++ b/src/ContentExporter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\single_content_sync;
 
+use Drupal\layout_builder\Section;
 use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -27,14 +28,14 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -48,14 +49,14 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The private temp store of the module.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
@@ -76,20 +77,20 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * ContentExporter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\TempStore\PrivateTempStore $store
+   * @param PrivateTempStore $store
    *   The private temp store of the module.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, MessengerInterface $messenger, PrivateTempStore $store, LanguageManagerInterface $language_manager) {
@@ -103,7 +104,7 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * Generates a cache key based on the entity's entity type id and uuid.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity object for which to generate a cache key.
    *
    * @return string
@@ -116,7 +117,7 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * Verifies whether a given entity is present in the entityOutputCache.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to be verified in the cache.
    *
    * @return bool
@@ -130,7 +131,7 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * Verifies whether a given entity is present in the entityReferenceCache.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to be verified in the cache.
    *
    * @return bool
@@ -144,7 +145,7 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * Adds a given entity to the entityOutputCache.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to be added to the entityOuputCache.
    * @param array $output
    *   The exported content output.
@@ -157,7 +158,7 @@ class ContentExporter implements ContentExporterInterface {
   /**
    * Adds a given entity to the entityReferenceCache.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to be added to the entityReferenceCache.
    */
   protected function addEntityToReferenceCache(FieldableEntityInterface $entity): void {
@@ -463,7 +464,7 @@ class ContentExporter implements ContentExporterInterface {
         $sections = [];
 
         foreach ($field->getValue() as $section_array) {
-          /** @var \Drupal\layout_builder\Section $section */
+          /** @var Section $section */
           $section = $section_array['section'];
           $sections[] = serialize($section);
           $components = $section->getComponents();
diff --git a/src/ContentExporterInterface.php b/src/ContentExporterInterface.php
index 95b7098..9361aca 100644
--- a/src/ContentExporterInterface.php
+++ b/src/ContentExporterInterface.php
@@ -10,7 +10,7 @@ interface ContentExporterInterface {
   /**
    * Export node as array.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to export.
    *
    * @return array
@@ -21,7 +21,7 @@ interface ContentExporterInterface {
   /**
    * Export node to YAML format.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to export.
    * @param bool $extract_translations
    *   Whether to extract translations.
@@ -34,7 +34,7 @@ interface ContentExporterInterface {
   /**
    * Get field value in the proper format for further importing.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field item list.
    *
    * @return array|string|bool
@@ -45,7 +45,7 @@ interface ContentExporterInterface {
   /**
    * Export base fields of the entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to export.
    *
    * @return array
@@ -56,7 +56,7 @@ interface ContentExporterInterface {
   /**
    * Export custom fields of the entity.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity to export.
    * @param bool $check_translated_fields_only
    *   Whether to check only translatable fields.
diff --git a/src/ContentFileGenerator.php b/src/ContentFileGenerator.php
index 5cef155..3ec6557 100644
--- a/src/ContentFileGenerator.php
+++ b/src/ContentFileGenerator.php
@@ -13,28 +13,28 @@ class ContentFileGenerator implements ContentFileGeneratorInterface {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The content sync helper.
    *
-   * @var \Drupal\single_content_sync\ContentSyncHelperInterface
+   * @var ContentSyncHelperInterface
    */
   protected $contentSyncHelper;
 
   /**
    * The content exporter.
    *
-   * @var \Drupal\single_content_sync\ContentExporterInterface
+   * @var ContentExporterInterface
    */
   protected $contentExporter;
 
   /**
    * The private temp store of the module.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
@@ -43,11 +43,11 @@ class ContentFileGenerator implements ContentFileGeneratorInterface {
    *
    * @param \Drupal\Core\file\FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\single_content_sync\ContentSyncHelperInterface $content_sync_helper
+   * @param ContentSyncHelperInterface $content_sync_helper
    *   The content sync helper.
-   * @param \Drupal\single_content_sync\ContentExporterInterface $content_exporter
+   * @param ContentExporterInterface $content_exporter
    *   The content exporter.
-   * @param \Drupal\Core\TempStore\PrivateTempStore $store
+   * @param PrivateTempStore $store
    *   The private temp store of the module.
    */
   public function __construct(FileSystemInterface $file_system, ContentSyncHelperInterface $content_sync_helper, ContentExporterInterface $content_exporter, PrivateTempStore $store) {
@@ -128,7 +128,7 @@ class ContentFileGenerator implements ContentFileGeneratorInterface {
    * @param string $name
    *   String containing the name of the zip file to generate.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The generated empty zip file.
    */
   protected function generateEmptyZipFile(string $name): FileInterface {
@@ -142,7 +142,7 @@ class ContentFileGenerator implements ContentFileGeneratorInterface {
   /**
    * Add assets to zip file.
    *
-   * @param \Drupal\Core\Archiver\ArchiverInterface $zip
+   * @param ArchiverInterface $zip
    *   The zip file to which the assets will be added.
    */
   protected function addAssetsToZip(ArchiverInterface $zip): void {
diff --git a/src/ContentFileGeneratorInterface.php b/src/ContentFileGeneratorInterface.php
index e174d00..0e5f004 100644
--- a/src/ContentFileGeneratorInterface.php
+++ b/src/ContentFileGeneratorInterface.php
@@ -10,12 +10,12 @@ interface ContentFileGeneratorInterface {
   /**
    * Generate a YAML file with the exported content.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity object.
    * @param bool $extract_translations
    *   Whether to extract translations.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The generated file represented as object.
    */
   public function generateYamlFile(FieldableEntityInterface $entity, bool $extract_translations = FALSE): FileInterface;
@@ -23,12 +23,12 @@ interface ContentFileGeneratorInterface {
   /**
    * Generate a Zip file with the exported content and assets.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity object.
    * @param bool $extract_translations
    *   Whether to extract translations.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The generated file represented as object.
    */
   public function generateZipFile(FieldableEntityInterface $entity, bool $extract_translations = FALSE): FileInterface;
@@ -36,14 +36,14 @@ interface ContentFileGeneratorInterface {
   /**
    * Generate a Zip file with bulk exported content and assets.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface[] $entities
+   * @param FieldableEntityInterface[] $entities
    *   An array of content entities.
    * @param bool $extract_translations
    *   Whether to extract translations.
    * @param bool $extract_assets
    *   Whether to extract assets.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The generated file represented as object.
    */
   public function generateBulkZipFile(array $entities, bool $extract_translations = FALSE, bool $extract_assets = FALSE): FileInterface;
diff --git a/src/ContentImporter.php b/src/ContentImporter.php
index 3a4a087..9f1d478 100644
--- a/src/ContentImporter.php
+++ b/src/ContentImporter.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\single_content_sync;
 
+use Drupal\layout_builder\InlineBlockUsageInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\FileInterface;
+use Drupal\block_content\BlockContentInterface;
+use Drupal\layout_builder\Section;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,57 +23,57 @@ class ContentImporter implements ContentImporterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The content sync helper.
    *
-   * @var \Drupal\single_content_sync\ContentSyncHelperInterface
+   * @var ContentSyncHelperInterface
    */
   protected $contentSyncHelper;
 
   /**
    * The inline block usage service.
    *
-   * @var \Drupal\layout_builder\InlineBlockUsageInterface
+   * @var InlineBlockUsageInterface
    */
   protected $blockUsage;
 
   /**
    * ContentExporter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\single_content_sync\ContentSyncHelperInterface $content_sync_helper
+   * @param ContentSyncHelperInterface $content_sync_helper
    *   The content sync helper.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, ModuleHandlerInterface $module_handler, FileSystemInterface $file_system, ContentSyncHelperInterface $content_sync_helper) {
@@ -81,7 +87,7 @@ class ContentImporter implements ContentImporterInterface {
   /**
    * Get inline block usage from the service.
    *
-   * @return \Drupal\layout_builder\InlineBlockUsageInterface
+   * @return InlineBlockUsageInterface
    *   The layout builder service.
    */
   private function blockUsage() {
@@ -166,11 +172,11 @@ class ContentImporter implements ContentImporterInterface {
    * if that entity existed as a reference. We need to update this entity to
    * use the same id and enforce update instead of insert.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createOrUpdate(EntityInterface &$entity) {
     $definition = $this->entityTypeManager->getDefinition($entity->getEntityTypeId());
@@ -301,7 +307,7 @@ class ContentImporter implements ContentImporterInterface {
             'uri' => $file_item['uri'],
           ]);
 
-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           if (count($files)) {
             $file = reset($files);
           }
@@ -325,7 +331,7 @@ class ContentImporter implements ContentImporterInterface {
             $directory = $this->fileSystem->dirname($file_item['uri']);
             $this->contentSyncHelper->prepareFilesDirectory($directory);
 
-            if ($file = file_save_data($content, $file_item['uri'], FileSystemInterface::EXISTS_REPLACE)) {
+            if ($file = \Drupal::service('file.repository')->writeData($content, $file_item['uri'], FileSystemInterface::EXISTS_REPLACE)) {
               $file->setOwnerId(1);
               $file->setPermanent();
               $file->save();
@@ -377,7 +383,7 @@ class ContentImporter implements ContentImporterInterface {
         }
 
         foreach ($block_list as $block) {
-          /** @var \Drupal\block_content\BlockContentInterface $new_block */
+          /** @var BlockContentInterface $new_block */
           $new_block = $this->doImport($block);
 
           if (!$this->blockUsage()->getUsage($new_block->id())) {
@@ -390,7 +396,7 @@ class ContentImporter implements ContentImporterInterface {
 
         // Get unserialized version of each section.
         $base64_sections = base64_decode($field_value['sections'] ?? $field_value);
-        /** @var \Drupal\layout_builder\Section[] $sections */
+        /** @var Section[] $sections */
         $sections = array_map(function (string $section) {
           return unserialize($section);
         }, explode('|', $base64_sections));
diff --git a/src/ContentImporterInterface.php b/src/ContentImporterInterface.php
index 76bf0e7..22ca021 100644
--- a/src/ContentImporterInterface.php
+++ b/src/ContentImporterInterface.php
@@ -13,7 +13,7 @@ interface ContentImporterInterface {
    * @param array $content
    *   Content to import.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Imported entity.
    */
   public function doImport(array $content): EntityInterface;
@@ -21,7 +21,7 @@ interface ContentImporterInterface {
   /**
    * Set field value.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity to be imported.
    * @param string $field_name
    *   Field name.
@@ -36,7 +36,7 @@ interface ContentImporterInterface {
    * @param string $file_real_path
    *   The real path to the local file.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Imported entity.
    */
   public function importFromFile(string $file_real_path): EntityInterface;
@@ -47,7 +47,7 @@ interface ContentImporterInterface {
    * @param string $file_real_path
    *   The real path to the local file.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of imported entities.
    */
   public function importFromZip(string $file_real_path): array;
@@ -68,7 +68,7 @@ interface ContentImporterInterface {
   /**
    * Handle import of values for custom fields.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity instance to import fields in.
    * @param array $fields
    *   The custom fields with values.
@@ -78,7 +78,7 @@ interface ContentImporterInterface {
   /**
    * Handle import of values for base fields.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity instance to import fields in.
    * @param array $fields
    *   The base fields with values.
diff --git a/src/ContentSyncHelper.php b/src/ContentSyncHelper.php
index 76f91b2..e7fdaaa 100644
--- a/src/ContentSyncHelper.php
+++ b/src/ContentSyncHelper.php
@@ -22,57 +22,57 @@ class ContentSyncHelper implements ContentSyncHelperInterface {
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The archiver manager.
    *
-   * @var \Drupal\Core\Archiver\ArchiverManager
+   * @var ArchiverManager
    */
   protected $archiverManager;
 
   /**
    * The uuid service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * ContentSyncHelper constructor.
    *
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The uuid generator.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Archiver\ArchiverManager $archiver_manager
+   * @param ArchiverManager $archiver_manager
    *   The archive manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(UuidInterface $uuid, FileSystemInterface $file_system, ArchiverManager $archiver_manager, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EntityRepositoryInterface $entity_repository) {
@@ -95,7 +95,7 @@ class ContentSyncHelper implements ContentSyncHelperInterface {
    * {@inheritdoc}
    */
   public function saveFileContentTemporary(string $content, string $destination): FileInterface {
-    $file = file_save_data($content, $destination);
+    $file = \Drupal::service('file.repository')->writeData($content, $destination);
     $file->setTemporary();
     $file->save();
 
@@ -165,7 +165,7 @@ class ContentSyncHelper implements ContentSyncHelperInterface {
   public function getFileRealPathById(int $fid): string {
     $storage = $this->entityTypeManager->getStorage('file');
 
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $storage->load($fid);
 
     if (!$file) {
@@ -181,7 +181,7 @@ class ContentSyncHelper implements ContentSyncHelperInterface {
   public function getDefaultLanguageEntity(ParameterBag $parameters): EntityInterface {
     $entity_uuid = $parameters->getIterator()->current()->uuid();
     $entity_type_id = $parameters->getIterator()->current()->getEntityTypeId();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->entityRepository->loadEntityByUuid($entity_type_id, $entity_uuid);
 
     return $entity;
diff --git a/src/ContentSyncHelperInterface.php b/src/ContentSyncHelperInterface.php
index 7f6b8f5..771a7ca 100644
--- a/src/ContentSyncHelperInterface.php
+++ b/src/ContentSyncHelperInterface.php
@@ -25,7 +25,7 @@ interface ContentSyncHelperInterface {
    * @param string $destination
    *   The desired file destination.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The saved file entity object.
    */
   public function saveFileContentTemporary(string $content, string $destination): FileInterface;
@@ -52,7 +52,7 @@ interface ContentSyncHelperInterface {
    * @param string $file_real_path
    *   The real path to the local file.
    *
-   * @return \Drupal\Core\Archiver\ArchiverInterface
+   * @return ArchiverInterface
    *   The zip object.
    */
   public function createZipInstance(string $file_real_path): ArchiverInterface;
@@ -60,7 +60,7 @@ interface ContentSyncHelperInterface {
   /**
    * Generates a file name based on an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
    * @return string
@@ -93,10 +93,10 @@ interface ContentSyncHelperInterface {
   /**
    * Get an entity object from the default language configuration.
    *
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $parameters
+   * @param ParameterBag $parameters
    *   The parameters from which to get the entity object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity interface from the default language configuration.
    */
   public function getDefaultLanguageEntity(ParameterBag $parameters): EntityInterface;
diff --git a/src/Controller/ContentExportController.php b/src/Controller/ContentExportController.php
index 6270297..0b3bc40 100644
--- a/src/Controller/ContentExportController.php
+++ b/src/Controller/ContentExportController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\single_content_sync\Controller;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\HttpFoundation\BinaryFileResponse;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -25,7 +26,7 @@ class ContentExportController extends ControllerBase {
       throw new NotFoundHttpException();
     }
 
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = array_pop($files);
     return new BinaryFileResponse($file->getFileUri(), 200, [], FALSE, 'attachment');
   }
diff --git a/src/Form/ContentBulkExportForm.php b/src/Form/ContentBulkExportForm.php
index ae229b2..f1962a1 100644
--- a/src/Form/ContentBulkExportForm.php
+++ b/src/Form/ContentBulkExportForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\single_content_sync\Form;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,23 +17,23 @@ class ContentBulkExportForm extends ConfirmFormBase {
   /**
    * The private temp store of the module.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
   /**
    * The custom file generator to export content.
    *
-   * @var \Drupal\single_content_sync\ContentFileGeneratorInterface
+   * @var ContentFileGeneratorInterface
    */
   protected $fileGenerator;
 
   /**
    * Construct of ContentBulkExportForm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The private temp store of the module.
-   * @param \Drupal\single_content_sync\ContentFileGeneratorInterface $file_generator
+   * @param ContentFileGeneratorInterface $file_generator
    *   The custom file generator to export content.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, ContentFileGeneratorInterface $file_generator) {
diff --git a/src/Form/ContentExportForm.php b/src/Form/ContentExportForm.php
index b6f0e27..92ab3fb 100644
--- a/src/Form/ContentExportForm.php
+++ b/src/Form/ContentExportForm.php
@@ -23,39 +23,39 @@ class ContentExportForm extends FormBase {
   /**
    * The content exporter service.
    *
-   * @var \Drupal\single_content_sync\ContentExporterInterface
+   * @var ContentExporterInterface
    */
   protected $contentExporter;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The content file generator.
    *
-   * @var \Drupal\single_content_sync\ContentFileGeneratorInterface
+   * @var ContentFileGeneratorInterface
    */
   protected $fileGenerator;
 
   /**
    * The content sync helper.
    *
-   * @var \Drupal\single_content_sync\ContentSyncHelperInterface
+   * @var ContentSyncHelperInterface
    */
   protected $contentSyncHelper;
 
   /**
    * ContentExportForm constructor.
    *
-   * @param \Drupal\single_content_sync\ContentExporterInterface $content_exporter
+   * @param ContentExporterInterface $content_exporter
    *   The content exporter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\single_content_sync\ContentFileGeneratorInterface $file_generator
+   * @param ContentFileGeneratorInterface $file_generator
    *   The content file generator.
    */
   public function __construct(ContentExporterInterface $content_exporter, EntityTypeManagerInterface $entity_type_manager, ContentFileGeneratorInterface $file_generator, ContentSyncHelperInterface $content_sync_helper) {
@@ -96,7 +96,7 @@ class ContentExportForm extends FormBase {
       if ($filename = $this->getRequest()->query->get('file')) {
         $files = $this->entityTypeManager->getStorage('file')
           ->loadByProperties(['filename' => $filename]);
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = array_pop($files);
         if (file_exists($file->getFileUri())) {
           $download_url = Url::fromRoute('single_content_sync.file_download', [], [
diff --git a/src/Form/ContentImportForm.php b/src/Form/ContentImportForm.php
index 9afe9c4..422bbb9 100644
--- a/src/Form/ContentImportForm.php
+++ b/src/Form/ContentImportForm.php
@@ -19,23 +19,23 @@ class ContentImportForm extends FormBase {
   /**
    * The content importer service.
    *
-   * @var \Drupal\single_content_sync\ContentImporterInterface
+   * @var ContentImporterInterface
    */
   protected $contentImporter;
 
   /**
    * The content sync helper.
    *
-   * @var \Drupal\single_content_sync\ContentSyncHelperInterface
+   * @var ContentSyncHelperInterface
    */
   protected $contentSyncHelper;
 
   /**
    * ContentImportForm constructor.
    *
-   * @param \Drupal\single_content_sync\ContentImporterInterface $content_importer
+   * @param ContentImporterInterface $content_importer
    *   The content importer service.
-   * @param \Drupal\single_content_sync\ContentSyncHelperInterface $content_sync_helper
+   * @param ContentSyncHelperInterface $content_sync_helper
    *   The content sync helper.
    */
   public function __construct(ContentImporterInterface $content_importer, ContentSyncHelperInterface $content_sync_helper) {
diff --git a/src/Plugin/Action/ContentBulkExport.php b/src/Plugin/Action/ContentBulkExport.php
index 674bd4e..d20bb2d 100644
--- a/src/Plugin/Action/ContentBulkExport.php
+++ b/src/Plugin/Action/ContentBulkExport.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\single_content_sync\Plugin\Action;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -24,14 +25,14 @@ class ContentBulkExport extends ActionBase implements ContainerFactoryPluginInte
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The private temp store of the module.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
@@ -44,9 +45,9 @@ class ContentBulkExport extends ActionBase implements ContainerFactoryPluginInte
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
