diff --git a/src/DfpHtmlResponseAttachmentsProcessor.php b/src/DfpHtmlResponseAttachmentsProcessor.php
index e475f61..13e7e79 100644
--- a/src/DfpHtmlResponseAttachmentsProcessor.php
+++ b/src/DfpHtmlResponseAttachmentsProcessor.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\dfp;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Asset\AssetCollectionRendererInterface;
 use Drupal\Core\Asset\AssetResolverInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -32,42 +33,42 @@ class DfpHtmlResponseAttachmentsProcessor extends HtmlResponseAttachmentsProcess
   /**
    * The HTML response attachments processor service.
    *
-   * @var \Drupal\Core\Render\AttachmentsResponseProcessorInterface
+   * @var AttachmentsResponseProcessorInterface
    */
   protected $htmlResponseAttachmentsProcessor;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The DFP token service.
    *
-   * @var \Drupal\dfp\TokenInterface
+   * @var TokenInterface
    */
   protected $token;
 
   /**
    * Constructs a DfpResponseAttachmentsProcessor object.
    *
-   * @param \Drupal\Core\Render\AttachmentsResponseProcessorInterface $html_response_attachments_processor
+   * @param AttachmentsResponseProcessorInterface $html_response_attachments_processor
    *   The HTML response attachments processor service.
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   An asset resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $css_collection_renderer
+   * @param AssetCollectionRendererInterface $css_collection_renderer
    *   The CSS asset collection renderer.
-   * @param \Drupal\Core\Asset\AssetCollectionRendererInterface $js_collection_renderer
+   * @param AssetCollectionRendererInterface $js_collection_renderer
    *   The JS asset collection renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(AttachmentsResponseProcessorInterface $html_response_attachments_processor, TokenInterface $token, AssetResolverInterface $asset_resolver, ConfigFactoryInterface $config_factory, AssetCollectionRendererInterface $css_collection_renderer, AssetCollectionRendererInterface $js_collection_renderer, RequestStack $request_stack, RendererInterface $renderer, ModuleHandlerInterface $module_handler) {
@@ -107,7 +108,7 @@ class DfpHtmlResponseAttachmentsProcessor extends HtmlResponseAttachmentsProcess
         'dfp-js-head-top',
       ];
 
-      /** @var \Drupal\dfp\View\TagView $tag */
+      /** @var TagView $tag */
       foreach ($attachments['dfp_slot'] as $tag_view) {
         $attachments['html_head'][] = [
           [
@@ -137,7 +138,7 @@ class DfpHtmlResponseAttachmentsProcessor extends HtmlResponseAttachmentsProcess
   /**
    * Gets the javascript to add before the slot definitions.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   protected function getHeadTop() {
@@ -153,7 +154,7 @@ class DfpHtmlResponseAttachmentsProcessor extends HtmlResponseAttachmentsProcess
   /**
    * Gets the javascript to add after the slot definitions.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML.
    */
   protected function getHeadBottom() {
diff --git a/src/Form/AdminSettings.php b/src/Form/AdminSettings.php
index ee7acd0..039c3fd 100644
--- a/src/Form/AdminSettings.php
+++ b/src/Form/AdminSettings.php
@@ -24,14 +24,14 @@ class AdminSettings extends ConfigFormBase {
   /**
    * Entity bundle information.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * Constructs a \Drupal\dfp\Form\AdminSettings object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeBundleInfoInterface $bundle_info) {
diff --git a/src/Form/Tag.php b/src/Form/Tag.php
index a20666c..a29a9ea 100644
--- a/src/Form/Tag.php
+++ b/src/Form/Tag.php
@@ -27,7 +27,7 @@ class Tag extends EntityForm {
     // @todo Implement out_of_page setting like D7 module.
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\dfp\Entity\TagInterface $tag */
+    /** @var TagInterface $tag */
     $tag = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add DFP tag');
diff --git a/src/Plugin/Block/TagBlock.php b/src/Plugin/Block/TagBlock.php
index aa235d8..53b8a62 100644
--- a/src/Plugin/Block/TagBlock.php
+++ b/src/Plugin/Block/TagBlock.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\dfp\Plugin\Block;
 
+use Drupal\dfp\Entity\TagInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,21 +31,21 @@ class TagBlock extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Drupal account to use for checking for access to block.
    *
-   * @var \Drupal\Core\Session\AccountInterface.
+   * @var AccountInterface .
    */
   protected $account;
 
@@ -57,11 +58,11 @@ class TagBlock extends BlockBase implements ContainerFactoryPluginInterface {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, AccountInterface $account) {
@@ -116,7 +117,7 @@ class TagBlock extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * Loads the block content entity of the block.
    *
-   * @return \Drupal\dfp\Entity\TagInterface|null
+   * @return TagInterface|null
    *   The block content entity.
    */
   protected function getEntity() {
diff --git a/src/Plugin/Derivative/TagBlock.php b/src/Plugin/Derivative/TagBlock.php
index 3e761b8..f5ccb00 100644
--- a/src/Plugin/Derivative/TagBlock.php
+++ b/src/Plugin/Derivative/TagBlock.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\dfp\Plugin\Derivative;
 
+use Drupal\dfp\Entity\TagInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -22,14 +23,14 @@ class TagBlock extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The DFP tag storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $tagStorage;
 
   /**
    * Constructs a TagBlock object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $tag_storage
+   * @param EntityStorageInterface $tag_storage
    *   The DFP tag storage.
    */
   public function __construct(EntityStorageInterface $tag_storage) {
@@ -50,7 +51,7 @@ class TagBlock extends DeriverBase implements ContainerDeriverInterface {
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\dfp\Entity\TagInterface[] $tags */
+    /** @var TagInterface[] $tags */
     $tags = $this->tagStorage->loadMultiple();
     foreach ($tags as $tag) {
       if ($tag->hasBlock()) {
diff --git a/src/Token.php b/src/Token.php
index 801ae2b..ecb8209 100644
--- a/src/Token.php
+++ b/src/Token.php
@@ -28,7 +28,7 @@ class Token implements TokenInterface {
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -37,9 +37,9 @@ class Token implements TokenInterface {
    *
    * @param \Drupal\Core\Utility\Token $core_token
    *   Drupal core's token service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    */
   public function __construct(CoreToken $core_token, RouteMatchInterface $route_match, AccountInterface $account) {
diff --git a/src/TokenInterface.php b/src/TokenInterface.php
index ff40cc5..0ecf7a8 100644
--- a/src/TokenInterface.php
+++ b/src/TokenInterface.php
@@ -20,13 +20,13 @@ interface TokenInterface {
    *
    * @param string $text
    *   An HTML string containing replaceable tokens.
-   * @param \Drupal\dfp\View\TagView $tag
+   * @param TagView $tag
    *   (optional) An TagView object that merges values of the Tag and global
    *   settings. Defaults to NULL.
    * @param array $options
    *   (optional) A keyed array of settings and flags to control the token
    *   replacement process.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   (optional) An object to which static::generate() and the hooks and
    *   functions that it invokes will add their required bubbleable metadata.
    *   Defaults to NULL.
diff --git a/src/View/TagList.php b/src/View/TagList.php
index 4899c0d..b69bb8e 100644
--- a/src/View/TagList.php
+++ b/src/View/TagList.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\dfp\View;
 
+use Drupal\dfp\Entity\TagInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
@@ -36,7 +37,7 @@ class TagList extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\dfp\Entity\TagInterface $entity */
+    /** @var TagInterface $entity */
     $row['title']['data'] = $entity->label();
     $row['size']['data'] = $entity->size();
     $row['block']['data'] = $entity->hasBlock() ? $this->t('Yes') : $this->t('No');
diff --git a/src/View/TagView.php b/src/View/TagView.php
index 58cbbbd..85a51e6 100644
--- a/src/View/TagView.php
+++ b/src/View/TagView.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\dfp\View;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\ImmutableConfig;
@@ -61,41 +62,41 @@ class TagView {
   /**
    * The global DFP configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $globalSettings;
 
   /**
    * The DFP tag.
    *
-   * @var \Drupal\dfp\Entity\TagInterface
+   * @var TagInterface
    */
   protected $tag;
 
   /**
    * The DFP token service.
    *
-   * @var \Drupal\dfp\TokenInterface
+   * @var TokenInterface
    */
   protected $token;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * TagView constructor.
    *
-   * @param \Drupal\dfp\Entity\TagInterface $tag
+   * @param TagInterface $tag
    *   The DFP tag.
-   * @param \Drupal\Core\Config\ImmutableConfig $global_settings
+   * @param ImmutableConfig $global_settings
    *   The DFP global configuration.
-   * @param \Drupal\dfp\TokenInterface $token
+   * @param TokenInterface $token
    *   The DFP token service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(TagInterface $tag, ImmutableConfig $global_settings, TokenInterface $token, ModuleHandlerInterface $module_handler) {
@@ -251,9 +252,9 @@ class TagView {
    *   The targeting array. An array of arrays. Each each has two keys 'target'
    *   and 'value'. The 'target' value is a string. The 'value' value is a
    *   string with multiple values delimited by a comma.
-   * @param \Drupal\dfp\TokenInterface $token
+   * @param TokenInterface $token
    *   The DFP token service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param \Drupal\dfp\View\TagView|NULL $tag_view
    *   (optional) The TagView object. Defaults to NULL.
@@ -322,7 +323,7 @@ class TagView {
    *   A size to format. Multiple sizes delimited by comma. Example:
    *   '300x600,300x250,fluid'.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   A MarkupInterface object representing sizes that can be used in
    *   javascript. Example: '[[300, 600], [300, 250], "fluid"]'.
    */
diff --git a/src/View/TagViewBuilder.php b/src/View/TagViewBuilder.php
index 05fb585..8ce8786 100644
--- a/src/View/TagViewBuilder.php
+++ b/src/View/TagViewBuilder.php
@@ -29,42 +29,42 @@ class TagViewBuilder extends EntityViewBuilder {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * DFP token service.
    *
-   * @var \Drupal\dfp\TokenInterface
+   * @var TokenInterface
    */
   protected $token;
 
   /**
    * Constructs a new BlockViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type definition.
    * @param EntityRepositoryInterface $entityRepository
    *   The entity manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Theme\Registry $registry
+   * @param Registry $registry
    *   The theme registry service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository
+   * @param EntityDisplayRepositoryInterface $entityDisplayRepository
    *   The entity display repository service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\dfp\TokenInterface $token
+   * @param TokenInterface $token
    *   DFP token service.
    */
   public function __construct(
@@ -117,7 +117,7 @@ class TagViewBuilder extends EntityViewBuilder {
    * {@inheritdoc}
    */
   public function viewMultiple(array $entities = [], $view_mode = 'full', $langcode = NULL) {
-    /** @var \Drupal\dfp\Entity\TagInterface[] $entities */
+    /** @var TagInterface[] $entities */
     $build = [];
     foreach ($entities as $tag) {
       // @todo Ensure a tag is only once on the page.
@@ -148,7 +148,7 @@ class TagViewBuilder extends EntityViewBuilder {
   /**
    * Builds a #pre_render-able DFP tag render array.
    *
-   * @param \Drupal\dfp\View\TagView $tag_view
+   * @param TagView $tag_view
    *   A DFP tag.
    *
    * @return array
diff --git a/src/View/dfp.adtest.inc b/src/View/dfp.adtest.inc
index 1174524..d6a97ce 100644
--- a/src/View/dfp.adtest.inc
+++ b/src/View/dfp.adtest.inc
@@ -13,10 +13,10 @@ function dfp_adtest_page() {
   $form = drupal_get_form('dfp_adtest_form');
 
   $output[] = [
-    '#markup' => render($form),
+    '#markup' => \Drupal::service('renderer')->render($form),
     '#attached' => [
       'css' => [
-        'dfp-admin' => drupal_get_path('module', 'dfp') . '/dfp.admin.css',
+        'dfp-admin' => \Drupal::service('extension.list.module')->getPath('dfp') . '/dfp.admin.css',
       ],
     ],
   ];
