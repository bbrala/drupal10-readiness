modules/contrib/scheduler/plugins/content_types/scheduler_form_pane.inc
modules/contrib/scheduler/scheduler.api.php
modules/contrib/scheduler/scheduler.drush.inc
modules/contrib/scheduler/scheduler.install
modules/contrib/scheduler/scheduler.module
modules/contrib/scheduler/scheduler.tokens.inc
modules/contrib/scheduler/scheduler_rules_integration/scheduler_rules_integration.module
modules/contrib/scheduler/scheduler_rules_integration/scheduler_rules_integration.rules_defaults.inc
modules/contrib/scheduler/scheduler_rules_integration/src/Event/EventBase.php
modules/contrib/scheduler/scheduler_rules_integration/src/Event/EventDeriver.php
modules/contrib/scheduler/scheduler_rules_integration/src/Event/RulesCommerceProductEvent.php
modules/contrib/scheduler/scheduler_rules_integration/src/Event/RulesMediaEvent.php
modules/contrib/scheduler/scheduler_rules_integration/src/Event/RulesNodeEvent.php
modules/contrib/scheduler/scheduler_rules_integration/src/Event/RulesTaxonomyTermEvent.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/ConditionDeriver.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/Legacy/LegacyPublishingIsEnabled.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/Legacy/LegacyScheduledForPublishing.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/Legacy/LegacyScheduledForUnpublishing.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/Legacy/LegacyUnpublishingIsEnabled.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/PublishingIsEnabled.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/ScheduledForPublishing.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/ScheduledForUnpublishing.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/UnpublishingIsEnabled.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/Legacy/LegacyPublishNow.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/Legacy/LegacyRemovePublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/Legacy/LegacyRemoveUnpublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/Legacy/LegacySetPublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/Legacy/LegacySetUnpublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/Legacy/LegacyUnpublishNow.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/PublishNow.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/RemovePublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/RemoveUnpublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/SchedulerRulesActionBase.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/SchedulerRulesActionDeriver.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/SetPublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/SetUnpublishingDate.php
modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/UnpublishNow.php
modules/contrib/scheduler/scheduler_rules_integration/tests/src/Functional/SchedulerRulesActionsTest.php
modules/contrib/scheduler/scheduler_rules_integration/tests/src/Functional/SchedulerRulesConditionsTest.php
modules/contrib/scheduler/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php
modules/contrib/scheduler/src/Access/SchedulerRouteAccess.php
modules/contrib/scheduler/src/Annotation/SchedulerPlugin.php
modules/contrib/scheduler/src/Commands/SchedulerCommands.php
modules/contrib/scheduler/src/Controller/LightweightCronController.php
modules/contrib/scheduler/src/Event/EventBase.php
modules/contrib/scheduler/src/Event/SchedulerCommerceProductEvents.php
modules/contrib/scheduler/src/Event/SchedulerEvent.php
modules/contrib/scheduler/src/Event/SchedulerMediaEvents.php
modules/contrib/scheduler/src/Event/SchedulerNodeEvents.php
modules/contrib/scheduler/src/Event/SchedulerTaxonomyTermEvents.php
modules/contrib/scheduler/src/Exception/SchedulerEntityTypeNotEnabledException.php
modules/contrib/scheduler/src/Form/SchedulerAdminForm.php
modules/contrib/scheduler/src/Form/SchedulerCronForm.php
modules/contrib/scheduler/src/Plugin/Derivative/DynamicLocalTasks.php
modules/contrib/scheduler/src/Plugin/Field/FieldWidget/TimestampDatetimeNoDefaultWidget.php
modules/contrib/scheduler/src/Plugin/Scheduler/CommerceProductScheduler.php
modules/contrib/scheduler/src/Plugin/Scheduler/MediaScheduler.php
modules/contrib/scheduler/src/Plugin/Scheduler/NodeScheduler.php
modules/contrib/scheduler/src/Plugin/Scheduler/TaxonomyTermScheduler.php
modules/contrib/scheduler/src/Plugin/Validation/Constraint/SchedulerPublishOnConstraint.php
modules/contrib/scheduler/src/Plugin/Validation/Constraint/SchedulerPublishOnConstraintValidator.php
modules/contrib/scheduler/src/Plugin/Validation/Constraint/SchedulerUnpublishOnConstraint.php
modules/contrib/scheduler/src/Plugin/Validation/Constraint/SchedulerUnpublishOnConstraintValidator.php
modules/contrib/scheduler/src/Plugin/migrate/process/SchedulerHideSeconds.php
modules/contrib/scheduler/src/Plugin/views/access/Scheduler.php
modules/contrib/scheduler/src/Routing/SchedulerRouteSubscriber.php
modules/contrib/scheduler/src/SchedulerEvent.php
modules/contrib/scheduler/src/SchedulerEvents.php
modules/contrib/scheduler/src/SchedulerManager.php
modules/contrib/scheduler/src/SchedulerPermissions.php
modules/contrib/scheduler/src/SchedulerPluginBase.php
modules/contrib/scheduler/src/SchedulerPluginInterface.php
modules/contrib/scheduler/src/SchedulerPluginManager.php
modules/contrib/scheduler/src/Theme/SchedulerThemeNegotiator.php
modules/contrib/scheduler/tests/fixtures/drupal7.php
modules/contrib/scheduler/tests/fixtures/node_type_config.php
modules/contrib/scheduler/tests/modules/scheduler_access_test/scheduler_access_test.install
modules/contrib/scheduler/tests/modules/scheduler_access_test/scheduler_access_test.module
modules/contrib/scheduler/tests/modules/scheduler_api_test/scheduler_api_legacy_test/scheduler_api_legacy_test.module
modules/contrib/scheduler/tests/modules/scheduler_api_test/scheduler_api_test.install
modules/contrib/scheduler/tests/modules/scheduler_api_test/scheduler_api_test.module
modules/contrib/scheduler/tests/modules/scheduler_api_test/src/EventSubscriber.php
modules/contrib/scheduler/tests/modules/scheduler_extras/scheduler_extras.module
modules/contrib/scheduler/tests/src/Functional/SchedulerAdminSettingsTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerBasicMediaTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerBasicNodeTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerBasicProductTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerBasicTaxonomyTermTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerBrowserTestBase.php
modules/contrib/scheduler/tests/src/Functional/SchedulerDefaultTimeTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerDeleteEntityTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerDevelGenerateTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerDrushTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerEntityAccessTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerEventsTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerFieldsDisplayTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerHooksLegacyTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerHooksTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerLightweightCronTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerMessageTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerMetaInformationTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerMultilingualTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerNonEnabledTypeTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerPastDatesTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerPermissionsTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerRequiredTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerRevisioningTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerStatusReportTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerTokenReplaceTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerValidationTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerViewsAccessTest.php
modules/contrib/scheduler/tests/src/Functional/SchedulerWorkbenchModerationTest.php
modules/contrib/scheduler/tests/src/FunctionalJavascript/SchedulerJavascriptDefaultTimeTest.php
modules/contrib/scheduler/tests/src/FunctionalJavascript/SchedulerJavascriptTestBase.php
modules/contrib/scheduler/tests/src/Kernel/MigrateSchedulerNodeTypeConfigTest.php
modules/contrib/scheduler/tests/src/Kernel/MigrateSchedulerTest.php
modules/contrib/scheduler/tests/src/Traits/PhpunitCompatibilityCore87Trait.php
modules/contrib/scheduler/tests/src/Traits/SchedulerCommerceProductSetupTrait.php
modules/contrib/scheduler/tests/src/Traits/SchedulerMediaSetupTrait.php
modules/contrib/scheduler/tests/src/Traits/SchedulerSetupTrait.php
modules/contrib/scheduler/tests/src/Traits/SchedulerTaxonomyTermSetupTrait.php

36 files with changes
=====================

1) modules/contrib/scheduler/tests/src/Traits/SchedulerTaxonomyTermSetupTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduler\Traits;

+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;

@@ @@
   /**
    * The media type object which is enabled for scheduling.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * The media type object which is not enabled for scheduling.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $nonSchedulerVocabulary;

@@ @@
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $taxonomyTermStorage;

@@ @@
   public function schedulerTaxonomyTermSetUp() {

     // Create a test vocabulary that is enabled for scheduling.
-    /** @var \Drupal\taxonomy\VocabularyInterface $vocabulary */
+    /** @var VocabularyInterface $vocabulary */
     $this->vocabulary = Vocabulary::create([
       'vid' => $this->vocabularyId,
       'name' => $this->vocabularyName,
@@ @@
       ->save();

     // Create a vocabulary which is not enabled for scheduling.
-    /** @var \Drupal\taxonomy\VocabularyInterface $nonSchedulerVocabulary */
+    /** @var VocabularyInterface $nonSchedulerVocabulary */
     $this->nonSchedulerVocabulary = Vocabulary::create([
       'vid' => $this->nonSchedulerVocabularyId,
       'name' => $this->nonSchedulerVocabularyName,
@@ @@
    * @param array $values
    *   The values to use for the entity.
    *
-   * @return \Drupal\taxonomy\TermInterface
+   * @return TermInterface
    *   The created taxonomy term object.
    */
   public function createTaxonomyTerm(array $values) {
@@ @@
       // If no name is specified then use title, or default to a random name.
       'name' => $values['title'] ?? $this->randomMachineName(),
     ];
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     $term = Term::create($values);
     $term->save();
     return $term;
@@ @@
    *   Optional name text to match on. If given and no match, returns NULL.
    *   If no $name is given then returns the term with the highest id value.
    *
-   * @return \Drupal\taxonomy\Entity\Term
+   * @return Term
    *   The taxonomy term object.
    */
   public function getTaxonomyTerm(string $name = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/scheduler/tests/src/Traits/SchedulerSetupTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduler\Traits;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ @@
   /**
    * A user with administration rights.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A user with permission to schedule content.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $schedulerUser;

@@ @@
   /**
    * The node type object.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodetype;

@@ @@
   /**
    * The node type object which is not enabled for scheduling.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nonSchedulerNodeType;

@@ @@
   /**
    * The Database Connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
    * role assigned when the user is created, and unique to that user. This is
    * the role to which these permissions are added.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user object.
    * @param array $permissions
    *   The machine names of new permissions to add to the user's unique role.
@@ @@
    *   'title' can be used for all entity types, and will be converted to the
    *   necessary property name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The created entity object.
    */
   public function createEntity(string $entityTypeId, string $bundle = NULL, array $values = []) {
@@ @@
    *   accepts the fixed string 'non-enabled' to indicate the non-enabled bundle
    *   for the entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The stored entity type object.
    */
   public function entityTypeObject(string $entityTypeId, string $bundle = NULL) {
@@ @@
    *   accepts the fixed string 'non-enabled' to indicate the non-enabled bundle
    *   for the entity type.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url object for adding the required entity.
    */
   public function entityAddUrl(string $entityTypeId, string $bundle = NULL) {
@@ @@
    * @param string $entityTypeId
    *   The machine id of the entity type.
    *
-   * @return \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @return ContentEntityStorageInterface
    *   The entity storage object.
    */
   public function entityStorageObject(string $entityTypeId) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/scheduler/tests/src/Traits/SchedulerMediaSetupTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduler\Traits;

+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\media\MediaInterface;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;

 /**
@@ @@
   /**
    * The media type object which is enabled for scheduling.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $mediaType;

@@ @@
   /**
    * The media type object which is not enabled for scheduling.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $nonSchedulerMediaType;

@@ @@
   /**
    * The media entity storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
    * @param array $values
    *   The values to use for the entity.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The created media object.
    */
   public function createMediaItem(array $values) {
@@ @@
       'bundle' => $this->mediaTypeName,
       'name' => $values['title'] ?? $this->randomstring(12),
     ];
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->mediaStorage->create($values);
     $media->save();
     return $media;
@@ @@
    *   Optional name text to match on. If given and no match, returns NULL.
    *   If no $name is given then returns the media with the highest id value.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The media object.
    */
   public function getMediaItem(string $name = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/scheduler/tests/src/Kernel/MigrateSchedulerTest.php:25

    ---------- begin diff ----------
@@ @@
     parent::setUp();
     $this->loadFixture(implode(DIRECTORY_SEPARATOR, [
       DRUPAL_ROOT,
-      drupal_get_path('module', 'scheduler'),
+      \Drupal::service('extension.list.module')->getPath('scheduler'),
       'tests',
       'fixtures',
       'drupal7.php',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/scheduler/tests/src/Kernel/MigrateSchedulerNodeTypeConfigTest.php:29

    ---------- begin diff ----------
@@ @@
     parent::setUp();
     $this->loadFixture(implode(DIRECTORY_SEPARATOR, [
       DRUPAL_ROOT,
-      drupal_get_path('module', 'scheduler'),
+      \Drupal::service('extension.list.module')->getPath('scheduler'),
       'tests',
       'fixtures',
       'node_type_config.php',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/scheduler/tests/src/Functional/SchedulerWorkbenchModerationTest.php:56

    ---------- begin diff ----------
@@ @@

   /**
    * Test when workbench_moderation_actions is also installed.
+   * @doesNotPerformAssertions
    */
   public function testWorkbenchModerationWithWorkbenchModerationActions() {
     // Install workbench_moderation_actions and run the same test as above.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/scheduler/tests/src/Functional/SchedulerRevisioningTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Simulates the scheduled (un)publication of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to schedule.
    * @param string $action
    *   The action to perform: either 'publish' or 'unpublish'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The updated entity, after scheduled (un)publication via a cron run.
    */
   protected function scheduleAndRunCron(EntityInterface $entity, string $action) {
@@ @@
   /**
    * Check if the number of revisions for an entity matches a given value.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param int $expected
    *   The expected number of revisions.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/scheduler/tests/src/Functional/SchedulerMultilingualTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduler\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\language\Entity\ConfigurableLanguage;

 /**
@@ @@
   /**
    * A user with permission to translate content and use scheduler.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $translatorUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/scheduler/tests/src/Functional/SchedulerHooksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduler\Functional;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\commerce_product\Entity\ProductType;
 use Drupal\node\Entity\NodeType;
 use Drupal\media\Entity\MediaType;
@@ @@
    * @param string $date_field
    *   The Scheduler date field to set, either 'publish_on' or 'unpublish_on'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The created entity object.
    */
   protected function createUnapprovedEntity($entityTypeId, $bundle, $date_field) {
@@ @@
     $bundle_field_name = $entity1->getEntityType()->get('entity_keys')['bundle'];
     $entity1->$bundle_field_name->entity->setThirdPartySetting('scheduler', 'expand_fieldset', 'always')->save();

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // Entity 1 'Red' should have both fields displayed.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/scheduler/tests/src/Functional/SchedulerHooksLegacyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduler\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\node\Entity\NodeType;

 /**
@@ @@
    * @param string $date_field
    *   The Scheduler date field to set, either 'publish_on' or 'unpublish_on'.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   A node object.
    */
   protected function createUnapprovedNode($date_field) {
@@ @@
     // Set the scheduler fieldset to always expand, for ease during development.
     $this->nodetype->setThirdPartySetting('scheduler', 'expand_fieldset', 'always')->save();

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // Node 1 'red' should have both fields displayed.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/scheduler/tests/src/Functional/SchedulerFieldsDisplayTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduler\Functional;

+use Drupal\Tests\WebAssert;
 use Drupal\Core\Url;

 /**
@@ @@
     $this->drupalLogin($this->adminUser);
     $entityType = $this->entityTypeObject($entityTypeId, $bundle);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // For rendering of vertical tabs, node and media entity forms have a div
@@ @@
   public function testDisabledFields($entityTypeId, $bundle) {
     $this->drupalLogin($this->schedulerUser);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // 1. Set the publish_on field to 'hidden' in the entity edit form.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/scheduler/tests/src/Functional/SchedulerBasicNodeTest.php:38

    ---------- begin diff ----------
@@ @@

   /**
    * Tests scheduled publishing/unpublishing of a node when actions are missing.
+   * @doesNotPerformAssertions
    */
   public function testMissingActionNodePublishingAndUnpublishing() {
     $this->deleteAction('node_scheduler', 'publish');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/scheduler/tests/modules/scheduler_api_test/src/EventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduler_api_test;

+use Drupal\node\Entity\Node;
 use Drupal\scheduler\Event\SchedulerCommerceProductEvents;
 use Drupal\scheduler\Event\SchedulerMediaEvents;
 use Drupal\scheduler\Event\SchedulerNodeEvents;
@@ @@
    *   The scheduler event.
    */
   public function apiTestNodePrePublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // Before publishing a node make it sticky.
     if (!$node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ @@
    *   The scheduler event.
    */
   public function apiTestNodePublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // After publishing a node promote it to the front page.
     if ($node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ @@
    *   The scheduler event.
    */
   public function apiTestNodePreUnpublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // Before unpublishing a node make it unsticky.
     if ($node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ @@
    *   The scheduler event.
    */
   public function apiTestNodeUnpublish(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // After unpublishing a node remove it from the front page.
     if (!$node->isPublished() && strpos($node->title->value, 'API TEST') === 0) {
@@ @@
    *   The scheduler event.
    */
   public function apiTestNodePrePublishImmediately(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // Before publishing immediately set the node to sticky.
     if (!$node->isPromoted() && strpos($node->title->value, 'API TEST') === 0) {
@@ @@
    *   The scheduler event.
    */
   public function apiTestNodePublishImmediately(SchedulerEvent $event) {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $event->getNode();
     // After publishing immediately set the node to promoted and change the
     // title.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/scheduler/src/SchedulerPluginManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/scheduler/src/SchedulerPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduler;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/scheduler/src/SchedulerPermissions.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a \Drupal\scheduler\SchedulerPermissions instance.
    *
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(SchedulerManager $scheduler_manager, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/scheduler/src/SchedulerManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduler;

+use Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Component\EventDispatcher\Event;
@@ @@
   /**
    * Date formatter service object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Scheduler Logger service object.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Module handler service object.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Entity Type Manager service object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Config Factory service object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Entity Field Manager service object.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;

@@ @@
    * followed by the event name string. At 9.0 the existing signature has to be
    * used but from 9.1 the parameters must be switched.
    *
-   * @param \Drupal\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The event object.
    * @param string $event_name
    *   The text name for the event.
@@ @@
     }
     else {
       // Replicate the existing dispatch signature.
-      $this->eventDispatcher->dispatch($event_name, $event);
+      $this->eventDispatcher->dispatch($event, $event_name);
     }
   }

@@ @@
    * The $entity is passed by reference so that any changes made in the event
    * subscriber implementations are automatically stored and passed forward.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $event_id
    *   The short text id the event, for example 'PUBLISH' or 'PRE_UNPUBLISH'.
@@ @@
   /**
    * Handles throwing exceptions.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity causing the exepction.
    * @param string $exception_name
    *   Which exception to throw.
@@ @@
    * @param string $process
    *   The process being performed (publish|unpublish).
    *
-   * @throws \Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException
+   * @throws SchedulerEntityTypeNotEnabledException
    */
   private function throwSchedulerException(EntityInterface $entity, $exception_name, $process) {
     $plugin = $this->getPlugin($entity->getEntityTypeId());
@@ @@
    * @return bool
    *   TRUE if any entity has been published, FALSE otherwise.
    *
-   * @throws \Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException
+   * @throws SchedulerEntityTypeNotEnabledException
    */
   public function publish() {
     $result = FALSE;
@@ @@
       // unlike 7.x where each translation was a separate id. This means that
       // the list of ids returned above may have some translations that need
       // processing now and others that do not.
-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $this->loadEntities($ids, $entityTypeId);
       foreach ($entities as $entity_multilingual) {

@@ @@
    * @return bool
    *   TRUE if any entity has been unpublished, FALSE otherwise.
    *
-   * @throws \Drupal\scheduler\Exception\SchedulerEntityTypeNotEnabledException
+   * @throws SchedulerEntityTypeNotEnabledException
    */
   public function unpublish() {
     $result = FALSE;
@@ @@
       // Finally ensure that there are no duplicates in the list of ids.
       $ids = array_unique($ids);

-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $this->loadEntities($ids, $entityTypeId);
       foreach ($entities as $entity_multilingual) {

@@ @@
    *   hook_scheduler_{type}_publishing_allowed()
    *   hook_scheduler_{type}_unpublishing_allowed()
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which the process is to be performed.
    * @param string $process
    *   The process to be checked. Values are 'publish' or 'unpublish'.
@@ @@
    * @param string $hookType
    *   The identifier of the hook function, for example 'publish_process' or
    *   'unpublishing_allowed' or 'hide_publish_date'.
-   * @param \Drupal\Core\Entity\EntityInterface|string $entity
+   * @param EntityInterface|string $entity
    *   The entity object which is being processed, or a string containing the
    *   entity type id (for example 'node' or 'media').
    *
@@ @@
    * @param string $key
    *   The key of the configuration.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The value of the configuration item requested.
    */
   protected function setting($key) {
@@ @@
   /**
    * Get third-party setting for and entity type, via the entity object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $setting
    *   The setting to retrieve.
@@ @@

       // Read the view definition from the .yml file. First try the /optional
       // folder, then the main /config folder.
-      $optional_folder = drupal_get_path('module', 'scheduler') . '/config/optional';
+      $optional_folder = \Drupal::service('extension.list.module')->getPath('scheduler') . '/config/optional';
       $source_storage = new FileStorage($optional_folder);
       if (!$source = $source_storage->read($full_name)) {
-        $install_folder = drupal_get_path('module', 'scheduler') . '/config/install';
+        $install_folder = \Drupal::service('extension.list.module')->getPath('scheduler') . '/config/install';
         $source_storage = new FileStorage($install_folder);
         if (!$source = $source_storage->read($full_name)) {
           throw new \Exception(sprintf('Failed to read source file for %s from either %s or %s folders', $full_name, $install_folder, $optional_folder));
@@ @@
       }

       // Try to read the view definition from active config storage.
-      /** @var \Drupal\Core\Config\StorageInterface $config_storage */
+      /** @var StorageInterface $config_storage */
       $config_storage = \Drupal::service('config.storage');
       if ($config_storage->read($full_name)) {
         // The view does exist in active storage, so load it, then replace the
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


18) modules/contrib/scheduler/src/Plugin/Derivative/DynamicLocalTasks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduler\Plugin\Derivative;

+use Drupal\views\ViewEntityInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates a DynamicLocalTasks object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@

     // Define a local task for scheduled content (nodes) view, only when the
     // view can be loaded, is enabled and that the overview display exists.
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = $view_storage->load('scheduler_scheduled_content');
     if ($view && $view->status() && $view->getDisplay('overview')) {
       // The content overview has weight 0 and moderated content has weight 1
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/scheduler/src/Form/SchedulerCronForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The scheduler manager service.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;

@@ @@
   /**
    * Creates a SchedulerCronForm instance.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @var ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @var ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @var \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @var SchedulerManager $scheduler_manager
    *   The scheduler manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, SchedulerManager $scheduler_manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function generateRandomKey(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function runLightweightCron(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/scheduler/src/Form/SchedulerAdminForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduler\Form;

+use Drupal\scheduler\SchedulerManager;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The scheduler manager service.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;

@@ @@
   /**
    * Entity Type Manager service object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Sets the date formatter.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   protected function setDateFormatter(DateFormatterInterface $date_formatter) {
@@ @@
    * @param string $key
    *   The key of the configuration.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The value of the config setting equested.
    */
   protected function setting($key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/scheduler/src/Event/SchedulerEvent.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the entity object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity object that caused the event to fire.
    */
   public function getEntity() {
@@ @@
   /**
    * Sets the entity object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object that caused the event to fire.
    */
   public function setEntity(EntityInterface $entity) {
@@ @@
    * This method is retained for backwards compatibility because implementations
    * of the event subscriber functions may be using $event->getNode().
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity object that caused the event to fire.
    */
   public function getNode() {
@@ @@
    * This method is retained for backwards compatibility because implementations
    * of the event subscriber functions may be using $event->setNode().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object that caused the event to fire.
    */
   public function setNode(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/scheduler/src/Event/EventBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity which is being processed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $entity;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity which is being processed.
    */
   public function __construct(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/scheduler/src/Controller/LightweightCronController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduler\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\scheduler\SchedulerManager;
@@ @@
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;

@@ @@
   /**
    * LightweightCronController constructor.
    *
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(SchedulerManager $scheduler_manager) {
@@ @@
   /**
    * Index.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response.
    */
   public function index() {
@@ @@
    * @param string $cron_key
    *   The cron key.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access($cron_key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/scheduler/src/Commands/SchedulerCommands.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The Scheduler manager service.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * SchedulerCommands constructor.
    *
-   * @param \Drupal\scheduler\SchedulerManager $schedulerManager
+   * @param SchedulerManager $schedulerManager
    *   Scheduler manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
    */
   public function __construct(SchedulerManager $schedulerManager, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/scheduler/src/Annotation/SchedulerPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduler\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Description of plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


26) modules/contrib/scheduler/src/Access/SchedulerRouteAccess.php:21

    ---------- begin diff ----------
@@ @@
    * user profiles and view scheduled content, and the user they are viewing has
    * permission to schedule content or view scheduled content.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function access(AccountInterface $account, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/scheduler/scheduler_rules_integration/tests/src/Functional/SchedulerRulesEventsTest.php:118

    ---------- begin diff ----------
@@ @@
    * Tests that no events are triggered when there are no scheduling dates.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsNone($entityTypeId, $bundle) {
     // Add and save an entity without any scheduled dates and check that no
@@ @@
    * Tests the three events related to publishing an entity.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsPublish($entityTypeId, $bundle) {
     // Allow dates in the past.
@@ @@
    * Tests the three events related to unpublishing an entity.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsUnpublish($entityTypeId, $bundle) {
     // Create an entity with an unpublish-on date, and check that only event 4
@@ @@
    * Tests all six events related to publishing and unpublishing an entity.
    *
    * @dataProvider dataStandardEntityTypes()
+   * @doesNotPerformAssertions
    */
   public function testRulesEventsBoth($entityTypeId, $bundle) {
     // Allow dates in the past.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAction/SchedulerRulesActionDeriver.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;

@@ @@
   /**
    * Creates a new deriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, SchedulerManager $scheduler_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Condition/ConditionDeriver.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;

@@ @@
   /**
    * Creates a new deriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, SchedulerManager $scheduler_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/scheduler/scheduler_rules_integration/src/Event/RulesTaxonomyTermEvent.php:38

    ---------- begin diff ----------
@@ @@
    *
    * phpcs:disable Drupal.NamingConventions.ValidVariableName.LowerCamelName
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   public $taxonomy_term;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\taxonomy\TermInterface $taxonomy_term
+   * @param TermInterface $taxonomy_term
    *   The taxonomy term is being processed.
    */
   public function __construct(TermInterface $taxonomy_term) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/scheduler/scheduler_rules_integration/src/Event/RulesNodeEvent.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The node which is being processed.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   public $node;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node which is being processed.
    */
   public function __construct(NodeInterface $node) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/scheduler/scheduler_rules_integration/src/Event/RulesMediaEvent.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The media item which is being processed.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   public $media;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media item which is being processed.
    */
   public function __construct(MediaInterface $media) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/scheduler/scheduler_rules_integration/src/Event/EventDeriver.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The scheduler manager.
    *
-   * @var \Drupal\scheduler\SchedulerManager
+   * @var SchedulerManager
    */
   protected $schedulerManager;

@@ @@
   /**
    * Creates a new EventDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\scheduler\SchedulerManager $scheduler_manager
+   * @param SchedulerManager $scheduler_manager
    *   The scheduler manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation, SchedulerManager $scheduler_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/scheduler/scheduler_rules_integration/scheduler_rules_integration.module:14

    ---------- begin diff ----------
@@ @@
 /**
  * Dispatch a Rules Integration event for an entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object being processed.
  * @param string $event_id
  *   The internal event id, for example NEW_FOR_PUBLISHING or CRON_PUBLISHED.
@@ @@
  * This function is called from the main Scheduler module publish() and
  * unpublish() functions in the SchedulerManager class.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object being processed.
  * @param string $action
  *   The action being performed - 'publish' or 'unpublish'.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


35) modules/contrib/scheduler/scheduler.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityTypeInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\scheduler\SchedulerManager;
 /**
  * @file
  * Scheduler publishes and unpublishes entities on dates specified by the user.
@@ @@
       $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('The Scheduler module provides the functionality for automatic publishing and unpublishing of entities, such and nodes and media items, at specified future dates.') . '</p>';
       $output .= '<p>' . t('You can read more in the <a href="@readme">readme</a> file or our <a href="@project">project page on Drupal.org</a>.', [
-        '@readme' => $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'scheduler') . '/README.md',
+        '@readme' => $GLOBALS['base_url'] . '/' . \Drupal::service('extension.list.module')->getPath('scheduler') . '/README.md',
         '@project' => 'https://drupal.org/project/scheduler',
       ]) . '</p>';
       break;
@@ @@
   $scheduler_manager = \Drupal::service('scheduler.manager');

   if (in_array($form_id, $scheduler_manager->getEntityFormIds())) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();
     _scheduler_entity_form_alter($form, $form_state, $form_id, $entity);
   }
@@ @@
 function _scheduler_entity_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $config = \Drupal::config('scheduler.settings');

-  /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+  /** @var EntityTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();

-  /** @var Drupal\Core\Entity\ContentEntityTypeInterface $contentEntityType */
+  /** @var ContentEntityTypeInterface $contentEntityType */
   $contentEntityType = \Drupal::entityTypeManager()->getDefinition($type->getEntityType()->getBundleOf());

-  /** @var \Drupal\Core\Entity\ContentEntityInterface $contentEntity */
+  /** @var ContentEntityInterface $contentEntity */
   $contentEntity = \Drupal::entityTypeManager()->getStorage($contentEntityType->id())->create([$contentEntityType->getKey('bundle') => 'scaffold']);

   $params = [
@@ @@
  */
 function _scheduler_translation_validate($form, FormStateInterface $form_state) {
   $settings = $form_state->getValues()['settings'];
-  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
+  /** @var SchedulerManager $scheduler_manager */
   $scheduler_manager = \Drupal::service('scheduler.manager');
   foreach ($settings as $entity_type => $content_types) {
     $publishing_enabled_types = $scheduler_manager->getEnabledTypes($entity_type, 'publish');
@@ @@
   $scheduler_cron = &drupal_static(__FUNCTION__, FALSE);
   $scheduler_cron = TRUE;

-  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
+  /** @var SchedulerManager $scheduler_manager */
   $scheduler_manager = \Drupal::service('scheduler.manager');
   $scheduler_manager->publish();
   $scheduler_manager->unpublish();
@@ @@
  * Implements hook_modules_installed().
  */
 function scheduler_modules_installed($modules) {
-  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
+  /** @var SchedulerManager $scheduler_manager */
   $scheduler_manager = \Drupal::service('scheduler.manager');
   $scheduler_manager->invalidatePluginCache();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


36) modules/contrib/scheduler/plugins/content_types/scheduler_form_pane.inc:17

    ---------- begin diff ----------
@@ @@
   'edit form' => 'scheduler_form_pane_node_form_menu_content_type_edit_form',
   'render callback' => 'scheduler_form_pane_content_type_render',
   'title' => t('Node form scheduler'),
-  'icon' => drupal_get_path('module', 'ctools') . '/plugins/content_types/node_form/icon_node_form.png',
+  'icon' => \Drupal::service('extension.list.module')->getPath('ctools') . '/plugins/content_types/node_form/icon_node_form.png',
   'description' => t('Scheduler date options on the Node form.'),
   'required context' => new ctools_context_required(t('Form'), 'node_form'),
   'category' => t('Form'),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/UnpublishNow.php" file, due to:                                   
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/SetUnpublishingDate.php" file, due to:                            
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/SetPublishingDate.php" file, due to:                              
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/SchedulerRulesActionBase.php" file, due to:                       
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/RemoveUnpublishingDate.php" file, due to:                         
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/RemovePublishingDate.php" file, due to:                           
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/PublishNow.php" file, due to:                                     
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/Legacy/LegacyUnpublishNow.php" file, due to:                      
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/Legacy/LegacySetUnpublishingDate.php" file, due to:               
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/Legacy/LegacySetPublishingDate.php" file, due to:                 
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/Legacy/LegacyRemoveUnpublishingDate.php" file, due to:            
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/Legacy/LegacyRemovePublishingDate.php" file, due to:              
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/RulesAc
         tion/Legacy/LegacyPublishNow.php" file, due to:                        
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/UnpublishingIsEnabled.php" file, due to:                            
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/ScheduledForUnpublishing.php" file, due to:                         
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/ScheduledForPublishing.php" file, due to:                           
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/PublishingIsEnabled.php" file, due to:                              
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/Legacy/LegacyUnpublishingIsEnabled.php" file, due to:               
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/Legacy/LegacyScheduledForUnpublishing.php" file, due to:            
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/Legacy/LegacyScheduledForPublishing.php" file, due to:              
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/scheduler/scheduler_rules_integration/src/Plugin/Conditi
         on/Legacy/LegacyPublishingIsEnabled.php" file, due to:                 
         "Analyze error: "Class Drupal\rules\Core\RulesConditionBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

