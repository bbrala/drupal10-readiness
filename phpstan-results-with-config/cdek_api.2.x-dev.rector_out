modules/contrib/cdek_api/cdek_api.module
modules/contrib/cdek_api/cdek_api.theme.inc
modules/contrib/cdek_api/src/CdekApi.php
modules/contrib/cdek_api/src/Controller/WidgetActionException.php
modules/contrib/cdek_api/src/Controller/WidgetController.php
modules/contrib/cdek_api/src/Element/CdekSelect.php
modules/contrib/cdek_api/src/Element/CdekWidget.php
modules/contrib/cdek_api/src/Event/CdekApiEvents.php
modules/contrib/cdek_api/src/Event/PickupPointsEvent.php
modules/contrib/cdek_api/src/Form/SettingsForm.php

6 files with changes
====================

1) modules/contrib/cdek_api/src/Form/SettingsForm.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The cache object associated with the 'cdek_api' bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The state key/value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache object associated with the 'cdek_api' bin.
-   * @param \Drupal\Core\State\StateInterface $state
-   *   The state key/value store.
-   */
+   * @param StateInterface $state
+   *   The state key/value store.*/
   public function __construct(ConfigFactoryInterface $config_factory, CacheBackendInterface $cache, StateInterface $state) {
     parent::__construct($config_factory);
     $this->cache = $cache;
@@ @@
    *
    * @param array $element
    *   The element structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   *   The current state of the form.
-   */
+   * @param FormStateInterface $form_state
+   *   The current state of the form.*/
   public function validateCacheLifetime(array $element, FormStateInterface $form_state) {
     $cache_type = (int) $form_state->getValue('cache_type');
     if ($cache_type === self::CACHE_TYPE_CUSTOM && !$form_state->getValue('cache_lifetime')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cdek_api/src/Event/PickupPointsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cdek_api\Event;

-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use CdekSDK\Common\Pvz;
 /**
  * Defines the pickup points event.
  *
@@ @@
   /**
    * Array of pickup points keyed by code.
    *
-   * @var \CdekSDK\Common\Pvz[]
+   * @var Pvz[]
    */
   protected $points;

@@ @@
   /**
    * PickupPointsEvent constructor.
    *
-   * @param \CdekSDK\Common\Pvz[] $points
+   * @param Pvz[] $points
    *   Array of pickup points keyed by code.
    * @param array $params
-   *   Parameters that were used to get the list of pickup points.
-   */
+   *   Parameters that were used to get the list of pickup points.*/
   public function __construct(array $points, array $params) {
     $this->points = $points;
     $this->params = $params;
@@ @@
   /**
    * Gets the list of pickup points.
    *
-   * @return \CdekSDK\Common\Pvz[]
-   *   Array of pickup points keyed by code.
-   */
+   * @return Pvz[]
+   *   Array of pickup points keyed by code.*/
   public function getPoints() {
     return $this->points;
   }
@@ @@
   /**
    * Sets the list of pickup points.
    *
-   * @param \CdekSDK\Common\Pvz[] $points
+   * @param Pvz[] $points
    *   Array of pickup points keyed by code.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cdek_api/src/Element/CdekWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cdek_api\Element;

+use Drupal\cdek_api\CdekApi;
+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Render\Element\FormElement;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    *
    * @return array
-   *   The processed element.
-   */
+   *   The processed element.*/
   public static function processCdekWidget(array &$element, FormStateInterface $form_state, array &$complete_form) {
     $element['#theme_wrappers'][] = 'form_element';
     $element['#title_display'] = 'none';
@@ @@
   /**
    * Gets the cdek_api service.
    *
-   * @return \Drupal\cdek_api\CdekApi
-   *   The cdek_api service.
-   */
+   * @return CdekApi
+   *   The cdek_api service.*/
   protected static function cdekApi() {
     return \Drupal::service('cdek_api');
   }
@@ @@
   /**
    * Gets the cache object.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
-   *   The cache object associated with the 'cdek_api' bin.
-   */
+   * @return CacheBackendInterface
+   *   The cache object associated with the 'cdek_api' bin.*/
   protected static function cache() {
     return \Drupal::cache('cdek_api');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cdek_api/src/Element/CdekSelect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cdek_api\Element;

+use Drupal\cdek_api\CdekApi;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Render\Element\CompositeFormElementTrait;
 use Drupal\Core\Render\Element\FormElement;
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    *
    * @return array
-   *   The processed element.
-   */
+   *   The processed element.*/
   public static function processCdekSelect(array &$element, FormStateInterface $form_state, array &$complete_form) {
     $value = is_array($element['#value']) ? $element['#value'] : [];
     $value += array_fill_keys(['country', 'region', 'city', 'point'], '');
@@ @@
    *
    * @param array $element
    *   The element structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
-   *   The element structure.
-   */
+   *   The element structure.*/
   public static function afterBuildCdekSelect(array $element, FormStateInterface $form_state) {
     $element['#value'] = $element['point']['#value'];
     $form_state->setValueForElement($element, $element['#value']);
@@ @@
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
-   *   The element to be rendered.
-   */
+   *   The element to be rendered.*/
   public static function ajaxUpdateCallback(array $form, FormStateInterface $form_state, Request $request) {
     // Get element parents from the request.
     $element_parents = explode('/', $request->query->get('element_parents'));
@@ @@
    * @param array $element
    *   The element structure.
    *
-   * @return \CdekSDK\Requests\PvzListRequest
-   *   An instance of the request object.
-   */
+   * @return PvzListRequest
+   *   An instance of the request object.*/
   protected static function resolveRequest(array $element) {
     $request = $element['#cdek_request'];
     if ($request instanceof PvzListRequest) {
@@ @@
   /**
    * Gets the cdek_api service.
    *
-   * @return \Drupal\cdek_api\CdekApi
-   *   The cdek_api service.
-   */
+   * @return CdekApi
+   *   The cdek_api service.*/
   protected static function cdekApi() {
     return \Drupal::service('cdek_api');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cdek_api/src/Controller/WidgetController.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The cdek_api service.
    *
-   * @var \Drupal\cdek_api\CdekApi
+   * @var CdekApi
    */
   protected $cdekApi;

@@ @@
   /**
    * WidgetController constructor.
    *
-   * @param \Drupal\cdek_api\CdekApi $cdek_api
-   *   The cdek_api service.
-   */
+   * @param CdekApi $cdek_api
+   *   The cdek_api service.*/
   public function __construct(CdekApi $cdek_api) {
     $this->cdekApi = $cdek_api;
   }
@@ @@
   /**
    * Returns JSON representing the response to the specified widget action.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
-   *   The JSON response.
-   */
+   * @return JsonResponse
+   *   The JSON response.*/
   public function action(Request $request) {
     $action = $request->query->get('isdek_action');
     $data = $this->doAction($action, $request);
@@ @@
    *
    * @param string $action
    *   Action to perform.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
-   *   The result of the action.
-   */
+   *   The result of the action.*/
   protected function doAction($action, Request $request) {
     $data = [];

@@ @@
    *
    * Returns the pickup points data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
    *   The result of the action.
    *
-   * @throws \Drupal\cdek_api\Controller\WidgetActionException
-   *   If the action fails.
-   */
+   * @throws WidgetActionException
+   *   If the action fails.*/
   protected function doActionPvz(Request $request) {
     $points_request = new PvzListRequest();
     $points_request->setType(PvzListRequest::TYPE_ALL);
@@ @@
    *
    * Returns the city ID by its name.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
    *   The result of the action.
    *
-   * @throws \Drupal\cdek_api\Controller\WidgetActionException
-   *   If the action fails.
-   */
+   * @throws WidgetActionException
+   *   If the action fails.*/
   protected function doActionCity(Request $request) {
     // TODO: Process 'address' parameter.
     if (($city = $request->query->get('city', '')) === '') {
@@ @@
    *
    * Calculates shipping cost.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
    *   The result of the action.
    *
-   * @throws \Drupal\cdek_api\Controller\WidgetActionException
-   *   If the action fails.
-   */
+   * @throws WidgetActionException
+   *   If the action fails.*/
   protected function doActionCalc(Request $request) {
     $widget_id = $request->attributes->get('widget_id');
     $shipment = $request->query->get('shipment');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cdek_api/src/CdekApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cdek_api;

+use Drupal\Core\Config\ImmutableConfig;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * A config object for the 'cdek_api.settings' configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Factory of HTTP clients.
    *
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $httpClientFactory;

@@ @@
   /**
    * The CDEK API client.
    *
-   * @var \CdekSDK\CdekClient
+   * @var CdekClient
    */
   protected $cdekClient;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The cache object associated with the 'cdek_api' bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The state key/value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * CdekApi constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Http\ClientFactory $http_client_factory
+   * @param ClientFactory $http_client_factory
    *   Factory of HTTP clients.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache object associated with the 'cdek_api' bin.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   *   The time service.
-   */
+   * @param TimeInterface $time
+   *   The time service.*/
   public function __construct(ConfigFactoryInterface $config_factory, ClientFactory $http_client_factory, EventDispatcherInterface $event_dispatcher, CacheBackendInterface $cache, StateInterface $state, TimeInterface $time) {
     $this->config = $config_factory->get('cdek_api.settings');
     $this->httpClientFactory = $http_client_factory;
@@ @@
   /**
    * Gets the CDEK API client.
    *
-   * @return \CdekSDK\CdekClient
-   *   The CDEK API client.
-   */
+   * @return CdekClient
+   *   The CDEK API client.*/
   public function getCdekClient() {
     if (!isset($this->cdekClient)) {
       $http_client = $this->httpClientFactory->fromOptions([
@@ @@
   /**
    * Gets the list of pickup points.
    *
-   * @param \CdekSDK\Requests\PvzListRequest|null $request
+   * @param PvzListRequest|null $request
    *   An instance of the request object.
    *
-   * @return \CdekSDK\Common\Pvz[]|null
-   *   Array of pickup points keyed by code. NULL on failure.
-   */
+   * @return Pvz[]|null
+   *   Array of pickup points keyed by code. NULL on failure.*/
   public function getPickupPoints(PvzListRequest $request = NULL) {
     $request = $request ?? new PvzListRequest();
     $params = $request->getParams();
@@ @@

       // Allow modules to override the list of pickup points.
       $event = new PickupPointsEvent($points, $params);
-      $this->eventDispatcher->dispatch(CdekApiEvents::PICKUP_POINTS, $event);
+      $this->eventDispatcher->dispatch($event, CdekApiEvents::PICKUP_POINTS);
       static::$points[$key] = $event->getPoints();
     }
     return static::$points[$key];
@@ @@
    * @param string $code
    *   The code of the point to load.
    *
-   * @return \CdekSDK\Common\Pvz|null
+   * @return Pvz|null
    *   The point object or NULL if there is no point with the given code.
    *
-   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()
-   */
+   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()*/
   public function getPickupPoint($code) {
     $points = $this->getPickupPoints();
     return $points[$code] ?? NULL;
@@ @@
   /**
    * Gets the list of countries.
    *
-   * @param \CdekSDK\Requests\PvzListRequest|null $request
+   * @param PvzListRequest|null $request
    *   An instance of the request object.
    *
    * @return array|null
    *   Array of country names keyed by code. NULL on failure.
    *
-   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()
-   */
+   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()*/
   public function getCountries(PvzListRequest $request = NULL) {
     $request = $request ?? new PvzListRequest();
     $key = $this->getCacheKey($request->getParams());
@@ @@
   /**
    * Gets the list of regions.
    *
-   * @param \CdekSDK\Requests\PvzListRequest|null $request
+   * @param PvzListRequest|null $request
    *   An instance of the request object.
    *
    * @return array|null
    *   Array of region names keyed by code. NULL on failure.
    *
-   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()
-   */
+   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()*/
   public function getRegions(PvzListRequest $request = NULL) {
     $request = $request ?? new PvzListRequest();
     $key = $this->getCacheKey($request->getParams());
@@ @@
   /**
    * Gets the list of cities.
    *
-   * @param \CdekSDK\Requests\PvzListRequest|null $request
+   * @param PvzListRequest|null $request
    *   An instance of the request object.
    *
    * @return array|null
    *   Array of city names keyed by code. NULL on failure.
    *
-   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()
-   */
+   * @see \Drupal\cdek_api\CdekApi::getPickupPoints()*/
   public function getCities(PvzListRequest $request = NULL) {
     $request = $request ?? new PvzListRequest();
     $key = $this->getCacheKey($request->getParams());
@@ @@
   /**
    * Compares two pickup points by their names.
    *
-   * @param \CdekSDK\Common\Pvz $point1
+   * @param Pvz $point1
    *   The first pickup point.
-   * @param \CdekSDK\Common\Pvz $point2
+   * @param Pvz $point2
    *   The second pickup point.
    *
    * @return int
    *   Returns < 0 if $point1 is less than $point2; > 0 if $point1 is greater
-   *   than $point2, and 0 if they are equal.
-   */
+   *   than $point2, and 0 if they are equal.*/
   protected function comparePointsByName(Pvz $point1, Pvz $point2) {
     return Unicode::strcasecmp($point1->Name, $point2->Name);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 6 files have been changed by Rector                                       

