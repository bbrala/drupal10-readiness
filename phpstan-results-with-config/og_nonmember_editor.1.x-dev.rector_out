modules/contrib/og_nonmember_editor/og_nonmember_editor.module
modules/contrib/og_nonmember_editor/src/EventSubscriber/GroupContentAccessEventSubscriber.php
modules/contrib/og_nonmember_editor/src/NonMemberStateTransitionValidation.php
modules/contrib/og_nonmember_editor/src/Plugin/EntityReferenceSelection/NonMemberSelection.php
modules/contrib/og_nonmember_editor/src/Plugin/Validation/Constraint/GroupContentModerationConstraint.php
modules/contrib/og_nonmember_editor/src/Plugin/Validation/Constraint/GroupContentModerationConstraintValidator.php
modules/contrib/og_nonmember_editor/tests/src/Functional/SiteStillWorks.php

3 files with changes
====================

1) modules/contrib/og_nonmember_editor/tests/src/Functional/SiteStillWorks.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();

@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/og_nonmember_editor/src/Plugin/EntityReferenceSelection/NonMemberSelection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_nonmember_editor\Plugin\EntityReferenceSelection;

+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\og\Plugin\EntityReferenceSelection\OgSelection;
 use Drupal\og\Og;

@@ @@
    *   (Optional) The operation the matching should be done with. Defaults
    *   to "CONTAINS".
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The EntityQuery object with the basic conditions and sorting applied to
    *   it.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/og_nonmember_editor/src/EventSubscriber/GroupContentAccessEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\og_nonmember_editor\EventSubscriber;

+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The service providing information about bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Constructs an OgEventSubscriber object.
    *
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The service providing information about bundles.
    */
   public function __construct(PermissionManagerInterface $permission_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ @@
   /**
    * Provides default permissions for the Node entity.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultNodePermissions(PermissionEventInterface $event) {
@@ @@
     $permissions = [];
     $bundle_info = $this->entityTypeBundleInfo->getBundleInfo('node');
     foreach ($bundle_ids['node'] as $bundle_id) {
-      /** @var \Drupal\workflows\WorkflowInterface $workflow */
+      /** @var WorkflowInterface $workflow */
       foreach (Workflow::loadMultipleByType('content_moderation') as $id => $workflow) {
         foreach ($workflow->getTypePlugin()->getTransitions() as $transition) {
           $permission_values = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 3 files have been changed by Rector                                       

