diff --git a/queue_ui.drush.inc b/queue_ui.drush.inc
index d022d5d..0d94700 100644
--- a/queue_ui.drush.inc
+++ b/queue_ui.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\queue_ui\QueueUIInterface;
 /**
  * Implements hook_drush_command().
  */
@@ -92,7 +93,7 @@ function drush_queue_ui_queue_release_all() {
  * @param $queue_name
  */
 function _queue_ui_release_queue($queue_name) {
-  /** @var \Drupal\queue_ui\QueueUIInterface $queue_ui */
+  /** @var QueueUIInterface $queue_ui */
   $queue_ui = \Drupal::service('plugin.manager.queue_ui')->fromQueueName($queue_name);
 
   // Remove leases
diff --git a/src/Form/ConfirmClearForm.php b/src/Form/ConfirmClearForm.php
index c69f91a..e92199d 100644
--- a/src/Form/ConfirmClearForm.php
+++ b/src/Form/ConfirmClearForm.php
@@ -23,8 +23,8 @@ class ConfirmClearForm extends ConfirmFormBase {
   /**
    * ConfirmClearForm constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param PrivateTempStoreFactory $temp_store_factory
+   * @param Messenger $messenger
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, Messenger $messenger) {
     $this->tempStoreFactory = $temp_store_factory;
@@ -32,7 +32,7 @@ class ConfirmClearForm extends ConfirmFormBase {
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
diff --git a/src/Form/ConfirmItemDeleteForm.php b/src/Form/ConfirmItemDeleteForm.php
index 91c6d58..739d1fc 100644
--- a/src/Form/ConfirmItemDeleteForm.php
+++ b/src/Form/ConfirmItemDeleteForm.php
@@ -26,15 +26,15 @@ class ConfirmItemDeleteForm extends ConfirmFormBase {
   protected $queue_item;
 
   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;
 
   /**
    * ConfirmItemDeleteForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param Messenger $messenger
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(Messenger $messenger, QueueUIManager $queueUIManager) {
     $this->messenger = $messenger;
@@ -42,7 +42,7 @@ class ConfirmItemDeleteForm extends ConfirmFormBase {
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ -95,7 +95,7 @@ class ConfirmItemDeleteForm extends ConfirmFormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $queue_ui = $this->queueUIManager->fromQueueName($this->queue_name);
diff --git a/src/Form/ConfirmItemReleaseForm.php b/src/Form/ConfirmItemReleaseForm.php
index d6dee59..b7dad5e 100644
--- a/src/Form/ConfirmItemReleaseForm.php
+++ b/src/Form/ConfirmItemReleaseForm.php
@@ -26,15 +26,15 @@ class ConfirmItemReleaseForm extends ConfirmFormBase {
   protected $queue_item;
 
   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;
 
   /**
    * ConfirmItemReleaseForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param Messenger $messenger
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(Messenger $messenger, QueueUIManager $queueUIManager) {
     $this->messenger = $messenger;
@@ -42,7 +42,7 @@ class ConfirmItemReleaseForm extends ConfirmFormBase {
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ -95,7 +95,7 @@ class ConfirmItemReleaseForm extends ConfirmFormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $queue_ui = $this->queueUIManager->fromQueueName($this->queue_name);
diff --git a/src/Form/InspectForm.php b/src/Form/InspectForm.php
index d4d39d3..658776a 100644
--- a/src/Form/InspectForm.php
+++ b/src/Form/InspectForm.php
@@ -15,21 +15,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class InspectForm extends FormBase {
 
   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;
 
   /**
    * InspectForm constructor.
    *
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(QueueUIManager $queueUIManager) {
     $this->queueUIManager = $queueUIManager;
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ -94,7 +94,7 @@ class InspectForm extends FormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
 
diff --git a/src/Form/ItemDetailForm.php b/src/Form/ItemDetailForm.php
index 1fcbaba..bca5d15 100644
--- a/src/Form/ItemDetailForm.php
+++ b/src/Form/ItemDetailForm.php
@@ -14,21 +14,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ItemDetailForm extends FormBase {
 
   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;
 
   /**
    * InspectForm constructor.
    *
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
+   * @param QueueUIManager $queueUIManager
    */
   public function __construct(QueueUIManager $queueUIManager) {
     $this->queueUIManager = $queueUIManager;
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ -102,7 +102,7 @@ class ItemDetailForm extends FormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
 
diff --git a/src/Form/OverviewForm.php b/src/Form/OverviewForm.php
index d7fcfe9..9cde3f8 100644
--- a/src/Form/OverviewForm.php
+++ b/src/Form/OverviewForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\queue_ui\Form;
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Extension\ModuleHandler;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -30,66 +31,66 @@ class OverviewForm extends FormBase {
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The Drupal state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The Drupal module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $dbConnection;
 
   /**
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   private $queueWorkerManager;
 
   /**
-   * @var \Drupal\queue_ui\QueueUIManager
+   * @var QueueUIManager
    */
   private $queueUIManager;
 
   /**
    * OverviewForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queueWorkerManager
-   * @param \Drupal\queue_ui\QueueUIManager $queueUIManager
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param QueueFactory $queue_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
+   * @param AccountInterface $current_user
+   * @param StateInterface $state
+   * @param ModuleHandlerInterface $module_handler
+   * @param QueueWorkerManagerInterface $queueWorkerManager
+   * @param QueueUIManager $queueUIManager
+   * @param MessengerInterface $messenger
    */
   public function __construct(QueueFactory $queue_factory, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user, StateInterface $state, ModuleHandlerInterface $module_handler, QueueWorkerManagerInterface $queueWorkerManager, QueueUIManager $queueUIManager, MessengerInterface $messenger) {
     $this->queueFactory = $queue_factory;
@@ -105,7 +106,7 @@ class OverviewForm extends FormBase {
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ -277,7 +278,7 @@ class OverviewForm extends FormBase {
    * We need this method, but each button has its own submit handler.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $form_state->cleanValues();
@@ -302,7 +303,7 @@ class OverviewForm extends FormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitBulkForm(array &$form, FormStateInterface $form_state) {
     if (in_array($form_state->getValue('operation'), [
@@ -321,7 +322,7 @@ class OverviewForm extends FormBase {
   /**
    * Process queue(s) with batch.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $queues
    */
   public function submitBatch(FormStateInterface $form_state, $queues) {
@@ -341,7 +342,7 @@ class OverviewForm extends FormBase {
   /**
    * Option to remove lease timestamps.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $queues
    */
   public function submitRelease(FormStateInterface $form_state, $queues) {
@@ -361,7 +362,7 @@ class OverviewForm extends FormBase {
   /**
    * Option to delete queue.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $queues
    */
   public function submitClear(FormStateInterface $form_state, $queues) {
diff --git a/src/Plugin/QueueUI/DatabaseQueue.php b/src/Plugin/QueueUI/DatabaseQueue.php
index 8562e62..4c5f5d5 100644
--- a/src/Plugin/QueueUI/DatabaseQueue.php
+++ b/src/Plugin/QueueUI/DatabaseQueue.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\queue_ui\Plugin\QueueUI;
 
+use Drupal\Core\Database\Database;
+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -20,17 +22,17 @@ class DatabaseQueue extends QueueUIBase implements ContainerFactoryPluginInterfa
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Database\Database
+   * @var Database
    */
   private $database;
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    *
-   * @return \Drupal\Core\Plugin\ContainerFactoryPluginInterface|\Drupal\queue_ui\Plugin\QueueUI\DatabaseQueue
+   * @return ContainerFactoryPluginInterface|\Drupal\queue_ui\Plugin\QueueUI\DatabaseQueue
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
@@ -47,7 +49,7 @@ class DatabaseQueue extends QueueUIBase implements ContainerFactoryPluginInterfa
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
     $this->database = $database;
@@ -88,7 +90,7 @@ class DatabaseQueue extends QueueUIBase implements ContainerFactoryPluginInterfa
   /**
    * @param $queue_name
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|null
+   * @return StatementInterface|int|null
    */
   public function releaseItems($queue_name) {
     return $this->database->update('queue')
diff --git a/src/QueueUIBatch.php b/src/QueueUIBatch.php
index b63c7de..16adeb1 100644
--- a/src/QueueUIBatch.php
+++ b/src/QueueUIBatch.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\queue_ui;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Queue\DelayableQueueInterface;
 use Drupal\Core\Queue\DelayedRequeueException;
 use Drupal\Core\Queue\RequeueException;
@@ -28,13 +31,13 @@ class QueueUIBatch {
    * @param $queue_name
    * @param $context
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public static function step($queue_name, &$context) {
     /** @var $queue_manager \Drupal\Core\Queue\QueueWorkerManagerInterface */
     $queue_manager = \Drupal::service('plugin.manager.queue_worker');
-    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+    /** @var QueueFactory $queue_factory */
     $queue_factory = \Drupal::service('queue');
 
     // Make sure every queue exists. There is no harm in trying to recreate
diff --git a/src/QueueUIManager.php b/src/QueueUIManager.php
index e8048cf..71f383c 100644
--- a/src/QueueUIManager.php
+++ b/src/QueueUIManager.php
@@ -22,9 +22,9 @@ class QueueUIManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/src/Functional/WeightChangeTest.php b/tests/src/Functional/WeightChangeTest.php
index 686b813..6d3cb2f 100644
--- a/tests/src/Functional/WeightChangeTest.php
+++ b/tests/src/Functional/WeightChangeTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\queue_ui\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -38,8 +40,8 @@ class WeightChangeTest extends BrowserTestBase {
   /**
    * Test reordering defined workers.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws EntityStorageException
+   * @throws ExpectationException
    */
   public function testWeightReordering() {
     $this->drupalLogin($this->createUser(['admin queue_ui']));
