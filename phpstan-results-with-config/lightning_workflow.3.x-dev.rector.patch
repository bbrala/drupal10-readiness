diff --git a/lightning_workflow.module b/lightning_workflow.module
index cd8bfac..c1b7a56 100644
--- a/lightning_workflow.module
+++ b/lightning_workflow.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Provides workflow enhancements for Drupal.
@@ -62,7 +63,7 @@ function lightning_workflow_form_node_type_add_form_alter(array &$form) {
 function _lightning_workflow_node_type_add_form_submit(array &$form, FormStateInterface $form_state) {
   $workflow = $form_state->getValue('workflow');
   if ($workflow) {
-    /** @var \Drupal\node\NodeTypeInterface $node_type */
+    /** @var NodeTypeInterface $node_type */
     $node_type = $form_state->getFormObject()->getEntity();
     assert($node_type->isNew());
     $node_type->setThirdPartySetting('lightning_workflow', 'workflow', $workflow);
@@ -97,7 +98,7 @@ function lightning_workflow_node_type_insert(NodeTypeInterface $node_type) {
 /**
  * Adds a content type to a moderation workflow.
  *
- * @param \Drupal\node\NodeTypeInterface $node_type
+ * @param NodeTypeInterface $node_type
  *   The content type.
  * @param string $workflow_id
  *   The workflow ID. The workflow must exist and use a plugin that implements
@@ -158,7 +159,7 @@ function lightning_workflow_preprocess_field(array &$variables) {
   if (\Drupal::moduleHandler()->moduleExists('quickedit')) {
     quickedit_preprocess_field($variables);
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $variables['element']['#object'];
 
     if ($entity instanceof EntityPublishedInterface && $entity->isPublished() && RouteSubscriber::isViewing($entity)) {
@@ -271,7 +272,7 @@ function lightning_workflow_entity_type_alter(array &$entity_types) {
   // If autosave_form is installed, all entity types should use our special
   // autosave handler which disables autosave in the Layout Builder UI.
   if (Drupal::moduleHandler()->moduleExists('autosave_form')) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     foreach ($entity_types as $entity_type) {
       // We cannot use the ::class form here, because it will go kaboom if
       // autosave_form is not installed.
diff --git a/modules/lightning_scheduler/lightning_scheduler.install b/modules/lightning_scheduler/lightning_scheduler.install
index 72bf9f9..611c8e5 100644
--- a/modules/lightning_scheduler/lightning_scheduler.install
+++ b/modules/lightning_scheduler/lightning_scheduler.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Contains installation and update hooks for Lightning Scheduler.
@@ -18,7 +19,7 @@ function lightning_scheduler_update_8001() {
 
   $definition_manager = Drupal::entityDefinitionUpdateManager();
 
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $installed */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $installed */
   $installed = Drupal::service('entity.last_installed_schema.repository');
 
   $migrations = [];
diff --git a/modules/lightning_scheduler/lightning_scheduler.module b/modules/lightning_scheduler/lightning_scheduler.module
index cce3235..3cb96df 100644
--- a/modules/lightning_scheduler/lightning_scheduler.module
+++ b/modules/lightning_scheduler/lightning_scheduler.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\lightning_scheduler\TransitionManager;
+use Drupal\content_moderation\ModerationInformationInterface;
 /**
  * @file
  * Contains hook implementations for Lightning Scheduler.
@@ -22,7 +24,7 @@ use Drupal\lightning_scheduler\Plugin\Field\FieldWidget\ModerationStateWidget;
  */
 function lightning_scheduler_library_info_alter(array &$libraries, $extension) {
   if ($extension === 'seven') {
-    $dir = drupal_get_path('module', 'lightning_scheduler');
+    $dir = \Drupal::service('extension.list.module')->getPath('lightning_scheduler');
 
     $libraries['lightning_scheduler.widget'] = [
       'css' => [
@@ -57,7 +59,7 @@ function lightning_scheduler_cron() {
 
   $field_map = Drupal::service('entity_field.manager')->getFieldMap();
 
-  /** @var \Drupal\lightning_scheduler\TransitionManager $transition_manager */
+  /** @var TransitionManager $transition_manager */
   $transition_manager = Drupal::service('lightning_scheduler.transition_manager');
 
   $start = new DrupalDateTime('now', DateTimeItemInterface::STORAGE_TIMEZONE);
@@ -89,7 +91,7 @@ function lightning_scheduler_cron() {
  */
 function lightning_scheduler_entity_base_field_info(EntityTypeInterface $entity_type) {
   $fields = [];
-  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
+  /** @var ModerationInformationInterface $moderation_info */
   $moderation_info = Drupal::service('content_moderation.moderation_information');
 
   $migrations = Drupal::service('lightning_scheduler.migrator')->getMigrations();
diff --git a/modules/lightning_scheduler/src/Commands/MigrationCommands.php b/modules/lightning_scheduler/src/Commands/MigrationCommands.php
index 3588850..3d11aa3 100644
--- a/modules/lightning_scheduler/src/Commands/MigrationCommands.php
+++ b/modules/lightning_scheduler/src/Commands/MigrationCommands.php
@@ -18,16 +18,16 @@ final class MigrationCommands extends DrushCommands {
   /**
    * The migrator service.
    *
-   * @var \Drupal\lightning_scheduler\Migrator
+   * @var Migrator
    */
   protected $migrator;
 
   /**
    * MigrationCommands constructor.
    *
-   * @param \Drupal\lightning_scheduler\Migrator $migrator
+   * @param Migrator $migrator
    *   The migrator service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(Migrator $migrator, TranslationInterface $translation = NULL) {
diff --git a/modules/lightning_scheduler/src/Form/MigrationConfirmationForm.php b/modules/lightning_scheduler/src/Form/MigrationConfirmationForm.php
index 0d7209f..c59ed26 100644
--- a/modules/lightning_scheduler/src/Form/MigrationConfirmationForm.php
+++ b/modules/lightning_scheduler/src/Form/MigrationConfirmationForm.php
@@ -21,16 +21,16 @@ final class MigrationConfirmationForm extends ConfirmFormBase {
   /**
    * The migrator service.
    *
-   * @var \Drupal\lightning_scheduler\Migrator
+   * @var Migrator
    */
   protected $migrator;
 
   /**
    * MigrationConfirmationForm constructor.
    *
-   * @param \Drupal\lightning_scheduler\Migrator $migrator
+   * @param Migrator $migrator
    *   The migrator service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   (optional) The messenger service.
    */
   public function __construct(Migrator $migrator, MessengerInterface $messenger = NULL) {
@@ -54,7 +54,7 @@ final class MigrationConfirmationForm extends ConfirmFormBase {
   /**
    * Performs access check.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Allowed if the current user is droot (Drupal root).
    */
   public function access() {
@@ -181,7 +181,7 @@ final class MigrationConfirmationForm extends ConfirmFormBase {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function purge(array &$form, FormStateInterface $form_state) {
diff --git a/modules/lightning_scheduler/src/Migrator.php b/modules/lightning_scheduler/src/Migrator.php
index 860bd66..4e2acd8 100644
--- a/modules/lightning_scheduler/src/Migrator.php
+++ b/modules/lightning_scheduler/src/Migrator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lightning_scheduler;
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -25,43 +27,43 @@ final class Migrator {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Migrator constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database, StateInterface $state, MessengerInterface $messenger, TranslationInterface $translation = NULL) {
@@ -102,7 +104,7 @@ final class Migrator {
    *   (optional) An array of entity type IDs. If given, only those entity types
    *   will be considered.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   The entity types that need to be migrated.
    */
   public function getEntityTypesToMigrate(array $limit = []) {
@@ -125,7 +127,7 @@ final class Migrator {
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The prepared query.
    */
   public function query($entity_type_id) {
@@ -249,12 +251,12 @@ final class Migrator {
   /**
    * Loads an entity to be migrated.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage handler.
    * @param object $item
    *   The relevant entity information. See ::migrate() for details.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The loaded entity, with $entity->original set.
    */
   protected function load(EntityStorageInterface $storage, $item) {
@@ -269,7 +271,7 @@ final class Migrator {
       $language_key = $entity_type->getKey('langcode');
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = isset($vid_key)
       ? $storage->loadRevision($item->$vid_key)
       : $storage->load($item->$id_key);
@@ -321,12 +323,12 @@ final class Migrator {
   /**
    * Generates a message to be shown before migrating a set of entity types.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The entity types that will be migrated.
    * @param bool $html
    *   Whether to include HTML tags in the message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The generated message.
    */
   public function generatePreMigrationMessage(array $entity_types, $html = TRUE) {
@@ -345,7 +347,7 @@ final class Migrator {
   /**
    * Converts a set of entity type definitions to key/value options.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The entity type definitions.
    *
    * @return string[]
diff --git a/modules/lightning_scheduler/src/Permissions.php b/modules/lightning_scheduler/src/Permissions.php
index 801c5cd..51de82e 100644
--- a/modules/lightning_scheduler/src/Permissions.php
+++ b/modules/lightning_scheduler/src/Permissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_scheduler;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\content_moderation\Permissions as BasePermissions;
 
 /**
@@ -20,7 +21,7 @@ class Permissions extends BasePermissions {
 
       $permission = preg_replace('/^use /', 'schedule ', $permission);
 
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $title */
+      /** @var TranslatableMarkup $title */
       $title = $info['title'];
       $info['title'] = $this->t('%workflow workflow: Schedule %transition transition.', $title->getArguments());
 
diff --git a/modules/lightning_scheduler/src/Plugin/Field/FieldWidget/ModerationStateWidget.php b/modules/lightning_scheduler/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
index 2f059ba..3af764e 100644
--- a/modules/lightning_scheduler/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
+++ b/modules/lightning_scheduler/src/Plugin/Field/FieldWidget/ModerationStateWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lightning_scheduler\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\content_moderation\ModerationInformation;
 use Drupal\content_moderation\Plugin\Field\FieldWidget\ModerationStateWidget as BaseModerationStateWidget;
@@ -26,21 +28,21 @@ class ModerationStateWidget extends BaseModerationStateWidget {
   /**
    * The transition manager.
    *
-   * @var \Drupal\lightning_scheduler\TransitionManager
+   * @var TransitionManager
    */
   protected $transitionManager;
 
   /**
    * The current entity.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -51,23 +53,23 @@ class ModerationStateWidget extends BaseModerationStateWidget {
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    * @param array $settings
    *   Field settings.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\content_moderation\ModerationInformation $moderation_information
+   * @param ModerationInformation $moderation_information
    *   Moderation information service.
-   * @param \Drupal\content_moderation\StateTransitionValidationInterface $validator
+   * @param StateTransitionValidationInterface $validator
    *   Moderation state transition validation service.
-   * @param \Drupal\lightning_scheduler\TransitionManager $transition_manager
+   * @param TransitionManager $transition_manager
    *   The transition manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, ModerationInformation $moderation_information, StateTransitionValidationInterface $validator, TransitionManager $transition_manager, ConfigFactoryInterface $config_factory) {
@@ -173,7 +175,7 @@ class ModerationStateWidget extends BaseModerationStateWidget {
    * @param mixed $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The latest revision of the entity, if one exists.
    */
   private function getLatestRevision($entity_type_id, $entity_id) {
@@ -195,7 +197,7 @@ class ModerationStateWidget extends BaseModerationStateWidget {
    *
    * @param array $element
    *   The unprocessed element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -214,7 +216,7 @@ class ModerationStateWidget extends BaseModerationStateWidget {
    *
    * @param array $element
    *   The hidden input.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to update.
    */
   public function storeValue(array $element, FormStateInterface $form_state) {
diff --git a/modules/lightning_scheduler/src/Time.php b/modules/lightning_scheduler/src/Time.php
index ae4bb29..1684b86 100644
--- a/modules/lightning_scheduler/src/Time.php
+++ b/modules/lightning_scheduler/src/Time.php
@@ -14,16 +14,16 @@ class Time extends BaseTime {
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $state;
 
   /**
    * Time constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(RequestStack $request_stack, StateInterface $state) {
diff --git a/modules/lightning_scheduler/src/TransitionManager.php b/modules/lightning_scheduler/src/TransitionManager.php
index d170fd0..f1092dd 100644
--- a/modules/lightning_scheduler/src/TransitionManager.php
+++ b/modules/lightning_scheduler/src/TransitionManager.php
@@ -24,43 +24,43 @@ class TransitionManager {
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;
 
   /**
    * The currently logged-in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * TransitionManager constructor.
    *
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently logged-in user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(ModerationInformationInterface $moderation_information, AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger, TranslationInterface $translation = NULL) {
@@ -80,7 +80,7 @@ class TransitionManager {
    * A workflow state is considered "available" if the current user has
    * permission to use or schedule it.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity which has the workflow.
    *
    * @return array
@@ -108,7 +108,7 @@ class TransitionManager {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @see lightning_scheduler_form_alter()
@@ -163,11 +163,11 @@ class TransitionManager {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $now
+   * @param DrupalDateTime $now
    *   The time that processing began.
    */
   public function process($entity_type_id, DrupalDateTime $now) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($this->getTransitionable($entity_type_id, $now) as $entity) {
       $error_context = [
         'entity_type' => (string) $entity->getEntityType()->getSingularLabel(),
@@ -220,7 +220,7 @@ class TransitionManager {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $now
+   * @param DrupalDateTime $now
    *   The time that processing began.
    *
    * @return \Generator
diff --git a/modules/lightning_scheduler/src/TransitionSet.php b/modules/lightning_scheduler/src/TransitionSet.php
index f6822fe..bd19aef 100644
--- a/modules/lightning_scheduler/src/TransitionSet.php
+++ b/modules/lightning_scheduler/src/TransitionSet.php
@@ -15,23 +15,23 @@ class TransitionSet {
   /**
    * A set of scheduled transition dates for an entity.
    *
-   * @var \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList
+   * @var DateTimeFieldItemList
    */
   protected $dateList;
 
   /**
    * A set of scheduled workflow states for an entity.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $stateList;
 
   /**
    * TransitionSet constructor.
    *
-   * @param \Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList $date_list
+   * @param DateTimeFieldItemList $date_list
    *   A set of scheduled transition dates for an entity.
-   * @param \Drupal\Core\Field\FieldItemListInterface $state_list
+   * @param FieldItemListInterface $state_list
    *   A set of scheduled workflow states for an entity.
    *
    * @throws \InvalidArgumentException
@@ -92,7 +92,7 @@ class TransitionSet {
   /**
    * Returns the expected workflow state for a given date and time.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $at
+   * @param DrupalDateTime $at
    *   The date and time.
    *
    * @return string|null
@@ -117,7 +117,7 @@ class TransitionSet {
   /**
    * Removes all transitions older than a given date and time.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $until
+   * @param DrupalDateTime $until
    *   The date and time older than which all transitions will be removed.
    */
   public function trim(DrupalDateTime $until) {
diff --git a/modules/lightning_scheduler/tests/src/Functional/BaseFieldMigrationTest.php b/modules/lightning_scheduler/tests/src/Functional/BaseFieldMigrationTest.php
index daa5736..882fc1e 100644
--- a/modules/lightning_scheduler/tests/src/Functional/BaseFieldMigrationTest.php
+++ b/modules/lightning_scheduler/tests/src/Functional/BaseFieldMigrationTest.php
@@ -38,14 +38,13 @@ class BaseFieldMigrationTest extends MigrationTestBase {
     // backend, it loaded revision 5. On SQLite, it loads revision 4. Rather
     // than find an elaborate workaround, I'm just disabling this part of the
     // test for now and testing the actual revisions, one at a time.
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     /* $node = $storage->load(1);
-    $this->assertInstanceOf(NodeInterface::class, $node);
-    $this->assertNode($node, '2018-09-19 08:57', 'published');
-    $this->assertTrue($node->hasTranslation('fr'));
-    $this->assertNode($node->getTranslation('fr'),
-    '2018-09-04 20:15', 'published'); */
-
+       $this->assertInstanceOf(NodeInterface::class, $node);
+       $this->assertNode($node, '2018-09-19 08:57', 'published');
+       $this->assertTrue($node->hasTranslation('fr'));
+       $this->assertNode($node->getTranslation('fr'),
+       '2018-09-04 20:15', 'published'); */
     // Test the default revision, loaded explicitly.
     $node = $storage->loadRevision(5);
     $this->assertInstanceOf(NodeInterface::class, $node);
diff --git a/modules/lightning_scheduler/tests/src/Functional/InlineEntityFormTest.php b/modules/lightning_scheduler/tests/src/Functional/InlineEntityFormTest.php
index d93941f..55cb4a1 100644
--- a/modules/lightning_scheduler/tests/src/Functional/InlineEntityFormTest.php
+++ b/modules/lightning_scheduler/tests/src/Functional/InlineEntityFormTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\lightning_scheduler\Functional;
 
+use Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface;
+use Behat\Mink\Element\NodeElement;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -36,7 +40,7 @@ class InlineEntityFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->createContentType(['type' => 'alpha']);
@@ -100,9 +104,9 @@ class InlineEntityFormTest extends BrowserTestBase {
       ])
       ->save();
 
-    /** @var \Drupal\workflows\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     $workflow = Workflow::load('editorial');
-    /** @var \Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface $plugin */
+    /** @var ContentModerationInterface $plugin */
     $plugin = $workflow->getTypePlugin();
     $plugin->addEntityTypeAndBundle('node', 'alpha');
     $plugin->addEntityTypeAndBundle('node', 'beta');
@@ -117,7 +121,7 @@ class InlineEntityFormTest extends BrowserTestBase {
   /**
    * Asserts that an inline entity form for field_inline_entity exists.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The inline entity form element.
    */
   private function assertInlineEntityForm() {
@@ -168,7 +172,7 @@ class InlineEntityFormTest extends BrowserTestBase {
     $this->setTransitionData($inline_field, $transition_2);
     $page->pressButton('Save');
 
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     $alpha = $storage->loadByProperties(['type' => 'alpha']);
     $beta = $storage->loadByProperties(['type' => 'beta']);
@@ -201,7 +205,7 @@ class InlineEntityFormTest extends BrowserTestBase {
  * @param string $form_mode
  *   The form mode.
  *
- * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+ * @return EntityFormDisplayInterface
  *   The entity form display associated with the given form mode.
  *
  * @see \Drupal\Core\Entity\EntityStorageInterface::create()
diff --git a/modules/lightning_scheduler/tests/src/Functional/MigrationTestBase.php b/modules/lightning_scheduler/tests/src/Functional/MigrationTestBase.php
index e66da5c..0da6276 100644
--- a/modules/lightning_scheduler/tests/src/Functional/MigrationTestBase.php
+++ b/modules/lightning_scheduler/tests/src/Functional/MigrationTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_scheduler\Functional;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\FunctionalTests\Update\UpdatePathTestBase;
 
 /**
@@ -58,7 +59,7 @@ abstract class MigrationTestBase extends UpdatePathTestBase {
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The storage handler for the entity type.
    */
   protected function postMigration($entity_type_id) {
diff --git a/modules/lightning_scheduler/tests/src/Functional/PurgeTest.php b/modules/lightning_scheduler/tests/src/Functional/PurgeTest.php
index 24c7ac3..3615bbe 100644
--- a/modules/lightning_scheduler/tests/src/Functional/PurgeTest.php
+++ b/modules/lightning_scheduler/tests/src/Functional/PurgeTest.php
@@ -37,7 +37,7 @@ class PurgeTest extends MigrationTestBase {
 
     $storage = $this->postMigration('node');
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $storage->load(1);
     $this->assertInstanceOf(NodeInterface::class, $node);
     $this->assertNode($node);
@@ -76,7 +76,7 @@ class PurgeTest extends MigrationTestBase {
   /**
    * Asserts that a node has had its scheduling data purged correctly.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to check.
    */
   protected function assertNode(NodeInterface $node) {
diff --git a/modules/lightning_scheduler/tests/src/Functional/ScheduledTransitionTest.php b/modules/lightning_scheduler/tests/src/Functional/ScheduledTransitionTest.php
index 12df8b0..0255663 100644
--- a/modules/lightning_scheduler/tests/src/Functional/ScheduledTransitionTest.php
+++ b/modules/lightning_scheduler/tests/src/Functional/ScheduledTransitionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_scheduler\Functional;
 
+use Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\lightning_scheduler\Traits\SchedulerUiTrait;
 use Drupal\Tests\Traits\Core\CronRunTrait;
@@ -33,7 +34,7 @@ class ScheduledTransitionTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // The editorial workflow is packaged with Lightning Workflow, so install
@@ -52,7 +53,7 @@ class ScheduledTransitionTest extends BrowserTestBase {
     node_access_rebuild();
 
     $workflow = Workflow::load('editorial');
-    /** @var \Drupal\content_moderation\Plugin\WorkflowType\ContentModerationInterface $plugin */
+    /** @var ContentModerationInterface $plugin */
     $plugin = $workflow->getTypePlugin();
     $plugin->addEntityTypeAndBundle('node', 'page');
     $workflow->save();
diff --git a/modules/lightning_scheduler/tests/src/FunctionalJavascript/TransitionTest.php b/modules/lightning_scheduler/tests/src/FunctionalJavascript/TransitionTest.php
index 2e6acbf..82f5bc0 100644
--- a/modules/lightning_scheduler/tests/src/FunctionalJavascript/TransitionTest.php
+++ b/modules/lightning_scheduler/tests/src/FunctionalJavascript/TransitionTest.php
@@ -38,7 +38,7 @@ class TransitionTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
 
diff --git a/modules/lightning_scheduler/tests/src/FunctionalJavascript/UiTest.php b/modules/lightning_scheduler/tests/src/FunctionalJavascript/UiTest.php
index 32439ef..ea404ec 100644
--- a/modules/lightning_scheduler/tests/src/FunctionalJavascript/UiTest.php
+++ b/modules/lightning_scheduler/tests/src/FunctionalJavascript/UiTest.php
@@ -32,7 +32,7 @@ class UiTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->setUpTimeZone();
diff --git a/modules/lightning_scheduler/tests/src/Kernel/BaseFieldsTest.php b/modules/lightning_scheduler/tests/src/Kernel/BaseFieldsTest.php
index 9009fcd..36a3a78 100644
--- a/modules/lightning_scheduler/tests/src/Kernel/BaseFieldsTest.php
+++ b/modules/lightning_scheduler/tests/src/Kernel/BaseFieldsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_scheduler\Kernel;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -20,7 +21,7 @@ class BaseFieldsTest extends KernelTestBase {
   ];
 
   public function testBaseFieldDefinitions() {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+    /** @var FieldDefinitionInterface[] $field_definitions */
     $field_definitions = $this->container->get('entity_field.manager')
       ->getBaseFieldDefinitions('node');
 
diff --git a/modules/lightning_scheduler/tests/src/Kernel/TransitionManagerTest.php b/modules/lightning_scheduler/tests/src/Kernel/TransitionManagerTest.php
index c56649d..3be8101 100644
--- a/modules/lightning_scheduler/tests/src/Kernel/TransitionManagerTest.php
+++ b/modules/lightning_scheduler/tests/src/Kernel/TransitionManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_scheduler\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormState;
@@ -17,6 +18,7 @@ use Drupal\lightning_scheduler\TransitionManager;
  */
 class TransitionManagerTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/modules/lightning_scheduler/tests/src/Kernel/Update/Update8003Test.php b/modules/lightning_scheduler/tests/src/Kernel/Update/Update8003Test.php
index 91dee8e..717f9f1 100644
--- a/modules/lightning_scheduler/tests/src/Kernel/Update/Update8003Test.php
+++ b/modules/lightning_scheduler/tests/src/Kernel/Update/Update8003Test.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_scheduler\Kernel\Update;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -23,7 +24,7 @@ class Update8003Test extends KernelTestBase {
    * Tests that the config object is created.
    */
   public function testUpdate() {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $this->container->get('config.factory');
 
     // Assert the config object does not already exist.
diff --git a/src/Plugin/IPEAccess/ContentModerationIPEAccess.php b/src/Plugin/IPEAccess/ContentModerationIPEAccess.php
index 33ad299..26d1713 100644
--- a/src/Plugin/IPEAccess/ContentModerationIPEAccess.php
+++ b/src/Plugin/IPEAccess/ContentModerationIPEAccess.php
@@ -28,7 +28,7 @@ class ContentModerationIPEAccess extends IPEAccessBase implements ContainerFacto
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $information;
 
@@ -41,7 +41,7 @@ class ContentModerationIPEAccess extends IPEAccessBase implements ContainerFacto
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $information
+   * @param ModerationInformationInterface $information
    *   The moderation information service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModerationInformationInterface $information) {
@@ -95,7 +95,7 @@ class ContentModerationIPEAccess extends IPEAccessBase implements ContainerFacto
    * ModerationInformationInterface::isLatestRevision(). The former is added in
    * Drupal 8.8, deprecating the latter.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
    * @return bool
diff --git a/src/Update/Update120.php b/src/Update/Update120.php
index 5d5c5e7..d7eb2c6 100644
--- a/src/Update/Update120.php
+++ b/src/Update/Update120.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_workflow\Update;
 
+use Drupal\lightning_roles\ContentRoleManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -23,16 +24,16 @@ final class Update120 implements ContainerInjectionInterface, ContainerAwareInte
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Update100 constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, TranslationInterface $translation = NULL) {
@@ -55,7 +56,7 @@ final class Update120 implements ContainerInjectionInterface, ContainerAwareInte
   /**
    * Grants the reviewer content role permissions to view unpublished content.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
@@ -65,7 +66,7 @@ final class Update120 implements ContainerInjectionInterface, ContainerAwareInte
       return;
     }
 
-    /** @var \Drupal\lightning_roles\ContentRoleManager $role_manager */
+    /** @var ContentRoleManager $role_manager */
     $role_manager = $this->container->get('lightning.content_roles');
 
     $question = (string) $this->t('Do you want to give content reviewers the ability to view unpublished content?');
diff --git a/src/Update/Update230.php b/src/Update/Update230.php
index 2ff9f16..eb5ee48 100644
--- a/src/Update/Update230.php
+++ b/src/Update/Update230.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_workflow\Update;
 
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Extension\ModuleInstallerInterface;
@@ -23,34 +24,34 @@ final class Update230 implements ContainerInjectionInterface {
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   private $moduleInstaller;
 
   /**
    * The content role manager.
    *
-   * @var \Drupal\lightning_roles\ContentRoleManager
+   * @var ContentRoleManager
    */
   private $contentRoleManager;
 
   /**
    * The workflow entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $workflowStorage;
 
   /**
    * Update230 constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $workflow_storage
+   * @param EntityStorageInterface $workflow_storage
    *   The workflow entity storage handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
-   * @param \Drupal\lightning_roles\ContentRoleManager $content_role_manager
+   * @param ContentRoleManager $content_role_manager
    *   (optional) The content role manager service.
    */
   public function __construct(ModuleInstallerInterface $module_installer, EntityStorageInterface $workflow_storage, TranslationInterface $translation = NULL, ContentRoleManager $content_role_manager = NULL) {
@@ -109,7 +110,7 @@ final class Update230 implements ContainerInjectionInterface {
    * @update
    */
   public function alterTransitions(StyleInterface $io) {
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->workflowStorage->load('editorial');
     if (empty($workflow)) {
       return;
diff --git a/src/Update/Update310.php b/src/Update/Update310.php
index 811456d..8da1705 100644
--- a/src/Update/Update310.php
+++ b/src/Update/Update310.php
@@ -21,23 +21,23 @@ final class Update310 implements ContainerInjectionInterface {
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   private $moduleInstaller;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * Update310 constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(ModuleInstallerInterface $module_installer, ConfigFactoryInterface $config_factory) {
@@ -58,7 +58,7 @@ final class Update310 implements ContainerInjectionInterface {
   /**
    * Enables the Moderation Dashboard module.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
    *
    * @update
diff --git a/src/Update/Update330.php b/src/Update/Update330.php
index 8141e7a..868f71c 100644
--- a/src/Update/Update330.php
+++ b/src/Update/Update330.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_workflow\Update;
 
+use Drupal\views\Entity\View;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,32 +23,32 @@ final class Update330 implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   private $moderationInformation;
 
   /**
    * Update330 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, ModerationInformationInterface $moderation_information) {
@@ -70,7 +71,7 @@ final class Update330 implements ContainerInjectionInterface {
   /**
    * Fixes timestamp and author references in the Moderation History view.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
@@ -85,7 +86,7 @@ final class Update330 implements ContainerInjectionInterface {
     }
 
     $view_storage = $this->entityTypeManager->getStorage('view');
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $view = $view_storage->load('moderation_history');
 
     // If the moderation_history view is deleted or otherwise unavailable, don't
