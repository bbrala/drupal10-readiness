modules/contrib/redhen/modules/redhen_connection/redhen_connection.api.php
modules/contrib/redhen/modules/redhen_connection/redhen_connection.install
modules/contrib/redhen/modules/redhen_connection/redhen_connection.module
modules/contrib/redhen/modules/redhen_connection/redhen_connection.page.inc
modules/contrib/redhen/modules/redhen_connection/redhen_connection.views.inc
modules/contrib/redhen/modules/redhen_connection/src/Access/ConnectionAccessCheck.php
modules/contrib/redhen/modules/redhen_connection/src/Annotation/ConnectionPermission.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionAccessControlHandler.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionHtmlRouteProvider.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionInterface.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionListBuilder.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionPermissions.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionRoleHtmlRouteProvider.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionRoleInterface.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionRoleListBuilder.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionService.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionServiceInterface.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionTypeHtmlRouteProvider.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionTypeInterface.php
modules/contrib/redhen/modules/redhen_connection/src/ConnectionTypeListBuilder.php
modules/contrib/redhen/modules/redhen_connection/src/Controller/ConnectionAddController.php
modules/contrib/redhen/modules/redhen_connection/src/Controller/RedhenConnections.php
modules/contrib/redhen/modules/redhen_connection/src/Entity/Connection.php
modules/contrib/redhen/modules/redhen_connection/src/Entity/ConnectionRole.php
modules/contrib/redhen/modules/redhen_connection/src/Entity/ConnectionType.php
modules/contrib/redhen/modules/redhen_connection/src/Entity/ConnectionViewsData.php
modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionDeleteForm.php
modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionForm.php
modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionRoleDeleteForm.php
modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionRoleForm.php
modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionSettingsForm.php
modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionTypeDeleteForm.php
modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionTypeForm.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/Action/ActivateConnection.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/Action/ChangeConnectionRole.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/Action/DeactivateConnection.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermission/ConnectionConnectionPermission.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermission/OrgConnectionPermission.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermission/SecondaryContactConnectionPermission.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermissionBase.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermissionInterface.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermissionManager.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/Derivative/RedhenConnectionLocalTask.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/EntityReferenceSelection/ConnectionRoleSelection.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/views/access/ConnectionAccess.php
modules/contrib/redhen/modules/redhen_connection/src/Plugin/views/relationship/ConnectionRelationship.php
modules/contrib/redhen/modules/redhen_connection/src/Routing/RouteSubscriber.php
modules/contrib/redhen/modules/redhen_connection/src/ViewsData.php
modules/contrib/redhen/modules/redhen_contact/redhen_contact.api.php
modules/contrib/redhen/modules/redhen_contact/redhen_contact.drush.inc
modules/contrib/redhen/modules/redhen_contact/redhen_contact.module
modules/contrib/redhen/modules/redhen_contact/redhen_contact.page.inc
modules/contrib/redhen/modules/redhen_contact/src/Commands/RedhenContactCommands.php
modules/contrib/redhen/modules/redhen_contact/src/ContactAccessControlHandler.php
modules/contrib/redhen/modules/redhen_contact/src/ContactHtmlRouteProvider.php
modules/contrib/redhen/modules/redhen_contact/src/ContactInterface.php
modules/contrib/redhen/modules/redhen_contact/src/ContactListBuilder.php
modules/contrib/redhen/modules/redhen_contact/src/ContactPermissions.php
modules/contrib/redhen/modules/redhen_contact/src/ContactTypeHtmlRouteProvider.php
modules/contrib/redhen/modules/redhen_contact/src/ContactTypeInterface.php
modules/contrib/redhen/modules/redhen_contact/src/ContactTypeListBuilder.php
modules/contrib/redhen/modules/redhen_contact/src/ContextProvider/RedhenContactRouteContext.php
modules/contrib/redhen/modules/redhen_contact/src/Controller/ContactAddController.php
modules/contrib/redhen/modules/redhen_contact/src/Controller/ContactAutocompleteController.php
modules/contrib/redhen/modules/redhen_contact/src/Entity/Contact.php
modules/contrib/redhen/modules/redhen_contact/src/Entity/ContactType.php
modules/contrib/redhen/modules/redhen_contact/src/Form/ContactDeleteForm.php
modules/contrib/redhen/modules/redhen_contact/src/Form/ContactForm.php
modules/contrib/redhen/modules/redhen_contact/src/Form/ContactSettingsForm.php
modules/contrib/redhen/modules/redhen_contact/src/Form/ContactTypeDeleteForm.php
modules/contrib/redhen/modules/redhen_contact/src/Form/ContactTypeForm.php
modules/contrib/redhen/modules/redhen_contact/src/Plugin/Block/RedhenContactFormBlock.php
modules/contrib/redhen/modules/redhen_contact/src/Plugin/Field/FieldWidget/ContactAutocompleteWidget.php
modules/contrib/redhen/modules/redhen_contact/src/Plugin/Validation/Constraint/ContactEmailUnique.php
modules/contrib/redhen/modules/redhen_contact/src/Plugin/Validation/Constraint/ContactEmailUniqueValidator.php
modules/contrib/redhen/modules/redhen_contact/src/Plugin/views/argument_default/CurrentContact.php
modules/contrib/redhen/modules/redhen_dedupe/redhen_dedupe.module
modules/contrib/redhen/modules/redhen_dedupe/redhen_dedupe.theme.inc
modules/contrib/redhen/modules/redhen_dedupe/src/Controller/DefaultController.php
modules/contrib/redhen/modules/redhen_dedupe/src/Form/RedhenDedupeFilterForm.php
modules/contrib/redhen/modules/redhen_dedupe/src/Form/RedhenDedupeMergeForm.php
modules/contrib/redhen/modules/redhen_org/redhen_org.api.php
modules/contrib/redhen/modules/redhen_org/redhen_org.install
modules/contrib/redhen/modules/redhen_org/redhen_org.module
modules/contrib/redhen/modules/redhen_org/redhen_org.page.inc
modules/contrib/redhen/modules/redhen_org/src/ContextProvider/RedhenOrgRouteContext.php
modules/contrib/redhen/modules/redhen_org/src/Controller/OrgAddController.php
modules/contrib/redhen/modules/redhen_org/src/Entity/Org.php
modules/contrib/redhen/modules/redhen_org/src/Entity/OrgType.php
modules/contrib/redhen/modules/redhen_org/src/Form/OrgDeleteForm.php
modules/contrib/redhen/modules/redhen_org/src/Form/OrgForm.php
modules/contrib/redhen/modules/redhen_org/src/Form/OrgTypeDeleteForm.php
modules/contrib/redhen/modules/redhen_org/src/Form/OrgTypeForm.php
modules/contrib/redhen/modules/redhen_org/src/OrgAccessControlHandler.php
modules/contrib/redhen/modules/redhen_org/src/OrgHtmlRouteProvider.php
modules/contrib/redhen/modules/redhen_org/src/OrgInterface.php
modules/contrib/redhen/modules/redhen_org/src/OrgListBuilder.php
modules/contrib/redhen/modules/redhen_org/src/OrgPermissions.php
modules/contrib/redhen/modules/redhen_org/src/OrgTypeHtmlRouteProvider.php
modules/contrib/redhen/modules/redhen_org/src/OrgTypeInterface.php
modules/contrib/redhen/modules/redhen_org/src/OrgTypeListBuilder.php
modules/contrib/redhen/redhen.module
modules/contrib/redhen/src/Event/EntityEvents.php
modules/contrib/redhen/src/Form/RedhenAdminSettingsForm.php
modules/contrib/redhen/src/Routing/RouteSubscriber.php

49 files with changes
=====================

1) modules/contrib/redhen/modules/redhen_org/src/OrgTypeHtmlRouteProvider.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/redhen/modules/redhen_org/src/OrgPermissions.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a standard list of permissions for a given org type.
    *
-   * @param \Drupal\redhen_org\Entity\OrgType $org_type
+   * @param OrgType $org_type
    *   The machine name of the org type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/redhen/modules/redhen_org/src/OrgHtmlRouteProvider.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddPageRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/redhen/modules/redhen_org/src/OrgAccessControlHandler.php:22

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\redhen_org\OrgInterface $entity */
-
+    /** @var OrgInterface $entity */
     // Get Org bundle.
     $entity_bundle = $entity->getType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/redhen/modules/redhen_org/src/Controller/OrgAddController.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Displays add links for available bundles/types for entity redhen_org .
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
   /**
    * Presents the creation form for redhen_org entities of given bundle/type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $redhen_org_type
+   * @param EntityInterface $redhen_org_type
    *   The custom bundle to add.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
   /**
    * Provides the page title for this controller.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $redhen_org_type
+   * @param EntityInterface $redhen_org_type
    *   The custom bundle/type being added.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/redhen/modules/redhen_org/src/ContextProvider/RedhenOrgRouteContext.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a new RedhenOrgRouteContext object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/redhen/modules/redhen_org/redhen_org.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Database\Connection;
 /**
  * @file
  * Install & update hooks for the Redhen Org module.
  */
-
 /**
  * Change the redhen org name to 255 characters.
  */
@@ @@
   $column = 'name';
   $max_length = 255;
   // Alter value field length in fields table:
-  /** @var \Drupal\Core\Database\Connection $database_replica */
+  /** @var Connection $database_replica */
   $database_replica = \Drupal::service('database.replica');
   $database_replica->query("ALTER TABLE `{$table}` CHANGE `{$column}` `{$column}` VARCHAR( {$max_length} )");
   // Alter value field length in fields revision table:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/redhen/modules/redhen_org/redhen_org.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\redhen_org\OrgInterface;
 /**
  * @file
  * Describes API functions for the RedHen Org module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the display name for a org.
  *
  * @param string $name
  *   The generated name.
- * @param Drupal\redhen_org\OrgInterface $org
+ * @param OrgInterface $org
  *   The org whose name is being generated.
  *
  * @return string
  */
-function hook_redhen_org_name_alter(&$name, Drupal\redhen_org\OrgInterface $org) {
+function hook_redhen_org_name_alter(&$name, OrgInterface $org) {
   // Use ALL CAPS when displaying Redhen Org name.
   return strtoupper($org->get('name')->value);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/redhen/modules/redhen_dedupe/src/Form/RedhenDedupeMergeForm.php:78

    ---------- begin diff ----------
@@ @@
       '#type' => 'fieldset',
       '#title' => $this->t('Master contact details'),
       'preview' => [
-        '#markup' => render($preview),
+        '#markup' => \Drupal::service('renderer')->render($preview),
       ],
     ];

@@ @@
   /**
    * Merge values from contacts into master contact and handle related entities.
    *
-   * @param \Drupal\redhen_contact\Entity\Contact $master
+   * @param Contact $master
    *   The master RedHen Contact.
    * @param array $values
    *   Values to update the master contact with.
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/redhen/modules/redhen_contact/src/Plugin/Block/RedhenContactFormBlock.php:32

    ---------- begin diff ----------
@@ @@
    * Form to determine which Redhen Contact fields will appear on the form.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @return array
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/redhen/modules/redhen_contact/src/Form/ContactSettingsForm.php:35

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/redhen/modules/redhen_contact/src/Controller/ContactAutocompleteController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_contact\Controller;

+use Drupal\Core\Database\Connection;
+use Drupal\redhen_contact\Entity\Contact;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\Element\EntityAutocomplete;
@@ @@
   /**
    * The current primary database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Handler for autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function autocomplete(Request $request) {
@@ @@
       $contact_ids = $query->fetchCol();

       $contacts = $this->entityTypeManager()->getStorage('redhen_contact')->loadMultiple($contact_ids);
-      /** @var \Drupal\redhen_contact\Entity\Contact $contact */
+      /** @var Contact $contact */
       foreach ($contacts as $contact) {
         $results[] = [
           'value' => EntityAutocomplete::getEntityLabels([$contact]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/redhen/modules/redhen_contact/src/Controller/ContactAddController.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Displays add links for available bundles/types for entity redhen_contact .
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
   /**
    * Presents the creation form for redhen_contact entities of given bundle/type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $redhen_contact_type
+   * @param EntityInterface $redhen_contact_type
    *   The custom bundle to add.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
   /**
    * Provides the page title for this controller.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $redhen_contact_type
+   * @param EntityInterface $redhen_contact_type
    *   The custom bundle/type being added.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/redhen/modules/redhen_contact/src/ContextProvider/RedhenContactRouteContext.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a new RedhenContactRouteContext object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/redhen/modules/redhen_contact/src/ContactTypeHtmlRouteProvider.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/redhen/modules/redhen_contact/src/ContactPermissions.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a standard list of permissions for a given contact type.
    *
-   * @param \Drupal\redhen_contact\Entity\ContactType $contact_type
+   * @param ContactType $contact_type
    *   The machine name of the contact type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/redhen/modules/redhen_contact/src/ContactHtmlRouteProvider.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddPageRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/redhen/modules/redhen_contact/src/ContactAccessControlHandler.php:22

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\redhen_contact\ContactInterface $entity */
-
+    /** @var ContactInterface $entity */
     // Get Contact bundle.
     $entity_bundle = $entity->getType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/redhen/modules/redhen_contact/src/Commands/RedhenContactCommands.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration object factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $entityDefinitionUpdateManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs a new PathautoCommands object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration object factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entityDefinitionUpdateManager
+   * @param EntityDefinitionUpdateManagerInterface $entityDefinitionUpdateManager
    *   Entity definition update manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager, EntityDefinitionUpdateManagerInterface $entityDefinitionUpdateManager, Connection $database) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/redhen/modules/redhen_contact/redhen_contact.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\field\Entity\FieldConfig;
 /**
  * @file
  * Contains redhen_contact.module..
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state array.
- * @param \Drupal\redhen_contact\Entity\Contact $contact
+ * @param Contact $contact
  *   The Contact to build the form on.
  */
 function _redhen_contact_user_embed_contact_form(&$form, &$form_state, Contact $contact, $form_mode = 'default') {
@@ @@
  * User edit form RedHen Contact validation handler.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function redhen_contact_user_update_validate($form, &$form_state) {

@@ @@
  * Helper function for validating Contact Form values submitted via User forms.
  *
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
- * @param \Drupal\redhen_contact\Entity\Contact $contact
+ * @param FormStateInterface $form_state
+ * @param Contact $contact
  */
 function _redhen_contact_user_submission_validate($form, &$form_state, Contact $contact) {

@@ @@
  *   Form state array.
  * @param EntityFormDisplay $form_display
  *   EntityFormDisplay to extract field values from.
- * @param \Drupal\redhen_contact\Entity\Contact $contact
+ * @param Contact $contact
  *   RedhenContact to update.
  * @param bool $limit_values
  *   Whether to limit updated values to non-null fields.
@@ @@
  *
  * @param array $form
  *   The RedHen contact form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The RedHen contact form state.
  * @param string $contact_type
  *   The RedHen Contact Type.
  *
- * @return \Drupal\Core\Form\FormStateInterface
+ * @return FormStateInterface
  *   The modified form_state.
  */
 function redhen_contact_user_registration_form_state(array $form, FormStateInterface $form_state, $contact_type) {
@@ @@
  *   TRUE if the field contains a value, FALSE otherwise.
  */
 function redhen_contact_form_field_has_value($definition, $value) {
-  if ($definition instanceof \Drupal\Core\Field\BaseFieldDefinition) {
+  if ($definition instanceof BaseFieldDefinition) {
     // Base fields can have their values compared against the field's
     // default value. If the value matches the default, the field is empty.
     if ($value === $definition->getDefaultValueLiteral()) {
@@ @@
       return FALSE;
     }
   }
-  else if ($definition instanceof \Drupal\field\Entity\FieldConfig) {
+  else if ($definition instanceof FieldConfig) {
     // Some entity fields require special logic to determine if they are empty.
     // Start with the field type.
     $field_type = $definition->getType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


21) modules/contrib/redhen/modules/redhen_contact/redhen_contact.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\redhen_contact\ContactInterface;
 /**
  * @file
  * Describes API functions for the RedHen Contact module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the display name for a contact.
  *
  * @param string $name
  *   The generated name.
- * @param Drupal\redhen_contact\ContactInterface $contact
+ * @param ContactInterface $contact
  *   The contact whose name is being generated.
  *
  * @return string
  */
-function hook_redhen_contact_name_alter(&$name, Drupal\redhen_contact\ContactInterface $contact) {
+function hook_redhen_contact_name_alter(&$name, ContactInterface $contact) {
   return $contact->get('last_name')->value . ', ' . $contact->get('first_name')->value;
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/redhen/modules/redhen_connection/src/ViewsData.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection;

+use Drupal\views\EntityViewsDataInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The connection service.
    *
-   * @var \Drupal\redhen_connection\ConnectionServiceInterface
+   * @var ConnectionServiceInterface
    */
   protected $connections;

@@ @@
   /**
    * Creates a new ViewsData instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\redhen_connection\ConnectionServiceInterface $connections
+   * @param ConnectionServiceInterface $connections
    *   The connection service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConnectionServiceInterface $connections) {
@@ @@
     foreach ($this->connections->getConnectionEntityTypes($this->entityTypeManager->getDefinitions()) as $connection_type_id => $endpoints) {
       foreach ($endpoints as $endpoint_id => $entity_types) {
         foreach ($entity_types as $entity_type_id => $entity_type) {
-          /** @var \Drupal\views\EntityViewsDataInterface $views_data */
+          /** @var EntityViewsDataInterface $views_data */
           // We need the views_data handler in order to get the table name later.
           if ($this->entityTypeManager->hasHandler($entity_type_id, 'views_data') && $views_data = $this->entityTypeManager->getHandler($entity_type_id, 'views_data')) {
             $string_helpers = [
@@ @@
   /**
    * Gets the table of an entity type to be used as endpoint table in views.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/redhen/modules/redhen_connection/src/Routing/RouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/redhen/modules/redhen_connection/src/Plugin/views/relationship/ConnectionRelationship.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|null
+   * @var EntityTypeManagerInterface|null
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Retrieves the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   public function getEntityTypeManager() {
@@ @@
   /**
    * Sets the entity type manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The new entity type manager.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/redhen/modules/redhen_connection/src/Plugin/views/access/ConnectionAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Plugin\views\access;

+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\redhen_connection\Access\ConnectionAccessCheck;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\views\Plugin\views\access\AccessPluginBase;
@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The RedHen connection access checker.
    *
-   * @var \Drupal\redhen_connection\Access\ConnectionAccessCheck
+   * @var ConnectionAccessCheck
    */
   protected $connectionAccessCheck;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/redhen/modules/redhen_connection/src/Plugin/Derivative/RedhenConnectionLocalTask.php:29

    ---------- begin diff ----------
@@ @@
    *
    * @param ConnectionService $service
    *   The service manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(ConnectionService $service, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermissionManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermissionInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Get the influencer entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $subject_entity
+   * @param EntityInterface $subject_entity
    *   The subject entity.
    *
    * @return array
@@ @@
   /**
    * Determine if the contact execute the operation on the subject entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $subject_entity
+   * @param EntityInterface $subject_entity
    *   The entity that is being accessed.
    * @param string $operation
    *   The operation that is being performed (view, update, delete, view label).
-   * @param \Drupal\redhen_contact\Entity\Contact $contact
+   * @param Contact $contact
    *   The Redhen contact object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermissionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Plugin;

+use Drupal\redhen_connection\ConnectionService;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\redhen_contact\Entity\Contact;
@@ @@
   /**
    * Connection Service.
    *
-   * @var \Drupal\redhen_connection\ConnectionService
+   * @var ConnectionService
    */
   public $redhenConnectionConnections;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/redhen/modules/redhen_connection/src/Plugin/ConnectionPermission/ConnectionConnectionPermission.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * A Redhen Contact Object.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   private $contact;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/redhen/modules/redhen_connection/src/Plugin/Action/DeactivateConnection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Plugin\Action;

+use Drupal\redhen_connection\ConnectionInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;

@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\redhen_connection\ConnectionInterface $object */
+    /** @var ConnectionInterface $object */
     $access = $object->status->access('edit', $account, TRUE);
     return $return_as_object ? $access : $access->isAllowed();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/redhen/modules/redhen_connection/src/Plugin/Action/ActivateConnection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Plugin\Action;

+use Drupal\redhen_connection\ConnectionInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;

@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\redhen_connection\ConnectionInterface $object */
+    /** @var ConnectionInterface $object */
     $access = $object->status->access('edit', $account, TRUE);
     return $return_as_object ? $access : $access->isAllowed();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Form;

+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\redhen_connection\Entity\ConnectionType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
 class ConnectionTypeForm extends EntityForm {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
     }, $entity_types);

     $form['#tree'] = TRUE;
-    /** @var \Drupal\redhen_connection\Entity\ConnectionType $redhen_connection_type */
+    /** @var ConnectionType $redhen_connection_type */
     $redhen_connection_type = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ @@
    * Ajax callback to update the bundle options.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @return mixed
    */
   public function updateBundleOptions($form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionSettingsForm.php:35

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/redhen/modules/redhen_connection/src/Form/ConnectionRoleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Form;

+use Drupal\redhen_connection\ConnectionTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     ];

     // Permissions.
-    /** @var \Drupal\redhen_connection\ConnectionTypeInterface $connection_type */
+    /** @var ConnectionTypeInterface $connection_type */
     $connection_type = $this->getEntityFromRouteMatch($this->getRouteMatch(), 'redhen_connection_type');

     // @todo Change getEndpointEntityTypeId to Ids and take no argument to get all endpoints.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/redhen/modules/redhen_connection/src/Entity/Connection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Entity;

+use Drupal\redhen_connection\ConnectionTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
@@ @@
    * {@inheritdoc}
    */
   public static function bundleFieldDefinitions(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
-    /** @var \Drupal\redhen_connection\ConnectionTypeInterface $connection_type */
+    /** @var ConnectionTypeInterface $connection_type */
     $connection_type = ConnectionType::load($bundle);
     $fields = [];
     // Set bundle specific settings for each of our endpoint fields.
     for ($x = 1; $x <= REDHEN_CONNECTION_ENDPOINTS; $x++) {
-      /** @var \Drupal\Core\Field\BaseFieldDefinition $fields[$field] */
+      /** @var BaseFieldDefinition $fields [$field] */
       $endpoint_type = $connection_type->getEndpointEntityTypeId($x);
       $field = 'endpoint_' . $x;
       $fields[$field] = clone $base_field_definitions[$field];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/redhen/modules/redhen_connection/src/Controller/RedhenConnections.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
     return new static(
       $entity_type_manager->getStorage('redhen_connection'),
@@ @@
   /**
    * Displays add links for available bundles/types for redhen_connection.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/redhen/modules/redhen_connection/src/Controller/ConnectionAddController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
     return new static(
       $entity_type_manager->getStorage('redhen_connection'),
@@ @@
   /**
    * Displays add links for available bundles/types for redhen_connection.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ @@
   /**
    * Creation form for redhen_connection entities of given bundle/type.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
-   * @param \Drupal\Core\Entity\EntityInterface $redhen_connection_type
+   * @param EntityInterface $redhen_connection_type
    *   The custom bundle to add.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for one of the endpoints.
    *
    * @return array
@@ @@
   /**
    * Provides the page title for this controller.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $redhen_connection_type
+   * @param EntityInterface $redhen_connection_type
    *   The custom bundle/type being added.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The provided endpoint.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/redhen/modules/redhen_connection/src/ConnectionTypeHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/redhen/modules/redhen_connection/src/ConnectionServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   /**
    * Returns connection types that can be connected to 1 or 2 entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity 1.
-   * @param \Drupal\Core\Entity\EntityInterface $entity2
+   * @param EntityInterface $entity2
    *   Entity 2.
    *
    * @return array
@@ @@
   /**
    * Returns the connections to this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we're querying against.
-   * @param \Drupal\Core\Entity\EntityInterface $entity2
+   * @param EntityInterface $entity2
    *   The second entity we're querying against.
    * @param string $connection_type
    *   (optional) Limit returned connections to this type.
@@ @@
   /**
    * Returns the number of connections to this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we're querying against.
-   * @param \Drupal\Core\Entity\EntityInterface $entity2
+   * @param EntityInterface $entity2
    *   The entity we're querying against.
    * @param string $connection_type
    *   (optional) Limit returned connections to this type.
@@ @@
   /**
    * Returns the other entities that are connected to this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we're querying against.
    * @param string $connection_type
    *   (optional) Limit returned entities to ones connected via this type.
@@ @@
   /**
    * Check entity access via its connections & current user's connection roles.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $endpoint1
+   * @param EntityInterface $endpoint1
    *   Endpoint 1 of the connection.
-   * @param \Drupal\Core\Entity\EntityInterface $endpoint2
+   * @param EntityInterface $endpoint2
    *   Endpoint 2 of the connection.
    * @param string $operation
    *   The entity operation (view, view label, update, delete, create)
@@ @@
    * @param string $permission_key
    *   Key for checking permissions against.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Access result, either neutral or allowed.
    */
   public function checkConnectionPermission(EntityInterface $endpoint1, EntityInterface $endpoint2, $operation, $permission_key);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/redhen/modules/redhen_connection/src/ConnectionService.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    * @param \Drupal\Core\Database\Connection $connection
    *   The database connection.
@@ @@
   /**
    * Query for connections.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we're querying against.
-   * @param \Drupal\Core\Entity\EntityInterface $entity2
+   * @param EntityInterface $entity2
    *   The second entity we're querying against.
    * @param string $connection_type
    *   Limit query to this connection type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/redhen/modules/redhen_connection/src/ConnectionRoleHtmlRouteProvider.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the edit-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEditFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/redhen/modules/redhen_connection/src/ConnectionPermissions.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a standard list of permissions for a given Connection type.
    *
-   * @param \Drupal\redhen_connection\Entity\ConnectionType $connection_type
+   * @param ConnectionType $connection_type
    *   The machine name of the Connection type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


44) modules/contrib/redhen/modules/redhen_connection/src/ConnectionHtmlRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets all entity type add connection routes.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $connection_entity_type
+   * @param EntityTypeInterface $connection_entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
@@ @@
    * @param string $connection_entity_type_id
    *   Connection entity type machine name.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   Drupal route object.
    */
   protected function generateRoute($canonical, $path, array $parameters, $controller, $title_callback, $connection_entity_type_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/redhen/modules/redhen_connection/src/ConnectionAccessControlHandler.php:22

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\redhen_connection\ConnectionInterface $entity */
-
+    /** @var ConnectionInterface $entity */
     // Get Connection bundle.
     $entity_bundle = $entity->getType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/redhen/modules/redhen_connection/src/Annotation/ConnectionPermission.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


47) modules/contrib/redhen/modules/redhen_connection/src/Access/ConnectionAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\redhen_connection\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
    *   _redhen_connection_access: 'update'
    * @endcode
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parameterized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
@@ @@
   /**
    * Get the RedHen entity object from the given route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parameterized route.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity object or NULL if there is no RedHen parameter in the route.
    */
   protected function getEntity(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


48) modules/contrib/redhen/modules/redhen_connection/redhen_connection.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\redhen_connection\ViewsData;
 /**
  * Implements hook_views_data().
  */
 function redhen_connection_views_data() {
-  /** @var \Drupal\redhen_connection\ViewsData $redhen_connection_views_data */
+  /** @var ViewsData $redhen_connection_views_data */
   $redhen_connection_views_data = \Drupal::service('redhen_connection.views_data');
   return $redhen_connection_views_data->getViewsData();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


49) modules/contrib/redhen/modules/redhen_connection/redhen_connection.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\redhen_connection\ConnectionInterface;
 /**
  * @file
  * Contains redhen_connection.module..
@@ @@
       // Get active connections for this entity.
       $connections = \Drupal::service('redhen_connection.connections')->getConnections($entity, NULL, NULL, TRUE);
       foreach ($connections as $connection) {
-        /** @var \Drupal\redhen_connection\ConnectionInterface $connection */
+        /** @var ConnectionInterface $connection */
         $connection->setActive(FALSE);
         $connection->save();
       }
@@ @@
   if (in_array($entity->getEntityTypeId(), ['redhen_contact', 'redhen_org'])) {
     $connections = \Drupal::service('redhen_connection.connections')->getConnections($entity, NULL, NULL, FALSE);
     foreach ($connections as $connection) {
-      /** @var \Drupal\redhen_connection\ConnectionInterface $connection */
+      /** @var ConnectionInterface $connection */
       $connection->delete();
     }
   }
@@ @@
 /**
  * Extracts the entity for the current redhen_connection route.
  *
- * @return null|\Drupal\Core\Entity\EntityInterface
+ * @return null|EntityInterface
  *   Entity type id.
  */
 function redhen_connection_get_connection_entity_from_route() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/redhen/modules/redhen_connection/src/Plugin/Action/Chang
         eConnectionRole.php" file, due to:                                     
         "Analyze error: "Class                                                 
         Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

