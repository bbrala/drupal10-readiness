diff --git a/src/EventSubscriber/TaxonomySchedulerCronSubscriber.php b/src/EventSubscriber/TaxonomySchedulerCronSubscriber.php
index b55edf8..6279ddf 100644
--- a/src/EventSubscriber/TaxonomySchedulerCronSubscriber.php
+++ b/src/EventSubscriber/TaxonomySchedulerCronSubscriber.php
@@ -19,50 +19,50 @@ class TaxonomySchedulerCronSubscriber implements EventSubscriberInterface {
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;
 
   /**
    * TermStorage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   private $termStorage;
 
   /**
    * Queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   private $queue;
 
   /**
    * DateTime.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $dateTime;
 
   /**
    * DateFormatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   private $dateFormatter;
 
   /**
    * TaxonomySchedulerCronSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config.
-   * @param \Drupal\taxonomy\TermStorageInterface $termStorage
+   * @param TermStorageInterface $termStorage
    *   The term storage.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue.
-   * @param \Drupal\Component\Datetime\TimeInterface $dateTime
+   * @param TimeInterface $dateTime
    *   The datetime object.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter.
    */
   public function __construct(
diff --git a/src/EventSubscriber/TaxonomySchedulerPresaveSubscriber.php b/src/EventSubscriber/TaxonomySchedulerPresaveSubscriber.php
index fb3e940..b0d32a5 100644
--- a/src/EventSubscriber/TaxonomySchedulerPresaveSubscriber.php
+++ b/src/EventSubscriber/TaxonomySchedulerPresaveSubscriber.php
@@ -19,32 +19,32 @@ class TaxonomySchedulerPresaveSubscriber implements EventSubscriberInterface {
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;
 
   /**
    * DateTime.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $dateTime;
 
   /**
    * CacheTagsInvalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   private $cacheTagsInvalidator;
 
   /**
    * TaxonomySchedulerPresaveSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config.
-   * @param \Drupal\Component\Datetime\TimeInterface $dateTime
+   * @param TimeInterface $dateTime
    *   The Drupal time object.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The cachetags invalidator.
    */
   public function __construct(
@@ -63,7 +63,7 @@ class TaxonomySchedulerPresaveSubscriber implements EventSubscriberInterface {
    * Sets published when set publish date has passed when
    * fields are present and filled.
    *
-   * @param \Drupal\core_event_dispatcher\Event\Entity\EntityPresaveEvent $event
+   * @param EntityPresaveEvent $event
    *   The event.
    */
   public function termPresave(EntityPresaveEvent $event): void {
diff --git a/src/Form/AdminForm.php b/src/Form/AdminForm.php
index 6056095..6d582d5 100644
--- a/src/Form/AdminForm.php
+++ b/src/Form/AdminForm.php
@@ -20,43 +20,43 @@ class AdminForm extends ConfigFormBase {
   /**
    * VocabularyStorage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   private $vocabularyStorage;
 
   /**
    * TaxonomySchedulerFieldManager.
    *
-   * @var \Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager
+   * @var TaxonomySchedulerFieldManager
    */
   private $fieldManager;
 
   /**
    * ConfigImmutable.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $configImmutable;
 
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $configEditable;
 
   /**
    * AdminForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabularyStorage
+   * @param VocabularyStorageInterface $vocabularyStorage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager $fieldManager
+   * @param TaxonomySchedulerFieldManager $fieldManager
    *   The field service.
-   * @param \Drupal\Core\Config\ImmutableConfig $configImmutable
+   * @param ImmutableConfig $configImmutable
    *   The immutable config settings.
-   * @param \Drupal\Core\Config\Config $configEditable
+   * @param Config $configEditable
    *   The editable config settings.
    */
   public function __construct(
@@ -107,7 +107,7 @@ class AdminForm extends ConfigFormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -162,7 +162,7 @@ class AdminForm extends ConfigFormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
diff --git a/src/Plugin/QueueWorker/TaxonomySchedulerQueueWorker.php b/src/Plugin/QueueWorker/TaxonomySchedulerQueueWorker.php
index c9ac964..a2bcb32 100644
--- a/src/Plugin/QueueWorker/TaxonomySchedulerQueueWorker.php
+++ b/src/Plugin/QueueWorker/TaxonomySchedulerQueueWorker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_scheduler\Plugin\QueueWorker;
 
+use Drupal\taxonomy\TermStorage;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ -26,21 +27,21 @@ class TaxonomySchedulerQueueWorker extends QueueWorkerBase implements ContainerF
   /**
    * TermStorage.
    *
-   * @var \Drupal\taxonomy\TermStorage
+   * @var TermStorage
    */
   private $termStorage;
 
   /**
    * DateTime.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $dateTime;
 
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;
 
@@ -53,11 +54,11 @@ class TaxonomySchedulerQueueWorker extends QueueWorkerBase implements ContainerF
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\taxonomy\TermStorageInterface $termStorage
+   * @param TermStorageInterface $termStorage
    *   The term storage.
-   * @param \Drupal\Component\Datetime\TimeInterface $dateTime
+   * @param TimeInterface $dateTime
    *   The time interface.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The config.
    */
   public function __construct(
diff --git a/src/Service/TaxonomySchedulerFieldManager.php b/src/Service/TaxonomySchedulerFieldManager.php
index 6731a94..d17be34 100644
--- a/src/Service/TaxonomySchedulerFieldManager.php
+++ b/src/Service/TaxonomySchedulerFieldManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_scheduler\Service;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageException;
@@ -21,41 +22,41 @@ class TaxonomySchedulerFieldManager {
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * FieldConfig.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldConfig;
 
   /**
    * FieldStorageConfig.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorageConfig;
 
   /**
    * EntityFormDisplay.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $entityFormDisplay;
 
   /**
    * TaxonomySchedulerFieldManager constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $fieldStorageConfig
+   * @param EntityStorageInterface $fieldStorageConfig
    *   The field storage config.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $fieldConfig
+   * @param EntityStorageInterface $fieldConfig
    *   The field config.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityFormDisplay
+   * @param EntityStorageInterface $entityFormDisplay
    *   The entity form display.
    */
   public function __construct(
@@ -73,7 +74,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * Adds the field storage configuration, if not exists.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   private function addFieldStorageConfig(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ -102,7 +103,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * Checks if the field storage already exists.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    *
    * @return bool
@@ -117,7 +118,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * FieldConfigExists.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    * @param string $vocabulary
    *   The vocabulary id.
@@ -134,7 +135,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * Adds the field configuration.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    * @param string $vocabulary
    *   The vocabulary id.
@@ -163,7 +164,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * Updates field configuration.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   private function updateFieldConfig(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ -191,7 +192,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * Adds a field (if not exists) and enables the form display.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   public function addField(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ -211,7 +212,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * Disables an existing field's form display.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   public function disableField(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ -226,7 +227,7 @@ class TaxonomySchedulerFieldManager {
   /**
    * Enables a field's form display.
    *
-   * @param \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem $fieldStorageItem
+   * @param TaxonomyFieldStorageItem $fieldStorageItem
    *   The field storage item.
    */
   public function enableField(TaxonomyFieldStorageItem $fieldStorageItem): void {
@@ -247,7 +248,7 @@ class TaxonomySchedulerFieldManager {
    *   The field name.
    */
   private function setFormDisplay(string $bundle, string $fieldName): void {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $formDisplay */
+    /** @var EntityFormDisplayInterface $formDisplay */
     $formDisplay = $this->entityFormDisplay->load('taxonomy_term.' . $bundle . '.default');
 
     if (!$formDisplay) {
@@ -287,7 +288,7 @@ class TaxonomySchedulerFieldManager {
    *   The name of the field.
    */
   private function removeFormDisplay(string $bundle, string $fieldName): void {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $formDisplay */
+    /** @var EntityFormDisplayInterface $formDisplay */
     $formDisplay = $this->entityFormDisplay->load('taxonomy_term.' . $bundle . '.default');
 
     if (!$formDisplay instanceof EntityFormDisplay) {
diff --git a/tests/src/Kernel/FieldStorageTest.php b/tests/src/Kernel/FieldStorageTest.php
index f91df5c..ed54cda 100644
--- a/tests/src/Kernel/FieldStorageTest.php
+++ b/tests/src/Kernel/FieldStorageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\taxonomy_scheduler\Kernel;
 
+use Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ -31,21 +33,21 @@ class FieldStorageTest extends KernelTestBase {
   /**
    * FieldManager.
    *
-   * @var \Drupal\taxonomy_scheduler\Service\TaxonomySchedulerFieldManager
+   * @var TaxonomySchedulerFieldManager
    */
   protected $fieldManager;
 
   /**
    * TaxonomyFieldStorageItem.
    *
-   * @var \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem
+   * @var TaxonomyFieldStorageItem
    */
   protected $taxonomyFieldStorageItem;
 
   /**
    * SetUp.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp(): void {
     parent::setUp();
@@ -68,7 +70,7 @@ class FieldStorageTest extends KernelTestBase {
   /**
    * TestAddField.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testAddField(): void {
     $this->fieldManager->addField($this->taxonomyFieldStorageItem);
diff --git a/tests/src/Unit/TaxonomyFieldStorageItemTest.php b/tests/src/Unit/TaxonomyFieldStorageItemTest.php
index 532c1ed..dd8ee8e 100644
--- a/tests/src/Unit/TaxonomyFieldStorageItemTest.php
+++ b/tests/src/Unit/TaxonomyFieldStorageItemTest.php
@@ -37,7 +37,7 @@ class TaxonomyFieldStorageItemTest extends UnitTestCase {
    *
    * @dataProvider invalidDataProvider
    *
-   * @return \Drupal\taxonomy_scheduler\ValueObject\TaxonomyFieldStorageItem
+   * @return TaxonomyFieldStorageItem
    *   The TaxonomyFieldStorageItem.
    */
   public function testInvalidData(array $data): TaxonomyFieldStorageItem {
