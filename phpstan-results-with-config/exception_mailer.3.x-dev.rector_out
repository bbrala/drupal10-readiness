modules/contrib/exception_mailer/exception_mailer.module
modules/contrib/exception_mailer/src/Controller/ExceptionMailerExcludeListBuilder.php
modules/contrib/exception_mailer/src/Entity/ExceptionMailerExclude.php
modules/contrib/exception_mailer/src/ExceptionMailerExcludeInterface.php
modules/contrib/exception_mailer/src/ExceptionMailerExcludeManager.php
modules/contrib/exception_mailer/src/Form/ExceptionMailerConfigForm.php
modules/contrib/exception_mailer/src/Form/ExceptionMailerExcludeDeleteForm.php
modules/contrib/exception_mailer/src/Form/ExceptionMailerExcludeForm.php
modules/contrib/exception_mailer/src/Logger/ErrorLog.php
modules/contrib/exception_mailer/src/Plugin/QueueWorker/ExceptionEmailQueue.php
modules/contrib/exception_mailer/src/Plugin/QueueWorker/ManualExceptionEmail.php
modules/contrib/exception_mailer/src/Subscribers/ExceptionEventSubscriber.php
modules/contrib/exception_mailer/src/Utility/UserRepository.php

7 files with changes
====================

1) modules/contrib/exception_mailer/src/Subscribers/ExceptionEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\exception_mailer\Subscribers;

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\exception_mailer\ExceptionMailerExcludeInterface;
 use Drupal\Core\Form\FormAjaxException;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
@@ @@
 use Drupal\exception_mailer\ExceptionMailerExcludeManager;
 use Drupal\exception_mailer\Utility\UserRepository;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * The queue service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The queue manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $excludeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue service.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   The queue manager.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
-   * @param \Drupal\exception_mailer\ExceptionMailerExcludeManager $excludeManager
+   * @param ExceptionMailerExcludeManager $excludeManager
    *   The exception exclude manager.
    */
   public function __construct(
@@ @@
   /**
    * Event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     $request = $event->getRequest();

     $config = $this->configFactory->get('exception_mailer.settings');
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     $queue = $this->queueFactory->get('manual_exception_email', TRUE);
     $queue_worker = $this->queueManager->createInstance('manual_exception_email');
     if (!$exception instanceof FormAjaxException && !$exception instanceof NotFoundHttpException) {
@@ @@
       $data['hostname'] = $request->getClientIp();

       if ($excludes = $this->excludeManager->getExcludes($data, 'exception')) {
-        /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface  $exclude */
+        /** @var ExceptionMailerExcludeInterface $exclude */
         foreach ($excludes as $exclude) {
           if ($exclude->getEmailBody()) {
             $data['email_body'] = $exclude->getEmailBody();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/exception_mailer/src/Plugin/QueueWorker/ManualExceptionEmail.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\exception_mailer\Plugin\QueueWorker;

+use Drupal\Core\Mail\MailManager;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * Mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mailManager;

@@ @@
   /**
    * Constructs a new ExceptionEmailQueue object.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   Mail manager service.
    */
   public function __construct(MailManagerInterface $mail_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/exception_mailer/src/Plugin/QueueWorker/ExceptionEmailQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\exception_mailer\Plugin\QueueWorker;

+use Drupal\Core\Mail\MailManager;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mailManager;

@@ @@
   /**
    * Constructs a new ExceptionEmailQueue object.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   Mail manager service.
    */
   public function __construct(MailManagerInterface $mail_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/exception_mailer/src/Logger/ErrorLog.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\exception_mailer\Logger;

+use Drupal\exception_mailer\ExceptionMailerExcludeInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Logger\LogMessageParserInterface;
 use Drupal\Core\Logger\RfcLoggerTrait;
@@ @@
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $parser;

@@ @@
   /**
    * The queue service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The queue manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $excludeManager;

@@ @@
   /**
    * Constructs a new ErrorLog object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The parser to use when extracting message variables.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue service.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   The queue manager.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
-   * @param \Drupal\exception_mailer\ExceptionMailerExcludeManager $excludeManager
+   * @param ExceptionMailerExcludeManager $excludeManager
    *   The exception exclude manager.
    */
   public function __construct(
@@ @@
       $data['hostname'] = mb_substr($context['ip'], 0, 128);

       if ($excludes = $this->excludeManager->getExcludes($data, 'error')) {
-        /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface  $exclude */
+        /** @var ExceptionMailerExcludeInterface $exclude */
         foreach ($excludes as $exclude) {
           if ($exclude->getEmailBody()) {
             $data['email_body'] = $exclude->getEmailBody();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/exception_mailer/src/Form/ExceptionMailerExcludeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\exception_mailer\Form;

+use Drupal\exception_mailer\ExceptionMailerExcludeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Utility\EmailValidatorInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs the ExceptionMailerExcludeForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator, LoggerInterface $logger) {
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface $exclude */
+    /** @var ExceptionMailerExcludeInterface $exclude */
     $exclude = $this->entity;

     $form['label'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface $exclude */
+    /** @var ExceptionMailerExcludeInterface $exclude */
     $exclude = $this->entity;
     $exclude->setEmails($form_state->get('emails'));
     $status = $exclude->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/exception_mailer/src/ExceptionMailerExcludeManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\exception_mailer;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityTypeBundleInfo.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * @return array
    *   Array of excludes with exclude data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function getExcludes(array &$data, $type): array {
@@ @@
    *   Type: 'error' | 'exception'.
    */
   public function checkExcludesForData(array &$excludes, array $data, $type): void {
-    /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface  $exclude */
+    /** @var ExceptionMailerExcludeInterface $exclude */
     foreach ($excludes as $key => $exclude) {
       if ($type === 'error') {
         if ($exclude->getErrorType() && $exclude->getErrorType() != $data['type']) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/exception_mailer/src/Controller/ExceptionMailerExcludeListBuilder.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build the row.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

