diff --git a/modules/jwt_auth_consumer/src/EventSubscriber/JwtAuthConsumerSubscriber.php b/modules/jwt_auth_consumer/src/EventSubscriber/JwtAuthConsumerSubscriber.php
index ae44fa0..e111d32 100644
--- a/modules/jwt_auth_consumer/src/EventSubscriber/JwtAuthConsumerSubscriber.php
+++ b/modules/jwt_auth_consumer/src/EventSubscriber/JwtAuthConsumerSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\jwt_auth_consumer\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\jwt\Authentication\Event\JwtAuthValidateEvent;
 use Drupal\jwt\Authentication\Event\JwtAuthValidEvent;
@@ -17,14 +19,14 @@ class JwtAuthConsumerSubscriber implements EventSubscriberInterface {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -44,14 +46,14 @@ class JwtAuthConsumerSubscriber implements EventSubscriberInterface {
   /**
    * Find and load the user for a JWT.
    *
-   * @param \Drupal\jwt\JsonWebToken\JsonWebTokenInterface $token
+   * @param JsonWebTokenInterface $token
    *   The JWT.
    *
    * @return array
    *   The user and reason if no user was loaded.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadUserForJwt(JsonWebTokenInterface $token): array {
     foreach (['uid', 'uuid', 'name'] as $id_type) {
@@ -88,7 +90,7 @@ class JwtAuthConsumerSubscriber implements EventSubscriberInterface {
    * This validates the format of the JWT and validate the uid, uuid, or name
    * corresponds to a valid user in the system.
    *
-   * @param \Drupal\jwt\Authentication\Event\JwtAuthValidateEvent $event
+   * @param JwtAuthValidateEvent $event
    *   A JwtAuth event.
    */
   public function validate(JwtAuthValidateEvent $event) {
@@ -107,7 +109,7 @@ class JwtAuthConsumerSubscriber implements EventSubscriberInterface {
   /**
    * Load and set a Drupal user to be authentication based on the JWT's uid.
    *
-   * @param \Drupal\jwt\Authentication\Event\JwtAuthValidEvent $event
+   * @param JwtAuthValidEvent $event
    *   A JwtAuth event.
    */
   public function loadUser(JwtAuthValidEvent $event) {
diff --git a/modules/jwt_auth_issuer/src/Controller/JwtAuthIssuerController.php b/modules/jwt_auth_issuer/src/Controller/JwtAuthIssuerController.php
index 7b9d4f2..64de3de 100644
--- a/modules/jwt_auth_issuer/src/Controller/JwtAuthIssuerController.php
+++ b/modules/jwt_auth_issuer/src/Controller/JwtAuthIssuerController.php
@@ -15,14 +15,14 @@ class JwtAuthIssuerController extends ControllerBase {
   /**
    * The JWT Auth Service.
    *
-   * @var \Drupal\jwt\Authentication\Provider\JwtAuth
+   * @var JwtAuth
    */
   private $auth;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\jwt\Authentication\Provider\JwtAuth $auth
+   * @param JwtAuth $auth
    *   The JWT auth service.
    */
   public function __construct(JwtAuth $auth) {
diff --git a/modules/jwt_auth_issuer/src/EventSubscriber/JwtAuthIssuerSubscriber.php b/modules/jwt_auth_issuer/src/EventSubscriber/JwtAuthIssuerSubscriber.php
index adece96..651609a 100644
--- a/modules/jwt_auth_issuer/src/EventSubscriber/JwtAuthIssuerSubscriber.php
+++ b/modules/jwt_auth_issuer/src/EventSubscriber/JwtAuthIssuerSubscriber.php
@@ -15,14 +15,14 @@ class JwtAuthIssuerSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
    */
   public function __construct(AccountInterface $user) {
@@ -41,7 +41,7 @@ class JwtAuthIssuerSubscriber implements EventSubscriberInterface {
   /**
    * Sets the standard claims set for a JWT.
    *
-   * @param \Drupal\jwt\Authentication\Event\JwtAuthGenerateEvent $event
+   * @param JwtAuthGenerateEvent $event
    *   The event.
    */
   public function setStandardClaims(JwtAuthGenerateEvent $event) {
@@ -53,7 +53,7 @@ class JwtAuthIssuerSubscriber implements EventSubscriberInterface {
   /**
    * Sets claims for a Drupal consumer on the JWT.
    *
-   * @param \Drupal\jwt\Authentication\Event\JwtAuthGenerateEvent $event
+   * @param JwtAuthGenerateEvent $event
    *   The event.
    */
   public function setDrupalClaims(JwtAuthGenerateEvent $event) {
diff --git a/modules/jwt_path_auth/src/Authentication/Provider/JwtPathAuth.php b/modules/jwt_path_auth/src/Authentication/Provider/JwtPathAuth.php
index dc41541..805c5f2 100644
--- a/modules/jwt_path_auth/src/Authentication/Provider/JwtPathAuth.php
+++ b/modules/jwt_path_auth/src/Authentication/Provider/JwtPathAuth.php
@@ -18,41 +18,41 @@ class JwtPathAuth implements AuthenticationProviderInterface {
   /**
    * The JWT Transcoder service.
    *
-   * @var \Drupal\jwt\Transcoder\JwtTranscoderInterface
+   * @var JwtTranscoderInterface
    */
   protected $transcoder;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;
 
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder
+   * @param JwtTranscoderInterface $transcoder
    *   The jwt transcoder service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $killSwitch
+   * @param KillSwitch $killSwitch
    *   The kill switch.
    */
   public function __construct(
diff --git a/modules/users_jwt/src/Authentication/Provider/UsersJwtAuth.php b/modules/users_jwt/src/Authentication/Provider/UsersJwtAuth.php
index 21cafb3..54ea613 100644
--- a/modules/users_jwt/src/Authentication/Provider/UsersJwtAuth.php
+++ b/modules/users_jwt/src/Authentication/Provider/UsersJwtAuth.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\users_jwt\Authentication\Provider;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -20,41 +22,41 @@ class UsersJwtAuth implements AuthenticationProviderInterface {
   /**
    * The user key repository service.
    *
-   * @var \Drupal\users_jwt\UsersJwtKeyRepositoryInterface
+   * @var UsersJwtKeyRepositoryInterface
    */
   protected $keyRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The site settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;
 
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\users_jwt\UsersJwtKeyRepositoryInterface $key_repository
+   * @param UsersJwtKeyRepositoryInterface $key_repository
    *   The user key repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The site settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory.
    */
   public function __construct(UsersJwtKeyRepositoryInterface $key_repository, EntityTypeManagerInterface $entity_type_manager, Settings $settings, LoggerChannelFactoryInterface $logger_factory) {
@@ -67,7 +69,7 @@ class UsersJwtAuth implements AuthenticationProviderInterface {
   /**
    * Checks whether suitable authentication credentials are on the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return bool
@@ -109,7 +111,7 @@ class UsersJwtAuth implements AuthenticationProviderInterface {
     if ($header->alg !== $key->alg) {
       return $this->debugLog('Bad header alg', NULL, $payload, $key);
     }
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     [$user, $reason] = $this->loadUserForJwt($payload);
     if (!$user) {
       return $this->debugLog($reason, NULL, $payload, $key);
@@ -131,8 +133,8 @@ class UsersJwtAuth implements AuthenticationProviderInterface {
    * @return array
    *   The user and reason if no user was loaded.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadUserForJwt(object $payload): array {
     foreach (['uid', 'uuid', 'name'] as $id_type) {
@@ -172,9 +174,9 @@ class UsersJwtAuth implements AuthenticationProviderInterface {
    *   The caught exception.
    * @param \StdClass|null $payload
    *   The payload (claims) from the JWT.
-   * @param \Drupal\users_jwt\UsersKey|null $key
+   * @param UsersKey|null $key
    *   The key that was loaded.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user related to the key.
    *
    * @return null
@@ -197,7 +199,7 @@ class UsersJwtAuth implements AuthenticationProviderInterface {
   /**
    * Gets a raw JsonWebToken from the current request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string|bool
diff --git a/modules/users_jwt/src/Controller/KeyListController.php b/modules/users_jwt/src/Controller/KeyListController.php
index 4121a02..9ce9528 100644
--- a/modules/users_jwt/src/Controller/KeyListController.php
+++ b/modules/users_jwt/src/Controller/KeyListController.php
@@ -17,14 +17,14 @@ class KeyListController extends ControllerBase {
   /**
    * Drupal\users_jwt\UsersJwtKeyRepositoryInterface definition.
    *
-   * @var \Drupal\users_jwt\UsersJwtKeyRepositoryInterface
+   * @var UsersJwtKeyRepositoryInterface
    */
   protected $usersJwtKeyRepository;
 
   /**
    * Constructs a key form.
    *
-   * @param \Drupal\users_jwt\UsersJwtKeyRepositoryInterface $key_repository
+   * @param UsersJwtKeyRepositoryInterface $key_repository
    *   The user key repository service.
    */
   public function __construct(UsersJwtKeyRepositoryInterface $key_repository) {
diff --git a/modules/users_jwt/src/Form/UsersGenerateKeyForm.php b/modules/users_jwt/src/Form/UsersGenerateKeyForm.php
index 219ad01..89abc25 100644
--- a/modules/users_jwt/src/Form/UsersGenerateKeyForm.php
+++ b/modules/users_jwt/src/Form/UsersGenerateKeyForm.php
@@ -20,14 +20,14 @@ class UsersGenerateKeyForm extends FormBase {
   /**
    * The user key repository service.
    *
-   * @var \Drupal\users_jwt\UsersJwtKeyRepositoryInterface
+   * @var UsersJwtKeyRepositoryInterface
    */
   protected $keyRepository;
 
   /**
    * Constructs a key form.
    *
-   * @param \Drupal\users_jwt\UsersJwtKeyRepositoryInterface $key_repository
+   * @param UsersJwtKeyRepositoryInterface $key_repository
    *   The user key repository service.
    */
   public function __construct(UsersJwtKeyRepositoryInterface $key_repository) {
@@ -121,7 +121,7 @@ class UsersGenerateKeyForm extends FormBase {
       throw new \InvalidArgumentException(sprintf('Unknown alg %s', $alg));
     }
     $this->keyRepository->saveKey($key->uid, $key->id, $alg, $pubkey);
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $form_state->getValue('user');
     $filename = $user->getAccountName() . '__private-key__' . $key->id . '.key';
     $response = Response::create($out);
diff --git a/modules/users_jwt/src/Form/UsersKeyDeleteForm.php b/modules/users_jwt/src/Form/UsersKeyDeleteForm.php
index bc475e9..3133116 100644
--- a/modules/users_jwt/src/Form/UsersKeyDeleteForm.php
+++ b/modules/users_jwt/src/Form/UsersKeyDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\users_jwt\Form;
 
+use Drupal\users_jwt\UsersKey;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,21 +19,21 @@ class UsersKeyDeleteForm extends ConfirmFormBase {
   /**
    * The user key repository service.
    *
-   * @var \Drupal\users_jwt\UsersJwtKeyRepositoryInterface
+   * @var UsersJwtKeyRepositoryInterface
    */
   protected $keyRepository;
 
   /**
    * The loaded user key.
    *
-   * @var \Drupal\users_jwt\UsersKey
+   * @var UsersKey
    */
   protected $key;
 
   /**
    * Constructs a key form.
    *
-   * @param \Drupal\users_jwt\UsersJwtKeyRepositoryInterface $key_repository
+   * @param UsersJwtKeyRepositoryInterface $key_repository
    *   The user key repository service.
    */
   public function __construct(UsersJwtKeyRepositoryInterface $key_repository) {
diff --git a/modules/users_jwt/src/Form/UsersKeyForm.php b/modules/users_jwt/src/Form/UsersKeyForm.php
index f4294d9..ec4b71a 100644
--- a/modules/users_jwt/src/Form/UsersKeyForm.php
+++ b/modules/users_jwt/src/Form/UsersKeyForm.php
@@ -19,14 +19,14 @@ class UsersKeyForm extends FormBase {
   /**
    * The user key repository service.
    *
-   * @var \Drupal\users_jwt\UsersJwtKeyRepositoryInterface
+   * @var UsersJwtKeyRepositoryInterface
    */
   protected $keyRepository;
 
   /**
    * Constructs a key form.
    *
-   * @param \Drupal\users_jwt\UsersJwtKeyRepositoryInterface $key_repository
+   * @param UsersJwtKeyRepositoryInterface $key_repository
    *   The user key repository service.
    */
   public function __construct(UsersJwtKeyRepositoryInterface $key_repository) {
diff --git a/modules/users_jwt/src/UsersJwtKeyRepository.php b/modules/users_jwt/src/UsersJwtKeyRepository.php
index 48da261..dda4506 100644
--- a/modules/users_jwt/src/UsersJwtKeyRepository.php
+++ b/modules/users_jwt/src/UsersJwtKeyRepository.php
@@ -16,21 +16,21 @@ class UsersJwtKeyRepository implements UsersJwtKeyRepositoryInterface {
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * The memory cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $keyCache;
 
   /**
    * Cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -44,11 +44,11 @@ class UsersJwtKeyRepository implements UsersJwtKeyRepositoryInterface {
   /**
    * UsersJwtKeyRepository constructor.
    *
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $key_memory_cache
+   * @param CacheBackendInterface $key_memory_cache
    *   A cache for already loaded keys, usually a memory cache (or null cache).
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   Cache tags invalidator service.
    */
   public function __construct(UserDataInterface $user_data, CacheBackendInterface $key_memory_cache, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
diff --git a/modules/users_jwt/src/UsersJwtKeyRepositoryInterface.php b/modules/users_jwt/src/UsersJwtKeyRepositoryInterface.php
index 566f34d..b5d8622 100644
--- a/modules/users_jwt/src/UsersJwtKeyRepositoryInterface.php
+++ b/modules/users_jwt/src/UsersJwtKeyRepositoryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\users_jwt;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Interface UsersJwtKeyRepositoryInterface.
  *
@@ -16,7 +17,7 @@ interface UsersJwtKeyRepositoryInterface extends \ArrayAccess {
    * @param string $id
    *   The unique ID of the key.
    *
-   * @return \Drupal\users_jwt\UsersKey|null
+   * @return UsersKey|null
    *   Key data object, or NULL if no matching key was found.
    */
   public function getKey($id): ?UsersKey;
@@ -33,7 +34,7 @@ interface UsersJwtKeyRepositoryInterface extends \ArrayAccess {
    * @param string $pubkey
    *   The value to store.
    *
-   * @return \Drupal\users_jwt\UsersKey
+   * @return UsersKey
    *   The values of the key that were saved.
    *
    * @throws \InvalidArgumentException
@@ -71,7 +72,7 @@ interface UsersJwtKeyRepositoryInterface extends \ArrayAccess {
   /**
    * Get options for supported algorithms.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   Keys are JWT alg options, value is localized string object.
    */
   public function algorithmOptions(): array;
diff --git a/modules/users_jwt/tests/src/Functional/FormsTest.php b/modules/users_jwt/tests/src/Functional/FormsTest.php
index 86d1961..302bfc6 100644
--- a/modules/users_jwt/tests/src/Functional/FormsTest.php
+++ b/modules/users_jwt/tests/src/Functional/FormsTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\users_jwt\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\users_jwt\UsersJwtKeyRepositoryInterface;
+use Drupal\Core\Extension\ExtensionPathResolver;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 use Firebase\JWT\JWT;
@@ -28,14 +31,14 @@ class FormsTest extends BrowserTestBase {
   /**
    * A user with permission to administer users.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A user with no special perissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -72,7 +75,7 @@ class FormsTest extends BrowserTestBase {
     $this->assertSession()->pageTextContains('-----BEGIN PUBLIC KEY-----');
     $expected_cache_tag = 'users_jwt:' . $this->user->id();
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', $expected_cache_tag);
-    /** @var \Drupal\users_jwt\UsersJwtKeyRepositoryInterface $key_repository */
+    /** @var UsersJwtKeyRepositoryInterface $key_repository */
     $key_repository = $this->container->get('users_jwt.key_repository');
     $keys = $key_repository->getUsersKeys($this->user->id());
     self::assertCount(1, $keys);
@@ -80,7 +83,7 @@ class FormsTest extends BrowserTestBase {
     // Sleep to make sure the time changes for the next key ID.
     sleep(1);
     $this->clickLink('Add Key');
-    /** @var \Drupal\Core\Extension\ExtensionPathResolver $path_resolver */
+    /** @var ExtensionPathResolver $path_resolver */
     $path_resolver = $this->container->get('extension.path.resolver');
     $module_path = $path_resolver->getPath('module', 'users_jwt');
     $path = $module_path . '/tests/fixtures/users_jwt_rsa1-public.pem';
diff --git a/modules/users_jwt/tests/src/Kernel/UsersJwtRequestTest.php b/modules/users_jwt/tests/src/Kernel/UsersJwtRequestTest.php
index 0c2fe93..998dbab 100644
--- a/modules/users_jwt/tests/src/Kernel/UsersJwtRequestTest.php
+++ b/modules/users_jwt/tests/src/Kernel/UsersJwtRequestTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\users_jwt\Kernel;
 
+use Drupal\user\Entity\User;
+use Drupal\users_jwt\UsersJwtKeyRepositoryInterface;
+use Drupal\Core\Extension\ExtensionPathResolver;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Firebase\JWT\JWT;
@@ -27,7 +32,7 @@ class UsersJwtRequestTest extends KernelTestBase {
   /**
    * The test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $testUser;
 
@@ -49,11 +54,12 @@ class UsersJwtRequestTest extends KernelTestBase {
 
   /**
    * Verify the authentication for a user.
+   * @doesNotPerformAssertions
    */
   public function testAuth() {
-    /** @var \Drupal\users_jwt\UsersJwtKeyRepositoryInterface $key_repository */
+    /** @var UsersJwtKeyRepositoryInterface $key_repository */
     $key_repository = $this->container->get('users_jwt.key_repository');
-    /** @var \Drupal\Core\Extension\ExtensionPathResolver $path_resolver */
+    /** @var ExtensionPathResolver $path_resolver */
     $path_resolver = $this->container->get('extension.path.resolver');
     $module_path = $path_resolver->getPath('module', 'users_jwt');
     $path = $module_path . '/tests/fixtures/users_jwt_rsa1-public.pem';
@@ -79,7 +85,7 @@ class UsersJwtRequestTest extends KernelTestBase {
    * @param string $module_path
    *   Path to the users_jwt module.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function dotestAuth(string $id_type, string $id_value, string $module_path) {
     $iat = \Drupal::time()->getRequestTime();
@@ -92,7 +98,7 @@ class UsersJwtRequestTest extends KernelTestBase {
     ];
     $path = $module_path . '/tests/fixtures/users_jwt_rsa1-private.pem';
     $private_key = file_get_contents($path);
-    /** @var \Drupal\Core\Authentication\AuthenticationProviderInterface $auth_service */
+    /** @var AuthenticationProviderInterface $auth_service */
     $auth_service = $this->container->get('users_jwt.authentication.jwt');
     $other_account = $this->createUser(['access content']);
 
@@ -159,7 +165,7 @@ class UsersJwtRequestTest extends KernelTestBase {
    * @param string $token
    *   The JWT token string.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The new request.
    */
   protected function createRequest($header_name, $token): Request {
diff --git a/src/Authentication/Event/JwtAuthBaseEvent.php b/src/Authentication/Event/JwtAuthBaseEvent.php
index 5b947d0..514ef25 100644
--- a/src/Authentication/Event/JwtAuthBaseEvent.php
+++ b/src/Authentication/Event/JwtAuthBaseEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\jwt\Authentication\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jwt\JsonWebToken\JsonWebTokenInterface;
 
 /**
@@ -12,14 +12,14 @@ class JwtAuthBaseEvent extends Event {
   /**
    * The JsonWebToken.
    *
-   * @var \Drupal\jwt\JsonWebToken\JsonWebTokenInterface
+   * @var JsonWebTokenInterface
    */
   protected $jwt;
 
   /**
    * Constructs a JwtAuthEvent with a JsonWebToken.
    *
-   * @param \Drupal\jwt\JsonWebToken\JsonWebTokenInterface $token
+   * @param JsonWebTokenInterface $token
    *   A decoded JWT.
    */
   public function __construct(JsonWebTokenInterface $token) {
@@ -29,7 +29,7 @@ class JwtAuthBaseEvent extends Event {
   /**
    * Returns the JWT.
    *
-   * @return \Drupal\jwt\JsonWebToken\JsonWebTokenInterface
+   * @return JsonWebTokenInterface
    *   Returns the token.
    */
   public function getToken() {
diff --git a/src/Authentication/Event/JwtAuthValidEvent.php b/src/Authentication/Event/JwtAuthValidEvent.php
index aab5e4f..f4deefb 100644
--- a/src/Authentication/Event/JwtAuthValidEvent.php
+++ b/src/Authentication/Event/JwtAuthValidEvent.php
@@ -13,7 +13,7 @@ class JwtAuthValidEvent extends JwtAuthBaseEvent {
   /**
    * Variable holding the user authenticated by the token in the payload.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -28,7 +28,7 @@ class JwtAuthValidEvent extends JwtAuthBaseEvent {
   /**
    * Sets the authenticated user that will be used for this request.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   A loaded user object.
    */
   public function setUser(UserInterface $user) {
@@ -38,7 +38,7 @@ class JwtAuthValidEvent extends JwtAuthBaseEvent {
   /**
    * Returns a loaded user to use if the token is validated.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   A loaded user object
    */
   public function getUser() {
diff --git a/src/Authentication/Provider/JwtAuth.php b/src/Authentication/Provider/JwtAuth.php
index c3696ef..d2a18e0 100644
--- a/src/Authentication/Provider/JwtAuth.php
+++ b/src/Authentication/Provider/JwtAuth.php
@@ -21,23 +21,23 @@ class JwtAuth implements AuthenticationProviderInterface {
   /**
    * The JWT Transcoder service.
    *
-   * @var \Drupal\jwt\Transcoder\JwtTranscoderInterface
+   * @var JwtTranscoderInterface
    */
   protected $transcoder;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder
+   * @param JwtTranscoderInterface $transcoder
    *   The jwt transcoder service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(
@@ -71,13 +71,13 @@ class JwtAuth implements AuthenticationProviderInterface {
 
     $validate = new JwtAuthValidateEvent($jwt);
     // Signature is validated, but allow modules to do additional validation.
-    $this->eventDispatcher->dispatch(JwtAuthEvents::VALIDATE, $validate);
+    $this->eventDispatcher->dispatch($validate, JwtAuthEvents::VALIDATE);
     if (!$validate->isValid()) {
       return NULL;
     }
 
     $valid = new JwtAuthValidEvent($jwt);
-    $this->eventDispatcher->dispatch(JwtAuthEvents::VALID, $valid);
+    $this->eventDispatcher->dispatch($valid, JwtAuthEvents::VALID);
     $user = $valid->getUser();
 
     if (!$user) {
@@ -95,7 +95,7 @@ class JwtAuth implements AuthenticationProviderInterface {
    */
   public function generateToken() {
     $event = new JwtAuthGenerateEvent(new JsonWebToken());
-    $this->eventDispatcher->dispatch(JwtAuthEvents::GENERATE, $event);
+    $this->eventDispatcher->dispatch($event, JwtAuthEvents::GENERATE);
     $jwt = $event->getToken();
     return $this->transcoder->encode($jwt);
   }
@@ -103,7 +103,7 @@ class JwtAuth implements AuthenticationProviderInterface {
   /**
    * Gets a raw JsonWebToken from the current request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string|bool
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index eed3804..8ca8be3 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -17,25 +17,25 @@ class ConfigForm extends ConfigFormBase {
   /**
    * The JWT transcoder.
    *
-   * @var \Drupal\jwt\Transcoder\JwtTranscoder
+   * @var JwtTranscoder
    */
   protected $transcoder;
 
   /**
    * The key repository.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepo;
 
   /**
    * ConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory for parent.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repo
+   * @param KeyRepositoryInterface $key_repo
    *   Key repo to validate keys.
-   * @param \Drupal\jwt\Transcoder\JwtTranscoder $transcoder
+   * @param JwtTranscoder $transcoder
    *   JWT Transcoder.
    */
   public function __construct(
@@ -80,7 +80,7 @@ class ConfigForm extends ConfigFormBase {
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Drupal formstate object.
    *
    * @return mixed
diff --git a/src/Transcoder/JwtTranscoder.php b/src/Transcoder/JwtTranscoder.php
index ac237a1..04f1132 100644
--- a/src/Transcoder/JwtTranscoder.php
+++ b/src/Transcoder/JwtTranscoder.php
@@ -16,7 +16,7 @@ class JwtTranscoder implements JwtTranscoderInterface {
   /**
    * The firebase/php-jwt transcoder.
    *
-   * @var \Firebase\JWT\JWT
+   * @var JWT
    */
   protected $transcoder;
 
@@ -88,11 +88,11 @@ class JwtTranscoder implements JwtTranscoderInterface {
   /**
    * Constructs a new JwtTranscoder.
    *
-   * @param \Firebase\JWT\JWT $php_jwt
+   * @param JWT $php_jwt
    *   The JWT library object.
-   * @param Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory to retrieve the configuration information.
-   * @param Drupal\key\KeyRepositoryInterface $key_repo
+   * @param KeyRepositoryInterface $key_repo
    *   The Key repository to retrieve the key.
    */
   public function __construct(JWT $php_jwt, ConfigFactoryInterface $configFactory, KeyRepositoryInterface $key_repo) {
diff --git a/src/Transcoder/JwtTranscoderInterface.php b/src/Transcoder/JwtTranscoderInterface.php
index dc5cd64..adafdd0 100644
--- a/src/Transcoder/JwtTranscoderInterface.php
+++ b/src/Transcoder/JwtTranscoderInterface.php
@@ -17,17 +17,17 @@ interface JwtTranscoderInterface {
    * @param string $jwt
    *   The encoded JWT.
    *
-   * @return \Drupal\jwt\JsonWebToken\JsonWebTokenInterface
+   * @return JsonWebTokenInterface
    *   Validated JWT.
    *
-   * @throws \Drupal\jwt\Transcoder\JwtDecodeException
+   * @throws JwtDecodeException
    */
   public function decode($jwt);
 
   /**
    * Encodes a JsonWebToken.
    *
-   * @param \Drupal\jwt\JsonWebToken\JsonWebTokenInterface $jwt
+   * @param JsonWebTokenInterface $jwt
    *   A JWT.
    *
    * @return string
diff --git a/tests/src/Functional/JwtAuthTest.php b/tests/src/Functional/JwtAuthTest.php
index 861939b..95fc470 100644
--- a/tests/src/Functional/JwtAuthTest.php
+++ b/tests/src/Functional/JwtAuthTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\jwt\Functional;
 
+use Drupal\jwt\Transcoder\JwtTranscoderInterface;
+use Drupal\jwt\Authentication\Provider\JwtAuth;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ -46,14 +48,14 @@ class JwtAuthTest extends BrowserTestBase {
     $config->save();
 
     $account = $this->drupalCreateUser(['access content']);
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $this->setCurrentUser($account);
-    /** @var \Drupal\jwt\Authentication\Provider\JwtAuth $auth */
+    /** @var JwtAuth $auth */
     $auth = $this->container->get('jwt.authentication.jwt');
     $token = $auth->generateToken();
     $decoded_jwt = $transcoder->decode($token);
-    $this->assertEqual($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
+    $this->assertEquals($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
     foreach (['jwt_test.11.1', 'jwt_test.11.2'] as $route_name) {
       $url = Url::fromRoute($route_name);
       foreach (['Authorization', 'JWT-Authorization'] as $header_name) {
@@ -97,9 +99,9 @@ class JwtAuthTest extends BrowserTestBase {
     // cache if jwt credentials are provided.
     $url = Url::fromRoute('jwt_test.10');
     $this->drupalGet($url);
-    $this->assertEqual($this->drupalGetHeader('X-Drupal-Cache'), 'MISS');
+    $this->assertEquals($this->drupalGetHeader('X-Drupal-Cache'), 'MISS');
     $this->drupalGet($url);
-    $this->assertEqual($this->drupalGetHeader('X-Drupal-Cache'), 'HIT');
+    $this->assertEquals($this->drupalGetHeader('X-Drupal-Cache'), 'HIT');
     foreach (['Authorization', 'JWT-Authorization'] as $header_name) {
       $headers = [
         $header_name => 'Bearer ' . $token,
diff --git a/tests/src/Functional/JwtPathAuthTest.php b/tests/src/Functional/JwtPathAuthTest.php
index e806786..59be460 100644
--- a/tests/src/Functional/JwtPathAuthTest.php
+++ b/tests/src/Functional/JwtPathAuthTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\jwt\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\jwt\Transcoder\JwtTranscoderInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\file\Entity\File;
 use Drupal\file\FileInterface;
 use Drupal\jwt\JsonWebToken\JsonWebToken;
@@ -41,14 +46,14 @@ class JwtPathAuthTest extends BrowserTestBase {
   /**
    * A user with the 'administer jwt' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser(['administer jwt', 'access content']);
@@ -87,16 +92,19 @@ class JwtPathAuthTest extends BrowserTestBase {
     $edit = [
       'allowed_path_prefixes' => "/system/files/\nzzz",
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Paths must start with a slash.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Paths must start with a slash.');
     $edit = [
       'allowed_path_prefixes' => "/system/files/\r\n/foo/zzz/ \r\n/entity/file/",
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $config = $this->config('jwt_path_auth.config');
     $expected = ['/system/files/', '/foo/zzz/', '/entity/file/'];
     $this->assertSame($expected, $config->get('allowed_path_prefixes'));
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = $this->container->get('file_system');
     // A temporary private file can be access by the creator.
     // @see file_file_download().
@@ -105,8 +113,11 @@ class JwtPathAuthTest extends BrowserTestBase {
     $file_real_path = $file_system->realpath($file->getFileUri());
     $this->assertFileExists($file_real_path);
     $this->drupalGet($file->createFileUrl());
-    $this->assertResponse(200);
-    $this->assertText($this->getFileContent($file));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->getFileContent($file));
     // Make sure the logged-in user can access the REST resource. The path
     // should be '/entity/file/' . $file->id().
     $options = [
@@ -116,17 +127,17 @@ class JwtPathAuthTest extends BrowserTestBase {
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();
     // Expect a 403 when not authenticated.
     $this->drupalGet($file->createFileUrl());
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // When Drupal is in a subdirectory (such as drupal.org testbot) any
     // path in the JWT other than a "/" must bre prefixed with the base
     // path - the system does not expect the client to know where Drupal
     // is actually installed in terms of path hierarchy.
     $base_url = $this->container->get('router.request_context')->getBaseUrl();
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'path_auth', 'uid'], $this->adminUser->id());
@@ -140,8 +151,11 @@ class JwtPathAuthTest extends BrowserTestBase {
     ];
     // Make a real request with the token in the query string.
     $this->drupalGet($file->createFileUrl(), $options);
-    $this->assertResponse(200);
-    $this->assertText($this->getFileContent($file));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->getFileContent($file));
     // If the path claim on the JWT doesn't match, access should be denied.
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'path_auth', 'uid'], $this->adminUser->id());
@@ -153,7 +167,7 @@ class JwtPathAuthTest extends BrowserTestBase {
       ],
     ];
     $this->drupalGet($file->createFileUrl(), $options);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Making a REST api request with no JWT should be denied.
     $options = [
       'query' => [
@@ -162,7 +176,7 @@ class JwtPathAuthTest extends BrowserTestBase {
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Token path does not match, should still be 403.
     $options = [
       'query' => [
@@ -172,7 +186,7 @@ class JwtPathAuthTest extends BrowserTestBase {
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Create a new token matching the request path prefix.
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'path_auth', 'uid'], $this->adminUser->id());
@@ -186,7 +200,7 @@ class JwtPathAuthTest extends BrowserTestBase {
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $json = $this->getSession()->getPage()->getContent();
     $data = json_decode($json, TRUE);
     $this->assertEquals($file->uuid(), $data['uuid'][0]['value']);
@@ -194,7 +208,7 @@ class JwtPathAuthTest extends BrowserTestBase {
     $this->adminUser->block();
     $this->adminUser->save();
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
   /**
@@ -207,10 +221,10 @@ class JwtPathAuthTest extends BrowserTestBase {
    * @param int $status
    *   The file status.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\file\Entity\File
+   * @return EntityInterface|File
    *   The file entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createPrivateFile($file_name, $uid = 1, $status = FILE_STATUS_PERMANENT) {
     // Create a new file entity.
@@ -229,7 +243,7 @@ class JwtPathAuthTest extends BrowserTestBase {
   /**
    * Gets the text secret for a file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    *
    * @return string
diff --git a/tests/src/Kernel/BasicTest.php b/tests/src/Kernel/BasicTest.php
index 0b3c0b9..b8637be 100644
--- a/tests/src/Kernel/BasicTest.php
+++ b/tests/src/Kernel/BasicTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\jwt\Kernel;
 
+use Drupal\key\KeyRepositoryInterface;
+use Drupal\jwt\Transcoder\JwtTranscoderInterface;
 use Drupal\jwt\JsonWebToken\JsonWebToken;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -20,7 +22,7 @@ class BasicTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['key', 'jwt', 'jwt_test']);
   }
@@ -29,28 +31,28 @@ class BasicTest extends KernelTestBase {
    * Verify the test config was loaded as keys.
    */
   public function testConfig() {
-    /** @var \Drupal\key\KeyRepositoryInterface $key_repository */
+    /** @var KeyRepositoryInterface $key_repository */
     $key_repository = $this->container->get('key.repository');
     $key_hmac = $key_repository->getKey('jwt_test_hmac');
     $this->assertNotEmpty($key_hmac);
-    $this->assertEqual('jwt_hs', $key_hmac->getKeyType()->getPluginId());
+    $this->assertEquals('jwt_hs', $key_hmac->getKeyType()->getPluginId());
     $key_rsa = $key_repository->getKey('jwt_test_rsa');
     $this->assertNotEmpty($key_rsa);
-    $this->assertEqual('jwt_rs', $key_rsa->getKeyType()->getPluginId());
+    $this->assertEquals('jwt_rs', $key_rsa->getKeyType()->getPluginId());
     // The jwt_test module configures the jwt_test_hmac key to be used.
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $reflected = new \ReflectionClass($transcoder);
     $algorithm = $reflected->getProperty('algorithm');
     $algorithm->setAccessible(TRUE);
-    $this->assertEqual('HS256', $algorithm->getValue($transcoder));
+    $this->assertEquals('HS256', $algorithm->getValue($transcoder));
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'test'], 1234);
     $encoded = $transcoder->encode($jwt);
     $this->assertNotEmpty($encoded);
     $this->assertTrue(is_string($encoded));
     $decoded_jwt = $transcoder->decode($encoded);
-    $this->assertEqual(1234, $decoded_jwt->getClaim(['drupal', 'test']));
+    $this->assertEquals(1234, $decoded_jwt->getClaim(['drupal', 'test']));
   }
 
 }
diff --git a/tests/src/Kernel/RsaKeyTest.php b/tests/src/Kernel/RsaKeyTest.php
index 52c027a..fe5802f 100644
--- a/tests/src/Kernel/RsaKeyTest.php
+++ b/tests/src/Kernel/RsaKeyTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\jwt\Kernel;
 
+use Drupal\jwt\Transcoder\JwtTranscoderInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Firebase\JWT\JWT;
@@ -23,7 +24,7 @@ class RsaKeyTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
 
@@ -45,16 +46,16 @@ class RsaKeyTest extends KernelTestBase {
     $auth = $this->container->get('jwt.authentication.jwt');
     $token = $auth->generateToken();
     $this->assertNotEmpty($token);
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $decoded_jwt = $transcoder->decode($token);
-    $this->assertEqual($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
+    $this->assertEquals($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
     // Test decoding with the matched and mis-matched public keys.
-    $path = drupal_get_path('module', 'jwt_test') . '/fixtures/jwt_test_rsa-public.pem';
+    $path = \Drupal::service('extension.list.module')->getPath('jwt_test') . '/fixtures/jwt_test_rsa-public.pem';
     $public_key = file_get_contents($path);
     $payload = JWT::decode($token, $public_key, ['RS256']);
-    $this->assertEqual($account->id(), $payload->drupal->uid);
-    $path = drupal_get_path('module', 'jwt_test') . '/fixtures/jwt_test_rsa2-public.pem';
+    $this->assertEquals($account->id(), $payload->drupal->uid);
+    $path = \Drupal::service('extension.list.module')->getPath('jwt_test') . '/fixtures/jwt_test_rsa2-public.pem';
     $public_key = file_get_contents($path);
     $this->expectException(SignatureInvalidException::class);
     $payload = JWT::decode($token, $public_key, ['RS256']);
@@ -68,7 +69,7 @@ class RsaKeyTest extends KernelTestBase {
     $config->set('algorithm', 'RS256');
     $config->set('key_id', 'jwt_test_rsa2');
     $config->save();
-    $path = drupal_get_path('module', 'jwt_test') . '/fixtures/jwt_test_rsa2-private.pem';
+    $path = \Drupal::service('extension.list.module')->getPath('jwt_test') . '/fixtures/jwt_test_rsa2-private.pem';
     $private_key = file_get_contents($path);
     $exp = \Drupal::time()->getRequestTime() + 1000;
     $payload = [
@@ -79,11 +80,11 @@ class RsaKeyTest extends KernelTestBase {
     ];
     $token = JWT::encode($payload, $private_key, 'RS256', 'wxyz');
     $this->assertNotEmpty($token);
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $decoded_jwt = $transcoder->decode($token);
-    $this->assertEqual(999, $decoded_jwt->getClaim(['test', 'uid']));
-    $this->assertEqual($exp, $decoded_jwt->getClaim('exp'));
+    $this->assertEquals(999, $decoded_jwt->getClaim(['test', 'uid']));
+    $this->assertEquals($exp, $decoded_jwt->getClaim('exp'));
   }
 
 }
diff --git a/tests/src/Kernel/UserAuthTest.php b/tests/src/Kernel/UserAuthTest.php
index a395c48..b062e2d 100644
--- a/tests/src/Kernel/UserAuthTest.php
+++ b/tests/src/Kernel/UserAuthTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\jwt\Kernel;
 
+use Drupal\jwt\Authentication\Provider\JwtAuth;
+use Drupal\jwt\Transcoder\JwtTranscoderInterface;
+use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\jwt\JsonWebToken\JsonWebToken;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ -47,14 +50,14 @@ class UserAuthTest extends KernelTestBase {
   public function testAuth() {
     $account = $this->createUser(['access content']);
     $this->setCurrentUser($account);
-    /** @var \Drupal\jwt\Authentication\Provider\JwtAuth $auth */
+    /** @var JwtAuth $auth */
     $auth = $this->container->get('jwt.authentication.jwt');
     $token = $auth->generateToken();
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $decoded_jwt = $transcoder->decode($token);
     $this->assertEquals($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
-    /** @var \Drupal\Core\Authentication\AuthenticationProviderInterface $auth_service */
+    /** @var AuthenticationProviderInterface $auth_service */
     $auth_service = $this->container->get('jwt.authentication.jwt');
     foreach (['Authorization', 'JWT-Authorization'] as $header) {
       $request = Request::create('/');
@@ -81,10 +84,10 @@ class UserAuthTest extends KernelTestBase {
     $jwt->setClaim('iat', time());
     $jwt->setClaim('exp', $now + 3600);
     $jwt->setClaim(['drupal', 'uuid'], $account->uuid());
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $token = $transcoder->encode($jwt);
-    /** @var \Drupal\Core\Authentication\AuthenticationProviderInterface $auth_service */
+    /** @var AuthenticationProviderInterface $auth_service */
     $auth_service = $this->container->get('jwt.authentication.jwt');
     foreach (['Authorization', 'JWT-Authorization'] as $header) {
       $request = Request::create('/');
@@ -121,10 +124,10 @@ class UserAuthTest extends KernelTestBase {
     $jwt->setClaim('iat', time());
     $jwt->setClaim('exp', $now + 3600);
     $jwt->setClaim(['drupal', 'name'], $account->getAccountName());
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $token = $transcoder->encode($jwt);
-    /** @var \Drupal\Core\Authentication\AuthenticationProviderInterface $auth_service */
+    /** @var AuthenticationProviderInterface $auth_service */
     $auth_service = $this->container->get('jwt.authentication.jwt');
     foreach (['Authorization', 'JWT-Authorization'] as $header) {
       $request = Request::create('/');
diff --git a/tests/src/Kernel/UserPathAuthTest.php b/tests/src/Kernel/UserPathAuthTest.php
index 2521684..5d6358f 100644
--- a/tests/src/Kernel/UserPathAuthTest.php
+++ b/tests/src/Kernel/UserPathAuthTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\jwt\Kernel;
 
+use Drupal\jwt_path_auth\Authentication\Provider\JwtPathAuth;
+use Drupal\jwt\Transcoder\JwtTranscoderInterface;
 use Drupal\jwt\JsonWebToken\JsonWebToken;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ -31,7 +33,7 @@ class UserPathAuthTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
 
@@ -46,9 +48,9 @@ class UserPathAuthTest extends KernelTestBase {
   public function testAuth() {
     $account = $this->createUser(['access content']);
     $this->setCurrentUser($account);
-    /** @var \Drupal\jwt_path_auth\Authentication\Provider\JwtPathAuth $auth_service */
+    /** @var JwtPathAuth $auth_service */
     $auth_service = $this->container->get('jwt_path_auth.authentication.jwt');
-    /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
+    /** @var JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'path_auth', 'uid'], $account->id());
