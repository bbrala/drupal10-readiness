modules/contrib/field_encrypt/field_encrypt.api.php
modules/contrib/field_encrypt/field_encrypt.module
modules/contrib/field_encrypt/src/Controller/FieldOverviewController.php
modules/contrib/field_encrypt/src/EncryptedFieldValueManager.php
modules/contrib/field_encrypt/src/EncryptedFieldValueManagerInterface.php
modules/contrib/field_encrypt/src/Entity/EncryptedFieldValue.php
modules/contrib/field_encrypt/src/Entity/EncryptedFieldValueInterface.php
modules/contrib/field_encrypt/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/field_encrypt/src/FieldEncryptProcessEntities.php
modules/contrib/field_encrypt/src/FieldEncryptProcessEntitiesInterface.php
modules/contrib/field_encrypt/src/Form/FieldEncryptDecryptForm.php
modules/contrib/field_encrypt/src/Form/FieldEncryptSettingsForm.php
modules/contrib/field_encrypt/src/Form/FieldEncryptUpdateForm.php
modules/contrib/field_encrypt/src/Plugin/QueueWorker/CronEncryptedFieldUpdate.php
modules/contrib/field_encrypt/src/Plugin/QueueWorker/EncryptedFieldUpdateBase.php
modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptCacheTest.php
modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptCommerceTest.php
modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptTest.php
modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptTestBase.php
modules/contrib/field_encrypt/tests/src/Unit/EncryptedFieldValueManagerTest.php
modules/contrib/field_encrypt/tests/src/Unit/FieldEncryptProcessEntitiesTest.php

17 files with changes
=====================

1) modules/contrib/field_encrypt/tests/src/Unit/FieldEncryptProcessEntitiesTest.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Unit;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\encrypt\EncryptServiceInterface;
+use Drupal\encrypt\EncryptionProfileManagerInterface;
+use Drupal\field_encrypt\EncryptedFieldValueManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\TypedData\DataDefinition;
@@ @@
   /**
    * A mock entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * A mock field.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $field;

@@ @@
   /**
    * A mock entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * A mock encryption service.
    *
-   * @var \Drupal\encrypt\EncryptServiceInterface
+   * @var EncryptServiceInterface
    */
   protected $encryptService;

@@ @@
   /**
    * A mock encryption profile manager.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * A mock EncryptionProfile.
    *
-   * @var \Drupal\encrypt\EncryptionProfileInterface
+   * @var EncryptionProfileInterface
    */
   protected $encryptionProfile;

@@ @@
   /**
    * A mock EncryptedFieldValue entity manager.
    *
-   * @var \Drupal\field_encrypt\EncryptedFieldValueManagerInterface
+   * @var EncryptedFieldValueManagerInterface
    */
   protected $encryptedFieldValueManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Set up a mock entity.
-    $this->entity = $this->getMockBuilder('\Drupal\Core\Entity\ContentEntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock('\Drupal\Core\Entity\ContentEntityInterface');

     // Set up language object.
-    $language = $this->getMockBuilder('\Drupal\Core\Language\LanguageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock('\Drupal\Core\Language\LanguageInterface');

     // Set up expectations for language.
     $language->expects($this->any())
@@ @@
       ->will($this->returnSelf());

     // Set up a mock field.
-    $this->field = $this->getMockBuilder('\Drupal\Core\Field\FieldItemListInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->field = $this->createMock('\Drupal\Core\Field\FieldItemListInterface');

     // Set up a mock EntityTypeManager.
-    $this->entityManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');

     // Set up a mock EncryptService.
-    $this->encryptService = $this->getMockBuilder('\Drupal\encrypt\EncryptServiceInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptService = $this->createMock('\Drupal\encrypt\EncryptServiceInterface');

     // Set up expectations for EncryptService.
     $this->encryptService->expects($this->any())
@@ @@
       ->will($this->returnValue('decrypted text'));

     // Set up a mock EncryptionProfileManager.
-    $this->encryptionProfileManager = $this->getMockBuilder('\Drupal\encrypt\EncryptionProfileManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptionProfileManager = $this->createMock('\Drupal\encrypt\EncryptionProfileManagerInterface');

-    $this->encryptionProfile = $this->getMockBuilder(EncryptionProfileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptionProfile = $this->createMock(EncryptionProfileInterface::class);

     // Set up expectations for EncryptionProfileManager.
     $this->encryptionProfileManager->expects($this->any())
@@ @@
       ->will($this->returnValue($this->encryptionProfile));

     // Set up a mock EncryptedFieldValueManager.
-    $this->encryptedFieldValueManager = $this->getMockBuilder('\Drupal\field_encrypt\EncryptedFieldValueManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptedFieldValueManager = $this->createMock('\Drupal\field_encrypt\EncryptedFieldValueManagerInterface');

     $container = new ContainerBuilder();
     $module_handler = $this->createMock(ModuleHandlerInterface::class);
@@ @@
    */
   public function testUpdateStoredField($field_name, $field_entity_type, $original_encryption_settings, $entity_id) {
     // Set up entity storage mock.
-    $entity_storage = $this->getMockBuilder('\Drupal\Core\Entity\EntityStorageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');

     // Set up a mock entity type.
-    $entity_type = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type = $this->createMock('\Drupal\Core\Entity\EntityTypeInterface');

     // Set up expectations for entity type.
     $entity_type->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_encrypt/tests/src/Unit/EncryptedFieldValueManagerTest.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Unit;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\field_encrypt\Entity\EncryptedFieldValueInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\field_encrypt\EncryptedFieldValueManager;
 use Drupal\Tests\UnitTestCase;

@@ @@
   /**
    * A mock entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * A mock entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * A mock EncryptedFieldValue entity.
    *
-   * @var \Drupal\field_encrypt\Entity\EncryptedFieldValueInterface
+   * @var EncryptedFieldValueInterface
    */
   protected $encryptedFieldValue;

@@ @@
   /**
    * A mock EntityStorage instance.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setup();

     // Set up a mock entity type manager service.
-    $this->entityManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');

     // Set up a mock EntityStorage.
-    $this->storage = $this->getMockBuilder('\Drupal\Core\Entity\EntityStorageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');

     // Set up expectations for the entity type manager.
     $this->entityManager->expects($this->any())
@@ @@
       ->will($this->returnValue($this->storage));

     // Set up a mock entity.
-    $this->entity = $this->getMockBuilder('\Drupal\Core\Entity\ContentEntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock('\Drupal\Core\Entity\ContentEntityInterface');

     // Set up language object.
     $language = $this->getMockBuilder('\Drupal\Core\Language\Language')
@@ @@
   public function testSaveEncryptedFieldValue($existing) {
     // Set up a mock for the EncryptedFieldValueManager class to mock
     // some methods.
-    /** @var \Drupal\field_encrypt\EncryptedFieldValueManager $service */
+    /** @var EncryptedFieldValueManager $service */
     $service = $this->getMockBuilder('\Drupal\field_encrypt\EncryptedFieldValueManager')
       ->setMethods(['getExistingEntity', 'getEntityRevisionId'])
       ->setConstructorArgs(array(
@@ @@
    *
    * @covers ::__construct
    * @covers ::deleteEntityEncryptedFieldValues
+   * @doesNotPerformAssertions
    */
   public function testDeleteEntityEncryptedFieldValues() {
     // Set up expectations for storage.
@@ @@
    * @covers ::__construct
    * @covers ::deleteEntityEncryptedFieldValuesForField
    * @covers ::getEntityRevisionId
+   * @doesNotPerformAssertions
    */
   public function testDeleteEntityEncryptedFieldValuesForField() {
     // Set up expectations for storage.
@@ @@
       ->method('delete');

     // Set up entity type object.
-    $entity_type = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type = $this->createMock('\Drupal\Core\Entity\EntityTypeInterface');

     // Set up expectations for entity type object.
     $entity_type->expects($this->once())
@@ @@
    *
    * @covers ::__construct
    * @covers ::deleteEncryptedFieldValuesForField
+   * @doesNotPerformAssertions
    */
   public function testDeleteEncryptedFieldValuesForField() {
     // Set up expectations for storage.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * The page node type.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $nodeType;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A test node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $testNode;

@@ @@
    *
    * @TODO: Simplify setUp() by extending EncryptTestBase when https://www.drupal.org/node/2692387 lands.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an admin user.
@@ @@
       'label' => 'Single field',
     ]);
     $single_field->save();
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', 'page', 'default')
       ->setComponent('field_test_single')
@@ @@
     // Set up storage settings for first field.
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_test_single/storage');
     // Encrypt field found.
-    $this->assertFieldByName('field_encrypt[encrypt]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encrypt]');
     // Encryption profile field found.
-    $this->assertFieldByName('field_encrypt[encryption_profile]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encryption_profile]');

     $profile_id = ($alternate == TRUE) ? 'encryption_profile_2' : 'encryption_profile_1';
     $edit = [
@@ @@
       'field_encrypt[encryption_profile]' => $profile_id,
       'field_encrypt[uncacheable]' => $uncacheable,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save field settings');
-    $this->assertText('Updated field Single field field settings.');
+    $this->submitForm($edit, 'Save field settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Updated field Single field field settings.');

     // Set up storage settings for second field.
     $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_test_multi/storage');
     // Encrypt field found.
-    $this->assertFieldByName('field_encrypt[encrypt]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encrypt]');
     // Encryption profile field found.
-    $this->assertFieldByName('field_encrypt[encryption_profile]', NULL);
+    $this->assertSession()->fieldExists('field_encrypt[encryption_profile]');

     $profile_id = ($alternate == TRUE) ? 'encryption_profile_1' : 'encryption_profile_2';
     $edit = [
@@ @@
       'field_encrypt[encryption_profile]' => $profile_id,
       'field_encrypt[uncacheable]' => $uncacheable,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save field settings');
-    $this->assertText('Updated field Multi field field settings.');
+    $this->submitForm($edit, 'Save field settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Updated field Multi field field settings.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\field_encrypt\Entity\EncryptedFieldValue;
 use Drupal\Tests\Traits\Core\CronRunTrait;
@@ @@
     $single_field = $fields['field_test_single'];
     $definition = $single_field->getFieldDefinition();
     $this->assertTrue($definition instanceof FieldDefinitionInterface);
-    /** @var \Drupal\Core\Field\FieldConfigInterface $storage */
+    /** @var FieldConfigInterface $storage */
     $storage = $definition->getFieldStorageDefinition();
     $this->assertEquals(TRUE, $storage->getThirdPartySetting('field_encrypt', 'encrypt', FALSE));
     $this->assertEquals(['value' => 'value', 'summary' => 'summary'], array_filter($storage->getThirdPartySetting('field_encrypt', 'properties', [])));
@@ @@
     $single_field = $fields['field_test_multi'];
     $definition = $single_field->getFieldDefinition();
     $this->assertTrue($definition instanceof FieldDefinitionInterface);
-    /** @var \Drupal\Core\Field\FieldConfigInterface $storage */
+    /** @var FieldConfigInterface $storage */
     $storage = $definition->getFieldStorageDefinition();
     $this->assertEquals(TRUE, $storage->getThirdPartySetting('field_encrypt', 'encrypt', FALSE));
     $this->assertEquals(['value' => 'value'], array_filter($storage->getThirdPartySetting('field_encrypt', 'properties', [])));
@@ @@

     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
-    $this->assertEqual(5, count($encrypted_field_values));
+    $this->assertEquals(5, count($encrypted_field_values));

     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");

     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
-    $this->assertEqual("[ENCRYPTED]", $result);
+    $this->assertEquals("[ENCRYPTED]", $result);

     $result = \Drupal::database()->query("SELECT field_test_multi_value FROM {node__field_test_multi} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchAll();
     foreach ($result as $record) {
@@ @@
     // Test updating entities with alternative encryption settings.
     $this->setFieldStorageSettings(TRUE, TRUE);
     // Update existing data with new field encryption settings.
-    $this->assertLinkByHref('admin/config/system/field-encrypt/field-update');
+    $this->assertSession()->linkByHrefExists('admin/config/system/field-encrypt/field-update');
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 2 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 2 fields queued for encryption updates.');
     $this->cronRun();
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 0 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 0 fields queued for encryption updates.');

     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
-    $this->assertEqual(5, count($encrypted_field_values));
+    $this->assertEquals(5, count($encrypted_field_values));

     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");

     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
@@ @@
     // Test updating entities to remove field encryption.
     $this->setFieldStorageSettings(FALSE);
     // Update existing data with new field encryption settings.
-    $this->assertLinkByHref('admin/config/system/field-encrypt/field-update');
+    $this->assertSession()->linkByHrefExists('admin/config/system/field-encrypt/field-update');
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 2 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 2 fields queued for encryption updates.');
     $this->cronRun();
     $this->drupalGet('admin/config/system/field-encrypt/field-update');
-    $this->assertText('There are 0 fields queued for encryption updates.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are 0 fields queued for encryption updates.');

     // Check removal of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ @@

     // Check if text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");

     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
     $this->assertEquals("Lorem ipsum dolor sit amet.", $result);
@@ @@

     // Ensure that the node revision has been created.
     $this->entityTypeManager->getStorage('node')->resetCache([$this->testNode->id()]);
-    $this->assertNotIdentical($this->testNode->getRevisionId(), $old_revision_id, 'A new revision has been created.');
+    $this->assertNotSame($this->testNode->getRevisionId(), $old_revision_id, 'A new revision has been created.');

     // Check existence of EncryptedFieldValue entities.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ @@

     // Check if revisioned text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet revisioned.");
-    $this->assertText("four");
-    $this->assertText("five");
-    $this->assertText("six");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet revisioned.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("four");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("five");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("six");

     // Check if original text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id() . '/revisions/' . $old_revision_id . '/view');
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");

     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node_revision__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchField();
@@ @@
     foreach ($result as $record) {
       $this->assertEquals("[ENCRYPTED]", $record->field_test_multi_value);
     }
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_test_multi/delete');

-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_test_multi/delete', [], 'Delete');
+    $this->submitForm([], 'Delete');

     // Test if EncryptedFieldValue entities got deleted.
     $encrypted_field_values = EncryptedFieldValue::loadMultiple();
@@ @@

     // Check if English text is displayed unencrypted.
     $this->drupalGet('node/' . $this->testNode->id());
-    $this->assertText("Lorem ipsum dolor sit amet.");
-    $this->assertText("one");
-    $this->assertText("two");
-    $this->assertText("three");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Lorem ipsum dolor sit amet.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("one");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("two");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("three");

     // Check if French text is displayed unencrypted.
     $this->drupalGet('fr/node/' . $this->testNode->id());
-    $this->assertText("Ceci est un text francais.");
-    $this->assertText("un");
-    $this->assertText("deux");
-    $this->assertText("trois");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Ceci est un text francais.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("un");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("deux");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("trois");

     // Check values saved in the database.
     $result = \Drupal::database()->query("SELECT field_test_single_value FROM {node__field_test_single} WHERE entity_id = :entity_id", [':entity_id' => $this->testNode->id()])->fetchAll();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkByHrefRector
 * AssertNotIdenticalRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\dynamic_page_cache\EventSubscriber\DynamicPageCacheSubscriber;
 use Drupal\field\Entity\FieldStorageConfig;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_encrypt/src/Plugin/QueueWorker/EncryptedFieldUpdateBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Plugin\QueueWorker;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * The service the process entities.
    *
-   * @var \Drupal\field_encrypt\FieldEncryptProcessEntitiesInterface.
+   * @var FieldEncryptProcessEntitiesInterface .
    */
   protected $processEntitiesService;

@@ @@
   /**
    * A configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Creates a new EncryptedFieldUpdate object.
    *
-   * @param \Drupal\field_encrypt\FieldEncryptProcessEntitiesInterface $process_entities_service
+   * @param FieldEncryptProcessEntitiesInterface $process_entities_service
    *   The service the process entities.
    * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/field_encrypt/src/Form/FieldEncryptUpdateForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The QueueWorker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;

@@ @@
   /**
    * Constructs a new FieldEncryptUpdateForm.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   The QueueWorker manager.
    */
   public function __construct(QueueFactory $queue_factory, QueueWorkerManagerInterface $queue_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/field_encrypt/src/Form/FieldEncryptSettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;

@@ @@
   /**
    * Constructs a new FieldEncryptSettingsForm.
    *
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_plugin_manager
+   * @param FieldTypePluginManagerInterface $field_type_plugin_manager
    *   The field type plugin manager.
    */
   public function __construct(FieldTypePluginManagerInterface $field_type_plugin_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/field_encrypt/src/Form/FieldEncryptDecryptForm.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new FieldEncryptDecryptForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/field_encrypt/src/FieldEncryptProcessEntitiesInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Check if entity has encrypted fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
    *
    * @return bool
@@ @@
   /**
    * Encrypt fields for an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to encrypt fields on.
    */
   public function encryptEntity(ContentEntityInterface $entity);
@@ @@
   /**
    * Decrypt fields for an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to decrypt fields on.
    */
   public function decryptEntity(ContentEntityInterface $entity);
@@ @@
   /**
    * Set the cache tags correctly for each encrypted field on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity whose fields to set cache tags on.
    * @param $build
    *   The entity render array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/field_encrypt/src/FieldEncryptProcessEntities.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * The encryption service.
    *
-   * @var \Drupal\encrypt\EncryptServiceInterface
+   * @var EncryptServiceInterface
    */
   protected $encryptService;

@@ @@
   /**
    * The encryption profile manager.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * The EncryptedFieldValue entity manager.
    *
-   * @var \Drupal\field_encrypt\EncryptedFieldValueManagerInterface
+   * @var EncryptedFieldValueManagerInterface
    */
   protected $encryptedFieldValueManager;

@@ @@
   /**
    * Constructs a FieldEncryptProcessEntities object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   An entity manager service.
-   * @param \Drupal\encrypt\EncryptServiceInterface $encrypt_service
+   * @param EncryptServiceInterface $encrypt_service
    *   The encryption service.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   The encryption profile manager.
-   * @param \Drupal\field_encrypt\EncryptedFieldValueManagerInterface $encrypted_field_value_manager
+   * @param EncryptedFieldValueManagerInterface $encrypted_field_value_manager
    *   The EncryptedFieldValue entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, EncryptServiceInterface $encrypt_service, EncryptionProfileManagerInterface $encryption_profile_manager, EncryptedFieldValueManagerInterface $encrypted_field_value_manager) {
@@ @@
    *
    * Both processes are very similar, so we bundle the field processing part.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
    * @param string $op
    *   The operation to perform (encrypt / decrypt).
@@ @@
   /**
    * Process a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to process.
    * @param string $op
    *   The operation to perform (encrypt / decrypt).
@@ @@
   /**
    * Check if a given field has encryption enabled.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to check.
    *
    * @return bool
@@ @@
   /**
    * Encrypt or decrypt a value.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to process.
    * @param int $delta
    *   The field delta.
    * @param string $property_name
    *   The name of the property.
-   * @param \Drupal\encrypt\EncryptionProfileInterface $encryption_profile
+   * @param EncryptionProfileInterface $encryption_profile
    *   The encryption profile to use.
    * @param string $value
    *   The value to encrypt / decrypt.
@@ @@
   /**
    * Defines if a given field + property on an entity should be encrypted.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to encrypt fields on.
    * @param string $field_name
    *   The field name to update.
@@ @@
   /**
    * Render a placeholder value to be stored in the unencrypted field storage.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to encrypt fields on.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to encrypt.
    * @param string $property_name
    *   The property to encrypt.
@@ @@
   /**
    * Get field names for an entity that are set to be excluded from cache.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/field_encrypt/src/EventSubscriber/ConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\EventSubscriber;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The EncryptedFieldValue entity manager.
    *
-   * @var \Drupal\field_encrypt\EncryptedFieldValueManagerInterface
+   * @var EncryptedFieldValueManagerInterface
    */
   protected $encryptedFieldValueManager;

@@ @@
   /**
    * The state key value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The entity last installed schema repository.
    *
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface
+   * @var EntityLastInstalledSchemaRepositoryInterface
    */
   protected $entitySchemaRepository;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ConfigSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
-   * @param \Drupal\field_encrypt\EncryptedFieldValueManagerInterface $encrypted_field_value_manager
+   * @param EncryptedFieldValueManagerInterface $encrypted_field_value_manager
    *   The EncryptedFieldValue entity manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository
+   * @param EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository
    *   The last installed entity schema repository.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory, TranslationInterface $translation, EncryptedFieldValueManagerInterface $encrypted_field_value_manager, StateInterface $state, EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository, MessengerInterface $messenger) {
@@ @@

             if (!empty($entity_ids)) {
               // Call the Queue API and add items for processing.
-              /** @var \Drupal\Core\Queue\QueueInterface $queue */
+              /** @var QueueInterface $queue */
               $queue = $this->queueFactory->get('cron_encrypted_field_update');

               foreach (array_keys($entity_ids) as $entity_id) {
@@ @@
   /**
    * Check whether the field encryption config has changed.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The config to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/field_encrypt/src/EncryptedFieldValueManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt;

+use Drupal\field_encrypt\Entity\EncryptedFieldValueInterface;
+use Drupal\field_encrypt\Entity\EncryptedFieldValue;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Create an encrypted field value, or update an existing one.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
    * @param string $field_name
    *   The field name to save.
@@ @@
    * @param string $encrypted_value
    *   The encrypted value to save.
    *
-   * @return \Drupal\field_encrypt\Entity\EncryptedFieldValueInterface
+   * @return EncryptedFieldValueInterface
    *   The created EncryptedFieldValue entity.
    */
   public function createEncryptedFieldValue(ContentEntityInterface $entity, $field_name, $delta, $property, $encrypted_value);
@@ @@
   /**
    * Save encrypted field values and link them to their parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to save EncryptedFieldValue entities for.
    */
   public function saveEncryptedFieldValues(ContentEntityInterface $entity);
@@ @@
   /**
    * Get an encrypted field value.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
    * @param string $field_name
    *   The field name to retrieve.
@@ @@
   /**
    * Loads an existing EncryptedFieldValue entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
    * @param string $field_name
    *   The field name to check.
@@ @@
    * @param string $property
    *   The field property to check.
    *
-   * @return bool|\Drupal\field_encrypt\Entity\EncryptedFieldValue
+   * @return bool|EncryptedFieldValue
    *   The existing EncryptedFieldValue entity.
    *
    * @fixme have its own custom method ...
@@ @@
   /**
    * Delete encrypted field values on a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to be deleted.
    */
   public function deleteEntityEncryptedFieldValues(ContentEntityInterface $entity);
@@ @@
   /**
    * Delete encrypted field values on a given entity for a specific field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity containing the field to be deleted.
    * @param string $field_name
    *   The field name to delete encrypted values for.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/field_encrypt/src/EncryptedFieldValueManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * Construct the CommentManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ @@
   /**
    * Get the revision ID to store for a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/field_encrypt/src/Controller/FieldOverviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Controller;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates a new FieldOverviewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Get a list of encrypted fields' storage entities.
    *
-   * @return \Drupal\field\FieldStorageConfigInterface[]
+   * @return FieldStorageConfigInterface[]
    *   An array of FieldStorageConfig entities for encrypted fields.
    */
   protected function getEncryptedFields() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/field_encrypt/field_encrypt.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\field_encrypt\Entity\EncryptedFieldValueInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Contains module hooks for field_encrypt.
@@ @@
  *
  * @param string $entity_type
  *   The entity type.
- * @param \Drupal\field\Entity\FieldStorageConfig $field_storage_config
+ * @param FieldStorageConfig $field_storage_config
  *   The field storage config entity.
  * @param array $form
  *   The complete form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
-function field_encrypt_form_field_add_form_builder($entity_type, \Drupal\field\Entity\FieldStorageConfig $field_storage_config, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function field_encrypt_form_field_add_form_builder($entity_type, FieldStorageConfig $field_storage_config, &$form, FormStateInterface $form_state) {
   $field_encryption_settings = $form_state->getValue('field_encrypt');
   $field_encryption_settings['encrypt'] = (bool) $field_encryption_settings['encrypt'];

@@ @@
 /**
  * Verify if the given entity allows to be encrypted.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to check.
  *
  * @return bool
@@ @@
   $allowed = TRUE;

   // We don't want to encrypt the encrypted data storage.
-  if ($entity instanceof Drupal\field_encrypt\Entity\EncryptedFieldValueInterface) {
+  if ($entity instanceof EncryptedFieldValueInterface) {
     $allowed = FALSE;
   }

   // We only want to encrypt content entities.
-  if (!$entity instanceof Drupal\Core\Entity\ContentEntityInterface) {
+  if (!$entity instanceof ContentEntityInterface) {
     $allowed = FALSE;
   }
   return $allowed;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


17) modules/contrib/field_encrypt/field_encrypt.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\node\Entity\Node;
 /**
  * @file
  * Hooks for Field Encrypt module.
@@ @@
  * encrypted. It does not allow a field without field encryption settings to be
  * encrypted, because there are no settings defined to do so.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity to encrypt fields on.
  * @param string $field_name
  *   The field name to update.
@@ @@
  * @return bool
  *   Return FALSE if field property should not be encrypted.
  */
-function hook_field_encrypt_allow_encryption(\Drupal\Core\Entity\ContentEntityInterface $entity, $field_name, $delta, $property_name) {
+function hook_field_encrypt_allow_encryption(ContentEntityInterface $entity, $field_name, $delta, $property_name) {
   // Only encrypt fields on unpublished nodes.
-  if ($entity instanceof \Drupal\node\Entity\Node) {
+  if ($entity instanceof Node) {
     if ($entity->isPublished()) {
       return FALSE;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 17 files have been changed by Rector                                      

