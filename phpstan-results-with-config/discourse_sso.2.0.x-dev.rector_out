modules/contrib/discourse_sso/discourse_sso.api.php
modules/contrib/discourse_sso/discourse_sso.module
modules/contrib/discourse_sso/discourse_sync/discourse_sync.module
modules/contrib/discourse_sso/discourse_sync/src/Controller/DiscourseSyncController.php
modules/contrib/discourse_sso/discourse_sync/src/EventSubscriber/EventSubscriber.php
modules/contrib/discourse_sso/discourse_sync/src/Role.php
modules/contrib/discourse_sso/discourse_sync/src/UserEvent.php
modules/contrib/discourse_sso/src/Controller/DiscourseSsoController.php
modules/contrib/discourse_sso/src/Form/DiscourseSsoAdminForm.php
modules/contrib/discourse_sso/src/Logout.php
modules/contrib/discourse_sso/src/SingleSignOnBase.php

7 files with changes
====================

1) modules/contrib/discourse_sso/src/SingleSignOnBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\discourse_sso;

+use GuzzleHttp\Client;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use GuzzleHttp\ClientInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * GuzzleHttp\Client definition.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $client;

@@ @@
   /**
    * SingleSignOnBase constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ClientInterface $http_client
+   * @param ConfigFactory $config_factory
    */
   public function __construct(ClientInterface $http_client, ConfigFactory $config_factory) {
     $this->client = $http_client;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/discourse_sso/src/Form/DiscourseSsoAdminForm.php:9

    ---------- begin diff ----------
@@ @@
 class DiscourseSsoAdminForm extends FormBase {

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;

@@ @@
   /**
    * DiscourseSsoAdminForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
     $this->entityFieldManager = $entity_field_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/discourse_sso/src/Controller/DiscourseSsoController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\discourse_sso\Controller;

+use Drupal\user\UserInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
@@ @@
   protected $sig;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * DiscourseSsoController constructor.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    */
   public function __construct(ImmutableConfig $config) {
     $this->config = $config;
@@ @@
   }

   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access(): AccessResult {
     if (!$this->payload || !$this->sig) {
@@ @@
   }

   /**
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function discourse_sso(): RedirectResponse {
     if (!$this->payload || !$this->sig) {
@@ @@
    * Function is called if a user is authenticated with the primary Drupal
    * website.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    */
   protected function validate(): TrustedRedirectResponse {
     $payload = urldecode($this->payload);
     $query = [];
     parse_str(base64_decode($payload), $query);
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = NULL;
     try {
       $account = $this->entityTypeManager()->getStorage('user')
@@ @@
     }
     $picture = '';
     if ($account->hasField('user_picture') && !$account->get('user_picture')->isEmpty()) {
-      $picture = file_create_url($account->get('user_picture')->entity->getFileUri());
+      $picture = \Drupal::service('file_url_generator')->generateAbsoluteString($account->get('user_picture')->entity->getFileUri());
     }

     // Create the payload
@@ @@
    * Function is called if a user is not authenticated with the primary Drupal
    * website.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   protected function login(): RedirectResponse {
     $_SESSION['discourse_sso_sig'] = $this->sig;
@@ @@
   /**
    * Function is called if either payload or sig is not set.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse
+   * @return TrustedRedirectResponse
    */
   protected function retry(): TrustedRedirectResponse {
     $response = new TrustedRedirectResponse($this->config->get('discourse_server') . '/session/sso');
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/discourse_sso/discourse_sync/src/UserEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\discourse_sync;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\user\Entity\User;
 /**
  * Event class to be dispatched from the discourse_sso controller.
  */
-class UserEvent extends \Symfony\Contracts\EventDispatcher\Event {
+class UserEvent extends Event {

   public const EVENT = 'discourse_sync.user';

   /**
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * UserEvent constructor.
    *
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    */
   public function __construct($user) {
     $this->user = $user;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/discourse_sso/discourse_sync/src/Role.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\discourse_sync;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
 class Role extends SingleSignOnBase {

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Role constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
-   * @param \Drupal\Core\Config\ConfigFactory $config
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
+   * @param ClientInterface $http_client
+   * @param ConfigFactory $config
+   * @param MessengerInterface $messenger
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
    */
   public function __construct(ClientInterface $http_client, ConfigFactory $config, MessengerInterface $messenger, LoggerChannelFactoryInterface $logger_channel_factory) {
     parent::__construct($http_client, $config);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/discourse_sso/discourse_sync/src/EventSubscriber/EventSubscriber.php:11

    ---------- begin diff ----------
@@ @@
 class EventSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Drupal\discourse_sync\Role
+   * @var Role
    */
   protected $service;

@@ @@
   /**
    * EventSubscriber constructor.
    *
-   * @param \Drupal\discourse_sync\Role $service
+   * @param Role $service
    */
   public function __construct(Role $service) {
     $this->service = $service;
@@ @@
   /**
    * Handler for the discourse_sync user event.
    *
-   * @param \Drupal\discourse_sync\UserEvent $event
+   * @param UserEvent $event
    */
   public function onUserCreate(UserEvent $event): void {
     $this->service->syncUserRoles($event->getUsername(), $event->getUserRoles());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/discourse_sso/discourse_sync/src/Controller/DiscourseSyncController.php:16

    ---------- begin diff ----------
@@ @@
   public const DISCOURSE_USER_CREATED_EVENT = 'user_created';

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   protected $webhookSecret;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * DiscourseSyncController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
-   * @param \Drupal\Core\Config\ConfigFactory $config
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param EventDispatcherInterface $eventDispatcher
+   * @param ConfigFactory $config
+   * @param Request $request
    */
   public function __construct(EventDispatcherInterface $eventDispatcher,
     ConfigFactory $config, Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

