modules/contrib/expose_actions/expose_actions.module
modules/contrib/expose_actions/src/Form/Confirm.php
modules/contrib/expose_actions/src/Permissions.php
modules/contrib/expose_actions/src/Plugin/Menu/LocalAction/ExposeAction.php

4 files with changes
====================

1) modules/contrib/expose_actions/src/Plugin/Menu/LocalAction/ExposeAction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\expose_actions\Plugin\Menu\LocalAction;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Menu\LocalActionDefault;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@

   public function getRouteParameters(RouteMatchInterface $route_match) {
     $parameters = parent::getRouteParameters($route_match);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($route_match->getParameters()->all() as $paramater) {
       if ($paramater instanceof EntityInterface) {
         $parameters['entity_type'] = $paramater->getEntityTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/expose_actions/src/Permissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\expose_actions;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\system\Entity\Action;
 use Drupal;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@

   /**
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function permissions(): array {
     $permissions = [];
-    /** @var \Drupal\system\Entity\Action $action */
+    /** @var Action $action */
     foreach (Drupal::entityTypeManager()->getStorage('action')->loadMultiple() as $id => $action) {
       $permissions['access exposed action ' . $id] = [
         'title' => $this->t('Use the exposed action <a href="@url">@label</a>', ['@url' => $action->toUrl()->toString(), '@label' => $action->label()]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/expose_actions/src/Form/Confirm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\expose_actions\Form;

+use Drupal\System\Entity\Action;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
@@ @@
 class Confirm extends ConfirmFormBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\System\Entity\Action
+   * @var Action
    */
   protected $action;

   /**
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Confirm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   /**
    * @param string|null $action_id
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadAction($action_id = NULL): void {
     if ($action_id !== NULL && $this->action === NULL) {
@@ @@
    * @param string|null $entity_type
    * @param int|null $entity_id
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadEntity($entity_type = NULL, $entity_id = NULL): void {
     if ($entity_type !== NULL && $entity_id !== NULL && $this->entity === NULL) {
@@ @@
   /**
    * Check whether the user has 'administer' or 'overview' permission.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
    * @param string $action
@@ @@
    * @param string $entity_type
    * @param int $entity_id
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function checkAccess(AccountInterface $account, $action, $entity_type, $entity_id): AccessResultInterface {
     $this->loadAction($action);
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getCancelUrl(): Url {
     return $this->entity->toUrl();
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
     $this->action->execute([$this->entity]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/expose_actions/expose_actions.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\system\Entity\Action;
 use Drupal\expose_actions\Plugin\Menu\LocalAction\ExposeAction;

 /**
@@ @@
  *
  * @param $local_actions
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function expose_actions_menu_local_actions_alter(&$local_actions) {
-  /** @var \Drupal\system\Entity\Action $action */
+  /** @var Action $action */
   foreach (Drupal::entityTypeManager()->getStorage('action')->loadMultiple() as $id => $action) {
     if ($action->status()) {
       $def = $action->getPluginDefinition();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

