diff --git a/modules/og_prepopulate/og_prepopulate.module b/modules/og_prepopulate/og_prepopulate.module
index 16e4b08..2f9c574 100644
--- a/modules/og_prepopulate/og_prepopulate.module
+++ b/modules/og_prepopulate/og_prepopulate.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Field\FieldItemList;
+use Drupal\prepopulate\Populate;
 /**
  * @file
  * The module file for og_prepopulate.
@@ -16,7 +18,7 @@ function og_prepopulate_field_widget_og_complex_form_alter(&$element, FormStateI
   if ($form_state->isRebuilding()) {
     return;
   }
-  /** @var \Drupal\Core\Field\FieldItemList $field */
+  /** @var FieldItemList $field */
   $field = $context['items'];
   if (\Drupal::request()->query->has($field->getName())) {
     $element['#after_build'][] = 'og_prepopulate_after_build';
@@ -33,7 +35,7 @@ function og_prepopulate_field_widget_og_complex_form_alter(&$element, FormStateI
 function og_prepopulate_after_build($element) {
   $field_name = reset($element['#parents']);
   $entity_id = \Drupal::request()->query->get($field_name);
-  /** @var \Drupal\prepopulate\Populate $populate */
+  /** @var Populate $populate */
   $populate = \Drupal::service('og_prepopulate.populator');
   // This lets us use URLs like example.com/node/add/page?og_audience=1.
   $populate->populateForm($element, ['target_id' => $entity_id]);
diff --git a/modules/og_prepopulate/src/Populate.php b/modules/og_prepopulate/src/Populate.php
index 4889977..0a66d8b 100644
--- a/modules/og_prepopulate/src/Populate.php
+++ b/modules/og_prepopulate/src/Populate.php
@@ -19,20 +19,20 @@ class Populate extends BasePopulate {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Populate constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(RequestStack $request, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountProxyInterface $current_user) {
diff --git a/prepopulate.module b/prepopulate.module
index af89df2..775153d 100644
--- a/prepopulate.module
+++ b/prepopulate.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\prepopulate\Populate;
 /**
  * @file
  * Fill form elements with data from GET or POST values.
@@ -25,7 +26,7 @@ function prepopulate_form_alter(&$form, FormStateInterface $form_state, $form_id
  * An #after_build function to set the values prepopulated in the request.
  */
 function prepopulate_after_build($form) {
-  /** @var \Drupal\prepopulate\Populate $populate */
+  /** @var Populate $populate */
   $populate = \Drupal::service('prepopulate.populator');
   $populate->populateForm($form);
   return $form;
diff --git a/src/Populate.php b/src/Populate.php
index 4542074..89c9c49 100644
--- a/src/Populate.php
+++ b/src/Populate.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\prepopulate;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Render\Element;
@@ -18,21 +20,21 @@ class Populate implements PopulateInterface {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -70,11 +72,11 @@ class Populate implements PopulateInterface {
   /**
    * Populate constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(RequestStack $request, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ -154,8 +156,8 @@ class Populate implements PopulateInterface {
    *   The formatted label if entity exists and view label access is allowed.
    *   Otherwise, the value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function formatEntityAutocomplete($value, array &$element) {
     $entity = $this->entityTypeManager
diff --git a/tests/src/Functional/PrepopulateFieldTest.php b/tests/src/Functional/PrepopulateFieldTest.php
index 4ee187c..3a0cdc0 100644
--- a/tests/src/Functional/PrepopulateFieldTest.php
+++ b/tests/src/Functional/PrepopulateFieldTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\prepopulate\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Core\Url;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\BrowserTestBase;
@@ -44,28 +48,28 @@ class PrepopulateFieldTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * A stub node page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * A stub term.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser([
       'administer content types',
@@ -84,7 +88,7 @@ class PrepopulateFieldTest extends BrowserTestBase {
   /**
    * Test pre-populating fields.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testFieldsPrepopulate() {
     foreach ($this->allFields() as $input) {
@@ -100,7 +104,7 @@ class PrepopulateFieldTest extends BrowserTestBase {
    * @param string $expected
    *   The expected results populated in the node.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   protected function assertPrepopulate(array $query, $expected) {
     // Title is required.
@@ -108,7 +112,7 @@ class PrepopulateFieldTest extends BrowserTestBase {
     // IEF taxonomy 'name' field is required.
     $query[] = 'edit[field_ief][widget][0][inline_entity_form][name][widget][0][value]=Apples';
     $this->drupalGet(Url::fromUri('internal:/node/add/test_content?' . implode('&', $query)));
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('Test Content simple title has been created.');
     $this->assertSession()->pageTextContains($expected);
     $this->assertSession()->pageTextContains('IEF Apples');
diff --git a/tests/src/Functional/PrepopulateFormTest.php b/tests/src/Functional/PrepopulateFormTest.php
index da2dd92..cfac021 100644
--- a/tests/src/Functional/PrepopulateFormTest.php
+++ b/tests/src/Functional/PrepopulateFormTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\prepopulate\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -43,21 +46,21 @@ class PrepopulateFormTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * A stub node page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->node = $this->drupalCreateNode([
@@ -71,7 +74,7 @@ class PrepopulateFormTest extends BrowserTestBase {
   /**
    * Test pre-populating all values into a form. Safe and unsafe inputs.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testAllPrepopulate() {
     foreach ($this->allInputs() as $input) {
@@ -82,7 +85,7 @@ class PrepopulateFormTest extends BrowserTestBase {
   /**
    * Test pre-populating unsafe inputs in a form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testUnsafePrepopulate() {
     $this->container->get('module_installer')->uninstall(['prepopulate_test_unsafe']);
@@ -117,11 +120,11 @@ class PrepopulateFormTest extends BrowserTestBase {
    * @param string $expected
    *   The expected result after submitting the form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   protected function assertPrepopulate($query, $expected) {
     $this->drupalGet(Url::fromUri('internal:/prepopulate_test/form?' . $query));
-    $this->drupalPostForm(NULL, [], 'Submit');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->pageTextContains($expected);
   }
 
