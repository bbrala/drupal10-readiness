modules/contrib/cshs/cshs.module
modules/contrib/cshs/cshs.views.inc
modules/contrib/cshs/modules/cshs_menu_link/cshs_menu_link.install
modules/contrib/cshs/modules/cshs_menu_link/cshs_menu_link.module
modules/contrib/cshs/src/Component/CshsOption.php
modules/contrib/cshs/src/CshsOptionsFromHelper.php
modules/contrib/cshs/src/Element/CshsElement.php
modules/contrib/cshs/src/IsApplicable.php
modules/contrib/cshs/src/Plugin/Field/FieldFormatter/CshsFlexibleHierarchyFormatter.php
modules/contrib/cshs/src/Plugin/Field/FieldFormatter/CshsFormatterBase.php
modules/contrib/cshs/src/Plugin/Field/FieldFormatter/CshsFullHierarchyFormatter.php
modules/contrib/cshs/src/Plugin/Field/FieldFormatter/CshsGroupByRootFormatter.php
modules/contrib/cshs/src/Plugin/Field/FieldWidget/CshsWidget.php
modules/contrib/cshs/src/Plugin/views/filter/CshsTaxonomyIndex.php
modules/contrib/cshs/src/Plugin/views/filter/CshsTaxonomyIndexTid.php
modules/contrib/cshs/src/Plugin/views/filter/CshsTaxonomyIndexTidDepth.php
modules/contrib/cshs/src/TaxonomyStorages.php
modules/contrib/cshs/tests/src/Functional/CshsTest.php
modules/contrib/cshs/tests/src/Unit/CshsGroupByRootFormatterUnitTest.php

6 files with changes
====================

1) modules/contrib/cshs/tests/src/Unit/CshsGroupByRootFormatterUnitTest.php:350

    ---------- begin diff ----------
@@ @@
    * @param string $name
    *   The term name.
    *
-   * @return \Drupal\Core\GeneratedLink
+   * @return GeneratedLink
    *   The mocked link.
    */
   protected static function getGeneratedLink(string $name): GeneratedLink {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cshs/src/TaxonomyStorages.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cshs;

+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   /**
    * An instance of the "entity.repository" service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * An instance of the "entity_type.manager" service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Returns storage of the "taxonomy_term" entities.
    *
-   * @return \Drupal\taxonomy\TermStorageInterface
+   * @return TermStorageInterface
    *   The storage of the "taxonomy_term" entities.
    */
   protected function getTermStorage(): TermStorageInterface {
@@ @@
   /**
    * Returns storage of the "taxonomy_vocabulary" entities.
    *
-   * @return \Drupal\taxonomy\VocabularyStorageInterface
+   * @return VocabularyStorageInterface
    *   The storage of the "taxonomy_vocabulary" entities.
    */
   protected function getVocabularyStorage(): VocabularyStorageInterface {
@@ @@
   /**
    * Returns the entity translation to be used in the given context.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity whose translation will be returned.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The translated entity.
    */
   protected function getTranslationFromContext(EntityInterface $entity): EntityInterface {
@@ @@
    * @param string $entity_type
    *   The entity type ID.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    */
   private function getStorage($entity_type): EntityStorageInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/cshs/src/Plugin/Field/FieldFormatter/CshsFormatterBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cshs\Plugin\Field\FieldFormatter;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
 use Drupal\cshs\IsApplicable;
@@ @@
   /**
    * Returns the list of terms labels.
    *
-   * @param \Drupal\taxonomy\TermInterface[] $list
+   * @param TermInterface[] $list
    *   The list of terms.
    * @param bool $linked
    *   The state of whether to create a linked label.
    *
-   * @return string[]|\Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return string[]|TranslatableMarkup[]
    *   The list of labels.
    */
   protected function getTermsLabels(array $list, bool $linked): array {
@@ @@
   /**
    * Returns an array of all parents for a given term.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The taxonomy term.
    * @param bool $start_from_root
    *   The state of whether to return the hierarchy starting from the root
    *   or vice versa.
    *
-   * @return \Drupal\taxonomy\TermInterface[]
+   * @return TermInterface[]
    *   The parent terms of a given term.
    */
   protected function getTermParents(TermInterface $term, bool $start_from_root = TRUE): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cshs/src/Plugin/Field/FieldFormatter/CshsFlexibleHierarchyFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cshs\Plugin\Field\FieldFormatter;

+use Drupal\Core\Utility\Token;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * An instance of the `token` service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cshs/src/Element/CshsElement.php:152

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the "taxonomy_term" entities storage.
    *
-   * @return \Drupal\taxonomy\TermStorageInterface
+   * @return TermStorageInterface
    *   The storage.
    */
   protected static function getTermStorage(): TermStorageInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cshs/src/CshsOptionsFromHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cshs;

+use Drupal\taxonomy\VocabularyInterface;
 use Drupal\Core\Entity\FieldableEntityStorageInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Returns the taxonomy vocabularies to work with.
    *
-   * @return \Drupal\taxonomy\VocabularyInterface[]
+   * @return VocabularyInterface[]
    *   The taxonomy vocabularies.
    */
   public function getVocabularies(): array {
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   The element's form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateSettingsForm(array &$element, FormStateInterface $form_state): void {
@@ @@
    * @param int|null $max_depth
    *   The number of levels of the tree to return.
    *
-   * @return \Drupal\cshs\Component\CshsOption[]
+   * @return CshsOption[]
    *   Widget options.
    */
   private function getOptions(int $parent = 0, int $max_depth = NULL): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

