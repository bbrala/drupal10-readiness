diff --git a/entity.module b/entity.module
index 1c54903..a3fb103 100644
--- a/entity.module
+++ b/entity.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\entity\QueryAccess\QueryAccessHandlerInterface;
 /**
  * @file
  * Provides expanded entity APIs.
@@ -40,7 +41,7 @@ function entity_entity_operation(EntityInterface $entity) {
 /**
  * Gets the entity types which use bundle plugins.
  *
- * @return \Drupal\Core\Entity\EntityTypeInterface[]
+ * @return EntityTypeInterface[]
  *   The entity types.
  */
 function entity_get_bundle_plugin_entity_types() {
@@ -94,7 +95,7 @@ function entity_entity_type_alter(array &$entity_types) {
 function entity_entity_bundle_info() {
   $bundles = [];
   foreach (entity_get_bundle_plugin_entity_types() as $entity_type) {
-    /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+    /** @var BundlePluginHandler $bundle_handler */
     $bundle_handler = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'bundle_plugin');
     $bundles[$entity_type->id()] = $bundle_handler->getBundleInfo();
   }
@@ -106,7 +107,7 @@ function entity_entity_bundle_info() {
  */
 function entity_entity_field_storage_info(EntityTypeInterface $entity_type) {
   if ($entity_type->hasHandlerClass('bundle_plugin')) {
-    /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+    /** @var BundlePluginHandler $bundle_handler */
     $bundle_handler = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'bundle_plugin');
     return $bundle_handler->getFieldStorageDefinitions();
   }
@@ -117,7 +118,7 @@ function entity_entity_field_storage_info(EntityTypeInterface $entity_type) {
  */
 function entity_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle) {
   if ($entity_type->hasHandlerClass('bundle_plugin')) {
-    /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+    /** @var BundlePluginHandler $bundle_handler */
     $bundle_handler = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'bundle_plugin');
     return $bundle_handler->getFieldDefinitions($bundle);
   }
@@ -178,7 +179,7 @@ function entity_jsonapi_entity_filter_access(EntityTypeInterface $entity_type, A
   if (!$entity_type->hasHandlerClass('query_access')) {
     return [];
   }
-  /** @var \Drupal\entity\QueryAccess\QueryAccessHandlerInterface $query_access */
+  /** @var QueryAccessHandlerInterface $query_access */
   $query_access = \Drupal::entityTypeManager()->getHandler($entity_type->id(), 'query_access');
   $conditions = $query_access->getConditions('view', $account);
   if ($conditions->isAlwaysFalse()) {
diff --git a/entity.views.inc b/entity.views.inc
index 0ff16c5..ad53217 100644
--- a/entity.views.inc
+++ b/entity.views.inc
@@ -14,7 +14,7 @@ function entity_views_data() {
 
   $data = [];
   foreach ($entity_types as $entity_type) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     if ($entity_type->isRevisionable()) {
       $entity_type_id = $entity_type->id();
       $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
diff --git a/src/Access/EntityRevisionRouteAccessChecker.php b/src/Access/EntityRevisionRouteAccessChecker.php
index 0a7264e..d4d8894 100644
--- a/src/Access/EntityRevisionRouteAccessChecker.php
+++ b/src/Access/EntityRevisionRouteAccessChecker.php
@@ -17,7 +17,7 @@ use Symfony\Component\Routing\Route;
 class EntityRevisionRouteAccessChecker implements AccessInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -31,16 +31,16 @@ class EntityRevisionRouteAccessChecker implements AccessInterface {
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Creates a new EntityRevisionRouteAccessChecker instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The currently active route match object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match) {
@@ -72,9 +72,9 @@ class EntityRevisionRouteAccessChecker implements AccessInterface {
   /**
    * Performs access checks.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'view label', 'update' or
@@ -88,7 +88,7 @@ class EntityRevisionRouteAccessChecker implements AccessInterface {
     $entity_type_id = $entity->getEntityTypeId();
     $entity_access = $this->entityTypeManager->getAccessControlHandler($entity_type_id);
 
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+    /** @var EntityStorageInterface $entity_storage */
     $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);
 
     $map = [
@@ -143,9 +143,9 @@ class EntityRevisionRouteAccessChecker implements AccessInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
    *
    * @return int
diff --git a/src/BulkFormEntityListBuilder.php b/src/BulkFormEntityListBuilder.php
index c94982a..e996025 100644
--- a/src/BulkFormEntityListBuilder.php
+++ b/src/BulkFormEntityListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\system\Entity\Action;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -26,7 +28,7 @@ class BulkFormEntityListBuilder extends EntityListBuilder implements FormInterfa
   /**
    * The entities being listed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];
 
@@ -36,34 +38,34 @@ class BulkFormEntityListBuilder extends EntityListBuilder implements FormInterfa
    * @todo Change the typehint to ActionConfigEntityInterface when
    *   https://www.drupal.org/project/drupal/issues/3017214 is in.
    *
-   * @var \Drupal\system\Entity\Action[]
+   * @var Action[]
    */
   protected $actions;
 
   /**
    * The action storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $actionStorage;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Constructs a new BulkFormEntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $action_storage
+   * @param EntityStorageInterface $action_storage
    *   The action storage.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $entity_storage, EntityStorageInterface $action_storage, FormBuilderInterface $form_builder) {
diff --git a/src/BundleEntityDuplicator.php b/src/BundleEntityDuplicator.php
index 5ade94c..9a206f0 100644
--- a/src/BundleEntityDuplicator.php
+++ b/src/BundleEntityDuplicator.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity;
 
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
@@ -10,14 +13,14 @@ class BundleEntityDuplicator implements BundleEntityDuplicatorInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new BundleEntityDuplicator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -64,7 +67,7 @@ class BundleEntityDuplicator implements BundleEntityDuplicatorInterface {
     $id_prefix = $bundle_of . '.' . $bundle_entity->id() . '.';
     $fields = $this->loadEntities('field_config', $id_prefix);
     foreach ($fields as $field) {
-      /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+      /** @var FieldConfigInterface $field */
       $duplicate_field = $field->createDuplicate();
       $duplicate_field->set('id', $bundle_of . '.' . $target_bundle_id . '.' . $field->getName());
       $duplicate_field->set('bundle', $target_bundle_id);
@@ -89,14 +92,14 @@ class BundleEntityDuplicator implements BundleEntityDuplicatorInterface {
     $form_displays = $this->loadEntities('entity_form_display', $id_prefix);
     $view_displays = $this->loadEntities('entity_view_display', $id_prefix);
     foreach ($form_displays as $form_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $duplicate_form_display = $form_display->createDuplicate();
       $duplicate_form_display->set('id', $bundle_of . '.' . $target_bundle_id . '.' . $form_display->getMode());
       $duplicate_form_display->set('bundle', $target_bundle_id);
       $duplicate_form_display->save();
     }
     foreach ($view_displays as $view_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+      /** @var EntityViewDisplayInterface $view_display */
       $duplicate_view_display = $view_display->createDuplicate();
       $duplicate_view_display->set('id', $bundle_of . '.' . $target_bundle_id . '.' . $view_display->getMode());
       $duplicate_view_display->set('bundle', $target_bundle_id);
@@ -112,7 +115,7 @@ class BundleEntityDuplicator implements BundleEntityDuplicatorInterface {
    * @param string $id_prefix
    *   The ID prefix.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   The loaded config entities.
    */
   protected function loadEntities($entity_type_id, $id_prefix) {
diff --git a/src/BundleEntityDuplicatorInterface.php b/src/BundleEntityDuplicatorInterface.php
index 836884f..10b99f3 100644
--- a/src/BundleEntityDuplicatorInterface.php
+++ b/src/BundleEntityDuplicatorInterface.php
@@ -12,13 +12,13 @@ interface BundleEntityDuplicatorInterface {
   /**
    * Duplicates the bundle entity, its fields and displays.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity
+   * @param ConfigEntityInterface $bundle_entity
    *   The bundle entity.
    * @param array $values
    *   An array of values to set, keyed by property name. Needs to at least
    *   contain a new ID.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The new bundle entity, after it has been saved.
    *
    * @throws \InvalidArgumentException
@@ -30,7 +30,7 @@ interface BundleEntityDuplicatorInterface {
   /**
    * Duplicates the bundle entity's fields.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity
+   * @param ConfigEntityInterface $bundle_entity
    *   The bundle entity.
    * @param string $target_bundle_id
    *   The target bundle ID.
@@ -43,7 +43,7 @@ interface BundleEntityDuplicatorInterface {
   /**
    * Duplicates the bundle entity's view/form displays.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity
+   * @param ConfigEntityInterface $bundle_entity
    *   The bundle entity.
    * @param string $target_bundle_id
    *   The target bundle ID.
diff --git a/src/BundlePlugin/BundlePluginHandler.php b/src/BundlePlugin/BundlePluginHandler.php
index bd0ee7c..3583da3 100644
--- a/src/BundlePlugin/BundlePluginHandler.php
+++ b/src/BundlePlugin/BundlePluginHandler.php
@@ -11,23 +11,23 @@ class BundlePluginHandler implements BundlePluginHandlerInterface {
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The bundle plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * Constructs a new BundlePluginHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The bundle plugin manager.
    */
   public function __construct(EntityTypeInterface $entity_type, PluginManagerInterface $plugin_manager) {
diff --git a/src/BundlePlugin/BundlePluginHandlerInterface.php b/src/BundlePlugin/BundlePluginHandlerInterface.php
index 5702fb5..7523613 100644
--- a/src/BundlePlugin/BundlePluginHandlerInterface.php
+++ b/src/BundlePlugin/BundlePluginHandlerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\BundlePlugin;
 
+use Drupal\entity\BundleFieldDefinition;
 use Drupal\Core\Entity\EntityHandlerInterface;
 
 /**
@@ -29,7 +30,7 @@ interface BundlePluginHandlerInterface extends EntityHandlerInterface {
    * @param string $bundle
    *   The bundle name.
    *
-   * @return \Drupal\entity\BundleFieldDefinition[]
+   * @return BundleFieldDefinition[]
    *   An array of bundle field definitions, keyed by field name.
    */
   public function getFieldDefinitions($bundle);
diff --git a/src/BundlePlugin/BundlePluginInstaller.php b/src/BundlePlugin/BundlePluginInstaller.php
index 1a08b01..fc041c2 100644
--- a/src/BundlePlugin/BundlePluginInstaller.php
+++ b/src/BundlePlugin/BundlePluginInstaller.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\BundlePlugin;
 
+use Drupal\entity\BundleFieldDefinition;
 use Drupal\Core\Entity\EntityBundleListenerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -13,41 +14,41 @@ class BundlePluginInstaller implements BundlePluginInstallerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity bundle listener.
    *
-   * @var \Drupal\Core\Entity\EntityBundleListenerInterface
+   * @var EntityBundleListenerInterface
    */
   protected $entityBundleListener;
 
   /**
    * The field storage definition listener.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface
+   * @var FieldStorageDefinitionListenerInterface
    */
   protected $fieldStorageDefinitionListener;
 
   /**
    * The field definition listener.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionListenerInterface
+   * @var FieldDefinitionListenerInterface
    */
   protected $fieldDefinitionListener;
 
   /**
    * Constructs a new BundlePluginInstaller object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityBundleListenerInterface $entity_bundle_listener
+   * @param EntityBundleListenerInterface $entity_bundle_listener
    *   The entity bundle listener.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener
+   * @param FieldStorageDefinitionListenerInterface $field_storage_definition_listener
    *   The field storage definition listener.
-   * @param \Drupal\Core\Field\FieldDefinitionListenerInterface $field_definition_listener
+   * @param FieldDefinitionListenerInterface $field_definition_listener
    *   The field definition listener.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityBundleListenerInterface $entity_bundle_listener, FieldStorageDefinitionListenerInterface $field_storage_definition_listener, FieldDefinitionListenerInterface $field_definition_listener) {
@@ -89,7 +90,7 @@ class BundlePluginInstaller implements BundlePluginInstallerInterface {
      * This way we can allow a module to re-use the same field within multiple
      * bundles, allowing e.g to subclass a bundle plugin.
      *
-     * @var \Drupal\entity\BundleFieldDefinition[] $field_storage_definitions
+     * @var BundleFieldDefinition[] $field_storage_definitions
      */
     $field_storage_definitions = [];
 
diff --git a/src/BundlePlugin/BundlePluginInstallerInterface.php b/src/BundlePlugin/BundlePluginInstallerInterface.php
index afeacee..96a09b4 100644
--- a/src/BundlePlugin/BundlePluginInstallerInterface.php
+++ b/src/BundlePlugin/BundlePluginInstallerInterface.php
@@ -14,7 +14,7 @@ interface BundlePluginInstallerInterface {
   /**
    * Installs the bundle plugins provided by the specified modules.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param array $modules
    *   The modules.
@@ -24,7 +24,7 @@ interface BundlePluginInstallerInterface {
   /**
    * Uninstalls the bundle plugins provided by the specified modules.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param array $modules
    *   The modules.
diff --git a/src/BundlePlugin/BundlePluginInterface.php b/src/BundlePlugin/BundlePluginInterface.php
index b79e65f..2a062d9 100644
--- a/src/BundlePlugin/BundlePluginInterface.php
+++ b/src/BundlePlugin/BundlePluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\BundlePlugin;
 
+use Drupal\entity\BundleFieldDefinition;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -16,7 +17,7 @@ interface BundlePluginInterface extends PluginInspectionInterface {
    * Field names must be unique across all bundles.
    * It is recommended to prefix them with the bundle name (plugin ID).
    *
-   * @return \Drupal\entity\BundleFieldDefinition[]
+   * @return BundleFieldDefinition[]
    *   An array of bundle field definitions, keyed by field name.
    */
   public function buildFieldDefinitions();
diff --git a/src/BundlePlugin/BundlePluginUninstallValidator.php b/src/BundlePlugin/BundlePluginUninstallValidator.php
index 0ab011a..d66d58c 100644
--- a/src/BundlePlugin/BundlePluginUninstallValidator.php
+++ b/src/BundlePlugin/BundlePluginUninstallValidator.php
@@ -17,16 +17,16 @@ class BundlePluginUninstallValidator implements ModuleUninstallValidatorInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
@@ -41,7 +41,7 @@ class BundlePluginUninstallValidator implements ModuleUninstallValidatorInterfac
     $reasons = [];
 
     foreach (entity_get_bundle_plugin_entity_types() as $entity_type) {
-      /** @var \Drupal\entity\BundlePlugin\BundlePluginHandler $bundle_handler */
+      /** @var BundlePluginHandler $bundle_handler */
       $bundle_handler = $this->entityTypeManager->getHandler($entity_type->id(), 'bundle_plugin');
       $bundles = $bundle_handler->getBundleInfo();
 
diff --git a/src/Controller/EntityDuplicateController.php b/src/Controller/EntityDuplicateController.php
index ca0edc6..1657064 100644
--- a/src/Controller/EntityDuplicateController.php
+++ b/src/Controller/EntityDuplicateController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\Controller;
 
+use Drupal\entity\Form\EntityDuplicateFormInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,34 +20,34 @@ class EntityDuplicateController implements ContainerInjectionInterface {
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Constructs a new EntityDuplicateController object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, FormBuilderInterface $form_builder, TranslationInterface $string_translation) {
@@ -71,7 +72,7 @@ class EntityDuplicateController implements ContainerInjectionInterface {
   /**
    * Builds the duplicate form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return array
@@ -81,7 +82,7 @@ class EntityDuplicateController implements ContainerInjectionInterface {
     $entity_type_id = $route_match->getRouteObject()->getDefault('entity_type_id');
     $source_entity = $route_match->getParameter($entity_type_id);
     $entity = $source_entity->createDuplicate();
-    /** @var \Drupal\entity\Form\EntityDuplicateFormInterface $form_object */
+    /** @var EntityDuplicateFormInterface $form_object */
     $form_object = $this->entityTypeManager->getFormObject($entity_type_id, 'duplicate');
     $form_object->setEntity($entity);
     $form_object->setSourceEntity($source_entity);
@@ -93,7 +94,7 @@ class EntityDuplicateController implements ContainerInjectionInterface {
   /**
    * Provides the duplicate form title.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return string
diff --git a/src/Controller/RevisionControllerTrait.php b/src/Controller/RevisionControllerTrait.php
index 1c21d20..053f904 100644
--- a/src/Controller/RevisionControllerTrait.php
+++ b/src/Controller/RevisionControllerTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -14,21 +17,21 @@ trait RevisionControllerTrait {
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   abstract protected function entityTypeManager();
 
   /**
    * Returns the langauge manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    */
   abstract public function languageManager();
 
   /**
    * Determines if the user has permission to revert revisions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check revert access for.
    *
    * @return bool
@@ -39,7 +42,7 @@ trait RevisionControllerTrait {
   /**
    * Determines if the user has permission to delete revisions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check delete revision access for.
    *
    * @return bool
@@ -50,7 +53,7 @@ trait RevisionControllerTrait {
   /**
    * Builds a link to revert an entity revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity_revision
+   * @param EntityInterface $entity_revision
    *   The entity to build a revert revision link for.
    *
    * @return array
@@ -61,7 +64,7 @@ trait RevisionControllerTrait {
   /**
    * Builds a link to delete an entity revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity_revision
+   * @param EntityInterface $entity_revision
    *   The entity to build a delete revision link for.
    *
    * @return array
@@ -75,7 +78,7 @@ trait RevisionControllerTrait {
    * E.g. Node describes its revisions using {date} by {username}. For the
    *   non-current revision, it also provides a link to view that revision.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $revision
+   * @param ContentEntityInterface $revision
    *   The entity revision.
    * @param bool $is_current
    *   TRUE if the revision is the current revision.
@@ -88,7 +91,7 @@ trait RevisionControllerTrait {
   /**
    * Loads all revision IDs of an entity sorted by revision ID descending.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return mixed[]
@@ -107,7 +110,7 @@ trait RevisionControllerTrait {
   /**
    * Generates an overview table of older revisions of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   An entity object.
    *
    * @return array
@@ -117,7 +120,7 @@ trait RevisionControllerTrait {
     $langcode = $this->languageManager()
       ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
       ->getId();
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $entity_storage */
+    /** @var ContentEntityStorageInterface $entity_storage */
     $entity_storage = $this->entityTypeManager()->getStorage($entity->getEntityTypeId());
     $revision_ids = $this->revisionIds($entity);
     $entity_revisions = $entity_storage->loadMultipleRevisions($revision_ids);
@@ -127,7 +130,7 @@ trait RevisionControllerTrait {
     $rows = [];
     foreach ($entity_revisions as $revision) {
       $row = [];
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $revision */
+      /** @var ContentEntityInterface $revision */
       if (!$translatable || ($revision->hasTranslation($langcode) && $revision->getTranslation($langcode)->isRevisionTranslationAffected())) {
         $row[] = $this->getRevisionDescription($revision, $revision->isDefaultRevision());
 
@@ -172,7 +175,7 @@ trait RevisionControllerTrait {
   /**
    * Get the links of the operations for an entity revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity_revision
+   * @param EntityInterface $entity_revision
    *   The entity to build the revision links for.
    *
    * @return array
diff --git a/src/Controller/RevisionOverviewController.php b/src/Controller/RevisionOverviewController.php
index c80dfcd..5dfe0f5 100644
--- a/src/Controller/RevisionOverviewController.php
+++ b/src/Controller/RevisionOverviewController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\Controller;
 
+use Drupal\user\EntityOwnerInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ -26,21 +27,21 @@ class RevisionOverviewController extends ControllerBase {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Creates a new RevisionOverviewController instance.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer) {
@@ -89,7 +90,7 @@ class RevisionOverviewController extends ControllerBase {
   /**
    * Generates an overview table of older revisions of an entity.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return array
@@ -103,7 +104,7 @@ class RevisionOverviewController extends ControllerBase {
    * {@inheritdoc}
    */
   protected function getRevisionDescription(ContentEntityInterface $revision, $is_default = FALSE) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\user\EntityOwnerInterface|\Drupal\Core\Entity\RevisionLogInterface $revision */
+    /** @var ContentEntityInterface|EntityOwnerInterface|RevisionLogInterface $revision */
     if ($revision instanceof RevisionLogInterface) {
       // Use revision link to link to revisions that are not active.
       $date = $this->dateFormatter->format($revision->getRevisionCreationTime(), 'short');
diff --git a/src/EntityAccessControlHandler.php b/src/EntityAccessControlHandler.php
index 01f8fd6..0bb774f 100644
--- a/src/EntityAccessControlHandler.php
+++ b/src/EntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity;
 
+use Drupal\user\EntityOwnerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -30,7 +31,7 @@ class EntityAccessControlHandler extends EntityAccessControlHandlerBase {
    * {@inheritdoc}
    */
   protected function checkEntityOwnerPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\user\EntityOwnerInterface $entity */
+    /** @var EntityOwnerInterface $entity */
     if ($operation === 'view') {
       if ($entity instanceof EntityPublishedInterface && !$entity->isPublished()) {
         if ($account->id() != $entity->getOwnerId()) {
diff --git a/src/EntityAccessControlHandlerBase.php b/src/EntityAccessControlHandlerBase.php
index 3d007ac..fdaf4b7 100644
--- a/src/EntityAccessControlHandlerBase.php
+++ b/src/EntityAccessControlHandlerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler as CoreEntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,7 +19,7 @@ class EntityAccessControlHandlerBase extends CoreEntityAccessControlHandler {
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     $account = $this->prepareUser($account);
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = parent::checkAccess($entity, $operation, $account);
 
     if ($result->isNeutral()) {
@@ -37,15 +38,15 @@ class EntityAccessControlHandlerBase extends CoreEntityAccessControlHandler {
   /**
    * Checks the entity operation and bundle permissions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'view label', 'update',
    *   'duplicate' or 'delete'.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkEntityPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
@@ -60,19 +61,19 @@ class EntityAccessControlHandlerBase extends CoreEntityAccessControlHandler {
   /**
    * Checks the entity operation and bundle permissions, with owners.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'view label', 'update',
    *   'duplicate' or 'delete'.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkEntityOwnerPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\user\EntityOwnerInterface $entity */
+    /** @var EntityOwnerInterface $entity */
     // The "any" permission grants access regardless of the entity owner.
     $any_result = AccessResult::allowedIfHasPermissions($account, [
       "$operation any {$entity->getEntityTypeId()}",
diff --git a/src/EntityPermissionProvider.php b/src/EntityPermissionProvider.php
index 2803b1e..2ca8284 100644
--- a/src/EntityPermissionProvider.php
+++ b/src/EntityPermissionProvider.php
@@ -43,7 +43,7 @@ class EntityPermissionProvider extends EntityPermissionProviderBase {
   /**
    * Builds permissions for the entity_type granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ -66,7 +66,7 @@ class EntityPermissionProvider extends EntityPermissionProviderBase {
   /**
    * Builds permissions for the bundle granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
diff --git a/src/EntityPermissionProviderBase.php b/src/EntityPermissionProviderBase.php
index 4ccb9ca..693daf4 100644
--- a/src/EntityPermissionProviderBase.php
+++ b/src/EntityPermissionProviderBase.php
@@ -20,14 +20,14 @@ class EntityPermissionProviderBase implements EntityPermissionProviderInterface,
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Constructs a new EntityPermissionProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -87,7 +87,7 @@ class EntityPermissionProviderBase implements EntityPermissionProviderInterface,
    *
    * @param array $permissions
    *   The array of permissions.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ -106,7 +106,7 @@ class EntityPermissionProviderBase implements EntityPermissionProviderInterface,
   /**
    * Builds permissions for the entity_type granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ -185,7 +185,7 @@ class EntityPermissionProviderBase implements EntityPermissionProviderInterface,
   /**
    * Builds permissions for the bundle granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
diff --git a/src/EntityPermissionProviderInterface.php b/src/EntityPermissionProviderInterface.php
index 50f3cca..28683e4 100644
--- a/src/EntityPermissionProviderInterface.php
+++ b/src/EntityPermissionProviderInterface.php
@@ -12,7 +12,7 @@ interface EntityPermissionProviderInterface {
   /**
    * Builds permissions for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
diff --git a/src/EntityPermissions.php b/src/EntityPermissions.php
index c2c13a5..53e28e3 100644
--- a/src/EntityPermissions.php
+++ b/src/EntityPermissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -17,14 +18,14 @@ class EntityPermissions implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EntityPermissions object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -48,7 +49,7 @@ class EntityPermissions implements ContainerInjectionInterface {
    */
   public function buildPermissions() {
     $permissions = [];
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type) {
       if ($entity_type->hasHandlerClass('permission_provider')) {
         $permission_provider_class = $entity_type->getHandlerClass('permission_provider');
diff --git a/src/EntityViewsData.php b/src/EntityViewsData.php
index 3f4f0a4..2c43e96 100644
--- a/src/EntityViewsData.php
+++ b/src/EntityViewsData.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity;
 
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\Sql\TableMappingInterface;
@@ -34,7 +38,7 @@ class EntityViewsData extends CoreEntityViewsData {
   /**
    * The table mapping.
    *
-   * @var \Drupal\Core\Entity\Sql\DefaultTableMapping
+   * @var DefaultTableMapping
    */
   protected $tableMapping;
 
@@ -85,7 +89,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @param array $data
    *   The views data.
-   * @param \Drupal\entity\BundleFieldDefinition $bundle_field
+   * @param BundleFieldDefinition $bundle_field
    *   The bundle field.
    */
   protected function addBundleFieldData(array &$data, BundleFieldDefinition $bundle_field) {
@@ -243,7 +247,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ -265,7 +269,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ -283,7 +287,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ -304,7 +308,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @param string $table
    *   The table name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ -323,7 +327,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @param array $data
    *   The views data.
-   * @param \Drupal\Core\Field\BaseFieldDefinition[] $fields
+   * @param BaseFieldDefinition[] $fields
    *   The entity reference fields.
    */
   protected function addReverseRelationships(array &$data, array $fields) {
@@ -398,7 +402,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @todo Remove when support for Drupal 8.7 is dropped.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @return EntityFieldManagerInterface
    *   The entity field manager.
    */
   protected function getEntityFieldManager() {
@@ -413,7 +417,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @todo Remove when support for Drupal 8.7 is dropped.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    *   The entity type bundle info.
    */
   protected function getEntityTypeBundleInfo() {
@@ -428,7 +432,7 @@ class EntityViewsData extends CoreEntityViewsData {
    *
    * @todo Remove when support for Drupal 8.7 is dropped.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   protected function getEntityTypeManager() {
diff --git a/src/Event/EntityDuplicateEvent.php b/src/Event/EntityDuplicateEvent.php
index 4d75fbd..1617a1f 100644
--- a/src/Event/EntityDuplicateEvent.php
+++ b/src/Event/EntityDuplicateEvent.php
@@ -15,23 +15,23 @@ class EntityDuplicateEvent extends Event {
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;
 
   /**
    * The source entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $sourceEntity;
 
   /**
    * Constructs a new EntityDuplicateEvent object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity.
    */
   public function __construct(EntityInterface $entity, EntityInterface $source_entity) {
@@ -42,7 +42,7 @@ class EntityDuplicateEvent extends Event {
   /**
    * Gets the entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -52,7 +52,7 @@ class EntityDuplicateEvent extends Event {
   /**
    * Gets the source entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The source entity.
    */
   public function getSourceEntity() {
diff --git a/src/EventSubscriber/EntityDuplicateSubscriber.php b/src/EventSubscriber/EntityDuplicateSubscriber.php
index 65fb67f..e1dec3d 100644
--- a/src/EventSubscriber/EntityDuplicateSubscriber.php
+++ b/src/EventSubscriber/EntityDuplicateSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\EventSubscriber;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\entity\BundleEntityDuplicatorInterface;
 use Drupal\entity\Event\EntityDuplicateEvent;
 use Drupal\entity\Event\EntityEvents;
@@ -12,14 +13,14 @@ class EntityDuplicateSubscriber implements EventSubscriberInterface {
   /**
    * The bundle entity duplicator.
    *
-   * @var \Drupal\entity\BundleEntityDuplicatorInterface
+   * @var BundleEntityDuplicatorInterface
    */
   protected $bundleEntityDuplicator;
 
   /**
    * Constructs a new EntityDuplicateSubscriber object.
    *
-   * @param \Drupal\entity\BundleEntityDuplicatorInterface $bundle_entity_duplicator
+   * @param BundleEntityDuplicatorInterface $bundle_entity_duplicator
    *   The bundle entity duplicator.
    */
   public function __construct(BundleEntityDuplicatorInterface $bundle_entity_duplicator) {
@@ -39,13 +40,13 @@ class EntityDuplicateSubscriber implements EventSubscriberInterface {
   /**
    * Duplicates bundle fields and displays.
    *
-   * @param \Drupal\entity\Event\EntityDuplicateEvent $event
+   * @param EntityDuplicateEvent $event
    *   The entity duplicate event.
    */
   public function onEntityDuplicate(EntityDuplicateEvent $event) {
     $entity = $event->getEntity();
     if ($entity->getEntityType()->getBundleOf()) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $source_entity */
+      /** @var ConfigEntityInterface $source_entity */
       $source_entity = $event->getSourceEntity();
       $this->bundleEntityDuplicator->duplicateFields($source_entity, $entity->id());
       $this->bundleEntityDuplicator->duplicateDisplays($source_entity, $entity->id());
diff --git a/src/Form/EntityDuplicateFormInterface.php b/src/Form/EntityDuplicateFormInterface.php
index 94a5803..6914ce6 100644
--- a/src/Form/EntityDuplicateFormInterface.php
+++ b/src/Form/EntityDuplicateFormInterface.php
@@ -15,7 +15,7 @@ interface EntityDuplicateFormInterface extends EntityFormInterface {
    *
    * This is the entity that was duplicated to populate the form entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The source entity.
    */
   public function getSourceEntity();
@@ -23,7 +23,7 @@ interface EntityDuplicateFormInterface extends EntityFormInterface {
   /**
    * Sets the source entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity.
    *
    * @return $this
diff --git a/src/Form/EntityDuplicateFormTrait.php b/src/Form/EntityDuplicateFormTrait.php
index 3596b1a..9d1287a 100644
--- a/src/Form/EntityDuplicateFormTrait.php
+++ b/src/Form/EntityDuplicateFormTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\Form;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity\Event\EntityDuplicateEvent;
 use Drupal\entity\Event\EntityEvents;
@@ -17,7 +18,7 @@ trait EntityDuplicateFormTrait {
   /**
    * The source entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $sourceEntity;
 
@@ -39,7 +40,7 @@ trait EntityDuplicateFormTrait {
   /**
    * Invokes entity duplicate hooks after the entity has been duplicated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The saved entity.
    * @param string $operation
    *   The form operation.
@@ -49,7 +50,7 @@ trait EntityDuplicateFormTrait {
       // An event is used instead of a hook to prevent a conflict with core
       // once hook_entity_duplicate() is introduced there.
       $event = new EntityDuplicateEvent($entity, $this->sourceEntity);
-      /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+      /** @var EventDispatcherInterface $event_dispatcher */
       $event_dispatcher = \Drupal::service('event_dispatcher');
       $event_dispatcher->dispatch($event, EntityEvents::ENTITY_DUPLICATE);
     }
diff --git a/src/Form/RevisionRevertForm.php b/src/Form/RevisionRevertForm.php
index f1e5707..65a776b 100644
--- a/src/Form/RevisionRevertForm.php
+++ b/src/Form/RevisionRevertForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\Form;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\RevisionableInterface;
@@ -16,30 +17,30 @@ class RevisionRevertForm extends ConfirmFormBase {
   /**
    * The entity revision.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface|\Drupal\Core\Entity\RevisionLogInterface
+   * @var EntityInterface|RevisionableInterface|RevisionLogInterface
    */
   protected $revision;
 
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The entity bundle information.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInformation;
 
   /**
    * Creates a new RevisionRevertForm instance.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_information
+   * @param EntityTypeBundleInfoInterface $bundle_information
    *   The bundle information.
    */
   public function __construct(DateFormatterInterface $date_formatter, EntityTypeBundleInfoInterface $bundle_information) {
@@ -144,10 +145,10 @@ class RevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $revision
+   * @param RevisionableInterface $revision
    *   The revision to be reverted.
    *
-   * @return \Drupal\Core\Entity\RevisionableInterface
+   * @return RevisionableInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevision(RevisionableInterface $revision) {
@@ -160,13 +161,13 @@ class RevisionRevertForm extends ConfirmFormBase {
   /**
    * Returns a bundle label.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $revision
+   * @param RevisionableInterface $revision
    *   The entity revision.
    *
    * @return string
    */
   protected function getBundleLabel(RevisionableInterface $revision) {
-    /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $revision */
+    /** @var EntityInterface|RevisionableInterface $revision */
     $bundle_info = $this->bundleInformation->getBundleInfo($revision->getEntityTypeId());
     return $bundle_info[$revision->bundle()]['label'];
   }
diff --git a/src/Form/RevisionableContentEntityForm.php b/src/Form/RevisionableContentEntityForm.php
index 6e7d8c7..61b5337 100644
--- a/src/Form/RevisionableContentEntityForm.php
+++ b/src/Form/RevisionableContentEntityForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\RevisionLogInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\RevisionableEntityBundleInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,7 +21,7 @@ class RevisionableContentEntityForm extends ContentEntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface|\Drupal\Core\Entity\RevisionLogInterface
+   * @var ContentEntityInterface|RevisionLogInterface
    */
   protected $entity;
 
@@ -44,7 +47,7 @@ class RevisionableContentEntityForm extends ContentEntityForm {
   /**
    * Gets the bundle entity of the current entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The bundle entity, or NULL if there is none.
    */
   protected function getBundleEntity() {
@@ -136,11 +139,11 @@ class RevisionableContentEntityForm extends ContentEntityForm {
 
     if ($insert) {
       $logger->notice('@type: added %info.', $context);
-      drupal_set_message($this->t('@type %info has been created.', $t_args));
+      $this->messenger()->addStatus($this->t('@type %info has been created.', $t_args));
     }
     else {
       $logger->notice('@type: updated %info.', $context);
-      drupal_set_message($this->t('@type %info has been updated.', $t_args));
+      $this->messenger()->addStatus($this->t('@type %info has been updated.', $t_args));
     }
 
     if ($this->entity->id()) {
@@ -157,7 +160,7 @@ class RevisionableContentEntityForm extends ContentEntityForm {
     else {
       // In the unlikely case something went wrong on save, the entity will be
       // rebuilt and entity form redisplayed.
-      drupal_set_message($this->t('The entity could not be saved.'), 'error');
+      $this->messenger()->addError($this->t('The entity could not be saved.'));
       $form_state->setRebuild();
     }
   }
diff --git a/src/Menu/DefaultEntityLocalTaskProvider.php b/src/Menu/DefaultEntityLocalTaskProvider.php
index e0dc0ae..6dccca4 100644
--- a/src/Menu/DefaultEntityLocalTaskProvider.php
+++ b/src/Menu/DefaultEntityLocalTaskProvider.php
@@ -18,9 +18,9 @@ class DefaultEntityLocalTaskProvider implements EntityLocalTaskProviderInterface
   /**
    * Constructs a DefaultEntityLocalTaskProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(EntityTypeInterface $entity_type, TranslationInterface $string_translation) {
diff --git a/src/Menu/EntityCollectionLocalActionProvider.php b/src/Menu/EntityCollectionLocalActionProvider.php
index 4acad31..9460ff1 100644
--- a/src/Menu/EntityCollectionLocalActionProvider.php
+++ b/src/Menu/EntityCollectionLocalActionProvider.php
@@ -18,9 +18,9 @@ class EntityCollectionLocalActionProvider implements EntityLocalActionProviderIn
   /**
    * Constructs a new EntityCollectionLocalActionProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(EntityTypeInterface $entity_type, TranslationInterface $string_translation) {
diff --git a/src/Menu/EntityLocalActionProviderInterface.php b/src/Menu/EntityLocalActionProviderInterface.php
index bba16c3..4929560 100644
--- a/src/Menu/EntityLocalActionProviderInterface.php
+++ b/src/Menu/EntityLocalActionProviderInterface.php
@@ -12,7 +12,7 @@ interface EntityLocalActionProviderInterface {
   /**
    * Builds local actions for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array[]
diff --git a/src/Menu/EntityLocalTaskProviderInterface.php b/src/Menu/EntityLocalTaskProviderInterface.php
index 6d6c1b2..56dbfa3 100644
--- a/src/Menu/EntityLocalTaskProviderInterface.php
+++ b/src/Menu/EntityLocalTaskProviderInterface.php
@@ -12,7 +12,7 @@ interface EntityLocalTaskProviderInterface {
   /**
    * Builds local tasks for the given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array[]
diff --git a/src/Plugin/Action/Derivative/DeleteActionDeriver.php b/src/Plugin/Action/Derivative/DeleteActionDeriver.php
index 02774ef..3790344 100644
--- a/src/Plugin/Action/Derivative/DeleteActionDeriver.php
+++ b/src/Plugin/Action/Derivative/DeleteActionDeriver.php
@@ -28,7 +28,7 @@ class DeleteActionDeriver extends DeriverBase implements ContainerDeriverInterfa
   /**
    * Constructs a new DeleteActionDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -67,7 +67,7 @@ class DeleteActionDeriver extends DeriverBase implements ContainerDeriverInterfa
    * The list consists of all content entity types with a delete-multiple-form
    * link template.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   The participating entity types, keyed by entity type id.
    */
   protected function getParticipatingEntityTypes() {
diff --git a/src/Plugin/Derivative/EntityActionsDeriver.php b/src/Plugin/Derivative/EntityActionsDeriver.php
index 568ad7e..aed1dc6 100644
--- a/src/Plugin/Derivative/EntityActionsDeriver.php
+++ b/src/Plugin/Derivative/EntityActionsDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\Plugin\Derivative;
 
+use Drupal\entity\Menu\EntityLocalActionProviderInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +16,14 @@ class EntityActionsDeriver extends DeriverBase implements ContainerDeriverInterf
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an entity local actions deriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -45,7 +46,7 @@ class EntityActionsDeriver extends DeriverBase implements ContainerDeriverInterf
         $handlers = $entity_type->getHandlerClasses();
         if (isset($handlers['local_action_provider'])) {
           foreach ($handlers['local_action_provider'] as $class) {
-            /** @var \Drupal\entity\Menu\EntityLocalActionProviderInterface $handler */
+            /** @var EntityLocalActionProviderInterface $handler */
             $handler = $this->entityTypeManager->createHandlerInstance($class, $entity_type);
             $this->derivatives += $handler->buildLocalActions($entity_type);
           }
diff --git a/src/Plugin/Derivative/EntityTasksDeriver.php b/src/Plugin/Derivative/EntityTasksDeriver.php
index 5d11235..1164b09 100644
--- a/src/Plugin/Derivative/EntityTasksDeriver.php
+++ b/src/Plugin/Derivative/EntityTasksDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\Plugin\Derivative;
 
+use Drupal\entity\Menu\EntityLocalTaskProviderInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +16,14 @@ class EntityTasksDeriver extends DeriverBase implements ContainerDeriverInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an entity local tasks deriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -45,7 +46,7 @@ class EntityTasksDeriver extends DeriverBase implements ContainerDeriverInterfac
         $handlers = $entity_type->getHandlerClasses();
         if (isset($handlers['local_task_provider'])) {
           foreach ($handlers['local_task_provider'] as $class) {
-            /** @var \Drupal\entity\Menu\EntityLocalTaskProviderInterface $handler */
+            /** @var EntityLocalTaskProviderInterface $handler */
             $handler = $this->entityTypeManager->createHandlerInstance($class, $entity_type);
             $this->derivatives += $handler->buildLocalTasks($entity_type);
           }
diff --git a/src/QueryAccess/ConditionGroup.php b/src/QueryAccess/ConditionGroup.php
index 4cbd504..bf2a0b1 100644
--- a/src/QueryAccess/ConditionGroup.php
+++ b/src/QueryAccess/ConditionGroup.php
@@ -47,7 +47,7 @@ final class ConditionGroup implements \Countable, RefinableCacheableDependencyIn
   /**
    * The conditions.
    *
-   * @var \Drupal\entity\QueryAccess\Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
+   * @var Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
    */
   protected $conditions = [];
 
@@ -81,7 +81,7 @@ final class ConditionGroup implements \Countable, RefinableCacheableDependencyIn
   /**
    * Gets all conditions and nested condition groups.
    *
-   * @return \Drupal\entity\QueryAccess\Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
+   * @return Condition[]|\Drupal\entity\QueryAccess\ConditionGroup[]
    *   The conditions, where each one is either a Condition or a nested
    *   ConditionGroup. Returned by reference, to allow callers to replace
    *   or remove conditions.
diff --git a/src/QueryAccess/EntityQueryAlter.php b/src/QueryAccess/EntityQueryAlter.php
index 2aee7bf..19af2a9 100644
--- a/src/QueryAccess/EntityQueryAlter.php
+++ b/src/QueryAccess/EntityQueryAlter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity\QueryAccess;
 
+use Drupal\Core\Database\Query\ConditionInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Database\Query\SelectInterface;
@@ -28,41 +29,41 @@ class EntityQueryAlter implements ContainerInjectionInterface {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a new EntityQueryAlter object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, RequestStack $request_stack) {
@@ -87,9 +88,9 @@ class EntityQueryAlter implements ContainerInjectionInterface {
   /**
    * Alters the select query for the given entity type.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The select query.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    */
   public function alter(SelectInterface $query, EntityTypeInterface $entity_type) {
@@ -102,7 +103,7 @@ class EntityQueryAlter implements ContainerInjectionInterface {
       return;
     }
 
-    /** @var \Drupal\entity\QueryAccess\QueryAccessHandlerInterface $query_access */
+    /** @var QueryAccessHandlerInterface $query_access */
     $query_access = $this->entityTypeManager->getHandler($entity_type_id, 'query_access');
     $conditions = $query_access->getConditions($query->getMetaData('op') ?: 'view');
     if ($conditions->isAlwaysFalse()) {
@@ -119,14 +120,14 @@ class EntityQueryAlter implements ContainerInjectionInterface {
   /**
    * Maps an entity type's access conditions to SQL conditions.
    *
-   * @param \Drupal\entity\QueryAccess\ConditionGroup $conditions
+   * @param ConditionGroup $conditions
    *   The access conditions.
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The SQL query.
    * @param bool $nested_inside_or
    *   Whether the access conditions are nested inside an OR condition.
    *
-   * @return \Drupal\Core\Database\Query\ConditionInterface
+   * @return ConditionInterface
    *   The SQL conditions.
    */
   protected function mapConditions(ConditionGroup $conditions, SelectInterface $query, $nested_inside_or = FALSE) {
@@ -167,7 +168,7 @@ class EntityQueryAlter implements ContainerInjectionInterface {
   /**
    * Applies the cacheablity metadata to the current request.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   The cacheability metadata.
    */
   protected function applyCacheability(CacheableMetadata $cacheable_metadata) {
@@ -184,7 +185,7 @@ class EntityQueryAlter implements ContainerInjectionInterface {
    *
    * An empty cacheable metadata object has no context, tags, and is permanent.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   The cacheable metadata.
    *
    * @return bool
diff --git a/src/QueryAccess/EventOnlyQueryAccessHandler.php b/src/QueryAccess/EventOnlyQueryAccessHandler.php
index 1f65745..658d29b 100644
--- a/src/QueryAccess/EventOnlyQueryAccessHandler.php
+++ b/src/QueryAccess/EventOnlyQueryAccessHandler.php
@@ -20,32 +20,32 @@ final class EventOnlyQueryAccessHandler implements EntityHandlerInterface, Query
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a new EventOnlyQueryAccessHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeInterface $entity_type, EventDispatcherInterface $event_dispatcher, AccountInterface $current_user) {
diff --git a/src/QueryAccess/QueryAccessEvent.php b/src/QueryAccess/QueryAccessEvent.php
index 70804a7..a70aff7 100644
--- a/src/QueryAccess/QueryAccessEvent.php
+++ b/src/QueryAccess/QueryAccessEvent.php
@@ -19,7 +19,7 @@ class QueryAccessEvent extends Event {
   /**
    * The conditions.
    *
-   * @var \Drupal\entity\QueryAccess\ConditionGroup
+   * @var ConditionGroup
    */
   protected $conditions;
 
@@ -33,7 +33,7 @@ class QueryAccessEvent extends Event {
   /**
    * The user for which to restrict access.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -47,11 +47,11 @@ class QueryAccessEvent extends Event {
   /**
    * Constructs a new QueryAccessEvent.
    *
-   * @param \Drupal\entity\QueryAccess\ConditionGroup $conditions
+   * @param ConditionGroup $conditions
    *   The conditions.
    * @param string $operation
    *   The operation. Usually one of "view", "update", "duplicate", or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    * @param string $entity_type_id
    *   The ID of entity type the query is for.
@@ -79,7 +79,7 @@ class QueryAccessEvent extends Event {
    * empty (count is 0), the user has full access, and the query doesn't
    * need to be restricted.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup
+   * @return ConditionGroup
    *   The conditions.
    */
   public function getConditions() {
@@ -99,7 +99,7 @@ class QueryAccessEvent extends Event {
   /**
    * Gets the user for which to restrict access.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The user.
    */
   public function getAccount() {
diff --git a/src/QueryAccess/QueryAccessHandlerBase.php b/src/QueryAccess/QueryAccessHandlerBase.php
index 8df9c47..1ae69f6 100644
--- a/src/QueryAccess/QueryAccessHandlerBase.php
+++ b/src/QueryAccess/QueryAccessHandlerBase.php
@@ -22,41 +22,41 @@ abstract class QueryAccessHandlerBase implements EntityHandlerInterface, QueryAc
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a new QueryAccessHandlerBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeBundleInfoInterface $bundle_info, EventDispatcherInterface $event_dispatcher, AccountInterface $current_user) {
@@ -100,10 +100,10 @@ abstract class QueryAccessHandlerBase implements EntityHandlerInterface, QueryAc
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup
+   * @return ConditionGroup
    *   The conditions.
    */
   public function buildConditions($operation, AccountInterface $account) {
@@ -187,10 +187,10 @@ abstract class QueryAccessHandlerBase implements EntityHandlerInterface, QueryAc
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup|null
+   * @return ConditionGroup|null
    *   The conditions, or NULL if the user doesn't have access to any entity.
    */
   protected function buildEntityOwnerConditions($operation, AccountInterface $account) {
@@ -245,10 +245,10 @@ abstract class QueryAccessHandlerBase implements EntityHandlerInterface, QueryAc
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup|null
+   * @return ConditionGroup|null
    *   The conditions, or NULL if the user doesn't have access to any entity.
    */
   protected function buildEntityConditions($operation, AccountInterface $account) {
diff --git a/src/QueryAccess/QueryAccessHandlerInterface.php b/src/QueryAccess/QueryAccessHandlerInterface.php
index 8fcb87a..bb3074d 100644
--- a/src/QueryAccess/QueryAccessHandlerInterface.php
+++ b/src/QueryAccess/QueryAccessHandlerInterface.php
@@ -30,11 +30,11 @@ interface QueryAccessHandlerInterface {
    * @param string $operation
    *   The access operation. Usually one of "view", "update", "duplicate",
    *   or "delete".
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to restrict access, or NULL
    *   to assume the current user. Defaults to NULL.
    *
-   * @return \Drupal\entity\QueryAccess\ConditionGroup
+   * @return ConditionGroup
    *   The conditions.
    */
   public function getConditions($operation, AccountInterface $account = NULL);
diff --git a/src/QueryAccess/ViewsQueryAlter.php b/src/QueryAccess/ViewsQueryAlter.php
index f089ccb..4af483b 100644
--- a/src/QueryAccess/ViewsQueryAlter.php
+++ b/src/QueryAccess/ViewsQueryAlter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity\QueryAccess;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Database\Query\ConditionInterface;
+use Drupal\Views\Plugin\views\join\JoinPluginBase;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -26,50 +29,50 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a new ViewsQueryAlter object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(Connection $connection, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, RequestStack $request_stack) {
@@ -96,9 +99,9 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
   /**
    * Alters the given views query.
    *
-   * @param \Drupal\views\Plugin\views\query\Sql $query
+   * @param Sql $query
    *   The views query.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    */
   public function alter(Sql $query, ViewExecutable $view) {
@@ -117,7 +120,7 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
       return;
     }
 
-    /** @var \Drupal\entity\QueryAccess\QueryAccessHandlerInterface $query_access */
+    /** @var QueryAccessHandlerInterface $query_access */
     $query_access = $this->entityTypeManager->getHandler($entity_type_id, 'query_access');
     $conditions = $query_access->getConditions('view');
     if ($conditions->isAlwaysFalse()) {
@@ -127,7 +130,7 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
       // Store the data table, in case mapConditions() needs to join it in.
       $base_table['data_table'] = $entity_type->getDataTable();
       $field_storage_definitions = $this->entityFieldManager->getFieldStorageDefinitions($entity_type_id);
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+      /** @var DefaultTableMapping $table_mapping */
       $table_mapping = $storage->getTableMapping();
       $sql_conditions = $this->mapConditions($conditions, $query, $base_table, $field_storage_definitions, $table_mapping);
       $query->addWhere(0, $sql_conditions);
@@ -139,18 +142,18 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
   /**
    * Maps an entity type's access conditions to views SQL conditions.
    *
-   * @param \Drupal\entity\QueryAccess\ConditionGroup $conditions
+   * @param ConditionGroup $conditions
    *   The access conditions.
-   * @param \Drupal\views\Plugin\views\query\Sql $query
+   * @param Sql $query
    *   The views query.
    * @param array $base_table
    *   The base table information.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions
+   * @param FieldStorageDefinitionInterface[] $field_storage_definitions
    *   The field storage definitions.
-   * @param \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping
+   * @param DefaultTableMapping $table_mapping
    *   The table mapping.
    *
-   * @return \Drupal\Core\Database\Query\ConditionInterface
+   * @return ConditionInterface
    *   The SQL conditions.
    */
   protected function mapConditions(ConditionGroup $conditions, Sql $query, array $base_table, array $field_storage_definitions, DefaultTableMapping $table_mapping) {
@@ -201,7 +204,7 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
               'left_table' => $base_table['alias'],
               'left_field' => 'id',
             ];
-            /** @var \Drupal\Views\Plugin\views\join\JoinPluginBase $join */
+            /** @var JoinPluginBase $join */
             $join = Views::pluginManager('join')->createInstance('standard', $configuration);
             $alias = $query->addRelationship($base_table['data_table'], $join, $data_table);
           }
@@ -235,7 +238,7 @@ class ViewsQueryAlter implements ContainerInjectionInterface {
   /**
    * Applies the cacheablity metadata to the current request.
    *
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   The cacheability metadata.
    */
   protected function applyCacheability(CacheableMetadata $cacheable_metadata) {
diff --git a/src/Routing/DefaultHtmlRouteProvider.php b/src/Routing/DefaultHtmlRouteProvider.php
index 29c67d4..f81d5db 100644
--- a/src/Routing/DefaultHtmlRouteProvider.php
+++ b/src/Routing/DefaultHtmlRouteProvider.php
@@ -42,10 +42,10 @@ class DefaultHtmlRouteProvider extends CoreDefaultHtmlRouteProvider {
   /**
    * Gets the duplicate-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDuplicateFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Routing/DeleteMultipleRouteProvider.php b/src/Routing/DeleteMultipleRouteProvider.php
index 7fb9548..6ff8b05 100644
--- a/src/Routing/DeleteMultipleRouteProvider.php
+++ b/src/Routing/DeleteMultipleRouteProvider.php
@@ -31,10 +31,10 @@ class DeleteMultipleRouteProvider implements EntityRouteProviderInterface {
   /**
    * Returns the delete multiple form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function deleteMultipleFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Routing/RevisionRouteProvider.php b/src/Routing/RevisionRouteProvider.php
index 8d55ae4..4aa47b0 100644
--- a/src/Routing/RevisionRouteProvider.php
+++ b/src/Routing/RevisionRouteProvider.php
@@ -35,10 +35,10 @@ class RevisionRouteProvider implements EntityRouteProviderInterface {
   /**
    * Gets the entity revision view route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionViewRoute(EntityTypeInterface $entity_type) {
@@ -67,10 +67,10 @@ class RevisionRouteProvider implements EntityRouteProviderInterface {
   /**
    * Gets the entity revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -99,10 +99,10 @@ class RevisionRouteProvider implements EntityRouteProviderInterface {
   /**
    * Gets the entity revision version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionHistoryRoute(EntityTypeInterface $entity_type) {
diff --git a/src/UncacheableEntityAccessControlHandler.php b/src/UncacheableEntityAccessControlHandler.php
index a53724b..8516135 100644
--- a/src/UncacheableEntityAccessControlHandler.php
+++ b/src/UncacheableEntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity;
 
+use Drupal\user\EntityOwnerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -32,7 +33,7 @@ class UncacheableEntityAccessControlHandler extends EntityAccessControlHandlerBa
    * {@inheritdoc}
    */
   protected function checkEntityOwnerPermissions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\user\EntityOwnerInterface $entity */
+    /** @var EntityOwnerInterface $entity */
     if ($operation === 'view' && $entity instanceof EntityPublishedInterface && !$entity->isPublished()) {
       if ($account->id() != $entity->getOwnerId()) {
         // There's no permission for viewing other user's unpublished entity.
diff --git a/src/UncacheableEntityPermissionProvider.php b/src/UncacheableEntityPermissionProvider.php
index 10c2f37..eef0190 100644
--- a/src/UncacheableEntityPermissionProvider.php
+++ b/src/UncacheableEntityPermissionProvider.php
@@ -45,7 +45,7 @@ class UncacheableEntityPermissionProvider extends EntityPermissionProviderBase {
   /**
    * Builds permissions for the entity_type granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
@@ -84,7 +84,7 @@ class UncacheableEntityPermissionProvider extends EntityPermissionProviderBase {
   /**
    * Builds permissions for the bundle granularity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return array
diff --git a/tests/modules/entity_module_bundle_plugin_test/src/Annotation/BundlePluginTest.php b/tests/modules/entity_module_bundle_plugin_test/src/Annotation/BundlePluginTest.php
index f09f70e..11756fb 100644
--- a/tests/modules/entity_module_bundle_plugin_test/src/Annotation/BundlePluginTest.php
+++ b/tests/modules/entity_module_bundle_plugin_test/src/Annotation/BundlePluginTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_module_bundle_plugin_test\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -27,7 +28,7 @@ class BundlePluginTest extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/tests/modules/entity_module_bundle_plugin_test/src/BundlePluginTestManager.php b/tests/modules/entity_module_bundle_plugin_test/src/BundlePluginTestManager.php
index 68cd398..6955459 100644
--- a/tests/modules/entity_module_bundle_plugin_test/src/BundlePluginTestManager.php
+++ b/tests/modules/entity_module_bundle_plugin_test/src/BundlePluginTestManager.php
@@ -20,9 +20,9 @@ class BundlePluginTestManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/modules/entity_module_test/src/EventSubscriber/QueryAccessSubscriber.php b/tests/modules/entity_module_test/src/EventSubscriber/QueryAccessSubscriber.php
index cb3ee0e..214e996 100644
--- a/tests/modules/entity_module_test/src/EventSubscriber/QueryAccessSubscriber.php
+++ b/tests/modules/entity_module_test/src/EventSubscriber/QueryAccessSubscriber.php
@@ -27,7 +27,7 @@ class QueryAccessSubscriber implements EventSubscriberInterface {
    * subscriber would probably extend the conditions based on the third party
    * settings it set on the entity type(s).
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onGenericQueryAccess(QueryAccessEvent $event) {
@@ -52,7 +52,7 @@ class QueryAccessSubscriber implements EventSubscriberInterface {
    * ignore the account and extend the conditions to cover additional factors,
    * such as a custom entity field.
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onQueryAccess(QueryAccessEvent $event) {
@@ -90,7 +90,7 @@ class QueryAccessSubscriber implements EventSubscriberInterface {
    * access subscriber is added to entity types that do not specify a query
    * access handler; in this case: node.
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onEventOnlyQueryAccess(QueryAccessEvent $event) {
diff --git a/tests/src/Functional/BulkFormEntityListBuilderTest.php b/tests/src/Functional/BulkFormEntityListBuilderTest.php
index 9066c5c..6f25414 100644
--- a/tests/src/Functional/BulkFormEntityListBuilderTest.php
+++ b/tests/src/Functional/BulkFormEntityListBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity\Functional;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntityWithOwner;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -22,7 +23,7 @@ class BulkFormEntityListBuilderTest extends BrowserTestBase {
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
diff --git a/tests/src/Functional/EntityDuplicateTest.php b/tests/src/Functional/EntityDuplicateTest.php
index f2beb7d..e011f92 100644
--- a/tests/src/Functional/EntityDuplicateTest.php
+++ b/tests/src/Functional/EntityDuplicateTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -20,14 +22,14 @@ class EntityDuplicateTest extends BrowserTestBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The entity_test_enhanced storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
diff --git a/tests/src/Functional/RevisionRouteAccessTest.php b/tests/src/Functional/RevisionRouteAccessTest.php
index 5d5465c..02ca21f 100644
--- a/tests/src/Functional/RevisionRouteAccessTest.php
+++ b/tests/src/Functional/RevisionRouteAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -22,7 +23,7 @@ class RevisionRouteAccessTest extends BrowserTestBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
diff --git a/tests/src/Kernel/BundleEntityDuplicatorTest.php b/tests/src/Kernel/BundleEntityDuplicatorTest.php
index 8ca1ae2..07ce123 100644
--- a/tests/src/Kernel/BundleEntityDuplicatorTest.php
+++ b/tests/src/Kernel/BundleEntityDuplicatorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\entity\Kernel;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+use Drupal\entity\BundleEntityDuplicator;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\entity_test\Entity\EntityTestBundle;
 use Drupal\entity_test\Entity\EntityTestWithBundle;
 use Drupal\field\Entity\FieldConfig;
@@ -20,14 +23,14 @@ class BundleEntityDuplicatorTest extends EntityKernelTestBase {
   /**
    * A test bundle entity.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @var ConfigEntityInterface
    */
   protected $bundleEntity;
 
   /**
    * The bundle entity duplicator.
    *
-   * @var \Drupal\entity\BundleEntityDuplicator
+   * @var BundleEntityDuplicator
    */
   protected $duplicator;
 
@@ -264,7 +267,7 @@ class BundleEntityDuplicatorTest extends EntityKernelTestBase {
    * @throws \InvalidArgumentException
    *   Thrown when an invalid display context is provided.
    *
-   * @return \Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @return EntityDisplayInterface
    *   The entity display.
    */
   protected function getDisplay($entity_type, $bundle, $display_context) {
diff --git a/tests/src/Kernel/BundlePluginTest.php b/tests/src/Kernel/BundlePluginTest.php
index b24bd80..f9daaf4 100644
--- a/tests/src/Kernel/BundlePluginTest.php
+++ b/tests/src/Kernel/BundlePluginTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\entity\Kernel;
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\entity_module_bundle_plugin_test\Entity\EntityTestBundlePlugin;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -28,7 +32,7 @@ class BundlePluginTest extends KernelTestBase {
 
     // Install the modules properly. Putting them into static::$modules doesn't trigger the install
     // hooks, like hook_modules_installed, so entity_modules_installed is not triggered().
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');
     $module_installer->install(['entity_module_bundle_plugin_test', 'entity_module_bundle_plugin_examples_test']);
   }
@@ -38,12 +42,12 @@ class BundlePluginTest extends KernelTestBase {
    */
   public function testPluginBundles() {
     $bundled_entity_types = entity_get_bundle_plugin_entity_types();
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $bundled_entity_types['entity_test_bundle_plugin'];
     $this->assertEquals('entity_test_bundle_plugin', $entity_type->id());
     $this->assertTrue($entity_type->hasHandlerClass('bundle_plugin'));
 
-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $entity_type_bundle_info */
+    /** @var EntityTypeBundleInfo $entity_type_bundle_info */
     $entity_type_bundle_info = $this->container->get('entity_type.bundle.info');
     $bundle_info = $entity_type_bundle_info->getBundleInfo('entity_test_bundle_plugin');
     $this->assertEquals(2, count($bundle_info));
@@ -52,7 +56,7 @@ class BundlePluginTest extends KernelTestBase {
     $this->assertEquals('First', $bundle_info['first']['label']);
     $this->assertEquals('Some description', $bundle_info['first']['description']);
 
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = $this->container->get('entity_field.manager');
     $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions('entity_test_bundle_plugin');
     $this->assertArrayHasKey('first_mail', $field_storage_definitions);
@@ -101,7 +105,7 @@ class BundlePluginTest extends KernelTestBase {
    * Tests the uninstallation for a bundle provided by a module.
    */
   public function testBundlePluginModuleUninstallation() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');
 
     // One should be possible to uninstall without any actual content.
diff --git a/tests/src/Kernel/QueryAccess/QueryAccessEventTest.php b/tests/src/Kernel/QueryAccess/QueryAccessEventTest.php
index dd8a818..f93ec49 100644
--- a/tests/src/Kernel/QueryAccess/QueryAccessEventTest.php
+++ b/tests/src/Kernel/QueryAccess/QueryAccessEventTest.php
@@ -15,7 +15,7 @@ class QueryAccessEventTest extends EntityKernelTestBase {
   /**
    * The query access handler.
    *
-   * @var \Drupal\entity\QueryAccess\QueryAccessHandler
+   * @var QueryAccessHandler
    */
   protected $handler;
 
diff --git a/tests/src/Kernel/QueryAccess/QueryAccessHandlerTest.php b/tests/src/Kernel/QueryAccess/QueryAccessHandlerTest.php
index d95e5bf..123fdfe 100644
--- a/tests/src/Kernel/QueryAccess/QueryAccessHandlerTest.php
+++ b/tests/src/Kernel/QueryAccess/QueryAccessHandlerTest.php
@@ -22,7 +22,7 @@ class QueryAccessHandlerTest extends EntityKernelTestBase {
   /**
    * The query access handler.
    *
-   * @var \Drupal\entity\QueryAccess\QueryAccessHandler
+   * @var QueryAccessHandler
    */
   protected $handler;
 
diff --git a/tests/src/Kernel/QueryAccess/QueryAccessTest.php b/tests/src/Kernel/QueryAccess/QueryAccessTest.php
index bbfe732..c759cfa 100644
--- a/tests/src/Kernel/QueryAccess/QueryAccessTest.php
+++ b/tests/src/Kernel/QueryAccess/QueryAccessTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Kernel\QueryAccess;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\views\Tests\ViewResultAssertionTrait;
@@ -23,14 +25,14 @@ class QueryAccessTest extends EntityKernelTestBase {
   /**
    * The test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $entities;
 
   /**
    * The entity_test_enhanced storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
diff --git a/tests/src/Kernel/QueryAccess/UncacheableQueryAccessHandlerTest.php b/tests/src/Kernel/QueryAccess/UncacheableQueryAccessHandlerTest.php
index 0c69f55..d2435bc 100644
--- a/tests/src/Kernel/QueryAccess/UncacheableQueryAccessHandlerTest.php
+++ b/tests/src/Kernel/QueryAccess/UncacheableQueryAccessHandlerTest.php
@@ -22,7 +22,7 @@ class UncacheableQueryAccessHandlerTest extends EntityKernelTestBase {
   /**
    * The query access handler.
    *
-   * @var \Drupal\entity\QueryAccess\UncacheableQueryAccessHandler
+   * @var UncacheableQueryAccessHandler
    */
   protected $handler;
 
diff --git a/tests/src/Kernel/QueryAccess/UncacheableQueryAccessTest.php b/tests/src/Kernel/QueryAccess/UncacheableQueryAccessTest.php
index 8d463fa..638a0a6 100644
--- a/tests/src/Kernel/QueryAccess/UncacheableQueryAccessTest.php
+++ b/tests/src/Kernel/QueryAccess/UncacheableQueryAccessTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Kernel\QueryAccess;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntityWithOwner;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\views\Tests\ViewResultAssertionTrait;
@@ -23,14 +25,14 @@ class UncacheableQueryAccessTest extends EntityKernelTestBase {
   /**
    * The test entities.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $entities;
 
   /**
    * The entity_test_enhanced storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
diff --git a/tests/src/Kernel/RevisionBasicUITest.php b/tests/src/Kernel/RevisionBasicUITest.php
index 5ed9b8a..aa87f08 100644
--- a/tests/src/Kernel/RevisionBasicUITest.php
+++ b/tests/src/Kernel/RevisionBasicUITest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity\Kernel;
 
+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\entity_module_test\Entity\EnhancedEntity;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\Entity\Role;
@@ -59,7 +60,7 @@ class RevisionBasicUITest extends KernelTestBase {
     $revision->isDefaultRevision(FALSE);
     $revision->save();
 
-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel */
+    /** @var HttpKernelInterface $http_kernel */
     $http_kernel = $this->container->get('http_kernel');
     $request = Request::create($revision->toUrl('version-history')->toString());
     $response = $http_kernel->handle($request);
@@ -134,7 +135,7 @@ class RevisionBasicUITest extends KernelTestBase {
     $revision->isDefaultRevision(FALSE);
     $revision->save();
 
-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel */
+    /** @var HttpKernelInterface $http_kernel */
     $http_kernel = $this->container->get('http_kernel');
     $request = Request::create($revision->toUrl('revision')->toString());
     $response = $http_kernel->handle($request);
@@ -206,7 +207,7 @@ class RevisionBasicUITest extends KernelTestBase {
     $user->save();
     $this->container->get('account_switcher')->switchTo($user);
 
-    /** @var \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel */
+    /** @var HttpKernelInterface $http_kernel */
     $http_kernel = $this->container->get('http_kernel');
     $request = Request::create($entity->toUrl('revision-revert-form')->toString());
     $response = $http_kernel->handle($request);
diff --git a/tests/src/Unit/BundleEntityAccessControlHandlerTest.php b/tests/src/Unit/BundleEntityAccessControlHandlerTest.php
index a6ebffb..5dffb54 100644
--- a/tests/src/Unit/BundleEntityAccessControlHandlerTest.php
+++ b/tests/src/Unit/BundleEntityAccessControlHandlerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -21,6 +23,7 @@ use Prophecy\Argument;
  */
 class BundleEntityAccessControlHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -100,7 +103,7 @@ class BundleEntityAccessControlHandlerTest extends UnitTestCase {
    * @param string $permission
    *   The permission to grant.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The user mock.
    */
   protected function buildMockUser($uid, $permission) {
diff --git a/tests/src/Unit/EntityAccessControlHandlerTest.php b/tests/src/Unit/EntityAccessControlHandlerTest.php
index f70d0d6..6019162 100644
--- a/tests/src/Unit/EntityAccessControlHandlerTest.php
+++ b/tests/src/Unit/EntityAccessControlHandlerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -26,6 +28,7 @@ use Prophecy\Argument;
  */
 class EntityAccessControlHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -186,7 +189,7 @@ class EntityAccessControlHandlerTest extends UnitTestCase {
   /**
    * Builds a mock entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string $owner_id
    *   The owner ID.
@@ -195,7 +198,7 @@ class EntityAccessControlHandlerTest extends UnitTestCase {
    * @param bool $published
    *   Whether the entity is published.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The entity mock.
    */
   protected function buildMockEntity(EntityTypeInterface $entity_type, $owner_id = NULL, $bundle = NULL, $published = NULL) {
@@ -237,7 +240,7 @@ class EntityAccessControlHandlerTest extends UnitTestCase {
    * @param string $permission
    *   The permission to grant.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The user mock.
    */
   protected function buildMockUser($uid, $permission) {
diff --git a/tests/src/Unit/EntityPermissionProviderTest.php b/tests/src/Unit/EntityPermissionProviderTest.php
index 994c8d4..a1e7bfa 100644
--- a/tests/src/Unit/EntityPermissionProviderTest.php
+++ b/tests/src/Unit/EntityPermissionProviderTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity\EntityPermissionProviderInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -16,10 +18,11 @@ use Drupal\user\EntityOwnerInterface;
  */
 class EntityPermissionProviderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity permission provider.
    *
-   * @var \Drupal\entity\EntityPermissionProviderInterface
+   * @var EntityPermissionProviderInterface
    */
   protected $permissionProvider;
 
diff --git a/tests/src/Unit/UncacheableEntityAccessControlHandlerTest.php b/tests/src/Unit/UncacheableEntityAccessControlHandlerTest.php
index e6b40a5..5814e0a 100644
--- a/tests/src/Unit/UncacheableEntityAccessControlHandlerTest.php
+++ b/tests/src/Unit/UncacheableEntityAccessControlHandlerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -26,6 +28,7 @@ use Prophecy\Argument;
  */
 class UncacheableEntityAccessControlHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -188,7 +191,7 @@ class UncacheableEntityAccessControlHandlerTest extends UnitTestCase {
   /**
    * Builds a mock entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string $owner_id
    *   The owner ID.
@@ -197,7 +200,7 @@ class UncacheableEntityAccessControlHandlerTest extends UnitTestCase {
    * @param bool $published
    *   Whether the entity is published.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The entity mock.
    */
   protected function buildMockEntity(EntityTypeInterface $entity_type, $owner_id = NULL, $bundle = NULL, $published = NULL) {
@@ -239,7 +242,7 @@ class UncacheableEntityAccessControlHandlerTest extends UnitTestCase {
    * @param string $permission
    *   The permission to grant.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The user mock.
    */
   protected function buildMockUser($uid, $permission) {
diff --git a/tests/src/Unit/UncacheableEntityPermissionProviderTest.php b/tests/src/Unit/UncacheableEntityPermissionProviderTest.php
index b81e7f8..8c70b7b 100644
--- a/tests/src/Unit/UncacheableEntityPermissionProviderTest.php
+++ b/tests/src/Unit/UncacheableEntityPermissionProviderTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity\EntityPermissionProviderInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -16,10 +18,11 @@ use Drupal\user\EntityOwnerInterface;
  */
 class UncacheableEntityPermissionProviderTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity permission provider.
    *
-   * @var \Drupal\entity\EntityPermissionProviderInterface
+   * @var EntityPermissionProviderInterface
    */
   protected $permissionProvider;
 
