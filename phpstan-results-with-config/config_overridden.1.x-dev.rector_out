modules/contrib/config_overridden/config_overridden.module
modules/contrib/config_overridden/src/Annotation/ConfigFormOverrider.php
modules/contrib/config_overridden/src/Plugin/ConfigFormOverrider/ConfigFormOverriderDefault.php
modules/contrib/config_overridden/src/Plugin/ConfigFormOverrider/ConfigFormOverriderNull.php
modules/contrib/config_overridden/src/Plugin/ConfigFormOverriderBase.php
modules/contrib/config_overridden/src/Plugin/ConfigFormOverriderInterface.php
modules/contrib/config_overridden/src/Plugin/ConfigFormOverriderManager.php
modules/contrib/config_overridden/tests/src/Functional/SiteInformationFormTest.php

6 files with changes
====================

1) modules/contrib/config_overridden/tests/src/Functional/SiteInformationFormTest.php:23

    ---------- begin diff ----------
@@ @@
    */
   protected $defaultTheme = 'stable';

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }

@@ @@


       if (isset($element['#config_overridden_value'])) {
-        $this->assertEqual($element['#config_overridden_value'], $config->getOriginal($property, FALSE), 'Stored value is set correctly');
+        $this->assertEquals($element['#config_overridden_value'], $config->getOriginal($property, FALSE), 'Stored value is set correctly');
       }
       else {
         $this->fail("Element {$form_path} doesn't have #config_overridden_value");
       }

-      $this->assertEqual($element['#default_value'], $value_to_match, "Element {$property} old value {$old_element['#default_value']} and new value {$element['#default_value']}");
+      $this->assertEquals($element['#default_value'], $value_to_match, "Element {$property} old value {$old_element['#default_value']} and new value {$element['#default_value']}");
       $this->assertTrue(strpos($element['#title'], 'overrides') !== FALSE, 'Element ' . $form_path . ' title is changed?');

     }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/config_overridden/src/Plugin/ConfigFormOverriderManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_overridden\Plugin;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_overridden/src/Plugin/ConfigFormOverriderInterface.php:25

    ---------- begin diff ----------
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param null $form_id
    */
   public function setForm(array &$form, FormStateInterface $form_state, $form_id = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/config_overridden/src/Plugin/ConfigFormOverriderBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_overridden\Plugin;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   protected $form;

   /**
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $form_state;

@@ @@
   /**
    * Define variable for LoggerChannelInterface.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Define variable for ConfigFactoryInterface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerChannelFactoryInterface $logger_factory, ConfigFactoryInterface $config_factory) {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param null $form_id
    */
   public function setForm(array &$form, FormStateInterface $form_state, $form_id = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_overridden/src/Annotation/ConfigFormOverrider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_overridden\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The name of the sms service plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


6) modules/contrib/config_overridden/config_overridden.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\config_overridden\Plugin\ConfigFormOverriderManager;
 /**
  * @file
  * Module file.
@@ @@
 /**
  * Shortcut function to get overrider service.
  *
- * @return \Drupal\config_overridden\Plugin\ConfigFormOverriderManager
+ * @return ConfigFormOverriderManager
  *   Return Config Form Overrider Manager.
  */
 function config_overridden_service_overrider() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

