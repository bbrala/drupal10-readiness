modules/contrib/digitallocker/digitallocker_example/digitallocker_example.module
modules/contrib/digitallocker/digitallocker_example/templates/node--dlex.tpl.php
modules/contrib/digitallocker/digitallocker_issuer/digitallocker_issuer.install
modules/contrib/digitallocker/digitallocker_issuer/digitallocker_issuer.module
modules/contrib/digitallocker/digitallocker_issuer/src/Controller/DownloadPdfController.php
modules/contrib/digitallocker/digitallocker_issuer/src/Controller/PullApiController.php
modules/contrib/digitallocker/digitallocker_issuer/src/Form/DigitalLockerEntityTypeSettings.php
modules/contrib/digitallocker/digitallocker_issuer/src/Form/DigitallockerIssuerSettings.php
modules/contrib/digitallocker/digitallocker_issuer/src/Plugin/Action/PublishCertificateAction.php
modules/contrib/digitallocker/digitallocker_issuer/src/Plugin/Action/RevokeCertificateAction.php
modules/contrib/digitallocker/digitallocker_issuer/src/PushApi.php
modules/contrib/digitallocker/digitallocker_issuer/src/Routing/EntityTypeDigitalLockerRouteProvider.php
modules/contrib/digitallocker/digitallocker_issuer/src/SignedPdf.php
modules/contrib/digitallocker/digitallocker_requester/digitallocker_requester.module
modules/contrib/digitallocker/digitallocker_requester/src/Controller/FetchDocumentController.php
modules/contrib/digitallocker/digitallocker_requester/src/Form/DigitallockerRequesterSettings.php
modules/contrib/digitallocker/digitallocker_requester/src/Plugin/Field/FieldWidget/DigitalLockerFileWidget.php

6 files with changes
====================

1) modules/contrib/digitallocker/digitallocker_requester/src/Controller/FetchDocumentController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Fetch Document Controller constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request object.
    */
   public function __construct(RequestStack $request_stack) {
@@ @@
   /**
    * Checks if DigiLocker has returned sane data.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   Whether the fetching of the document is allowed or not.
    */
   public function permit() {
@@ @@
   /**
    * Given details of the document, fetch it from digital locker & link to node.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The file id after saving the document in the system.
    */
   public function fetchDocument() {
@@ @@

         $document = base64_decode((string) $response->DocDetails->docContent[0]);

-        $file = file_save_data($document, file_default_scheme() . '://' . $data->filename);
+        $file = \Drupal::service('file.repository')->writeData($document, \Drupal::config('system.file')->get('default_scheme') . '://' . $data->filename);
         $file->status = 0;

         return new JsonResponse(['fid' => $file->fid, 'did' => $data->docId]);
    ----------- end diff -----------

Applied rules:
 * FileDefaultSchemeRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/digitallocker/digitallocker_issuer/src/SignedPdf.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Given a node, generate the certificate.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    *   The node whose certificate is to be generated.
    *
    * @return string
@@ @@
       'ContactInfo' => $config->get('certificate_contact'),
     ];

-    $filename = tempnam(file_directory_temp(), 'dlpdf');
+    $filename = tempnam(\Drupal::service('file_system')->getTempDirectory(), 'dlpdf');
     $image = imagecreate(200, 50);
     imagecolorallocate($image, 255, 255, 255);
     $black = imagecolorallocate($image, 0, 0, 0);
    ----------- end diff -----------

Applied rules:
 * FileDirectoryTempRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/digitallocker/digitallocker_issuer/src/PushApi.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Publish a Single Certificate.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    *   The node whose certificate is to be pushed.
    * @param string $action
    *   The action that needs to be taken.
@@ @@

     $timestamp = \Drupal::time()->getRequestTime();
     $client = \Drupal::httpClient();
-    $path = \Drupal::service('path.alias_manager')
+    $path = \Drupal::service('path_alias.manager')
       ->getAliasByPath('/node/' . $node->id());

     $field_aadhaar = $node_type->getThirdPartySetting('digitallocker_issuer', 'field_aadhaar');
@@ @@

     $response = new simpleXMLElement($response->getBody()->getContents());
     if (!intval($response->ResponseStatus)) {
-      drupal_set_message($node->getTitle() . ' : ' . strip_tags(strval($response->ResponseMessage)), 'error');
+      \Drupal::messenger()->addError($node->getTitle() . ' : ' . strip_tags(strval($response->ResponseMessage)));
     }
   }

@@ @@
     $config = \Drupal::config('digitallocker_issuer.settings');
     $client = \Drupal::httpClient();
     $time = \Drupal::time()->getRequestTime();
-    $nodes = \Drupal::entityManager()->getStorage('node')->loadMultiple($nids);
+    $nodes = \Drupal::service('entity_type.manager')->getStorage('node')->loadMultiple($nids);
     $csv = [];

     foreach ($nodes as $node) {
@@ @@
       $field_valid = $node_type->getThirdPartySetting('digitallocker_issuer', 'field_validity');
       $field_valid = $node->{$field_valid}->getValue();

-      $path = \Drupal::service('path.alias_manager')
+      $path = \Drupal::service('path_alias.manager')
         ->getAliasByPath('/node/' . $node->id());

       foreach ($field_aadhaar as $aadhaar) {
@@ @@
     try {
       $response = new simpleXMLElement($response->data);
       if ((integer) $response->ResponseStatus) {
-        drupal_set_message(\Drupal::translation()
+        \Drupal::messenger()->addStatus(\Drupal::translation()
           ->formatPlural(count($nids), 'Published 1 certificate.', 'Published @count certificates.'));
       }
       else {
-        drupal_set_message((string) $response->ResponseMessage, 'error');
+        \Drupal::messenger()->addError((string) $response->ResponseMessage);
       }
     }
     catch (HttpException $e) {
-      drupal_set_message($e->getMessage(), 'error');
+      \Drupal::messenger()->addError($e->getMessage());
     }
   }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * EntityManagerRector
 * PathAliasManagerServiceNameRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/digitallocker/digitallocker_issuer/src/Form/DigitalLockerEntityTypeSettings.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
     /* @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $bundle */
     $field_types = [];
     $bundle = $form_state->getFormObject()->getEntity();
-    $fields = \Drupal::entityManager()
+    $fields = \Drupal::service('entity_field.manager')
       ->getFieldDefinitions('node', $bundle->get('type'));

     foreach ($fields as $field_name => $field_description) {
@@ @@
    *
    * @param string $entity_type
    *   The type of entity.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle
+   * @param ConfigEntityInterface $bundle
    *   The entity whose settings are beign saved.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function formBuilderCallback($entity_type, ConfigEntityInterface $bundle, array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * EntityManagerRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/digitallocker/digitallocker_issuer/src/Controller/PullApiController.php:27

    ---------- begin diff ----------
@@ @@
     $request = new \SimpleXMLElement($input);
     $attr = $request->attributes();

-    $alias = \Drupal::service('path.alias_manager')
+    $alias = \Drupal::service('path_alias.manager')
       ->getPathByAlias($request->DocDetails->URI);
     $params = Url::fromUri('internal:/' . $alias)->getRouteParameters();
     $entity_type = key($params);
    ----------- end diff -----------

Applied rules:
 * PathAliasManagerServiceNameRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/digitallocker/digitallocker_issuer/src/Controller/DownloadPdfController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Given a node, download the certificate corresponding to it.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node whose certificate is to be downloaded.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The file to be downloaded.
    */
   public function downloadPdf(NodeInterface $node) {
     $content = SignedPdf::generate($node);
-    $path = tempnam(file_directory_temp(), 'dlpdf');
+    $path = tempnam(\Drupal::service('file_system')->getTempDirectory(), 'dlpdf');
     file_put_contents($path, $content);

     return (new BinaryFileResponse($path))
    ----------- end diff -----------

Applied rules:
 * FileDirectoryTempRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

