diff --git a/src/Form/LimitDomainAccessByRoleConfigForm.php b/src/Form/LimitDomainAccessByRoleConfigForm.php
index 4f55cfd..918c9c8 100644
--- a/src/Form/LimitDomainAccessByRoleConfigForm.php
+++ b/src/Form/LimitDomainAccessByRoleConfigForm.php
@@ -23,42 +23,42 @@ class LimitDomainAccessByRoleConfigForm extends ConfigFormBase {
   /**
    * Drupal\Core\Database\Driver\mysql\Connection definition.
    *
-   * @var \Drupal\Core\Database\Driver\mysql\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Drupal\Core\Session\SessionManagerInterface definition.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * The string translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;
 
diff --git a/tests/src/Functional/LimitdomainaccessbyroleTest.php b/tests/src/Functional/LimitdomainaccessbyroleTest.php
index 9f6ba33..93ce7a8 100644
--- a/tests/src/Functional/LimitdomainaccessbyroleTest.php
+++ b/tests/src/Functional/LimitdomainaccessbyroleTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\limit_domain_access_by_role\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,21 +29,21 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
   /**
    * A test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $adminUser;
 
   /**
    * A user with "permission" to be blocked on non-technical domain.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $admintestUser;
 
@@ -75,18 +77,30 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // Empty form submission. Check presence of the default value.
-    $this->drupalPostForm(NULL, [], 'Save configuration');
-    $this->assertText('*local*');
+    $this->submitForm([], 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('*local*');
     // Form validation testing of an invalid characters rejection.
     $edit = [
       'technical_domains' => 'some/invalid/ch@r@ter$',
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Invalid characters are detected.');
-    $this->assertText('Apart from yourself, there are currently no users with an open session (logged in)');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Invalid characters are detected.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Apart from yourself, there are currently no users with an open session (logged in)');
   }
 
   /**
@@ -97,15 +111,24 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // A correct form submission.
     $edit = [
       'technical_domains' => \Drupal::request()->getHost(),
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
-    $this->assertText('There were no users with an open session to terminate.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no users with an open session to terminate.');
     // Log out.
     $this->drupalLogout();
     // Log in an unblocked user (non-admin) through the UI. Should access.
@@ -116,8 +139,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->user->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Bobby Solo');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Bobby Solo');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Log in a blocked user (admin) through the UI. Should access.
@@ -128,8 +157,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->admintestUser->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Daffy Duck');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Daffy Duck');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Get back to the settings form and check it loads correctly.
@@ -137,15 +172,24 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // Make a correct form submission but now changing the technical domain.
     $edit = [
       'technical_domains' => 'admin.example.com',
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
-    $this->assertText('There were no users with an open session to terminate.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no users with an open session to terminate.');
     // Log out.
     $this->drupalLogout();
     // Log in an unblocked user (non-admin) through the UI. Should access.
@@ -156,8 +200,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->user->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Bobby Solo');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Bobby Solo');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Log in a blocked user (admin) through the UI. Should get Access denied.
@@ -168,8 +218,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->admintestUser->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(403);
-    $this->assertText('Access denied');
-    $this->assertText('You are not authorized to access this page.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Access denied');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page.');
   }
 
 }
