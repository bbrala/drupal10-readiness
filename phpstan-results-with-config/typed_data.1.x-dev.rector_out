modules/contrib/typed_data/src/Annotation/DataFilter.php
modules/contrib/typed_data/src/Annotation/TypedDataFormWidget.php
modules/contrib/typed_data/src/Commands/TypedDataCommands.php
modules/contrib/typed_data/src/Context/AnnotatedClassDiscovery.php
modules/contrib/typed_data/src/Context/Annotation/ContextDefinition.php
modules/contrib/typed_data/src/Context/ContextDefinition.php
modules/contrib/typed_data/src/Context/ContextDefinitionInterface.php
modules/contrib/typed_data/src/DataFetcher.php
modules/contrib/typed_data/src/DataFetcherInterface.php
modules/contrib/typed_data/src/DataFetcherTrait.php
modules/contrib/typed_data/src/DataFilterBase.php
modules/contrib/typed_data/src/DataFilterInterface.php
modules/contrib/typed_data/src/DataFilterManager.php
modules/contrib/typed_data/src/DataFilterManagerInterface.php
modules/contrib/typed_data/src/Exception/FilterException.php
modules/contrib/typed_data/src/Exception/InvalidArgumentException.php
modules/contrib/typed_data/src/Exception/LogicException.php
modules/contrib/typed_data/src/Exception/TypedDataException.php
modules/contrib/typed_data/src/Form/SubformState.php
modules/contrib/typed_data/src/PlaceholderResolver.php
modules/contrib/typed_data/src/PlaceholderResolverInterface.php
modules/contrib/typed_data/src/PlaceholderResolverTrait.php
modules/contrib/typed_data/src/Plugin/DataType/TextData.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/CountFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/DefaultFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/EntityUrlFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/FormatDateFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/FormatTextFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/LowerFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/ReplaceFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/StripTagsFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/TrimFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFilter/UpperFilter.php
modules/contrib/typed_data/src/Plugin/TypedDataFormWidget/BrokenWidget.php
modules/contrib/typed_data/src/Plugin/TypedDataFormWidget/DatetimeRangeWidget.php
modules/contrib/typed_data/src/Plugin/TypedDataFormWidget/DatetimeWidget.php
modules/contrib/typed_data/src/Plugin/TypedDataFormWidget/SelectWidget.php
modules/contrib/typed_data/src/Plugin/TypedDataFormWidget/TextInputWidget.php
modules/contrib/typed_data/src/Plugin/TypedDataFormWidget/TextareaWidget.php
modules/contrib/typed_data/src/TypedData/Type/TextInterface.php
modules/contrib/typed_data/src/Widget/FormWidgetBase.php
modules/contrib/typed_data/src/Widget/FormWidgetInterface.php
modules/contrib/typed_data/src/Widget/FormWidgetManager.php
modules/contrib/typed_data/src/Widget/FormWidgetManagerInterface.php
modules/contrib/typed_data/src/Widget/FormWidgetManagerTrait.php
modules/contrib/typed_data/tests/modules/typed_data_global_context_test/src/ContextProvider/SimpleTestContext.php
modules/contrib/typed_data/tests/modules/typed_data_widget_test/src/FormWidgetExampleController.php
modules/contrib/typed_data/tests/modules/typed_data_widget_test/src/FormWidgetExampleForm.php
modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/BrokenWidgetTest.php
modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/DatetimeWidgetTest.php
modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/FormWidgetBrowserTestBase.php
modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/SelectWidgetTest.php
modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/TextInputWidgetTest.php
modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/TextareaWidgetTest.php
modules/contrib/typed_data/tests/src/Kernel/DataDefinitionFetcherTest.php
modules/contrib/typed_data/tests/src/Kernel/DataFetcherAutocompleteTest.php
modules/contrib/typed_data/tests/src/Kernel/DataFetcherTest.php
modules/contrib/typed_data/tests/src/Kernel/DataFilterTest.php
modules/contrib/typed_data/tests/src/Kernel/PlaceholderResolverTest.php
modules/contrib/typed_data/tests/src/Kernel/TextDataTypeTest.php
modules/contrib/typed_data/tests/src/Traits/BrowserTestHelpersTrait.php

32 files with changes
=====================

1) modules/contrib/typed_data/tests/src/Traits/BrowserTestHelpersTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Traits;

+use Behat\Mink\Exception\ElementNotFoundException;
 use Behat\Mink\Element\NodeElement;

 /**
@@ @@
    * @param string $locator
    *   Link id, title, text or image alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The link node element.
    */
   public function findLink(string $locator): ?NodeElement {
@@ @@
    * @param string $locator
    *   Input id, name or label.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The input field element.
    */
   public function findField(string $locator): ?NodeElement {
@@ @@
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The button node element.
    */
   public function findButton(string $locator): ?NodeElement {
@@ @@
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function pressButton(string $locator): void {
     $this->getSession()->getPage()->pressButton($locator);
@@ @@
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *
    * @see \Behat\Mink\Element\NodeElement::setValue
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/typed_data/tests/src/Kernel/PlaceholderResolverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Kernel;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\typed_data\PlaceholderResolver;
+use Drupal\typed_data_global_context_test\ContextProvider\SimpleTestContext;
 use Drupal\Component\Render\HtmlEscapedText;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Datetime\Entity\DateFormat;
@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * A node used for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * An entity type manager used for testing.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The placeholder resolver instanced tested.
    *
-   * @var \Drupal\typed_data\PlaceholderResolver
+   * @var PlaceholderResolver
    */
   protected $placeholderResolver;

@@ @@
   /**
    * A simple global context for testing.
    *
-   * @var \Drupal\typed_data_global_context_test\ContextProvider\SimpleTestContext
+   * @var SimpleTestContext
    */
   protected $simpleTestContext;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/typed_data/tests/src/Kernel/DataFilterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Kernel;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\typed_data\DataFilterManagerInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\node\NodeInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
 use Drupal\Core\Render\BubbleableMetadata;
@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The data filter manager.
    *
-   * @var \Drupal\typed_data\DataFilterManagerInterface
+   * @var DataFilterManagerInterface
    */
   protected $dataFilterManager;

@@ @@
     $fails = $filter->validateArguments($data->getDataDefinition(), ['custom', 'Y']);
     $this->assertCount(0, $fails);

-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date_formatter = $this->container->get('date.formatter');
     $this->assertEquals($date_formatter->format(3700), $filter->filter($data->getDataDefinition(), $data->getValue(), []));
     $this->assertEquals($date_formatter->format(3700, 'short'), $filter->filter($data->getDataDefinition(), $data->getValue(), ['short']));
@@ @@
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');

-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'title' => 'Test node',
       'type' => 'page',
@@ @@
    */
   public function testFileEntityUrlFilter(): void {
     file_put_contents('public://example.txt', $this->randomMachineName());
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create([
       'uri' => 'public://example.txt',
     ]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/typed_data/tests/src/Kernel/DataFetcherTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Kernel;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\TypedData\EntityDataDefinition;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Render\BubbleableMetadata;
@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The data fetcher object we want to test.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * A node used for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * An entity type manager used for testing.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/typed_data/tests/src/Kernel/DataFetcherAutocompleteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Kernel;

+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The data fetcher object we want to test.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The data definition of our page node used for testing.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface
+   * @var EntityDataDefinitionInterface
    */
   protected $nodeDefinition;

@@ @@
   /**
    * The data definition of the global page node used for testing.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface
+   * @var EntityDataDefinitionInterface
    */
   protected $globalNodeDefinition;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/typed_data/tests/src/Kernel/DataDefinitionFetcherTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Kernel;

+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The data fetcher object we want to test.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The data definition of our page node used for testing.
    *
-   * @var \Drupal\Core\Entity\TypedData\EntityDataDefinitionInterface
+   * @var EntityDataDefinitionInterface
    */
   protected $nodeDefinition;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/TextareaWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;

+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ @@
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;

@@ @@
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value--description]', $context_definition->getDescription());
@@ @@
     $this->fillField('data[value]', $this->randomString(20));
     $this->pressButton('Submit');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->fieldExists('data[value]')->hasClass('error');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/TextInputWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;

+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ @@
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;

@@ @@
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value--description]', $context_definition->getDescription());
@@ @@
     $this->fillField('data[value]', 'too-long');
     $this->pressButton('Submit');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->fieldExists('data[value]')->hasClass('error');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/SelectWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;

+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ @@
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;

@@ @@
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value--description]', $context_definition->getDescription());
@@ @@
     $this->fillField('data[value]', '');
     $this->pressButton('Submit');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->fieldExists('data[value]')->hasClass('error');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/FormWidgetBrowserTestBase.php:31

    ---------- begin diff ----------
@@ @@

   /**
    * @covers ::isApplicable
+   * @doesNotPerformAssertions
    */
   public function testIsApplicable(): void {
     // Force any tests that extend this class to implement their own version
@@ @@
   /**
    * @covers ::form
    * @covers ::extractFormValues
+   * @doesNotPerformAssertions
    */
   public function testFormEditing(): void {
     $this->fail('There is no implementation of the mandatory test function: ' . $this->getName());
@@ @@
   /**
    * @covers ::form
    * @covers ::flagViolations
+   * @doesNotPerformAssertions
    */
   public function testValidation(): void {
     $this->fail('There is no implementation of the mandatory test function: ' . $this->getName());
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/DatetimeWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;

+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
@@ @@
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;

@@ @@
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // Unlike other form widgets where the label is directly related to the
@@ @@
       ->setDefaultValue('2017-04-18T06:20:52');
     $this->container->get('state')->set('typed_data_widgets.definition', $context_definition);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
@@ @@
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // Check that empty date and 12:00:00 for the time are shown when no default
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/typed_data/tests/src/Functional/TypedDataFormWidget/BrokenWidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\typed_data\Functional\TypedDataFormWidget;

+use Drupal\typed_data\Widget\FormWidgetInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\TypedData\ListDataDefinition;
@@ @@
   /**
    * The tested form widget.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetInterface
+   * @var FormWidgetInterface
    */
   protected $widget;

@@ @@
     $path = 'admin/config/user-interface/typed-data-widgets/' . $this->widget->getPluginId();
     $this->drupalGet($path);

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->elementTextContains('css', 'label[for=edit-data-value]', $context_definition->getLabel());
     $assert->elementTextContains('css', 'div[id=edit-data-value]', 'No widget exists for this data type.');
@@ @@
   /**
    * @covers ::form
    * @covers ::flagViolations
+   * @doesNotPerformAssertions
    */
   public function testValidation(): void {
     // No validation as there is no input widget.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/typed_data/tests/modules/typed_data_widget_test/src/FormWidgetExampleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data_widget_test;

+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ @@
   /**
    * The state storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Form constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state storage.
    */
   public function __construct(StateInterface $state) {
@@ @@
    * @param string $widget_id
    *   The widget id.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    *   The definition.
    */
   public function getExampleContextDefinition($widget_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/typed_data/src/Widget/FormWidgetManagerTrait.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The widget manager.
    *
-   * @var \Drupal\typed_data\Widget\FormWidgetManagerInterface
+   * @var FormWidgetManagerInterface
    */
   protected $widgetManager;

@@ @@
   /**
    * Sets the widget manager.
    *
-   * @param \Drupal\typed_data\Widget\FormWidgetManagerInterface $widgetManager
+   * @param FormWidgetManagerInterface $widgetManager
    *   The widget manager.
    *
    * @return $this
@@ @@
   /**
    * Gets the widget manager.
    *
-   * @return \Drupal\typed_data\Widget\FormWidgetManagerInterface
+   * @return FormWidgetManagerInterface
    *   The widget manager.
    */
   public function getFormWidgetManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/typed_data/src/Widget/FormWidgetManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data\Widget;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;

 /**
@@ @@
    *   An array of configuration relevant to the plugin instance. As this plugin
    *   is not configurable, this is unused and should stay empty.
    *
-   * @return \Drupal\typed_data\Widget\FormWidgetInterface
+   * @return FormWidgetInterface
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/typed_data/src/Widget/FormWidgetInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data\Widget;

+use Drupal\typed_data\Context\ContextDefinitionInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\SubformStateInterface;
@@ @@
   /**
    * Returns if the widget can be used for the provided data.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the edited data.
    *
    * @return bool
@@ @@
    * them as ad-hoc $element['#custom'] properties, for later use by its element
    * callbacks.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data to be edited.
-   * @param \Drupal\Core\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state of the widget's form.
    *
    * @return array[]
@@ @@
   /**
    * Extracts the data value from submitted form values.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data to be updated with the submitted form values.
-   * @param \Drupal\Core\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state of the widget's form.
    */
   public function extractFormValues(TypedDataInterface $data, SubformStateInterface $form_state);
@@ @@
    * the data definition. In addition to that, widget-level validation may be
    * provided using the regular #element_validate callbacks of the form API.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data to be edited.
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface $violations
+   * @param ConstraintViolationListInterface $violations
    *   A list of constraint violations to flag.
-   * @param \Drupal\Core\Form\SubformStateInterface $formState
+   * @param SubformStateInterface $formState
    *   The form state of the widget's form.
    */
   public function flagViolations(TypedDataInterface $data, ConstraintViolationListInterface $violations, SubformStateInterface $formState);
@@ @@
    * setting values. The definitions may include suiting widgets and widget
    * configurations for generating a configuration form.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the edited data.
    *
-   * @return \Drupal\typed_data\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    *   An array of context definitions describing the configuration values,
    *   keyed by configuration setting name. The keys must match the actual keys
    *   of the supported configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/typed_data/src/Widget/FormWidgetBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The typed data plugin manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TypedDataManagerInterface $typed_data_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/typed_data/src/Plugin/TypedDataFormWidget/DatetimeRangeWidget.php:125

    ---------- begin diff ----------
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/typed_data/src/Plugin/TypedDataFilter/FormatDateFilter.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The date format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateFormatStorage;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter to use.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $date_format_storage
+   * @param EntityStorageInterface $date_format_storage
    *   The date format storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $date_formatter, EntityStorageInterface $date_format_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/typed_data/src/PlaceholderResolverTrait.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The placeholder resolver.
    *
-   * @var \Drupal\typed_data\PlaceholderResolverInterface
+   * @var PlaceholderResolverInterface
    */
   protected $placeholderResolver;

@@ @@
   /**
    * Sets the placeholder resolver.
    *
-   * @param \Drupal\typed_data\PlaceholderResolverInterface $placeholder_resolver
+   * @param PlaceholderResolverInterface $placeholder_resolver
    *   The placeholder resolver.
    *
    * @return $this
@@ @@
   /**
    * Gets the placeholder resolver.
    *
-   * @return \Drupal\typed_data\PlaceholderResolverInterface
+   * @return PlaceholderResolverInterface
    *   The placeholder resolver.
    */
   public function getPlaceholderResolver() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/typed_data/src/PlaceholderResolverInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data;

+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Render\BubbleableMetadata;

 /**
@@ @@
    *   An HTML string containing replaceable tokens. The caller is responsible
    *   for calling \Drupal\Component\Utility\Html::escape() in case the $text
    *   was plain text.
-   * @param \Drupal\Core\TypedData\TypedDataInterface[] $data
+   * @param TypedDataInterface[] $data
    *   The data to use for generating values for the placeholder, keyed by
    *   name.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    *   Refer to ::replacePlaceHolders() for further details.
    * @param array $options
@@ @@
    *   - clear: A boolean flag indicating that tokens should be removed from the
    *     final text if no replacement value can be generated. Defaults to FALSE.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[]
+   * @return MarkupInterface[]
    *   An array of replacement values for the placeholders contained in the
    *   text, keyed by placeholder.
    */
@@ @@
    *
    * @param string $text
    *   The text containing the placeholders.
-   * @param \Drupal\Core\TypedData\TypedDataInterface[] $data
+   * @param TypedDataInterface[] $data
    *   The data to use for generating values for the placeholder, keyed by
    *   name.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    * @param array $options
    *   (optional) A keyed array of settings and flags to control the token
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/typed_data/src/PlaceholderResolver.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * The data filter manager.
    *
-   * @var \Drupal\typed_data\DataFilterManagerInterface
+   * @var DataFilterManagerInterface
    */
   protected $dataFilterManager;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param DataFetcherInterface $data_fetcher
    *   The typed data manager.
-   * @param \Drupal\typed_data\DataFilterManagerInterface $data_filter_manager
+   * @param DataFilterManagerInterface $data_filter_manager
    *   The data filter manager.
    */
   public function __construct(DataFetcherInterface $data_fetcher, DataFilterManagerInterface $data_filter_manager) {
@@ @@
    *     entry is another numerically indexed array containing two items: the
    *     the filter id and the array of filter arguments.
    *
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if in invalid placeholders are to be parsed.
    */
   protected function parseMainPlaceholderPart($main_part, $placeholder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/typed_data/src/Form/SubformState.php:30

    ---------- begin diff ----------
@@ @@
    *   array parents would be "fieldset" and "parent".
    * @param mixed[] $parentForm
    *   The subform's complete parent form array.
-   * @param \Drupal\Core\Form\FormStateInterface $parentFormState
+   * @param FormStateInterface $parentFormState
    *   The parent form state.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/typed_data/src/DataFilterManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginManagerInterface;

 /**
@@ @@
    *   An array of configuration relevant to the plugin instance. As this plugin
    *   is not configurable, this is unused and should stay empty.
    *
-   * @return \Drupal\typed_data\DataFilterInterface
+   * @return DataFilterInterface
    *   A fully configured plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function createInstance($plugin_id, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/typed_data/src/DataFilterInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\TypedData\DataDefinitionInterface;

@@ @@
   /**
    * Filters the given data value.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param mixed $value
    *   The value for which to apply the filter.
    * @param array $arguments
    *   The array of filter arguments.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    *
    * @return mixed
@@ @@
   /**
    * Determines whether data based upon the given definition can be filtered.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    *
    * @return bool
@@ @@
   /**
    * Describes the data after applying the filter.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param string[] $arguments
    *   The array of filter arguments.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The definition of the resulting data.
    */
   public function filtersTo(DataDefinitionInterface $definition, array $arguments);
@@ @@
    *
    * This is used to provide sensible auto-completion.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param string[] $arguments
    *   The array of filter arguments, which have been already inputted.
@@ @@
    * Determines whether the given arguments have a valid syntax and can be
    * applied to data of the given definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $definition
+   * @param DataDefinitionInterface $definition
    *   The definition of the filtered data.
    * @param string[] $arguments
    *   The array of filter arguments.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]|string[]
+   * @return TranslatableMarkup[]|string[]
    *   An array of translated validation error messages. If the arguments are
    *   valid, an empty array must be returned.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/typed_data/src/DataFetcherTrait.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The data fetcher.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * Sets the data fetcher.
    *
-   * @param \Drupal\typed_data\DataFetcherInterface $data_fetcher
+   * @param DataFetcherInterface $data_fetcher
    *   The data fetcher.
    *
    * @return $this
@@ @@
   /**
    * Gets the data fetcher.
    *
-   * @return \Drupal\typed_data\DataFetcherInterface
+   * @return DataFetcherInterface
    *   The data fetcher.
    */
   public function getDataFetcher() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/typed_data/src/DataFetcherInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data;

+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\typed_data\Exception\InvalidArgumentException;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Core\TypedData\TypedDataInterface;
@@ @@
   /**
    * Fetches data based upon the given property path.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $typed_data
+   * @param TypedDataInterface $typed_data
    *   The data from which to select a value.
    * @param string $property_path
    *   The property path string, e.g. "uid.entity.mail.value".
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    * @param string $langcode
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The variable wrapped as typed data.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    *   Thrown if the data cannot be fetched due to missing data; e.g., unset
    *   properties or list items.
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ @@
   /**
    * Fetches data based upon the given sub-paths.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $typed_data
+   * @param TypedDataInterface $typed_data
    *   The data from which to select a value.
    * @param string[] $sub_paths
    *   A list of sub paths; i.e., a property path separated into its parts.
-   * @param \Drupal\Core\Render\BubbleableMetadata|null $bubbleable_metadata
+   * @param BubbleableMetadata|null $bubbleable_metadata
    *   (optional) An object to which required bubbleable metadata will be added.
    * @param string $langcode
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The variable wrapped as typed data.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    *   Thrown if the data cannot be fetched due to missing data; e.g., unset
    *   properties or list items.
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ @@
   /**
    * Fetches a data definition based upon the given property path.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition from which to retrieve a nested definition.
    * @param string $property_path
    *   The property path string, e.g. "uid.entity.mail.value".
@@ @@
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The data definition of the target.
    *
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ @@
   /**
    * Fetches a data definition based upon the given sub-paths.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition from which to retrieve a nested definition.
    * @param string[] $sub_paths
    *   A list of sub paths; i.e., a property path separated into its parts.
@@ @@
    *   (optional) The language code used to get the argument value if the
    *   argument value should be translated. Defaults to NULL.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   The data definition of the target.
    *
-   * @throws \Drupal\typed_data\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   Thrown if the given path is not valid for the given data; e.g., a not
    *   existing property is referenced.
    */
@@ @@
   /**
    * Provides autocomplete suggestions for an incomplete property path.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface[] $data_definitions
+   * @param DataDefinitionInterface[] $data_definitions
    *   A map of available data definitions that should be seareched. The array
    *   keys are the first part of the property path.
    * @param string $partial_property_path
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/typed_data/src/DataFetcher.php:278

    ---------- begin diff ----------
@@ @@
   /**
    * Generates autocomplete suggestions for a matched data definition.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition to inspect.
    * @param string $variable_name
    *   The variable name or property path.
@@ @@
   /**
    * Adds the bubbleable metadata of the given data.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $data
+   * @param TypedDataInterface $data
    *   The data of which to add the metadata.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata to which to add the data.
    */
   protected function addBubbleableMetadata(TypedDataInterface $data, BubbleableMetadata $bubbleable_metadata) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/typed_data/src/Context/ContextDefinition.php:66

    ---------- begin diff ----------
@@ @@
    * @return static
    *   The created definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
+   * @throws ContextException
    *   If the required classes are not implemented.
    */
   public static function createFromArray(array $values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/typed_data/src/Context/Annotation/ContextDefinition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data\Context\Annotation;

+use Drupal\typed_data\Context\ContextDefinitionInterface;
 use Drupal\Core\Annotation\ContextDefinition as CoreContextDefinition;
 use Drupal\Core\Annotation\Translation;
 use Drupal\typed_data\Context\ContextDefinition as TypedDataContextDefinition;
@@ @@
   /**
    * The ContextDefinitionInterface object.
    *
-   * @var \Drupal\typed_data\Context\ContextDefinitionInterface
+   * @var ContextDefinitionInterface
    */
   protected $definition;

@@ @@
   /**
    * Returns the value of an annotation.
    *
-   * @return \Drupal\typed_data\Context\ContextDefinitionInterface
+   * @return ContextDefinitionInterface
    *   Return the Typed Data version of the ContextDefinitionInterface.
    */
   public function get() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/typed_data/src/Annotation/TypedDataFormWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The human-readable description of the widget.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


32) modules/contrib/typed_data/src/Annotation/DataFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\typed_data\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the filter.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 32 files have been changed by Rector                                      

