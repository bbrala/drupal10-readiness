diff --git a/modules/smart_content_block/smart_content_block.module b/modules/smart_content_block/smart_content_block.module
index 1c3038f..11f6d3d 100644
--- a/modules/smart_content_block/smart_content_block.module
+++ b/modules/smart_content_block/smart_content_block.module
@@ -24,7 +24,7 @@ function smart_content_block_entity_presave(EntityInterface $entity) {
     $entity_operations->handlePreSave($entity);
   }
   if (\Drupal::moduleHandler()->moduleExists('block_field') && $entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\smart_content_block\BlockFieldEntityOperations $entity_operations */
+    /** @var BlockFieldEntityOperations $entity_operations */
     $entity_operations = \Drupal::classResolver(BlockFieldEntityOperations::class);
     $entity_operations->handlePreSave($entity);
   }
@@ -40,7 +40,7 @@ function smart_content_block_entity_insert(EntityInterface $entity) {
     $entity_operations->handleInsert($entity);
   }
   if (\Drupal::moduleHandler()->moduleExists('block_field') && $entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\smart_content_block\BlockFieldEntityOperations $entity_operations */
+    /** @var BlockFieldEntityOperations $entity_operations */
     $entity_operations = \Drupal::classResolver(BlockFieldEntityOperations::class);
     $entity_operations->handleInsert($entity);
   }
@@ -56,7 +56,7 @@ function smart_content_block_entity_update(EntityInterface $entity) {
     $entity_operations->handleUpdate($entity);
   }
   if (\Drupal::moduleHandler()->moduleExists('block_field') && $entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\smart_content_block\BlockFieldEntityOperations $entity_operations */
+    /** @var BlockFieldEntityOperations $entity_operations */
     $entity_operations = \Drupal::classResolver(BlockFieldEntityOperations::class);
     $entity_operations->handleUpdate($entity);
   }
@@ -75,7 +75,7 @@ function smart_content_block_entity_predelete(EntityInterface $entity) {
     $entity_operations->handlePreDelete($entity);
   }
   if (\Drupal::moduleHandler()->moduleExists('block_field') && $entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\smart_content_block\BlockFieldEntityOperations $entity_operations */
+    /** @var BlockFieldEntityOperations $entity_operations */
     $entity_operations = \Drupal::classResolver(BlockFieldEntityOperations::class);
     $entity_operations->handlePreDelete($entity);
   }
diff --git a/modules/smart_content_block/src/BlockFieldEntityOperations.php b/modules/smart_content_block/src/BlockFieldEntityOperations.php
index 2370f24..6baaa2a 100644
--- a/modules/smart_content_block/src/BlockFieldEntityOperations.php
+++ b/modules/smart_content_block/src/BlockFieldEntityOperations.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\smart_content_block;
 
+use Drupal\smart_content\Decision\Storage\DecisionStorageInterface;
+use Drupal\smart_content\Plugin\smart_content\Decision\Storage\ContentEntity;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\smart_content\Decision\Storage\DecisionStorageManager;
@@ -22,14 +24,14 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
   /**
    * The decision storage plugin manager.
    *
-   * @var \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @var DecisionStorageInterface
    */
   protected $decisionStorageManager;
 
   /**
    * Constructs a new EntityOperations object.
    *
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageManager $decisionStorageManager
+   * @param DecisionStorageManager $decisionStorageManager
    *   The decision storage manager.
    */
   public function __construct(DecisionStorageManager $decisionStorageManager) {
@@ -48,7 +50,7 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles entity tracking on deleting a parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The parent entity.
    */
   public function handlePreDelete(ContentEntityInterface $entity) {
@@ -70,10 +72,10 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
   /**
    * Convert config decision storage to content decision storage.
    *
-   * @param \Drupal\smart_content\Plugin\smart_content\Decision\Storage\ConfigEntity $decision_storage
+   * @param ConfigEntity $decision_storage
    *   The decision storage config plugin.
    *
-   * @return \Drupal\smart_content\Plugin\smart_content\Decision\Storage\ContentEntity
+   * @return ContentEntity
    *   The decision storage content plugin.
    */
   protected function convertConfigToContent(ConfigEntity $decision_storage) {
@@ -89,7 +91,7 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
    * @param array $configuration
    *   The configuration array.
    *
-   * @return \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @return DecisionStorageInterface
    *   The decision storage instance.
    */
   protected function getDecisionStorageFromConfiguration(array $configuration) {
@@ -105,7 +107,7 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles saving a parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The parent entity.
    */
   public function handlePreSave(ContentEntityInterface $entity) {
@@ -144,7 +146,7 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles inserting a parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The parent entity.
    */
   public function handleInsert(ContentEntityInterface $entity) {
@@ -156,7 +158,7 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles updating a parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The parent entity.
    */
   public function handleUpdate(ContentEntityInterface $entity) {
@@ -184,7 +186,7 @@ class BlockFieldEntityOperations implements ContainerInjectionInterface {
   /**
    * Get the block field definitions from entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return array
diff --git a/modules/smart_content_block/src/BlockPluginCollection.php b/modules/smart_content_block/src/BlockPluginCollection.php
index 87af00a..64707df 100644
--- a/modules/smart_content_block/src/BlockPluginCollection.php
+++ b/modules/smart_content_block/src/BlockPluginCollection.php
@@ -13,7 +13,7 @@ class BlockPluginCollection extends DefaultLazyPluginCollection {
   /**
    * Adds an initialized plugin.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   An instantiated Block plugin.
    */
   public function add(BlockPluginInterface $block) {
diff --git a/modules/smart_content_block/src/ConfigBlockEntityOperations.php b/modules/smart_content_block/src/ConfigBlockEntityOperations.php
index e579bf4..c8a8a8d 100644
--- a/modules/smart_content_block/src/ConfigBlockEntityOperations.php
+++ b/modules/smart_content_block/src/ConfigBlockEntityOperations.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content_block;
 
+use Drupal\smart_content\Decision\Storage\DecisionStorageInterface;
 use Drupal\block\Entity\Block;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -19,14 +20,14 @@ class ConfigBlockEntityOperations implements ContainerInjectionInterface {
   /**
    * The decision storage plugin manager.
    *
-   * @var \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @var DecisionStorageInterface
    */
   protected $decisionStorageManager;
 
   /**
    * Constructs a new EntityOperations object.
    *
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageManager $decisionStorageManager
+   * @param DecisionStorageManager $decisionStorageManager
    *   The decision storage manager.
    */
   public function __construct(DecisionStorageManager $decisionStorageManager) {
@@ -45,7 +46,7 @@ class ConfigBlockEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles entity tracking on deleting a parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    */
   public function handlePreDelete(EntityInterface $entity) {
@@ -63,7 +64,7 @@ class ConfigBlockEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles saving a parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    */
   public function handlePreSave(EntityInterface $entity) {
@@ -83,7 +84,7 @@ class ConfigBlockEntityOperations implements ContainerInjectionInterface {
   /**
    * Helper function to check if entity is type decision block.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
diff --git a/modules/smart_content_block/src/EventSubscriber/LayoutBuilderComponentRenderArray.php b/modules/smart_content_block/src/EventSubscriber/LayoutBuilderComponentRenderArray.php
index e7c8fd3..864faf5 100644
--- a/modules/smart_content_block/src/EventSubscriber/LayoutBuilderComponentRenderArray.php
+++ b/modules/smart_content_block/src/EventSubscriber/LayoutBuilderComponentRenderArray.php
@@ -22,7 +22,7 @@ class LayoutBuilderComponentRenderArray implements EventSubscriberInterface {
   /**
    * Builds preview render array when block is being previewed.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The section component render event.
    */
   public function onBuildRender(SectionComponentBuildRenderArrayEvent $event) {
diff --git a/modules/smart_content_block/src/LayoutBuilderEntityOperations.php b/modules/smart_content_block/src/LayoutBuilderEntityOperations.php
index 1bcf5cd..3283e94 100644
--- a/modules/smart_content_block/src/LayoutBuilderEntityOperations.php
+++ b/modules/smart_content_block/src/LayoutBuilderEntityOperations.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content_block;
 
+use Drupal\smart_content\Decision\Storage\DecisionStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -26,14 +27,14 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
   /**
    * The decision storage plugin manager.
    *
-   * @var \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @var DecisionStorageInterface
    */
   protected $decisionStorageManager;
 
   /**
    * Constructs a new EntityOperations object.
    *
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageManager $decisionStorageManager
+   * @param DecisionStorageManager $decisionStorageManager
    *   The decision storage manager.
    */
   public function __construct(DecisionStorageManager $decisionStorageManager) {
@@ -52,7 +53,7 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles entity tracking on deleting a parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    */
   public function handlePreDelete(EntityInterface $entity) {
@@ -80,10 +81,10 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
   /**
    * Convert config decision storage to content decision storage.
    *
-   * @param \Drupal\smart_content\Plugin\smart_content\Decision\Storage\ConfigEntity $decision_storage
+   * @param ConfigEntity $decision_storage
    *   The decision storage config plugin.
    *
-   * @return \Drupal\smart_content\Plugin\smart_content\Decision\Storage\ContentEntity
+   * @return ContentEntity
    *   The decision storage content plugin.
    */
   protected function convertConfigToContent(ConfigEntity $decision_storage) {
@@ -99,7 +100,7 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
    * @param array $configuration
    *   The configuration array.
    *
-   * @return \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @return DecisionStorageInterface
    *   The decision storage instance.
    */
   protected function getDecisionStorageFromConfiguration(array $configuration) {
@@ -115,7 +116,7 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles saving a parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    */
   public function handlePreSave(EntityInterface $entity) {
@@ -176,7 +177,7 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles inserting a parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    */
   public function handleInsert(EntityInterface $entity) {
@@ -189,7 +190,7 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
   /**
    * Handles updating a parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    */
   public function handleUpdate(EntityInterface $entity) {
@@ -213,7 +214,7 @@ class LayoutBuilderEntityOperations implements ContainerInjectionInterface {
   /**
    * Iterate through layout builder components and find decision blocks.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The layout builder entity.
    *
    * @return array
diff --git a/modules/smart_content_block/src/Plugin/Block/DecisionBlock.php b/modules/smart_content_block/src/Plugin/Block/DecisionBlock.php
index c20cd6e..bcbc4f6 100644
--- a/modules/smart_content_block/src/Plugin/Block/DecisionBlock.php
+++ b/modules/smart_content_block/src/Plugin/Block/DecisionBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\smart_content_block\Plugin\Block;
 
+use Drupal\smart_content\Decision\Storage\DecisionStorageInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -35,14 +37,14 @@ class DecisionBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * The decision storage plugin manager.
    *
-   * @var \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @var DecisionStorageInterface
    */
   protected $decisionStorageManager;
 
   /**
    * The decision plugin manager.
    *
-   * @var \Drupal\smart_content\Decision\DecisionManager
+   * @var DecisionManager
    */
   protected $decisionManager;
 
@@ -55,12 +57,12 @@ class DecisionBlock extends BlockBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\smart_content\Decision\DecisionManager $decisionManager
+   * @param DecisionManager $decisionManager
    *   The decision plugin manager.
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageManager $decisionStorageManager
+   * @param DecisionStorageManager $decisionStorageManager
    *   The decision storage manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DecisionManager $decisionManager, DecisionStorageManager $decisionStorageManager) {
     $this->decisionManager = $decisionManager;
@@ -143,7 +145,7 @@ class DecisionBlock extends BlockBase implements ContainerFactoryPluginInterface
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current form state.
    * @param array $complete_form
    *   The complete form array.
@@ -199,7 +201,7 @@ class DecisionBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * Get the decision storage plugin.
    *
-   * @return \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @return DecisionStorageInterface
    *   The decision storage plugin.
    */
   public function getDecisionStorage() {
diff --git a/modules/smart_content_block/src/Plugin/smart_content/Decision/MultipleBlockDecision.php b/modules/smart_content_block/src/Plugin/smart_content/Decision/MultipleBlockDecision.php
index a89d98d..4163eb0 100644
--- a/modules/smart_content_block/src/Plugin/smart_content/Decision/MultipleBlockDecision.php
+++ b/modules/smart_content_block/src/Plugin/smart_content/Decision/MultipleBlockDecision.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content_block\Plugin\smart_content\Decision;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -30,7 +31,7 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\smart_content\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
@@ -50,15 +51,15 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\smart_content\SegmentSetStorage\SegmentSetStorageManager $segmentSetStorageManager
+   * @param SegmentSetStorageManager $segmentSetStorageManager
    *   The segment set storage plugin manager.
-   * @param \Drupal\smart_content\Reaction\ReactionManager $reactionManager
+   * @param ReactionManager $reactionManager
    *   The reaction plugin manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuidGenerator
+   * @param UuidInterface $uuidGenerator
    *   The uuid generator.
-   * @param \Drupal\smart_content\Condition\ConditionManager $conditionManager
+   * @param ConditionManager $conditionManager
    *   The condition plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SegmentSetStorageManager $segmentSetStorageManager, ReactionManager $reactionManager, EventDispatcherInterface $eventDispatcher, UuidInterface $uuidGenerator, ConditionManager $conditionManager) {
@@ -128,10 +129,10 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    * This method stubs the basic structure of the decision.  It prevents less
    * than 1 segment existing, and provides a reaction for each segment.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function stubDecision(FormStateInterface $form_state) {
     if ($this->getSegmentSetStorage() instanceof Inline) {
@@ -165,7 +166,7 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -290,7 +291,7 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -521,7 +522,7 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    *
    * @param array $form
    *   The segment form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function validateToggleSegmentDisplay(array $form, FormStateInterface $form_state) {
@@ -556,7 +557,7 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    *
    * @param array $form
    *   The segment form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function toggleSegmentDisplay(array $form, FormStateInterface $form_state) {
@@ -614,7 +615,7 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    *
    * @param array $form
    *   The segment form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array|mixed|null
@@ -729,7 +730,7 @@ class MultipleBlockDecision extends DecisionBase implements PlaceholderDecisionI
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/modules/smart_content_block/src/Plugin/smart_content/Reaction/DisplayBlocks.php b/modules/smart_content_block/src/Plugin/smart_content/Reaction/DisplayBlocks.php
index 473a399..7bb994a 100644
--- a/modules/smart_content_block/src/Plugin/smart_content/Reaction/DisplayBlocks.php
+++ b/modules/smart_content_block/src/Plugin/smart_content/Reaction/DisplayBlocks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content_block\Plugin\smart_content\Reaction;
 
+use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -31,28 +32,28 @@ class DisplayBlocks extends ReactionConfigurableBase implements ContainerFactory
   /**
    * Block plugin manager service.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * A plugin collection for lazy loading blocks.
    *
-   * @var \Drupal\Core\Plugin\DefaultLazyPluginCollection
+   * @var DefaultLazyPluginCollection
    */
   protected $blocksPluginCollection;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -72,11 +73,11 @@ class DisplayBlocks extends ReactionConfigurableBase implements ContainerFactory
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
+   * @param BlockManagerInterface $blockManager
    *   The block plugin manager service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The context repository service.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user account.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, BlockManagerInterface $blockManager, ContextRepositoryInterface $contextRepository, AccountInterface $currentUser) {
@@ -335,7 +336,7 @@ class DisplayBlocks extends ReactionConfigurableBase implements ContainerFactory
    *
    * @param array $form
    *   The plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function removeElementBlock(array &$form, FormStateInterface $form_state) {
@@ -355,7 +356,7 @@ class DisplayBlocks extends ReactionConfigurableBase implements ContainerFactory
    *
    * @param array $form
    *   The plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return mixed
@@ -416,7 +417,7 @@ class DisplayBlocks extends ReactionConfigurableBase implements ContainerFactory
   /**
    * Creates a plugin collection for blocks that are a part of this reaction.
    *
-   * @return \Drupal\Core\Plugin\DefaultLazyPluginCollection
+   * @return DefaultLazyPluginCollection
    *   The lazy plugin collection.
    */
   protected function getBlocksPluginCollection() {
diff --git a/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php b/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php
index 7eae620..e26badb 100644
--- a/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php
+++ b/modules/smart_content_block/tests/src/FunctionalJavascript/DecisionBlockFieldTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\smart_content_block\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -37,16 +40,16 @@ class DecisionBlockFieldTest extends WebDriverTestBase {
   /**
    * A user with permissions to administer content types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([], NULL, TRUE);
@@ -96,7 +99,7 @@ class DecisionBlockFieldTest extends WebDriverTestBase {
       'label' => 'Smart block',
     ])->save();
 
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('entity_test', 'entity_test')
       ->setComponent('field_smart_block', [
@@ -152,14 +155,14 @@ class DecisionBlockFieldTest extends WebDriverTestBase {
     $page->pressButton('Add Block');
 
     $assert->waitForField('field_smart_block[0][settings][decision][decision_settings][segments][32ed1776-9a27-4c06-be8c-a272825dd6a0][settings][reaction_settings][plugin_form][settings][blocks][system_powered_by_block][plugin_form][label]');
-    $this->drupalPostForm(NULL, NULL, 'Save');
+    $this->submitForm(NULL, 'Save');
 
     // Ensure that the front-end is rendering the proper persisted values.
     $assert->fieldValueEquals('Smart block', 'smart_content_decision_block');
     $assert->fieldValueEquals('Title', 'Decision Block');
     $assert->checkboxNotChecked('Display title');
 
-    self::assertContains('Powered by Drupal', $page->findById('edit-field-smart-block-wrapper')->getText());
+    self::assertStringContainsString('Powered by Drupal', $page->findById('edit-field-smart-block-wrapper')->getText());
 
     // Check the front-end to ensure that the block renders properly.
     $this->drupalGet('/entity_test/1');
diff --git a/src/Annotation/SmartCondition.php b/src/Annotation/SmartCondition.php
index a2e060b..98e79af 100644
--- a/src/Annotation/SmartCondition.php
+++ b/src/Annotation/SmartCondition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SmartCondition extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SmartConditionGroup.php b/src/Annotation/SmartConditionGroup.php
index 9302fa8..dfd83d5 100644
--- a/src/Annotation/SmartConditionGroup.php
+++ b/src/Annotation/SmartConditionGroup.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SmartConditionGroup extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SmartConditionType.php b/src/Annotation/SmartConditionType.php
index 0fec52d..7eeac11 100644
--- a/src/Annotation/SmartConditionType.php
+++ b/src/Annotation/SmartConditionType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SmartConditionType extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SmartDecision.php b/src/Annotation/SmartDecision.php
index ffd4fd9..45d3d13 100644
--- a/src/Annotation/SmartDecision.php
+++ b/src/Annotation/SmartDecision.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SmartDecision extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SmartDecisionStorage.php b/src/Annotation/SmartDecisionStorage.php
index 6c136d7..cacb87e 100644
--- a/src/Annotation/SmartDecisionStorage.php
+++ b/src/Annotation/SmartDecisionStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SmartDecisionStorage extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SmartReaction.php b/src/Annotation/SmartReaction.php
index f99419f..4114103 100644
--- a/src/Annotation/SmartReaction.php
+++ b/src/Annotation/SmartReaction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SmartReaction extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SmartSegmentSetStorage.php b/src/Annotation/SmartSegmentSetStorage.php
index dbb7170..d86b302 100644
--- a/src/Annotation/SmartSegmentSetStorage.php
+++ b/src/Annotation/SmartSegmentSetStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SmartSegmentSetStorage extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Cache/CacheableAjaxResponseAttachmentsProcessor.php b/src/Cache/CacheableAjaxResponseAttachmentsProcessor.php
index fc42e52..0453a88 100644
--- a/src/Cache/CacheableAjaxResponseAttachmentsProcessor.php
+++ b/src/Cache/CacheableAjaxResponseAttachmentsProcessor.php
@@ -19,23 +19,23 @@ class CacheableAjaxResponseAttachmentsProcessor implements AttachmentsResponsePr
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The original service.
    *
-   * @var \Drupal\Core\Render\AttachmentsResponseProcessorInterface
+   * @var AttachmentsResponseProcessorInterface
    */
   protected $originalService;
 
   /**
    * Constructs a AjaxResponseAttachmentsProcessor decorator.
    *
-   * @param \Drupal\Core\Render\AttachmentsResponseProcessorInterface $service
+   * @param AttachmentsResponseProcessorInterface $service
    *   The service we are decorating.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(AttachmentsResponseProcessorInterface $service, RequestStack $request_stack) {
diff --git a/src/Condition/ConditionBase.php b/src/Condition/ConditionBase.php
index 60a8587..b01a151 100644
--- a/src/Condition/ConditionBase.php
+++ b/src/Condition/ConditionBase.php
@@ -16,7 +16,7 @@ abstract class ConditionBase extends PluginBase implements ContainerFactoryPlugi
   /**
    * The condition group manager.
    *
-   * @var \Drupal\smart_content\Condition\Group\ConditionGroupManager
+   * @var ConditionGroupManager
    */
   protected $conditionGroupManager;
 
@@ -43,7 +43,7 @@ abstract class ConditionBase extends PluginBase implements ContainerFactoryPlugi
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\smart_content\Condition\Group\ConditionGroupManager $conditionGroupManager
+   * @param ConditionGroupManager $conditionGroupManager
    *   The condition group plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConditionGroupManager $conditionGroupManager) {
diff --git a/src/Condition/ConditionManager.php b/src/Condition/ConditionManager.php
index a7b9989..d309b40 100644
--- a/src/Condition/ConditionManager.php
+++ b/src/Condition/ConditionManager.php
@@ -16,7 +16,7 @@ class ConditionManager extends DefaultPluginManager implements FallbackPluginMan
   /**
    * The condition group plugin manager.
    *
-   * @var \Drupal\smart_content\Condition\Group\ConditionGroupManager
+   * @var ConditionGroupManager
    */
   protected $conditionGroupManager;
 
@@ -26,11 +26,11 @@ class ConditionManager extends DefaultPluginManager implements FallbackPluginMan
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\smart_content\Condition\Group\ConditionGroupManager $condition_group_manager
+   * @param ConditionGroupManager $condition_group_manager
    *   The condition group plugin manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ConditionGroupManager $condition_group_manager) {
diff --git a/src/Condition/ConditionPluginCollection.php b/src/Condition/ConditionPluginCollection.php
index 49242d0..4bf1d87 100644
--- a/src/Condition/ConditionPluginCollection.php
+++ b/src/Condition/ConditionPluginCollection.php
@@ -16,7 +16,7 @@ class ConditionPluginCollection extends DefaultLazyPluginCollection {
   /**
    * Adds an initialized plugin.
    *
-   * @param \Drupal\smart_content\Condition\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   An instantiated Condition plugin.
    */
   public function add(ConditionInterface $condition) {
diff --git a/src/Condition/ConditionTypeConfigurableBase.php b/src/Condition/ConditionTypeConfigurableBase.php
index 8125c65..2c8365e 100644
--- a/src/Condition/ConditionTypeConfigurableBase.php
+++ b/src/Condition/ConditionTypeConfigurableBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\smart_content\Condition;
 
+use Drupal\smart_content\Condition\Type\ConditionTypeInterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ObjectWithPluginCollectionInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -20,14 +22,14 @@ abstract class ConditionTypeConfigurableBase extends ConditionBase implements Pl
   /**
    * The condition type plugin manager.
    *
-   * @var \Drupal\smart_content\Condition\Type\ConditionTypeManager
+   * @var ConditionTypeManager
    */
   protected $conditionTypeManager;
 
   /**
    * The plugin collection to lazy load the condition type plugin.
    *
-   * @var \Drupal\smart_content\Condition\Type\ConditionTypeInterface
+   * @var ConditionTypeInterface
    */
   protected $conditionTypeCollection;
 
@@ -40,9 +42,9 @@ abstract class ConditionTypeConfigurableBase extends ConditionBase implements Pl
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\smart_content\Condition\Group\ConditionGroupManager $conditionGroupManager
+   * @param ConditionGroupManager $conditionGroupManager
    *   The condition group plugin manager.
-   * @param \Drupal\smart_content\Condition\Type\ConditionTypeManager $conditionTypeManager
+   * @param ConditionTypeManager $conditionTypeManager
    *   The condition type plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConditionGroupManager $conditionGroupManager, ConditionTypeManager $conditionTypeManager) {
@@ -66,7 +68,7 @@ abstract class ConditionTypeConfigurableBase extends ConditionBase implements Pl
   /**
    * Helper function to return condition type.
    *
-   * @return \Drupal\smart_content\Condition\Type\ConditionTypeInterface|object
+   * @return ConditionTypeInterface|object
    *   The condition type.
    */
   public function getConditionType() {
@@ -77,7 +79,7 @@ abstract class ConditionTypeConfigurableBase extends ConditionBase implements Pl
   /**
    * Gets the plugin collections used by this object.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ -90,7 +92,7 @@ abstract class ConditionTypeConfigurableBase extends ConditionBase implements Pl
   /**
    * Encapsulates the creation of the conditions's LazyPluginCollection.
    *
-   * @return \Drupal\smart_content\Condition\Type\ConditionTypePluginCollection
+   * @return ConditionTypePluginCollection
    *   The condition's type plugin collection.
    */
   protected function getConditionTypePluginCollection() {
diff --git a/src/Condition/ConditionsHelperTrait.php b/src/Condition/ConditionsHelperTrait.php
index b36bd9b..5ff779b 100644
--- a/src/Condition/ConditionsHelperTrait.php
+++ b/src/Condition/ConditionsHelperTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Condition;
 
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Plugin\ObjectWithPluginCollectionInterface;
 
 /**
@@ -21,14 +22,14 @@ trait ConditionsHelperTrait {
   /**
    * The plugin collection that holds the block plugin for this entity.
    *
-   * @var \Drupal\smart_content\Condition\ConditionPluginCollection
+   * @var ConditionPluginCollection
    */
   protected $conditionCollection;
 
   /**
    * Returns the conditions of the Segment.
    *
-   * @return \Drupal\smart_content\Condition\ConditionPluginCollection
+   * @return ConditionPluginCollection
    *   The conditions.
    */
   public function getConditions() {
@@ -41,7 +42,7 @@ trait ConditionsHelperTrait {
    * @param string $id
    *   The ID of the condition to retrieve.
    *
-   * @return \Drupal\smart_content\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The condition.
    *
    * @throws \InvalidArgumentException
@@ -56,7 +57,7 @@ trait ConditionsHelperTrait {
    *
    * @param string $instance_id
    *   The condition instance id.
-   * @param \Drupal\smart_content\Condition\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition.
    *
    * @return $this
@@ -73,7 +74,7 @@ trait ConditionsHelperTrait {
    * Append will automatically generate a unique instance id if collision
    * with other plugin of same type.
    *
-   * @param \Drupal\smart_content\Condition\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition plugin.
    *
    * @return $this
@@ -99,7 +100,7 @@ trait ConditionsHelperTrait {
   /**
    * Gets the plugin collections used by this object.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ -108,7 +109,7 @@ trait ConditionsHelperTrait {
   /**
    * Encapsulates the creation of the conditions's LazyPluginCollection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The block's plugin collection.
    */
   protected function getConditionPluginCollection() {
diff --git a/src/Condition/Group/ConditionGroupManager.php b/src/Condition/Group/ConditionGroupManager.php
index 80c3ebe..8d5f86b 100644
--- a/src/Condition/Group/ConditionGroupManager.php
+++ b/src/Condition/Group/ConditionGroupManager.php
@@ -17,9 +17,9 @@ class ConditionGroupManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Condition/ObjectWithConditionPluginCollectionInterface.php b/src/Condition/ObjectWithConditionPluginCollectionInterface.php
index 45e532c..9142180 100644
--- a/src/Condition/ObjectWithConditionPluginCollectionInterface.php
+++ b/src/Condition/ObjectWithConditionPluginCollectionInterface.php
@@ -16,7 +16,7 @@ interface ObjectWithConditionPluginCollectionInterface extends ObjectWithPluginC
   /**
    * Returns the plugin collection of conditions.
    *
-   * @return \Drupal\smart_content\Condition\ConditionPluginCollection[]
+   * @return ConditionPluginCollection[]
    *   The conditions.
    */
   public function getConditions();
@@ -29,7 +29,7 @@ interface ObjectWithConditionPluginCollectionInterface extends ObjectWithPluginC
    * @param string $instance_id
    *   The instance ID of the condition to retrieve.
    *
-   * @return \Drupal\smart_content\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The condition.
    *
    * @throws \InvalidArgumentException
diff --git a/src/Condition/Type/ConditionTypeManager.php b/src/Condition/Type/ConditionTypeManager.php
index 0e8fe8c..abd1922 100644
--- a/src/Condition/Type/ConditionTypeManager.php
+++ b/src/Condition/Type/ConditionTypeManager.php
@@ -17,9 +17,9 @@ class ConditionTypeManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Condition/Type/ConditionTypePluginCollection.php b/src/Condition/Type/ConditionTypePluginCollection.php
index 6ac5a9c..7ed3566 100644
--- a/src/Condition/Type/ConditionTypePluginCollection.php
+++ b/src/Condition/Type/ConditionTypePluginCollection.php
@@ -16,20 +16,20 @@ class ConditionTypePluginCollection extends DefaultSingleLazyPluginCollection {
   /**
    * The condition using this type.
    *
-   * @var \Drupal\smart_content\Condition\ConditionInterface
+   * @var ConditionInterface
    */
   protected $condition;
 
   /**
    * Constructs a new DefaultSingleLazyPluginCollection object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
    * @param array $configuration
    *   An array of configuration.
-   * @param \Drupal\smart_content\Condition\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   A condition plugin.
    */
   public function __construct(PluginManagerInterface $manager, $instance_id, array $configuration, ConditionInterface $condition) {
diff --git a/src/Controller/ReactionController.php b/src/Controller/ReactionController.php
index 4b6a020..dbea633 100644
--- a/src/Controller/ReactionController.php
+++ b/src/Controller/ReactionController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Controller;
 
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\smart_content\Cache\CacheableAjaxResponse;
@@ -16,14 +17,14 @@ class ReactionController extends ControllerBase {
   /**
    * Get the reaction response.
    *
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageInterface $decision_storage
+   * @param DecisionStorageInterface $decision_storage
    *   The decision storage plugin.
    * @param string $token
    *   The token of the decision instance.
    * @param string $reaction
    *   The reaction plugin id.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Return the ajax response.
    */
   public function getReactionResponse(DecisionStorageInterface $decision_storage, $token, $reaction) {
diff --git a/src/Decision/DecisionBase.php b/src/Decision/DecisionBase.php
index 21cd4c2..610b6ab 100644
--- a/src/Decision/DecisionBase.php
+++ b/src/Decision/DecisionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Decision;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Messenger\MessengerTrait;
@@ -35,28 +36,28 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
   /**
    * The segment set storage plugin manager.
    *
-   * @var \Drupal\smart_content\SegmentSetStorage\SegmentSetStorageManager
+   * @var SegmentSetStorageManager
    */
   protected $segmentSetStorageManager;
 
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\smart_content\Reaction\ReactionManager
+   * @var ReactionManager
    */
   protected $reactionManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The uuid generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
@@ -91,7 +92,7 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
   /**
    * The plugin collection that holds the block plugin for this entity.
    *
-   * @var \Drupal\smart_content\Reaction\ReactionPluginCollection
+   * @var ReactionPluginCollection
    */
   protected $reactionCollection;
 
@@ -99,7 +100,7 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
   /**
    * The plugin collection that holds the block plugin for this entity.
    *
-   * @var \Drupal\smart_content\Reaction\ReactionPluginCollection
+   * @var ReactionPluginCollection
    */
   protected $segmentStorageCollection;
 
@@ -112,13 +113,13 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\smart_content\SegmentSetStorage\SegmentSetStorageManager $segmentSetStorageManager
+   * @param SegmentSetStorageManager $segmentSetStorageManager
    *   The segment set storage plugin manager.
-   * @param \Drupal\smart_content\Reaction\ReactionManager $reactionManager
+   * @param ReactionManager $reactionManager
    *   The reaction plugin manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuidGenerator
+   * @param UuidInterface $uuidGenerator
    *   The uuid generator.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SegmentSetStorageManager $segmentSetStorageManager, ReactionManager $reactionManager, EventDispatcherInterface $eventDispatcher, UuidInterface $uuidGenerator) {
@@ -208,7 +209,7 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
   /**
    * Encapsulates the creation of the reactions's LazyPluginCollection.
    *
-   * @return \Drupal\smart_content\Reaction\ReactionPluginCollection
+   * @return ReactionPluginCollection
    *   The reaction's plugin collection.
    */
   protected function getReactionPluginCollection() {
@@ -226,7 +227,7 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
   /**
    * Encapsulates the creation of the segment storage's LazyPluginCollection.
    *
-   * @return \Drupal\smart_content\Reaction\ReactionPluginCollection
+   * @return ReactionPluginCollection
    *   The block's plugin collection.
    */
   protected function getSegmentStoragePluginCollection() {
@@ -385,8 +386,8 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
       $settings['decisions'][$this->getToken()] = $decision_settings;
     }
     // Dispatch an event so other modules can alter settings.
-    $this->eventDispatcher->dispatch(AttachDecisionSettingsEvent::EVENT_NAME,
-      new AttachDecisionSettingsEvent($settings));
+    $this->eventDispatcher->dispatch(new AttachDecisionSettingsEvent($settings),
+      AttachDecisionSettingsEvent::EVENT_NAME);
     return $settings;
   }
 
@@ -511,10 +512,10 @@ abstract class DecisionBase extends ContextAwarePluginBase implements ContainerF
   /**
    * Maps decision context to child.
    *
-   * @param \Drupal\Core\Plugin\ContextAwarePluginInterface $child_plugin
+   * @param ContextAwarePluginInterface $child_plugin
    *   The child plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function mapContextsToChildPlugin(ContextAwarePluginInterface $child_plugin) {
     $definitions = $this->getContextDefinitions();
diff --git a/src/Decision/DecisionInterface.php b/src/Decision/DecisionInterface.php
index d65f27b..315c087 100644
--- a/src/Decision/DecisionInterface.php
+++ b/src/Decision/DecisionInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\smart_content\Decision;
 
+use Drupal\smart_content\Reaction\ReactionPluginCollection;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\smart_content\AttachedJavaScriptInterface;
 use Drupal\smart_content\Decision\Storage\DecisionStorageInterface;
@@ -16,7 +19,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
   /**
    * Returns the reactions of the ReactionSet.
    *
-   * @return \Drupal\smart_content\Reaction\ReactionPluginCollection
+   * @return ReactionPluginCollection
    *   The reactions.
    */
   public function getReactions();
@@ -27,7 +30,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
    * @param string $id
    *   The ID of the reaction to retrieve.
    *
-   * @return \Drupal\smart_content\Reaction\ReactionInterface
+   * @return ReactionInterface
    *   The reaction.
    *
    * @throws \InvalidArgumentException
@@ -54,7 +57,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
    *
    * @param string $instance_id
    *   The reaction id, usually the segment Uuid.
-   * @param \Drupal\smart_content\Reaction\ReactionInterface $reaction
+   * @param ReactionInterface $reaction
    *   The reaction.
    *
    * @return $this
@@ -74,7 +77,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
   /**
    * Appends a reaction to the end of the reaction array.
    *
-   * @param \Drupal\smart_content\Reaction\ReactionInterface $reaction
+   * @param ReactionInterface $reaction
    *   The reaction.
    *
    * @return \Drupal\smart_content\Decision\DecisionInterface
@@ -85,7 +88,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
   /**
    * Gets the plugin collections used by this object.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ -94,7 +97,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
   /**
    * Sets the segment set storage plugin.
    *
-   * @param \Drupal\smart_content\SegmentSetStorage\SegmentSetStorageInterface $segment_set_storage
+   * @param SegmentSetStorageInterface $segment_set_storage
    *   The segment_set_storage plugin.
    *
    * @return \Drupal\smart_content\Decision\DecisionInterface
@@ -105,7 +108,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
   /**
    * Gets the segment set storage plugin.
    *
-   * @return \Drupal\smart_content\SegmentSetStorage\SegmentSetStorageInterface
+   * @return SegmentSetStorageInterface
    *   The segment set storage plugin.
    */
   public function getSegmentSetStorage();
@@ -113,10 +116,10 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
   /**
    * Retrieve the AjaxResponse for a Reaction.
    *
-   * @param \Drupal\smart_content\Reaction\ReactionInterface $reaction
+   * @param ReactionInterface $reaction
    *   The Reaction.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function getResponse(ReactionInterface $reaction);
@@ -159,7 +162,7 @@ interface DecisionInterface extends PluginInspectionInterface, AttachedJavaScrip
   /**
    * Sets the storage id from the decision storage plugin.
    *
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageInterface $decision_storage
+   * @param DecisionStorageInterface $decision_storage
    *   The decision storage plugin.
    *
    * @return $this
diff --git a/src/Decision/DecisionManager.php b/src/Decision/DecisionManager.php
index 5a6f4fd..f1c7a72 100644
--- a/src/Decision/DecisionManager.php
+++ b/src/Decision/DecisionManager.php
@@ -17,9 +17,9 @@ class DecisionManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Decision/Storage/DecisionStorageBase.php b/src/Decision/Storage/DecisionStorageBase.php
index 76299c8..5d52162 100644
--- a/src/Decision/Storage/DecisionStorageBase.php
+++ b/src/Decision/Storage/DecisionStorageBase.php
@@ -15,7 +15,7 @@ abstract class DecisionStorageBase extends PluginBase implements DecisionStorage
   /**
    * The decision plugin instance.
    *
-   * @var \Drupal\smart_content\Decision\DecisionInterface
+   * @var DecisionInterface
    */
   protected $decision;
 
@@ -67,9 +67,9 @@ abstract class DecisionStorageBase extends PluginBase implements DecisionStorage
    *
    * @param array $parents
    *   An array of parents.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The forms state.
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageInterface $decision_storage
+   * @param DecisionStorageInterface $decision_storage
    *   The decision storage you want to save.
    */
   public static function setWidgetState(array $parents, FormStateInterface $form_state, DecisionStorageInterface $decision_storage) {
@@ -83,10 +83,10 @@ abstract class DecisionStorageBase extends PluginBase implements DecisionStorage
    *
    * @param array $parents
    *   An array of parents.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The forms state.
    *
-   * @return \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @return DecisionStorageInterface
    *   The decision storage object.
    */
   public static function getWidgetState(array $parents, FormStateInterface $form_state) {
diff --git a/src/Decision/Storage/DecisionStorageEntityBase.php b/src/Decision/Storage/DecisionStorageEntityBase.php
index 5815f63..9389419 100644
--- a/src/Decision/Storage/DecisionStorageEntityBase.php
+++ b/src/Decision/Storage/DecisionStorageEntityBase.php
@@ -14,7 +14,7 @@ abstract class DecisionStorageEntityBase extends DecisionStorageBase implements
   /**
    * The decision entity.
    *
-   * @var \Drupal\smart_content\Entity\DecisionEntityInterface
+   * @var DecisionEntityInterface
    */
   protected $entity;
 
diff --git a/src/Decision/Storage/DecisionStorageEntityInterface.php b/src/Decision/Storage/DecisionStorageEntityInterface.php
index 79510a1..5b75dba 100644
--- a/src/Decision/Storage/DecisionStorageEntityInterface.php
+++ b/src/Decision/Storage/DecisionStorageEntityInterface.php
@@ -23,7 +23,7 @@ interface DecisionStorageEntityInterface {
   /**
    * Set the entity.
    *
-   * @param \Drupal\smart_content\Entity\DecisionEntityInterface $entity
+   * @param DecisionEntityInterface $entity
    *   The decision entity.
    *
    * @return $this
@@ -34,7 +34,7 @@ interface DecisionStorageEntityInterface {
   /**
    * Get the entity.
    *
-   * @return \Drupal\smart_content\Entity\DecisionEntityInterface
+   * @return DecisionEntityInterface
    *   The decision entity.
    */
   public function getEntity();
diff --git a/src/Decision/Storage/DecisionStorageInterface.php b/src/Decision/Storage/DecisionStorageInterface.php
index 6a7ce57..355faac 100644
--- a/src/Decision/Storage/DecisionStorageInterface.php
+++ b/src/Decision/Storage/DecisionStorageInterface.php
@@ -14,7 +14,7 @@ interface DecisionStorageInterface extends PluginInspectionInterface, Configurab
   /**
    * Get the decision plugin.
    *
-   * @return \Drupal\smart_content\Decision\DecisionInterface
+   * @return DecisionInterface
    *   The decision plugin.
    */
   public function getDecision();
@@ -22,7 +22,7 @@ interface DecisionStorageInterface extends PluginInspectionInterface, Configurab
   /**
    * Set the decision plugin.
    *
-   * @param \Drupal\smart_content\Decision\DecisionInterface $decision
+   * @param DecisionInterface $decision
    *   The decision plugin.
    *
    * @return $this
diff --git a/src/Decision/Storage/DecisionStorageManager.php b/src/Decision/Storage/DecisionStorageManager.php
index 323a8ce..ca0bbf0 100644
--- a/src/Decision/Storage/DecisionStorageManager.php
+++ b/src/Decision/Storage/DecisionStorageManager.php
@@ -17,9 +17,9 @@ class DecisionStorageManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Decision/Storage/RevisionableParentEntityUsageInterface.php b/src/Decision/Storage/RevisionableParentEntityUsageInterface.php
index a4fe32e..06fa162 100644
--- a/src/Decision/Storage/RevisionableParentEntityUsageInterface.php
+++ b/src/Decision/Storage/RevisionableParentEntityUsageInterface.php
@@ -20,7 +20,7 @@ interface RevisionableParentEntityUsageInterface {
    * in the latest revision, we provide a cleanup method to find usage in
    * past revisions.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $parent_entity
+   * @param RevisionableInterface $parent_entity
    *   The parent entity.
    */
   public static function deleteByParent(RevisionableInterface $parent_entity);
@@ -28,7 +28,7 @@ interface RevisionableParentEntityUsageInterface {
   /**
    * Retrieve usage by parent entity.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $parent_entity
+   * @param RevisionableInterface $parent_entity
    *   The parent entity.
    *
    * @return array
@@ -39,7 +39,7 @@ interface RevisionableParentEntityUsageInterface {
   /**
    * Add a usage reference.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $parent_entity
+   * @param RevisionableInterface $parent_entity
    *   The parent entity.
    *
    * @return $this
diff --git a/src/Entity/DecisionConfig.php b/src/Entity/DecisionConfig.php
index 1566e59..97f65d6 100644
--- a/src/Entity/DecisionConfig.php
+++ b/src/Entity/DecisionConfig.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\smart_content\Entity;
 
+use Drupal\block\BlockPluginCollection;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\smart_content\Decision\DecisionInterface;
@@ -54,21 +56,21 @@ class DecisionConfig extends ConfigEntityBase implements EntityWithPluginCollect
   /**
    * The plugin collection that holds the block plugin for this entity.
    *
-   * @var \Drupal\block\BlockPluginCollection
+   * @var BlockPluginCollection
    */
   protected $pluginCollection;
 
   /**
    * The decision object.
    *
-   * @var \Drupal\smart_content\Decision\DecisionInterface
+   * @var DecisionInterface
    */
   protected $decision;
 
   /**
    * Encapsulates the creation of the block's LazyPluginCollection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The block's plugin collection.
    */
   protected function getPluginCollection() {
diff --git a/src/Entity/DecisionEntityInterface.php b/src/Entity/DecisionEntityInterface.php
index 7d06aae..7ad2ade 100644
--- a/src/Entity/DecisionEntityInterface.php
+++ b/src/Entity/DecisionEntityInterface.php
@@ -12,7 +12,7 @@ interface DecisionEntityInterface {
   /**
    * Get the decision plugin.
    *
-   * @return \Drupal\smart_content\Decision\DecisionInterface
+   * @return DecisionInterface
    *   The decision plugin.
    */
   public function getDecision();
@@ -28,7 +28,7 @@ interface DecisionEntityInterface {
   /**
    * Set the decision plugin.
    *
-   * @param \Drupal\smart_content\Decision\DecisionInterface $decision
+   * @param DecisionInterface $decision
    *   The decision plugin.
    *
    * @return $this
diff --git a/src/Entity/SegmentSetConfig.php b/src/Entity/SegmentSetConfig.php
index 5a58a96..10dc78a 100644
--- a/src/Entity/SegmentSetConfig.php
+++ b/src/Entity/SegmentSetConfig.php
@@ -71,7 +71,7 @@ class SegmentSetConfig extends ConfigEntityBase {
   /**
    * The SegmentSet instance.
    *
-   * @var \Drupal\smart_content\SegmentSet
+   * @var SegmentSet
    */
   protected $segmentSetInstance;
 
@@ -86,7 +86,7 @@ class SegmentSetConfig extends ConfigEntityBase {
   /**
    * Get SegmentSet instance.
    *
-   * @return \Drupal\smart_content\SegmentSet
+   * @return SegmentSet
    *   The segment set instance.
    */
   public function getSegmentSet() {
@@ -99,7 +99,7 @@ class SegmentSetConfig extends ConfigEntityBase {
    * Generally this is only needed when overriding the instantiated SegmentSet,
    * as normally this instance is automatically loaded during __construct().
    *
-   * @param \Drupal\smart_content\SegmentSet $segment_set
+   * @param SegmentSet $segment_set
    *   The segment set.
    *
    * @return $this
diff --git a/src/Event/AttachDecisionSettingsEvent.php b/src/Event/AttachDecisionSettingsEvent.php
index be70f04..9c53d57 100644
--- a/src/Event/AttachDecisionSettingsEvent.php
+++ b/src/Event/AttachDecisionSettingsEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\smart_content\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event that is fired when decision is attaching settings.
diff --git a/src/Form/SegmentSetConfigEntityForm.php b/src/Form/SegmentSetConfigEntityForm.php
index 1becd7c..970421f 100644
--- a/src/Form/SegmentSetConfigEntityForm.php
+++ b/src/Form/SegmentSetConfigEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Form;
 
+use Drupal\smart_content\Condition\ConditionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityForm;
@@ -26,7 +27,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
   /**
    * SmartSegmentSet entity.
    *
-   * @var \Drupal\smart_content\Entity\SegmentSetConfig
+   * @var SegmentSetConfig
    */
   protected $entity;
 
@@ -40,7 +41,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
   /**
    * Condition plugin manager.
    *
-   * @var \Drupal\smart_content\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
@@ -70,7 +71,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
   /**
    * Stub entity with minimal segments and segment conditions.
    *
-   * @param \Drupal\smart_content\Entity\SegmentSetConfig $entity
+   * @param SegmentSetConfig $entity
    *   The segment set entity.
    */
   public function stubEntity(SegmentSetConfig $entity) {
@@ -81,7 +82,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
         $segment->setLabel(static::getUniqueSegmentLabel($segment_set));
       }
       if ($segment->getConditions()->count() === 0) {
-        /** @var \Drupal\smart_content\Condition\ConditionInterface $group_condition */
+        /** @var ConditionInterface $group_condition */
         $group_condition = $this->conditionManager->createInstance('group');
         $segment->appendCondition($group_condition);
       }
@@ -338,7 +339,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    *
    * @param array $form
    *   The segment form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function validateToggleSegmentDisplay(array $form, FormStateInterface $form_state) {
@@ -370,7 +371,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    *
    * @param array $form
    *   The segment form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function toggleSegmentDisplay(array $form, FormStateInterface $form_state) {
@@ -431,7 +432,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    *
    * @param array $form
    *   The segment form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array|mixed|null
@@ -500,7 +501,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
   /**
    * Maps form values to segment set.
    *
-   * @param \Drupal\smart_content\SegmentSet $segment_set
+   * @param SegmentSet $segment_set
    *   The segment set object.
    * @param array $values
    *   The form values.
@@ -570,7 +571,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $relative_parents
    *   Array of keys for accessing segment data.
@@ -733,7 +734,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    *   Plugin to load form from.
    * @param array $form
    *   Parent form to embed form on.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state from parent form.
    * @param array $parents
    *   Array of keys for embedded form.
@@ -759,7 +760,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    *   Plugin to load form from.
    * @param array $form
    *   Parent form to embed form on.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state from parent form.
    * @param array $parents
    *   Array of keys for embedded form.
@@ -782,7 +783,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    *   Plugin to load form from.
    * @param array $form
    *   Parent form to embed form on.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state from parent form.
    * @param array $parents
    *   Array of keys for embedded form.
@@ -804,7 +805,7 @@ class SegmentSetConfigEntityForm extends EntityForm {
    * Function is called recursively, each time incrementing the delta until
    * a unique label is created.
    *
-   * @param \Drupal\smart_content\SegmentSet $segment_set
+   * @param SegmentSet $segment_set
    *   The segment set.
    * @param int $delta
    *   The delta of the segment.
diff --git a/src/Plugin/DataType/DecisionData.php b/src/Plugin/DataType/DecisionData.php
index 18dd890..d775c00 100644
--- a/src/Plugin/DataType/DecisionData.php
+++ b/src/Plugin/DataType/DecisionData.php
@@ -22,7 +22,7 @@ class DecisionData extends TypedData {
   /**
    * The decision object.
    *
-   * @var \Drupal\smart_content\Decision\DecisionInterface
+   * @var DecisionInterface
    */
   protected $value;
 
diff --git a/src/Plugin/Field/FieldType/DecisionItem.php b/src/Plugin/Field/FieldType/DecisionItem.php
index ced4946..771fcec 100644
--- a/src/Plugin/Field/FieldType/DecisionItem.php
+++ b/src/Plugin/Field/FieldType/DecisionItem.php
@@ -52,7 +52,7 @@ class DecisionItem extends FieldItemBase {
    *
    * Helper function for setting the field value from the decision object.
    *
-   * @param \Drupal\smart_content\Decision\DecisionInterface $decision
+   * @param DecisionInterface $decision
    *   The decision object.
    *
    * @return $this
@@ -68,7 +68,7 @@ class DecisionItem extends FieldItemBase {
    *
    * Helper function to get the decision from the configuration field value.
    *
-   * @return \Drupal\smart_content\Decision\DecisionInterface
+   * @return DecisionInterface
    *   The decision instance.
    */
   public function getDecision() {
diff --git a/src/Plugin/smart_content/Condition/Group.php b/src/Plugin/smart_content/Condition/Group.php
index 932b875..5ed74fb 100644
--- a/src/Plugin/smart_content/Condition/Group.php
+++ b/src/Plugin/smart_content/Condition/Group.php
@@ -38,7 +38,7 @@ class Group extends ConditionConfigurableBase implements ObjectWithConditionPlug
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\smart_content\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
@@ -51,9 +51,9 @@ class Group extends ConditionConfigurableBase implements ObjectWithConditionPlug
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\smart_content\Condition\Group\ConditionGroupManager $conditionGroupManager
+   * @param ConditionGroupManager $conditionGroupManager
    *   The condition group plugin manager.
-   * @param \Drupal\smart_content\Condition\ConditionManager $conditionManager
+   * @param ConditionManager $conditionManager
    *   The condition manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConditionGroupManager $conditionGroupManager, ConditionManager $conditionManager) {
diff --git a/src/Plugin/smart_content/Decision/Storage/ConfigEntity.php b/src/Plugin/smart_content/Decision/Storage/ConfigEntity.php
index 0e9e38b..e06d4dd 100644
--- a/src/Plugin/smart_content/Decision/Storage/ConfigEntity.php
+++ b/src/Plugin/smart_content/Decision/Storage/ConfigEntity.php
@@ -23,7 +23,7 @@ class ConfigEntity extends DecisionStorageEntityBase implements ContainerFactory
   /**
    * The uuid generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidGenerator;
 
@@ -36,7 +36,7 @@ class ConfigEntity extends DecisionStorageEntityBase implements ContainerFactory
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuidGenerator
+   * @param UuidInterface $uuidGenerator
    *   The uuid generator.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UuidInterface $uuidGenerator) {
@@ -166,7 +166,7 @@ class ConfigEntity extends DecisionStorageEntityBase implements ContainerFactory
    *
    * @param array $context
    *   The batch context.
-   * @param \Drupal\Core\Config\ConfigImporter $config_importer
+   * @param ConfigImporter $config_importer
    *   The config importer.
    */
   public static function importerProcess(array &$context, ConfigImporter $config_importer) {
diff --git a/src/Plugin/smart_content/SegmentSetStorage/Derivative/GlobalSegmentSetDeriver.php b/src/Plugin/smart_content/SegmentSetStorage/Derivative/GlobalSegmentSetDeriver.php
index 09cc3ad..5b755be 100644
--- a/src/Plugin/smart_content/SegmentSetStorage/Derivative/GlobalSegmentSetDeriver.php
+++ b/src/Plugin/smart_content/SegmentSetStorage/Derivative/GlobalSegmentSetDeriver.php
@@ -18,23 +18,23 @@ class GlobalSegmentSetDeriver extends DeriverBase implements ContainerDeriverInt
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The segment set entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $segmentSetEntityStorage;
 
   /**
    * DemandbaseConditionDeriver constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $segment_set_entity_storage
+   * @param EntityStorageInterface $segment_set_entity_storage
    *   The entity storage manager.
    */
   public function __construct(MessengerInterface $messenger, EntityStorageInterface $segment_set_entity_storage) {
diff --git a/src/Plugin/smart_content/SegmentSetStorage/GlobalSegmentSet.php b/src/Plugin/smart_content/SegmentSetStorage/GlobalSegmentSet.php
index 65a7ea8..70e7ae8 100644
--- a/src/Plugin/smart_content/SegmentSetStorage/GlobalSegmentSet.php
+++ b/src/Plugin/smart_content/SegmentSetStorage/GlobalSegmentSet.php
@@ -21,7 +21,7 @@ class GlobalSegmentSet extends SegmentSetStorageBase implements CacheableDepende
   /**
    * The segment set entity.
    *
-   * @var \Drupal\smart_content\Entity\SegmentSetConfig
+   * @var SegmentSetConfig
    */
   protected $entity;
 
diff --git a/src/Reaction/ReactionInterface.php b/src/Reaction/ReactionInterface.php
index e56ba50..eeddb91 100644
--- a/src/Reaction/ReactionInterface.php
+++ b/src/Reaction/ReactionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content\Reaction;
 
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\smart_content\Decision\PlaceholderDecisionInterface;
 use Drupal\smart_content\Segment;
@@ -30,7 +31,7 @@ interface ReactionInterface extends PluginInspectionInterface {
    *
    * Adds a Segment class to the Reaction as a dependency.
    *
-   * @param \Drupal\smart_content\Segment $segment
+   * @param Segment $segment
    *   A Segment object.
    *
    * @return $this
@@ -41,11 +42,11 @@ interface ReactionInterface extends PluginInspectionInterface {
   /**
    * Return an AJAX response.
    *
-   * @param \Drupal\smart_content\Decision\PlaceholderDecisionInterface $decision
+   * @param PlaceholderDecisionInterface $decision
    *   A decision instance, for context.
    *   todo: Should we require this to be placeholder decision interface?
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response to replace placeholder content.
    */
   public function getResponse(PlaceholderDecisionInterface $decision);
diff --git a/src/Reaction/ReactionPluginCollection.php b/src/Reaction/ReactionPluginCollection.php
index 72c530b..45b6149 100644
--- a/src/Reaction/ReactionPluginCollection.php
+++ b/src/Reaction/ReactionPluginCollection.php
@@ -12,7 +12,7 @@ class ReactionPluginCollection extends DefaultLazyPluginCollection {
   /**
    * Adds an initialized plugin.
    *
-   * @param \Drupal\smart_content\Reaction\ReactionInterface $reaction
+   * @param ReactionInterface $reaction
    *   An instantiated Reaction plugin.
    */
   public function add(ReactionInterface $reaction) {
diff --git a/src/RevisionableParentEntityUsageCleanup.php b/src/RevisionableParentEntityUsageCleanup.php
index 3d243c9..45e3d71 100644
--- a/src/RevisionableParentEntityUsageCleanup.php
+++ b/src/RevisionableParentEntityUsageCleanup.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\smart_content;
 
+use Drupal\smart_content\Decision\Storage\DecisionStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -20,14 +21,14 @@ class RevisionableParentEntityUsageCleanup implements ContainerInjectionInterfac
   /**
    * The decision storage plugin manager.
    *
-   * @var \Drupal\smart_content\Decision\Storage\DecisionStorageInterface
+   * @var DecisionStorageInterface
    */
   protected $decisionStorageManager;
 
   /**
    * Constructs a new EntityOperations object.
    *
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageManager $decisionStorageManager
+   * @param DecisionStorageManager $decisionStorageManager
    *   The decision storage manager.
    */
   public function __construct(DecisionStorageManager $decisionStorageManager) {
@@ -46,7 +47,7 @@ class RevisionableParentEntityUsageCleanup implements ContainerInjectionInterfac
   /**
    * Handles entity tracking on deleting a parent entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    */
   public function handleDelete(EntityInterface $entity) {
diff --git a/src/Routing/DecisionStorageParamConverter.php b/src/Routing/DecisionStorageParamConverter.php
index fdc27b8..3d6b96a 100644
--- a/src/Routing/DecisionStorageParamConverter.php
+++ b/src/Routing/DecisionStorageParamConverter.php
@@ -17,14 +17,14 @@ class DecisionStorageParamConverter implements ParamConverterInterface {
   /**
    * The DecisionStorage plugin.
    *
-   * @var \Drupal\smart_content\Decision\Storage\DecisionStorageManager
+   * @var DecisionStorageManager
    */
   protected $decisionStorageManager;
 
   /**
    * Constructs a new DecisionStorageParamConverter.
    *
-   * @param \Drupal\smart_content\Decision\Storage\DecisionStorageManager $decision_storage_manager
+   * @param DecisionStorageManager $decision_storage_manager
    *   The decision storage manager.
    */
   public function __construct(DecisionStorageManager $decision_storage_manager) {
diff --git a/src/Segment.php b/src/Segment.php
index 6689e56..a2b6541 100644
--- a/src/Segment.php
+++ b/src/Segment.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\smart_content;
 
+use Drupal\smart_content\Condition\Conditioninterface;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\smart_content\Condition\ConditionInterface;
 use Drupal\smart_content\Condition\ConditionsHelperTrait;
 use Drupal\smart_content\Condition\ObjectWithConditionPluginCollectionInterface;
@@ -74,7 +76,7 @@ class Segment implements ObjectWithConditionPluginCollectionInterface {
    *
    * @param string $uuid
    *   (optional)  The Uuid of the segment.
-   * @param \Drupal\smart_content\Condition\Conditioninterface[] $conditions
+   * @param Conditioninterface[] $conditions
    *   (optional) The condition configuration.
    * @param int $weight
    *   (optional) The segment weight.
@@ -95,7 +97,7 @@ class Segment implements ObjectWithConditionPluginCollectionInterface {
   /**
    * Gets the plugin collections used by this object.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
