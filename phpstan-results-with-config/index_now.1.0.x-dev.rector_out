modules/contrib/index_now/inc/commerce_product.inc
modules/contrib/index_now/index_now.install
modules/contrib/index_now/index_now.module
modules/contrib/index_now/src/CommerceProductOperations.php
modules/contrib/index_now/src/CommerceProductOperationsInterface.php
modules/contrib/index_now/src/Controller/ApiKeyController.php
modules/contrib/index_now/src/Form/ModuleSettingsForm.php
modules/contrib/index_now/src/NodeOperations.php
modules/contrib/index_now/src/NodeOperationsInterface.php
modules/contrib/index_now/src/PathProcessor/IndexNowPathProcessor.php
modules/contrib/index_now/src/Service/IndexNow.php
modules/contrib/index_now/src/Service/IndexNowInterface.php
modules/contrib/index_now/src/TermOperations.php
modules/contrib/index_now/src/TermOperationsInterface.php
modules/contrib/index_now/tests/src/Unit/IndexNowTest.php
modules/contrib/index_now/tests/src/Unit/NodeOperationsTest.php
modules/contrib/index_now/tests/src/Unit/TermOperationsTest.php

12 files with changes
=====================

1) modules/contrib/index_now/tests/src/Unit/TermOperationsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\index_now\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   const CONFIG_EXCLUDE_NAME = 'exclude_vocabularies';

   const PERMISSION = 'access content';
+  use ProphecyTrait;

   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->configFactory = $this->prophesize(ConfigFactoryInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/index_now/tests/src/Unit/NodeOperationsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\index_now\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   const CONFIG_EXCLUDE_NAME = 'exclude_node_types';

   const PERMISSION = 'access content';
+  use ProphecyTrait;

   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->configFactory = $this->prophesize(ConfigFactoryInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/index_now/tests/src/Unit/IndexNowTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\index_now\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
  */
 class IndexNowTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->client = $this->prophesize(ClientInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/index_now/src/TermOperationsInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Acts on a term operation for the allowed vocabularies.
    *
-   * @param \Drupal\taxonomy\Entity\Term $term
+   * @param Term $term
    *   The term being inserted / updated / deleted.
    */
   public function pingIndexNow(Term $term);
@@ @@
   /**
    * Tells if a term is indexable or not.
    *
-   * @param \Drupal\taxonomy\Entity\Term $term
+   * @param Term $term
    *   The term being inserted / updated / deleted.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/index_now/src/TermOperations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\index_now;

+use Drupal\user\RoleStorage;
+use Drupal\user\Entity\Role;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The index now service.
    *
-   * @var \Drupal\index_now\Service\IndexNowInterface
+   * @var IndexNowInterface
    */
   protected $indexNow;

@@ @@
   /**
    * The role storage.
    *
-   * @var \Drupal\user\RoleStorage
+   * @var RoleStorage
    */
   protected $roleStorage;

@@ @@
   /**
    * Node operations class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\index_now\Service\IndexNowInterface $index_now
+   * @param IndexNowInterface $index_now
    *   The index now service.
    */
   public function __construct(
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\user\Entity\Role $anonymous_role */
+    /** @var Role $anonymous_role */
     $anonymous_role = $this->roleStorage->load(RoleInterface::ANONYMOUS_ID);
     if (!$anonymous_role->hasPermission('access content')) {
       return FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/index_now/src/Service/IndexNow.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\index_now\Service;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * The HTTP client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * IndexNow constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
    *   The logger service.
    */
   public function __construct(
@@ @@
    * @param string $api_key
    *   The API key used to prove ownership of the host.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The search engine URL we want to hit to index now.
    */
   protected function buildUrl(string $page_url, string $api_key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/index_now/src/PathProcessor/IndexNowPathProcessor.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/index_now/src/NodeOperationsInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Acts on a node operation (insert/update/delete) for the allowed node types.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node being inserted / updated / deleted.
    */
   public function pingIndexNow(Node $node);
@@ @@
   /**
    * Tells if a node is indexable or not.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node being inserted / updated / deleted.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/index_now/src/NodeOperations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\index_now;

+use Drupal\user\RoleStorage;
+use Drupal\user\Entity\Role;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The index now service.
    *
-   * @var \Drupal\index_now\Service\IndexNowInterface
+   * @var IndexNowInterface
    */
   protected $indexNow;

@@ @@
   /**
    * The role storage.
    *
-   * @var \Drupal\user\RoleStorage
+   * @var RoleStorage
    */
   protected $roleStorage;

@@ @@
   /**
    * Node operations class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\index_now\Service\IndexNowInterface $index_now
+   * @param IndexNowInterface $index_now
    *   The index now service.
    */
   public function __construct(
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\user\Entity\Role $anonymous_role */
+    /** @var Role $anonymous_role */
     $anonymous_role = $this->roleStorage->load(RoleInterface::ANONYMOUS_ID);
     if (!$anonymous_role->hasPermission('access content')) {
       return FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/index_now/src/Form/ModuleSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\index_now\Form;

+use Drupal\node\Entity\NodeType;
+use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The Uuid service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The form construct.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The uuid service.
    */
   public function __construct(
@@ @@
       ];

       $node_types = [];
-      /** @var \Drupal\node\Entity\NodeType $node_type */
+      /** @var NodeType $node_type */
       foreach ($this->nodeTypes as $machine_name => $node_type) {
         $node_types[$machine_name] = $node_type->get('name');
       }
@@ @@
       ];

       $vocabularies = [];
-      /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+      /** @var Vocabulary $vocabulary */
       foreach ($this->vocabularies as $machine_name => $vocabulary) {
         $vocabularies[$machine_name] = $vocabulary->get('name');
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/index_now/src/Controller/ApiKeyController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * API key controller constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/index_now/src/CommerceProductOperations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\index_now;

+use Drupal\user\RoleStorage;
+use Drupal\user\Entity\Role;
 use Drupal\commerce_product\Entity\Product;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The index now service.
    *
-   * @var \Drupal\index_now\Service\IndexNowInterface
+   * @var IndexNowInterface
    */
   protected $indexNow;

@@ @@
   /**
    * The role storage.
    *
-   * @var \Drupal\user\RoleStorage
+   * @var RoleStorage
    */
   protected $roleStorage;

@@ @@
   /**
    * Node operations class constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\index_now\Service\IndexNowInterface $index_now
+   * @param IndexNowInterface $index_now
    *   The index now service.
    */
   public function __construct(
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\user\Entity\Role $anonymous_role */
+    /** @var Role $anonymous_role */
     $anonymous_role = $this->roleStorage->load(RoleInterface::ANONYMOUS_ID);
     if (!$anonymous_role->hasPermission('access content')) {
       return FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 12 files have been changed by Rector                                      

