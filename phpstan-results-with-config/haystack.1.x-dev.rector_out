modules/contrib/haystack/haystack.api.php
modules/contrib/haystack/haystack.install
modules/contrib/haystack/haystack.module
modules/contrib/haystack/src/Controller/DefaultController.php
modules/contrib/haystack/src/Form/HaystackSettings.php
modules/contrib/haystack/src/HaystackContent.php
modules/contrib/haystack/src/HaystackCore.php

7 files with changes
====================

1) modules/contrib/haystack/src/HaystackCore.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\haystack;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Psr\Http\Message\ResponseInterface;
+use GuzzleHttp\Exception\GuzzleException;
+use GuzzleHttp\Client;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Config Service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Haystack Settings.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * HaystackCore constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   Config Service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   Messenger service.
    */
   public function __construct(ConfigFactory $config, Messenger $messenger) {
@@ @@
     if ($all) {
       $options = [];
       foreach (NodeType::loadMultiple() as $type) {
-        /** @var \Drupal\node\NodeTypeInterface $type */
+        /** @var NodeTypeInterface $type */
         $options[$type->get('type')] = $type->get('name');
       }

@@ @@
    * Checks if an image is associated with the node and sets the first one it
    * finds as the thmubnail for results.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node object to check.
    *
    * @return string
@@ @@
   /**
    * Get data from a menu item.
    *
-   * @param \Drupal\menu_link_content\Entity\MenuLinkContent $link
+   * @param MenuLinkContent $link
    *
    *
    * @return array
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getLinkData(MenuLinkContent $link) {
     $url = Url::fromUri($link->get('link')->first()->getValue()['uri'])
@@ @@


   // TODO: Stats are not send currently
-
-
   /**
    * @param $package
    * @param string $type
    * @param string $op
    *
-   * @return bool|mixed|\Psr\Http\Message\ResponseInterface|string
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @return bool|mixed|ResponseInterface|string
+   * @throws GuzzleException
    */
   public function apiCall($package, $type = 'index', $op = 'insert') {
     $readOnly = $this->getSetting('dev_mode');
@@ @@

     $result = '';

-    $client = new \GuzzleHttp\Client();
+    $client = new Client();
     $url = HAYSTACK_API_SERVER . HAYSTACK_API_VERSION; // . '/' . $type;
     $token = '?api_token=' . $package['api_token'];

@@ @@
    * @param bool $delete
    *
    * @return bool
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function indexMenus($menus, $delete = FALSE) {
     if (![$menus]) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/haystack/src/HaystackContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\haystack;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Language\LanguageManager;
 use Drupal\Core\Url;
 use Drupal\node\NodeInterface;
@@ @@
   /**
    * Drupal\haystack\HaystackCore definition.
    *
-   * @var \Drupal\haystack\HaystackCore
+   * @var HaystackCore
    */
   protected $haystackCore;

@@ @@
   /**
    * HaystackContent constructor.
    *
-   * @param \Drupal\haystack\HaystackCore $haystack_core
+   * @param HaystackCore $haystack_core
    *   Haystack core service.
-   * @param \Drupal\Core\Language\LanguageManager $languageManager
+   * @param LanguageManager $languageManager
    *   Language Manager service.
    */
   public function __construct(HaystackCore $haystack_core, LanguageManager $languageManager) {
@@ @@
   /**
    * Prepare the node for Haystack indexing.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to be indexed.
    */
   public function indexNode(NodeInterface $node) {
@@ @@
   /**
    * Create the data package for Haystack.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node from which to create the search package.
    *
    * @return array
@@ @@
   /**
    * Determine if the node can be indexed.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to check.
    *
    * @return bool
@@ @@
    * @param array $package
    *   The data to be saved.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   private function saveData(array $package) {
     $this->haystackCore->apiCall($package);
@@ @@
   /**
    * Delete call for nodes.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to be deleted.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function deleteNode(NodeInterface $node) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/haystack/src/Form/HaystackSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\haystack\Form;

+use Drupal\Core\Language\Language;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Haystack core service.
    *
-   * @var \Drupal\haystack\HaystackCore
+   * @var HaystackCore
    */
   protected $haystack;

@@ @@
   /**
    * The state interface.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The DateTime service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * LanguageManager Service.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * HaystackSettings constructor.
    *
-   * @param \Drupal\haystack\HaystackCore $haystack
+   * @param HaystackCore $haystack
    *   Haystack Core Service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   StateInterface Service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   FateFormatter Service.
-   * @param \Drupal\Core\Language\LanguageManager $languageManager
+   * @param LanguageManager $languageManager
    *   LanguageManager Service.
    */
   public function __construct(
@@ @@
         '#options' => $menus,
       ];

-      /** @var \Drupal\Core\Language\Language[] $systemLanguages */
+      /** @var Language[] $systemLanguages */
       $systemLanguages = $this->languageManager->getLanguages();
-      /** @var \Drupal\Core\Language\Language $defaultLanguage */
+      /** @var Language $defaultLanguage */
       $defaultLanguage = $this->languageManager->getDefaultLanguage();

       if (count($systemLanguages) > 1) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public function reindexSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Handel changes to menu settings.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    * @param array $original_types
    *   The original values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/haystack/src/Controller/DefaultController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * DefaultController constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service with the 'default' bin loaded.
    */
   public function __construct(CacheBackendInterface $cache) {
@@ @@
   /**
    * Callback for analytics AJAX request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Returns a JSON object.
    */
   public function haystackAjax() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/haystack/haystack.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Menu\MenuTreeParameters;
 /**
  * @file
  * Contains haystack.module.
@@ @@
       switch ($quick_links_menu){
         case 'menu':
           $menuTreeService = \Drupal::service('menu.link_tree');
-          $menu_parameters = new \Drupal\Core\Menu\MenuTreeParameters();
+          $menu_parameters = new MenuTreeParameters();
           $menu_parameters->excludeRoot();
           $menu = $menuTreeService->load('haystack', $menu_parameters);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/haystack/haystack.install:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Config\StorageInterface;
 /**
  * @file
  * Install, update, and uninstall functions for the Haystack module.
@@ @@

   // Create the new Haystack menu.
   $configName = 'system.menu.haystack';
-  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
+  /** @var StorageInterface $active_storage */
   $active_storage = \Drupal::service('config.storage');
   if (!$active_storage->exists($configName)) {
     $source = new FileStorage(__DIR__ . '/config/install');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/haystack/haystack.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\Entity\Node;
 /**
  * @file
  * Hooks provided by the Haystack module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Allow / disallow haystack indexing.
  *
- * @param \Drupal\node\Entity\Node $node
+ * @param Node $node
  *   The node that is being indexed.
  *
  * @return bool
  *   Only FALSE value has effects (trumps all TRUE values from other calls).
  */
-function hook_haystack_allow_indexing(\Drupal\node\Entity\Node $node) {
+function hook_haystack_allow_indexing(Node $node) {
   if ($node->isPublished()) {
     return TRUE;
   }
@@ @@
 /**
  * Alter haystack index package.
  *
- * @param \Drupal\node\Entity\Node $node
+ * @param Node $node
  *   The node that is being indexed.
  *
  * @return array
  *   Additional fields that will be added to the package sent to Haystack.
  */
-function hook_haystack_get_fields(\Drupal\node\Entity\Node $node) {
+function hook_haystack_get_fields(Node $node) {
   return [
     'owner_id' => $node->getOwnerId(),
   ];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

