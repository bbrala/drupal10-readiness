modules/contrib/storage/src/Access/StorageRevisionAccessCheck.php
modules/contrib/storage/src/Controller/StorageController.php
modules/contrib/storage/src/Entity/Storage.php
modules/contrib/storage/src/Entity/StorageInterface.php
modules/contrib/storage/src/Entity/StorageType.php
modules/contrib/storage/src/Entity/StorageTypeInterface.php
modules/contrib/storage/src/Entity/StorageViewsData.php
modules/contrib/storage/src/Form/StorageDeleteForm.php
modules/contrib/storage/src/Form/StorageForm.php
modules/contrib/storage/src/Form/StorageRevisionDeleteForm.php
modules/contrib/storage/src/Form/StorageRevisionRevertForm.php
modules/contrib/storage/src/Form/StorageRevisionRevertTranslationForm.php
modules/contrib/storage/src/Form/StorageSettingsForm.php
modules/contrib/storage/src/Form/StorageTypeDeleteForm.php
modules/contrib/storage/src/Form/StorageTypeForm.php
modules/contrib/storage/src/Plugin/RabbitHoleEntityPlugin/Storage.php
modules/contrib/storage/src/Plugin/views/field/StorageBulkForm.php
modules/contrib/storage/src/Plugin/views/filter/Status.php
modules/contrib/storage/src/Plugin/views/wizard/Storage.php
modules/contrib/storage/src/Plugin/views/wizard/StorageRevision.php
modules/contrib/storage/src/QueryAccess/StorageQueryAccessHandler.php
modules/contrib/storage/src/StorageAccessControlHandler.php
modules/contrib/storage/src/StorageHtmlRouteProvider.php
modules/contrib/storage/src/StorageListBuilder.php
modules/contrib/storage/src/StoragePermissions.php
modules/contrib/storage/src/StorageStorage.php
modules/contrib/storage/src/StorageStorageInterface.php
modules/contrib/storage/src/StorageTranslationHandler.php
modules/contrib/storage/src/StorageTypeHtmlRouteProvider.php
modules/contrib/storage/src/StorageTypeListBuilder.php
modules/contrib/storage/src/StorageViewsData.php
modules/contrib/storage/storage.api.php
modules/contrib/storage/storage.install
modules/contrib/storage/storage.module
modules/contrib/storage/storage.page.inc
modules/contrib/storage/storage.tokens.inc

18 files with changes
=====================

1) modules/contrib/storage/storage.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\storage\Entity\StorageInterface;
 /**
  * @file
  * Builds placeholder replacement tokens for "Storage entity"-related data.
@@ @@
   $replacements = [];

   if ($type == 'storage' && !empty($data['storage'])) {
-    /** @var \Drupal\storage\Entity\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = $data['storage'];
     if (isset($options['langcode']) && $storage->language()->getId() !== $options['langcode'] && $storage->hasTranslation($options['langcode'])) {
       $storage = $storage->getTranslation($options['langcode']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/storage/storage.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\storage\Entity\StorageInterface;
 /**
  * @file
  * Contains storage.module.
@@ @@
  */
 function storage_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
   if (isset($entity_form['#entity_type']) && $entity_form['#entity_type'] === 'storage') {
-    /** @var \Drupal\storage\Entity\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = $entity_form['#entity'];
     $form_class = $storage->getEntityType()->getFormClass('default');
     $entity_form['#entity_builders']['apply_name_pattern'] = [
@@ @@
   if (!isset($entity_types['storage'])) {
     return;
   }
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   $entity_type = $entity_types['storage'];
   $module_handler = \Drupal::moduleHandler();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/storage/storage.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\storage\Entity\StorageTypeInterface;
+use Drupal\user\RoleInterface;
 /**
  * @file
  * The Storage Entities install file.
@@ @@

   $mapping = [];
   $storage_types = \Drupal::entityTypeManager()->getStorage('storage_type')->loadMultiple();
-  /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
+  /** @var StorageTypeInterface $storage_type */
   foreach ($storage_types as $storage_type) {
     $type_id = $storage_type->id();
     $mapping["$type_id create entities"] = "add $type_id storage entities";
@@ @@
     $mapping["$type_id delete revisions"] = "delete $type_id storage revisions";
   }
   $config_changed = FALSE;
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (\Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple() as $role) {
     $permissions_changed = FALSE;
     foreach ($mapping as $old => $new) {
@@ @@
  */
 function storage_update_8102() {
   $config_changed = FALSE;
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (\Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple() as $role) {
     $permissions_changed = FALSE;
     foreach (\Drupal::entityTypeManager()->getStorage('storage_type')->loadMultiple() as $storage_type) {
@@ @@
  * was the default behavior. Export your configuration after this update.
  */
 function storage_update_8103() {
-  /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
+  /** @var StorageTypeInterface $storage_type */
   foreach (\Drupal::entityTypeManager()->getStorage('storage_type')->loadMultiple() as $storage_type) {
     $storage_type->set('has_canonical', TRUE);
     $storage_type->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/storage/storage.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\storage\Entity\StorageInterface;
 /**
  * @file
  * Hooks specific to the Storage Entities module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Define a string representation for the given Storage entity.
  *
@@ @@
  * In case the hook implementation returns an empty string, a fallback value
  * will be generated, or another module might generate the value.
  *
- * @param \Drupal\storage\Entity\StorageInterface $storage
+ * @param StorageInterface $storage
  *   The Storage entity.
  * @param string $string
  *   The current value of the string representation.
@@ @@
  *
  * @see \Drupal\storage\Entity\StorageInterface::getStringRepresentation()
  */
-function hook_storage_get_string_representation(\Drupal\storage\Entity\StorageInterface $storage, $string) {
+function hook_storage_get_string_representation(StorageInterface $storage, $string) {
   if ($storage->isNew()) {
     return 'NEW - ' . $storage->get('my_custom_field')->value;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/storage/src/StorageStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Storage revision IDs for a specific Storage.
    *
-   * @param \Drupal\storage\Entity\StorageInterface $entity
+   * @param StorageInterface $entity
    *   The Storage entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Storage author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\storage\Entity\StorageInterface $entity
+   * @param StorageInterface $entity
    *   The Storage entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Storage with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/storage/src/StoragePermissions.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of Storage entity permissions for a given Storage type.
    *
-   * @param \Drupal\storage\Entity\StorageTypeInterface $type
+   * @param StorageTypeInterface $type
    *   The Storage type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/storage/src/StorageHtmlRouteProvider.php:63

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/storage/src/StorageAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage;

+use Drupal\storage\Entity\StorageInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\storage\Entity\StorageInterface $entity */
-
+    /** @var StorageInterface $entity */
     if ($account->hasPermission('administer storage entities')) {
       return AccessResult::allowed()->cachePerPermissions();
     }
@@ @@
   /**
    * Check for given 'own' permissions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check for.
    * @param string $operation
    *   The operation to perform.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string|null
@@ @@
    *   The permission string indicating it's allowed.
    */
   protected function checkOwn(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\storage\Entity\StorageInterface $entity */
+    /** @var StorageInterface $entity */
     $uid = $entity->getOwnerId();

     $is_own = $account->isAuthenticated() && $account->id() == $uid;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/storage/src/Form/StorageTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Form;

+use Drupal\storage\Entity\StorageTypeInterface;
+use Drupal\storage\Entity\StorageInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs the StorageTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
+    /** @var StorageTypeInterface $storage_type */
     $storage_type = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add storage type');
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
+    /** @var StorageTypeInterface $storage_type */
     $storage_type = $this->entity;
     $storage_type->setStatus((bool) $form_state->getValue('status'));
     $storage_type->set('has_canonical', (bool) $form_state->getValue('has_canonical'));
@@ @@
     // Update the status field definition.
     // @todo Make it possible to get default values without an entity.
     //   https://www.drupal.org/node/2318187
-    /** @var \Drupal\storage\Entity\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('storage')->create(['type' => $storage_type->id()]);
     if ($storage->isPublished() != $storage_type->getStatus()) {
       $fields['status']->getConfig($storage_type->id())->setDefaultValue($storage_type->getStatus())->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/storage/src/Form/StorageSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/storage/src/Form/StorageRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\storage\Entity\StorageInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(StorageInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\storage\Entity\StorageInterface $latest_revision */
+    /** @var StorageInterface $latest_revision */
     $latest_revision = $this->storageStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/storage/src/Form/StorageRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Storage revision.
    *
-   * @var \Drupal\storage\Entity\StorageInterface
+   * @var StorageInterface
    */
   protected $revision;

@@ @@
   /**
    * The Storage storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storageStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\storage\Entity\StorageInterface $revision
+   * @param StorageInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\storage\Entity\StorageInterface
+   * @return StorageInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(StorageInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/storage/src/Form/StorageRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Form;

+use Drupal\storage\Entity\StorageInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Storage revision.
    *
-   * @var \Drupal\storage\Entity\StorageInterface
+   * @var StorageInterface
    */
   protected $revision;

@@ @@
   /**
    * The Storage storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storageStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/storage/src/Form/StorageForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\storage\Entity\StorageInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\storage\Entity\StorageInterface $entity */
+    /** @var StorageInterface $entity */
     $entity = $this->entity;
     // Load the bundle.
     $bundle = StorageType::load($entity->bundle());
@@ @@
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\storage\Entity\StorageInterface $entity
+   * @param StorageInterface $entity
    *   The entity updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function applyNamePattern($entity_type_id, StorageInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/storage/src/Entity/StorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Storage revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/storage/src/Entity/Storage.php:205

    ---------- begin diff ----------
@@ @@
    */
   public function hasLinkTemplate($rel) {
     if ($rel === 'canonical') {
-      /** @var \Drupal\storage\Entity\StorageTypeInterface $type */
+      /** @var StorageTypeInterface $type */
       $type = \Drupal::entityTypeManager()->getStorage('storage_type')->load($this->bundle());
       if (!$type->hasCanonical()) {
         return FALSE;
@@ @@
       $name_pattern = $this->hasField('name_pattern') ? $this->get('name_pattern')->getString() : $this->name_pattern;
     }
     elseif ($config_id = $this->bundle()) {
-      /** @var \Drupal\storage\Entity\StorageTypeInterface $config */
+      /** @var StorageTypeInterface $config */
       if ($config = \Drupal::entityTypeManager()->getStorage('storage_type')->load($config_id)) {
         $name_pattern = $config->getNamePattern();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/storage/src/Controller/StorageController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\storage\Entity\StorageTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
    * to do so, and otherwise throws an exception to show a 404 page instead,
    * or redirects a privileged user to the edit form.
    *
-   * @param \Drupal\storage\Entity\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The Storage entity to render.
    * @param string $view_mode
    *   (optional) The view mode that should be used to display the entity.
    *   Defaults to 'full'.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array as expected by
    *   \Drupal\Core\Render\RendererInterface::render() or a redirect response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   When the Storage type is not configured to have canonical URLs and the
    *   current user has no access to edit the entity.
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   When the user has no access to view the Storage entity.
    */
   public function viewCanonical(StorageInterface $storage, $view_mode = 'full') {
-    /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
+    /** @var StorageTypeInterface $storage_type */
     $storage_type = $this->entityTypeManager->getStorage('storage_type')->load($storage->bundle());
     if (!$storage_type->hasCanonical()) {
       if ($storage->access('update')) {
@@ @@
   /**
    * Custom access callback for ::viewCanonical().
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\storage\Entity\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The requested Storage entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function viewCanonicalAccess(AccountInterface $account, StorageInterface $storage) {
@@ @@
         ->addCacheableDependency($storage);
     }

-    /** @var \Drupal\storage\Entity\StorageTypeInterface $storage_type */
+    /** @var StorageTypeInterface $storage_type */
     $storage_type = $this->entityTypeManager->getStorage('storage_type')->load($storage->bundle());
     if (!$storage_type->hasCanonical()) {
       return AccessResult::forbidden()
@@ @@
   /**
    * Generates an overview table of older revisions of a Storage.
    *
-   * @param \Drupal\storage\Entity\StorageInterface $storage
+   * @param StorageInterface $storage
    *   A Storage object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/storage/src/Access/StorageRevisionAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\storage\Access;

+use Drupal\storage\StorageStorageInterface;
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The storage storage.
    *
-   * @var \Drupal\storage\StorageStorageInterface
+   * @var StorageStorageInterface
    */
   protected $storageStorage;

@@ @@
   /**
    * The storage access control handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $storageAccess;

@@ @@
   /**
    * Constructs a new StorageRevisionAccessCheck.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks routing access for the storage revision.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    * @param int $storage_revision
    *   (optional) The storage revision ID. If not specified, but $storage is,
@@ @@
    *   $storage_revision is specified. If neither $storage_revision nor
    *   $storage are specified, then access is denied.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, $storage_revision = NULL, StorageInterface $storage = NULL) {
@@ @@
    *
    * @param \Drupal\storage\StorageInterface $storage
    *   The storage to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user object representing the user for whom the operation is to be
    *   performed.
    * @param string $op
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/storage/src/QueryAccess/StorageQueryAccessHandler.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\entity\QueryAccess\QueryAccessHandlerBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/storage/src/Plugin/RabbitHoleEntityPlugin/Storage.php"
         file, due to:                                                          
         "Analyze error: "Class                                                 
         Drupal\rabbit_hole\Plugin\RabbitHoleEntityPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

