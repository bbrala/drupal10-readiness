modules/contrib/entity_reports/entity_reports.install
modules/contrib/entity_reports/modules/entity_reports_csv/src/EventSubscriber/EntityReportsCsvFormatsSubscriber.php
modules/contrib/entity_reports/modules/entity_reports_csv/src/EventSubscriber/EntityReportsCsvProcessorsSubscriber.php
modules/contrib/entity_reports/src/Controller/EntityReportsController.php
modules/contrib/entity_reports/src/Event/EntityReportsExportFormats.php
modules/contrib/entity_reports/src/Event/EntityReportsExportProcessors.php
modules/contrib/entity_reports/src/Form/EntityReportsSettingsForm.php
modules/contrib/entity_reports/src/Plugin/Derivative/EntityReportsLocalTasks.php
modules/contrib/entity_reports/src/Plugin/Derivative/EntityReportsMenuLinks.php
modules/contrib/entity_reports/src/ReportGenerator.php
modules/contrib/entity_reports/src/Routing/EntityReportsRoutes.php
modules/contrib/entity_reports/src/Tests/Functional/EntityReportsTestBase.php
modules/contrib/entity_reports/src/Tests/Functional/ReportGeneratorTest.php

12 files with changes
=====================

1) modules/contrib/entity_reports/src/Tests/Functional/ReportGeneratorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reports\Tests\Functional;

+use Drupal\entity_reports\ReportGenerator;
 /**
  * Class ReportGeneratorTest
  *
@@ @@
   /**
    * @throws \Exception
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $fields = [
       'body' => [
@@ @@
   }

   public function testExport() {
-    /** @var \Drupal\entity_reports\ReportGenerator $service */
+    /** @var ReportGenerator $service */
     $service = \Drupal::service('entity_reports.generator');
     $report = $service->generateEntityFieldsReport('node', 'page');
     $report_without_subfields = array_filter($report, function ($key) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_reports/src/Tests/Functional/EntityReportsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reports\Tests\Functional;

+use Drupal\Tests\BrowserTestBase;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\field\Entity\FieldConfig;
@@ @@
  * @package Drupal\entity_reports\Tests\Functional
  * @group entity_reports
  */
-abstract class EntityReportsTestBase extends \Drupal\Tests\BrowserTestBase {
+abstract class EntityReportsTestBase extends BrowserTestBase {

   use ContentTypeCreationTrait;

@@ @@
    * @param array $values
    * @param array $fields
    *
-   * @return \Drupal\node\Entity\NodeType
+   * @return NodeType
    * @throws \Exception
    */
   public function createSampleContentType(array $values, array $fields) {
@@ @@
       );
     }
     else {
-      $this->assertEqual($status,
-        SAVED_NEW,
-        (new FormattableMarkup('Created content type %type.',
-          ['%type' => $type->id()])
-        )->__toString()
-      );
+      $this->assertEquals($status, SAVED_NEW, (new FormattableMarkup('Created content type %type.',
+        ['%type' => $type->id()])
+      )->__toString());
     }

     return $type;
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $type
+   * @param EntityInterface $type
    * @param $name
    * @param $definition
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\field\Entity\FieldConfig
+   * @return EntityInterface|FieldConfig
    * @throws \Exception
    */
   public function createField(EntityInterface $type, $name, $definition) {
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_reports/src/Routing/EntityReportsRoutes.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The event dipatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * EntityReportsRoutes constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Returns available routes.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   Available routes.
    */
   public function getRoutes() {
@@ @@
     $configured_types = $this->config->get('entity_reports.settings')
       ->get('reported_entity_types');
     $event = new EntityReportsExportFormats();
-    $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
     $export_formats = array_keys($event->exportFormats);

     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_reports/src/ReportGenerator.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * ReportGenerator constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
    */
   public function __construct(
@@ @@
     $base_fields = $this->entityFieldManager->getBaseFieldDefinitions($entity_type);
     $fields_definitions = $this->entityFieldManager->getFieldDefinitions($entity_type, $bundle);
     foreach ($fields_definitions as $field_definition) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+      /** @var FieldDefinitionInterface $field_definition */
       if (empty($field_definition->getTargetBundle())) {
         continue;
       }
@@ @@
    *
    * @param string $field_name
    *   The name of the field.
-   * @param Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition object.
    *
    * @return array
@@ @@
    *
    * @param string $field_name
    *   The name of the field.
-   * @param Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition object.
    * @param string $column_name
    *   The name of a column or subfield.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/entity_reports/src/Plugin/Derivative/EntityReportsMenuLinks.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * EntityReportsRoutes constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_reports/src/Plugin/Derivative/EntityReportsLocalTasks.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * EntityReportsRoutes constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_reports/src/Form/EntityReportsSettingsForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The router builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * The Cache Render.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheRender;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_reports/src/Event/EntityReportsExportProcessors.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reports\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired when Entity Reports is processing an export.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_reports/src/Event/EntityReportsExportFormats.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reports\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Event that is fired when Entity Reports is gathering export formats.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_reports/src/Controller/EntityReportsController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The report generator service.
    *
-   * @var \Drupal\entity_reports\ReportGenerator
+   * @var ReportGenerator
    */
   protected $generator;

@@ @@
   /**
    * The event dipatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * EntityReportsController constructor.
    *
-   * @param \Drupal\entity_reports\ReportGenerator $reportGenerator
+   * @param ReportGenerator $reportGenerator
    *   The report generator service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
    */
   public function __construct(
@@ @@
       }
       // Builds report export links.
       $event = new EntityReportsExportFormats();
-      $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
       $export_formats = $event->exportFormats;
       $export_links = [];
       foreach ($export_formats as $format_machine_name => $format_label) {
@@ @@

     // Builds report export links.
     $event = new EntityReportsExportFormats();
-    $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
     $export_formats = $event->exportFormats;
     $export_links = [];
     foreach ($export_formats as $format_machine_name => $format_label) {
@@ @@
    * @param string $export_format
    *   The export format, i.e. json, xml.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The HTTP response object.
    *
    * @throws \Exception
@@ @@
    * @param string $type
    *   The content type of response. Optional, defaults to 'json'.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    */
   public function export(array $content, $entity_type, $type = 'json') {
@@ @@
     // Checks for non-default export formats.
     if (!array_key_exists($type, EntityReportsExportFormats::DEFAULT_EXPORT_FORMATS)) {
       $event = new EntityReportsExportProcessors($content, $entity_type, $this->reportFields, $type);
-      $this->eventDispatcher->dispatch(EntityReportsExportProcessors::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, EntityReportsExportProcessors::EVENT_NAME);
       $content = $event->content;
       foreach ($event->responseHeaders as $key => $value) {
         $response->headers->set($key, $value);
@@ @@
    * @param string $type
    *   The export format, e.g. json or xml.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The HTTP response object.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_reports/modules/entity_reports_csv/src/EventSubscriber/EntityReportsCsvProcessorsSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Serializer.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   Serializer.
    */
   public function __construct(SerializerInterface $serializer) {
@@ @@
   /**
    * Subscribe to the `entity_reports_export_processors` event dispatched.
    *
-   * @param \Drupal\entity_reports\Event\EntityReportsExportProcessors $event
+   * @param EntityReportsExportProcessors $event
    *   Event object.
    */
   public function onExportProcessors(EntityReportsExportProcessors $event) {
@@ @@
   /**
    * Helper function to serialize array data into CSV format.
    *
-   * @param \Drupal\entity_reports\Event\EntityReportsExportProcessors $event
+   * @param EntityReportsExportProcessors $event
    *   Event object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/entity_reports/modules/entity_reports_csv/src/EventSubscriber/EntityReportsCsvFormatsSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Subscribe to the `entity_reports_export_formats` event dispatched.
    *
-   * @param \Drupal\entity_reports\Event\EntityReportsExportFormats $event
+   * @param EntityReportsExportFormats $event
    *   Event object.
    */
   public function onExportFormats(EntityReportsExportFormats $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 12 files have been changed by Rector                                      

