modules/contrib/podcast_publisher/podcast_publisher.install
modules/contrib/podcast_publisher/podcast_publisher.module
modules/contrib/podcast_publisher/src/Entity/Podcast.php
modules/contrib/podcast_publisher/src/Form/PodcastForm.php
modules/contrib/podcast_publisher/src/Form/PodcastSettingsForm.php
modules/contrib/podcast_publisher/src/Plugin/Field/FieldFormatter/FileLength.php
modules/contrib/podcast_publisher/src/Plugin/Field/FieldFormatter/FileMimeType.php
modules/contrib/podcast_publisher/src/Plugin/views/row/PodcastEpisodeFields.php
modules/contrib/podcast_publisher/src/Plugin/views/style/PodcastFeed.php
modules/contrib/podcast_publisher/src/PodcastAccessControlHandler.php
modules/contrib/podcast_publisher/src/PodcastAudioService.php
modules/contrib/podcast_publisher/src/PodcastAudioServiceInterface.php
modules/contrib/podcast_publisher/src/PodcastInterface.php
modules/contrib/podcast_publisher/src/PodcastListBuilder.php

9 files with changes
====================

1) modules/contrib/podcast_publisher/src/PodcastListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new PodcastListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/podcast_publisher/src/PodcastAudioServiceInterface.php:8

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the duration of a given audio file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The audio file.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/podcast_publisher/src/PodcastAudioService.php:10

    ---------- begin diff ----------
@@ @@
 class PodcastAudioService implements PodcastAudioServiceInterface {

   /**
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/podcast_publisher/src/Plugin/views/style/PodcastFeed.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\podcast_publisher\Plugin\views\style;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   protected function getItunesCategories($field_value) {
     $elements = [];
     $term_ids = explode(',', $field_value);
-    /** @var \Drupal\taxonomy\TermInterface[] $terms */
+    /** @var TermInterface[] $terms */
     $terms = $this->entityTypeManager->getStorage('taxonomy_term')->loadMultiple($term_ids);
     foreach ($terms as $term) {
       if ($parent = $term->get('parent')->entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/podcast_publisher/src/Plugin/views/row/PodcastEpisodeFields.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\podcast_publisher\Plugin\views\row;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * @param $field_id
    *   The ID assigned to the required field in the display.
    *
-   * @return string|null|\Drupal\Component\Render\MarkupInterface
+   * @return string|null|MarkupInterface
    *   An empty string if there is no style plugin, or the field ID is empty.
    *   NULL if the field value is empty. If neither of these conditions apply,
    *   a MarkupInterface object containing the rendered field value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/podcast_publisher/src/Plugin/Field/FieldFormatter/FileLength.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\podcast_publisher\Plugin\Field\FieldFormatter;

+use Drupal\file\Entity\File;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\file\Plugin\Field\FieldFormatter\FileFormatterBase;
@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];

-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
       if ($file->id()) {
         $elements[$delta] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/podcast_publisher/src/Form/PodcastForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New podcast %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/podcast_publisher/podcast_publisher.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\podcast_publisher\PodcastAudioServiceInterface;
 /**
  * @file
  * Provides a podcast entity type.
@@ @@
     if (!$file) {
       return;
     }
-    /** @var \Drupal\podcast_publisher\PodcastAudioServiceInterface $audio_service */
+    /** @var PodcastAudioServiceInterface $audio_service */
     $audio_service = \Drupal::service('podcast_publisher.audio_service');
     $duration = $audio_service->getDuration($file);
     $media->set('field_duration', $duration);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/podcast_publisher/podcast_publisher.install:7

    ---------- begin diff ----------
@@ @@
 function podcast_publisher_install() {
   // Create itunes category terms.
   $file_path = \Drupal::service('module_handler')->getModule('podcast_publisher')->getPath() . '/itunes-categories.yml';
-  $categories = Symfony\Component\Yaml\Yaml::parse(file_get_contents($file_path));
+  $categories = Yaml::parse(file_get_contents($file_path));
   $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
   $vid = 'pp_itunes_categories';
   foreach ($categories as $category => $sub_categories) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

