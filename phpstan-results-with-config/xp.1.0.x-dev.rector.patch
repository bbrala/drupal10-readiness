diff --git a/modules/xp_block/src/Breadcrumb/XpBlockBreadcrumbBuilder.php b/modules/xp_block/src/Breadcrumb/XpBlockBreadcrumbBuilder.php
index 8bdf4a4..6a024c2 100644
--- a/modules/xp_block/src/Breadcrumb/XpBlockBreadcrumbBuilder.php
+++ b/modules/xp_block/src/Breadcrumb/XpBlockBreadcrumbBuilder.php
@@ -20,7 +20,7 @@ class XpBlockBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * Constructs a WebformBreadcrumbBuilder.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(TranslationInterface $string_translation) {
diff --git a/modules/xp_block/src/Controller/XpBlockContentController.php b/modules/xp_block/src/Controller/XpBlockContentController.php
index 41c6007..d4a87ad 100644
--- a/modules/xp_block/src/Controller/XpBlockContentController.php
+++ b/modules/xp_block/src/Controller/XpBlockContentController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xp_block\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\block_content\BlockContentTypeInterface;
 use Drupal\block_content\Controller\BlockContentController;
 use Drupal\Core\Access\AccessResult;
@@ -53,12 +54,12 @@ class XpBlockContentController extends BlockContentController {
   /**
    * Check XP block content add access.
    *
-   * @param \Drupal\block_content\BlockContentTypeInterface $block_content_type
+   * @param BlockContentTypeInterface $block_content_type
    *   The block content type.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public static function checkAccess(BlockContentTypeInterface $block_content_type, AccountInterface $account) {
diff --git a/modules/xp_block/src/Controller/XpBlockDownloadController.php b/modules/xp_block/src/Controller/XpBlockDownloadController.php
index 4fd1137..c066686 100644
--- a/modules/xp_block/src/Controller/XpBlockDownloadController.php
+++ b/modules/xp_block/src/Controller/XpBlockDownloadController.php
@@ -20,23 +20,23 @@ class XpBlockDownloadController extends ControllerBase {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The XpBlockDownloadController constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $data_formatter
+   * @param DateFormatterInterface $data_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(DateFormatterInterface $data_formatter, EntityTypeManagerInterface $entity_type_manager) {
@@ -57,7 +57,7 @@ class XpBlockDownloadController extends ControllerBase {
   /**
    * Build XP blocks (CSV) response.
    *
-   * @return \Symfony\Component\HttpFoundation\StreamedResponse
+   * @return StreamedResponse
    *   Response containing a CSV.
    */
   public function buildBlocks() {
@@ -86,7 +86,7 @@ class XpBlockDownloadController extends ControllerBase {
       if ($entity_ids) {
         $entity_ids_chunk = array_chunk($entity_ids, 500);
         foreach ($entity_ids_chunk as $entity_ids) {
-          /** @var \Drupal\block_content\BlockContentInterface[] $block_contents */
+          /** @var BlockContentInterface[] $block_contents */
           $block_contents = $storage->loadMultiple($entity_ids);
           foreach ($block_contents as $block_content) {
             $record = [];
@@ -114,7 +114,7 @@ class XpBlockDownloadController extends ControllerBase {
   /**
    * Build XP block variants (CSV) response.
    *
-   * @return \Symfony\Component\HttpFoundation\StreamedResponse
+   * @return StreamedResponse
    *   Response containing a CSV.
    */
   public function buildVariants(BlockContentInterface $block_content) {
@@ -152,7 +152,7 @@ class XpBlockDownloadController extends ControllerBase {
   /**
    * Get block content's variants information.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   Block content.
    *
    * @return array
diff --git a/modules/xp_block/src/Form/XpBlockTestForm.php b/modules/xp_block/src/Form/XpBlockTestForm.php
index eb912c0..3d30140 100644
--- a/modules/xp_block/src/Form/XpBlockTestForm.php
+++ b/modules/xp_block/src/Form/XpBlockTestForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\xp_block\Form;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,7 +19,7 @@ class XpBlockTestForm extends FormBase implements ContainerInjectionInterface {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -50,7 +52,7 @@ class XpBlockTestForm extends FormBase implements ContainerInjectionInterface {
 
     // Blocks.
     $form['blocks'] = ['#tree' => TRUE];
-    /** @var \Drupal\block_content\BlockContentInterface[] $block_contens */
+    /** @var BlockContentInterface[] $block_contens */
     foreach ($block_contents as $block_content_id => $block_content) {
       // Add block content as cacheable dependency.
       $this->renderer->addCacheableDependency($form, $block_content);
diff --git a/modules/xp_block/src/Plugin/Block/XpBlockTestBlock.php b/modules/xp_block/src/Plugin/Block/XpBlockTestBlock.php
index 9507a25..a56d37a 100644
--- a/modules/xp_block/src/Plugin/Block/XpBlockTestBlock.php
+++ b/modules/xp_block/src/Plugin/Block/XpBlockTestBlock.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\xp_block\Plugin\Block;
 
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Form\FormBuilderInterface;
+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -21,21 +25,21 @@ class XpBlockTestBlock extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -123,7 +127,7 @@ class XpBlockTestBlock extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * Get external personalization demo blocks.
    *
-   * @return \Drupal\block_content\BlockContentInterface[]
+   * @return BlockContentInterface[]
    *   External personalization demo blocks.
    */
   protected function getBlockContents() {
diff --git a/modules/xp_block/src/Plugin/views/area/XpBlockListingEmpty.php b/modules/xp_block/src/Plugin/views/area/XpBlockListingEmpty.php
index 363d4a4..cf6f063 100644
--- a/modules/xp_block/src/Plugin/views/area/XpBlockListingEmpty.php
+++ b/modules/xp_block/src/Plugin/views/area/XpBlockListingEmpty.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\xp_block\Plugin\views\area;
 
+use Drupal\Core\Access\AccessManagerInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\area\AreaPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -20,14 +24,14 @@ class XpBlockListingEmpty extends AreaPluginBase {
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -46,7 +50,7 @@ class XpBlockListingEmpty extends AreaPluginBase {
    */
   public function render($empty = FALSE) {
     if (!$empty || !empty($this->options['empty'])) {
-      /** @var \Drupal\Core\Access\AccessResultInterface|\Drupal\Core\Cache\CacheableDependencyInterface $access_result */
+      /** @var AccessResultInterface|CacheableDependencyInterface $access_result */
       $access_result = $this->accessManager->checkNamedRoute('xp_block.add_page', [], $this->currentUser, TRUE);
       $element = [
         '#markup' => $this->t('Add an <a href=":url">XP block</a>.', [':url' => Url::fromRoute('xp_block.add_page')->toString()]),
diff --git a/modules/xp_block/src/Utility/XpBlockHelper.php b/modules/xp_block/src/Utility/XpBlockHelper.php
index 85e32f9..386f930 100644
--- a/modules/xp_block/src/Utility/XpBlockHelper.php
+++ b/modules/xp_block/src/Utility/XpBlockHelper.php
@@ -14,7 +14,7 @@ class XpBlockHelper {
   /**
    * Determine if an entity is an XP block content entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   An entity.
    *
    * @return bool
@@ -27,7 +27,7 @@ class XpBlockHelper {
   /**
    * Get block content's item.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   Block content.
    * @param string|null $variant
    *   Optional variant id.
@@ -50,7 +50,7 @@ class XpBlockHelper {
   /**
    * Get block content's ID.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   Block content.
    *
    * @return string
@@ -63,7 +63,7 @@ class XpBlockHelper {
   /**
    * Get block content's notes.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   Block content.
    *
    * @return string|null
@@ -76,7 +76,7 @@ class XpBlockHelper {
   /**
    * Get block content's options.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   Block content.
    *
    * @return array
@@ -95,7 +95,7 @@ class XpBlockHelper {
   /**
    * Get block content's variants.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   Block content.
    *
    * @return array
@@ -118,7 +118,7 @@ class XpBlockHelper {
   /**
    * Get block content's variants IDs.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block_content
+   * @param BlockContentInterface $block_content
    *   Block content.
    *
    * @return array
@@ -139,7 +139,7 @@ class XpBlockHelper {
    * @param string $plugin_id
    *   The expected block content id needs to be block_content:{uuid}.
    *
-   * @return \Drupal\block_content\BlockContentInterface|null
+   * @return BlockContentInterface|null
    *   Return external personalization block content or NULL if the block
    *   content is not personalized.
    */
@@ -149,7 +149,7 @@ class XpBlockHelper {
     }
     // Load the block content using the plugin to get the uuid.
     $uuid = str_replace('block_content:', '', $plugin_id);
-    /** @var \Drupal\block_content\BlockContentInterface $block_content */
+    /** @var BlockContentInterface $block_content */
     $block_content = \Drupal::service('entity.repository')
       ->loadEntityByUuid('block_content', $uuid);
     return XpHelper::isXpEntity($block_content)
