modules/contrib/livestorm/src/Controller/LivestormWebhookController.php
modules/contrib/livestorm/src/Event/LivestormNewRegistrantEvent.php
modules/contrib/livestorm/src/Event/LivestormWebhookEvent.php
modules/contrib/livestorm/src/Event/LivestormWebhookSubscriber.php
modules/contrib/livestorm/src/Event/LivestormWebinarEndEvent.php
modules/contrib/livestorm/src/Event/LivestormWebinarPublishedEvent.php
modules/contrib/livestorm/src/Event/LivestormWebinarStartEvent.php
modules/contrib/livestorm/src/Form/LivestormAdminForm.php

3 files with changes
====================

1) modules/contrib/livestorm/src/Event/LivestormWebhookSubscriber.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Write a webhook log message.
    *
-   * @param \Drupal\livestorm\Event\LivestormWebhookEvent $event
+   * @param LivestormWebhookEvent $event
    *   Livestorm event.
    */
   protected function logMessages(LivestormWebhookEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/livestorm/src/Event/LivestormWebhookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\livestorm\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class LivestormWebhookEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/livestorm/src/Controller/LivestormWebhookController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\livestorm\Controller;

+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The LoggerInterface definition.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The EventDispatcherInterface definition.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Captures the incoming webhook request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Http Request.
    * @param string $event_type
    *   Livestorm event type.
@@ @@
    * @param string $token
    *   Livestorm given token.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Http Response.
    */
   public function handleIncomingWebhook(Request $request, $event_type, $token) {
@@ @@
     switch ($event_type) {
       case 'new_registrant':
         $e = new LivestormNewRegistrantEvent($decoded_input);
-        $this->eventDispatcher->dispatch('livestorm.new_registrant', $e);
+        $this->eventDispatcher->dispatch($e, 'livestorm.new_registrant');
         break;

       case 'webinar_start':
         $e = new LivestormWebinarStartEvent($decoded_input);
-        $this->eventDispatcher->dispatch('livestorm.webinar_start', $e);
+        $this->eventDispatcher->dispatch($e, 'livestorm.webinar_start');
         break;

       case 'webinar_end':
         $e = new LivestormWebinarEndEvent($decoded_input);
-        $this->eventDispatcher->dispatch('livestorm.webinar_end', $e);
+        $this->eventDispatcher->dispatch($e, 'livestorm.webinar_end');
         break;

       default:
         $e = new LivestormWebinarPublishedEvent($decoded_input);
-        $this->eventDispatcher->dispatch('livestorm.webinar_published', $e);
+        $this->eventDispatcher->dispatch($e, 'livestorm.webinar_published');
     }

     return new Response('Okay', Response::HTTP_OK);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 3 files have been changed by Rector                                       

