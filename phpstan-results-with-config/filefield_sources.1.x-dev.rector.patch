diff --git a/src/Access/FieldAccessCheck.php b/src/Access/FieldAccessCheck.php
index 3571c96..20d57e9 100644
--- a/src/Access/FieldAccessCheck.php
+++ b/src/Access/FieldAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filefield_sources\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -17,14 +18,14 @@ class FieldAccessCheck implements AccessInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an EntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -40,10 +41,10 @@ class FieldAccessCheck implements AccessInterface {
    *   Bundle name.
    * @param string $field_name
    *   Field name.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   AccessResult object
    */
   public function access(string $entity_type, string $bundle_name, string $field_name, AccountInterface $account) {
diff --git a/src/Annotation/FilefieldSource.php b/src/Annotation/FilefieldSource.php
index 49bea35..c9ae6b3 100644
--- a/src/Annotation/FilefieldSource.php
+++ b/src/Annotation/FilefieldSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filefield_sources\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class FilefieldSource extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $name;
 
@@ -34,7 +35,7 @@ class FilefieldSource extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -43,7 +44,7 @@ class FilefieldSource extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Controller/ImceController.php b/src/Controller/ImceController.php
index 2fe22e6..faaa97c 100644
--- a/src/Controller/ImceController.php
+++ b/src/Controller/ImceController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filefield_sources\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\imce\Imce;
@@ -14,7 +15,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  */
 class ImceController extends ControllerBase {
   /**
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/FilefieldSourceInterface.php b/src/FilefieldSourceInterface.php
index 57a4505..f25565e 100644
--- a/src/FilefieldSourceInterface.php
+++ b/src/FilefieldSourceInterface.php
@@ -23,7 +23,7 @@ interface FilefieldSourceInterface {
    * @param mixed $input
    *   The incoming input to populate the form element. If this is FALSE,
    *   the element's default value should be returned.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return mixed
@@ -37,7 +37,7 @@ interface FilefieldSourceInterface {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic input element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/FilefieldSourceManager.php b/src/FilefieldSourceManager.php
index 5ea66f2..c030fc2 100644
--- a/src/FilefieldSourceManager.php
+++ b/src/FilefieldSourceManager.php
@@ -21,9 +21,9 @@ class FilefieldSourceManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/FilefieldSource/Attach.php b/src/Plugin/FilefieldSource/Attach.php
index 28c8c8a..59cb0ba 100644
--- a/src/Plugin/FilefieldSource/Attach.php
+++ b/src/Plugin/FilefieldSource/Attach.php
@@ -320,7 +320,7 @@ class Attach implements FilefieldSourceInterface {
    *
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   Complete form.
diff --git a/src/Plugin/FilefieldSource/Clipboard.php b/src/Plugin/FilefieldSource/Clipboard.php
index ad04968..fe6d54a 100644
--- a/src/Plugin/FilefieldSource/Clipboard.php
+++ b/src/Plugin/FilefieldSource/Clipboard.php
@@ -58,7 +58,7 @@ class Clipboard implements FilefieldSourceInterface {
 
       $filename = trim($input['filefield_clipboard']['filename']);
       $filename = preg_replace('/\.[a-z0-9]{3,4}$/', '', $filename);
-      $filename = (empty($filename) ? 'paste_' . REQUEST_TIME : $filename) . '.' . $extension;
+      $filename = (empty($filename) ? 'paste_' . \Drupal::time()->getRequestTime() : $filename) . '.' . $extension;
       $filepath = \Drupal::service('file_system')->createFilename($filename, $temporary_directory);
 
       $copy_success = FALSE;
diff --git a/src/Plugin/FilefieldSource/Remote.php b/src/Plugin/FilefieldSource/Remote.php
index 7fa316f..ce360b6 100644
--- a/src/Plugin/FilefieldSource/Remote.php
+++ b/src/Plugin/FilefieldSource/Remote.php
@@ -99,7 +99,7 @@ class Remote implements FilefieldSourceInterface {
       // We prefer to use the Content-Disposition header, because we can then
       // use URLs like http://example.com/get_file/23 which would otherwise be
       // rejected because the URL basename lacks an extension.
-      /** @var \Drupal\Core\File\FileSystem $filesystem */
+      /** @var FileSystem $filesystem */
       $filesystem = \Drupal::service('file_system');
       $filename = static::filename();
       if (empty($filename)) {
diff --git a/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php b/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php
index 241f728..2293670 100644
--- a/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php
+++ b/src/ProxyClass/File/MimeType/ExtensionMimeTypeGuesser.php
@@ -7,15 +7,18 @@
 
 namespace Drupal\filefield_sources\ProxyClass\File\MimeType {
 
+    use Symfony\Component\Mime\MimeTypesInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
     /**
      * Provides a proxy class for \Drupal\filefield_sources\File\MimeType\ExtensionMimeTypeGuesser.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ExtensionMimeTypeGuesser implements \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+    class ExtensionMimeTypeGuesser implements MimeTypesInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -34,19 +37,19 @@ namespace Drupal\filefield_sources\ProxyClass\File\MimeType {
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;
 
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
diff --git a/src/Routing/FilefieldSourcesRoutes.php b/src/Routing/FilefieldSourcesRoutes.php
index b381a05..8df6d69 100644
--- a/src/Routing/FilefieldSourcesRoutes.php
+++ b/src/Routing/FilefieldSourcesRoutes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\filefield_sources\Routing;
 
+use Symfony\Component\Routing\Route;
 /**
  * Defines a route subscriber to register a url for serving filefield sources.
  */
@@ -10,7 +11,7 @@ class FilefieldSourcesRoutes {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
diff --git a/tests/src/Functional/AttachSourceTest.php b/tests/src/Functional/AttachSourceTest.php
index 22b1911..b80d620 100644
--- a/tests/src/Functional/AttachSourceTest.php
+++ b/tests/src/Functional/AttachSourceTest.php
@@ -96,7 +96,10 @@ class AttachSourceTest extends FileFieldSourcesTestBase {
     $this->assertTrue($this->isOptionPresent($file->uri), 'File option is present.');
 
     // Ensure empty message is not present.
-    $this->assertNoText('There currently are no files to attach.', "Empty message is not present.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('There currently are no files to attach.');
 
     // Attach button is always present.
     $this->assertFieldByXpath('//input[@type="submit"]', t('Attach'), 'Attach button is present.');
@@ -130,7 +133,10 @@ class AttachSourceTest extends FileFieldSourcesTestBase {
     $this->assertFalse($this->isOptionPresent($file->uri), 'File option is not present.');
 
     // Ensure empty message is present.
-    $this->assertText('There currently are no files to attach.', "Empty message is present.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There currently are no files to attach.');
 
     // Attach button is always present.
     $this->assertFieldByXpath('//input[@type="submit"]', t('Attach'), 'Attach button is present.');
