diff --git a/modules/past_db/past_db.drush.inc b/modules/past_db/past_db.drush.inc
index 05608de..28b042a 100644
--- a/modules/past_db/past_db.drush.inc
+++ b/modules/past_db/past_db.drush.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\Query\QueryInterface;
 /**
  * @file
  * Past DB commands for Drush.
@@ -173,7 +175,7 @@ function past_db_drush_show_many($filter = NULL) {
       $table = [];
       // Reset table rows.
       $tbl->_data = [];
-      /** @var \Drupal\Core\Entity\EntityInterface[] $events */
+      /** @var EntityInterface[] $events */
       $events = \Drupal::entityTypeManager()->getStorage('past_event')->loadMultiple(array_keys($result));
       // Process oldest first!
       $events = array_reverse($events);
@@ -348,11 +350,11 @@ function past_db_argument(PastEventArgumentInterface $argument, $nested) {
  * @param string $machine_name
  *   (optional) Machine name.
  *
- * @return \Drupal\Core\Entity\Query\QueryInterface
+ * @return QueryInterface
  *   The query object that can query the given entity type.
  */
 function past_db_drush_query_events($filter = NULL, $severity = NULL, $module = NULL, $machine_name = NULL) {
-  /** @var \Drupal\Core\Entity\Query\QueryInterface $query */
+  /** @var QueryInterface $query */
   $query = \Drupal::entityQuery('past_event');
   if ($severity) {
     $query->condition('severity', past_db_get_severity_id($severity), '<=');
diff --git a/modules/past_db/past_db.module b/modules/past_db/past_db.module
index 80a05ba..a307536 100644
--- a/modules/past_db/past_db.module
+++ b/modules/past_db/past_db.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\past_db\Entity\PastEventType;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\past\PastEventInterface;
 use Drupal\views\ViewExecutable;
 use Drupal\past\PastEventNull;
 /**
@@ -15,7 +18,7 @@ use Drupal\views\Views;
 /**
  * Entity URI callback for image style.
  *
- * @param \Drupal\past_db\Entity\PastEvent $event
+ * @param PastEvent $event
  *
  * @return array
  */
@@ -67,7 +70,7 @@ function past_db_menu_links_discovered_alter(&$links) {
  * @param array $values
  *   Additional event type values.
  *
- * @return \Drupal\past_db\Entity\PastEventType
+ * @return PastEventType
  *   The Past Event Type crated.
  */
 function past_event_type_create($type, $label, $values = []) {
@@ -84,7 +87,7 @@ function past_event_type_create($type, $label, $values = []) {
  * @param string $type_name
  *   If set, the type with the given name is returned.
  *
- * @return \Drupal\past_db\Entity\PastEventType[]
+ * @return PastEventType[]
  *   Depending whether $type isset,
  *   an array of past event types or a single one.
  */
@@ -106,7 +109,7 @@ function past_event_get_types($type_name = NULL) {
  *   The performed operation - view, delete, create, update, customs...
  * @param $type
  *   (optional) The entity type on which $operation should be performed.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   (optional) The account to check if it has access.
  *
  * @return bool
@@ -123,7 +126,7 @@ function past_event_type_access($op, $type = NULL, $account = NULL) {
  *   The performed operation - view, delete, create, update, customs...
  * @param $entity
  *   (optional) The entity on which $operation should be performed.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   (optional) The account to check if it has access.
  *
  * @return bool
@@ -159,7 +162,7 @@ function past_db_cron() {
 function past_db_views_api() {
   return [
     'api' => 3,
-    'template path' => drupal_get_path('module', 'past_db') . '/themes',
+    'template path' => \Drupal::service('extension.list.module')->getPath('past_db') . '/themes',
   ];
 }
 
@@ -305,14 +308,14 @@ function past_db_entity_extra_field_info() {
 }
 
 /**
- * Returns an event object.
- *
- * @param array $options
- *   (optional) An array of values to set.
- *
- * @return \Drupal\past\PastEventInterface A new Past event instance.
- *   A new Past event instance.
- */
+* Returns an event object.
+*
+* @param array $options
+*   (optional) An array of values to set.
+*
+* @return PastEventInterface A new Past event instance.
+ A new Past event instance.
+*/
 function past_db_create_event(array $options = []) {
   if (\Drupal::entityTypeManager()->hasDefinition('past_event')) {
     return \Drupal::entityTypeManager()->getStorage('past_event')->create($options);
diff --git a/modules/past_db/src/Entity/PastEvent.php b/modules/past_db/src/Entity/PastEvent.php
index 3c06a62..cbd7d32 100644
--- a/modules/past_db/src/Entity/PastEvent.php
+++ b/modules/past_db/src/Entity/PastEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\past_db\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Component\Render\FormattableMarkup;
@@ -275,7 +276,7 @@ class PastEvent extends ContentEntityBase implements PastEventInterface {
   /**
    * Returns a specific argument based on the key.
    *
-   * @return \Drupal\past\PastEventArgumentInterface
+   * @return PastEventArgumentInterface
    *   The past event argument.
    */
   public function getArgument($key) {
@@ -286,7 +287,7 @@ class PastEvent extends ContentEntityBase implements PastEventInterface {
   /**
    * Returns all arguments of this event.
    *
-   * @return \Drupal\past\PastEventArgumentInterface[]
+   * @return PastEventArgumentInterface[]
    *   The past event arguments.
    */
   public function getArguments() {
@@ -541,7 +542,7 @@ class PastEvent extends ContentEntityBase implements PastEventInterface {
       '#links' => [],
     ];
 
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = User::load($this->getUid());
     $sid = $this->getSessionId();
 
diff --git a/modules/past_db/src/PastEventStorage.php b/modules/past_db/src/PastEventStorage.php
index d61cb6b..1731126 100644
--- a/modules/past_db/src/PastEventStorage.php
+++ b/modules/past_db/src/PastEventStorage.php
@@ -148,7 +148,7 @@ class PastEventStorage extends SqlContentEntityStorage {
   /**
    * Delete existing arguments and data for the passed in events.
    *
-   * @param \Drupal\past_db\Entity\PastEvent[] $entities
+   * @param PastEvent[] $entities
    *   The past events to delete data for.
    */
   protected function deleteArgumentData($entities) {
diff --git a/modules/past_db/src/Plugin/views/filter/EventArgumentData.php b/modules/past_db/src/Plugin/views/filter/EventArgumentData.php
index 5e0638a..facab51 100644
--- a/modules/past_db/src/Plugin/views/filter/EventArgumentData.php
+++ b/modules/past_db/src/Plugin/views/filter/EventArgumentData.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\past_db\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\query\Sql;
+use Drupal\views\Plugin\views\join\Standard;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\views\Plugin\views\filter\StringFilter;
@@ -34,7 +36,7 @@ class EventArgumentData extends StringFilter {
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
 
@@ -110,7 +112,7 @@ class EventArgumentData extends StringFilter {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function argumentNameForm(array &$form, FormStateInterface $form_state) {
@@ -127,7 +129,7 @@ class EventArgumentData extends StringFilter {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function dataKeyForm(array &$form, FormStateInterface $form_state) {
@@ -153,7 +155,7 @@ class EventArgumentData extends StringFilter {
       'left_field' => 'event_id',
       'operator' => '=',
     ];
-    /** @var \Drupal\views\Plugin\views\join\Standard $join */
+    /** @var Standard $join */
     $join = Views::pluginManager('join')->createInstance('standard', $configuration);
     $relationship_alias = $this->query->addRelationship($this->options['id'], $join, 'past_event');
 
diff --git a/modules/past_db/tests/src/Functional/PastDBTest.php b/modules/past_db/tests/src/Functional/PastDBTest.php
index 7d3c19a..6a381f0 100644
--- a/modules/past_db/tests/src/Functional/PastDBTest.php
+++ b/modules/past_db/tests/src/Functional/PastDBTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\past_db\Functional;
 
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Session\AccountInterface;
@@ -50,7 +51,7 @@ class PastDBTest extends PastDBTestBase {
   /**
    * Creates an administrator user and sample events.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->admin = $this->drupalCreateUser([
       'administer past',
@@ -77,8 +78,8 @@ class PastDBTest extends PastDBTestBase {
     $event_type->save();
 
     $event_type = past_event_get_types('test_event');
-    $this->assertEqual($event_type->label, 'Test event');
-    $this->assertEqual($event_type->id, 'test_event');
+    $this->assertEquals($event_type->label, 'Test event');
+    $this->assertEquals($event_type->id, 'test_event');
 
     $event = past_event_create('past', 'test_event', 'test message');
     $event->type = 'test_event';
@@ -88,7 +89,7 @@ class PastDBTest extends PastDBTestBase {
     /** @var PastEvent $event */
     $event = array_pop($events);
 
-    $this->assertEqual($event->bundle(), 'test_event');
+    $this->assertEquals($event->bundle(), 'test_event');
 
     // Count the amount of all events.
     $events = count($this->loadEvents());
@@ -124,17 +125,17 @@ class PastDBTest extends PastDBTestBase {
     $arguments_ids = $connection->query('SELECT argument_id FROM {past_event_argument} where event_id IN (:ids[])', [':ids[]' => $ids])->fetchCol();
 
     // Two times 3 arguments, once two and once 4 means 12 arguments to delete.
-    $this->assertEqual(count($arguments_ids), 12);
+    $this->assertEquals(count($arguments_ids), 12);
 
     // Run cron and check that the amount of events has reduced.
     past_db_cron();
-    $this->assertEqual($events - 3, count($this->loadEvents()));
+    $this->assertEquals($events - 3, count($this->loadEvents()));
 
     $leftover_argument_count = $connection->query('SELECT count(*) FROM {past_event_argument} where event_id IN (:ids[])', [':ids[]' => $ids])->fetchField();
-    $this->assertEqual($leftover_argument_count, 0);
+    $this->assertEquals($leftover_argument_count, 0);
 
     $leftover_data_count = $connection->query('SELECT count(*) FROM {past_event_data} where argument_id IN (:arguments[])', [':arguments[]' => $arguments_ids])->fetchField();
-    $this->assertEqual($leftover_data_count, 0);
+    $this->assertEquals($leftover_data_count, 0);
   }
 
   /**
@@ -143,33 +144,76 @@ class PastDBTest extends PastDBTestBase {
   public function testEventExtraFields() {
     // Check for default bundle.
     $this->drupalGet('admin/config/development/past-types');
-    $this->assertText('Default', 'Default bundle was found.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Default');
 
     // Check for extra fields display on default bundle.
     $this->drupalGet('admin/config/development/past-types/manage/past_event/display');
-    $this->assertText(t('Message'));
-    $this->assertText(t('Module'));
-    $this->assertText(t('Machine name'));
-    $this->assertText(t('Event time'));
-    $this->assertText(t('User'));
-    $this->assertText(t('Arguments'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Module'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Machine name'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Event time'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('User'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Arguments'));
 
     // Add new bundle.
     $edit = [
       'label' => 'Test bundle',
       'id' => 'test_bundle',
     ];
-    $this->drupalPostForm('admin/config/development/past-types/add', $edit, t('Save'));
-    $this->assertText(t('Machine name: @name', ['@name' => $edit['id']]), 'Created bundle was found.');
+    $this->drupalGet('admin/config/development/past-types/add');
+    $this->submitForm($edit, t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Machine name: @name', ['@name' => $edit['id']]));
 
     // Check for extra fields display on newly created bundle.
     $this->drupalGet('admin/config/development/past-types/manage/' . $edit['id'] . '/display');
-    $this->assertText(t('Message'));
-    $this->assertText(t('Module'));
-    $this->assertText(t('Machine name'));
-    $this->assertText(t('Event time'));
-    $this->assertText(t('User'));
-    $this->assertText(t('Arguments'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Module'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Machine name'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Event time'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('User'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Arguments'));
 
     // Create event of newly created type.
     $values = [
@@ -184,9 +228,18 @@ class PastDBTest extends PastDBTestBase {
 
     $this->drupalLogin($this->viewUser);
     $this->drupalGet('admin/reports/past/' . $event->id());
-    $this->assertText($values['message']);
-    $this->assertText($values['module']);
-    $this->assertText($values['machine_name']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($values['message']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($values['module']);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($values['machine_name']);
   }
 
   /**
@@ -199,15 +252,25 @@ class PastDBTest extends PastDBTestBase {
       'label' => 'Test bundle',
       'id' => $bundle,
     ];
-    $this->drupalPostForm('admin/config/development/past-types/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/development/past-types/add');
+    $this->submitForm($edit, t('Save'));
 
     // Create an entity reference field on the bundle.
     $field_instance = $this->addField($bundle);
     // Check if the field shows up in field config of the bundle.
     $this->drupalGet('admin/config/development/past-types/manage/' . $bundle . '/fields');
-    $this->assertText($field_instance->label());
-    $this->assertText($field_instance->getName());
-    $this->assertText(t('Entity reference'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($field_instance->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($field_instance->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Entity reference'));
 
     // Create an event that we can reference to.
     $referenced_event_message = 'Referenced Event Test message';
@@ -228,15 +291,21 @@ class PastDBTest extends PastDBTestBase {
 
     // Check whether the bundle was saved correct.
     $event = \Drupal::service('entity_type.manager')->getStorage('past_event')->load($event->id());
-    $this->assertEqual($event->type->target_id, $bundle, 'Created event uses test bundle.');
+    $this->assertEquals($event->type->target_id, $bundle, 'Created event uses test bundle.');
 
     $this->drupalLogin($this->viewUser);
     // Check if the created fields shows up on the event display.
     $this->drupalGet('admin/reports/past/' . $event->id());
     // Check field label display.
-    $this->assertText($field_instance->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($field_instance->label());
     // Check field value display.
-    $this->assertText($referenced_event_message);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($referenced_event_message);
   }
 
   /**
@@ -252,32 +321,37 @@ class PastDBTest extends PastDBTestBase {
 
     // Go to Reports.
     $this->drupalGet('admin/reports');
-    $this->assertText(t('Reports of the past events.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Reports of the past events.'));
     $this->clickLink($past_event_view_title);
     // Assert there are two tabs.
-    $this->assertLink($past_event_extended_view_title);
-    $this->assertLink($past_event_view_title);
+    $this->assertSession()->linkExists($past_event_extended_view_title);
+    $this->assertSession()->linkExists($past_event_view_title);
+    $this->drupalGet('admin/structure/views/view/past_event_log/delete');
 
     // Delete the past event view.
-    $this->drupalPostForm('admin/structure/views/view/past_event_log/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->drupalGet('admin/reports/past');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $this->drupalGet('admin/reports');
     // Assert that extended view's title is in the menu.
     $this->clickLink($past_event_extended_view_title);
-    $this->assertNoLink($past_event_view_title);
-    $this->assertNoLink($past_event_extended_view_title);
+    $this->assertSession()->linkNotExists($past_event_view_title);
+    $this->assertSession()->linkNotExists($past_event_extended_view_title);
+    $this->drupalGet('admin/structure/views/view/past_event_log_key_ext_search/delete');
 
     // Delete the past event extended search view.
-    $this->drupalPostForm('admin/structure/views/view/past_event_log_key_ext_search/delete', [], t('Delete'));
+    $this->submitForm([], t('Delete'));
     $this->drupalGet('admin/reports/past/extended');
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Assert there are no past event related menu tabs.
     $this->drupalGet('admin/reports');
-    $this->assertNoLink($past_event_view_title);
-    $this->assertNoLink($past_event_extended_view_title);
+    $this->assertSession()->linkNotExists($past_event_view_title);
+    $this->assertSession()->linkNotExists($past_event_extended_view_title);
   }
 
   /**
@@ -289,15 +363,36 @@ class PastDBTest extends PastDBTestBase {
     $this->drupalGet('admin/reports/past');
 
     // Check for some messages.
-    $this->assertText($this->event_desc . 100);
-    $this->assertText($this->event_desc . 99);
-    $this->assertText($this->event_desc . 98);
-    $this->assertText($this->event_desc . 51);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 100);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 99);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 98);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 51);
 
     // Check severities.
-    $this->assertText($this->severities[RfcLogLevel::DEBUG]);
-    $this->assertText($this->severities[RfcLogLevel::INFO]);
-    $this->assertText($this->severities[RfcLogLevel::WARNING]);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->severities[RfcLogLevel::DEBUG]);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->severities[RfcLogLevel::INFO]);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->severities[RfcLogLevel::WARNING]);
 
     // Test if we have correct classes for severities.
     $class_names = past_db_severity_css_classes_map();
@@ -315,17 +410,26 @@ class PastDBTest extends PastDBTestBase {
     }
 
     // Check machine name.
-    $this->assertText($this->machine_name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->machine_name);
 
     // Check for the exposed filter fields.
-    $this->assertFieldByName('module', '');
-    $this->assertFieldByName('severity', 'All');
-    $this->assertFieldByName('machine_name', '');
-    $this->assertFieldByName('message', '');
+    $this->assertSession()->fieldValueEquals('module', '');
+    $this->assertSession()->fieldValueEquals('severity', 'All');
+    $this->assertSession()->fieldValueEquals('machine_name', '');
+    $this->assertSession()->fieldValueEquals('message', '');
 
     // Check paging.
-    $this->assertText('next ›');
-    $this->assertText('last »');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('next ›');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('last »');
 
     // Open the 2nd page.
     $options = [
@@ -338,36 +442,81 @@ class PastDBTest extends PastDBTestBase {
     $this->drupalGet('admin/reports/past', $options);
 
     // Check for some messages.
-    $this->assertText($this->event_desc . 50);
-    $this->assertText($this->event_desc . 49);
-    $this->assertText($this->event_desc . 1);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 50);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 49);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 1);
 
     // Check paging.
-    $this->assertText('‹ previous');
-    $this->assertText('« first');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('‹ previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('« first');
 
     // Go to the first detail page.
     $this->drupalGet('admin/reports/past/1');
 
-    $this->assertText($this->machine_name);
-    $this->assertText($this->event_desc . 1);
-    $this->assertText('Referer');
-    $this->assertLink('http://example.com/test-referer');
-    $this->assertText('Location');
-    $this->assertLink('http://example.com/this-url-gets-heavy-long/testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttes…');
-    $this->assertText('arg1');
-    $this->assertText('arg2');
-    $this->assertText('arg3');
-    $this->assertText('First Argument');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->machine_name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->event_desc . 1);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Referer');
+    $this->assertSession()->linkExists('http://example.com/test-referer');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Location');
+    $this->assertSession()->linkExists('http://example.com/this-url-gets-heavy-long/testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttest-testtesttesttes…');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('arg1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('arg2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('arg3');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('First Argument');
 
     // Check events with a float argument.
     $event = past_event_save('past_db', 'float_test', 'Float test', ['float' => 3.14], ['session_id' => 'test_session_id']);
     $this->drupalGet('admin/reports/past/' . $event->id());
-    $this->assertText('Float test');
-    $this->assertText('3.14');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Float test');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('3.14');
 
     // Check the actor dropbutton.
-    $this->assertLink($this->viewUser->getDisplayName());
+    $this->assertSession()->linkExists($this->viewUser->getDisplayName());
 
     // Check filters in Past event log.
     $this->drupalGet('admin/reports/past', [
@@ -384,17 +533,23 @@ class PastDBTest extends PastDBTestBase {
     /** @var AccountInterface $account */
     $account = User::load($loaded->getUid());
     $this->clickLink('Trace: ' . $account->getDisplayName());
-    $this->assertUrl('admin/reports/past?uid=' . $account->getDisplayName());
-    $this->assertFieldByName('uid', $account->getDisplayName());
-    $this->assertText($account->getDisplayName());
-    $this->assertNoText($this->viewUser->getDisplayName());
+    $this->assertSession()->addressEquals('admin/reports/past?uid=' . $account->getDisplayName());
+    $this->assertSession()->fieldValueEquals('uid', $account->getDisplayName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($account->getDisplayName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->viewUser->getDisplayName());
 
     // Check dropbutton and session filter.
     $this->clickLink('Trace session: ' . Unicode::truncate($loaded->getSessionId(), 10, FALSE, TRUE));
-    $this->assertUrl('admin/reports/past?session_id=' . $loaded->getSessionId());
-    $this->assertFieldByName('session_id', $loaded->getSessionId());
-    $this->assertRaw($loaded->getSessionId());
-    $this->assertNoRaw($event->getSessionId());
+    $this->assertSession()->addressEquals('admin/reports/past?session_id=' . $loaded->getSessionId());
+    $this->assertSession()->fieldValueEquals('session_id', $loaded->getSessionId());
+    $this->assertSession()->responseContains($loaded->getSessionId());
+    $this->assertSession()->responseNotContains($event->getSessionId());
 
     // Check filters in Past event log (extended Search).
     $this->drupalGet('admin/reports/past/extended', [
@@ -408,19 +563,28 @@ class PastDBTest extends PastDBTestBase {
 
     // Check dropbutton and user filter.
     $this->clickLink('Trace: ' . $this->viewUser->getDisplayName());
-    $this->assertUrl('admin/reports/past/extended?uid=' . $this->viewUser->getDisplayName());
-    $this->assertFieldByName('uid', $this->viewUser->getDisplayName());
-    $this->assertLink($this->viewUser->getDisplayName());
-    $this->assertNoText($account->getDisplayName());
+    $this->assertSession()->addressEquals('admin/reports/past/extended?uid=' . $this->viewUser->getDisplayName());
+    $this->assertSession()->fieldValueEquals('uid', $this->viewUser->getDisplayName());
+    $this->assertSession()->linkExists($this->viewUser->getDisplayName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($account->getDisplayName());
 
     $this->drupalLogout();
 
     // Check permissions for detail page.
     $this->drupalGet('admin/reports/past/1');
-    $this->assertText(t('You are not authorized to access this page'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('You are not authorized to access this page'));
     // Check permissions for event log.
     $this->drupalGet('admin/reports/past');
-    $this->assertText(t('You are not authorized to access this page'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('You are not authorized to access this page'));
   }
 
   /**
@@ -429,7 +593,7 @@ class PastDBTest extends PastDBTestBase {
    * @param string $bundle
    *   The bundle name.
    *
-   * @return \Drupal\Core\Field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The definition of the field instance.
    */
   protected function addField($bundle) {
