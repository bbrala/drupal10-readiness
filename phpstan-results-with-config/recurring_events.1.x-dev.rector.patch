diff --git a/modules/group_recurring_events_series/group_recurring_events_series.module b/modules/group_recurring_events_series/group_recurring_events_series.module
index e50e979..f9ebea9 100644
--- a/modules/group_recurring_events_series/group_recurring_events_series.module
+++ b/modules/group_recurring_events_series/group_recurring_events_series.module
@@ -1,5 +1,6 @@
 <?php
 
+use Symfony\Component\Routing\RouterInterface;
 /**
  * @file
  * Enables Group functionality for the Recurring events module.
@@ -28,7 +29,7 @@ function group_recurring_events_series_entity_operation(EntityInterface $entity)
   if ($entity->getEntityTypeId() == 'group' && \Drupal::moduleHandler()->moduleExists('views')) {
     /** @var \Drupal\group\Entity\GroupInterface $entity */
     if ($entity->hasPermission('access group_recurring_events_series overview', \Drupal::currentUser())) {
-      /** @var \Symfony\Component\Routing\RouterInterface $router */
+      /** @var RouterInterface $router */
       $router = \Drupal::service('router.no_access_checks');
       if ($router->getRouteCollection()->get('view.group_recurring_events_series.page_1') !== NULL) {
         $operations['recurring_events_series'] = [
diff --git a/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.module b/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.module
index 19f3beb..924caa7 100644
--- a/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.module
+++ b/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\recurring_events\Entity\EventInstance;
+use Drupal\recurring_events_registration\RegistrationCreationService;
 /**
  * @file
  * Primary module hooks for Recurring Events Registration Reminders module.
@@ -139,13 +141,13 @@ function recurring_events_reminders_cron() {
   if (!empty($event_instances)) {
     $instances = \Drupal::entityTypeManager()->getStorage('eventinstance')->loadMultiple($event_instances);
 
-    /** @var \Drupal\recurring_events\Entity\EventInstance */
+    /** @var EventInstance */
     foreach ($instances as $instance) {
       $instance->set('reminder_sent', time());
       $instance->setNewRevision(FALSE);
       $instance->save();
 
-      /** @var \Drupal\recurring_events_registration\RegistrationCreationService */
+      /** @var RegistrationCreationService */
       $registration_creation_service = \Drupal::service('recurring_events_registration.creation_service');
       $registration_creation_service->setEventInstance($instance);
 
diff --git a/modules/recurring_events_registration/modules/recurring_events_reminders/src/Plugin/Field/FieldWidget/RegistrationRemindersWidget.php b/modules/recurring_events_registration/modules/recurring_events_reminders/src/Plugin/Field/FieldWidget/RegistrationRemindersWidget.php
index 4f6512b..79577ff 100644
--- a/modules/recurring_events_registration/modules/recurring_events_reminders/src/Plugin/Field/FieldWidget/RegistrationRemindersWidget.php
+++ b/modules/recurring_events_registration/modules/recurring_events_reminders/src/Plugin/Field/FieldWidget/RegistrationRemindersWidget.php
@@ -28,7 +28,7 @@ class RegistrationRemindersWidget extends TextareaWidget {
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
@@ -39,13 +39,13 @@ class RegistrationRemindersWidget extends TextareaWidget {
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, RegistrationCreationService $creation_service) {
diff --git a/modules/recurring_events_registration/recurring_events_registration.api.php b/modules/recurring_events_registration/recurring_events_registration.api.php
index f066e56..a6d3839 100644
--- a/modules/recurring_events_registration/recurring_events_registration.api.php
+++ b/modules/recurring_events_registration/recurring_events_registration.api.php
@@ -16,10 +16,10 @@ use Drupal\recurring_events_registration\Entity\Registrant;
  * instance of Drupal\recurring_events_registration\Entity\Registrant for the
  * specified event, which can be retrieved from the registrant entity.
  *
- * @param Drupal\recurring_events_registration\Entity\Registrant $registrant
+ * @param Registrant $registrant
  *   The default selected registrant.
  *
- * @return Drupal\recurring_events_registration\Entity\Registrant
+ * @return Registrant
  *   A valid registrant entity.
  */
 function hook_recurring_events_registration_first_waitlist_alter(Registrant $registrant) {
diff --git a/modules/recurring_events_registration/recurring_events_registration.module b/modules/recurring_events_registration/recurring_events_registration.module
index 7ca8ee8..5501c87 100644
--- a/modules/recurring_events_registration/recurring_events_registration.module
+++ b/modules/recurring_events_registration/recurring_events_registration.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\recurring_events_registration\NotificationService;
 /**
  * @file
  * Contains recurring_events_registration.module.
@@ -140,7 +141,7 @@ function template_preprocess_registrant(array &$variables) {
  * Implements hook_mail().
  */
 function recurring_events_registration_mail($key, &$message, $params) {
-  /** @var \Drupal\recurring_events_registration\NotificationService */
+  /** @var NotificationService */
   $service = \Drupal::service('recurring_events_registration.notification_service');
   $service->setKey($key)->setEntity($params['registrant']);
 
@@ -304,7 +305,7 @@ function recurring_events_registration_recurring_events_pre_delete_instances(Eve
  *
  * @param string $key
  *   The mail key used to determine the message and subject.
- * @param \Drupal\recurring_events_registration\Entity\RegistrantInterface $registrant
+ * @param RegistrantInterface $registrant
  *   The registrant this email relates to.
  */
 function recurring_events_registration_send_notification($key, RegistrantInterface $registrant) {
@@ -368,7 +369,7 @@ function recurring_events_registration_menu_local_tasks_alter(&$data, $route_nam
   if (strpos($route_name, 'entity.registrant.devel_') === 0 || $route_name === 'entity.registrant.token_devel') {
     foreach ($data['tabs'] as $tab_level) {
       foreach ($tab_level as $tab) {
-        /** @var Drupal\Core\Url $url */
+        /** @var Url $url */
         $url = $tab['#link']['url'];
         $tab_route_name = $url->getRouteName();
         $tab_route_parameters = $url->getRouteParameters();
@@ -454,10 +455,10 @@ function recurring_events_registration_registrant_insert(EntityInterface $entity
  * @todo Remove when https://www.drupal.org/node/3173241 drops.
  */
 function recurring_events_registration_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\recurring_events_registration\Form\RegistrantForm $form_object */
+  /** @var RegistrantForm $form_object */
   $form_object = $form_state->getFormObject();
   if ($form_object instanceof RegistrantForm) {
-    /** @var \Drupal\recurring_events_registration\Entity\RegistrantInterface $entity */
+    /** @var RegistrantInterface $entity */
     $entity = $form_object->getEntity();
     if (!empty($entity) && $entity instanceof RegistrantInterface && $entity->getEntityTypeId() === 'registrant') {
       foreach ($form['actions']['submit']['#submit'] as $key => $submit) {
diff --git a/modules/recurring_events_registration/recurring_events_registration.post_update.php b/modules/recurring_events_registration/recurring_events_registration.post_update.php
index abd426e..93e9019 100644
--- a/modules/recurring_events_registration/recurring_events_registration.post_update.php
+++ b/modules/recurring_events_registration/recurring_events_registration.post_update.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Post update hooks for the recurring_events_registration module.
@@ -13,7 +14,7 @@ use Drupal\Core\StringTranslation\TranslatableMarkup;
  */
 function recurring_events_registration_post_update_make_registrant_revisionable(&$sandbox) {
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
 
   $entity_type = $definition_update_manager->getEntityType('registrant');
diff --git a/modules/recurring_events_registration/src/AccessHandler.php b/modules/recurring_events_registration/src/AccessHandler.php
index 0b4f320..e74fb42 100644
--- a/modules/recurring_events_registration/src/AccessHandler.php
+++ b/modules/recurring_events_registration/src/AccessHandler.php
@@ -18,41 +18,41 @@ class AccessHandler {
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;
 
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(TranslationInterface $translation, RegistrationCreationService $creation_service, CurrentRouteMatch $route_match, EntityTypeManagerInterface $entity_type_manager) {
@@ -100,7 +100,7 @@ class AccessHandler {
   /**
    * Access control based on whether the account has the right permission.
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current route.
    *
    * @return bool
diff --git a/modules/recurring_events_registration/src/Controller/RegistrantController.php b/modules/recurring_events_registration/src/Controller/RegistrantController.php
index 63bd105..e3e46e6 100644
--- a/modules/recurring_events_registration/src/Controller/RegistrantController.php
+++ b/modules/recurring_events_registration/src/Controller/RegistrantController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events_registration\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -20,32 +21,32 @@ class RegistrantController extends ControllerBase implements ContainerInjectionI
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a RegistrantController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(RendererInterface $renderer, AccountProxyInterface $current_user, EntityTypeManagerInterface $entity_type_manager) {
@@ -68,10 +69,10 @@ class RegistrantController extends ControllerBase implements ContainerInjectionI
   /**
    * Check if registration is enabled.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $eventinstance
+   * @param EventInstance $eventinstance
    *   The eventinstance entity.
    *
-   * @return Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether access is allowed based on whether registration is enabled.
    */
   public static function hasRegistration(EventInstance $eventinstance) {
@@ -91,10 +92,10 @@ class RegistrantController extends ControllerBase implements ContainerInjectionI
   /**
    * Check if the user can contact the registrants.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $eventinstance
+   * @param EventInstance $eventinstance
    *   The eventinstance entity.
    *
-   * @return Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether access is allowed based on whether registration is enabled.
    */
   public function canContactRegistrants(EventInstance $eventinstance) {
@@ -108,7 +109,7 @@ class RegistrantController extends ControllerBase implements ContainerInjectionI
   /**
    * Return a dynamic page title for a Registrant.
    *
-   * @param Drupal\recurring_events_registration\Entity\RegistrantInterface $registrant
+   * @param RegistrantInterface $registrant
    *   The entity for which to generate a page title.
    *
    * @return string
diff --git a/modules/recurring_events_registration/src/Entity/Registrant.php b/modules/recurring_events_registration/src/Entity/Registrant.php
index f3c67a7..9ee67e6 100644
--- a/modules/recurring_events_registration/src/Entity/Registrant.php
+++ b/modules/recurring_events_registration/src/Entity/Registrant.php
@@ -279,7 +279,7 @@ class Registrant extends EditorialContentEntityBase implements RegistrantInterfa
   /**
    * Get the event series.
    *
-   * @return Drupal\recurring_events\Entity\EventSeries
+   * @return EventSeries
    *   The event series entity.
    */
   public function getEventSeries() {
@@ -289,10 +289,10 @@ class Registrant extends EditorialContentEntityBase implements RegistrantInterfa
   /**
    * Set the event series ID.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The event series entity.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setEventSeries(EventSeries $event) {
@@ -303,7 +303,7 @@ class Registrant extends EditorialContentEntityBase implements RegistrantInterfa
   /**
    * Get the event.
    *
-   * @return Drupal\recurring_events\Entity\EventInstance
+   * @return EventInstance
    *   The eventinstance entity.
    */
   public function getEventInstance() {
@@ -313,10 +313,10 @@ class Registrant extends EditorialContentEntityBase implements RegistrantInterfa
   /**
    * Set the event ID.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $event
+   * @param EventInstance $event
    *   The eventinstance entity.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setEventInstance(EventInstance $event) {
@@ -340,7 +340,7 @@ class Registrant extends EditorialContentEntityBase implements RegistrantInterfa
    * @param string $type
    *   The type of registration, series or instance.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setRegistrationType($type) {
@@ -364,7 +364,7 @@ class Registrant extends EditorialContentEntityBase implements RegistrantInterfa
    * @param int $waitlist
    *   Whether the registrant is on the waitlist.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setWaitlist($waitlist) {
diff --git a/modules/recurring_events_registration/src/Form/ContactForm.php b/modules/recurring_events_registration/src/Form/ContactForm.php
index f8ca4cd..55d3ca2 100644
--- a/modules/recurring_events_registration/src/Form/ContactForm.php
+++ b/modules/recurring_events_registration/src/Form/ContactForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events_registration\Form;
 
+use Drupal\recurring_events\Entity\EventInstance;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -23,66 +24,66 @@ class ContactForm extends FormBase {
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mail;
 
   /**
    * The event instance object.
    *
-   * @var \Drupal\recurring_events\Entity\EventInstance
+   * @var EventInstance
    */
   protected $eventInstance;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a ContactForm object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request object.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registration notification service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Mail\MailManager $mail
+   * @param MailManager $mail
    *   The mail manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(RequestStack $request, RegistrationCreationService $creation_service, NotificationService $notification_service, Messenger $messenger, MailManager $mail, LanguageManagerInterface $language_manager) {
diff --git a/modules/recurring_events_registration/src/Form/RegistrantDeleteForm.php b/modules/recurring_events_registration/src/Form/RegistrantDeleteForm.php
index 4f05845..a8c81df 100644
--- a/modules/recurring_events_registration/src/Form/RegistrantDeleteForm.php
+++ b/modules/recurring_events_registration/src/Form/RegistrantDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\recurring_events_registration\Form;
 
+use Drupal\recurring_events_registration\Entity\Registrant;
+use Drupal\recurring_events\EventInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -24,47 +26,47 @@ class RegistrantDeleteForm extends ContentEntityDeleteForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * The creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * Constructs a RegistrantDeleteForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The creation service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, Messenger $messenger, Renderer $renderer, RegistrationCreationService $creation_service, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ -101,7 +103,7 @@ class RegistrantDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;
 
     $build['cancel'] = [
@@ -154,7 +156,7 @@ class RegistrantDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;
     $entity->delete();
     $eventinstance = $entity->getEventInstance();
@@ -189,7 +191,7 @@ class RegistrantDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   protected function getDeletionMessage() {
-    /** @var \Drupal\recurring_events\EventInterface $entity */
+    /** @var EventInterface $entity */
     $entity = $this->getEntity();
 
     return $this->t('Your registration for %email for %event has been cancelled.', [
diff --git a/modules/recurring_events_registration/src/Form/RegistrantForm.php b/modules/recurring_events_registration/src/Form/RegistrantForm.php
index af25f2c..24bbf13 100644
--- a/modules/recurring_events_registration/src/Form/RegistrantForm.php
+++ b/modules/recurring_events_registration/src/Form/RegistrantForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events_registration\Form;
 
+use Drupal\recurring_events_registration\Entity\Registrant;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -31,70 +32,70 @@ class RegistrantForm extends ContentEntityForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformation
+   * @var ModerationInformation
    */
   protected $moderationInformation;
 
@@ -122,31 +123,31 @@ class RegistrantForm extends ContentEntityForm {
   /**
    * Construct an RegistrantForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registrant creation service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registation notification service.
-   * @param \Drupal\content_moderation\ModerationInformation $moderation_information
+   * @param ModerationInformation $moderation_information
    *   The moderation information service.
    */
   public function __construct(
@@ -182,7 +183,7 @@ class RegistrantForm extends ContentEntityForm {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;
 
     $event_instance = $this->routeMatch->getParameter('eventinstance');
@@ -362,11 +363,11 @@ class RegistrantForm extends ContentEntityForm {
    *
    * @var array $form
    *   The form configuration array.
-   * @var Drupal\Core\Form\FormStateInterface $form_state
+   * @var FormStateInterface $form_state
    *   The form state interface.
    */
   protected function hideFormFields(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;
     $new = $entity->isNew();
     if ($new) {
diff --git a/modules/recurring_events_registration/src/Form/RegistrantResendForm.php b/modules/recurring_events_registration/src/Form/RegistrantResendForm.php
index 55de789..8192307 100644
--- a/modules/recurring_events_registration/src/Form/RegistrantResendForm.php
+++ b/modules/recurring_events_registration/src/Form/RegistrantResendForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\recurring_events_registration\Form;
 
+use Drupal\recurring_events\Entity\EventInstance;
+use Drupal\recurring_events_registration\Entity\Registrant;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -26,82 +28,82 @@ class RegistrantResendForm extends FormBase {
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mail;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * The event instance object.
    *
-   * @var \Drupal\recurring_events\Entity\EventInstance
+   * @var EventInstance
    */
   protected $eventInstance;
 
   /**
    * The registrant object.
    *
-   * @var \Drupal\recurring_events_registration\Entity\Registrant
+   * @var Registrant
    */
   protected $registrant;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a ContactForm object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request object.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registration notification service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Mail\MailManager $mail
+   * @param MailManager $mail
    *   The mail manager service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(RequestStack $request, RegistrationCreationService $creation_service, NotificationService $notification_service, Messenger $messenger, MailManager $mail, Renderer $renderer, LanguageManagerInterface $language_manager) {
diff --git a/modules/recurring_events_registration/src/Form/RegistrantSettingsForm.php b/modules/recurring_events_registration/src/Form/RegistrantSettingsForm.php
index 803337e..1eefbec 100644
--- a/modules/recurring_events_registration/src/Form/RegistrantSettingsForm.php
+++ b/modules/recurring_events_registration/src/Form/RegistrantSettingsForm.php
@@ -21,32 +21,32 @@ class RegistrantSettingsForm extends ConfigFormBase {
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;
 
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * Constructs a RegistrantSettingsForm object.
    *
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registration notification service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
    */
   public function __construct(NotificationService $notification_service, RegistrationCreationService $creation_service, ModuleHandler $module_handler) {
@@ -88,7 +88,7 @@ class RegistrantSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -128,7 +128,7 @@ class RegistrantSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/modules/recurring_events_registration/src/Form/RegistrantTypeForm.php b/modules/recurring_events_registration/src/Form/RegistrantTypeForm.php
index 3047cb6..f53c051 100644
--- a/modules/recurring_events_registration/src/Form/RegistrantTypeForm.php
+++ b/modules/recurring_events_registration/src/Form/RegistrantTypeForm.php
@@ -15,14 +15,14 @@ class RegistrantTypeForm extends EntityForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a RegistrantTypeForm object.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/modules/recurring_events_registration/src/NotificationService.php b/modules/recurring_events_registration/src/NotificationService.php
index ac30381..86921ba 100644
--- a/modules/recurring_events_registration/src/NotificationService.php
+++ b/modules/recurring_events_registration/src/NotificationService.php
@@ -19,56 +19,56 @@ class NotificationService {
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The registrant entity.
    *
-   * @var \Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @var RegistrantInterface
    */
   protected $entity;
 
@@ -117,19 +117,19 @@ class NotificationService {
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
    */
   public function __construct(TranslationInterface $translation, ConfigFactory $config_factory, LoggerChannelFactoryInterface $logger, Messenger $messenger, Token $token, ModuleHandler $module_handler, RegistrationCreationService $creation_service) {
@@ -161,7 +161,7 @@ class NotificationService {
   /**
    * Set the registrant entity.
    *
-   * @param \Drupal\recurring_events_registration\Entity\RegistrantInterface $registrant
+   * @param RegistrantInterface $registrant
    *   The registrant entity.
    *
    * @return $this
diff --git a/modules/recurring_events_registration/src/Plugin/Field/FieldWidget/EventRegistrationWidget.php b/modules/recurring_events_registration/src/Plugin/Field/FieldWidget/EventRegistrationWidget.php
index f94568a..e6c0890 100644
--- a/modules/recurring_events_registration/src/Plugin/Field/FieldWidget/EventRegistrationWidget.php
+++ b/modules/recurring_events_registration/src/Plugin/Field/FieldWidget/EventRegistrationWidget.php
@@ -423,7 +423,7 @@ class EventRegistrationWidget extends DateRangeDefaultWidget {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/modules/recurring_events_registration/src/Plugin/views/access/EventRegistrationListAccess.php b/modules/recurring_events_registration/src/Plugin/views/access/EventRegistrationListAccess.php
index 2bfc1d4..c68b7ce 100644
--- a/modules/recurring_events_registration/src/Plugin/views/access/EventRegistrationListAccess.php
+++ b/modules/recurring_events_registration/src/Plugin/views/access/EventRegistrationListAccess.php
@@ -24,7 +24,7 @@ class EventRegistrationListAccess extends AccessPluginBase {
   /**
    * The access handler.
    *
-   * @var \Drupal\recurring_events_registration\AccessHandler
+   * @var AccessHandler
    */
   protected $accessHandler;
 
@@ -37,7 +37,7 @@ class EventRegistrationListAccess extends AccessPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param Drupal\recurring_events_registration\AccessHandler $access_handler
+   * @param AccessHandler $access_handler
    *   The access handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccessHandler $access_handler) {
diff --git a/modules/recurring_events_registration/src/Plugin/views/argument/EventInstanceRegistrationAvailabilityCount.php b/modules/recurring_events_registration/src/Plugin/views/argument/EventInstanceRegistrationAvailabilityCount.php
index f9ec0e8..14fe660 100644
--- a/modules/recurring_events_registration/src/Plugin/views/argument/EventInstanceRegistrationAvailabilityCount.php
+++ b/modules/recurring_events_registration/src/Plugin/views/argument/EventInstanceRegistrationAvailabilityCount.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events_registration\Plugin\views\argument;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\views\Plugin\views\argument\NumericArgument;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -22,7 +23,7 @@ class EventInstanceRegistrationAvailabilityCount extends NumericArgument {
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceCapacity.php b/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceCapacity.php
index 8f834f5..856d8da 100644
--- a/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceCapacity.php
+++ b/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceCapacity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events_registration\Plugin\views\field;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -19,7 +20,7 @@ class EventInstanceCapacity extends FieldPluginBase {
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $registrationCreationService;
 
@@ -32,10 +33,10 @@ class EventInstanceCapacity extends FieldPluginBase {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $registration_creation_service
+   * @param RegistrationCreationService $registration_creation_service
    *   The registration creation service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RegistrationCreationService $registration_creation_service) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/modules/recurring_events_registration/src/Plugin/views/filter/EventInstanceRegistrationAvailabilityCount.php b/modules/recurring_events_registration/src/Plugin/views/filter/EventInstanceRegistrationAvailabilityCount.php
index 1cbee5d..89376ef 100644
--- a/modules/recurring_events_registration/src/Plugin/views/filter/EventInstanceRegistrationAvailabilityCount.php
+++ b/modules/recurring_events_registration/src/Plugin/views/filter/EventInstanceRegistrationAvailabilityCount.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events_registration\Plugin\views\filter;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\views\Plugin\views\filter\NumericFilter;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -24,7 +25,7 @@ class EventInstanceRegistrationAvailabilityCount extends NumericFilter {
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/modules/recurring_events_registration/src/RegistrantAccessControlHandler.php b/modules/recurring_events_registration/src/RegistrantAccessControlHandler.php
index 149691a..7933a8c 100644
--- a/modules/recurring_events_registration/src/RegistrantAccessControlHandler.php
+++ b/modules/recurring_events_registration/src/RegistrantAccessControlHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\recurring_events_registration;
 
+use Drupal\recurring_events_registration\Entity\RegistrantInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -22,25 +24,25 @@ class RegistrantAccessControlHandler extends EntityAccessControlHandler implemen
   /**
    * The creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * RegistrantAccessControlHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The creation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, RegistrationCreationService $creation_service, EntityTypeManagerInterface $entity_type_manager) {
@@ -64,7 +66,7 @@ class RegistrantAccessControlHandler extends EntityAccessControlHandler implemen
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\recurring_events_registration\Entity\RegistrantInterface $entity */
+    /** @var RegistrantInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view registrant entities');
@@ -120,14 +122,14 @@ class RegistrantAccessControlHandler extends EntityAccessControlHandler implemen
   /**
    * Check if the user can edit or delete this registrant anonymously.
    *
-   * @param Drupal\Core\Entity\EntityInterface $registrant
+   * @param EntityInterface $registrant
    *   The registrant to be edited.
    * @param string $operation
    *   The operation being attempted.
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user attempting to gain access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkAnonymousAccess(EntityInterface $registrant, $operation, AccountInterface $account) {
diff --git a/modules/recurring_events_registration/src/RegistrantListBuilder.php b/modules/recurring_events_registration/src/RegistrantListBuilder.php
index 77dd389..08ddce6 100644
--- a/modules/recurring_events_registration/src/RegistrantListBuilder.php
+++ b/modules/recurring_events_registration/src/RegistrantListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events_registration;
 
+use Drupal\recurring_events_registration\Entity\Registrant;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -21,45 +22,45 @@ class RegistrantListBuilder extends EntityListBuilder {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;
 
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * Constructs a new RegistrantListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request object.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactory $config, RequestStack $request, RegistrationCreationService $creation_service, EntityFieldManager $entity_field_manager) {
@@ -108,7 +109,7 @@ class RegistrantListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity  */
+    /** @var Registrant $entity  */
     $series = $entity->getEventSeries();
     $instance = $entity->getEventInstance();
 
diff --git a/modules/recurring_events_registration/src/RegistrationCreationService.php b/modules/recurring_events_registration/src/RegistrationCreationService.php
index d1ec290..ea04d00 100644
--- a/modules/recurring_events_registration/src/RegistrationCreationService.php
+++ b/modules/recurring_events_registration/src/RegistrationCreationService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\recurring_events_registration;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\recurring_events_registration\Entity\RegistrantInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ -23,82 +25,82 @@ class RegistrationCreationService {
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The entity storage for registrants.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Event instance entity.
    *
-   * @var \Drupal\recurring_events\Entity\EventInstance
+   * @var EventInstance
    */
   protected $eventInstance;
 
   /**
    * Event series entity.
    *
-   * @var \Drupal\recurring_events\Entity\EventSeries
+   * @var EventSeries
    */
   protected $eventSeries;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(TranslationInterface $translation, Connection $database, LoggerChannelFactoryInterface $logger, Messenger $messenger, EntityTypeManager $entity_type_manager, ModuleHandler $module_handler, Token $token) {
@@ -129,7 +131,7 @@ class RegistrationCreationService {
   /**
    * Set the event entities.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $event_instance
+   * @param EventInstance $event_instance
    *   The event instance.
    */
   public function setEventInstance(EventInstance $event_instance) {
@@ -140,7 +142,7 @@ class RegistrationCreationService {
   /**
    * Set the event series, helpful to get a fresh copy of the entity.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event_series
+   * @param EventSeries $event_series
    *   The event series.
    */
   public function setEventSeries(EventSeries $event_series) {
@@ -150,7 +152,7 @@ class RegistrationCreationService {
   /**
    * Get the event instance.
    *
-   * @return Drupal\recurring_events\Entity\EventInstance
+   * @return EventInstance
    *   The event instance.
    */
   public function getEventInstance() {
@@ -160,7 +162,7 @@ class RegistrationCreationService {
   /**
    * Get the event series.
    *
-   * @return Drupal\recurring_events\Entity\EventSeries
+   * @return EventSeries
    *   The event series.
    */
   public function getEventSeries() {
@@ -378,13 +380,13 @@ class RegistrationCreationService {
   /**
    * Retreive first user on the waitlist.
    *
-   * @return \Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   A fully loaded registrant entity.
    */
   public function retrieveFirstWaitlistParty() {
     $waitlisted_users = $this->retrieveWaitlistedParties();
     if (!empty($waitlisted_users)) {
-      /** @var Drupal\recurring_events_registration\Entity\RegistrantInterface */
+      /** @var RegistrantInterface */
       $first = reset($waitlisted_users);
       $this->moduleHandler->alter('recurring_events_registration_first_waitlist', $first);
       return $first;
diff --git a/recurring_events.install b/recurring_events.install
index ec6aabe..71f7b39 100644
--- a/recurring_events.install
+++ b/recurring_events.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Config\StorageInterface;
+use Drupal\views\Views;
 /**
  * @file
  * Installation and update functionality for the recurring_events module.
@@ -444,9 +446,9 @@ function recurring_events_update_8010() {
   ];
 
   foreach ($configs as $config) {
-    $path = drupal_get_path('module', 'recurring_events') . '/config/install';
+    $path = \Drupal::service('extension.list.module')->getPath('recurring_events') . '/config/install';
     $source = new FileStorage($path);
-    /** @var \Drupal\Core\Config\StorageInterface $active_storage */
+    /** @var StorageInterface $active_storage */
     $active_storage = \Drupal::service('config.storage');
     $active_storage->write($config, $source->read($config));
   }
@@ -603,7 +605,7 @@ function recurring_events_update_8013() {
 
   $config_factory = \Drupal::configFactory();
 
-  if (!$views = \Drupal\views\Views::getAllViews()) {
+  if (!$views = Views::getAllViews()) {
     return [];
   }
 
diff --git a/src/Controller/EventInstanceController.php b/src/Controller/EventInstanceController.php
index ffc6091..d0ef79d 100644
--- a/src/Controller/EventInstanceController.php
+++ b/src/Controller/EventInstanceController.php
@@ -22,28 +22,28 @@ class EventInstanceController extends ControllerBase implements ContainerInjecti
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * System Manager Service.
    *
-   * @var \Drupal\system\SystemManager
+   * @var SystemManager
    */
   protected $systemManager;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -57,13 +57,13 @@ class EventInstanceController extends ControllerBase implements ContainerInjecti
   /**
    * Constructs a EventInstanceController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\system\SystemManager $systemManager
+   * @param SystemManager $systemManager
    *   System manager service.
-   * @param Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, SystemManager $systemManager, LanguageManagerInterface $language_manager) {
@@ -89,7 +89,7 @@ class EventInstanceController extends ControllerBase implements ContainerInjecti
   /**
    * Get the page title for an eventinstance.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventinstance
+   * @param EventInterface $eventinstance
    *   A eventinstance object.
    *
    * @return string
@@ -147,7 +147,7 @@ class EventInstanceController extends ControllerBase implements ContainerInjecti
   /**
    * Generates an overview table of older revisions of an eventinstance.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventinstance
+   * @param EventInterface $eventinstance
    *   A eventinstance object.
    *
    * @return array
@@ -179,7 +179,7 @@ class EventInstanceController extends ControllerBase implements ContainerInjecti
     $latest_revision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\recurring_events\EventInterface $revision */
+      /** @var EventInterface $revision */
       $revision = $eventinstance_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
diff --git a/src/Controller/EventSeriesController.php b/src/Controller/EventSeriesController.php
index 7d02937..d9348fc 100644
--- a/src/Controller/EventSeriesController.php
+++ b/src/Controller/EventSeriesController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -22,32 +23,32 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * System Manager Service.
    *
-   * @var \Drupal\system\SystemManager
+   * @var SystemManager
    */
   protected $systemManager;
 
   /**
    * Constructs a EventSeriesController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\system\SystemManager $systemManager
+   * @param SystemManager $systemManager
    *   System manager service.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, SystemManager $systemManager) {
@@ -86,7 +87,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
    *
    * Redirects to events/add/[type] if only one type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the node types that can be added; however,
    *   if there is only one node type defined for the site, the function
    *   will return a RedirectResponse to the node add page for that one node
@@ -125,7 +126,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * Create a new event.
    *
-   * @param \Drupal\recurring_events\Entity\EventSeriesTypeInterface $eventseries_type
+   * @param EventSeriesTypeInterface $eventseries_type
    *   The eventseries type.
    */
   public function add(EventSeriesTypeInterface $eventseries_type) {
@@ -141,7 +142,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * The _title_callback for the entity.eventseries.add_form route.
    *
-   * @param \Drupal\recurring_events\Entity\EventSeriesTypeInterface $eventseries_type
+   * @param EventSeriesTypeInterface $eventseries_type
    *   The eventseries type.
    *
    * @return string
@@ -154,7 +155,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * The _title_callback for the entity.eventseries.edit_form route.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   The eventseries type.
    *
    * @return string
@@ -170,7 +171,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * The _title_callback for the entity.eventseries.delete_form route.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   The eventseries type.
    *
    * @return string
@@ -186,7 +187,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * The _title_callback for the entity.eventseries.clone_form route.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   The eventseries type.
    *
    * @return string
@@ -235,7 +236,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
   /**
    * Generates an overview table of older revisions of an eventseries.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   A eventseries object.
    *
    * @return array
@@ -267,7 +268,7 @@ class EventSeriesController extends ControllerBase implements ContainerInjection
     $latest_revision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\recurring_events\EventInterface $revision */
+      /** @var EventInterface $revision */
       $revision = $eventseries_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
diff --git a/src/Entity/EventInstance.php b/src/Entity/EventInstance.php
index 095cb3f..5301bc2 100644
--- a/src/Entity/EventInstance.php
+++ b/src/Entity/EventInstance.php
@@ -406,7 +406,7 @@ class EventInstance extends EditorialContentEntityBase implements EventInterface
   /**
    * Get event series.
    *
-   * @return Drupal\recurring_events\EventInterface
+   * @return EventInterface
    *   The event series.
    */
   public function getEventSeries() {
diff --git a/src/Entity/EventSeries.php b/src/Entity/EventSeries.php
index 61d7dc3..dd220ab 100644
--- a/src/Entity/EventSeries.php
+++ b/src/Entity/EventSeries.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Entity;
 
+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EditorialContentEntityBase;
@@ -530,7 +531,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get series start.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the series start date.
    */
   public function getSeriesStart() {
@@ -577,7 +578,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get consecutive recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the consecutive start date.
    */
   public function getConsecutiveStartDate() {
@@ -591,7 +592,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get consecutive recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the consecutive end date.
    */
   public function getConsecutiveEndDate() {
@@ -665,7 +666,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get daily recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the daily start date.
    */
   public function getDailyStartDate() {
@@ -679,7 +680,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get daily recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the daily end date.
    */
   public function getDailyEndDate() {
@@ -733,7 +734,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get weekly recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the weekly start date.
    */
   public function getWeeklyStartDate() {
@@ -747,7 +748,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get weekly recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the weekly end date.
    */
   public function getWeeklyEndDate() {
@@ -849,7 +850,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get monthly recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the monthly start date.
    */
   public function getMonthlyStartDate() {
@@ -863,7 +864,7 @@ class EventSeries extends EditorialContentEntityBase implements EventInterface {
   /**
    * Get monthly recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the monthly end date.
    */
   public function getMonthlyEndDate() {
diff --git a/src/EventCreationService.php b/src/EventCreationService.php
index d50d377..2efffbb 100644
--- a/src/EventCreationService.php
+++ b/src/EventCreationService.php
@@ -30,86 +30,86 @@ class EventCreationService {
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;
 
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The field type plugin manager.
    *
-   * @var Drupal\Core\Field\FieldTypePluginManager
+   * @var FieldTypePluginManager
    */
   protected $fieldTypePluginManager;
 
   /**
    * The entity field manager.
    *
-   * @var Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The key value storage service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValueStore;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Field\FieldTypePluginManager $field_type_plugin_manager
+   * @param FieldTypePluginManager $field_type_plugin_manager
    *   The field type plugin manager.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+   * @param KeyValueFactoryInterface $key_value
    *   The key value storage service.
    */
   public function __construct(TranslationInterface $translation, Connection $database, LoggerChannelFactoryInterface $logger, Messenger $messenger, FieldTypePluginManager $field_type_plugin_manager, EntityFieldManager $entity_field_manager, ModuleHandler $module_handler, EntityTypeManagerInterface $entity_type_manager, KeyValueFactoryInterface $key_value) {
@@ -144,9 +144,9 @@ class EventCreationService {
   /**
    * Check whether there have been form recurring configuration changes.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of an updated event series entity.
    *
    * @return bool
@@ -163,9 +163,9 @@ class EventCreationService {
   /**
    * Check whether there have been original recurring configuration changes.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\recurring_events\Entity\EventSeries $original
+   * @param EventSeries $original
    *   The original stored event series entity.
    *
    * @return bool
@@ -182,7 +182,7 @@ class EventCreationService {
   /**
    * Converts an EventSeries entity's recurring configuration to an array.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
    *
    * @return array
@@ -211,7 +211,7 @@ class EventCreationService {
   /**
    * Converts a form state object's recurring configuration to an array.
    *
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of an updated event series entity.
    *
    * @return array
@@ -297,11 +297,11 @@ class EventCreationService {
   /**
    * Build diff array between stored entity and form state.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   (Optional) The form state of an updated event series entity.
-   * @param Drupal\recurring_events\Entity\EventSeries $edited
+   * @param EventSeries $edited
    *   (Optional) The edited event series entity.
    *
    * @return array
@@ -395,7 +395,7 @@ class EventCreationService {
   /**
    * Clear out existing event instances..
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The event series entity.
    */
   public function clearEventInstances(EventSeries $event) {
@@ -438,7 +438,7 @@ class EventCreationService {
   /**
    * Create the event instances from the form state.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
    */
   public function createInstances(EventSeries $event) {
@@ -494,11 +494,11 @@ class EventCreationService {
   /**
    * Create an event instance from an event series.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date and time of the event.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date and time of the event.
    *
    * @return static
@@ -525,7 +525,7 @@ class EventCreationService {
   /**
    * Configure the default field inheritances for event instances.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $instance
+   * @param EventInstance $instance
    *   The event instance.
    * @param int $series_id
    *   The event series entity ID.
@@ -571,9 +571,9 @@ class EventCreationService {
   /**
    * When adding a new field inheritance, add the default values for it.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $instance
+   * @param EventInstance $instance
    *   The event instance for which to configure default inheritance values.
-   * @param Drupal\field_inheritance\Entity\FieldInheritanceInterface $field_inheritance
+   * @param FieldInheritanceInterface $field_inheritance
    *   The field inheritance being created or updated.
    */
   public function addNewDefaultInheritance(EventInstance $instance, FieldInheritanceInterface $field_inheritance) {
@@ -682,9 +682,9 @@ class EventCreationService {
   /**
    * Update instance status.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $instance
+   * @param EventInstance $instance
    *   The event instance for which to update the status.
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The event series entity.
    */
   public function updateInstanceStatus(EventInstance $instance, EventSeries $event) {
diff --git a/src/EventInstanceHtmlRouteProvider.php b/src/EventInstanceHtmlRouteProvider.php
index f1a3225..5ac1fdc 100644
--- a/src/EventInstanceHtmlRouteProvider.php
+++ b/src/EventInstanceHtmlRouteProvider.php
@@ -48,10 +48,10 @@ class EventInstanceHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -71,10 +71,10 @@ class EventInstanceHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -94,10 +94,10 @@ class EventInstanceHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -117,10 +117,10 @@ class EventInstanceHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -140,10 +140,10 @@ class EventInstanceHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
diff --git a/src/EventInstanceListBuilder.php b/src/EventInstanceListBuilder.php
index 599a2d4..1481b65 100644
--- a/src/EventInstanceListBuilder.php
+++ b/src/EventInstanceListBuilder.php
@@ -19,36 +19,36 @@ class EventInstanceListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;
 
   /**
    * Constructs a new EventInstanceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, ConfigFactory $config) {
@@ -110,7 +110,7 @@ class EventInstanceListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\recurring_events\EventInterface $entity */
+    /** @var EventInterface $entity */
     $row['name']['data'] = [
       '#type' => 'link',
       '#title' => $entity->getEventSeries()->label(),
diff --git a/src/EventInstanceStorageInterface.php b/src/EventInstanceStorageInterface.php
index 021ca2c..7b54dc2 100644
--- a/src/EventInstanceStorageInterface.php
+++ b/src/EventInstanceStorageInterface.php
@@ -19,7 +19,7 @@ interface EventInstanceStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of eventinstance revision IDs for a specific eventinstance.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventinstance entity.
    *
    * @return int[]
@@ -30,7 +30,7 @@ interface EventInstanceStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as eventinstance author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -41,7 +41,7 @@ interface EventInstanceStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventinstance entity.
    *
    * @return int
@@ -52,7 +52,7 @@ interface EventInstanceStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all eventinstance with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/EventSeriesHtmlRouteProvider.php b/src/EventSeriesHtmlRouteProvider.php
index 7fc913d..26027a8 100644
--- a/src/EventSeriesHtmlRouteProvider.php
+++ b/src/EventSeriesHtmlRouteProvider.php
@@ -48,10 +48,10 @@ class EventSeriesHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -71,10 +71,10 @@ class EventSeriesHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -94,10 +94,10 @@ class EventSeriesHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -117,10 +117,10 @@ class EventSeriesHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -140,10 +140,10 @@ class EventSeriesHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
diff --git a/src/EventSeriesListBuilder.php b/src/EventSeriesListBuilder.php
index fc59888..71f5c18 100644
--- a/src/EventSeriesListBuilder.php
+++ b/src/EventSeriesListBuilder.php
@@ -19,36 +19,36 @@ class EventSeriesListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;
 
   /**
    * Constructs a new EventSeriesListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, ConfigFactory $config) {
@@ -116,7 +116,7 @@ class EventSeriesListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\recurring_events\EventInterface $entity */
+    /** @var EventInterface $entity */
     $row['name']['data'] = [
       '#type' => 'link',
       '#title' => $entity->label(),
diff --git a/src/EventSeriesStorageInterface.php b/src/EventSeriesStorageInterface.php
index f4f1d56..31453cc 100644
--- a/src/EventSeriesStorageInterface.php
+++ b/src/EventSeriesStorageInterface.php
@@ -19,7 +19,7 @@ interface EventSeriesStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of eventseries revision IDs for a specific eventseries.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventseries entity.
    *
    * @return int[]
@@ -30,7 +30,7 @@ interface EventSeriesStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as eventseries author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -41,7 +41,7 @@ interface EventSeriesStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventseries entity.
    *
    * @return int
@@ -52,7 +52,7 @@ interface EventSeriesStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all eventseries with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/EventSubscriber/RecurringEventsAdminRouteSubscriber.php b/src/EventSubscriber/RecurringEventsAdminRouteSubscriber.php
index e639f70..24efa14 100644
--- a/src/EventSubscriber/RecurringEventsAdminRouteSubscriber.php
+++ b/src/EventSubscriber/RecurringEventsAdminRouteSubscriber.php
@@ -17,23 +17,23 @@ class RecurringEventsAdminRouteSubscriber extends RouteSubscriberBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The router builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;
 
   /**
    * Constructs a new RecurringEventsAdminRouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
@@ -57,7 +57,7 @@ class RecurringEventsAdminRouteSubscriber extends RouteSubscriberBase {
   /**
    * Rebuilds the router when node.settings:use_admin_theme is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The config crud event that gets fired.
    */
   public function onConfigSave(ConfigCrudEvent $event) {
diff --git a/src/Form/EventInstanceDeleteForm.php b/src/Form/EventInstanceDeleteForm.php
index d171547..af3ae77 100644
--- a/src/Form/EventInstanceDeleteForm.php
+++ b/src/Form/EventInstanceDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -22,36 +23,36 @@ class EventInstanceDeleteForm extends ContentEntityDeleteForm {
   /**
    * The untranslated event instance.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   public $untranslatedEventInstance;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * Construct a EventInstanceDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, Messenger $messenger, DateFormatter $date_formatter) {
@@ -77,7 +78,7 @@ class EventInstanceDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     if (!$entity->isDefaultTranslation()) {
       return $this
@@ -94,7 +95,7 @@ class EventInstanceDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
 
     // Make sure that deleting a translation does not delete the whole entity.
@@ -126,7 +127,7 @@ class EventInstanceDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
 
     // Make sure that deleting a translation does not delete the whole entity.
diff --git a/src/Form/EventInstanceForm.php b/src/Form/EventInstanceForm.php
index 92e8108..85ddb72 100644
--- a/src/Form/EventInstanceForm.php
+++ b/src/Form/EventInstanceForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Form;
 
+use Drupal\recurring_events\Entity\EventInstance;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -21,21 +22,21 @@ class EventInstanceForm extends ContentEntityForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -55,15 +56,15 @@ class EventInstanceForm extends ContentEntityForm {
   /**
    * Construct an EventInstanceForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, Messenger $messenger, AccountProxyInterface $current_user) {
@@ -79,7 +80,7 @@ class EventInstanceForm extends ContentEntityForm {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\recurring_events\Entity\EventInstance $entity */
+    /** @var EventInstance $entity */
     $event = $this->entity;
 
     $form['notifications'] = [
diff --git a/src/Form/EventInstanceRevisionDeleteForm.php b/src/Form/EventInstanceRevisionDeleteForm.php
index 47517cd..0aeffd8 100644
--- a/src/Form/EventInstanceRevisionDeleteForm.php
+++ b/src/Form/EventInstanceRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Form;
 
+use Drupal\recurring_events\EventInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -24,48 +25,48 @@ class EventInstanceRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The eventinstance revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;
 
   /**
    * The eventinstance storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventInstanceStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a new EventInstanceRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter, Messenger $messenger) {
diff --git a/src/Form/EventInstanceRevisionRevertForm.php b/src/Form/EventInstanceRevisionRevertForm.php
index 865a09c..da652db 100644
--- a/src/Form/EventInstanceRevisionRevertForm.php
+++ b/src/Form/EventInstanceRevisionRevertForm.php
@@ -24,39 +24,39 @@ class EventInstanceRevisionRevertForm extends ConfirmFormBase {
   /**
    * The eventinstance revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;
 
   /**
    * The eventinstance storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventSeriesStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a new EventInstanceRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventinstance storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, Messenger $messenger) {
@@ -150,12 +150,12 @@ class EventInstanceRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\recurring_events\EventInterface $revision
+   * @param EventInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\recurring_events\EventInterface
+   * @return EventInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/EventInstanceRevisionRevertTranslationForm.php b/src/Form/EventInstanceRevisionRevertTranslationForm.php
index b6ed817..74c2d6a 100644
--- a/src/Form/EventInstanceRevisionRevertTranslationForm.php
+++ b/src/Form/EventInstanceRevisionRevertTranslationForm.php
@@ -29,18 +29,18 @@ class EventInstanceRevisionRevertTranslationForm extends EventInstanceRevisionRe
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new EventInstanceRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventinstance storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -98,7 +98,7 @@ class EventInstanceRevisionRevertTranslationForm extends EventInstanceRevisionRe
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\recurring_events\EventInterface $default_revision */
+    /** @var EventInterface $default_revision */
     $latest_revision = $this->eventSeriesStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/EventInstanceSettingsForm.php b/src/Form/EventInstanceSettingsForm.php
index f4e0b72..d594010 100644
--- a/src/Form/EventInstanceSettingsForm.php
+++ b/src/Form/EventInstanceSettingsForm.php
@@ -36,7 +36,7 @@ class EventInstanceSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -53,7 +53,7 @@ class EventInstanceSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/EventInstanceTypeForm.php b/src/Form/EventInstanceTypeForm.php
index bd31e77..f31c4f9 100644
--- a/src/Form/EventInstanceTypeForm.php
+++ b/src/Form/EventInstanceTypeForm.php
@@ -15,14 +15,14 @@ class EventInstanceTypeForm extends EntityForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a new EventSeriesTypeForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/src/Form/EventSeriesDeleteForm.php b/src/Form/EventSeriesDeleteForm.php
index ec48cd1..7bffb05 100644
--- a/src/Form/EventSeriesDeleteForm.php
+++ b/src/Form/EventSeriesDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -23,28 +24,28 @@ class EventSeriesDeleteForm extends ContentEntityDeleteForm {
   /**
    * The untranslated eventseries.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   public $untranslatedEvent;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
@@ -65,17 +66,17 @@ class EventSeriesDeleteForm extends ContentEntityDeleteForm {
   /**
    * Construct an EventSeriesDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, Messenger $messenger, Renderer $renderer, ConfigFactory $config) {
@@ -90,7 +91,7 @@ class EventSeriesDeleteForm extends ContentEntityDeleteForm {
    */
   public function getQuestion() {
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     if (!$entity->isDefaultTranslation()) {
       return $this
@@ -170,7 +171,7 @@ class EventSeriesDeleteForm extends ContentEntityDeleteForm {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
 
     // Make sure that deleting a translation does not delete the whole entity.
diff --git a/src/Form/EventSeriesForm.php b/src/Form/EventSeriesForm.php
index c63d5b7..b75b85c 100644
--- a/src/Form/EventSeriesForm.php
+++ b/src/Form/EventSeriesForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Form;
 
+use Drupal\recurring_events\Entity\EventSeries;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -37,70 +38,70 @@ class EventSeriesForm extends ContentEntityForm {
   /**
    * The event creation service.
    *
-   * @var \Drupal\recurring_events\EventCreationService
+   * @var EventCreationService
    */
   protected $creationService;
 
   /**
    * The entity storage interface.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The entity field manager.
    *
-   * @var Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
   /**
    * The field type plugin manager.
    *
-   * @var Drupal\Core\Field\FieldTypePluginManager
+   * @var FieldTypePluginManager
    */
   protected $fieldTypePluginManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
@@ -127,29 +128,29 @@ class EventSeriesForm extends ContentEntityForm {
   /**
    * Construct an EventSeriesForm.
    *
-   * @param \Drupal\recurring_events\EventCreationService $creation_service
+   * @param EventCreationService $creation_service
    *   The event creation service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The storage interface.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManager $field_type_plugin_manager
+   * @param FieldTypePluginManager $field_type_plugin_manager
    *   The field type plugin manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository interface.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
    */
   public function __construct(EventCreationService $creation_service, EntityStorageInterface $storage, Messenger $messenger, DateFormatter $date_formatter, EntityFieldManager $entity_field_manager, FieldTypePluginManager $field_type_plugin_manager, EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, AccountProxyInterface $current_user = NULL, ModuleHandler $module_handler = NULL, ConfigFactory $config_factory = NULL) {
@@ -174,7 +175,7 @@ class EventSeriesForm extends ContentEntityForm {
 
     $config = $this->configFactory->get('recurring_events.eventseries.config');
 
-    /** @var \Drupal\recurring_events\Entity\EventSeries $entity */
+    /** @var EventSeries $entity */
     $entity = $this->entity;
 
     $editing = ($form_state->getBuildInfo()['form_id'] == 'eventseries_' . $entity->bundle() . '_edit_form');
@@ -333,7 +334,7 @@ class EventSeriesForm extends ContentEntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\recurring_events\Entity\EventSeries $entity */
+    /** @var EventSeries $entity */
     $entity = $this->entity;
     $editing = ($form_state->getBuildInfo()['form_id'] == 'eventseries_' . $entity->bundle() . '_edit_form');
     $trigger = $form_state->getTriggeringElement();
diff --git a/src/Form/EventSeriesRevisionDeleteForm.php b/src/Form/EventSeriesRevisionDeleteForm.php
index 57e68c6..8595cef 100644
--- a/src/Form/EventSeriesRevisionDeleteForm.php
+++ b/src/Form/EventSeriesRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Form;
 
+use Drupal\recurring_events\EventInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -24,48 +25,48 @@ class EventSeriesRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The eventseries revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;
 
   /**
    * The eventseries storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventSeriesStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a new EventSeriesRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter, Messenger $messenger) {
diff --git a/src/Form/EventSeriesRevisionRevertForm.php b/src/Form/EventSeriesRevisionRevertForm.php
index 0eff5dd..712a944 100644
--- a/src/Form/EventSeriesRevisionRevertForm.php
+++ b/src/Form/EventSeriesRevisionRevertForm.php
@@ -24,39 +24,39 @@ class EventSeriesRevisionRevertForm extends ConfirmFormBase {
   /**
    * The eventseries revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;
 
   /**
    * The eventseries storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventSeriesStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a new EventSeriesRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventseries storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, Messenger $messenger) {
@@ -152,12 +152,12 @@ class EventSeriesRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\recurring_events\EventInterface $revision
+   * @param EventInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\recurring_events\EventInterface
+   * @return EventInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/EventSeriesRevisionRevertTranslationForm.php b/src/Form/EventSeriesRevisionRevertTranslationForm.php
index aca258e..658f30b 100644
--- a/src/Form/EventSeriesRevisionRevertTranslationForm.php
+++ b/src/Form/EventSeriesRevisionRevertTranslationForm.php
@@ -27,27 +27,27 @@ class EventSeriesRevisionRevertTranslationForm extends EventSeriesRevisionRevert
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new EventSeriesRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventseries storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, TimeInterface $time) {
@@ -107,7 +107,7 @@ class EventSeriesRevisionRevertTranslationForm extends EventSeriesRevisionRevert
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\recurring_events\EventInterface $default_revision */
+    /** @var EventInterface $default_revision */
     $latest_revision = $this->eventSeriesStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/EventSeriesSettingsForm.php b/src/Form/EventSeriesSettingsForm.php
index df892a6..0a51afb 100644
--- a/src/Form/EventSeriesSettingsForm.php
+++ b/src/Form/EventSeriesSettingsForm.php
@@ -19,14 +19,14 @@ class EventSeriesSettingsForm extends ConfigFormBase {
   /**
    * The event creation service.
    *
-   * @var \Drupal\recurring_events\EventCreationService
+   * @var EventCreationService
    */
   protected $creationService;
 
   /**
    * Constructs a new EventSeriesSettingsForm.
    *
-   * @param \Drupal\recurring_events\EventCreationService $creation_service
+   * @param EventCreationService $creation_service
    *   The event creation service.
    */
   public function __construct(EventCreationService $creation_service) {
@@ -64,7 +64,7 @@ class EventSeriesSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -93,7 +93,7 @@ class EventSeriesSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/EventSeriesTypeDeleteForm.php b/src/Form/EventSeriesTypeDeleteForm.php
index 66dab77..9b219e9 100644
--- a/src/Form/EventSeriesTypeDeleteForm.php
+++ b/src/Form/EventSeriesTypeDeleteForm.php
@@ -16,14 +16,14 @@ class EventSeriesTypeDeleteForm extends EntityConfirmFormBase {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Construct a EventSeriesTypeDeleteForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/src/Form/EventSeriesTypeForm.php b/src/Form/EventSeriesTypeForm.php
index c01ada4..def707e 100644
--- a/src/Form/EventSeriesTypeForm.php
+++ b/src/Form/EventSeriesTypeForm.php
@@ -15,14 +15,14 @@ class EventSeriesTypeForm extends EntityForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a new EventSeriesTypeForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/src/Form/ExcludedDatesDeleteForm.php b/src/Form/ExcludedDatesDeleteForm.php
index 81d3be8..ebb1fb2 100644
--- a/src/Form/ExcludedDatesDeleteForm.php
+++ b/src/Form/ExcludedDatesDeleteForm.php
@@ -16,14 +16,14 @@ class ExcludedDatesDeleteForm extends EntityConfirmFormBase {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Construct an IncludedDatesDeleteForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/src/Form/ExcludedDatesForm.php b/src/Form/ExcludedDatesForm.php
index 464f824..a9517fb 100644
--- a/src/Form/ExcludedDatesForm.php
+++ b/src/Form/ExcludedDatesForm.php
@@ -15,14 +15,14 @@ class ExcludedDatesForm extends EntityForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Construct an FieldInheritanceForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/src/Form/IncludedDatesDeleteForm.php b/src/Form/IncludedDatesDeleteForm.php
index f189166..0b74aa5 100644
--- a/src/Form/IncludedDatesDeleteForm.php
+++ b/src/Form/IncludedDatesDeleteForm.php
@@ -16,14 +16,14 @@ class IncludedDatesDeleteForm extends EntityConfirmFormBase {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Construct an IncludedDatesDeleteForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/src/Form/IncludedDatesForm.php b/src/Form/IncludedDatesForm.php
index eabcf61..289a34f 100644
--- a/src/Form/IncludedDatesForm.php
+++ b/src/Form/IncludedDatesForm.php
@@ -15,14 +15,14 @@ class IncludedDatesForm extends EntityForm {
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Construct an FieldInheritanceForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
diff --git a/src/Plugin/Field/FieldFormatter/EventInstanceDateCompactFormatter.php b/src/Plugin/Field/FieldFormatter/EventInstanceDateCompactFormatter.php
index a32f3c5..01c47e2 100644
--- a/src/Plugin/Field/FieldFormatter/EventInstanceDateCompactFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EventInstanceDateCompactFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
@@ -40,7 +41,7 @@ class EventInstanceDateCompactFormatter extends EntityReferenceFormatterBase {
   /**
    * The date range format entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateRangeFormatStorage;
 
@@ -51,7 +52,7 @@ class EventInstanceDateCompactFormatter extends EntityReferenceFormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -63,7 +64,7 @@ class EventInstanceDateCompactFormatter extends EntityReferenceFormatterBase {
    *   Third party settings.
    * @param \Drupal\daterange_compact\DateRangeFormatterInterface $date_range_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $date_range_format_storage
+   * @param EntityStorageInterface $date_range_format_storage
    *   The date format entity storage.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, DateRangeFormatterInterface $date_range_formatter, EntityStorageInterface $date_range_format_storage) {
@@ -159,9 +160,9 @@ class EventInstanceDateCompactFormatter extends EntityReferenceFormatterBase {
       $date_string = '';
       $user_timezone = new \DateTimeZone(date_default_timezone_get());
       if (!empty($entity->date->start_date) && !empty($entity->date->end_date)) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+        /** @var DrupalDateTime $start_date */
         $start_date = $entity->date->start_date;
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+        /** @var DrupalDateTime $end_date */
         $end_date = $entity->date->end_date;
 
         $start_date->setTimezone($user_timezone);
diff --git a/src/Plugin/Field/FieldFormatter/EventInstanceDateFormatter.php b/src/Plugin/Field/FieldFormatter/EventInstanceDateFormatter.php
index dd33de4..fe093ae 100644
--- a/src/Plugin/Field/FieldFormatter/EventInstanceDateFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EventInstanceDateFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -103,9 +104,9 @@ class EventInstanceDateFormatter extends EntityReferenceFormatterBase {
       $date_string = '';
       $user_timezone = new \DateTimeZone(date_default_timezone_get());
       if (!empty($entity->date->start_date) && !empty($entity->date->end_date)) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+        /** @var DrupalDateTime $start_date */
         $start_date = $entity->date->start_date;
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+        /** @var DrupalDateTime $end_date */
         $end_date = $entity->date->end_date;
 
         $start_date->setTimezone($user_timezone);
diff --git a/src/Plugin/Field/FieldType/ConsecutiveRecurringDate.php b/src/Plugin/Field/FieldType/ConsecutiveRecurringDate.php
index 793a844..8435254 100644
--- a/src/Plugin/Field/FieldType/ConsecutiveRecurringDate.php
+++ b/src/Plugin/Field/FieldType/ConsecutiveRecurringDate.php
@@ -286,9 +286,9 @@ class ConsecutiveRecurringDate extends DateRangeItem implements RecurringEventsF
   /**
    * Find all the daily date occurrences between two dates.
    *
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    * @param bool $count_only
    *   Whether to only return a count.
@@ -338,7 +338,7 @@ class ConsecutiveRecurringDate extends DateRangeItem implements RecurringEventsF
   /**
    * Find all the time slots between two times of a specific day.
    *
-   * @param Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    * @param array $form_data
    *   The form data used to find the time slots.
diff --git a/src/Plugin/Field/FieldType/DailyRecurringDate.php b/src/Plugin/Field/FieldType/DailyRecurringDate.php
index e82af9f..12155f9 100644
--- a/src/Plugin/Field/FieldType/DailyRecurringDate.php
+++ b/src/Plugin/Field/FieldType/DailyRecurringDate.php
@@ -257,9 +257,9 @@ class DailyRecurringDate extends DateRangeItem implements RecurringEventsFieldTy
   /**
    * Find all the daily date occurrences between two dates.
    *
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldType/MonthlyRecurringDate.php b/src/Plugin/Field/FieldType/MonthlyRecurringDate.php
index 6704956..f7c4782 100644
--- a/src/Plugin/Field/FieldType/MonthlyRecurringDate.php
+++ b/src/Plugin/Field/FieldType/MonthlyRecurringDate.php
@@ -292,9 +292,9 @@ class MonthlyRecurringDate extends WeeklyRecurringDate implements RecurringEvent
    *
    * @param int $day_of_month
    *   The day of the month.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
@@ -365,10 +365,10 @@ class MonthlyRecurringDate extends WeeklyRecurringDate implements RecurringEvent
    *
    * @param int $day_of_month
    *   The day of the month.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The start date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The next occurrence of a specific day of the month.
    */
   public static function findNextMonthDay($day_of_month, DrupalDateTime $date) {
@@ -402,9 +402,9 @@ class MonthlyRecurringDate extends WeeklyRecurringDate implements RecurringEvent
    *   Which occurrence of the weekday to find.
    * @param string $weekday
    *   The name of the day of the week.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldType/WeeklyRecurringDate.php b/src/Plugin/Field/FieldType/WeeklyRecurringDate.php
index bd770fb..6c8c6d6 100644
--- a/src/Plugin/Field/FieldType/WeeklyRecurringDate.php
+++ b/src/Plugin/Field/FieldType/WeeklyRecurringDate.php
@@ -196,9 +196,9 @@ class WeeklyRecurringDate extends DailyRecurringDate implements RecurringEventsF
    *
    * @param string $weekday
    *   The name of the day of the week.
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldWidget/ConsecutiveRecurringDateWidget.php b/src/Plugin/Field/FieldWidget/ConsecutiveRecurringDateWidget.php
index 3b8b620..08eed5a 100644
--- a/src/Plugin/Field/FieldWidget/ConsecutiveRecurringDateWidget.php
+++ b/src/Plugin/Field/FieldWidget/ConsecutiveRecurringDateWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\recurring_events\Plugin\Field\FieldWidget;
 
+use Drupal\recurring_events\Entity\EventSeries;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\datetime_range\Plugin\Field\FieldWidget\DateRangeDefaultWidget;
 use Drupal\Core\Form\FormStateInterface;
@@ -249,7 +250,7 @@ class ConsecutiveRecurringDateWidget extends DateRangeDefaultWidget {
    */
   public function changeDuration(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
-    /** @var \Drupal\recurring_events\Entity\EventSeries $entity */
+    /** @var EventSeries $entity */
     $entity = $form_state->getformObject()->getEntity();
     $form_id = $form_state->getBuildInfo()['form_id'] == 'eventseries_' . $entity->bundle() . '_edit_form' ? 'eventseries-' . $entity->bundle() . '-edit-form' : 'eventseries-' . $entity->bundle() . '-add-form';
     $response->addCommand(new HtmlCommand('#' . $form_id, $form));
@@ -287,7 +288,7 @@ class ConsecutiveRecurringDateWidget extends DateRangeDefaultWidget {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -311,7 +312,7 @@ class ConsecutiveRecurringDateWidget extends DateRangeDefaultWidget {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/Field/FieldWidget/DailyRecurringDateWidget.php b/src/Plugin/Field/FieldWidget/DailyRecurringDateWidget.php
index 6f72c10..553e3c0 100644
--- a/src/Plugin/Field/FieldWidget/DailyRecurringDateWidget.php
+++ b/src/Plugin/Field/FieldWidget/DailyRecurringDateWidget.php
@@ -203,7 +203,7 @@ class DailyRecurringDateWidget extends DateRangeDefaultWidget {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/Field/FieldWidget/MonthlyRecurringDateWidget.php b/src/Plugin/Field/FieldWidget/MonthlyRecurringDateWidget.php
index 653dddf..e8f4a91 100644
--- a/src/Plugin/Field/FieldWidget/MonthlyRecurringDateWidget.php
+++ b/src/Plugin/Field/FieldWidget/MonthlyRecurringDateWidget.php
@@ -160,7 +160,7 @@ class MonthlyRecurringDateWidget extends WeeklyRecurringDateWidget {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/Field/FieldWidget/WeeklyRecurringDateWidget.php b/src/Plugin/Field/FieldWidget/WeeklyRecurringDateWidget.php
index ac7f3c6..5da203f 100644
--- a/src/Plugin/Field/FieldWidget/WeeklyRecurringDateWidget.php
+++ b/src/Plugin/Field/FieldWidget/WeeklyRecurringDateWidget.php
@@ -116,7 +116,7 @@ class WeeklyRecurringDateWidget extends DailyRecurringDateWidget {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Plugin/migrate/destination/EntityEventSeries.php b/src/Plugin/migrate/destination/EntityEventSeries.php
index 3fc20ed..5b0ace5 100644
--- a/src/Plugin/migrate/destination/EntityEventSeries.php
+++ b/src/Plugin/migrate/destination/EntityEventSeries.php
@@ -86,7 +86,7 @@ class EntityEventSeries extends EntityContentBase {
    *   Date field data.
    * @param \DateTimeZone $source_timezone
    *   The source timezone for the recurring dates.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Row object.
    */
   private function setRecurringDateValues(array $source, \DateTimeZone $source_timezone, Row $row) {
diff --git a/src/Plugin/views/argument/IndexTidEventSeriesDepth.php b/src/Plugin/views/argument/IndexTidEventSeriesDepth.php
index a77a681..81bc511 100644
--- a/src/Plugin/views/argument/IndexTidEventSeriesDepth.php
+++ b/src/Plugin/views/argument/IndexTidEventSeriesDepth.php
@@ -30,14 +30,14 @@ class IndexTidEventSeriesDepth extends IndexTidDepth {
   /**
    * The entity bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @var EntityFieldManagerInterface $entity_field_manager
    */
   protected $entityFieldManager;
 
@@ -62,11 +62,11 @@ class IndexTidEventSeriesDepth extends IndexTidDepth {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $term_storage
+   * @param EntityStorageInterface $term_storage
    *   The entity storage interface.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $term_storage, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/Plugin/views/filter/TaxonomyIndexTidEventSeriesDepth.php b/src/Plugin/views/filter/TaxonomyIndexTidEventSeriesDepth.php
index d92e0ea..24e6184 100644
--- a/src/Plugin/views/filter/TaxonomyIndexTidEventSeriesDepth.php
+++ b/src/Plugin/views/filter/TaxonomyIndexTidEventSeriesDepth.php
@@ -28,14 +28,14 @@ class TaxonomyIndexTidEventSeriesDepth extends TaxonomyIndexTid {
   /**
    * The entity bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @var EntityFieldManagerInterface $entity_field_manager
    */
   protected $entityFieldManager;
 
@@ -62,15 +62,15 @@ class TaxonomyIndexTidEventSeriesDepth extends TaxonomyIndexTid {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabulary_storage
+   * @param VocabularyStorageInterface $vocabulary_storage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, VocabularyStorageInterface $vocabulary_storage, TermStorageInterface $term_storage, AccountInterface $current_user = NULL,EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, EntityFieldManagerInterface $entity_field_manager = NULL) {
diff --git a/src/RecurringEventsFieldTypeInterface.php b/src/RecurringEventsFieldTypeInterface.php
index 6b27cf9..63c8e38 100644
--- a/src/RecurringEventsFieldTypeInterface.php
+++ b/src/RecurringEventsFieldTypeInterface.php
@@ -13,7 +13,7 @@ interface RecurringEventsFieldTypeInterface {
   /**
    * Converts an EventSeries entity's recurring configuration to an array.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
    *
    * @return array
@@ -24,7 +24,7 @@ interface RecurringEventsFieldTypeInterface {
   /**
    * Converts a form state object's recurring configuration to an array.
    *
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of an updated event series entity.
    *
    * @return array
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 8b22db3..e244bd1 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\recurring_events\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,7 +23,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
