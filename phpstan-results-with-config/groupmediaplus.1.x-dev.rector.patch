diff --git a/modules/groupmediaplus_upload/src/Hooks.php b/modules/groupmediaplus_upload/src/Hooks.php
index 599747b..998fb84 100644
--- a/modules/groupmediaplus_upload/src/Hooks.php
+++ b/modules/groupmediaplus_upload/src/Hooks.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\groupmediaplus_upload;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\group\Entity\GroupContentTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\group\Entity\Group;
@@ -25,7 +28,7 @@ class Hooks {
    * it in the state api.
    * Hopefully something better will happen meanwhile in core.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function hookFormAlter(&$form, FormStateInterface $formState, $formId) {
     $groupIds = $formState->get('groupmediaplus_group_ids');
@@ -39,7 +42,7 @@ class Hooks {
   /**
    * Implements hook_entity_insert().
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function hookEntityInsert(EntityInterface $entity) {
     if ($entity instanceof MediaInterface && ($formState = SubmitStatus::getFormState())) {
@@ -50,10 +53,10 @@ class Hooks {
   /**
    * Submit media group content.
    *
-   * @param \Drupal\media\MediaInterface $media
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param MediaInterface $media
+   * @param FormStateInterface $formState
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function submitMedia(MediaInterface $media, FormStateInterface $formState) {
     $groupIds = $formState->get('groupmediaplus_group_ids');
@@ -76,16 +79,16 @@ class Hooks {
    *
    * @todo Move to utility class.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group.
    *
-   * @return \Drupal\group\Entity\GroupContentTypeInterface|null
+   * @return GroupContentTypeInterface|null
    *   The (unique) group content type, or null.
    */
   protected static function getApplicableGroupContentType(EntityInterface $entity, GroupInterface $group) {
-    /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+    /** @var GroupContentTypeInterface $groupContentType */
     foreach (GroupContentType::loadByEntityTypeId($entity->getEntityTypeId()) as $groupContentType) {
       if (
         $groupContentType->getGroupTypeId() === $group->getGroupType()->id()
diff --git a/src/GroupIdTools.php b/src/GroupIdTools.php
index 8e97e80..b3d8ffb 100644
--- a/src/GroupIdTools.php
+++ b/src/GroupIdTools.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\groupmediaplus;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
+use Symfony\Component\Routing\RouterInterface;
+use Drupal\group\Entity\GroupContentInterface;
+use Drupal\group\Entity\GroupContentTypeInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -25,12 +31,12 @@ class GroupIdTools {
    * @todo Refactor this conceptually.
    *
    * @param $debugTitle
-   * @param \Drupal\Core\Form\FormStateInterface|null $formState
+   * @param FormStateInterface|null $formState
    * @param null $form
    *
    * @return mixed|null|string[]
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function getAndSpreadGroupIds($debugTitle, FormStateInterface $formState = NULL, &$form = NULL) {
     self::log("$debugTitle - Get&spread group IDs");
@@ -64,7 +70,7 @@ class GroupIdTools {
 
   /**
    * @return null|string[]
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function getGroupIdsFromOriginalPathQueryParameter() {
     $ids = self::extractGroupIdsFromPath(\Drupal::request()->query->get('original_path'));
@@ -74,7 +80,7 @@ class GroupIdTools {
 
   /**
    * @return null|string[]
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function getGroupIdsFromRefererHeader() {
     $ids = self::extractGroupIdsFromPath(\Drupal::request()->headers->get('referer'));
@@ -99,7 +105,7 @@ class GroupIdTools {
   public static function getGroupIdsFromEntityBrowserState() {
     $uuid = \Drupal::request()->query->get('uuid');
     if ($uuid) {
-      /** @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selectionStorage */
+      /** @var KeyValueStoreExpirableInterface $selectionStorage */
       $selectionStorage = \Drupal::service('entity_browser.selection_storage');
       $data = $selectionStorage->get($uuid);
       $ids = $data['widget_context']['groupmediaplus_group_ids'] ?? NULL;
@@ -116,13 +122,13 @@ class GroupIdTools {
    *
    * @return string[]|null
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function extractGroupIdsFromPath($path, $entityTypeIds = NULL) {
     $ids = NULL;
 
     if ($path) {
-      /** @var \Symfony\Component\Routing\RouterInterface $router */
+      /** @var RouterInterface $router */
       $router = \Drupal::service('router.no_access_checks');
       try {
         $parameters = $router->match($path);
@@ -138,11 +144,11 @@ class GroupIdTools {
   /**
    * Extract group IDs from route match.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface|null $routeMatch
+   * @param RouteMatchInterface|null $routeMatch
    *
    * @return string[]|null
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected static function extractGroupIdsFromRouteMatch(RouteMatchInterface $routeMatch = NULL) {
     if (!$routeMatch) {
@@ -159,7 +165,7 @@ class GroupIdTools {
    *
    * @return string[]|null
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected static function extractGroupIdsFromRouteParameters(array $parameters, array $entityTypeIds = NULL) {
     $ids = NULL;
@@ -182,11 +188,11 @@ class GroupIdTools {
   /**
    * 2: Get group ID from (popup!) form state (or Referer =:-()
    *
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *
    * @return string[]|null
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function getGroupIdsFromFormState(FormStateInterface $formState = NULL) {
     if (!$formState) {
@@ -230,7 +236,7 @@ class GroupIdTools {
   /**
    * Get entity group IDs, keyed by group ID.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return array
    */
@@ -239,7 +245,7 @@ class GroupIdTools {
       return NULL;
     }
     $groupIds = [];
-    /** @var \Drupal\group\Entity\GroupContentInterface $groupContent */
+    /** @var GroupContentInterface $groupContent */
     foreach (GroupContent::loadByEntity($entity) as $groupContent) {
       $groupId = $groupContent->getGroup()->id();
       $groupIds[$groupId] = $groupId;
@@ -263,7 +269,7 @@ class GroupIdTools {
   public static function setGroupIdsToEntityBrowserState($groupIds) {
     $uuid = \Drupal::request()->query->get('uuid');
     if ($uuid) {
-      /** @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface $selectionStorage */
+      /** @var KeyValueStoreExpirableInterface $selectionStorage */
       $selectionStorage = \Drupal::service('entity_browser.selection_storage');
       $data = $selectionStorage->get($uuid);
       $data['widget_context']['groupmediaplus_group_ids'] = $groupIds;
@@ -272,7 +278,7 @@ class GroupIdTools {
   }
 
   /**
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    * @param $groupIds
    */
   public static function setGroupIdsToFormState(FormStateInterface $formState = NULL, $groupIds) {
@@ -286,14 +292,14 @@ class GroupIdTools {
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function groupContentEntityTypeOptions() {
     $entityTypeIds = [];
-    /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+    /** @var GroupContentTypeInterface $groupContentType */
     foreach (GroupContentType::loadMultiple() as $groupContentType) {
       $entityTypeId = $groupContentType->getContentPlugin()->getEntityTypeId();
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $entityType */
+      /** @var EntityTypeInterface $entityType */
       $entityType = \Drupal::entityTypeManager()->getDefinition($entityTypeId);
       $entityTypeIds[$entityTypeId] = $entityType->getLabel();
     }
diff --git a/src/GroupMediaPlus.php b/src/GroupMediaPlus.php
index 5917250..d530aea 100644
--- a/src/GroupMediaPlus.php
+++ b/src/GroupMediaPlus.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\groupmediaplus;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -12,10 +13,10 @@ class GroupMediaPlus {
 
   /**
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    * @param $formId
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function hookFormAlter(&$form, FormStateInterface $formState, $formId) {
     if (
@@ -30,7 +31,7 @@ class GroupMediaPlus {
    * 1: Add group IDs from form state to widget.
    *
    * @param $element
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    * @param $widgetContext
    */
   public static function transferGroupIdsFromFormStateToWidget(&$element, FormStateInterface $formState, &$widgetContext) {
@@ -68,7 +69,7 @@ class GroupMediaPlus {
       // Media library.
       // @todo We should not mess with this internal class. Sigh.
       elseif ($isMediaLibraryWidget) {
-        /** @var \Drupal\media_library\MediaLibraryState $mediaLibraryState */
+        /** @var MediaLibraryState $mediaLibraryState */
         $mediaLibraryState->set('groupmediaplus_group_ids', $groupIds);
         GroupIdTools::log('FormStateToWidget: Set media_library state');
       }
diff --git a/src/Plugin/views/argument_default/GroupIdsFromNodePath.php b/src/Plugin/views/argument_default/GroupIdsFromNodePath.php
index a67bfaf..120b58f 100644
--- a/src/Plugin/views/argument_default/GroupIdsFromNodePath.php
+++ b/src/Plugin/views/argument_default/GroupIdsFromNodePath.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\groupmediaplus\Plugin\views\argument_default;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\groupmediaplus\GroupIdTools;
 use Drupal\token\Token;
@@ -59,7 +60,7 @@ class GroupIdsFromNodePath extends ArgumentDefaultPluginBase {
 
   /**
    * @inheritDoc
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     parent::buildOptionsForm($form, $form_state);
@@ -75,7 +76,7 @@ class GroupIdsFromNodePath extends ArgumentDefaultPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function getArgument() {
     $groupIds = GroupIdTools::getAndSpreadGroupIds('Get views argument');
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index 73f9e18..854769b 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
