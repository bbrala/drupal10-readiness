diff --git a/post_api.info.yml b/post_api.info.yml
index 7ea123a..355a4d1 100644
--- a/post_api.info.yml
+++ b/post_api.info.yml
@@ -1,6 +1,5 @@
 name: 'Post API'
 type: module
 description: 'Developer tools to support POST requests to external endpoints for any data queued via Queue API.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Custom'
diff --git a/src/Event/QueueItemProcessedEvent.php b/src/Event/QueueItemProcessedEvent.php
index f7017ff..bddf1f1 100644
--- a/src/Event/QueueItemProcessedEvent.php
+++ b/src/Event/QueueItemProcessedEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\post_api\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines the "Queue Item Processed" event.
diff --git a/src/Event/QueueProcessingCompleteEvent.php b/src/Event/QueueProcessingCompleteEvent.php
index f473195..c26f5f7 100644
--- a/src/Event/QueueProcessingCompleteEvent.php
+++ b/src/Event/QueueProcessingCompleteEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\post_api\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines the Queue processing finished event.
diff --git a/src/Form/PostApiQueueForm.php b/src/Form/PostApiQueueForm.php
index 2d49e32..295e0d8 100644
--- a/src/Form/PostApiQueueForm.php
+++ b/src/Form/PostApiQueueForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\post_api\Form;
 
+use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\FormBase;
@@ -22,35 +23,35 @@ class PostApiQueueForm extends FormBase {
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * Queue Worker Manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Database
+   * @var Database
    */
   private $database;
 
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private $renderer;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -70,15 +71,15 @@ class PostApiQueueForm extends FormBase {
   /**
    * PostApiQueueForm constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   Queue factory.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   Queue manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(Connection $database, QueueFactory $queue, QueueWorkerManagerInterface $queue_manager, RendererInterface $renderer, DateFormatterInterface $date_formatter) {
diff --git a/src/Plugin/QueueWorker/PostApiQueueBase.php b/src/Plugin/QueueWorker/PostApiQueueBase.php
index 3584754..1ada858 100644
--- a/src/Plugin/QueueWorker/PostApiQueueBase.php
+++ b/src/Plugin/QueueWorker/PostApiQueueBase.php
@@ -28,59 +28,59 @@ abstract class PostApiQueueBase extends QueueWorkerBase implements ContainerFact
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queue;
 
   /**
    * Request.
    *
-   * @var \Drupal\post_api\Service\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * A date time instance.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Event Dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * Creates a new PostApiBase object.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   Queue Factory.
-   * @param \Drupal\post_api\Service\Request $request
+   * @param Request $request
    *   Request.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   A date time instance.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $eventDispatcher
+   * @param ContainerAwareEventDispatcher $eventDispatcher
    *   Event Dispatcher.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   Request.
    */
   public function __construct(QueueFactory $queue, Request $request, ConfigFactoryInterface $config_factory, TimeInterface $time, ContainerAwareEventDispatcher $eventDispatcher, LoggerChannelFactoryInterface $logger) {
@@ -137,7 +137,7 @@ abstract class PostApiQueueBase extends QueueWorkerBase implements ContainerFact
           // Dispatch an event to which Event Subscribers can react.
           // E.g. need special logging for various 20* responses.
           $event_item_processed = new QueueItemProcessedEvent($response_code, $item->data);
-          $this->eventDispatcher->dispatch('post_api_queue_item_processed_event', $event_item_processed);
+          $this->eventDispatcher->dispatch($event_item_processed, 'post_api_queue_item_processed_event');
 
           // API POST is a success - delete processed item from queue.
           $queue->deleteItem($item);
@@ -165,7 +165,7 @@ abstract class PostApiQueueBase extends QueueWorkerBase implements ContainerFact
 
     // Dispatch an event to which Event Subscribers can react.
     $event_queue_complete = new QueueProcessingCompleteEvent($number_in_queue, $number_released);
-    $this->eventDispatcher->dispatch('post_api_queue_processing_complete_event', $event_queue_complete);
+    $this->eventDispatcher->dispatch($event_queue_complete, 'post_api_queue_processing_complete_event');
   }
 
   /**
diff --git a/src/Service/AddToQueue.php b/src/Service/AddToQueue.php
index da7161f..e86402a 100644
--- a/src/Service/AddToQueue.php
+++ b/src/Service/AddToQueue.php
@@ -35,14 +35,14 @@ class AddToQueue {
   /**
    * Queue.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   private $queue;
 
   /**
    * AddToQueue constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   Queue factory.
    */
   public function __construct(QueueFactory $queue) {
diff --git a/src/Service/Request.php b/src/Service/Request.php
index d711fda..7120e33 100644
--- a/src/Service/Request.php
+++ b/src/Service/Request.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\post_api\Service;
 
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -18,23 +19,23 @@ class Request implements ContainerFactoryPluginInterface {
   /**
    * HTTP Client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   private $httpClient;
 
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $logger;
 
   /**
    * Constructs a Request object.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   HTTP client.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   Logger.
    */
   public function __construct(ClientInterface $http_client, LoggerChannelFactoryInterface $logger) {
@@ -62,9 +63,9 @@ class Request implements ContainerFactoryPluginInterface {
    * @return int|null
    *   Response object OR FALSE for exceptions.
    *
-   * @throws \GuzzleHttp\Exception\ServerException
-   * @throws \GuzzleHttp\Exception\RequestException
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws ServerException
+   * @throws RequestException
+   * @throws GuzzleException
    */
   public function sendRequest($endpoint, $apikey, array $payload) {
     $headers = [
diff --git a/tests/src/Kernel/PostApiQueueTest.php b/tests/src/Kernel/PostApiQueueTest.php
index ecc4775..f9d61b4 100644
--- a/tests/src/Kernel/PostApiQueueTest.php
+++ b/tests/src/Kernel/PostApiQueueTest.php
@@ -46,6 +46,7 @@ class PostApiQueueTest extends KernelTestBase {
 
   /**
    * Tests the Post API queue.
+   * @doesNotPerformAssertions
    */
   public function testPostApiQueue() {
     // Create queue.
@@ -113,7 +114,7 @@ class PostApiQueueTest extends KernelTestBase {
   /**
    * Queues and dequeues a set of items to check the basic queue functionality.
    *
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   An instantiated queue object.
    */
   protected function runBasicQueueTest(QueueInterface $queue) {
@@ -138,7 +139,7 @@ class PostApiQueueTest extends KernelTestBase {
     $new_items[] = $item->data;
 
     // First two dequeued items should match the first two items we queued.
-    $this->assertEqual($this->queueScore($data, $new_items), 2, 'Two items matched');
+    $this->assertEquals($this->queueScore($data, $new_items), 2, 'Two items matched');
 
     // Add two more items.
     $queue->createItem($data[2]);
@@ -154,10 +155,10 @@ class PostApiQueueTest extends KernelTestBase {
 
     // All dequeued items should match the items we queued exactly once,
     // therefore the score must be exactly 4.
-    $this->assertEqual($this->queueScore($data, $new_items), 4, 'Four items matched');
+    $this->assertEquals($this->queueScore($data, $new_items), 4, 'Four items matched');
 
     // There should be no duplicate items.
-    $this->assertEqual($this->queueScore($new_items, $new_items), 4, 'Four items matched');
+    $this->assertEquals($this->queueScore($new_items, $new_items), 4, 'Four items matched');
 
     $this->clearQueue($queue, $items);
 
