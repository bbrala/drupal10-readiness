modules/contrib/entity_rest_extra/entity_rest_extra.module
modules/contrib/entity_rest_extra/src/Plugin/rest/resource/EntityBundleFieldsResource.php
modules/contrib/entity_rest_extra/src/Plugin/rest/resource/EntityBundleViewModesResource.php
modules/contrib/entity_rest_extra/src/Plugin/rest/resource/EntityBundlesResource.php

3 files with changes
====================

1) modules/contrib/entity_rest_extra/src/Plugin/rest/resource/EntityBundlesResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_rest_extra\Plugin\rest\resource;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityTypeBundleInfo;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\node\Entity\NodeType;
 use Drupal\rest\Plugin\ResourceBase;
@@ @@
   /**
    *  The current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    *  The instance of the entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(
@@ @@
    *
    * @param string $entity_type
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing a list of bundle names.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get(string $entity_type): ResourceResponse {
     if ($entity_type) {
-      /** @var \Drupal\Core\Entity\EntityTypeBundleInfo  $bundleInfo */
+      /** @var EntityTypeBundleInfo $bundleInfo */
       $bundleTypeInfo = \Drupal::service('entity_type.bundle.info');
       $bundleInfo = $bundleTypeInfo->getBundleInfo($entity_type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_rest_extra/src/Plugin/rest/resource/EntityBundleViewModesResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_rest_extra\Plugin\rest\resource;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    *  The current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    *  The instance of the entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(
@@ @@
    * @param string $entity_type
    * @param string $bundle
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response containing a list of bundle view modes.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function get(string $entity_type, string $bundle): ResourceResponse {
     if ($entity_type && $bundle) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_rest_extra/src/Plugin/rest/resource/EntityBundleFieldsResource.php:27

    ---------- begin diff ----------
@@ @@
   /**
    *  The current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(
@@ @@
    * @param string $entity_type
    * @param string $bundle
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function get(string $entity_type, string $bundle): ResourceResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

