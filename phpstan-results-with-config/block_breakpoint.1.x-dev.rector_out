modules/contrib/block_breakpoint/block_breakpoint.module
modules/contrib/block_breakpoint/src/BlockBreakpointManager.php
modules/contrib/block_breakpoint/src/EventSubscriber/BlockComponentRenderArray.php
modules/contrib/block_breakpoint/tests/src/FunctionalJavascript/BlockBreakpointTest.php

4 files with changes
====================

1) modules/contrib/block_breakpoint/tests/src/FunctionalJavascript/BlockBreakpointTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_breakpoint\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\field_group\Functional\FieldGroupTestTrait;

@@ @@
   /**
    * A user with permissions to configure blocks.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $blockEditUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Log in as a content author.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/block_breakpoint/src/EventSubscriber/BlockComponentRenderArray.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Adds block_breakpoint render options to section component.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The section component render event.
    */
   public function onBuildRender(SectionComponentBuildRenderArrayEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/block_breakpoint/src/BlockBreakpointManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_breakpoint;

+use Drupal\Core\Form\FormInterface;
+use Drupal\layout_builder\SectionComponent;
 use Drupal\block\BlockInterface;
 use Drupal\breakpoint\BreakpointManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The breakpoint manager.
    *
-   * @var \Drupal\breakpoint\BreakpointManagerInterface
+   * @var BreakpointManagerInterface
    */
   protected $breakpointManager;

@@ @@
   /**
    * Constructs a new BlockBreakpointManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\breakpoint\BreakpointManagerInterface $breakpoint_manager
+   * @param BreakpointManagerInterface $breakpoint_manager
    *   The breakpoint manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, BreakpointManagerInterface $breakpoint_manager) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $form_id
    *   The form id.
    */
   public function blockFormAlter(&$form, FormStateInterface $form_state, $form_id) {
-    /** @var \Drupal\Core\Form\FormInterface $formObject */
+    /** @var FormInterface $formObject */
     $formObject = $form_state->getFormObject();

     // Support Layout Builder components.
-    /** @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $object */
+    /** @var ThirdPartySettingsInterface $object */
     if ($formObject instanceof ConfigureBlockFormBase) {
       $object = $form_state->getFormObject()->getCurrentComponent();
       array_unshift($form['#submit'], [$this, 'componentSubmit']);
     }
     else {
-      /** @var \Drupal\Core\Entity\EntityInterface $object */
+      /** @var EntityInterface $object */
       $object = $form_state->getFormObject()->getEntity();

       // Add an entity builder to prepare and set/unset the third party settings.
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function componentSubmit(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\layout_builder\SectionComponent $section_component */
+    /** @var SectionComponent $section_component */
     $section_component = $form_state->getFormObject()->getCurrentComponent();
     $this->storeThirdPartySettings($section_component, $form_state);
   }
@@ @@
    *
    * @param string $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The block.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state
    */
   public function entityBuilder($entity_type, EntityInterface $entity, array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Store the third party settings for block_component.
    *
-   * @param \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $object
+   * @param ThirdPartySettingsInterface $object
    *   The object to store the third party settings in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function storeThirdPartySettings(ThirdPartySettingsInterface $object, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/block_breakpoint/block_breakpoint.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_breakpoint\BlockBreakpointManager;
 /**
  * @file
  * Implements third party settings form for blocks and a preprocessor for
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function block_breakpoint_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\block_breakpoint\BlockBreakpointManager $block_breakpoint_manager */
+  /** @var BlockBreakpointManager $block_breakpoint_manager */
   $block_breakpoint_manager = \Drupal::service('block_breakpoint.manager');
   $block_breakpoint_manager->blockFormAlter($form, $form_state, $form_id);
 }
@@ @@
  * Implements hook_preprocess_HOOK().
  */
 function block_breakpoint_preprocess_block(&$variables) {
-  /** @var \Drupal\block_breakpoint\BlockBreakpointManager $block_breakpoint_manager */
+  /** @var BlockBreakpointManager $block_breakpoint_manager */
   $block_breakpoint_manager = \Drupal::service('block_breakpoint.manager');
   $block_breakpoint_manager->preprocessBlock($variables);
 }
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function block_breakpoint_form_layout_builder_configure_block_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\block_breakpoint\BlockBreakpointManager $block_breakpoint_manager */
+  /** @var BlockBreakpointManager $block_breakpoint_manager */
   $block_breakpoint_manager = \Drupal::service('block_breakpoint.manager');
   $block_breakpoint_manager->blockFormAlter($form, $form_state, $form_id);
 }
@@ @@
  * Helper function for adding attributes via layout builder.
  */
 function _block_breakpoint_layout_builder_add(&$variables, $region_name) {
-  /** @var \Drupal\block_breakpoint\BlockBreakpointManager $block_breakpoint_manager */
+  /** @var BlockBreakpointManager $block_breakpoint_manager */
   $block_breakpoint_manager = \Drupal::service('block_breakpoint.manager');

   foreach ($variables['content'][$region_name] as &$section_component) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

