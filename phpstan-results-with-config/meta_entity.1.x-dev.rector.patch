diff --git a/meta_entity.module b/meta_entity.module
index 0c8b147..9aca757 100644
--- a/meta_entity.module
+++ b/meta_entity.module
@@ -6,6 +6,8 @@
  */
 
 declare(strict_types = 1);
+use Drupal\meta_entity\MetaEntityRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -26,7 +28,7 @@ function meta_entity_entity_delete(EntityInterface $entity): void {
 
   $entity_type_manager = \Drupal::entityTypeManager();
   foreach (\Drupal::getContainer()->getParameter('meta_entity.repositories') as $meta_entity_type_id => $service_id) {
-    /** @var \Drupal\meta_entity\MetaEntityRepositoryInterface $repository */
+    /** @var MetaEntityRepositoryInterface $repository */
     $repository = \Drupal::service($service_id);
     if ($meta_entities = $repository->getMetaEntitiesForEntity($entity)) {
       $entity_type_manager->getStorage($meta_entity_type_id)->delete($meta_entities);
@@ -52,7 +54,7 @@ function meta_entity_entity_presave(EntityInterface $meta_entity): void {
     return;
   }
 
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $target_entity */
+  /** @var ContentEntityInterface $target_entity */
   if ($target_entity = $meta_entity->get('target')->entity) {
     $target_entity_singular_label = $target_entity->getEntityType()->getSingularLabel();
     $bundle_label = $meta_entity->get('type')->entity->label();
@@ -72,16 +74,16 @@ function meta_entity_entity_presave(EntityInterface $meta_entity): void {
  * field is configurable in the meta entity type level.
  */
 function meta_entity_entity_bundle_field_info(EntityTypeInterface $entity_type, string $bundle, array $base_field_definitions): array {
-  /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+  /** @var EntityTypeBundleInfoInterface $bundle_info */
   $bundle_info = \Drupal::service('entity_type.bundle.info');
   $entity_type_id = $entity_type->id();
 
   $fields = [];
   foreach (\Drupal::getContainer()->getParameter('meta_entity.repositories') as $meta_entity_type_id => $service_id) {
-    /** @var \Drupal\meta_entity\MetaEntityRepositoryInterface $repository */
+    /** @var MetaEntityRepositoryInterface $repository */
     $repository = \Drupal::service($service_id);
     foreach ($repository->getReverseReferenceFieldNames($entity_type_id, $bundle) as $meta_entity_bundle => $field_name) {
-      /** @var \Drupal\Core\Field\BaseFieldDefinition $definition */
+      /** @var BaseFieldDefinition $definition */
       $bundle_label = $bundle_info->getBundleInfo($meta_entity_type_id)[$meta_entity_bundle]['label'];
       $fields[$field_name] = BaseFieldDefinition::create('entity_reference')
         ->setName($field_name)
@@ -110,7 +112,7 @@ function meta_entity_entity_insert(EntityInterface $entity) {
 
   $entity_type_manager = \Drupal::entityTypeManager();
   foreach (\Drupal::getContainer()->getParameter('meta_entity.repositories') as $meta_entity_type_id => $service_id) {
-    /** @var \Drupal\meta_entity\MetaEntityRepositoryInterface $repository */
+    /** @var MetaEntityRepositoryInterface $repository */
     $repository = \Drupal::service($service_id);
     $meta_entity_bundles = $repository->getTypesWithAutoCreation($entity);
     if ($meta_entity_bundles) {
diff --git a/src/Entity/MetaEntity.php b/src/Entity/MetaEntity.php
index 0ae4fa4..6610a2b 100644
--- a/src/Entity/MetaEntity.php
+++ b/src/Entity/MetaEntity.php
@@ -151,10 +151,10 @@ class MetaEntity extends ContentEntityBase implements MetaEntityInterface {
    *   The meta entity type ID to be loaded or created.
    * @param string $meta_entity_bundle
    *   The meta entity type bundle to be loaded or created.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   The target content entity.
    *
-   * @return \Drupal\meta_entity\Entity\MetaEntityInterface
+   * @return MetaEntityInterface
    *   A meta entity.
    */
   protected static function loadOrCreateHelper(string $meta_entity_type_id, string $meta_entity_bundle, ContentEntityInterface $target_entity): MetaEntityInterface {
@@ -177,7 +177,7 @@ class MetaEntity extends ContentEntityBase implements MetaEntityInterface {
       ]);
     }
 
-    /** @var \Drupal\meta_entity\Entity\MetaEntityInterface $meta_entity */
+    /** @var MetaEntityInterface $meta_entity */
     return $meta_entity;
   }
 
diff --git a/src/Entity/MetaEntityInterface.php b/src/Entity/MetaEntityInterface.php
index 9b97295..a711dd1 100644
--- a/src/Entity/MetaEntityInterface.php
+++ b/src/Entity/MetaEntityInterface.php
@@ -32,7 +32,7 @@ interface MetaEntityInterface extends ContentEntityInterface {
   /**
    * Return the entity this meta entity refers to.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity this meta entity refers to.
    */
   public function getTargetEntity(): ?ContentEntityInterface;
@@ -42,7 +42,7 @@ interface MetaEntityInterface extends ContentEntityInterface {
    *
    * @param string $meta_entity_bundle
    *   The meta entity type bundle to be loaded or created.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   The target content entity.
    *
    * @return \Drupal\meta_entity\Entity\MetaEntityInterface
diff --git a/src/Form/MetaEntityForm.php b/src/Form/MetaEntityForm.php
index 0418275..2cce7d8 100644
--- a/src/Form/MetaEntityForm.php
+++ b/src/Form/MetaEntityForm.php
@@ -22,7 +22,7 @@ class MetaEntityForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->getEntity()->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result === SAVED_NEW) {
       $this->logger('meta_entity')->notice('Created meta new entity %label', $logger_arguments);
diff --git a/src/Form/MetaEntityTypeForm.php b/src/Form/MetaEntityTypeForm.php
index 009c62a..a6221f4 100644
--- a/src/Form/MetaEntityTypeForm.php
+++ b/src/Form/MetaEntityTypeForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\meta_entity\Form;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -21,23 +22,23 @@ class MetaEntityTypeForm extends BundleEntityFormBase {
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs a new form instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $bundle_info
+   * @param EntityTypeBundleInfo $bundle_info
    *   The bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeBundleInfo $bundle_info, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/MetaEntityListBuilder.php b/src/MetaEntityListBuilder.php
index 45f2920..422fd73 100644
--- a/src/MetaEntityListBuilder.php
+++ b/src/MetaEntityListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\meta_entity;
 
+use Drupal\meta_entity\Entity\MetaEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -18,27 +19,27 @@ class MetaEntityListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new EntityMetaListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ -88,7 +89,7 @@ class MetaEntityListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\meta_entity\Entity\MetaEntityInterface $entity */
+    /** @var MetaEntityInterface $entity */
     $row['id'] = $entity->toLink();
     $row['type'] = $entity->get('type')->entity->label();
     return $row + parent::buildRow($entity);
diff --git a/src/MetaEntityPermissionProvider.php b/src/MetaEntityPermissionProvider.php
index 8423c7f..91f58ef 100644
--- a/src/MetaEntityPermissionProvider.php
+++ b/src/MetaEntityPermissionProvider.php
@@ -19,7 +19,7 @@ class MetaEntityPermissionProvider implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -33,7 +33,7 @@ class MetaEntityPermissionProvider implements ContainerInjectionInterface {
   /**
    * Constructs a new permissions provider instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    * @param string $entity_type_id
    *   The meta entity type ID.
diff --git a/src/MetaEntityRepository.php b/src/MetaEntityRepository.php
index a953020..4d8f099 100644
--- a/src/MetaEntityRepository.php
+++ b/src/MetaEntityRepository.php
@@ -18,14 +18,14 @@ class MetaEntityRepository implements MetaEntityRepositoryInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The cache chained backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
diff --git a/src/MetaEntityRepositoryInterface.php b/src/MetaEntityRepositoryInterface.php
index 17ad25a..ccc1ef0 100644
--- a/src/MetaEntityRepositoryInterface.php
+++ b/src/MetaEntityRepositoryInterface.php
@@ -17,7 +17,7 @@ interface MetaEntityRepositoryInterface {
   /**
    * Sets the entity type manager service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    *
    * @return $this
@@ -37,7 +37,7 @@ interface MetaEntityRepositoryInterface {
   /**
    * Sets the cache chained backend.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache chained backend.
    *
    * @return $this
@@ -47,12 +47,12 @@ interface MetaEntityRepositoryInterface {
   /**
    * Returns a list of meta entities of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   The entity to checked.
    * @param string $meta_entity_bundle
    *   The meta entity bundle ID.
    *
-   * @return \Drupal\meta_entity\Entity\MetaEntityInterface|null
+   * @return MetaEntityInterface|null
    *   The meta entity or NULL if it doesn't exist.
    */
   public function getMetaEntityForEntity(ContentEntityInterface $target_entity, string $meta_entity_bundle): ?MetaEntityInterface;
@@ -60,10 +60,10 @@ interface MetaEntityRepositoryInterface {
   /**
    * Returns a list of existing meta entities of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   The entity to checked.
    *
-   * @return \Drupal\meta_entity\Entity\MetaEntityInterface[]
+   * @return MetaEntityInterface[]
    *   Associative array keyed by meta entity ID with meta entity as value.
    */
   public function getMetaEntitiesForEntity(ContentEntityInterface $target_entity): array;
@@ -98,7 +98,7 @@ interface MetaEntityRepositoryInterface {
   /**
    * Returns a list of meta entity types that are configured with auto-creation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   The entity for which to return the list.
    *
    * @return string[]
diff --git a/src/MetaEntityReverseReferenceItemList.php b/src/MetaEntityReverseReferenceItemList.php
index 5642ab7..27ca66f 100644
--- a/src/MetaEntityReverseReferenceItemList.php
+++ b/src/MetaEntityReverseReferenceItemList.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\meta_entity;
 
+use Drupal\meta_entity\Entity\MetaEntityInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\TypedData\ComputedItemListTrait;
 
@@ -22,7 +23,7 @@ class MetaEntityReverseReferenceItemList extends EntityReferenceFieldItemList {
 
     foreach (\Drupal::getContainer()->getParameter('meta_entity.repositories') as $meta_entity_type_id => $service_id) {
       if ($this->getSetting('target_type') === $meta_entity_type_id) {
-        /** @var \Drupal\meta_entity\MetaEntityRepositoryInterface $repository */
+        /** @var MetaEntityRepositoryInterface $repository */
         $repository = \Drupal::service($service_id);
         if ($meta_entity = $repository->getMetaEntityForEntity($entity, $this->getSetting('meta_entity_type_id'))) {
           $this->list[0] = $this->createItem(0, $meta_entity);
@@ -38,7 +39,7 @@ class MetaEntityReverseReferenceItemList extends EntityReferenceFieldItemList {
   public function preSave() {
     $target_entity = $this->getEntity();
     foreach ($this->list as $item) {
-      /** @var \Drupal\meta_entity\Entity\MetaEntityInterface $meta_entity */
+      /** @var MetaEntityInterface $meta_entity */
       if (($meta_entity = $item->entity) && $meta_entity->isNew()) {
         if (!empty($target_entity->id())) {
           // The target entity is a new entity with an ID already set on
@@ -58,7 +59,7 @@ class MetaEntityReverseReferenceItemList extends EntityReferenceFieldItemList {
    */
   public function postSave($update): bool {
     foreach ($this->list as $item) {
-      /** @var \Drupal\meta_entity\Entity\MetaEntityInterface $meta_entity */
+      /** @var MetaEntityInterface $meta_entity */
       if (($meta_entity = $item->entity) && $meta_entity->get('target')->isEmpty()) {
         // Now that the parent ID exists, let's set the meta entity target.
         // @todo Sadly, we have to save once again the meta entity as it seems
diff --git a/src/Plugin/Validation/Constraint/MappedTargetEntityValidator.php b/src/Plugin/Validation/Constraint/MappedTargetEntityValidator.php
index 1727880..a7f62bd 100644
--- a/src/Plugin/Validation/Constraint/MappedTargetEntityValidator.php
+++ b/src/Plugin/Validation/Constraint/MappedTargetEntityValidator.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\meta_entity\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
@@ -24,7 +25,7 @@ class MappedTargetEntityValidator extends ConstraintValidator implements Contain
   /**
    * Constructs a new validator instance.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    */
   public function __construct(ContainerInterface $container) {
@@ -42,13 +43,13 @@ class MappedTargetEntityValidator extends ConstraintValidator implements Contain
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint): void {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $target_entity */
+    /** @var ContentEntityInterface $target_entity */
     $target_entity = $items->entity;
     if (empty($target_entity)) {
       return;
     }
 
-    /** @var \Drupal\meta_entity\Plugin\Validation\Constraint\MappedTargetEntity $constraint */
+    /** @var MappedTargetEntity $constraint */
     $repository = $this->container->get($this->container->getParameter('meta_entity.repositories')[$constraint->metaEntityTypeId]);
     $entity_types = $repository->getMetaEntityTypesForBundle($target_entity->getEntityTypeId(), $target_entity->bundle());
     if (!in_array($items->getEntity()->bundle(), $entity_types)) {
diff --git a/src/Plugin/Validation/Constraint/UniquePerMetaTypeAndTargetValidator.php b/src/Plugin/Validation/Constraint/UniquePerMetaTypeAndTargetValidator.php
index 159f8e5..dc7fff5 100644
--- a/src/Plugin/Validation/Constraint/UniquePerMetaTypeAndTargetValidator.php
+++ b/src/Plugin/Validation/Constraint/UniquePerMetaTypeAndTargetValidator.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\meta_entity\Plugin\Validation\Constraint;
 
+use Drupal\dynamic_entity_reference\Plugin\Field\FieldType\DynamicEntityReferenceFieldItemList;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\meta_entity\Entity\MetaEntityInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -17,14 +20,14 @@ class UniquePerMetaTypeAndTargetValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint): void {
-    /** @var \Drupal\dynamic_entity_reference\Plugin\Field\FieldType\DynamicEntityReferenceFieldItemList $items */
+    /** @var DynamicEntityReferenceFieldItemList $items */
     $meta_entity = $items->getEntity();
-    /** @var \Drupal\Core\Entity\EntityInterface $meta_entity */
+    /** @var EntityInterface $meta_entity */
     if ($items->getFieldDefinition()->getName() !== 'target' || !$meta_entity instanceof MetaEntityInterface) {
       throw new \InvalidArgumentException("This constraint should be used only on field 'target' of an 'meta_entity' entity.");
     }
 
-    /** @var \Drupal\meta_entity\Plugin\Validation\Constraint\UniquePerMetaTypeAndTarget  $constraint */
+    /** @var UniquePerMetaTypeAndTarget $constraint */
     $query = \Drupal::entityQuery($constraint->metaEntityTypeId)->accessCheck(FALSE);
     $entity_id = $meta_entity->id();
 
@@ -43,7 +46,7 @@ class UniquePerMetaTypeAndTargetValidator extends ConstraintValidator {
       ->execute();
 
     if ($has_meta_entity) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $target_entity */
+      /** @var ContentEntityInterface $target_entity */
       $target_entity = $items->entity;
       $this->context->buildViolation($constraint->message, [
         '%entity' => $target_entity->label(),
diff --git a/tests/src/Functional/MetaEntityCacheTagsTest.php b/tests/src/Functional/MetaEntityCacheTagsTest.php
index 4d8249d..0745ce1 100644
--- a/tests/src/Functional/MetaEntityCacheTagsTest.php
+++ b/tests/src/Functional/MetaEntityCacheTagsTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\meta_entity\Functional;
 
+use Drupal\meta_entity\Entity\MetaEntityInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
@@ -22,14 +24,14 @@ class MetaEntityCacheTagsTest extends EntityWithUriCacheTagsTestBase {
   /**
    * The meta entity.
    *
-   * @var \Drupal\meta_entity\Entity\MetaEntityInterface
+   * @var MetaEntityInterface
    */
   protected $entity;
 
   /**
    * An arbitrary entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $arbitraryEntity;
 
@@ -117,7 +119,7 @@ class MetaEntityCacheTagsTest extends EntityWithUriCacheTagsTestBase {
    */
   protected function getAdditionalCacheTagsForEntity(EntityInterface $entity) {
     $tags = parent::getAdditionalCacheTagsForEntity($entity);
-    /** @var \Drupal\meta_entity\Entity\MetaEntityInterface $entity */
+    /** @var MetaEntityInterface $entity */
     $tags = Cache::mergeTags($tags, $entity->getTargetEntity()->getCacheTags());
     // Add also an arbitrary cache tag.
     return Cache::mergeTags($tags, $this->arbitraryEntity->getCacheTags());
diff --git a/tests/src/Kernel/MetaEntityAccessTest.php b/tests/src/Kernel/MetaEntityAccessTest.php
index a060464..0707193 100644
--- a/tests/src/Kernel/MetaEntityAccessTest.php
+++ b/tests/src/Kernel/MetaEntityAccessTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\meta_entity\Kernel;
 
+use Drupal\user\RoleInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\meta_entity\Entity\MetaEntity;
@@ -58,7 +59,7 @@ class MetaEntityAccessTest extends KernelTestBase {
     ]);
     $meta_entity->save();
 
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::create([
       'id' => $this->randomMachineName(),
       'label' => $this->randomString(),
