modules/contrib/s3fs_file_proxy_to_s3/src/EventSubscriber/S3fsFileProxyToS3Subscriber.php
modules/contrib/s3fs_file_proxy_to_s3/src/PathProcessor/S3fsFileProxyToS3PathProcessorImageStyles.php
modules/contrib/s3fs_file_proxy_to_s3/src/Routing/RouteSubscriber.php
modules/contrib/s3fs_file_proxy_to_s3/src/S3fsFileProxyToS3FetchManager.php
modules/contrib/s3fs_file_proxy_to_s3/src/S3fsFileProxyToS3ServiceProvider.php
modules/contrib/s3fs_file_proxy_to_s3/src/StreamWrapper/PublicS3fsFileProxyToS3Stream.php

2 files with changes
====================

1) modules/contrib/s3fs_file_proxy_to_s3/src/Routing/RouteSubscriber.php:12

    ---------- begin diff ----------
@@ @@
 class RouteSubscriber extends RouteSubscriberBase {

   /**
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    */
   protected function alterRoutes(RouteCollection $collection) {
     if ($route = $collection->get('s3fs.image_styles')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/s3fs_file_proxy_to_s3/src/EventSubscriber/S3fsFileProxyToS3Subscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\s3fs_file_proxy_to_s3\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Utility\Unicode;
 use Drupal\stage_file_proxy\EventSubscriber\ProxySubscriber;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * S3fs Stage file proxy to S3 subscriber for controller requests.
@@ @@
   /**
    * Fetch the file according the its origin.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
-  public function checkFileOrigin(GetResponseEvent $event) {
+  public function checkFileOrigin(RequestEvent $event) {
     $file_dir = $this->manager->filePublicPath();
     $uri = $event->getRequest()->getPathInfo();

@@ @@
     $uri = "public://{$relative_path}";

     if (file_exists($uri)) {
-      $url = file_create_url($uri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       header("Location: $url");
       exit;
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

