modules/contrib/editablefields/editablefields.module
modules/contrib/editablefields/src/Form/EditableFieldsForm.php
modules/contrib/editablefields/src/Plugin/Field/FieldFormatter/EditableFieldsFieldFormatter.php
modules/contrib/editablefields/src/services/EditableFieldsHelper.php
modules/contrib/editablefields/src/services/EditableFieldsHelperInterface.php

5 files with changes
====================

1) modules/contrib/editablefields/src/services/EditableFieldsHelperInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editablefields\services;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
   /**
    * Checks if the user can use "editablefields" formatter.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @return bool
@@ @@
   /**
    * Prepares a render array of the editable field form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    * @param string $field_name
    *   Field name.
@@ @@
   /**
    * Loads entity form display.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    * @param $form_mode
    *   Form mode.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface|NULL
+   * @return EntityFormDisplayInterface|NULL
    */
   public function getFormDisplay(EntityInterface $entity, $form_mode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/editablefields/src/services/EditableFieldsHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editablefields\services;

+use Drupal\editablefields\Form\EditableFieldsForm;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
   /**
    * Drupal\Core\Field\FieldTypePluginManagerInterface definition.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $pluginManagerFieldFieldType;

@@ @@
   /**
    * Drupal\Core\Form\FormBuilderInterface definition.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Drupal\Core\DependencyInjection\ClassResolverInterface definition.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Drupal\Core\Entity\EntityDisplayRepositoryInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    * {@inheritDoc}
    */
   public function getForm(EntityInterface $entity, string $field_name, string $form_mode) {
-    /** @var \Drupal\editablefields\Form\EditableFieldsForm $form_object */
+    /** @var EditableFieldsForm $form_object */
     $form_object = $this->classResolver->getInstanceFromDefinition(
       self::FORM_CLASS
     );
@@ @@
     $options[self::DEFAULT_FORM_MODE] = self::DEFAULT_FORM_MODE;
     $form_modes = $this->entityDisplayRepository->getAllFormModes();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface[] $modes */
+    /** @var EntityFormDisplayInterface[] $modes */
     foreach ($form_modes as $entity_type => $modes) {
       foreach ($modes as $mode) {
         $label = explode('.', $mode['id']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/editablefields/src/Plugin/Field/FieldFormatter/EditableFieldsFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editablefields\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ @@
   /**
    * Drupal\editablefields\services\EditableFieldsHelperInterface definition.
    *
-   * @var \Drupal\editablefields\services\EditableFieldsHelperInterface
+   * @var EditableFieldsHelperInterface
    */
   protected $editablefieldsHelper;

@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\editablefields\services\EditableFieldsHelperInterface $editablefields_helper */
+    /** @var EditableFieldsHelperInterface $editablefields_helper */
     $editablefields_helper = $container->get('editablefields.helper');
     return new static(
       $plugin_id,
@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $items->getEntity();

     if (!$this->editablefieldsHelper->checkAccess($entity)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/editablefields/src/Form/EditableFieldsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editablefields\Form;

+use Drupal\editablefields\services\EditableFieldsHelperInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\BaseFormIdInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * Entity updated in the form.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Drupal\editablefields\services\EditableFieldsHelperInterface definition.
    *
-   * @var \Drupal\editablefields\services\EditableFieldsHelperInterface
+   * @var EditableFieldsHelperInterface
    */
   protected $editablefieldsHelper;

@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ @@
   /**
    * Loads a form display mode.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface|NULL
+   * @return EntityFormDisplayInterface|NULL
    *   Display mode.
    */
   public function getFormDisplay() {
@@ @@
   /**
    * Set defaults to be used for unique form ID.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Edited entity.
    * @param $field_name
    *   Field name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/editablefields/editablefields.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\editablefields\services\EditableFieldsHelper;
 /**
  * @file
  * Contains editablefields.module.
  */
-
 /**
  * Implements hook_field_formatter_info_alter().
  */
 function editablefields_field_formatter_info_alter(array &$info) {
-  /** @var \Drupal\editablefields\services\EditableFieldsHelper $service */
+  /** @var EditableFieldsHelper $service */
   $service = \Drupal::service('editablefields.helper');
   $service->formatterInfoAlter($info);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

