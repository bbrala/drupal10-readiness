modules/contrib/moderation_state_columns/moderation_state_columns.module
modules/contrib/moderation_state_columns/src/Plugin/views/style/ModerationStateColumns.php
modules/contrib/moderation_state_columns/tests/src/Functional/LoadTest.php

3 files with changes
====================

1) modules/contrib/moderation_state_columns/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_state_columns\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/moderation_state_columns/src/Plugin/views/style/ModerationStateColumns.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the workflow states as options.
    *
-   * @param \Drupal\workflows\Entity\Workflow $workflow
+   * @param Workflow $workflow
    *   The workflow entity.
    *
    * @return array
@@ @@
     parent::buildOptionsForm($form, $form_state);

     $workflows = ['' => $this->t('- Select -')];
-    /** @var \Drupal\workflows\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     foreach (Workflow::loadMultiple() as $workflow) {
       $workflows[$workflow->id()] = $workflow->label();
     }
@@ @@
    * Ajax callback that triggers when the workflow changes.
    *
    * @param array $form
-   * @param \Drupal\core\form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/moderation_state_columns/moderation_state_columns.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Contains moderation_state_columns.module.
@@ @@
  */
 function template_preprocess_views_view_moderation_state_columns(&$variables) {
   $entities = [];
-  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderationInformation */
+  /** @var ModerationInformationInterface $moderationInformation */
   $moderationInformation = \Drupal::service('content_moderation.moderation_information');
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $variables['view'];
-  /** @var \Drupal\workflows\Entity\Workflow $workflow */
+  /** @var Workflow $workflow */
   $workflow = Workflow::load($view->style_plugin->options['workflow']);
   $states = array_intersect_key(ModerationStateColumns::getWorkflowStatesOptions($workflow), $view->style_plugin->options['states']);

@@ @@
     }
     $variables['#cache']['tags'] = array_merge($variables['#cache']['tags'], $entity->getCacheTags());

-    $entities[$state][] = render($row);
+    $entities[$state][] = \Drupal::service('renderer')->render($row);
   }
   $variables['json_encoded_content'] = json_encode([
     'states' => $states,
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

