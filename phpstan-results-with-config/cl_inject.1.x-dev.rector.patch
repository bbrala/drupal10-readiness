diff --git a/src/Service/ComponentRenderer.php b/src/Service/ComponentRenderer.php
index 932f96f..21e6ec7 100644
--- a/src/Service/ComponentRenderer.php
+++ b/src/Service/ComponentRenderer.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\cl_inject\Service;
 
+use Drupal\cl_components\Exception\ComponentNotFoundException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\cl_components\Component\Component;
 use Drupal\cl_components\Component\ComponentDiscovery;
 use Drupal\cl_components\Exception\InvalidComponentException;
@@ -22,21 +24,21 @@ class ComponentRenderer {
   /**
    * The twig environment.
    *
-   * @var \Twig\Environment
+   * @var Environment
    */
   private Environment $environment;
 
   /**
    * The component discovery.
    *
-   * @var \Drupal\cl_components\Component\ComponentDiscovery
+   * @var ComponentDiscovery
    */
   private ComponentDiscovery $componentDiscovery;
 
   /**
    * The Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private RendererInterface $drupalRenderer;
 
@@ -50,9 +52,9 @@ class ComponentRenderer {
   /**
    * Creates a new ComponentRenderer.
    *
-   * @param \Drupal\Core\Render\RendererInterface $drupal_renderer
+   * @param RendererInterface $drupal_renderer
    *   The drupal renderer.
-   * @param \Drupal\cl_components\Component\ComponentDiscovery $component_discovery
+   * @param ComponentDiscovery $component_discovery
    *   The discovery.
    */
   public function __construct(RendererInterface $drupal_renderer, ComponentDiscovery $component_discovery) {
@@ -73,8 +75,8 @@ class ComponentRenderer {
    * @return string
    *   The rendered markup.
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
-   * @throws \Drupal\cl_components\Exception\TemplateNotFoundException
+   * @throws ComponentNotFoundException
+   * @throws TemplateNotFoundException
    */
   public function renderTemplate(string $name, array $context = [], string $variant = ''): string {
     $component = $this->componentDiscovery->find($name);
@@ -109,10 +111,10 @@ class ComponentRenderer {
    *
    * @param array $props
    *   The props from the render array or template.
-   * @param \Drupal\cl_components\Component\Component $component
+   * @param Component $component
    *   The component object.
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    */
   private function validateProps(array $props, Component $component): void {
     $validator = new Validator();
@@ -152,11 +154,11 @@ class ComponentRenderer {
    * @return array
    *   The rendered markup.
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
-   * @throws \Drupal\cl_components\Exception\TemplateNotFoundException
-   * @throws \Twig\Error\LoaderError
-   * @throws \Twig\Error\SyntaxError
+   * @throws ComponentNotFoundException
+   * @throws InvalidComponentException
+   * @throws TemplateNotFoundException
+   * @throws LoaderError
+   * @throws SyntaxError
    */
   public function createRenderArray(string $name, array $props = [], string $variant = '', string $children = '', array $context = []): array {
     $component = $this->componentDiscovery->find($name);
@@ -201,7 +203,7 @@ class ComponentRenderer {
    * @param array $context
    *   Additional context for the template.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string|mixed
+   * @return MarkupInterface|string|mixed
    *   The rendered markup.
    *
    * @throws \Exception
@@ -234,7 +236,7 @@ class ComponentRenderer {
   /**
    * Sets the Twig environment.
    *
-   * @param \Twig\Environment $environment
+   * @param Environment $environment
    *   The environment.
    */
   public function setTwigEnvironment(Environment $environment): void {
diff --git a/src/Twig/TwigExtension.php b/src/Twig/TwigExtension.php
index ab2f480..ad82350 100644
--- a/src/Twig/TwigExtension.php
+++ b/src/Twig/TwigExtension.php
@@ -15,14 +15,14 @@ class TwigExtension extends AbstractExtension {
   /**
    * The renderer.
    *
-   * @var \Drupal\cl_inject\Service\ComponentRenderer
+   * @var ComponentRenderer
    */
   private ComponentRenderer $renderer;
 
   /**
    * TwigComponentExtension constructor.
    *
-   * @param \Drupal\cl_inject\Service\ComponentRenderer $component_renderer
+   * @param ComponentRenderer $component_renderer
    *   The component renderer.
    */
   public function __construct(ComponentRenderer $component_renderer) {
@@ -56,7 +56,7 @@ class TwigExtension extends AbstractExtension {
   /**
    * Creates a Twig compiler.
    *
-   * @return \Twig\Compiler
+   * @return Compiler
    *   The compiler.
    */
   public function createCompiler(): Compiler {
diff --git a/src/Twig/tag/ComponentNode.php b/src/Twig/tag/ComponentNode.php
index e599130..cc2b47b 100644
--- a/src/Twig/tag/ComponentNode.php
+++ b/src/Twig/tag/ComponentNode.php
@@ -17,11 +17,11 @@ class ComponentNode extends Node implements NodeOutputInterface {
   /**
    * ComponentNode constructor.
    *
-   * @param \Twig\Node\Expression\AbstractExpression $expr
+   * @param AbstractExpression $expr
    *   The expression.
-   * @param \Twig\Node\Expression\ConstantExpression $variant
+   * @param ConstantExpression $variant
    *   The variant.
-   * @param \Twig\Node\Expression\AbstractExpression|null $variables
+   * @param AbstractExpression|null $variables
    *   The variables.
    * @param int $lineno
    *   The line number.
@@ -54,7 +54,7 @@ class ComponentNode extends Node implements NodeOutputInterface {
   /**
    * Compiles.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler.
    *
    * @throws \Drupal\cl_inject\Exception\ComponentSyntaxException
diff --git a/src/Twig/tag/ComponentTokenParser.php b/src/Twig/tag/ComponentTokenParser.php
index 1d37757..933d6fa 100644
--- a/src/Twig/tag/ComponentTokenParser.php
+++ b/src/Twig/tag/ComponentTokenParser.php
@@ -40,13 +40,13 @@ class ComponentTokenParser extends AbstractTokenParser {
   /**
    * Parses the Component token.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The token.
    *
    * @return ComponentNode
    *   The node.
    *
-   * @throws \Twig\Error\SyntaxError
+   * @throws SyntaxError
    */
   public function parse(Token $token): ComponentNode {
     $lineno = $token->getLine();
@@ -106,13 +106,13 @@ class ComponentTokenParser extends AbstractTokenParser {
   /**
    * Parse the endinject name.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The token.
    *
-   * @return \Twig\Node\Expression\ConstantExpression
+   * @return ConstantExpression
    *   The name of the closing tag.
    *
-   * @throws \Twig\Error\SyntaxError
+   * @throws SyntaxError
    */
   protected function parseEndComponentName(Token $token): ConstantExpression {
     $stream = $this->parser->getStream();
@@ -135,7 +135,7 @@ class ComponentTokenParser extends AbstractTokenParser {
    * @return array
    *   The parsed arguments.
    *
-   * @throws \Twig\Error\SyntaxError
+   * @throws SyntaxError
    */
   protected function parseArguments(): array {
     $stream = $this->parser->getStream();
@@ -171,7 +171,7 @@ class ComponentTokenParser extends AbstractTokenParser {
    *
    * Must return true when the expected end tag is reached.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The token.
    *
    * @return bool
