modules/contrib/google_api_client/google_api_client.api.php
modules/contrib/google_api_client/google_api_client.install
modules/contrib/google_api_client/google_api_client.module
modules/contrib/google_api_client/src/Controller/Callback.php
modules/contrib/google_api_client/src/Entity/Controller/GoogleApiClientListBuilder.php
modules/contrib/google_api_client/src/Entity/Controller/GoogleApiServiceClientListBuilder.php
modules/contrib/google_api_client/src/Entity/GoogleApiClient.php
modules/contrib/google_api_client/src/Entity/GoogleApiServiceClient.php
modules/contrib/google_api_client/src/Form/GoogleApiClientDeleteForm.php
modules/contrib/google_api_client/src/Form/GoogleApiClientForm.php
modules/contrib/google_api_client/src/Form/GoogleApiClientRevokeForm.php
modules/contrib/google_api_client/src/Form/GoogleApiClientSettingsForm.php
modules/contrib/google_api_client/src/Form/GoogleApiServiceClientDeleteForm.php
modules/contrib/google_api_client/src/Form/GoogleApiServiceClientForm.php
modules/contrib/google_api_client/src/GoogleApiClientInterface.php
modules/contrib/google_api_client/src/GoogleApiServiceClientInterface.php
modules/contrib/google_api_client/src/Plugin/EntityReferenceSelection/GoogleApiClientSelection.php
modules/contrib/google_api_client/src/Plugin/migrate/source/Gauth.php
modules/contrib/google_api_client/src/Service/GoogleApiClientService.php
modules/contrib/google_api_client/src/Service/GoogleApiServiceClientService.php

10 files with changes
=====================

1) modules/contrib/google_api_client/src/Service/GoogleApiServiceClientService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_api_client\Service;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The GoogleApiClient Entity Object.
    *
-   * @var \Drupal\google_api_client\GoogleApiServiceClientInterface
+   * @var GoogleApiServiceClientInterface
    */
   public $googleApiServiceClient;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * Cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cacheBackend;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The system theme config object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Callback Controller constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   LoggerChannelFactoryInterface.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache Backend.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(LoggerChannelFactoryInterface $loggerFactory, CacheBackendInterface $cacheBackend, MessengerInterface $messenger, TranslationInterface $string_translation, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Function to set the GoogleApiClient account for the service.
    *
-   * @param \Drupal\google_api_client\GoogleApiServiceClientInterface $google_api_client
+   * @param GoogleApiServiceClientInterface $google_api_client
    *   Pass completely loaded GoogleApiClient object.
    * @param \Google_Client|null $googleClient
    *   Optionally parameter for developers who want to set initial
@@ @@
    * @return \Google_Client|bool
    *   Google_Client object with all params from the account or false.
    *
-   * @throws \Google_Exception|\Drupal\Core\Entity\EntityStorageException
+   * @throws \Google_Exception|EntityStorageException
    *    Google Exception if any api function fails and
    *    EntityStorage Exception if entity save fails.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/google_api_client/src/Service/GoogleApiClientService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_api_client\Service;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The GoogleApiClient Entity Object.
    *
-   * @var \Drupal\google_api_client\GoogleApiClientInterface
+   * @var GoogleApiClientInterface
    */
   public $googleApiClient;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * Cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $cacheBackend;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The system theme config object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Callback Controller constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   LoggerChannelFactoryInterface.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache Backend.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(LoggerChannelFactoryInterface $loggerFactory, CacheBackendInterface $cacheBackend, MessengerInterface $messenger, TranslationInterface $string_translation, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Function to set the GoogleApiClient account for the service.
    *
-   * @param \Drupal\google_api_client\GoogleApiClientInterface $google_api_client
+   * @param GoogleApiClientInterface $google_api_client
    *   Pass completely loaded GoogleApiClient object.
    * @param \Google_Client|null $googleClient
    *   Optionally parameter for developers who want to set initial
    *   google client object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setGoogleApiClient(GoogleApiClientInterface $google_api_client, \Google_Client $googleClient = NULL) {
     $this->googleApiClient = $google_api_client;
@@ @@
    * @return \Google_Client|bool
    *   Google_Client object with all params from the account or false.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function getClient(\Google_Client $client = NULL) {
     if (!google_api_client_load_library()) {
@@ @@
    * @return bool
    *   Was the token added or not?
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function setAccessToken() {
     // If there was something in cache.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/google_api_client/src/GoogleApiClientInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_api_client;

+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;
 use Drupal\user\UserInterface;
@@ @@
   /**
    * Function returns Owner Id of the account.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   Returns Owner object.
    */
   public function getOwner();
@@ @@
   /**
    * Function set whether the account is authenticated.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   Pass User object for the owner.
    */
   public function setOwner(UserInterface $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/google_api_client/src/Form/GoogleApiServiceClientForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs an ExampleForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/google_api_client/src/Form/GoogleApiClientSettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/google_api_client/src/Entity/GoogleApiClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_api_client\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
    * @return int
    *   Id for the GoogleApiClient being saved.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function save() {
     // Skip for new entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/google_api_client/src/Controller/Callback.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_api_client\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Google API Client.
    *
-   * @var \Drupal\google_api_client\Service\GoogleApiClientService
+   * @var GoogleApiClientService
    */
   private $googleApiClientService;

@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Callback constructor.
    *
-   * @param \Drupal\google_api_client\Service\GoogleApiClientService $googleApiClient
+   * @param GoogleApiClientService $googleApiClient
    *   Google API Client.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(GoogleApiClientService $googleApiClient, ModuleHandlerInterface $module_handler, PrivateTempStoreFactory $temp_store_factory, RequestStack $request_stack) {
@@ @@
   /**
    * Callback URL for Google API Auth.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request.
    *
    * @return array
@@ @@
   /**
    * Checks access for authenticate url.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function authenticateAccess(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/google_api_client/google_api_client.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Url;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Component\ClassFinder\ClassFinder;
 /**
  * @file
  * Google Api Client for drupal.
@@ @@
 /**
  * Implements hook_help().
  */
-function google_api_client_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function google_api_client_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.google_api_client':
-      $path = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'google_api_client');
+      $path = $GLOBALS['base_url'] . '/' . \Drupal::service('extension.list.module')->getPath('google_api_client');
       $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t("This module allows you to authenticate with google and use this authentication to carry other api requests. This module will help you to manage accounts, authenticate with google (i.e. get access token) and use this authentication to carry api requests in other modules.") . '</p>';
       $output .= '<h3>' . t('Uses') . '</h3>';
@@ @@
 /**
  * Implements hook_entity_operation().
  */
-function google_api_client_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+function google_api_client_entity_operation(EntityInterface $entity) {
   if ($entity->getEntityTypeId() == 'google_api_client') {
     $operations = [];
     $is_authenticated = $entity->getAuthenticated();
     $operations['authenticate_revoke'] = [
       'title' => $is_authenticated ? t('Revoke') : t('Authenticate'),
-      'url' => $is_authenticated ? \Drupal\Core\Url::fromRoute('entity.google_api_client.revoke_form', ['google_api_client' => $entity->getId()]) : \Drupal\Core\Url::fromRoute('google_api_client.callback', ['id' => $entity->getId()]),
+      'url' => $is_authenticated ? Url::fromRoute('entity.google_api_client.revoke_form', ['google_api_client' => $entity->getId()]) : Url::fromRoute('google_api_client.callback', ['id' => $entity->getId()]),
       'weight' => 50,
     ];
     return $operations;
@@ @@
   }
 }

-function google_api_client_google_scopes_names(Drupal\Core\Field\BaseFieldDefinition $field, $entity, $cacheable) {
+function google_api_client_google_scopes_names(BaseFieldDefinition $field, $entity, $cacheable) {
   $services = _google_api_client_google_services_names();
   $services = array_keys($services);
   return google_api_client_google_services_scopes($services);
@@ @@
  */
 function google_api_client_callback_url() {
   $is_https = \Drupal::request()->isSecure();
-  return \Drupal\Core\Url::fromRoute('google_api_client.callback', [], ['https' => $is_https, 'absolute' => TRUE])->toString();
+  return Url::fromRoute('google_api_client.callback', [], ['https' => $is_https, 'absolute' => TRUE])->toString();
 }

 /**
@@ @@
  */
 function google_api_client_load_library($return_path = FALSE) {
   $library = \Drupal::service('library.discovery')->getLibraryByName('google_api_client', 'google-api-php-client');
-  $finder = new \Drupal\Component\ClassFinder\ClassFinder();
+  $finder = new ClassFinder();
   $file = $finder->findFile('Google_Client');
   if ($library) {
     if (class_exists('Google_Client') && strpos($file, 'vendor') !== FALSE) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


9) modules/contrib/google_api_client/google_api_client.install:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Link;
+use Drupal\Core\Url;
+use Drupal\Component\Serialization\Json;
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * @file
  * Install and uninstall functions for the Google api client module.
@@ @@
   }

   $library_exists = google_api_client_load_library();
-  $url = \Drupal\Core\Link::fromTextAndUrl(t('here'), \Drupal\Core\Url::fromUri('https://github.com/google/google-api-php-client/releases'))->toString();
-  $documentation = \Drupal\Core\Link::fromTextAndUrl(t('google api php client installation'), \Drupal\Core\Url::fromUri('https://github.com/google/google-api-php-client#installation'))->toString();
+  $url = Link::fromTextAndUrl(t('here'), Url::fromUri('https://github.com/google/google-api-php-client/releases'))->toString();
+  $documentation = Link::fromTextAndUrl(t('google api php client installation'), Url::fromUri('https://github.com/google/google-api-php-client#installation'))->toString();
   $version = isset($library_exists['versions']) && !empty($library_exists['versions']) ? array_keys($library_exists['versions']) : array('2.4.0');
   return [
     'google-api-php-client' => [
@@ @@
   $entity_type = \Drupal::entityTypeManager()->getDefinition('google_api_client');
   \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);
   // Entity table is ready let's copy previous record as first account.
-  $settings = \Drupal\Component\Serialization\Json::decode(\Drupal::config('google_api_client.settings')->get('credentials'));
+  $settings = Json::decode(\Drupal::config('google_api_client.settings')->get('credentials'));
   $scopes = \Drupal::config('google_api_client.settings')->get('scopes');
   $scopes = array_map('trim', explode(PHP_EOL, $scopes));

@@ @@
   }
   $services = array_unique($services);
   $token = unserialize(\Drupal::config('google_api_client.tokens')->get('google_access_token'));
-  $token = \Drupal\Component\Serialization\Json::encode($token);
+  $token = Json::encode($token);
   $account = [
     'name' => 'Google Api Client',
     'client_id' => $settings['web']['client_id'],
@@ @@
     $definition_manager = \Drupal::entityDefinitionUpdateManager();

     // Create a new field definition.
-    $new_uuid_field = \Drupal\Core\Field\BaseFieldDefinition::create('uuid')
+    $new_uuid_field = BaseFieldDefinition::create('uuid')
       ->setLabel(t('UUID'))
       ->setDescription(t('The Google Api Client UUID.'))
       ->setReadOnly(TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/google_api_client/google_api_client.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultNeutral;
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Hooks provided by the Google Api Client module.
@@ @@
  * @param \Drupal\Core\Session\AccountInterface $user_account
  *   Run access checks for this account. Logged in user session.
  *
- * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
+ * @return AccessResultAllowed|AccessResultForbidden|AccessResultNeutral
  *   Should Return AccessResult::forbidden() if want to restrict authentication
  *               AccessResult::allowed() if want to allow authentication
  *               AccessResult::neutral() if unsure.
@@ @@
     // If we want that only users with specific user id are allowed.
     $allowed_users = [1, 5, 10];
     if (in_array($user_account->id(), $allowed_users)) {
-      return \Drupal\Core\Access\AccessResult::allowed();
+      return AccessResult::allowed();
     }
     // If we want some role (say Google User role) to have access.
     if (in_array('google_user', $user_account->getRoles())) {
-      return \Drupal\Core\Access\AccessResult::allowed();
+      return AccessResult::allowed();
     }
     // Nothing passed access check, restrict authentication.
-    return \Drupal\Core\Access\AccessResult::forbidden();
+    return AccessResult::forbidden();
   }
   else {
     // We don't want to check access of this account.
-    return \Drupal\Core\Access\AccessResult::neutral();
+    return AccessResult::neutral();
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

