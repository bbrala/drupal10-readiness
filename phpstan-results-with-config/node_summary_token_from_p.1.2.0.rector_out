modules/contrib/node_summary_token_from_p/node_summary_token_from_p.module
modules/contrib/node_summary_token_from_p/tests/src/HookTokensTest.php

2 files with changes
====================

1) modules/contrib/node_summary_token_from_p/tests/src/HookTokensTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\node_summary_token_from_p;

+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * Cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * {@inheritDoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['filter', 'node']);
     $this->installEntitySchema('node');
@@ @@
     $field->save();

     /**
-     * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository
+     * @var EntityDisplayRepositoryInterface $entityDisplayRepository
      */
     $entityDisplayRepository = $this->container->get('entity_display.repository');

@@ @@
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $this->tokenService->replace($input, ['node' => $node], ['langcode' => $this->interfaceLanguage->getId()], $bubbleable_metadata);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
-      $this->assertEqual($bubbleable_metadata, $metadata_tests[$input]);
+      $this->assertEquals($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($bubbleable_metadata, $metadata_tests[$input]);
     }

     // Repeat for a node without a summary.
@@ @@

     foreach ($tests as $input => $expected) {
       $output = $this->tokenService->replace($input, ['node' => $node], ['language' => $this->interfaceLanguage]);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Node token %token replaced for node without a summary.', ['%token' => $input]));
+      $this->assertEquals($output, $expected, new FormattableMarkup('Node token %token replaced for node without a summary.', ['%token' => $input]));
     }
   }

@@ @@
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $this->tokenService->replace($input, ['node' => $node], ['langcode' => $this->interfaceLanguage->getId()], $bubbleable_metadata);
-      $this->assertEqual($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
-      $this->assertEqual($bubbleable_metadata, $metadata_tests[$input]);
+      $this->assertEquals($output, $expected, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
+      $this->assertEquals($bubbleable_metadata, $metadata_tests[$input]);
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/node_summary_token_from_p/node_summary_token_from_p.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  */
@@ @@
   }

   if ($type == 'node' && !empty($data['node'])) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $data['node'];

     foreach ($tokens as $name => $original) {
@@ @@
  * This function will look for <p> elements in the rendered node HTML
  * and will return the first three sentences as a meta description.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node to generate the meta description for.
  *
  * @return string
@@ @@

   $view_builder = Drupal::entityTypeManager()->getViewBuilder('node');
   /**
-   * @var \Drupal\Core\Render\RendererInterface $renderer
+   * @var RendererInterface $renderer
    */
   $renderer = Drupal::service('renderer');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

