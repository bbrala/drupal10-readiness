diff --git a/salsa_api.module b/salsa_api.module
index ac297c6..f5f1698 100644
--- a/salsa_api.module
+++ b/salsa_api.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\salsa_api\SalsaApiInterface;
 /**
  * @file
  * Provides an API to allow Drupal to query the Salsa CRM provided by Salsa
@@ -8,11 +9,10 @@
  * This module does not provide any visible functionality on its own, it just
  * provides an API that other modules can use to query data in Salsa.
  */
-
 /**
  * Returns an instance of the Salsa API service.
  *
- * @return \Drupal\salsa_api\SalsaApiInterface
+ * @return SalsaApiInterface
  *   Returns Salsa API service.
  */
 function salsa_api() {
diff --git a/src/SalsaApi.php b/src/SalsaApi.php
index c8d5bb6..0ba28b9 100644
--- a/src/SalsaApi.php
+++ b/src/SalsaApi.php
@@ -7,6 +7,8 @@
 
 namespace Drupal\salsa_api;
 
+use Drupal\Core\Config\ImmutableConfig;
+use GuzzleHttp\Client;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -26,7 +28,7 @@ class SalsaApi implements SalsaApiInterface {
   /**
    * URL to the Salsa API service.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -40,52 +42,52 @@ class SalsaApi implements SalsaApiInterface {
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
   /**
    * The URL Generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Http\ClientFactory $http_client_factory
+   * @param ClientFactory $http_client_factory
    *   The HTTP client to fetch the feed data with.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL Generator.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ClientFactory $http_client_factory, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger_factory, LanguageManagerInterface $language_manager, TimeInterface $time) {
@@ -113,8 +115,8 @@ class SalsaApi implements SalsaApiInterface {
    * @return string
    *   The raw result of the HTTP query if successful.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function query($script, $query) {
     $request = $this->getRequest($script . '?' . $query);
@@ -501,7 +503,7 @@ class SalsaApi implements SalsaApiInterface {
    *   The XML response converted to an array structure or NULL in case of an
    *   error.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
+   * @throws SalsaQueryException
    */
   protected function parseXml($result) {
     if (preg_match("<div class='sjs error'>", $result)) {
@@ -521,7 +523,7 @@ class SalsaApi implements SalsaApiInterface {
    * @return array|null
    *   The JSON response converted to an array structure.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
+   * @throws SalsaQueryException
    */
   protected function parseJson($result) {
     $json = Json::decode($result);
@@ -542,7 +544,7 @@ class SalsaApi implements SalsaApiInterface {
    * @return bool
    *   TRUE if the connection was successful.
    *
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaConnectionException
    */
   public function connect() {
     // We already have a connection, just return TRUE.
diff --git a/src/SalsaApiInterface.php b/src/SalsaApiInterface.php
index ecd95e0..2b766bd 100644
--- a/src/SalsaApiInterface.php
+++ b/src/SalsaApiInterface.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\salsa_api;
 
+use Psr\Http\Message\RequestInterface;
 /**
  * Declare the interface 'SalsaApiInterface'.
  */
@@ -42,7 +43,7 @@ interface SalsaApiInterface {
    *   The name of the Salsa script to call, e.g. getObject.sjs, followed by a
    *   '?' and POST data to send to Salsa.
    *
-   * @return \Psr\Http\Message\RequestInterface
+   * @return RequestInterface
    *   The returned data from the HTTP request.
    */
   public function getRequest($path);
@@ -59,8 +60,8 @@ interface SalsaApiInterface {
    * @param string $tag
    *   Tag to be deleted.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function deleteTag($object, $key, $tag);
 
@@ -72,8 +73,8 @@ interface SalsaApiInterface {
    * @param array $properties
    *   An array of properties (content disposition key/value pairs).
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function upload($file, $properties);
 
@@ -99,8 +100,8 @@ interface SalsaApiInterface {
    * @return int
    *   The count of items matching the given condition.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function getCount($object, array $conditions = array(), $column_count = NULL);
 
@@ -150,8 +151,8 @@ interface SalsaApiInterface {
    *   - min: The smallest value in the columnCount in this group of the result
    *     set
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function getCounts($object, array $group_by = array(), array $conditions = array(), $column_count = NULL, array $order_by = array(), $limit = NULL);
 
@@ -185,8 +186,8 @@ interface SalsaApiInterface {
    * @return array
    *   Array of objects.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function getLeftJoin($objects, array $conditions = array(), $limit = NULL, array $include = array(), array $order_by = array(), array $group_by = array());
 
@@ -201,8 +202,8 @@ interface SalsaApiInterface {
    * @return array
    *   Array containing the Salsa object requested.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function getObject($object, $key);
 
@@ -233,8 +234,8 @@ interface SalsaApiInterface {
    * @return array[]
    *   Array of object value arrays.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function getObjects($object, array $conditions = array(), $limit = NULL, array $include = array(), array $order_by = array(), array $group_by = array());
 
@@ -249,8 +250,8 @@ interface SalsaApiInterface {
    *   contains an array for each row of the report. Inside the 'row' array is
    *   an associative array containing each column/field and value in that row.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function getReport($key);
 
@@ -272,8 +273,8 @@ interface SalsaApiInterface {
    *    - Default: The default value to use if none is supplied
    *    - Extra: Any extra attributes for the column (e.g. auto_increment)
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function describe($table);
 
@@ -296,8 +297,8 @@ interface SalsaApiInterface {
    *    - defaultValue: The default value to use if none is supplied
    *    - label: The human-readable name of the field
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function describe2($table);
 
@@ -315,8 +316,8 @@ interface SalsaApiInterface {
    * @return int
    *   The key of the updated or newly created object.
    *
-   * @throws \Drupal\salsa_api\SalsaQueryException
-   * @throws \Drupal\salsa_api\SalsaConnectionException
+   * @throws SalsaQueryException
+   * @throws SalsaConnectionException
    */
   public function save($object, array $fields = array(), array $links = array());
 
diff --git a/tests/src/Functional/SalsaAPISettingsFormSimpleTest.php b/tests/src/Functional/SalsaAPISettingsFormSimpleTest.php
index 6cfb2d6..c0591fc 100644
--- a/tests/src/Functional/SalsaAPISettingsFormSimpleTest.php
+++ b/tests/src/Functional/SalsaAPISettingsFormSimpleTest.php
@@ -83,8 +83,12 @@ class SalsaAPISettingsFormSimpleTest extends BrowserTestBase {
       'password' => $this->correctPassword,
       'query_timeout' => $this->queryTimeout,
     );
-    $this->drupalPostForm('admin/config/services/salsa', $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
+    $this->drupalGet('admin/config/services/salsa');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
   }
 
   /**
@@ -97,8 +101,12 @@ class SalsaAPISettingsFormSimpleTest extends BrowserTestBase {
       'password' => $this->wrongPassword,
       'query_timeout' => $this->queryTimeout,
     );
-    $this->drupalPostForm('admin/config/services/salsa', $edit, 'Save configuration');
-    $this->assertText('Username and/or password incorrect.');
+    $this->drupalGet('admin/config/services/salsa');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Username and/or password incorrect.');
   }
 
   /**
@@ -111,8 +119,12 @@ class SalsaAPISettingsFormSimpleTest extends BrowserTestBase {
       'password' => $this->correctPassword,
       'query_timeout' => $this->queryTimeout,
     );
-    $this->drupalPostForm('admin/config/services/salsa', $edit, 'Save configuration');
-    $this->assertText('This page is not available, please type in a correct URL or try again later.');
+    $this->drupalGet('admin/config/services/salsa');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('This page is not available, please type in a correct URL or try again later.');
   }
 
 }
diff --git a/tests/src/Unit/SalsaApiTest.php b/tests/src/Unit/SalsaApiTest.php
index ea10cf5..f17e757 100644
--- a/tests/src/Unit/SalsaApiTest.php
+++ b/tests/src/Unit/SalsaApiTest.php
@@ -6,6 +6,10 @@
 
 namespace Drupal\Tests\salsa_api\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\salsa_api\SalsaQueryException;
+use Drupal\salsa_api\SalsaConnectionException;
+use PHPUnit\Framework\MockObject\MockBuilder;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Http\ClientFactory;
 use Drupal\Core\Language\Language;
@@ -58,42 +62,42 @@ class SalsaApiTest extends UnitTestCase {
   /**
    * The HTTP client factory.
    *
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $clientFactory;
 
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client|\PHPUnit_Framework_MockObject_MockObject
+   * @var Client|MockObject
    */
   protected $client;
 
   /**
    * The URL Generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var UrlGeneratorInterface|MockObject
    */
   protected $urlGenerator;
 
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var LoggerChannelFactoryInterface|MockObject
    */
   protected $loggerChannelFactory;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var LanguageManagerInterface|MockObject
    */
   protected $languageManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var TimeInterface|MockObject
    */
   protected $time;
 
@@ -144,11 +148,10 @@ class SalsaApiTest extends UnitTestCase {
 
   /**
    * @covers ::getCounts
-   *
-   * @expectedException \Drupal\salsa_api\SalsaQueryException
-   *   Error message
    */
   public function testGetCountsError() {
+    $this->expectException('Drupal\salsa_api\SalsaQueryException
+  Error message');
     $salsa = $this->getSalsaAPI();
 
     $object = 'OBJECT';
@@ -318,11 +321,10 @@ class SalsaApiTest extends UnitTestCase {
 
   /**
    * @covers ::getObject
-   *
-   * @expectedException \Drupal\salsa_api\SalsaQueryException
-   *   There was a problem with your submission, invalid object/key pair.
    */
   public function testGetObjectError() {
+    $this->expectException('Drupal\salsa_api\SalsaQueryException
+  There was a problem with your submission, invalid object/key pair.');
     $salsa = $this->getSalsaAPI();
 
     $body_query_error = '<?xml version="1.0"?>
@@ -445,11 +447,10 @@ class SalsaApiTest extends UnitTestCase {
 
   /**
    * @covers ::getReport
-   *
-   * @expectedException \Drupal\salsa_api\SalsaQueryException
-   *   Unable to retrieve report #KEY. Does it exist?
    */
   public function testGetReportError() {
+    $this->expectException('Drupal\salsa_api\SalsaQueryException
+  Unable to retrieve report #KEY. Does it exist?');
     $salsa = $this->getSalsaAPI();
 
     $key = 'KEY';
@@ -481,11 +482,10 @@ class SalsaApiTest extends UnitTestCase {
 
   /**
    * @covers ::describe
-   *
-   * @expectedException \Drupal\salsa_api\SalsaQueryException
-   *   Unable to retrieve schema for table KEY. Does it exist?
    */
   public function testDescribeError() {
+    $this->expectException('Drupal\salsa_api\SalsaQueryException
+  Unable to retrieve schema for table KEY. Does it exist?');
     $salsa = $this->getSalsaAPI();
 
     $table = 'KEY';
@@ -521,11 +521,10 @@ class SalsaApiTest extends UnitTestCase {
 
   /**
    * @covers ::describe2
-   *
-   * @expectedException \Drupal\salsa_api\SalsaQueryException
-   *   Unable to retrieve schema for table KEY. Does it exist?
    */
   public function testDescribe2Error() {
+    $this->expectException('Drupal\salsa_api\SalsaQueryException
+  Unable to retrieve schema for table KEY. Does it exist?');
     $salsa = $this->getSalsaAPI();
 
     $table = 'KEY';
@@ -559,10 +558,9 @@ class SalsaApiTest extends UnitTestCase {
 
   /**
    * @covers ::save
-   *
-   * @expectedException \Drupal\salsa_api\SalsaQueryException
    */
   public function testSaveError() {
+    $this->expectException(SalsaQueryException::class);
     $salsa = $this->getSalsaAPI();
 
     $object = 'OBJECT';
@@ -680,10 +678,9 @@ class SalsaApiTest extends UnitTestCase {
   /**
    * @covers ::parseXml
    * @covers ::convertObjectToArray
-   *
-   * @expectedException \Drupal\salsa_api\SalsaQueryException
    */
   public function testParseResultError() {
+    $this->expectException(SalsaQueryException::class);
     $salsa = $this->getSalsaAPI();
 
     $table = 'KEY';
@@ -696,10 +693,9 @@ class SalsaApiTest extends UnitTestCase {
 
   /**
    * @covers ::connect
-   *
-   * @expectedException \Drupal\salsa_api\SalsaConnectionException
    */
   public function testConnectError() {
+    $this->expectException(SalsaConnectionException::class);
     $salsa = $this->getSalsaAPI();
     $logger_channel = $this->createMock('\Drupal\Core\Logger\LoggerChannelInterface');
 
@@ -809,7 +805,7 @@ class SalsaApiTest extends UnitTestCase {
   /**
    * Returns a Salsa API instance with the necessary mock objects injected.
    *
-   * @return \Drupal\salsa_api\SalsaApi
+   * @return SalsaApi
    *   Returns a Salsa API instance with the necessary mock objects injected.
    */
   protected function getSalsaAPI() {
@@ -913,7 +909,7 @@ class SalsaApiTest extends UnitTestCase {
   /**
    * Helper function.
    *
-   * @return \PHPUnit_Framework_MockObject_MockBuilder
+   * @return MockBuilder
    *   The config factory.
    */
   protected function getSalsaApiConfigFactory() {
