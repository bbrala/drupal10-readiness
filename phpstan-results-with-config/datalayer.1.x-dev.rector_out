modules/contrib/datalayer/datalayer.api.php
modules/contrib/datalayer/datalayer.module
modules/contrib/datalayer/src/Form/DatalayerSettingsForm.php
modules/contrib/datalayer/tests/src/Functional/DataLayerFunctionalTest.php
modules/contrib/datalayer/tests/src/Kernel/DataLayerKernelTest.php

5 files with changes
====================

1) modules/contrib/datalayer/tests/src/Kernel/DataLayerKernelTest.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('node');
@@ @@
    * Test DataLayer Defaults function.
    */
   public function testDataLayerDefaults() {
-    $this->assertEqual(
-      [
-        'drupalLanguage' => Language::$defaultValues['id'],
-        'drupalCountry' => $this->config('system.date')->get('country.default'),
-        'siteName' => $this->config('system.site')->get('name'),
-      ],
-      _datalayer_defaults()
-    );
+    $this->assertEquals([
+      'drupalLanguage' => Language::$defaultValues['id'],
+      'drupalCountry' => $this->config('system.date')->get('country.default'),
+      'siteName' => $this->config('system.site')->get('name'),
+    ], _datalayer_defaults());
   }

   /**
@@ @@
    */
   public function testDataLayerAddWillAddData() {
     $this->setupEmptyDataLayer();
-    $this->assertEqual(
-      ['foo' => 'bar'],
-      datalayer_add(['foo' => 'bar'])
-    );
+    $this->assertEquals(['foo' => 'bar'], datalayer_add(['foo' => 'bar']));
   }

   /**
@@ @@
   public function testDataLayerAddDoesNotOverwriteByDefault() {
     $this->setupEmptyDataLayer();
     datalayer_add(['foo' => 'bar']);
-    $this->assertEqual(
-      ['foo' => 'bar'],
-      datalayer_add(['foo' => 'baz'])
-    );
+    $this->assertEquals(['foo' => 'bar'], datalayer_add(['foo' => 'baz']));
   }

   /**
@@ @@
   public function testDataLayerAddWillOverwriteWithFlag() {
     $this->setupEmptyDataLayer();
     datalayer_add(['foo' => 'bar']);
-    $this->assertEqual(
-      ['foo' => 'baz'],
-      datalayer_add(['foo' => 'baz'], TRUE)
-    );
+    $this->assertEquals(['foo' => 'baz'], datalayer_add(['foo' => 'baz'], TRUE));
   }

   /**
@@ @@
     $this->setupMockRouteMatch();
     $object = _datalayer_menu_get_any_object();
     $this->assertTrue(is_object($object));
-    $this->assertEqual($object->getEntityTypeId(), 'node');
+    $this->assertEquals($object->getEntityTypeId(), 'node');
   }

   /**
@@ @@
   public function testDataLayerGetEntityTermsReturnsEmptyArray() {
     $this->setupMockNode();
     $terms = _datalayer_get_entity_terms($this->node);
-    $this->assertEqual([], $terms);
+    $this->assertEquals([], $terms);
   }

   /**
@@ @@
   public function testDataLayerGetEntityTermsReturnsTermArray() {
     $this->setupMockNodeWithTerm();
     $terms = _datalayer_get_entity_terms($this->node);
-    $this->assertEqual(['tags' => [1 => 'someTag']], $terms);
+    $this->assertEquals(['tags' => [1 => 'someTag']], $terms);
   }

   /**
@@ @@
     $this->setupEmptyDataLayer();
     $this->setupMockNodeWithTerm();
     $entity_data = _datalayer_get_entity_data($this->node);
-    $this->assertEqual(
-      $this->getExpectedEntityDataArray(),
-      $entity_data
-    );
+    $this->assertEquals($this->getExpectedEntityDataArray(), $entity_data);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/datalayer/tests/src/Functional/DataLayerFunctionalTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $admin_user = $this->drupalCreateUser([
       'access administration pages',
@@ @@
     $assert = $this->assertSession();
     $this->drupalGet('admin/config/search/datalayer');
     $assert->pageTextContains('Include "data layer helper" library');
-    $this->assertNoFieldChecked('lib_helper');
+    $this->assertSession()->checkboxNotChecked('lib_helper');
     $assert->pageTextNotContains('Data Layer Helper Library is enabled but the library is not installed at /libraries/data-layer-helper/dist/data-layer-helper.js. See: data-layer-helper on GitHub.');

     // Update form field to ensure config value changes.
-    $this->drupalPostForm(NULL, ['lib_helper' => '1'], 'Save configuration');
-    $this->assertFieldChecked('lib_helper');
+    $this->submitForm(['lib_helper' => '1'], 'Save configuration');
+    $this->assertSession()->checkboxChecked('lib_helper');
     $assert->pageTextContains('Data Layer Helper Library is enabled but the library is not installed at /libraries/data-layer-helper/dist/data-layer-helper.js. See: data-layer-helper on GitHub.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/datalayer/src/Form/DatalayerSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandler definition.
    *
-   * @var Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/datalayer/datalayer.module:214

    ---------- begin diff ----------
@@ @@
     if ($exp_user_urls && count($matched_roles)) {
       $path = Url::fromRoute("<current>")->toString();
       $path_matcher = \Drupal::service('path.matcher');
-      $alias_manager = \Drupal::service('path.alias_manager');
+      $alias_manager = \Drupal::service('path_alias.manager');
       $path_alias = $alias_manager->getAliasByPath($path);
       if ($path_matcher->matchPath($path, $exp_user_urls) ||
           $path_matcher->matchPath($path_alias, $exp_user_urls)) {
@@ @@
       $depth = $datalayer_settings->get('ia_depth');
       // Retrieve an array which contains the path pieces.
       $current_path = \Drupal::service('path.current')->getPath();
-      $result = \Drupal::service('path.alias_manager')
+      $result = \Drupal::service('path_alias.manager')
         ->getAliasByPath($current_path);
       $path_args = explode('/', $result);
       $i = 0;
@@ @@
 /**
  * Get the group of given entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
  * @return null|\Drupal\group\Entity\GroupInterface
@@ @@
  *
  * @param array $properties
  *   Selected properties for the entity.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  * @param string $key_prefix
  *   The prefix for the property name.
    ----------- end diff -----------

Applied rules:
 * PathAliasManagerServiceNameRector
 * ArgumentRemoverRector


5) modules/contrib/datalayer/datalayer.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FieldItemInterface;
 /**
  * @file
  * Documentation for the Data Layer module.
@@ @@
  *
  * @param array $value
  *   Value for the field item being added to the datalayer.
- * @param \Drupal\Core\Field\FieldItemInterface $field_item
+ * @param FieldItemInterface $field_item
  *   Individual field item the value is from.
  * @param string $field_type
  *   Type of field, such as 'string' or 'entity_refernce'.
  */
-function hook_datalayer_field_alter(array &$value, \Drupal\Core\Field\FieldItemInterface $field_item, $field_type) {
+function hook_datalayer_field_alter(array &$value, FieldItemInterface $field_item, $field_type) {
   // EXAMPLE:
   // Remove the filter format for a text with summary field.
   if ($field_type == 'text_with_summary') {
    ----------- end diff -----------

 [OK] 5 files have been changed by Rector                                       

