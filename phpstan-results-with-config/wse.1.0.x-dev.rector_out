modules/contrib/wse/modules/wse_config/src/Cache/WseCacheBackend.php
modules/contrib/wse/modules/wse_config/src/Cache/WseCacheBackendFactory.php
modules/contrib/wse/modules/wse_config/src/Cache/WseChainedFastBackend.php
modules/contrib/wse/modules/wse_config/src/Cache/WseChainedFastBackendFactory.php
modules/contrib/wse/modules/wse_config/src/DecorateCacheFactoriesPass.php
modules/contrib/wse/modules/wse_config/src/Entity/WseConfig.php
modules/contrib/wse/modules/wse_config/src/Event/WseConfigEvents.php
modules/contrib/wse/modules/wse_config/src/Event/WseConfigOptOutEvent.php
modules/contrib/wse/modules/wse_config/src/EventSubscriber/WseConfigSubscriber.php
modules/contrib/wse/modules/wse_config/src/Form/WseConfigForm.php
modules/contrib/wse/modules/wse_config/src/WorkspaceIdDetector.php
modules/contrib/wse/modules/wse_config/src/WseConfigAccessControlHandler.php
modules/contrib/wse/modules/wse_config/src/WseConfigCachedStorage.php
modules/contrib/wse/modules/wse_config/src/WseConfigDatabaseStorage.php
modules/contrib/wse/modules/wse_config/src/WseConfigInterface.php
modules/contrib/wse/modules/wse_config/src/WseConfigListBuilder.php
modules/contrib/wse/modules/wse_config/src/WseConfigMatcher.php
modules/contrib/wse/modules/wse_config/src/WseConfigServiceProvider.php
modules/contrib/wse/modules/wse_config/src/WseConfigViewBuilder.php
modules/contrib/wse/modules/wse_config/wse_config.module
modules/contrib/wse/modules/wse_deploy/src/Event/WorkspaceDeployEvents.php
modules/contrib/wse/modules/wse_deploy/src/Event/WorkspaceExportEvent.php
modules/contrib/wse/modules/wse_deploy/src/EventSubscriber/WseResourceObjectNormalizationCacher.php
modules/contrib/wse/modules/wse_deploy/src/Form/WorkspaceExportForm.php
modules/contrib/wse/modules/wse_deploy/src/JsonApiWorkspaceNegotiator.php
modules/contrib/wse/modules/wse_deploy/src/WorkspaceExporter.php
modules/contrib/wse/modules/wse_deploy/src/WseDeployServiceProvider.php
modules/contrib/wse/modules/wse_group_access/src/Access/WseGroupAccess.php
modules/contrib/wse/modules/wse_group_access/src/Routing/RouteSubscriber.php
modules/contrib/wse/modules/wse_group_access/wse_group_access.module
modules/contrib/wse/modules/wse_scheduler/src/Commands/WseSchedulerCommands.php
modules/contrib/wse/modules/wse_scheduler/src/Event/WorkspaceScheduledPublishEvent.php
modules/contrib/wse/modules/wse_scheduler/src/Event/WorkspaceSchedulerEvents.php
modules/contrib/wse/modules/wse_scheduler/src/ScheduledWorkspacePublisher.php
modules/contrib/wse/modules/wse_scheduler/wse_scheduler.module
modules/contrib/wse/src/Access/WorkspaceStateTypeAccess.php
modules/contrib/wse/src/Controller/RevisionDiffController.php
modules/contrib/wse/src/Controller/SwitchToLiveController.php
modules/contrib/wse/src/Diff/WseDiffEntityParser.php
modules/contrib/wse/src/Event/WorkspaceEvents.php
modules/contrib/wse/src/Event/WorkspacePublishEvent.php
modules/contrib/wse/src/Event/WorkspaceRevertEvent.php
modules/contrib/wse/src/EventSubscriber/WorkspacePublishingEventSubscriber.php
modules/contrib/wse/src/Form/DiscardEntityForm.php
modules/contrib/wse/src/Form/MoveEntityForm.php
modules/contrib/wse/src/Form/SettingsForm.php
modules/contrib/wse/src/Form/WorkspaceRevertForm.php
modules/contrib/wse/src/Form/WseWorkspacePublishForm.php
modules/contrib/wse/src/Form/WseWorkspaceSwitcherForm.php
modules/contrib/wse/src/PathProcessor/WsePathProcessor.php
modules/contrib/wse/src/Plugin/Block/SwitchToLiveBlock.php
modules/contrib/wse/src/Plugin/QueueWorker/WorkspaceRevisionCleaner.php
modules/contrib/wse/src/Plugin/Validation/Constraint/WseEntityReferenceSupportedNewEntitiesConstraint.php
modules/contrib/wse/src/Plugin/Validation/Constraint/WseEntityReferenceSupportedNewEntitiesConstraintValidator.php
modules/contrib/wse/src/Plugin/diff/Field/PathFieldBuilder.php
modules/contrib/wse/src/PublishedRevisionStorage.php
modules/contrib/wse/src/Routing/RouteSubscriber.php
modules/contrib/wse/src/WorkspaceReverter.php
modules/contrib/wse/src/WseEntityOperations.php
modules/contrib/wse/src/WseServiceProvider.php
modules/contrib/wse/src/WseWorkspaceAssociation.php
modules/contrib/wse/src/WseWorkspaceListBuilder.php
modules/contrib/wse/src/WseWorkspaceManager.php
modules/contrib/wse/src/WseWorkspaceOperationFactory.php
modules/contrib/wse/src/WseWorkspacePublisher.php
modules/contrib/wse/src/WseWorkspaceRepository.php
modules/contrib/wse/wse.install
modules/contrib/wse/wse.module

47 files with changes
=====================

1) modules/contrib/wse/wse.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\workspaces\WorkspaceManagerInterface;
 /**
  * @file
  * Provides extra functionality for the Workspaces module.
@@ @@
  * Entity form builder to add various information to the workspace.
  */
 function wse_workspace_publish_form_validate($form, FormStateInterface $form_state) {
-  /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+  /** @var WorkspaceInterface $workspace */
   $workspace = $form_state->getFormObject()->getWorkspace();

   $workspace->_clone_on_publish = $form_state->getValue('clone_on_publish');
@@ @@
  * Implements hook_page_attachments().
  */
 function wse_page_attachments(array &$attachments) {
-  /** @var \Drupal\workspaces\WorkspaceManagerInterface $workspace_manger */
+  /** @var WorkspaceManagerInterface $workspace_manger */
   $workspace_manger = \Drupal::service('workspaces.manager');
   $wse_settings = \Drupal::config('wse.settings');
   if ($wse_settings->get('append_current_workspace_to_url') && $workspace_manger->hasActiveWorkspace()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/wse/src/WseWorkspaceRepository.php:9

    ---------- begin diff ----------
@@ @@
 class WseWorkspaceRepository implements WorkspaceRepositoryInterface {

   /**
-   * @var \Drupal\workspaces\WorkspaceRepositoryInterface
+   * @var WorkspaceRepositoryInterface
    */
   protected $innerRepository;

   /**
-   * @param \Drupal\workspaces\WorkspaceRepositoryInterface $inner_repository
+   * @param WorkspaceRepositoryInterface $inner_repository
    */
   public function __construct(WorkspaceRepositoryInterface $inner_repository) {
     $this->innerRepository = $inner_repository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/wse/src/WseWorkspacePublisher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new WseWorkspacePublisher.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
-   * @param \Drupal\workspaces\WorkspaceInterface $source
+   * @param WorkspaceInterface $source
    *   The source workspace entity.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database, WorkspaceManagerInterface $workspace_manager, WorkspaceAssociationInterface $workspace_association, WorkspaceInterface $source, EventDispatcherInterface $event_dispatcher) {
@@ @@
    * {@inheritdoc}
    */
   public function publish() {
-    $this->eventDispatcher->dispatch(WorkspaceEvents::WORKSPACE_PRE_PUBLISH, new WorkspacePublishEvent($this->sourceWorkspace));
+    $this->eventDispatcher->dispatch(new WorkspacePublishEvent($this->sourceWorkspace), WorkspaceEvents::WORKSPACE_PRE_PUBLISH);

     // This code is copied from the parent method, but it doesn't use access
     // checks in order to allow workspaces to be published from a CLI process.
@@ @@
             $default_revisions = $this->entityTypeManager->getStorage($entity_type_id)
               ->loadMultiple(array_values($revision_difference_chunk));

-            /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+            /** @var ContentEntityInterface $entity */
             foreach ($entity_revisions as $entity) {
               // When pushing workspace-specific revisions to the default
               // workspace (Live), we simply need to mark them as default
@@ @@
     // Notify the workspace association that a workspace has been published.
     $this->workspaceAssociation->postPublish($this->sourceWorkspace);

-    $this->eventDispatcher->dispatch(WorkspaceEvents::WORKSPACE_POST_PUBLISH, new WorkspacePublishEvent($this->sourceWorkspace));
+    $this->eventDispatcher->dispatch(new WorkspacePublishEvent($this->sourceWorkspace), WorkspaceEvents::WORKSPACE_POST_PUBLISH);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/wse/src/WseWorkspaceOperationFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse;

+use Drupal\workspaces\WorkspacePublisherInterface;
+use Drupal\workspaces\WorkspaceMergerInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The inner workspace operation factory service.
    *
-   * @var \Drupal\workspaces\WorkspaceOperationFactory
+   * @var WorkspaceOperationFactory
    */
   protected $inner;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new WseWorkspaceOperationFactory.
    *
-   * @param \Drupal\workspaces\WorkspaceOperationFactory $workspace_operation_factory
+   * @param WorkspaceOperationFactory $workspace_operation_factory
    *   The inner workspace operation factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager service.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(WorkspaceOperationFactory $workspace_operation_factory, EntityTypeManagerInterface $entity_type_manager, Connection $database, WorkspaceManagerInterface $workspace_manager, WorkspaceAssociationInterface $workspace_association, CacheTagsInvalidatorInterface $cache_tags_invalidator, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Gets the workspace publisher.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $source
+   * @param WorkspaceInterface $source
    *   A workspace entity.
    *
-   * @return \Drupal\workspaces\WorkspacePublisherInterface
+   * @return WorkspacePublisherInterface
    *   A workspace publisher object.
    */
   public function getPublisher(WorkspaceInterface $source) {
@@ @@
   /**
    * Gets the workspace merger.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $source
+   * @param WorkspaceInterface $source
    *   The source workspace entity.
-   * @param \Drupal\workspaces\WorkspaceInterface $target
+   * @param WorkspaceInterface $target
    *   The target workspace entity.
    *
-   * @return \Drupal\workspaces\WorkspaceMergerInterface
+   * @return WorkspaceMergerInterface
    *   A workspace merger object.
    */
   public function getMerger(WorkspaceInterface $source, WorkspaceInterface $target) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/wse/src/WseWorkspaceManager.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $inner;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The private tempstore service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new WseWorkspaceManager.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $inner
+   * @param WorkspaceManagerInterface $inner
    *   The inner workspace manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The private temp store.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(WorkspaceManagerInterface $inner, RequestStack $request_stack, PrivateTempStoreFactory $temp_store_factory, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/wse/src/WseWorkspaceListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse;

+use Drupal\Core\Form\FormBuilderInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/wse/src/WseWorkspaceAssociation.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The inner workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $innerWorkspaceAssociation;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a WseWorkspaceAssociation object.
    *
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The core workspace association service.
    */
   public function __construct(WorkspaceAssociationInterface $workspace_association, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Moves the given entity to another workspace.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $entity
+   * @param RevisionableInterface $entity
    *   The entity to move.
-   * @param \Drupal\workspaces\WorkspaceInterface $source_workspace
+   * @param WorkspaceInterface $source_workspace
    *   The workspace in which the entity is currently tracked.
-   * @param \Drupal\workspaces\WorkspaceInterface $target_workspace
+   * @param WorkspaceInterface $target_workspace
    *   The workspace in which the entity will be tracked.
    */
   public function moveEntity(RevisionableInterface $entity, WorkspaceInterface $source_workspace, WorkspaceInterface $target_workspace) {
@@ @@
   /**
    * Discards the changes for an entity in the given workspace.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $entity
+   * @param RevisionableInterface $entity
    *   The entity to discard.
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The workspace in which the entity will be discarded.
    */
   public function discardEntity(RevisionableInterface $entity, WorkspaceInterface $workspace) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/wse/src/WorkspaceReverter.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;

@@ @@
   /**
    * The published revision storage service.
    *
-   * @var \Drupal\wse\PublishedRevisionStorage
+   * @var PublishedRevisionStorage
    */
   protected $publishedRevisionStorage;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new WorkspaceReverter instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
-   * @param \Drupal\wse\PublishedRevisionStorage $published_revision_storage
+   * @param PublishedRevisionStorage $published_revision_storage
    *   The published revision storage.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $database, WorkspaceManagerInterface $workspace_manager, WorkspaceAssociationInterface $workspace_association, PublishedRevisionStorage $published_revision_storage, EventDispatcherInterface $event_dispatcher) {
@@ @@
   public function revert(WorkspaceInterface $workspace) {
     $revert_to_revisions = $this->publishedRevisionStorage->getRevertRevisions($workspace->id());
     $revert_from_revisions = $this->publishedRevisionStorage->getPublishedRevisions($workspace->id());
-    $this->eventDispatcher->dispatch(WorkspaceEvents::WORKSPACE_PRE_REVERT, new WorkspaceRevertEvent($workspace, $revert_to_revisions, $revert_from_revisions));
+    $this->eventDispatcher->dispatch(new WorkspaceRevertEvent($workspace, $revert_to_revisions, $revert_from_revisions), WorkspaceEvents::WORKSPACE_PRE_REVERT);

     $transaction = $this->database->startTransaction();
     try {
@@ @@
       throw $e;
     }

-    $this->eventDispatcher->dispatch(WorkspaceEvents::WORKSPACE_POST_REVERT, new WorkspaceRevertEvent($workspace, $revert_to_revisions, $revert_from_revisions));
+    $this->eventDispatcher->dispatch(new WorkspaceRevertEvent($workspace, $revert_to_revisions, $revert_from_revisions), WorkspaceEvents::WORKSPACE_POST_REVERT);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


9) modules/contrib/wse/src/Routing/RouteSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/wse/src/PublishedRevisionStorage.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The workspaces.association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspacesAssociation;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The workspace manager service.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * Constructs a PublishedRevisionStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspaces_association
+   * @param WorkspaceAssociationInterface $workspaces_association
    *   The workspaces.association service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, WorkspaceAssociationInterface $workspaces_association, Connection $connection, TimeInterface $time, WorkspaceManagerInterface $workspace_manager) {
@@ @@
   /**
    * Stores revision IDs that are about to be published from the given workspace.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The workspace to collect the revision IDs from.
    */
   public function storePublishedRevisions(WorkspaceInterface $workspace) {
@@ @@
   /**
    * Stores all current default revision IDs after the workspace was published.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The workspace to save the revision snapshot for.
    */
   public function storeAllRevisions(WorkspaceInterface $workspace) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/wse/src/Plugin/QueueWorker/WorkspaceRevisionCleaner.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/wse/src/Plugin/Block/SwitchToLiveBlock.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The workspace manager service.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/wse/src/PathProcessor/WsePathProcessor.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * A config factory for retrieving required config settings.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * Constructs a WsePathProcessor object.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   A config factory for retrieving the site front page configuration.
    */
   public function __construct(WorkspaceManagerInterface $workspace_manager, ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/wse/src/Form/WseWorkspaceSwitcherForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\Form;

+use Drupal\workspaces\WorkspaceInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The private tempstore service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new WseWorkspaceSwitcherForm.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The private temp store.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ @@

     try {
       if ($id) {
-        /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+        /** @var WorkspaceInterface $workspace */
         $workspace = $this->entityTypeManager->getStorage('workspace')->load($id);

         $this->workspaceManager->setActiveWorkspace($workspace);
@@ @@
    * @return array
    *   The grouped workspace options, keyed by workspace ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getWorkspaceOptions() {
     $recent = (string) $this->t('Recent workspaces');
@@ @@
    * @return array
    *   An array of workspace labels, keyed by workspace ID.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   protected function getRecentWorkspaces($max_options = NULL) {
     $recent_ids = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/wse/src/Form/WseWorkspacePublishForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\Form;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Gets the form workspace.
    *
-   * @return \Drupal\workspaces\WorkspaceInterface
+   * @return WorkspaceInterface
    *   The current form workspace.
    */
   public function getWorkspace() {
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+    /** @var WorkspaceInterface $workspace */
     $workspace = $form_state->getFormObject()->getWorkspace();
     $config = $this->config('wse.settings');
     $save_published_revisions = $config->get('override_save_published_revisions')
@@ @@
    *
    * @param array $form
    *   The form the select is added to, passed by reference.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The wse.settings config object containing the default value.
    */
   public static function addSaveRevisionsSelect(&$form, $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/wse/src/Form/WorkspaceRevertForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The workspace that will be reverted.
    *
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $workspace;

@@ @@
   /**
    * The workspace reverter service.
    *
-   * @var \Drupal\wse\WorkspaceReverter
+   * @var WorkspaceReverter
    */
   protected $workspaceReverter;

@@ @@
   /**
    * Constructs a new WorkspaceRevertForm.
    *
-   * @param \Drupal\wse\WorkspaceReverter $workspace_reverter
+   * @param WorkspaceReverter $workspace_reverter
    *   The workspace reverter service.
    */
   public function __construct(WorkspaceReverter $workspace_reverter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/wse/src/Form/SettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The workspaces manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/wse/src/Form/MoveEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\Form;

+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The entity that will be moved.
    *
-   * @var \Drupal\Core\Entity\RevisionableInterface
+   * @var RevisionableInterface
    */
   protected $entity;

@@ @@
   /**
    * The workspace where the entity will be moved from.
    *
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $sourceWorkspace;

@@ @@
   /**
    * The workspace where the entity will be moved to.
    *
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $targetWorkspace;

@@ @@
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;

@@ @@
   /**
    * The entity reference selection handler.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface
+   * @var SelectionInterface
    */
   protected $selectionHandler;

@@ @@
   /**
    * Constructs a new MoveEntityForm.
    *
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
-   * @param \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_handler
+   * @param SelectionPluginManagerInterface $selection_handler
    */
   public function __construct(WorkspaceAssociationInterface $workspace_association, SelectionPluginManagerInterface $selection_handler) {
     $this->workspaceAssociation = $workspace_association;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/wse/src/Form/DiscardEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\Form;

+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity that will be discarded.
    *
-   * @var \Drupal\Core\Entity\RevisionableInterface
+   * @var RevisionableInterface
    */
   protected $entity;

@@ @@
   /**
    * The workspace from which the entity will be discarded.
    *
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $sourceWorkspace;

@@ @@
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;

@@ @@
   /**
    * Constructs a new DiscardEntityForm.
    *
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
    */
   public function __construct(WorkspaceAssociationInterface $workspace_association) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/wse/src/EventSubscriber/WorkspacePublishingEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\EventSubscriber;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Site\Settings;
@@ @@
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;

@@ @@
   /**
    * A config factory for retrieving required config settings.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The workspace revision cleaner queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The published revisions storage.
    *
-   * @var \Drupal\wse\PublishedRevisionStorage
+   * @var PublishedRevisionStorage
    */
   protected $publishedRevisionStorage;

@@ @@
   /**
    * Constructs a new WorkspacePublishingEventSubscriber.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving the site front page configuration.
-   * @param \Drupal\wse\PublishedRevisionStorage $published_revision_storage
+   * @param PublishedRevisionStorage $published_revision_storage
    *   The published revisions storage.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(WorkspaceManagerInterface $workspace_manager, WorkspaceAssociationInterface $workspace_association, ConfigFactoryInterface $config_factory, PublishedRevisionStorage $published_revision_storage, QueueFactory $queue_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/wse/src/Event/WorkspaceRevertEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\workspaces\WorkspaceInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the workspace revert event.
@@ @@
   /**
    * The workspace being reverted.
    *
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $workspace;

@@ @@
   /**
    * Constructs a new WorkspaceRevertEvent.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The workspace.
    * @param array $revert_to_revisions
    *   An array of revision IDs which are being set as default revisions by the
@@ @@
   /**
    * Gets the workspace.
    *
-   * @return \Drupal\workspaces\WorkspaceInterface
+   * @return WorkspaceInterface
    *   The workspace.
    */
   public function getWorkspace() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/wse/src/Event/WorkspacePublishEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\workspaces\WorkspaceInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the workspace publish event.
@@ @@
   /**
    * The workspace being published.
    *
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $workspace;

@@ @@
   /**
    * Constructs a new WorkspacePublishEvent.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The workspace.
    */
   public function __construct(WorkspaceInterface $workspace) {
@@ @@
   /**
    * Gets the workspace.
    *
-   * @return \Drupal\workspaces\WorkspaceInterface
+   * @return WorkspaceInterface
    *   The workspace.
    */
   public function getWorkspace() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/wse/src/Controller/SwitchToLiveController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The workspaces manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspaces.manager service.
    * @param \Drupal\Core\Messenger\MessengerInterface
    *   The messenger service.
@@ @@
   /**
    * Switch to Live and redirect to the previous page.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect to home of the live version of the site.
    */
   public function switchToLive() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/wse/src/Controller/RevisionDiffController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The workspaces manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\workspaces\WorkspaceManagerInterface $workspace_manager
+   * @param WorkspaceManagerInterface $workspace_manager
    *   The workspace manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\diff\DiffLayoutManager $diff_layout_manager
    *   The diff layout service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/wse/src/Access/WorkspaceStateTypeAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * Checks workspace state type access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/wse/modules/wse_scheduler/wse_scheduler.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\workspaces\WorkspaceInterface;
 /**
  * @file
  * Contains hooks for wse_scheduler module.
@@ @@
  *   gets committed.
  */
 function wse_scheduler_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['workspace']->setHandlerClass('views_data', EntityViewsData::class);
 }

@@ @@
  * Additional submit handler for workspaces edit and add forms.
  */
 function wse_scheduler_workspace_form_submit(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+  /** @var WorkspaceInterface $workspace */
   $workspace = $form_state->getFormObject()->getEntity();
   $publish_timestamp = !empty($form_state->getValue('publish_on')[0]['value'])
     ? $form_state->getValue('publish_on')[0]['value']->getTimestamp()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


27) modules/contrib/wse/modules/wse_scheduler/src/ScheduledWorkspacePublisher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse_scheduler;

+use Drupal\workspaces\WorkspaceInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a ScheduledWorkspacePublisher object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
@@ @@
   public function publishScheduledWorkspaces() {
     try {
       $logger = $this->getLogger('wse_scheduler');
-      /** @var \Drupal\workspaces\WorkspaceInterface $workspace */
+      /** @var WorkspaceInterface $workspace */
       foreach ($this->loadScheduledWorkspaces() as $workspace) {

         /** @var WorkspaceScheduledPublishEvent $event */
         $event = $this->eventDispatcher->dispatch(
-          WorkspaceSchedulerEvents::SCHEDULED_PUBLISHING_ELIGIBLE,
-          new WorkspaceScheduledPublishEvent($workspace)
+          new WorkspaceScheduledPublishEvent($workspace),
+          WorkspaceSchedulerEvents::SCHEDULED_PUBLISHING_ELIGIBLE
         );

         if ($event->isPublishingEligible()) {
@@ @@
   /**
    * Loads workspaces which were scheduled and are due for publishing.
    *
-   * @return \Drupal\workspaces\WorkspaceInterface[]
+   * @return WorkspaceInterface[]
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadScheduledWorkspaces() {
     $storage = $this->entityTypeManager->getStorage('workspace');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


28) modules/contrib/wse/modules/wse_scheduler/src/Commands/WseSchedulerCommands.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The scheduled workspace publisher service.
    *
-   * @var \Drupal\wse_scheduler\ScheduledWorkspacePublisher
+   * @var ScheduledWorkspacePublisher
    */
   protected $scheduledWorkspacePublisher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/wse/modules/wse_group_access/wse_group_access.module:70

    ---------- begin diff ----------
@@ @@
 /**
  * Checks whether an account has access to a workspace, based on the groups.
  *
- * @param \Drupal\workspaces\WorkspaceInterface $workspace
+ * @param WorkspaceInterface $workspace
  *   The workspace to check.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   (optional) The user object to check. Defaults to the current user.
  *
  * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


30) modules/contrib/wse/modules/wse_group_access/src/Access/WseGroupAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse_group_access\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * Checks workspace group access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/wse/modules/wse_deploy/src/WorkspaceExporter.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;

@@ @@
   /**
    * The JSON:API serializer.
    *
-   * @var \Drupal\jsonapi\Serializer\Serializer
+   * @var Serializer
    */
   protected $jsonApiSerializer;

@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new WorkspaceExporter instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\workspaces\WorkspaceAssociationInterface $workspace_association
+   * @param WorkspaceAssociationInterface $workspace_association
    *   The workspace association service.
-   * @param \Drupal\jsonapi\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The JSON:API serializer.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, WorkspaceAssociationInterface $workspace_association, Serializer $serializer, ResourceTypeRepositoryInterface $resource_type_repository, FileSystemInterface $file_system, EventDispatcherInterface $event_dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/wse/modules/wse_deploy/src/JsonApiWorkspaceNegotiator.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new JsonApiWorkspaceNegotiator object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/wse/modules/wse_deploy/src/Form/WorkspaceExportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse_deploy\Form;

+use Drupal\wse_deploy\WorkspaceExporter;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\workspaces\Form\WorkspacePublishForm;
 use Drupal\workspaces\WorkspaceInterface;
@@ @@
   /**
    * The workspace exporter service.
    *
-   * @var \Drupal\wse_deploy\WorkspaceExporter
+   * @var WorkspaceExporter
    */
   protected $workspaceExporter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/wse/modules/wse_deploy/src/Event/WorkspaceExportEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse_deploy\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\workspaces\WorkspaceInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the workspace export event.
@@ @@
   /**
    * The workspace being exported.
    *
-   * @var \Drupal\workspaces\WorkspaceInterface
+   * @var WorkspaceInterface
    */
   protected $workspace;

@@ @@
   /**
    * Constructs a new WorkspaceExportEvent.
    *
-   * @param \Drupal\workspaces\WorkspaceInterface $workspace
+   * @param WorkspaceInterface $workspace
    *   The workspace.
    */
   public function __construct(WorkspaceInterface $workspace) {
@@ @@
   /**
    * Gets the workspace.
    *
-   * @return \Drupal\workspaces\WorkspaceInterface
+   * @return WorkspaceInterface
    *   The workspace.
    */
   public function getWorkspace() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/wse/modules/wse_config/wse_config.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Provides a revisionable content storage for config entities.
  */
-
 /**
  * Implements hook_entity_type_alter().
  *
@@ @@
  */
 function wse_config_entity_type_alter(array &$entity_types) {
   if (!empty($entity_types['asset_injector_css'])) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     $entity_types['asset_injector_css']->set('internal', TRUE);
   }
   if (!empty($entity_types['view'])) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     $entity_types['view']->set('internal', TRUE);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


36) modules/contrib/wse/modules/wse_config/src/WseConfigMatcher.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a WseConfigMatcher object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
    *   List of names of ignored configs.
    */
   public function getIgnoredConfigs(array $configs_to_check) {
-    /** @var \Drupal\wse_config\Event\WseConfigOptOutEvent $event */
+    /** @var WseConfigOptOutEvent $event */
     $event = $this->eventDispatcher->dispatch(
       new WseConfigOptOutEvent(),
       WseConfigEvents::WSE_CONFIG_OPT_OUT
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


37) modules/contrib/wse/modules/wse_config/src/WseConfigListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new WseConfigListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\wse_config\WseConfigInterface $entity */
+    /** @var WseConfigInterface $entity */
     $row['id'] = $entity->toLink();
     $row['status'] = $entity->isEnabled() ? $this->t('Enabled') : $this->t('Disabled');
     $row['uid']['data'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/wse/modules/wse_config/src/WseConfigDatabaseStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse_config;

+use Drupal\Core\Config\DatabaseStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The decorated config.storage service.
    *
-   * @var \Drupal\Core\Config\DatabaseStorage
+   * @var DatabaseStorage
    */
   protected $inner;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The workspace ID detector.
    *
-   * @var \Drupal\wse_config\WorkspaceIdDetector
+   * @var WorkspaceIdDetector
    */
   protected $workspaceIdDetector;

@@ @@
   /**
    * The wse config matcher.
    *
-   * @var \Drupal\wse_config\WseConfigMatcher
+   * @var WseConfigMatcher
    */
   protected $configMatcher;

@@ @@
   /**
    * The workspace association service.
    *
-   * @var \Drupal\workspaces\WorkspaceAssociationInterface
+   * @var WorkspaceAssociationInterface
    */
   protected $workspaceAssociation;

@@ @@
   /**
    * Constructs a new WseConfigDatabaseStorage.
    *
-   * @param \Drupal\Core\Config\StorageInterface $inner
+   * @param StorageInterface $inner
    *   The decorated config.storage.active service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\wse_config\WorkspaceIdDetector $workspace_id_detector
+   * @param WorkspaceIdDetector $workspace_id_detector
    *   The workspace ID detector.
-   * @param \Drupal\wse_config\WseConfigMatcher $config_matcher
+   * @param WseConfigMatcher $config_matcher
    *   The wse config matcher.
    * @param string $collection
    *   (optional) The collection to store configuration in. Defaults to the
    *   default collection.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(StorageInterface $inner, EntityTypeManagerInterface $entity_type_manager, WorkspaceIdDetector $workspace_id_detector, WseConfigMatcher $config_matcher, WorkspaceAssociationInterface $workspace_association, $collection = StorageInterface::DEFAULT_COLLECTION) {
     $this->inner = $inner;
@@ @@
    * @param string $name
    *   The name of the entity to be loaded.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|false
+   * @return EntityInterface|false
    *   A loaded entity or false if none was found for given name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getWseConfigEntityByName($name) {
     $entities = $this->getWseConfigEntitiesByNames([$name]);
@@ @@
    * @param array $names
    *   The names of the entities to be loaded.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Loaded entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getWseConfigEntitiesByNames(array $names) {
     return $this->getWseConfigStorage()->loadByProperties(['name' => $names]);
@@ @@
    * @return bool
    *   TRUE if wse_config storage should be used.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function wseConfigStorageIsActive() {
     return $this->workspaceIdDetector->getActiveWorkspaceId();
@@ @@
   /**
    * Shortcut for the entity storage of wse_config entity storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The wse_config entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getWseConfigStorage() {
     return $this->entityTypeManager->getStorage('wse_config');
@@ @@
   /**
    * Writes all config stored in wse_config entities into the inner storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function publishWseConfig() {
     $configs = $this->listAllWseConfigs();
@@ @@
    * @return array
    *   List of config names.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function listAllWseConfigs($prefix = '') {
     $configs = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/wse/modules/wse_config/src/WseConfigCachedStorage.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration storage to be cached.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Constructs a new WseConfigCachedStorage.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   A configuration storage to be cached.
    */
   public function __construct(StorageInterface $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


40) modules/contrib/wse/modules/wse_config/src/WorkspaceIdDetector.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a WorkspaceIdDetector object.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(SessionInterface $session, RequestStack $request_stack, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/wse/modules/wse_config/src/Form/WseConfigForm.php:19

    ---------- begin diff ----------
@@ @@
     $link = $entity->toLink($this->t('View'))->toRenderable();

     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];

     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New wse config %label has been created.', $message_arguments));
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/wse/modules/wse_config/src/EventSubscriber/WseConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse_config\EventSubscriber;

+use Drupal\wse_config\WseConfigDatabaseStorage;
+use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The WseConfigDatabaseStorage configuration storage.
    *
-   * @var \Drupal\wse_config\WseConfigDatabaseStorage
+   * @var WseConfigDatabaseStorage
    */
   protected $wseConfigStorage;

@@ @@
   /**
    * The workspace manager.
    *
-   * @var \Drupal\workspaces\WorkspaceManagerInterface
+   * @var WorkspaceManagerInterface
    */
   protected $workspaceManager;

@@ @@
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\wse_config\WseConfigDatabaseStorage $wse_config_storage
+   * @param WseConfigDatabaseStorage $wse_config_storage
    *   The WseConfigDatabaseStorage configuration storage.
    */
   public function __construct(MessengerInterface $messenger, StorageInterface $wse_config_storage, WorkspaceManagerInterface $workspace_manager, ModuleHandlerInterface $module_handler) {
@@ @@
    *   Workspace safe form event.
    */
   public function onWorkspaceSafeForm(WorkspaceSafeFormEvent $event) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface|NULL $callback_object */
+    /** @var EntityFormInterface|NULL $callback_object */
     $callback_object = $event->getFormState()->getBuildInfo()['callback_object'] ?? NULL;
     if (
       ($callback_object && method_exists($callback_object, 'getEntity') && $callback_object->getEntity() instanceof ConfigEntityInterface)
@@ @@
   /**
    * Deploys wse_config to the active config after a workspace got published.
    *
-   * @param \Drupal\wse\Event\WorkspacePublishEvent $event
+   * @param WorkspacePublishEvent $event
    *   The event object passed with the post publish event.
    */
   public function onWorkspacePostPublish(WorkspacePublishEvent $event) {
@@ @@
   /**
    * Deploys wse_config to the active config after a workspace is reverted.
    *
-   * @param \Drupal\wse\Event\WorkspaceRevertEvent $event
+   * @param WorkspaceRevertEvent $event
    *   The event object passed with the post revert event.
    */
   public function onWorkspacePostRevert(WorkspaceRevertEvent $event) {
@@ @@
   /**
    * Provides a default list of ignored configs.
    *
-   * @param \Drupal\wse_config\Event\WseConfigOptOutEvent $event
+   * @param WseConfigOptOutEvent $event
    *   The wse config opt out event.
    */
   public function onWseConfigOptOut(WseConfigOptOutEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/wse/modules/wse_config/src/Event/WseConfigOptOutEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\wse_config\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines the wse_config opt out event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/wse/modules/wse_config/src/Cache/WseChainedFastBackendFactory.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated cache backend factory.
    *
-   * @var \Drupal\Core\Cache\CacheFactoryInterface
+   * @var CacheFactoryInterface
    */
   protected $innerFactory;

@@ @@
   /**
    * The workspace ID detector.
    *
-   * @var \Drupal\wse_config\WorkspaceIdDetector
+   * @var WorkspaceIdDetector
    */
   protected $workspaceIdDetector;

@@ @@
   /**
    * Constructs the DatabaseBackendFactory object.
    *
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $inner_factory
+   * @param CacheFactoryInterface $inner_factory
    *   The inner cache backend factory.
-   * @param \Drupal\wse_config\WorkspaceIdDetector $workspace_id_detector
+   * @param WorkspaceIdDetector $workspace_id_detector
    *   The workspace ID detector.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The decorated cache backend factory.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The settings object.
    * @param string|null $consistent_service_name
    *   (optional) The service name of the consistent backend factory. Defaults
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


45) modules/contrib/wse/modules/wse_config/src/Cache/WseChainedFastBackend.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The workspace ID detector.
    *
-   * @var \Drupal\wse_config\WorkspaceIdDetector
+   * @var WorkspaceIdDetector
    */
   protected $workspaceIdDetector;

@@ @@
   /**
    * Constructs a ChainedFastBackend object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $consistent_backend
+   * @param CacheBackendInterface $consistent_backend
    *   The consistent cache backend.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $fast_backend
+   * @param CacheBackendInterface $fast_backend
    *   The fast cache backend.
    * @param string $bin
    *   The cache bin for which the object is created.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/wse/modules/wse_config/src/Cache/WseCacheBackendFactory.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated cache backend factory.
    *
-   * @var \Drupal\Core\Cache\CacheFactoryInterface
+   * @var CacheFactoryInterface
    */
   protected $innerFactory;

@@ @@
   /**
    * The workspace ID detector.
    *
-   * @var \Drupal\wse_config\WorkspaceIdDetector
+   * @var WorkspaceIdDetector
    */
   protected $workspaceIdDetector;

@@ @@
   /**
    * Constructs the DatabaseBackendFactory object.
    *
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $inner_factory
+   * @param CacheFactoryInterface $inner_factory
    *   The decorated cache backend factory.
-   * @param \Drupal\wse_config\WorkspaceIdDetector $workspace_id_detector
+   * @param WorkspaceIdDetector $workspace_id_detector
    *   The workspace id detector.
    *
    * @throws \BadMethodCallException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


47) modules/contrib/wse/modules/wse_config/src/Cache/WseCacheBackend.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend returned by the decorated cache backend factory.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $innerBackend;

@@ @@
   /**
    * The workspace ID detector.
    *
-   * @var \Drupal\wse_config\WorkspaceIdDetector
+   * @var WorkspaceIdDetector
    */
   protected $workspaceIdDetector;

@@ @@
   /**
    * Constructs a WseDatabaseBackend object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $inner_backend
+   * @param CacheBackendInterface $inner_backend
    *   The cache backend returned by the decorated cache backend factory.
-   * @param \Drupal\wse_config\WorkspaceIdDetector $workspace_id_detector
+   * @param WorkspaceIdDetector $workspace_id_detector
    *   The workspace id detector.
    */
   public function __construct(CacheBackendInterface $inner_backend, WorkspaceIdDetector $workspace_id_detector) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/wse/src/Plugin/diff/Field/PathFieldBuilder.php" file, 
         due to:                                                                
         "Analyze error: "Class Drupal\diff\FieldDiffBuilderBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/wse/src/Diff/WseDiffEntityParser.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\diff\DiffEntityParser not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 4 nodes were removed                                                 

