diff --git a/field_completeness.module b/field_completeness.module
index 97ccecd..3e6e36a 100644
--- a/field_completeness.module
+++ b/field_completeness.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\field\FieldConfigInterface;
+use Drupal\field_completeness\FieldCompletenessManager;
 /**
  * @file
  * Hook implementations for field_completeness module.
@@ -14,13 +16,13 @@ use Drupal\field\Entity\FieldStorageConfig;
  */
 function field_completeness_form_field_config_edit_form_alter(array &$form, FormStateinterface $form_state) {
   $account = \Drupal::currentUser();
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_state->getFormObject()->getEntity();
   if (!$account->hasPermission('administer field permissions')) {
     return $form;
   }
   $is_allowed_type = FALSE;
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   if ($field->getTargetEntityTypeId() == 'node') {
     $is_allowed_type = $field_completeness_manager->isAllowedContentType($field->getTargetBundle());
@@ -73,7 +75,7 @@ function field_completeness_form_field_config_edit_form_submit(array $form, Form
     $config_original = $config->get($fc_config);
     $config->set($fc_config, $form_state->getValue('fc_include'))->save();
     if ($config_original <> $config->get($fc_config)) {
-      /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+      /** @var FieldCompletenessManager $field_completeness_manager */
       $field_completeness_manager = \Drupal::service('field_completeness.manager');
       $field_completeness_manager->setLatestPercentageToBundle($field->getName(), $field->getTargetBundle());
     }
@@ -109,7 +111,7 @@ function field_completeness_form_field_config_edit_form_submit(array $form, Form
  * Implements hook_ENTITY_TYPE_view() for node entities.
  */
 function field_completeness_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $field_completeness_manager->updateOutline($node);
 }
@@ -118,7 +120,7 @@ function field_completeness_node_view(array &$build, EntityInterface $node, Enti
  * Implements hook_ENTITY_TYPE_update() for node entities.
  */
 function field_completeness_node_update(EntityInterface $node) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $field_completeness_manager->updateOutline($node);
 }
@@ -127,7 +129,7 @@ function field_completeness_node_update(EntityInterface $node) {
  * Implements hook_ENTITY_TYPE_insert() for node entities.
  */
 function field_completeness_node_insert(EntityInterface $node) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $field_completeness_manager->updateOutline($node);
 }
@@ -149,7 +151,7 @@ function field_completeness_theme() {
  * Implements hook_form_alter().
  */
 function field_completeness_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+  /** @var FieldCompletenessManager $field_completeness_manager */
   $field_completeness_manager = \Drupal::service('field_completeness.manager');
   $route_node = $field_completeness_manager->getNode();
   if($route_node) {
diff --git a/src/FieldCompletenessManager.php b/src/FieldCompletenessManager.php
index cfc7849..a622ad9 100644
--- a/src/FieldCompletenessManager.php
+++ b/src/FieldCompletenessManager.php
@@ -18,32 +18,32 @@ class FieldCompletenessManager {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Field completeness storage.
    *
-   * @var \Drupal\field_completeness\FieldCompletenessStorage
+   * @var FieldCompletenessStorage
    */
   public $fieldCompletenessStorage;
 
   /**
    * Constructs a FieldCompletenessManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\Core\language\LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\field_completeness\FieldCompletenessStorage $field_completeness_storage
+   * @param FieldCompletenessStorage $field_completeness_storage
    *   The Field completeness storage.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, FieldCompletenessStorage $field_completeness_storage) {
@@ -71,8 +71,7 @@ class FieldCompletenessManager {
   /**
    * Determines new or existing record and update or add in field completeness database table
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node
-   *
+   * @param EntityInterface $node
    */
   public function updateOutline(EntityInterface $node) {
     $is_allowed_type = $this->isAllowedContentType($node->bundle());
@@ -98,7 +97,7 @@ class FieldCompletenessManager {
 
   /**
    * insert data into Field completeness table
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    */
   public function getNodeData(EntityInterface $node, $lang_code) {
     $values = [];
@@ -114,7 +113,7 @@ class FieldCompletenessManager {
 
   /**
    * Determines included fields and their values
-   * @param \Drupal\Core\Entity\EntityInterface $node
+   * @param EntityInterface $node
    * @param $wrap
    *   'all' - gets all the fields whether its completed or not
    *   'completed' - Gets only completed fields
diff --git a/src/FieldCompletenessStorage.php b/src/FieldCompletenessStorage.php
index a6f0e41..13346a0 100644
--- a/src/FieldCompletenessStorage.php
+++ b/src/FieldCompletenessStorage.php
@@ -12,7 +12,7 @@ class FieldCompletenessStorage {
   /**
    * Database service object
    *
-   * @var Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
diff --git a/src/Form/FieldCompletenessFieldsForm.php b/src/Form/FieldCompletenessFieldsForm.php
index 5861bbf..d14298f 100644
--- a/src/Form/FieldCompletenessFieldsForm.php
+++ b/src/Form/FieldCompletenessFieldsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_completeness\Form;
 
+use Drupal\field_completeness\FieldCompletenessManager;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\field\Entity\FieldConfig;
@@ -73,7 +74,7 @@ class FieldCompletenessFieldsForm extends FormBase {
       }
     }
 
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
 
     foreach($field_completeness_manager->getIncludedFields($node_type) as $field_name) {
@@ -131,7 +132,7 @@ class FieldCompletenessFieldsForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $allowed_types = [];
 
diff --git a/src/Plugin/Block/FieldCompletenessBlock.php b/src/Plugin/Block/FieldCompletenessBlock.php
index 3d80932..12163c4 100644
--- a/src/Plugin/Block/FieldCompletenessBlock.php
+++ b/src/Plugin/Block/FieldCompletenessBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\field_completeness\Plugin\Block;
 
+use Drupal\field_completeness\FieldCompletenessManager;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
@@ -24,7 +25,7 @@ class FieldCompletenessBlock extends BlockBase {
     $build = [];
     $percentage = 0;
     $included_fields = [];
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $node = $field_completeness_manager->getNode();
     if ($node) {
@@ -51,7 +52,7 @@ class FieldCompletenessBlock extends BlockBase {
    */
   public function getPercentage() {
     $percentage = 0;
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $node = $field_completeness_manager->getNode();
     if ($node) {
@@ -64,7 +65,7 @@ class FieldCompletenessBlock extends BlockBase {
    * {@inheritdoc}
    */
   protected function blockAccess(AccountInterface $account) {
-    /** @var \Drupal\field_completeness\FieldCompletenessManager $field_completeness_manager */
+    /** @var FieldCompletenessManager $field_completeness_manager */
     $field_completeness_manager = \Drupal::service('field_completeness.manager');
     $node = $field_completeness_manager->getNode();
     $route_name = \Drupal::routeMatch()->getRouteName();
