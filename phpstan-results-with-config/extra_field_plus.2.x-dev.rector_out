modules/contrib/extra_field_plus/extra_field_plus.module
modules/contrib/extra_field_plus/modules/extra_field_plus_example/src/Plugin/ExtraField/Display/ExampleNodeLabel.php
modules/contrib/extra_field_plus/modules/extra_field_plus_example/src/Plugin/ExtraField/Display/ExampleNodeLabelFormatted.php
modules/contrib/extra_field_plus/src/Controller/ExtraFieldPluginListController.php
modules/contrib/extra_field_plus/src/Plugin/ExtraFieldPlusDisplayBase.php
modules/contrib/extra_field_plus/src/Plugin/ExtraFieldPlusDisplayFormattedBase.php
modules/contrib/extra_field_plus/src/Plugin/ExtraFieldPlusDisplayInterface.php
modules/contrib/extra_field_plus/src/Plugin/ExtraFieldPlusFormManager.php

3 files with changes
====================

1) modules/contrib/extra_field_plus/src/Plugin/ExtraFieldPlusFormManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/extra_field_plus/src/Controller/ExtraFieldPluginListController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The extra fields plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The extra field plugin form manager.
    *
-   * @var \Drupal\extra_field_plus\Plugin\ExtraFieldPlusFormManager
+   * @var ExtraFieldPlusFormManager
    */
   protected $pluginFormManager;

@@ @@
   /**
    * Creates an ExtraFieldPluginListController object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manger
+   * @param PluginManagerInterface $plugin_manger
    *   The extra fields plugin manager.
-   * @param \Drupal\extra_field_plus\Plugin\ExtraFieldPlusFormManager $plugin_form_manger
+   * @param ExtraFieldPlusFormManager $plugin_form_manger
    *   The extra field plugin form manager.
    */
   public function __construct(PluginManagerInterface $plugin_manger, ExtraFieldPlusFormManager $plugin_form_manger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/extra_field_plus/extra_field_plus.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * @file
  * Main file for extra_field_plus module.
@@ @@
   $extra = \Drupal::service('plugin.manager.extra_field_display')
     ->fieldInfo();

-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity_view_display */
+  /** @var EntityViewDisplayInterface $entity_view_display */
   $entity_view_display = \Drupal::entityTypeManager()
     ->getStorage('entity_view_display')
     ->load($entity_type . '.' . $bundle . '.' . $view_mode);
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function extra_field_plus_form_entity_view_display_edit_form_submit(array $form, FormStateInterface $form_state) {
@@ @@
   $view_mode = \Drupal::routeMatch()
     ->getParameter('view_mode_name');

-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+  /** @var EntityViewDisplayInterface $view_display */
   $view_display = \Drupal::entityTypeManager()
     ->getStorage('entity_view_display')
     ->load($entity_type . '.' . $bundle . '.' . $view_mode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

