diff --git a/src/Events/PexelsMediaEntityCreateEvent.php b/src/Events/PexelsMediaEntityCreateEvent.php
index d124b71..4845438 100644
--- a/src/Events/PexelsMediaEntityCreateEvent.php
+++ b/src/Events/PexelsMediaEntityCreateEvent.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\media_pexels\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\FileInterface;
 use Drupal\media\MediaInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Fires when a media entity is created.
@@ -15,14 +15,14 @@ class PexelsMediaEntityCreateEvent extends Event {
   /**
    * The media entity being created.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   protected $mediaEntity;
 
   /**
    * The file that will be used for the media entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;
 
@@ -36,20 +36,20 @@ class PexelsMediaEntityCreateEvent extends Event {
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
   /**
    * PexelsMediaEntityCreateEvent constructor.
    *
-   * @param \Drupal\media\MediaInterface $media_entity
+   * @param MediaInterface $media_entity
    *   The media entity being created.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file that will be used for the media entity.
    * @param array $pexels_data
    *   The file that will be used for the media entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function __construct(MediaInterface $media_entity, FileInterface $file, array $pexels_data, FormStateInterface $form_state) {
@@ -62,7 +62,7 @@ class PexelsMediaEntityCreateEvent extends Event {
   /**
    * Get the media entity.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   A media entity.
    */
   public function getMediaEntity() {
@@ -72,7 +72,7 @@ class PexelsMediaEntityCreateEvent extends Event {
   /**
    * Get the file for the media entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file that will be used for the media entity.
    */
   public function getFile() {
@@ -82,7 +82,7 @@ class PexelsMediaEntityCreateEvent extends Event {
   /**
    * Set the media entity.
    *
-   * @param \Drupal\media\MediaInterface $media_entity
+   * @param MediaInterface $media_entity
    *   The updated media entity.
    */
   public function setMediaEntity(MediaInterface $media_entity) {
@@ -102,7 +102,7 @@ class PexelsMediaEntityCreateEvent extends Event {
   /**
    * Get the form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The current form state.
    */
   public function getFormState() {
@@ -112,7 +112,7 @@ class PexelsMediaEntityCreateEvent extends Event {
   /**
    * Set the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The updated form state.
    */
   public function setFormState(FormStateInterface $form_state) {
diff --git a/src/PexelsClient.php b/src/PexelsClient.php
index efe996c..4390fb9 100644
--- a/src/PexelsClient.php
+++ b/src/PexelsClient.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\media_pexels;
 
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\file\FileInterface;
 use Drupal\Core\File\FileSystemInterface;
 use GuzzleHttp\Client;
 use GuzzleHttp\Exception\ConnectException;
@@ -24,7 +26,7 @@ class PexelsClient {
   /**
    * The http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
@@ -38,16 +40,16 @@ class PexelsClient {
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;
 
   /**
    * PexelsClient constructor.
    *
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   Http client service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
    */
   public function __construct(Client $http_client, FileSystemInterface $file_system) {
@@ -64,7 +66,7 @@ class PexelsClient {
    * @return array
    *   Array with headers and contents elements.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function doRequest(string $url): array {
     $handler_stack = HandlerStack::create(new CurlHandler());
@@ -93,7 +95,7 @@ class PexelsClient {
    * @return bool
    *   True if the test request was successful, false otherwise.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function checkKey(string $api_key): bool {
     $this->setApiKey($api_key);
@@ -151,7 +153,7 @@ class PexelsClient {
    *   Array with headers and contents elements or empty array if something
    *   went wrong.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function search(string $query, int $size = 15, int $page = 1, $orientation = '', $color = ''): array {
     $query_args = [
@@ -180,7 +182,7 @@ class PexelsClient {
    *   Array with headers and contents elements or empty array if something
    *   went wrong.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getPhoto(int $id): array {
     return $this->doRequest(self::API_URL . 'photos/' . $id);
@@ -205,14 +207,14 @@ class PexelsClient {
    *     the filename is unique.
    *   - FileSystemInterface::EXISTS_ERROR: Do nothing and return FALSE.
    *
-   * @return \Drupal\file\FileInterface|false|mixed
+   * @return FileInterface|false|mixed
    *   A string with the path of the resulting file, or FALSE on error.
    */
   public function downloadPexelsFile($url, $destination = NULL, $replace = TRUE) {
     $parsed_url = parse_url($url);
 
     if (!isset($destination)) {
-      $path = file_build_uri($this->fileSystem->basename($parsed_url['path']));
+      $path = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . $this->fileSystem->basename($parsed_url['path'])));
     }
     else {
       if (is_dir($this->fileSystem->realpath($destination))) {
