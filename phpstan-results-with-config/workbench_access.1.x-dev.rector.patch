diff --git a/src/AccessControlHierarchyBase.php b/src/AccessControlHierarchyBase.php
index 421de2a..5b03256 100644
--- a/src/AccessControlHierarchyBase.php
+++ b/src/AccessControlHierarchyBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_access;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -44,21 +45,21 @@ abstract class AccessControlHierarchyBase extends PluginBase implements AccessCo
   /**
    * User section storage.
    *
-   * @var \Drupal\workbench_access\UserSectionStorageInterface
+   * @var UserSectionStorageInterface
    */
   protected $userSectionStorage;
 
   /**
    * Config for module.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -71,11 +72,11 @@ abstract class AccessControlHierarchyBase extends PluginBase implements AccessCo
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\workbench_access\UserSectionStorageInterface $user_section_storage
+   * @param UserSectionStorageInterface $user_section_storage
    *   User section storage.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UserSectionStorageInterface $user_section_storage, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager) {
@@ -244,7 +245,7 @@ abstract class AccessControlHierarchyBase extends PluginBase implements AccessCo
    * {@inheritdoc}
    */
   public static function submitEntity(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\workbench_access\Entity\AccessSchemeInterface $access_scheme */
+    /** @var AccessSchemeInterface $access_scheme */
     foreach (\Drupal::entityTypeManager()->getStorage('access_scheme')->loadMultiple() as $access_scheme) {
       $scheme = $access_scheme->getAccessScheme();
       $hidden_values = $form_state->getValue('workbench_access_disallowed');
diff --git a/src/AccessControlHierarchyInterface.php b/src/AccessControlHierarchyInterface.php
index d2bdafe..38037cb 100644
--- a/src/AccessControlHierarchyInterface.php
+++ b/src/AccessControlHierarchyInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -100,16 +101,16 @@ interface AccessControlHierarchyInterface extends ConfigurableInterface, Depende
   /**
    * Responds to request for node access.
    *
-   * @param \Drupal\workbench_access\Entity\AccessSchemeInterface $scheme
+   * @param AccessSchemeInterface $scheme
    *   Access scheme.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The node being checked. In future this may handle other entity types.
    * @param string $op
    *   The operation, e.g. update, delete.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user requesting access to the node.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   An access result response. By design, this is either ignore or deny.
    *
    * @see workbench_access_entity_access()
@@ -119,7 +120,7 @@ interface AccessControlHierarchyInterface extends ConfigurableInterface, Depende
   /**
    * Retrieves the access control values from an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   A Drupal entity, typically a node or a user.
    *
    * @return array
@@ -130,13 +131,13 @@ interface AccessControlHierarchyInterface extends ConfigurableInterface, Depende
   /**
    * Alters the selection options provided for an access control field.
    *
-   * @param \Drupal\workbench_access\Entity\AccessSchemeInterface $scheme
+   * @param AccessSchemeInterface $scheme
    *   Access scheme.
    * @param array $form
    *   The content entry form to alter.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Active form state data.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object that the form is modifying.
    */
   public function alterForm(AccessSchemeInterface $scheme, array &$form, FormStateInterface &$form_state, ContentEntityInterface $entity);
@@ -185,7 +186,7 @@ interface AccessControlHierarchyInterface extends ConfigurableInterface, Depende
    * @param array &$form
    *   A form array.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state object.
    */
   public static function submitEntity(array &$form, FormStateInterface $form_state);
@@ -196,9 +197,9 @@ interface AccessControlHierarchyInterface extends ConfigurableInterface, Depende
    * This method is invoked by submitEntity() to save items passed by the
    * disallowedOptions() method.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity being edited.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $hidden_values
    *   Hidden values passed by the form, generally from disallowedOptions().
@@ -210,7 +211,7 @@ interface AccessControlHierarchyInterface extends ConfigurableInterface, Depende
    *
    * @param array $data
    *   Views data.
-   * @param \Drupal\workbench_access\Entity\AccessSchemeInterface $scheme
+   * @param AccessSchemeInterface $scheme
    *   Access scheme that wraps this plugin.
    */
   public function viewsData(array &$data, AccessSchemeInterface $scheme);
@@ -233,7 +234,7 @@ interface AccessControlHierarchyInterface extends ConfigurableInterface, Depende
   /**
    * Adds a where clause to a view when using a section filter.
    *
-   * @param \Drupal\workbench_access\Plugin\views\filter\Section $filter
+   * @param Section $filter
    *   The views filter object provided by Workbench Access.
    * @param array $values
    *   An array of values for the current view.
diff --git a/src/Annotation/AccessControlHierarchy.php b/src/Annotation/AccessControlHierarchy.php
index 46d91ec..2acf636 100644
--- a/src/Annotation/AccessControlHierarchy.php
+++ b/src/Annotation/AccessControlHierarchy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_access\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -38,7 +39,7 @@ class AccessControlHierarchy extends Plugin {
   /**
    * The human-readable name of the hierarchy system.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -56,7 +57,7 @@ class AccessControlHierarchy extends Plugin {
    *
    * This will be shown when adding or configuring Workbench Access.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/WorkbenchAccessSections.php b/src/Controller/WorkbenchAccessSections.php
index d362676..724bffd 100644
--- a/src/Controller/WorkbenchAccessSections.php
+++ b/src/Controller/WorkbenchAccessSections.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_access\Controller;
 
+use Drupal\workbench_access\WorkbenchAccessManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Link;
 use Drupal\workbench_access\Entity\AccessSchemeInterface;
@@ -20,32 +21,32 @@ class WorkbenchAccessSections extends ControllerBase implements ContainerInjecti
   /**
    * The Workbench Access manager service.
    *
-   * @var \Drupal\workbench_access\WorkbenchAccessManager
+   * @var WorkbenchAccessManager
    */
   protected $manager;
 
   /**
    * The role section storage service.
    *
-   * @var \Drupal\workbench_access\RoleSectionStorageInterface
+   * @var RoleSectionStorageInterface
    */
   protected $roleSectionStorage;
 
   /**
    * The user section storage service.
    *
-   * @var \Drupal\workbench_access\UserSectionStorageInterface
+   * @var UserSectionStorageInterface
    */
   protected $userSectionStorage;
 
   /**
    * Constructs a new WorkbenchAccessConfigForm.
    *
-   * @param \Drupal\workbench_access\WorkbenchAccessManagerInterface $manager
+   * @param WorkbenchAccessManagerInterface $manager
    *   The Workbench Access hierarchy manager.
-   * @param \Drupal\workbench_access\RoleSectionStorageInterface $role_section_storage
+   * @param RoleSectionStorageInterface $role_section_storage
    *   The role section storage service.
-   * @param \Drupal\workbench_access\UserSectionStorageInterface $user_section_storage
+   * @param UserSectionStorageInterface $user_section_storage
    *   The user section storage service.
    */
   public function __construct(WorkbenchAccessManagerInterface $manager, RoleSectionStorageInterface $role_section_storage, UserSectionStorageInterface $user_section_storage) {
diff --git a/src/Entity/AccessScheme.php b/src/Entity/AccessScheme.php
index 91e9a9e..f929799 100644
--- a/src/Entity/AccessScheme.php
+++ b/src/Entity/AccessScheme.php
@@ -90,7 +90,7 @@ class AccessScheme extends ConfigEntityBase implements AccessSchemeInterface, En
   /**
    * Plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $accessSchemePluginCollection;
 
@@ -120,7 +120,7 @@ class AccessScheme extends ConfigEntityBase implements AccessSchemeInterface, En
   /**
    * Encapsulates the creation of the access scheme plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The access scheme's plugin collection.
    */
   protected function getPluginCollection() {
diff --git a/src/Entity/AccessSchemeInterface.php b/src/Entity/AccessSchemeInterface.php
index 251b261..3e1f52e 100644
--- a/src/Entity/AccessSchemeInterface.php
+++ b/src/Entity/AccessSchemeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_access\Entity;
 
+use Drupal\workbench_access\AccessControlHierarchyInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -20,7 +21,7 @@ interface AccessSchemeInterface extends ConfigEntityInterface {
   /**
    * Gets the access scheme for this configuration entity.
    *
-   * @return \Drupal\workbench_access\AccessControlHierarchyInterface
+   * @return AccessControlHierarchyInterface
    *   Gets the access scheme.
    */
   public function getAccessScheme();
diff --git a/src/Form/AccessSchemeAddForm.php b/src/Form/AccessSchemeAddForm.php
index 6274892..7c8e5b4 100644
--- a/src/Form/AccessSchemeAddForm.php
+++ b/src/Form/AccessSchemeAddForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\workbench_access\Form;
 
+use Drupal\workbench_access\Entity\AccessSchemeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\workbench_access\WorkbenchAccessManagerInterface;
@@ -15,21 +16,21 @@ class AccessSchemeAddForm extends EntityForm {
   /**
    * Access scheme entity.
    *
-   * @var \Drupal\workbench_access\Entity\AccessSchemeInterface
+   * @var AccessSchemeInterface
    */
   protected $entity;
 
   /**
    * Plugin manager.
    *
-   * @var \Drupal\workbench_access\WorkbenchAccessManagerInterface
+   * @var WorkbenchAccessManagerInterface
    */
   protected $pluginManager;
 
   /**
    * Constructs a new AccessSchemeAddForm object.
    *
-   * @param \Drupal\workbench_access\WorkbenchAccessManagerInterface $manager
+   * @param WorkbenchAccessManagerInterface $manager
    *   Plugin manager.
    */
   public function __construct(WorkbenchAccessManagerInterface $manager) {
