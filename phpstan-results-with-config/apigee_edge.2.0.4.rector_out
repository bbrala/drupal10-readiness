modules/contrib/apigee_edge/apigee_edge.api.php
modules/contrib/apigee_edge/apigee_edge.install
modules/contrib/apigee_edge/apigee_edge.module
modules/contrib/apigee_edge/modules/apigee_edge_actions/apigee_edge_actions.module
modules/contrib/apigee_edge/modules/apigee_edge_actions/apigee_edge_actions.tokens.inc
modules/contrib/apigee_edge/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelper.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelperInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeEdgeActionsServiceProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Event/ApigeeEdgeActionsEventInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Event/EdgeEntityEventBase.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Event/EdgeEntityEventEdge.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesAction/LogMessage.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesAction/SystemEmailToUsersOfRole.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityAddMemberEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityAddProductEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityDeleteEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverBase.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityInsertEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityProductEventDeriverBase.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityRemoveMemberEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityRemoveProductEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityUpdateEventDeriver.php
modules/contrib/apigee_edge/modules/apigee_edge_actions/src/TeamMembershipManager.php
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/apigee_edge_apiproduct_rbac.module
modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/src/RoleBasedAccessSettingsBatch.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/apigee_edge_debug.install
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Annotation/DebugMessageFormatter.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/DebugMessageFormatterPluginManager.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Form/ConfigForm.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/HttpClientMiddleware/ApiClientProfiler.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/HttpClientMiddleware/DevelKintApiClientProfiler.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/CurlCommandFormatter.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/FullHttpMessageFormatter.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/SimpleFormatter.php
modules/contrib/apigee_edge/modules/apigee_edge_debug/src/SDKConnector.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.api.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.install
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.module
modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.tokens.inc
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Access/ManageTeamMembersAccess.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Access/TeamAppListByTeamAccess.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerFactory.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerFactoryInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembershipObjectCache.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembershipObjectCacheInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Controller/TeamAppKeysController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Controller/TeamMembersList.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/DefaultTeamPermissionsProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/DynamicTeamPermissionProviderInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactory.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactoryInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactory.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactoryInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamController.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamControllerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormForTeam.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppDeleteForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppEditForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppFormTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamDeleteForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationAcceptForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeclineForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeleteForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationFormBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationResendForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListByTeam.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamInvitationListBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamListBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamRoleListBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Query/TeamAppQuery.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorage.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorage.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorage.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamStorage.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamStorageInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Team.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAccessHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamApp.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppAccessHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppPermissionProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitation.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationAccessControlHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationPermissionProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProviderInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamMemberRole.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamMemberRoleInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamPermissionProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRole.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoleAccessHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoleInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoleRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRouteProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoutingHelperTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamTitleProvider.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamViewBuilder.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEventInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEvents.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamAppFieldConfigListAlterEventSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationQueryAccessSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Exception/ApigeeEdgeTeamsExceptionInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Exception/InvalidArgumentException.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Exception/RuntimeException.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/AddTeamMembersForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/EditTeamMemberForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/RemoveTeamMemberForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAliasForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppAliasForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppAnalyticsForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyAddForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyDeleteForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyFormTrait.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyRevokeForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppBaseFieldConfigForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppCacheForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppCredentialsForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamCacheForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamInvitationForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamMembersFormBase.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamPermissionsForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamRoleDeleteForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamRoleForm.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/ParamConverter/TeamAppNameConverter.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Block/TeamContextSwitcherBlock.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/EntityReferenceSelection/TeamMembersSelection.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/AddAppForTeamLocalAction.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/TeamAppsLocalTask.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/TeamsListMenuLink.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/views/access/TeamPermission.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/views/filter/TeamInvitationStatusFilter.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Routing/TeamAppByNameRouteAlterSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Routing/TeamAppDevelRouteFixerSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Routing/TeamContextSwitcherRouteAlterSubscriber.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Structure/TeamPermission.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamContextManager.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamContextManagerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationNotifierEmail.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationNotifierInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationViewsData.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandlerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMembershipManager.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMembershipManagerInterface.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamPermissionHandler.php
modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamPermissionHandlerInterface.php
modules/contrib/apigee_edge/src/Access/AppAccessCheckByAppName.php
modules/contrib/apigee_edge/src/Access/AppsPageAccessCheck.php
modules/contrib/apigee_edge/src/Annotation/ApigeeFieldStorageFormat.php
modules/contrib/apigee_edge/src/Annotation/EdgeEntityType.php
modules/contrib/apigee_edge/src/CliService.php
modules/contrib/apigee_edge/src/CliServiceInterface.php
modules/contrib/apigee_edge/src/Command/CommandBase.php
modules/contrib/apigee_edge/src/Command/CreateEdgeRoleCommand.php
modules/contrib/apigee_edge/src/Command/DeveloperSyncCommand.php
modules/contrib/apigee_edge/src/Command/DrupalConsoleLog.php
modules/contrib/apigee_edge/src/Command/Util/ApigeeEdgeManagementCliService.php
modules/contrib/apigee_edge/src/Command/Util/ApigeeEdgeManagementCliServiceInterface.php
modules/contrib/apigee_edge/src/Commands/ApigeeEdgeCommands.php
modules/contrib/apigee_edge/src/Connector/GceServiceAccountAuthentication.php
modules/contrib/apigee_edge/src/Connector/HybridAuthentication.php
modules/contrib/apigee_edge/src/Connector/HybridCredentials.php
modules/contrib/apigee_edge/src/Controller/DeveloperAppKeysController.php
modules/contrib/apigee_edge/src/Controller/DeveloperAppViewControllerForDeveloper.php
modules/contrib/apigee_edge/src/Controller/DeveloperSyncController.php
modules/contrib/apigee_edge/src/Controller/EdgeEntityFieldConfigListController.php
modules/contrib/apigee_edge/src/Controller/ErrorPageController.php
modules/contrib/apigee_edge/src/Controller/ExportAnalyticsController.php
modules/contrib/apigee_edge/src/Credentials.php
modules/contrib/apigee_edge/src/CredentialsInterface.php
modules/contrib/apigee_edge/src/Element/ApigeeEntityListElement.php
modules/contrib/apigee_edge/src/Element/ApigeeSecret.php
modules/contrib/apigee_edge/src/Element/AppCredentialElement.php
modules/contrib/apigee_edge/src/Element/AppCredentialProductListElement.php
modules/contrib/apigee_edge/src/Element/StatusPropertyElement.php
modules/contrib/apigee_edge/src/Entity/ApiProduct.php
modules/contrib/apigee_edge/src/Entity/ApiProductInterface.php
modules/contrib/apigee_edge/src/Entity/App.php
modules/contrib/apigee_edge/src/Entity/AppInterface.php
modules/contrib/apigee_edge/src/Entity/AppRouteProvider.php
modules/contrib/apigee_edge/src/Entity/AppTitleProvider.php
modules/contrib/apigee_edge/src/Entity/AppViewBuilder.php
modules/contrib/apigee_edge/src/Entity/AppWarningsChecker.php
modules/contrib/apigee_edge/src/Entity/AppWarningsCheckerInterface.php
modules/contrib/apigee_edge/src/Entity/AttributesAwareFieldableEdgeEntityBase.php
modules/contrib/apigee_edge/src/Entity/AttributesAwareFieldableEdgeEntityBaseInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/ApiProductController.php
modules/contrib/apigee_edge/src/Entity/Controller/ApiProductControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/AppByOwnerController.php
modules/contrib/apigee_edge/src/Entity/Controller/AppController.php
modules/contrib/apigee_edge/src/Entity/Controller/AppControllerBase.php
modules/contrib/apigee_edge/src/Entity/Controller/AppControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/AppCredentialControllerBase.php
modules/contrib/apigee_edge/src/Entity/Controller/AppCredentialControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCache.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwner.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppIdCache.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppNameCacheByOwnerFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppNameCacheByOwnerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperAppCacheFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperAppNameCacheFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperCache.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperIdCache.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityCache.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityCacheInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityIdCache.php
modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityIdCacheInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedAttributesAwareEntityControllerTrait.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedEntityCrudOperationsControllerTrait.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedManagementApiEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedControllerHelperTrait.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedEntityIdListingControllerTrait.php
modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedEntityListingControllerTrait.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppController.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialController.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerFactory.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerFactoryInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperController.php
modules/contrib/apigee_edge/src/Entity/Controller/DeveloperControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/EdgeEntityControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/EntityCacheAwareControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Controller/EntityCacheAwareControllerTrait.php
modules/contrib/apigee_edge/src/Entity/Controller/ManagementApiEdgeEntityControllerProxy.php
modules/contrib/apigee_edge/src/Entity/Controller/OrganizationController.php
modules/contrib/apigee_edge/src/Entity/Controller/OrganizationControllerInterface.php
modules/contrib/apigee_edge/src/Entity/Developer.php
modules/contrib/apigee_edge/src/Entity/DeveloperApp.php
modules/contrib/apigee_edge/src/Entity/DeveloperAppInterface.php
modules/contrib/apigee_edge/src/Entity/DeveloperAppPermissionProvider.php
modules/contrib/apigee_edge/src/Entity/DeveloperAppRouteProvider.php
modules/contrib/apigee_edge/src/Entity/DeveloperCompaniesCache.php
modules/contrib/apigee_edge/src/Entity/DeveloperCompaniesCacheInterface.php
modules/contrib/apigee_edge/src/Entity/DeveloperInterface.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityAccessControlHandler.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityBase.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityInterface.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityPermissionProviderBase.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityRouteProvider.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityTitleProvider.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityType.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityTypeInterface.php
modules/contrib/apigee_edge/src/Entity/EdgeEntityViewBuilder.php
modules/contrib/apigee_edge/src/Entity/Enhancer/AppRouteEnhancer.php
modules/contrib/apigee_edge/src/Entity/FieldableEdgeEntityBase.php
modules/contrib/apigee_edge/src/Entity/FieldableEdgeEntityInterface.php
modules/contrib/apigee_edge/src/Entity/Form/AppCreateForm.php
modules/contrib/apigee_edge/src/Entity/Form/AppDeleteForm.php
modules/contrib/apigee_edge/src/Entity/Form/AppEditForm.php
modules/contrib/apigee_edge/src/Entity/Form/AppForm.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateForm.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateFormBase.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateFormForDeveloper.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppDeleteFormForDeveloper.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppEditForm.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppEditFormForDeveloper.php
modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppFormTrait.php
modules/contrib/apigee_edge/src/Entity/Form/EdgeEntityDeleteForm.php
modules/contrib/apigee_edge/src/Entity/Form/EdgeEntityFormInterface.php
modules/contrib/apigee_edge/src/Entity/Form/FieldableEdgeEntityForm.php
modules/contrib/apigee_edge/src/Entity/Form/FieldableEdgeEntityFormInterface.php
modules/contrib/apigee_edge/src/Entity/ListBuilder/AppListBuilder.php
modules/contrib/apigee_edge/src/Entity/ListBuilder/DeveloperAppListBuilderForDeveloper.php
modules/contrib/apigee_edge/src/Entity/ListBuilder/EdgeEntityListBuilder.php
modules/contrib/apigee_edge/src/Entity/Query/AppQueryBase.php
modules/contrib/apigee_edge/src/Entity/Query/Condition.php
modules/contrib/apigee_edge/src/Entity/Query/DeveloperAppQuery.php
modules/contrib/apigee_edge/src/Entity/Query/DeveloperQuery.php
modules/contrib/apigee_edge/src/Entity/Query/Query.php
modules/contrib/apigee_edge/src/Entity/Query/QueryFactory.php
modules/contrib/apigee_edge/src/Entity/RevisioningWorkaroundTrait.php
modules/contrib/apigee_edge/src/Entity/Storage/ApiProductStorage.php
modules/contrib/apigee_edge/src/Entity/Storage/ApiProductStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/AppStorage.php
modules/contrib/apigee_edge/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageBase.php
modules/contrib/apigee_edge/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperAppStorage.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperAppStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperStorage.php
modules/contrib/apigee_edge/src/Entity/Storage/DeveloperStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/EdgeEntityStorageBase.php
modules/contrib/apigee_edge/src/Entity/Storage/EdgeEntityStorageInterface.php
modules/contrib/apigee_edge/src/Entity/Storage/FieldableEdgeEntityStorageBase.php
modules/contrib/apigee_edge/src/Entity/Storage/FieldableEdgeEntityStorageInterface.php
modules/contrib/apigee_edge/src/Event/AbstractAppCredentialEvent.php
modules/contrib/apigee_edge/src/Event/AppCredentialAddApiProductEvent.php
modules/contrib/apigee_edge/src/Event/AppCredentialCreateEvent.php
modules/contrib/apigee_edge/src/Event/AppCredentialDeleteApiProductEvent.php
modules/contrib/apigee_edge/src/Event/AppCredentialDeleteEvent.php
modules/contrib/apigee_edge/src/Event/AppCredentialGenerateEvent.php
modules/contrib/apigee_edge/src/Event/EdgeEntityFieldConfigListAlterEvent.php
modules/contrib/apigee_edge/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
modules/contrib/apigee_edge/src/EventSubscriber/DeveloperAppFieldConfigListAlterEventSubscriber.php
modules/contrib/apigee_edge/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
modules/contrib/apigee_edge/src/EventSubscriber/EdgeConfigTranslationChangeSubscriber.php
modules/contrib/apigee_edge/src/EventSubscriber/EdgeExceptionSubscriber.php
modules/contrib/apigee_edge/src/Exception/ApigeeEdgeExceptionInterface.php
modules/contrib/apigee_edge/src/Exception/AuthenticationKeyException.php
modules/contrib/apigee_edge/src/Exception/AuthenticationKeyNotFoundException.php
modules/contrib/apigee_edge/src/Exception/AuthenticationKeyValueMalformedException.php
modules/contrib/apigee_edge/src/Exception/DeveloperDoesNotExistException.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversationInvalidValueException.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionAttributeDoesNotExistException.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionException.php
modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionUserNameAlreadyTakenException.php
modules/contrib/apigee_edge/src/Exception/DeveloperUpdateFailedException.php
modules/contrib/apigee_edge/src/Exception/EdgeFieldException.php
modules/contrib/apigee_edge/src/Exception/InvalidArgumentException.php
modules/contrib/apigee_edge/src/Exception/KeyProviderRequirementsException.php
modules/contrib/apigee_edge/src/Exception/OauthTokenStorageException.php
modules/contrib/apigee_edge/src/Exception/RuntimeException.php
modules/contrib/apigee_edge/src/Exception/UserDeveloperConversionException.php
modules/contrib/apigee_edge/src/Exception/UserDeveloperConversionNoStorageFormatterFoundException.php
modules/contrib/apigee_edge/src/Exception/UserDeveloperConversionUserFieldDoesNotExistException.php
modules/contrib/apigee_edge/src/Exception/UserDoesNotExistWithEmail.php
modules/contrib/apigee_edge/src/Exception/UserToDeveloperConversionException.php
modules/contrib/apigee_edge/src/FieldAttributeConverter.php
modules/contrib/apigee_edge/src/FieldAttributeConverterInterface.php
modules/contrib/apigee_edge/src/Form/ApiProductAccessControlForm.php
modules/contrib/apigee_edge/src/Form/ApiProductAliasForm.php
modules/contrib/apigee_edge/src/Form/ApiProductCachingForm.php
modules/contrib/apigee_edge/src/Form/AppAnalyticsFormBase.php
modules/contrib/apigee_edge/src/Form/AppAnalyticsSettingsForm.php
modules/contrib/apigee_edge/src/Form/AppApiKeyAddFormBase.php
modules/contrib/apigee_edge/src/Form/AppApiKeyConfirmFormBase.php
modules/contrib/apigee_edge/src/Form/AppApiKeyDeleteFormBase.php
modules/contrib/apigee_edge/src/Form/AppApiKeyRevokeFormBase.php
modules/contrib/apigee_edge/src/Form/AppCallbackUrlSettingsForm.php
modules/contrib/apigee_edge/src/Form/AppCredentialsConfigForm.php
modules/contrib/apigee_edge/src/Form/AppSettingsForm.php
modules/contrib/apigee_edge/src/Form/AuthenticationForm.php
modules/contrib/apigee_edge/src/Form/BaseFieldConfigFromBase.php
modules/contrib/apigee_edge/src/Form/ConnectionConfigForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppAliasForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppAnalyticsForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppAnalyticsFormForDeveloper.php
modules/contrib/apigee_edge/src/Form/DeveloperAppApiKeyAddForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppApiKeyDeleteForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppApiKeyRevokeForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppBaseFieldConfigForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppCachingForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAppCredentialFormTrait.php
modules/contrib/apigee_edge/src/Form/DeveloperAppCredentialsForm.php
modules/contrib/apigee_edge/src/Form/DeveloperAttributesSettingsForm.php
modules/contrib/apigee_edge/src/Form/DeveloperCachingForm.php
modules/contrib/apigee_edge/src/Form/DeveloperSettingsForm.php
modules/contrib/apigee_edge/src/Form/DeveloperSyncForm.php
modules/contrib/apigee_edge/src/Form/EdgeEntityAliasConfigFormBase.php
modules/contrib/apigee_edge/src/Form/EdgeEntityCacheConfigFormBase.php
modules/contrib/apigee_edge/src/Form/EdgeEntityDisplaySettingsForm.php
modules/contrib/apigee_edge/src/Form/ErrorPageSettingsForm.php
modules/contrib/apigee_edge/src/Job/DeveloperCreate.php
modules/contrib/apigee_edge/src/Job/DeveloperCreateUpdate.php
modules/contrib/apigee_edge/src/Job/DeveloperSync.php
modules/contrib/apigee_edge/src/Job/DeveloperUpdate.php
modules/contrib/apigee_edge/src/Job/EdgeJob.php
modules/contrib/apigee_edge/src/Job/Job.php
modules/contrib/apigee_edge/src/Job/JobCreatorTrait.php
modules/contrib/apigee_edge/src/Job/UserCreate.php
modules/contrib/apigee_edge/src/Job/UserCreateUpdate.php
modules/contrib/apigee_edge/src/Job/UserDeveloperSyncJobTrait.php
modules/contrib/apigee_edge/src/Job/UserUpdate.php
modules/contrib/apigee_edge/src/JobExecutor.php
modules/contrib/apigee_edge/src/JobExecutorInterface.php
modules/contrib/apigee_edge/src/KeyEntityFormEnhancer.php
modules/contrib/apigee_edge/src/MemoryCacheFactory.php
modules/contrib/apigee_edge/src/MemoryCacheFactoryInterface.php
modules/contrib/apigee_edge/src/OauthAuthentication.php
modules/contrib/apigee_edge/src/OauthCredentials.php
modules/contrib/apigee_edge/src/OauthTokenFileStorage.php
modules/contrib/apigee_edge/src/OauthTokenStorageInterface.php
modules/contrib/apigee_edge/src/ParamConverter/ApigeeEdgeLoadUnchangedEntity.php
modules/contrib/apigee_edge/src/ParamConverter/DeveloperAppNameConverter.php
modules/contrib/apigee_edge/src/ParamConverter/DeveloperWithUser.php
modules/contrib/apigee_edge/src/Plugin/ApigeeFieldStorageFormat/CSV.php
modules/contrib/apigee_edge/src/Plugin/ApigeeFieldStorageFormat/JSON.php
modules/contrib/apigee_edge/src/Plugin/Derivative/DynamicAddEntityLocalActions.php
modules/contrib/apigee_edge/src/Plugin/EdgeKeyTypeBase.php
modules/contrib/apigee_edge/src/Plugin/EdgeKeyTypeInterface.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldFormatter/StatusPropertyFormatter.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldType/ApigeeEdgeDeveloperIdFieldItem.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldType/AppCallbackUrlItem.php
modules/contrib/apigee_edge/src/Plugin/Field/FieldWidget/AppCallbackUrlWidget.php
modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatInterface.php
modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatManager.php
modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatManagerInterface.php
modules/contrib/apigee_edge/src/Plugin/KeyInput/ApigeeAuthKeyInput.php
modules/contrib/apigee_edge/src/Plugin/KeyProvider/EnvironmentVariablesKeyProvider.php
modules/contrib/apigee_edge/src/Plugin/KeyProvider/KeyProviderRequirementsBase.php
modules/contrib/apigee_edge/src/Plugin/KeyProvider/PrivateFileKeyProvider.php
modules/contrib/apigee_edge/src/Plugin/KeyProviderRequirementsInterface.php
modules/contrib/apigee_edge/src/Plugin/KeyType/ApigeeAuthKeyType.php
modules/contrib/apigee_edge/src/Plugin/KeyTypeAuthenticationMethodInterface.php
modules/contrib/apigee_edge/src/Plugin/Menu/AddAppForDeveloperLocalAction.php
modules/contrib/apigee_edge/src/Plugin/Menu/AppsListMenuLink.php
modules/contrib/apigee_edge/src/Plugin/QueueWorker/JobQueueWorker.php
modules/contrib/apigee_edge/src/Plugin/Validation/Constraint/DeveloperEmailUnique.php
modules/contrib/apigee_edge/src/Plugin/Validation/Constraint/DeveloperEmailUniqueValidator.php
modules/contrib/apigee_edge/src/Routing/DeveloperAppByNameRouteAlterSubscriber.php
modules/contrib/apigee_edge/src/Routing/EdgeEntityFieldConfigListRouteSubscriber.php
modules/contrib/apigee_edge/src/SDKConnector.php
modules/contrib/apigee_edge/src/SDKConnectorInterface.php
modules/contrib/apigee_edge/src/Structure/DeveloperToUserConversionResult.php
modules/contrib/apigee_edge/src/Structure/UserDeveloperConversionResult.php
modules/contrib/apigee_edge/src/Structure/UserToDeveloperConversionResult.php
modules/contrib/apigee_edge/src/UserDeveloperConverter.php
modules/contrib/apigee_edge/src/UserDeveloperConverterInterface.php

287 files with changes
======================

1) modules/contrib/apigee_edge/src/UserDeveloperConverterInterface.php:49

    ---------- begin diff ----------
@@ @@
    *
    * It modifies only those properties that changed.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The Drupal user entity.
    *
-   * @return \Drupal\apigee_edge\Structure\UserToDeveloperConversionResult
+   * @return UserToDeveloperConversionResult
    *   The result of the conversion.
    */
   public function convertUser(UserInterface $user): UserToDeveloperConversionResult;
@@ @@
    *
    * It modifies only those properties that changed.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   The developer entity.
    *
-   * @return \Drupal\apigee_edge\Structure\DeveloperToUserConversionResult
+   * @return DeveloperToUserConversionResult
    *   The result of the conversion.
    */
   public function convertDeveloper(DeveloperInterface $developer): DeveloperToUserConversionResult;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/apigee_edge/src/UserDeveloperConverter.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Field storage formatter service.
    *
-   * @var \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface
+   * @var FieldStorageFormatManagerInterface
    */
   protected $fieldStorageFormatManager;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Field-attribute converter service.
    *
-   * @var \Drupal\apigee_edge\FieldAttributeConverterInterface
+   * @var FieldAttributeConverterInterface
    */
   protected $fieldAttributeConverter;

@@ @@
   /**
    * UserToDeveloper constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface $field_storage_manager
+   * @param FieldStorageFormatManagerInterface $field_storage_manager
    *   Field storage manager service.
-   * @param \Drupal\apigee_edge\FieldAttributeConverterInterface $field_attribute_converter
+   * @param FieldAttributeConverterInterface $field_attribute_converter
    *   Field name to attribute name converter service.
    */
   public function __construct(ConfigFactory $config_factory, EntityTypeManagerInterface $entity_type_manager, FieldStorageFormatManagerInterface $field_storage_manager, FieldAttributeConverterInterface $field_attribute_converter) {
@@ @@
       $developer = $this->entityTypeManager->getStorage('developer')->load($email);
     }
     if (!$developer) {
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+      /** @var DeveloperInterface $developer */
       $developer = $this->entityTypeManager->getStorage('developer')->create([]);
       $developer->setOwnerId($user->id());
     }
@@ @@
     $users = $user_storage->loadByProperties(['mail' => $developer->id()]);
     $user = $users ? reset($users) : FALSE;

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     if (!$user) {
       // Initialize new user object with minimum data.
       $user = $user_storage->create([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/apigee_edge/src/Structure/UserToDeveloperConversionResult.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Structure;

+use Drupal\apigee_edge\Exception\UserDeveloperConversionException;
 use Drupal\apigee_edge\Entity\DeveloperInterface;

 /**
@@ @@
   /**
    * The result of the conversion.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   private $developer;

@@ @@
   /**
    * UserToDeveloperResult constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   The result of the conversion.
    * @param int $successfully_appliedchanges
    *   Number of successfully applied _necessary_ changes.
    *   (It should not contains redundant changes, ex.: when the property value
    *   has not changed.)
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   Problems occurred meanwhile the conversion (ex.: field validation errors,
    *   etc.)
    */
@@ @@
   /**
    * The created developer from a user.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @return DeveloperInterface
    *   Developer object.
    */
   public function getDeveloper(): DeveloperInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/apigee_edge/src/Structure/UserDeveloperConversionResult.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Structure;

+use Drupal\apigee_edge\Exception\UserDeveloperConversionException;
 /**
  * Base class for user-developer conversion results.
  *
@@ @@
   /**
    * Problems occurred meanwhile the conversion.
    *
-   * @var \Drupal\apigee_edge\Exception\UserDeveloperConversionException[]
+   * @var UserDeveloperConversionException[]
    */
   protected $problems;

@@ @@
    *   Number of successfully applied _necessary_ changes.
    *   (It should not contains redundant changes, ex.: when the property value
    *   has not changed.)
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   Problems occurred meanwhile the conversion (ex.: field validation errors,
    *   etc.)
    */
@@ @@
   /**
    * Problems occurred meanwhile the conversion.
    *
-   * @return \Drupal\apigee_edge\Exception\UserDeveloperConversionException[]
+   * @return UserDeveloperConversionException[]
    *   Array of problems.
    */
   public function getProblems(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/apigee_edge/src/Structure/DeveloperToUserConversionResult.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Structure;

+use Drupal\apigee_edge\Exception\UserDeveloperConversionException;
 use Drupal\user\UserInterface;

 /**
@@ @@
   /**
    * The result of the conversion.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $user;

@@ @@
   /**
    * DeveloperToUserConversionResult constructor.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The result of the conversion.
    * @param int $successfully_appliedchanges
    *   Number of successfully applied _necessary_ changes.
    *   (It should not contains redundant changes, ex.: when the property value
    *   has not changed.)
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   Problems occurred meanwhile the conversion (ex.: field validation errors,
    *   etc.)
    */
@@ @@
   /**
    * The created Drupal user from a developer.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   User object.
    */
   public function getUser(): UserInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/apigee_edge/src/SDKConnectorInterface.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the http client.
    *
-   * @return \Apigee\Edge\ClientInterface
+   * @return ClientInterface
    *   The http client.
    */
   public function getClient(): ClientInterface;
@@ @@
   /**
    * Test connection with the Edge Management Server.
    *
-   * @param \Drupal\key\KeyInterface|null $key
+   * @param KeyInterface|null $key
    *   Key entity to check connection with Edge,
    *   if NULL, then use the stored key.
    *
@@ @@
   /**
    * Returns a pre-configured API client with the provided credentials.
    *
-   * @param \Http\Message\Authentication $authentication
+   * @param Authentication $authentication
    *   Authentication.
    * @param null|string $endpoint
    *   API endpoint, default is https://api.enterprise.apigee.com/v1.
@@ @@
    * @param array $options
    *   Client configuration option.
    *
-   * @return \Apigee\Edge\ClientInterface
+   * @return ClientInterface
    *   Configured API client.
    */
   public function buildClient(Authentication $authentication, ?string $endpoint = NULL, array $options = []): ClientInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/apigee_edge/src/SDKConnector.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge;

+use Http\Client\HttpClient;
 use Apigee\Edge\Api\Management\Controller\OrganizationController;
 use Apigee\Edge\Client;
 use Apigee\Edge\ClientInterface;
@@ @@
   /**
    * The client object.
    *
-   * @var null|\Http\Client\HttpClient
+   * @var null|HttpClient
    */
   private static $client = NULL;

@@ @@
   /**
    * The currently used credentials object.
    *
-   * @var null|\Drupal\apigee_edge\CredentialsInterface
+   * @var null|CredentialsInterface
    */
   private static $credentials = NULL;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The key repository.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The info parser.
    *
-   * @var \Drupal\Core\Extension\InfoParserInterface
+   * @var InfoParserInterface
    */
   protected $infoParser;

@@ @@
   /**
    * The HTTP client factory.
    *
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   private $clientFactory;

@@ @@
   /**
    * Constructs a new SDKConnector.
    *
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   Http client.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   The key repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   Info file parser service.
    */
   public function __construct(ClientFactory $client_factory, KeyRepositoryInterface $key_repository, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, InfoParserInterface $info_parser) {
@@ @@
     if ($authentication === NULL) {
       if (self::$client === NULL) {
         $credentials = $this->getCredentials();
-        /** @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface $key_type */
+        /** @var EdgeKeyTypeInterface $key_type */
         self::$client = $this->buildClient($credentials->getAuthentication(), $credentials->getKeyType()->getEndpoint($credentials->getKey()));
       }

@@ @@
   /**
    * Returns the credentials object used by the API client.
    *
-   * @return \Drupal\apigee_edge\CredentialsInterface
+   * @return CredentialsInterface
    *   The key entity.
    */
   private function getCredentials(): CredentialsInterface {
@@ @@
   /**
    * Changes credentials used by the API client.
    *
-   * @param \Drupal\apigee_edge\CredentialsInterface $credentials
+   * @param CredentialsInterface $credentials
    *   The new credentials object.
    */
   private function setCredentials(CredentialsInterface $credentials) {
@@ @@
   /**
    * Builds credentials, which depends on the KeyType of the key entity.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
-   * @return \Drupal\apigee_edge\CredentialsInterface
+   * @return CredentialsInterface
    *   The credentials.
    */
   private function buildCredentials(KeyInterface $key): CredentialsInterface {
-    /** @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface $key */
+    /** @var EdgeKeyTypeInterface $key */
     if ($key->getKeyType() instanceof EdgeKeyTypeInterface) {
       if ($key->getKeyType()->getInstanceType($key) === EdgeKeyTypeInterface::INSTANCE_TYPE_HYBRID) {
         return new HybridCredentials($key);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/apigee_edge/src/Routing/EdgeEntityFieldConfigListRouteSubscriber.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * AppFieldConfigListUiRouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Alters Apigee Edge entity related field config listing UI routes.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The route build event.
    */
   public function alterRoutes(RouteBuildEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/apigee_edge/src/Plugin/Validation/Constraint/DeveloperEmailUniqueValidator.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * DeveloperEmailUniqueValidator constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     if (empty($items->value) || in_array($items->value, static::$whitelist)) {
       return;
     }
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $items->getEntity();
     // If field's value has not changed do not validate it.
     if (!$entity->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/apigee_edge/src/Plugin/QueueWorker/JobQueueWorker.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Plugin\QueueWorker;

+use Drupal\apigee_edge\JobExecutor;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\apigee_edge\Job\Job;
 use Drupal\apigee_edge\JobExecutorInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The job executor service.
    *
-   * @var \Drupal\apigee_edge\JobExecutor
+   * @var JobExecutor
    */
   protected $executor;

@@ @@
   /**
    * The queue object.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\apigee_edge\JobExecutor $executor */
+    /** @var JobExecutor $executor */
     $executor = $container->get('apigee_edge.job_executor');
-    /** @var \Drupal\Core\Queue\QueueFactory $queueFactory */
+    /** @var QueueFactory $queueFactory */
     $queue_factory = $container->get('queue');
     return new static($configuration, $plugin_id, $plugin_definition, $executor, $queue_factory);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/apigee_edge/src/Plugin/Menu/AddAppForDeveloperLocalAction.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Plugin\Menu;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Menu\LocalActionDefault;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ @@
   /**
    * The developer app entity type definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $developerAppEntity;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider to load routes by name.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/apigee_edge/src/Plugin/KeyTypeAuthenticationMethodInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the authentication method object.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
-   * @return \Http\Message\Authentication
+   * @return Authentication
    *   The authentication object.
    */
   public function getAuthenticationMethod(KeyInterface $key): Authentication;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/apigee_edge/src/Plugin/KeyProviderRequirementsInterface.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Plugin;

+use Drupal\apigee_edge\Exception\KeyProviderRequirementsException;
 use Drupal\key\KeyInterface;

 /**
@@ @@
   /**
    * Checks the requirements of the key provider.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
-   * @throws \Drupal\apigee_edge\Exception\KeyProviderRequirementsException
+   * @throws KeyProviderRequirementsException
    *   Exception thrown when the requirements of the key provider are not
    *   fulfilled.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/apigee_edge/src/Plugin/KeyProvider/PrivateFileKeyProvider.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger, FileSystemInterface $file_system) {
@@ @@
   /**
    * Gets the URI of the file that contains the key value.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the file system service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   The file system service.
    */
   protected function getFileSystem(): FileSystemInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/apigee_edge/src/Plugin/KeyProvider/KeyProviderRequirementsBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Plugin\KeyProvider;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\apigee_edge\Exception\KeyProviderRequirementsException;
 use Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger) {
@@ @@
   /**
    * The method that returns a key's value after pre-requirements got validated.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   A key entity.
    */
   abstract protected function realGetKeyValue(KeyInterface $key);
@@ @@
   /**
    * Gets the logger service.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger service.
    */
   protected function getLogger(): LoggerInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/apigee_edge/src/Plugin/KeyProvider/EnvironmentVariablesKeyProvider.php:101

    ---------- begin diff ----------
@@ @@
   /**
    * Returns an array containing the environment variables by key type.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    * @param bool $required
    *   Returns only the required environment variables.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatManagerInterface.php:33

    ---------- begin diff ----------
@@ @@
    * @param string $field_type
    *   Field type.
    *
-   * @return \Drupal\apigee_edge\Plugin\FieldStorageFormatInterface|null
+   * @return FieldStorageFormatInterface|null
    *   Storage formatter if found. NULL if not.
    */
   public function lookupPluginForFieldType(string $field_type): ?FieldStorageFormatInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/apigee_edge/src/Plugin/FieldStorageFormatManager.php:65

    ---------- begin diff ----------
@@ @@
       $fields = $definition['fields'] ?? [];

       if (in_array($field_type, $fields) || in_array('*', $fields)) {
-        /** @var \Drupal\apigee_edge\Plugin\FieldStorageFormatInterface $instance */
+        /** @var FieldStorageFormatInterface $instance */
         $instance = $this->createInstance($name);
         return $instance;
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/apigee_edge/src/Plugin/Field/FieldType/ApigeeEdgeDeveloperIdFieldItem.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Plugin\Field\FieldType;

+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\TypedData\ComputedItemListTrait;
@@ @@
    * Computes the values for an item list.
    */
   protected function computeValue() {
-    /** @var \Drupal\user\UserInterface $entity */
+    /** @var UserInterface $entity */
     $entity = $this->getEntity();

     // Make sure an email address is set.
@@ @@
     }

     try {
-      /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+      /** @var Developer $developer */
       $developer = Developer::load($entity->getEmail());
       $value = $developer ? $developer->getDeveloperId() : NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/apigee_edge/src/Plugin/EdgeKeyTypeInterface.php:72

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the authentication type.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the API endpoint.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the instance type (public, private or hybrid).
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the API organization.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the API username.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the API password.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the authorization server.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the client ID.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Gets the client secret.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ @@
   /**
    * Return the JSON account key decoded as an array.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return array
@@ @@
    *
    * This applies to portals hosted on Google Compute Engine.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/apigee_edge/src/Plugin/Derivative/DynamicAddEntityLocalActions.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Plugin\Derivative;

+use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\apigee_edge\Entity\EdgeEntityTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/apigee_edge/src/ParamConverter/DeveloperWithUser.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\ParamConverter;

+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\ParamConverter\ParamConverterInterface;
 use Symfony\Component\Routing\Route;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * DeveloperWithUser constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function convert($value, $definition, $name, array $defaults) {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|null $developer */
+    /** @var DeveloperInterface|null $developer */
     $developer = $this->entityTypeManager->getStorage('developer')->load($value);

     if ($developer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/apigee_edge/src/ParamConverter/DeveloperAppNameConverter.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\ParamConverter;

+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\Storage\AppStorage;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * Constructs a DeveloperAppNameParameterConverter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger) {
@@ @@
       return NULL;
     }
     $entity = NULL;
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     // If {user} parameter is before the {app} in the route then
     // entity parameter converter should have already up-casted it to
     // a user object if not then let's try to up-cast it here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/apigee_edge/src/ParamConverter/ApigeeEdgeLoadUnchangedEntity.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DeveloperAppNameParameterConverter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/apigee_edge/src/OauthTokenStorageInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge;

+use Drupal\apigee_edge\Exception\OauthTokenStorageException;
 use Apigee\Edge\HttpClient\Plugin\Authentication\OauthTokenStorageInterface as EdgeOauthTokenStorageInterface;

 /**
@@ @@
    *
    * If a requirement does not fulfilled it throws an exception.
    *
-   * @throws \Drupal\apigee_edge\Exception\OauthTokenStorageException
+   * @throws OauthTokenStorageException
    *   Exception with the unfulfilled requirement.
    */
   public function checkRequirements(): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/apigee_edge/src/OauthTokenFileStorage.php:68

    ---------- begin diff ----------
@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;

@@ @@
   /**
    * OauthTokenFileStorage constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger service.
    */
   public function __construct(ConfigFactoryInterface $config, FileSystemInterface $file_system, LoggerChannelInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/apigee_edge/src/OauthCredentials.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * OauthCredentials constructor.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/apigee_edge/src/OauthAuthentication.php:34

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function authClient(): ClientInterface {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     return $sdk_connector->buildClient(new BasicAuth($this->clientId, $this->clientSecret), $this->getAuthServer());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


29) modules/contrib/apigee_edge/src/MemoryCacheFactoryInterface.php:32

    ---------- begin diff ----------
@@ @@
    * @param string $bin
    *   The cache bin for which a cache backend object should be returned.
    *
-   * @return \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @return MemoryCacheInterface
    *   The memory cache backend object associated with the specified bin.
    */
   public function get($bin): MemoryCacheInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/apigee_edge/src/MemoryCacheFactory.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Instantiated memory cache bins.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   private $bins;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/apigee_edge/src/KeyEntityFormEnhancer.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The OAuth token storage.
    *
-   * @var \Drupal\apigee_edge\OauthTokenStorageInterface
+   * @var OauthTokenStorageInterface
    */
   private $oauthTokenStorage;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;

@@ @@
   /**
    * KeyEntityFormEnhancer constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\OauthTokenStorageInterface $oauth_token_storage
+   * @param OauthTokenStorageInterface $oauth_token_storage
    *   The OAuth token storage.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager serivce.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(SDKConnectorInterface $connector, OauthTokenStorageInterface $oauth_token_storage, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EmailValidatorInterface $email_validator) {
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function alterForm(array &$form, FormStateInterface $form_state): void {
@@ @@
       return;
     }

-    /** @var \Drupal\key\KeyInterface $key */
+    /** @var KeyInterface $key */
     $key = $form_state->getFormObject()->getEntity();

     // Do not alter the confirmation step of the key edit form.
@@ @@
     // Add enhancements to Apigee Edge Authentication keys.
     if ($this->isApigeeKeyTypeAuthForm($form_state)) {

-      /** @var \Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface $key_provider */
+      /** @var KeyProviderRequirementsInterface $key_provider */
       $key_provider = $key->getKeyProvider();

       // Warn user about key provider pre-requirement issues before form
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state): void {
@@ @@
       return;
     }

-    /** @var \Drupal\key\KeyInterface $key */
+    /** @var KeyInterface $key */
     $key = $form_state->getFormObject()->getEntity();

     // Check whether or not we know how to write to this key.
@@ @@

       // Create a temp key for testing without saving it.
       $random = new Random();
-      /** @var \Drupal\key\KeyInterface $test_key */
+      /** @var KeyInterface $test_key */
       $test_key = $this->entityTypeManager->getStorage('key')->create([
         'id' => strtolower($random->name(16)),
         'key_type' => $key->getKeyType()->getPluginID(),
@@ @@
       $test_key = clone $key;
     }

-    /** @var \Drupal\apigee_edge\Plugin\KeyType\ApigeeAuthKeyType $test_key_type */
+    /** @var ApigeeAuthKeyType $test_key_type */
     $test_key_type = $test_key->getKeyType();
     $test_auth_type = $test_key_type->getAuthenticationType($test_key);
     try {
@@ @@
   /**
    * Checks whether a key form is an Apigee Edge authentication form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return bool
@@ @@
     if (!$form_state->getFormObject() instanceof KeyFormBase) {
       FALSE;
     }
-    /** @var \Drupal\key\KeyInterface $key */
+    /** @var KeyInterface $key */
     $key = $form_state->getFormObject()->getEntity();
     // When Ajax reloads the form - for example when Key provider changes -
     // the type of the entity falls back to the default "Authentication" type
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ @@
   /**
    * Checks whether we know how to write to a key.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key to test.
    *
    * @return bool
@@ @@
    *
    * @param \Exception $exception
    *   The thrown exception during form validation.
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The used key during form validation.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The suggestion text to be displayed.
    */
   private function createSuggestion(\Exception $exception, KeyInterface $key): MarkupInterface {
@@ @@
     $suggestion = $this->t('@fail_text', [
       '@fail_text' => $fail_text,
     ]);
-    /** @var \Drupal\apigee_edge\Plugin\KeyType\ApigeeAuthKeyType $key_type */
+    /** @var ApigeeAuthKeyType $key_type */
     $key_type = $key->getKeyType();

     if ($exception instanceof AuthenticationKeyException) {
@@ @@
       // Failed request.
       elseif ($exception->getCode() === 0) {
         if ($exception->getPrevious() instanceof ApiRequestException && $exception->getPrevious()->getPrevious() instanceof NetworkException && $exception->getPrevious()->getPrevious()->getPrevious() instanceof ConnectException) {
-          /** @var \GuzzleHttp\Exception\ConnectException $curl_exception */
+          /** @var ConnectException $curl_exception */
           $curl_exception = $exception->getPrevious()->getPrevious()->getPrevious();
           // Resolving timed out.
           if ($curl_exception->getHandlerContext()['errno'] === CURLE_OPERATION_TIMEDOUT) {
@@ @@
       // Failed request.
       elseif ($exception->getCode() === 0) {
         if ($exception->getPrevious() instanceof NetworkException && $exception->getPrevious()->getPrevious() instanceof ConnectException) {
-          /** @var \GuzzleHttp\Exception\ConnectException $curl_exception */
+          /** @var ConnectException $curl_exception */
           $curl_exception = $exception->getPrevious()->getPrevious();
           // Resolving timed out.
           if ($curl_exception->getHandlerContext()['errno'] === CURLE_OPERATION_TIMEDOUT) {
@@ @@
    *
    * @param \Exception $exception
    *   The thrown exception during form validation.
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The used key during form validation.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/apigee_edge/src/JobExecutorInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Saves a job.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   Job object.
    *
    * @throws \Exception
@@ @@
    * @param string $id
    *   Job id.
    *
-   * @return \Drupal\apigee_edge\Job\Job|null
+   * @return Job|null
    *   Loaded job object or null if it does not exit.
    */
   public function load(string $id): ?Job;
@@ @@
    * @param null|string $tag
    *   Optional tag to filter with.
    *
-   * @return \Drupal\apigee_edge\Job\Job|null
+   * @return Job|null
    *   Job object or null if there is no available.
    */
   public function select(?string $tag = NULL): ?Job;
@@ @@
   /**
    * Executes a job synchronously.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   Job to run.
    * @param bool $update
    *   Whether to save the job into the database after it ran.
@@ @@
    *
    * This puts the job into the "apigee_edge_job" cron queue.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   The job to execute later.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/apigee_edge/src/JobExecutor.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\apigee_edge\Job\Job;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The 'apigee_edge_job' queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * JobExecutor constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time interface.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   Queue factory.
    */
   public function __construct(Connection $connection, TimeInterface $time, QueueFactory $queue_factory) {
@@ @@
   /**
    * Ensures that a job exists with a given status.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   Job object.
    * @param int $status
    *   Job status.
@@ @@
     $jobdata = $query->execute()->fetchField();

     if ($jobdata) {
-      /** @var \Drupal\apigee_edge\Job\Job $job */
+      /** @var Job $job */
       $job = unserialize($jobdata);
       $this->ensure($job, Job::SELECTED);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/apigee_edge/src/Job/UserUpdate.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Job;

+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Exception\DeveloperToUserConversationInvalidValueException;
 use Drupal\apigee_edge\Structure\DeveloperToUserConversionResult;

@@ @@
   protected function beforeUserSave(DeveloperToUserConversionResult $result): void {
     parent::beforeUserSave($result);

-    /** @var \Drupal\user\UserInterface $original_user */
+    /** @var UserInterface $original_user */
     $original_user = \Drupal::entityTypeManager()->getStorage('user')->loadUnchanged($result->getUser()->id());
     // Even if the developer has been blocked in Apigee Edge we should not block
     // its Drupal user automatically when syncing.
@@ @@
     // Rollback a synchronised field's value if the related attribute's value
     // contained an incorrect field value.
     if (count($result->getProblems()) > 0) {
-      /** @var \Drupal\user\UserInterface $original_user */
+      /** @var UserInterface $original_user */
       foreach ($result->getProblems() as $problem) {
         // Do not apply rollback on base fields.
         if ($problem instanceof DeveloperToUserConversationInvalidValueException && !in_array($problem->getTarget(), $this->userDeveloperConverter()::DEVELOPER_PROP_USER_BASE_FIELD_MAP, TRUE)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/apigee_edge/src/Job/UserDeveloperSyncJobTrait.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Logger interface.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   Logger interface.
    */
   protected function logger() : LoggerChannelInterface {
@@ @@
   /**
    * Field-attribute converter service.
    *
-   * @return \Drupal\apigee_edge\FieldAttributeConverterInterface
+   * @return FieldAttributeConverterInterface
    *   Field-attribute converter service.
    */
   protected function fieldAttributeConverter(): FieldAttributeConverterInterface {
@@ @@
   /**
    * User-developer converter service.
    *
-   * @return \Drupal\apigee_edge\UserDeveloperConverterInterface
+   * @return UserDeveloperConverterInterface
    *   User-developer converter service.
    */
   protected function userDeveloperConverter() : UserDeveloperConverterInterface {
@@ @@
   /**
    * Logs all entity conversion problems encountered meanwhile syncing.
    *
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   List of encountered entity conversion problems.
    * @param array $context
    *   Additional context for log messages.
@@ @@
    * TODO Consider to add a translatable operation to message logged by
    * recordMessage() if we actually start using that method something.
    *
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException $problem
+   * @param UserDeveloperConversionException $problem
    *   Entity conversion problem.
    * @param array $context
    *   Additional problem for log messages.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/apigee_edge/src/Job/UserCreateUpdate.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Job;

+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\apigee_edge\Exception\DeveloperToUserConversationInvalidValueException;
@@ @@
    */
   protected function executeRequest() {
     try {
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+      /** @var DeveloperInterface $developer */
       $developer = Developer::load($this->email);
       if ($developer === NULL) {
         throw new DeveloperDoesNotExistException($this->email);
@@ @@
   /**
    * Execute actions before the user gets saved.
    *
-   * @param \Drupal\apigee_edge\Structure\DeveloperToUserConversionResult $result
+   * @param DeveloperToUserConversionResult $result
    *   Result of the entity conversion.
    *
    * @throws \Exception
@@ @@
    *
    * Actions here always gets executed even if the user save has failed.
    *
-   * @param \Drupal\apigee_edge\Structure\DeveloperToUserConversionResult $result
+   * @param DeveloperToUserConversionResult $result
    *   Result of the entity conversion.
    */
   protected function afterUserSave(DeveloperToUserConversionResult $result) : void {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/apigee_edge/src/Job/JobCreatorTrait.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the job executor service.
    *
-   * @return \Drupal\apigee_edge\JobExecutor
+   * @return JobExecutor
    *   The job executor service.
    */
   protected function getExecutor(): JobExecutor {
@@ @@
   /**
    * Schedules a job for execution.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   The job shluld be schedules.
    */
   protected function scheduleJob(Job $job) {
@@ @@
   /**
    * Schedules multiple jobs for execution.
    *
-   * @param \Drupal\apigee_edge\Job\Job[] $jobs
+   * @param Job[] $jobs
    *   The array of the jobs should be scheduled.
    */
   protected function scheduleJobs(array $jobs) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


38) modules/contrib/apigee_edge/src/Job/Job.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Job;

+use Drupal\Component\Uuid\UuidInterface;
 /**
  * Defines the Job class.
  */
@@ @@
    * Job constructor.
    */
   public function __construct() {
-    /** @var \Drupal\Component\Uuid\UuidInterface $uuid_service */
+    /** @var UuidInterface $uuid_service */
     $uuid_service = \Drupal::service('uuid');
     $this->id = $uuid_service->generate();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


39) modules/contrib/apigee_edge/src/Job/EdgeJob.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Job;

+use Drupal\apigee_edge\SDKConnector;
 use Drupal\apigee_edge\SDKConnectorInterface;

 /**
@@ @@
    * The reason why this is not injected, because this class will be serialized,
    * and the service class contains elements that can't be serialized.
    *
-   * @return \Drupal\apigee_edge\SDKConnector
+   * @return SDKConnector
    *   The SDK connector service.
    */
   protected function getConnector(): SDKConnectorInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


40) modules/contrib/apigee_edge/src/Job/DeveloperSync.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Job;

+use Drupal\apigee_edge\Entity\DeveloperInterface;
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\user\Entity\User;

@@ @@
    *
    * Format: mb_strtolower(email) => Developer.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface[]
+   * @var DeveloperInterface[]
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
    */
@@ @@
    *
    * Format: mb_strtolower(mail) => User.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
    */
@@ @@
   /**
    * Loads all Drupal users indexed my their emails.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   Format: mb_strtolower(mail) => User
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
@@ @@
    */
   protected function loadUsers(): array {
     $users = [];
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     foreach (User::loadMultiple() as $user) {
       $email = $user->getEmail();
       if (isset($email)) {
@@ @@
   /**
    * Loads all Apigee Edge developers indexed my their emails.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperInterface[]
+   * @return DeveloperInterface[]
    *   Format: mb_strtolower(email) => Developer
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
@@ @@
     // Edge.
     \Drupal::entityTypeManager()->getStorage('developer')->resetCache();
     $developers = [];
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+    /** @var DeveloperInterface $developer */
     foreach (Developer::loadMultiple() as $developer) {
       $email = $developer->getEmail();
       if ($this->filter && !preg_match($this->filter, $email)) {
@@ @@
     // Update Apigee Edge developers and Drupal users if needed.
     $identical_entities = array_intersect_key($this->edgeDevelopers, $this->drupalUsers);
     foreach ($identical_entities as $clean_email => $entity) {
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+      /** @var DeveloperInterface $developer */
       $developer = $this->edgeDevelopers[$clean_email];
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $this->drupalUsers[$clean_email];

       $last_modified_delta = $developer->getLastModifiedAt()->getTimestamp() - $user->getChangedTime();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/apigee_edge/src/Job/DeveloperCreateUpdate.php:57

    ---------- begin diff ----------
@@ @@
    */
   protected function executeRequest() {
     try {
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = user_load_by_mail($this->email);
       if (!$account) {
         throw new UserDoesNotExistWithEmail($this->email);
@@ @@
   /**
    * Execute actions before the developer gets saved.
    *
-   * @param \Drupal\apigee_edge\Structure\UserToDeveloperConversionResult $result
+   * @param UserToDeveloperConversionResult $result
    *   The result of the entity conversion.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The converted user entity.
    *
    * @throws \Exception
@@ @@
    *
    * Actions here always gets executed even if the developer save has failed.
    *
-   * @param \Drupal\apigee_edge\Structure\UserToDeveloperConversionResult $result
+   * @param UserToDeveloperConversionResult $result
    *   The result of the entity conversion.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The converted user entity.
    */
   protected function afterDeveloperSave(UserToDeveloperConversionResult $result, UserInterface $user) : void {}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/apigee_edge/src/Form/EdgeEntityDisplaySettingsForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Form;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\apigee_edge\Entity\ListBuilder\EdgeEntityListBuilder;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * AppDisplaySettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, ModuleHandlerInterface $module_handler, RouteMatchInterface $route_match) {
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state, $entity_type_id = NULL) {
     $this->entityTypeId = $entity_type_id;

-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->entityTypeManager->getDefinition($entity_type_id);
     $config = $this->configFactory()->get("apigee_edge.display_settings.{$entity_type_id}");
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/apigee_edge/src/Form/EdgeEntityCacheConfigFormBase.php:73

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function invalidateCache(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/apigee_edge/src/Form/DeveloperSyncForm.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $sdkConnector;

@@ @@
   /**
    * Constructs a new DeveloperSyncForm.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector
+   * @param SDKConnectorInterface $sdk_connector
    *   SDK connector service.
    */
   public function __construct(SDKConnectorInterface $sdk_connector) {
@@ @@
    * @param string $route_name
    *   The name of the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to redirect to.
    */
   protected function buildUrl(string $route_name): Url {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/apigee_edge/src/Form/DeveloperAttributesSettingsForm.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Field-attribute converter service.
    *
-   * @var \Drupal\apigee_edge\FieldAttributeConverter
+   * @var FieldAttributeConverter
    */
   private $fieldAttributeConverter;

@@ @@
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;

@@ @@
   /**
    * Field storage formatter service.
    *
-   * @var \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface
+   * @var FieldStorageFormatManagerInterface
    */
   private $fieldStorageFormatManager;

@@ @@
   /**
    * DeveloperAttributesSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface $field_storage_format_manager
+   * @param FieldStorageFormatManagerInterface $field_storage_format_manager
    *   Field storage format manager service.
-   * @param \Drupal\apigee_edge\FieldAttributeConverter $field_attribute_converter
+   * @param FieldAttributeConverter $field_attribute_converter
    *   Field name to attribute name converted service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager, FieldStorageFormatManagerInterface $field_storage_format_manager, FieldAttributeConverter $field_attribute_converter) {
@@ @@
     uasort($fields, [FieldConfig::class, 'sort']);

     $options = $default_values = [];
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     foreach ($fields as $field) {
       $options[$field->getName()] = [
         'field_label' => $field->getLabel(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/apigee_edge/src/Form/DeveloperAppApiKeyAddForm.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The user from route.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/apigee_edge/src/Form/BaseFieldConfigFromBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Form;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * BaseFieldConfigFromBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+    /** @var EntityFormDisplayInterface $display */
     $display = $this->entityTypeManager->getStorage('entity_form_display')->load("{$this->entityType()}.{$this->entityType()}.default");
     if ($display) {
       foreach ($form_state->getValue('table') as $name => $data) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/apigee_edge/src/Form/AuthenticationForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Form;

+use Drupal\key\KeyInterface;
 use Drupal\apigee_edge\Exception\KeyProviderRequirementsException;
 use Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * AuthenticationForm constructor.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $key_storage
+   * @param ConfigEntityStorageInterface $key_storage
    *   The key storage.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigEntityStorageInterface $key_storage, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
@@ @@
     // Loads to the key entity that belongs to the active key or creates a
     // new one _without_ saving it.
     if (!($active_key_id = $config->get('active_key')) || !($active_key = $key_storage->load($active_key_id))) {
-      /** @var \Drupal\key\KeyInterface $active_key */
+      /** @var KeyInterface $active_key */
       $active_key = $key_storage->create([
         'id' => static::DEFAULT_KEY_ENTITY_ID,
         'label' => $this->t('Apigee Edge connection'),
@@ @@
     // Provider selection should be closed by default unless the form rebuild
     // trigger by the provider selector or there is an error with the
     // key provider.
-    /** @var \Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface $key_provider */
+    /** @var KeyProviderRequirementsInterface $key_provider */
     $key_provider = $this->entity->getKeyProvider();
     $key_provider_requirements_error = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/apigee_edge/src/Form/AppSettingsForm.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Form;

+use Drupal\apigee_edge\Entity\ApiProduct;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * AppSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
@@ @@
     $product_list = [];

     try {
-      /** @var \Drupal\apigee_edge\Entity\ApiProduct $product */
+      /** @var ApiProduct $product */
       foreach ($this->entityTypeManager->getStorage('api_product')->loadMultiple() as $product) {
         $product_list[$product->id()] = $product->label();
       }
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The Ajax response.
    *
    * @see https://www.drupal.org/project/drupal/issues/2855139
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/apigee_edge/src/Form/AppApiKeyConfirmFormBase.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The app entity.
    *
-   * @var \Drupal\apigee_edge\Entity\AppInterface
+   * @var AppInterface
    */
   protected $app;

@@ @@
    * @param string $app_name
    *   The name of an app.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface
+   * @return AppCredentialControllerInterface
    *   The app credential controller.
    */
   abstract protected function appCredentialController(string $owner, string $app_name) : AppCredentialControllerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/apigee_edge/src/Form/AppApiKeyAddFormBase.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Form;

+use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Apigee\Edge\Api\Management\Entity\AppCredentialInterface;
 use Apigee\Edge\Structure\CredentialProductInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
@@ @@
   /**
    * The app entity.
    *
-   * @var \Drupal\apigee_edge\Entity\AppInterface
+   * @var AppInterface
    */
   protected $app;

@@ @@
    * @param string $app_name
    *   The name of an app.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface
+   * @return AppCredentialControllerInterface
    *   The app api-key controller.
    */
   abstract protected function appCredentialController(string $owner, string $app_name) : AppCredentialControllerInterface;
@@ @@
   /**
    * Returns the redirect url for the app.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect url.
    */
   abstract protected function getRedirectUrl(): Url;
@@ @@
   /**
    * Returns the list of API product that the user can see on the form.
    *
-   * @return \Drupal\apigee_edge\Entity\ApiProductInterface[]
+   * @return ApiProductInterface[]
    *   Array of API product entities.
    */
   abstract protected function apiProductList(array $form, FormStateInterface $form_state): array;
@@ @@
   /**
    * Helper to find API products based on the recently active API key.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
-   * @return \Apigee\Edge\Structure\CredentialProductInterface[]|array
+   * @return CredentialProductInterface[]|array
    *   An array of API products.
    */
   protected function getApiProductsForApp(AppInterface $app): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/apigee_edge/src/Form/AppAnalyticsSettingsForm.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Environment controller object.
    *
-   * @var \Apigee\Edge\Api\Management\Controller\EnvironmentController
+   * @var EnvironmentController
    */
   protected $environmentController;

@@ @@
   /**
    * Constructs a new DeveloperAppAnalyticsSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector
+   * @param SDKConnectorInterface $sdk_connector
    *   The SDK connector service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SDKConnectorInterface $sdk_connector) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/apigee_edge/src/Form/AppAnalyticsFormBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Api\Management\Controller\StatsController;
 use Apigee\Edge\Api\Management\Query\StatsQuery;
 use Drupal\apigee_edge\Entity\AppInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $connector;

@@ @@
   /**
    * The PrivateTempStore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $store;

@@ @@
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * Constructs a new AppAnalyticsFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector
+   * @param SDKConnectorInterface $sdk_connector
    *   The SDK connector service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempstore_private
+   * @param PrivateTempStoreFactory $tempstore_private
    *   The private temp store factory.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SDKConnectorInterface $sdk_connector, PrivateTempStoreFactory $tempstore_private, UrlGeneratorInterface $url_generator) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity that analytics data gets displayed.
    * @param string $metric
    *   The filter parameter.
@@ @@
   /**
    * Retrieves the app analytics for the given criteria.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity that analytics data gets displayed.
    * @param string $metric
    *   The filter parameter.
@@ @@
    * @return array
    *   The raw analytics API response for the given criteria.
    *
-   * @throws \Moment\MomentException
+   * @throws MomentException
    *   If provided date values are invalid.
-   * @throws \Apigee\Edge\Exception\ApiException
+   * @throws ApiException
    *   If analytics query fails.
    */
   final protected function getAnalytics(AppInterface $app, string $metric, string $since, string $until, string $environment): array {
@@ @@
   /**
    * Returns the analytics filter criteria that limits the result by app owner.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/apigee_edge/src/Form/ApiProductAccessControlForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Form;

+use Drupal\user\RoleInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ProductAccessControlForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       '#tree' => TRUE,
     ];

-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     foreach ($role_storage->loadMultiple() as $role_name => $role) {
       // Retrieve role names for columns.
       $role_names[$role_name] = $role->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/apigee_edge/src/FieldAttributeConverterInterface.php:55

    ---------- begin diff ----------
@@ @@
    *   The entity type.
    * @param string $field_name
    *   Name of a field in Drupal.
-   * @param \Apigee\Edge\Structure\AttributesProperty $attributes
+   * @param AttributesProperty $attributes
    *   Attribute property that contains the attributes on an entity.
    *
    * @return mixed|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


56) modules/contrib/apigee_edge/src/FieldAttributeConverter.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $config;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;

@@ @@
   /**
    * The field formatter service.
    *
-   * @var \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface
+   * @var FieldStorageFormatManagerInterface
    */
   private $formatManager;

@@ @@
   /**
    * FieldNameToAttributeNameConverter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface $format_manager
+   * @param FieldStorageFormatManagerInterface $format_manager
    *   The field formatter service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, FieldStorageFormatManagerInterface $format_manager, ConfigFactoryInterface $config) {
@@ @@
    * @param string $field_name
    *   Name of the field to look up the plugin for.
    *
-   * @return \Drupal\apigee_edge\Plugin\FieldStorageFormatInterface|null
+   * @return FieldStorageFormatInterface|null
    *   Null if not found.
    */
   protected function findFieldStorageFormatter(string $entity_type, string $field_name): ?FieldStorageFormatInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


57) modules/contrib/apigee_edge/src/Exception/UserToDeveloperConversionException.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * User object.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * UserToDeveloperConversionException constructor.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User object.
    * @param string $message
    *   The Exception message, available replacements: @user (email).
@@ @@
   /**
    * Returns the problematic user object.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   User object.
    */
   public function getUser(): UserInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/apigee_edge/src/Exception/UserDeveloperConversionNoStorageFormatterFoundException.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Type of field with no formatter available.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $fieldDefinition;

@@ @@
   /**
    * UserDeveloperConversionNoStorageFormatterFoundException constructor.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    * @param string $message
    *   Exception message.
@@ @@
   /**
    * Returns the definition of the problematic field.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   Defition of the field.
    */
   public function getFieldDefinition(): FieldDefinitionInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/apigee_edge/src/Exception/KeyProviderRequirementsException.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The TranslatableMarkup object containing a message to render on the UI.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $translatableMarkupMessage;

@@ @@
    *
    * @param string $message
    *   The Exception message.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $translatable_markup_message
+   * @param TranslatableMarkup $translatable_markup_message
    *   The translatable markup object of the exception to display on the pages
    *   where the exception is caught.
    * @param int|null $code
@@ @@
   /**
    * Gets the translatable markup object.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translatable markup object.
    */
   public function getTranslatableMarkupMessage(): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionUserNameAlreadyTakenException.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * DeveloperToUserConversionUserNameAlreadyTakenException constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer entity.
-   * @param \Symfony\Component\Validator\ConstraintViolationInterface $violation
+   * @param ConstraintViolationInterface $violation
    *   Constraint violation.
    * @param string $message
    *   Exception message.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionException.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Developer object.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   protected $developer;

@@ @@
   /**
    * DeveloperToUserConversionException constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer object.
    * @param string $message
    *   The Exception message.
@@ @@
   /**
    * Returns the problematic developer.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @return DeveloperInterface
    *   Developer object.
    */
   public function getDeveloper(): DeveloperInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversionAttributeDoesNotExistException.php:38

    ---------- begin diff ----------
@@ @@
    *
    * @param string $attribute_name
    *   Name of the attribute.
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer object.
    * @param string $message
    *   The Exception message.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/apigee_edge/src/Exception/DeveloperToUserConversationInvalidValueException.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Constraint violation.
    *
-   * @var \Symfony\Component\Validator\ConstraintViolationInterface
+   * @var ConstraintViolationInterface
    */
   protected $violation;

@@ @@
    *   The source property on the developer.
    * @param string $target
    *   Name of the destination field on the user.
-   * @param \Symfony\Component\Validator\ConstraintViolationInterface $violation
+   * @param ConstraintViolationInterface $violation
    *   Constraint violation.
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer entity.
    * @param string $message
    *   Exception message.
@@ @@
   /**
    * Constraint violation.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationInterface
+   * @return ConstraintViolationInterface
    *   Constraint violation.
    */
   public function getViolation(): ConstraintViolationInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/apigee_edge/src/EventSubscriber/EdgeExceptionSubscriber.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * The logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Class Resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * EdgeExceptionSubscriber constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    * @param array $main_content_renderers
    *   The available main content renderer service IDs, keyed by format.
@@ @@
   /**
    * Displays the Edge connection error page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception event.
    */
   public function onException(ExceptionEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/apigee_edge/src/EventSubscriber/EdgeConfigTranslationChangeSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\EventSubscriber;

+use Drupal\language\Config\LanguageConfigOverride;
 use Drupal\language\Config\LanguageConfigOverrideCrudEvent;
 use Drupal\language\Config\LanguageConfigOverrideEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * Clears caches when an Edge entity type's config translation gets updated.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The event object.
    */
   public function clearCache(LanguageConfigOverrideCrudEvent $event) {
-    /** @var \Drupal\language\Config\LanguageConfigOverride $override */
+    /** @var LanguageConfigOverride $override */
     $override = $event->getLanguageConfigOverride();
     if (preg_match('/^apigee_edge/', $override->getName())) {
       // It is easier to do that rather than just trying to figure our all
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


66) modules/contrib/apigee_edge/src/EventSubscriber/DeveloperStatusWarningSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\EventSubscriber;

+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
 use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;

@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * DeveloperStatusWarningSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translations service.
    */
   public function __construct(AccountInterface $current_user, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, TranslationInterface $string_translation) {
@@ @@
   /**
    * Display's a warning message if developer's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event) {
@@ @@
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos(($this->routeMatch->getRouteName() ?? ''), 'entity.developer_app.') === 0) {
       $developer_storage = $this->entityTypeManager->getStorage('developer');
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|NULL $developer */
+      /** @var DeveloperInterface|NULL $developer */
       $developer = NULL;
-      /** @var \Drupal\Core\Session\AccountInterface|NULL $account */
+      /** @var AccountInterface|NULL $account */
       $account = NULL;
-      /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface $app */
+      /** @var DeveloperAppInterface $app */
       $app = $this->routeMatch->getParameter('developer_app') ?? $this->routeMatch->getParameter('app');
       if ($app) {
-        /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+        /** @var DeveloperInterface $developer */
         $developer = $developer_storage->load($app->getDeveloperId());
         $account = $developer->getOwner();
       }
       // Taking special care of the "Apps" page.
       elseif ($this->routeMatch->getRouteName() === 'entity.developer_app.collection_by_developer') {
-        /** @var \Drupal\Core\Session\AccountInterface $account */
+        /** @var AccountInterface $account */
         $account = $this->routeMatch->getParameter('user');
         $developer = $developer_storage->load($account->getEmail());
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


67) modules/contrib/apigee_edge/src/EventSubscriber/DeveloperAppFieldConfigListAlterEventSubscriber.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   private $formBuilder;

@@ @@
   /**
    * DeveloperAppFieldConfigListAlterEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(FormBuilderInterface $form_builder) {
@@ @@
   /**
    * Alters the field config UI page.
    *
-   * @param \Drupal\apigee_edge\Event\EdgeEntityFieldConfigListAlterEvent $event
+   * @param EdgeEntityFieldConfigListAlterEvent $event
    *   The field config list alter event.
    */
   public function alterPage(EdgeEntityFieldConfigListAlterEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


68) modules/contrib/apigee_edge/src/EventSubscriber/ApiProductEntityAccessCacheReset.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * ApiProductEntityAccessCacheReset constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Contracts\EventDispatcher\Event $event
+   * @param Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


69) modules/contrib/apigee_edge/src/Event/AppCredentialDeleteApiProductEvent.php:49

    ---------- begin diff ----------
@@ @@
    *   Company name or developer id (email) depending on the appType.
    * @param string $app_name
    *   Name of the app.
-   * @param \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential
+   * @param AppCredentialInterface $credential
    *   The app credential that has been created.
    * @param string $api_product
    *   Name of the API product that has been removed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/apigee_edge/src/Event/AppCredentialAddApiProductEvent.php:49

    ---------- begin diff ----------
@@ @@
    *   Company name or developer id (email) depending on the appType.
    * @param string $app_name
    *   Name of the app.
-   * @param \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential
+   * @param AppCredentialInterface $credential
    *   The app credential that has been created.
    * @param array $new_products
    *   Array of API product names that has just been added to the key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/apigee_edge/src/Event/AbstractAppCredentialEvent.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * App credential.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\AppCredentialInterface
+   * @var AppCredentialInterface
    */
   private $credential;

@@ @@
    *   Company name or developer id (UUID by default) depending on the appType.
    * @param string $app_name
    *   Name of the app.
-   * @param \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential
+   * @param AppCredentialInterface $credential
    *   The app credential that has been created.
    */
   public function __construct(string $app_type, string $owner_id, string $app_name, AppCredentialInterface $credential) {
@@ @@
   /**
    * Returns the app credential.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\AppCredentialInterface
+   * @return AppCredentialInterface
    *   The app credential.
    */
   public function getCredential(): AppCredentialInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/apigee_edge/src/Entity/Storage/FieldableEdgeEntityStorageBase.php:161

    ---------- begin diff ----------
@@ @@
    * @see \Drupal\Core\Entity\ContentEntityStorageBase::doCreate()
    */
   protected function doCreate(array $values) {
-    /** @var \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity */
+    /** @var FieldableEdgeEntityInterface $entity */
     $entity = parent::doCreate($values);
     $this->initFieldValues($entity, $values);
     return $entity;
@@ @@
   /**
    * Initializes field values.
    *
-   * @param \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity
+   * @param FieldableEdgeEntityInterface $entity
    *   An entity object.
    * @param array $values
    *   (optional) An associative array of initial field values keyed by field
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/apigee_edge/src/Entity/Storage/EdgeEntityStorageBase.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The system time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $systemTime;

@@ @@
   /**
    * Constructs an EdgeEntityStorageBase instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time) {
@@ @@
   /**
    * Returns the wrapped controller instance used by this storage.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\EdgeEntityControllerInterface
+   * @return EdgeEntityControllerInterface
    *   The entity controller interface with CRUDL capabilities.
    */
   abstract protected function entityController(): EdgeEntityControllerInterface;
@@ @@
    * @param callable $action
    *   Communication to perform.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   The converted exception.
    */
   protected function withController(callable $action) {
@@ @@
    * @return \Drupal\Core\Entity\EntityInterface[]
    *   Array of entities from the storage.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function getFromStorage(array $ids = NULL) {
     $entities = [];
@@ @@
    * @return array
    *   Array of Drupal entities.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   If Drupal entity ids could not be resolved.
    */
   final protected function processLoadedEntities(?array $ids, array $sdk_entities): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/apigee_edge/src/Entity/Storage/DeveloperStorage.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Storage;

+use Drupal\apigee_edge\Entity\DeveloperInterface;
+use Drupal\apigee_edge\Entity\Developer;
 use Apigee\Edge\Api\Management\Controller\DeveloperControllerInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Entity\Controller\CachedManagementApiEdgeEntityControllerProxy;
@@ @@
   /**
    * Developer company membership cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompanies;

@@ @@
   /**
    * Constructs an DeveloperStorage instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Apigee\Edge\Api\Management\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   Developer company membership cache.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, DeveloperControllerInterface $developer_controller, ConfigFactoryInterface $config, DeveloperCompaniesCacheInterface $developer_companies_cache) {
@@ @@
         // It could be an integer if developer UUID has been used as as an id
         // instead of the email address.
         if (is_object($item)) {
-          /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $item */
+          /** @var DeveloperInterface $item */
           $carry[$item->getDeveloperId()] = $item;
         }
         return $carry;
@@ @@
    * {@inheritdoc}
    */
   protected function doSave($id, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $developer_status = $entity->getStatus();
     $result = parent::doSave($id, $entity);

@@ @@
    * {@inheritdoc}
    */
   protected function getPersistentCacheTags(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\Developer $entity */
+    /** @var Developer $entity */
     $cache_tags = parent::getPersistentCacheTags($entity);
     $cache_tags = $this->sanitizeCacheTags($entity->id(), $cache_tags);
     // Create tags by developerId (besides email address).
@@ @@
     // instead of the email address. This way we can load a developer from
     // cache by using both ids.
     foreach ($entities as $entity) {
-      /** @var \Drupal\apigee_edge\Entity\Developer $entity */
+      /** @var Developer $entity */
       $this->cacheBackend->set($this->buildCacheId($entity->getDeveloperId()), $entity, $this->getPersistentCacheExpiration(), $this->getPersistentCacheTags($entity));
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/apigee_edge/src/Entity/Storage/DeveloperAppStorageInterface.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Storage;

+use Drupal\apigee_edge\Entity\DeveloperApp;
 /**
  * Defines an interface for developer app entity storage classes.
  */
@@ @@
    * @param string $developer_id
    *   Developer id (UUID) or email address of a developer.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperApp[]
+   * @return DeveloperApp[]
    *   The array of the developer apps of the given developer.
    */
   public function loadByDeveloper(string $developer_id): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


76) modules/contrib/apigee_edge/src/Entity/Storage/DeveloperAppStorage.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Storage;

+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Entity\Controller\AppControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface;
@@ @@
   /**
    * The app entity controller for unified CRUDL operations.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\EdgeEntityControllerInterface
+   * @var EdgeEntityControllerInterface
    */
   private $appEntityController;

@@ @@
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;

@@ @@
   /**
    * DeveloperAppStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $developer_app_controller_factory
+   * @param DeveloperAppControllerFactoryInterface $developer_app_controller_factory
    *   The developer app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, DeveloperAppControllerFactoryInterface $developer_app_controller_factory, AppControllerInterface $app_controller, ConfigFactoryInterface $config, EmailValidatorInterface $email_validator) {
@@ @@
     // gets deleted then _all_ its cached developer app data gets purged along
     // with it.
     $cache_tags = ["developer:{$app->getAppOwner()}"];
-    /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface $app */
+    /** @var DeveloperAppInterface $app */
     // Add the owner of the app (Drupal user id) to ensure when the Drupal user
     // gets deleted then _all_ its cached developer app data gets purged along
     // with it. (The additional cache tag by developer id should be enough
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/apigee_edge/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Storage;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Apigee\Edge\Entity\Property\AttributesPropertyInterface;
 /**
  * Storage for fieldable Edge entities that supports attributes.
  */
@@ @@
    * {@inheritdoc}
    */
   public function countFieldData($storage_definition, $as_bool = FALSE) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition */
+    /** @var FieldStorageDefinitionInterface $storage_definition */
     $count = 0;
-    /** @var \Apigee\Edge\Entity\Property\AttributesPropertyInterface[] $entities */
+    /** @var AttributesPropertyInterface[] $entities */
     $entities = $this->loadMultiple();
     foreach ($entities as $entity) {
       if ($entity->getAttributeValue($storage_definition->getName()) !== NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/apigee_edge/src/Entity/Storage/AppStorage.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * The app controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface
+   * @var AppControllerInterface
    */
   protected $appController;

@@ @@
   /**
    * AppStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, AppControllerInterface $app_controller) {
@@ @@
    * @param string $uuid
    *   App UUID.
    *
-   * @return \Drupal\apigee_edge\Entity\AppInterface|null
+   * @return AppInterface|null
    *   The unchanged entity, or NULL if the entity cannot be loaded.
    *
    * @TODO: this method should be also available in the AppStorageInterface, but
@@ @@
    * {@inheritdoc}
    */
   final protected function getPersistentCacheTags(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $cache_tags = parent::getPersistentCacheTags($entity);
     return array_merge($cache_tags, $this->getCacheTagsByOwner($entity));
   }
@@ @@
   /**
    * Generates cache tags for an app.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   App entity.
    *
    * @return array
@@ @@
    *   Array of cache tags.
    */
   private function getPersistentCacheTagsForAppName(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $cache_tags = array_merge([
       "{$this->entityTypeId}",
       "{$this->entityTypeId}:app_names",
@@ @@
    * when app's owner gets deleted the related app cache entries gets
    * invalidated as well.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return array
@@ @@
       return;
     }

-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     foreach ($entities as $entity) {
       // Create an additional cache entry for each app that stores the app id
       // for each developerId or company (team) name + app name combinations.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/apigee_edge/src/Entity/Storage/ApiProductStorage.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The API product controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface
+   * @var ApiProductControllerInterface
    */
   private $apiProductController;

@@ @@
   /**
    * Constructs an APIProductStorage instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, ApiProductControllerInterface $api_product_controller, ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/apigee_edge/src/Entity/Query/QueryFactory.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Query;

+use Drupal\apigee_edge\Entity\EdgeEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a QueryFactory object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function get(EntityTypeInterface $entity_type, $conjunction) {
-    /** @var \Drupal\apigee_edge\Entity\EdgeEntityTypeInterface $entity_type */
+    /** @var EdgeEntityTypeInterface $entity_type */
     $rc = new \ReflectionClass($entity_type->getQueryClass());
     return $rc->newInstance($entity_type, $conjunction, $this->namespaces, $this->entityTypeManager);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


81) modules/contrib/apigee_edge/src/Entity/Query/Query.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Query;

+use Drupal\apigee_edge\Entity\EdgeEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a Query object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
@@ @@
    *   - OR: at least one of the conditions on the query need to match.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, string $conjunction, array $namespaces, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   protected function getEntityIdProperties(): array {
     $storage = $this->entityTypeManager->getStorage($this->entityTypeId);
-    /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+    /** @var EdgeEntityInterface $entity */
     $entity = $storage->create();
     return $entity::uniqueIdProperties();
   }
@@ @@
   /**
    * Loads entities from the entity storage for querying.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of matching entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getFromStorage(): array {
     $storage = $this->entityTypeManager->getStorage($this->entityTypeId);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/apigee_edge/src/Entity/Query/DeveloperAppQuery.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Query;

+use Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   protected function appByOwnerController(string $owner): AppByOwnerControllerInterface {
-    /** @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $dev_app_controller_factory */
+    /** @var DeveloperAppControllerFactoryInterface $dev_app_controller_factory */
     $dev_app_controller_factory = \Drupal::service('apigee_edge.controller.developer_app_controller_factory');
     return $dev_app_controller_factory->developerAppController($owner);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/apigee_edge/src/Entity/Query/AppQueryBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Query;

+use Drupal\apigee_edge\Entity\Storage\AppStorage;
+use Apigee\Edge\Api\Management\Entity\AppInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
    * @param string $owner
    *   The owner an of an app.
    *
-   * @return \Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface
+   * @return AppByOwnerControllerInterface
    *   The app by owner controller instance for the owner.
    */
   abstract protected function appByOwnerController(string $owner) : AppByOwnerControllerInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function getFromStorage(): array {
-    /** @var \Drupal\apigee_edge\Entity\Storage\AppStorage $storage */
+    /** @var AppStorage $storage */
     $storage = $this->entityTypeManager->getStorage($this->entityTypeId);
     $ids = NULL;
     $app_owner_in_conditions = NULL;
@@ @@
         }

         try {
-          /** @var \Apigee\Edge\Api\Management\Entity\AppInterface $entity */
+          /** @var AppInterface $entity */
           $entity = $this->appByOwnerController($app_owner_in_conditions)->load($app_name);
           // We have to use the storage because it ensures that next time the
           // app can be found in the cache (and various other things as well).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/apigee_edge/src/Entity/ListBuilder/EdgeEntityListBuilder.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\ListBuilder;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * EdgeEntityListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory = NULL) {
     parent::__construct($entity_type, $entity_type_manager->getStorage($entity_type->id()));
@@ @@
   /**
    * Builds an entity query used by entity listing.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query.
    */
   protected function buildEntityIdQuery(): QueryInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/apigee_edge/src/Entity/ListBuilder/DeveloperAppListBuilderForDeveloper.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\ListBuilder;

+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * DeveloperAppListBuilderForDeveloper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $render
+   * @param RendererInterface $render
    *   The render.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Currently logged-in user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, RendererInterface $render, RequestStack $request_stack, TimeInterface $time, AccountInterface $current_user, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory = NULL) {
@@ @@
    * This is enforced for the 'apigee_edge.user.apps' route with the
    * '_user_is_logged_in' requirement.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Returns a redirect to the Apps of the currently logged in user.
    */
   public function appsPage(): RedirectResponse {
@@ @@
   /**
    * Returns the title of the "developer app list by user" page.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title of the page.
    */
   public function pageTitle(): TranslatableMarkup {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->routeMatch->getParameter('user');
     if ($account && $account->id() != $this->currentUser->id()) {
       $args['@user'] = Markup::create($account->label());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/apigee_edge/src/Entity/ListBuilder/AppListBuilder.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The app warnings checker.
    *
-   * @var \Drupal\apigee_edge\Entity\AppWarningsCheckerInterface
+   * @var AppWarningsCheckerInterface
    */
   protected $appWarningsChecker;

@@ @@
   /**
    * AppListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *   The time service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface|null $config_factory
+   * @param ConfigFactoryInterface|null $config_factory
    *   The config factory.
-   * @param \Drupal\apigee_edge\Entity\AppWarningsCheckerInterface $app_warnings_checker
+   * @param AppWarningsCheckerInterface $app_warnings_checker
    *   The app warnings checker service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, RequestStack $request_stack, TimeInterface $time, ConfigFactoryInterface $config_factory = NULL, AppWarningsCheckerInterface $app_warnings_checker = NULL) {
@@ @@
    * The info row contains the app's name (link to the details page),
    * status and entity operations.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    * @param array $rows
    *   The info row in the table for app.
@@ @@
    *
    * The warning row contains the warning messages if there is any.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    * @param array $rows
    *   The warning row in the table for app.
@@ @@
   /**
    * Renders the name of an app for the entity list.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return array
@@ @@
   /**
    * Renders the status of an app for the entity list.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return array
@@ @@
   /**
    * Checks credentials of an app and returns warnings about them.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity to be checked.
    *
    * @return array
@@ @@
   /**
    * Generates a unique CSS id for an app.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return string
@@ @@
   /**
    * Returns the CSS ID of the app info row.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return string
@@ @@
   /**
    * Returns the CSS ID of the app warning row.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/apigee_edge/src/Entity/Form/FieldableEdgeEntityFormInterface.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the form display.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   The current form display.
    */
   public function getFormDisplay(FormStateInterface $form_state);
@@ @@
    * Sets the form display which will be used for populating form element
    * defaults.
    *
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display
+   * @param EntityFormDisplayInterface $form_display
    *   The form display that the current form operates with.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


88) modules/contrib/apigee_edge/src/Entity/Form/FieldableEdgeEntityForm.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Form;

+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface;
+use Symfony\Component\Validator\ConstraintViolationInterface;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ @@
   /**
    * The fieldable entity being used by this form.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;

@@ @@
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
-    /** @var \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity */
+    /** @var FieldableEdgeEntityInterface $entity */
     $entity = $this->buildEntity($form, $form_state);

     $violations = $entity->validate();
@@ @@
    * using the form display), it needs to add its fields here and override
    * flagViolations() for displaying the violations.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return string[]
@@ @@
    * parent::flagViolations($violations, $form, $form_state);
    * @endcode
    *
-   * @param \Drupal\Core\Entity\EntityConstraintViolationListInterface $violations
+   * @param EntityConstraintViolationListInterface $violations
    *   The violations to flag.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @todo Add missing return type-hint in 2.x.
@@ @@
   protected function flagViolations(EntityConstraintViolationListInterface $violations, array $form, FormStateInterface $form_state) {
     // Flag entity level violations.
     foreach ($violations->getEntityViolations() as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $form_state->setErrorByName(str_replace('.', '][', $violation->getPropertyPath()), $violation->getMessage());
     }
     // Let the form display flag violations of its fields.
@@ @@
    * {@inheritdoc}
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity */
+    /** @var FieldableEdgeEntityInterface $entity */
     // First, extract values from widgets.
     $extracted = $this->getFormDisplay($form_state)->extractFormValues($entity, $form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


89) modules/contrib/apigee_edge/src/Entity/Form/EdgeEntityDeleteForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityDeleteForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * EdgeEntityDeleteForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   The complete form.
@@ @@
   /**
    * The error message that the user should see when verification fails.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The error message to be displayed to the user.
    */
   protected function verificationCodeErrorMessage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppFormTrait.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Form;

+use Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface;
+use Drupal\user\UserInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Exception\ClientErrorException;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
@@ @@
     // query to reduce the number API calls. (Entity query may load all
     // developers to return whether the given developer has an app with
     // the provided name already.)
-    /** @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $factory */
+    /** @var DeveloperAppControllerFactoryInterface $factory */
     $factory = \Drupal::service('apigee_edge.controller.developer_app_controller_factory');
     $app = TRUE;
     try {
@@ @@
   /**
    * Allows to access to the injected entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   private function getEntityTypeManager(): EntityTypeManagerInterface {
@@ @@
    */
   protected function apiProductList(array $form, FormStateInterface $form_state): array {
     $email = $form_state->getValue('owner') ?? $form['owner']['#value'] ?? $form['owner']['#default_value'];
-    /** @var \Drupal\user\UserInterface|null $account */
+    /** @var UserInterface|null $account */
     $account = user_load_by_mail($email);

     return array_filter(\Drupal::entityTypeManager()->getStorage('api_product')->loadMultiple(), function (ApiProductInterface $product) use ($account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


91) modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppEditForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Form;

+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface;
@@ @@
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface
+   * @var DeveloperAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;

@@ @@
   /**
    * Constructs DeveloperAppEditForm.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The developer app credential controller factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
@@ @@
    * {@inheritdoc}
    */
   protected function apiProductList(array $form, FormStateInterface $form_state): array {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface $app */
+    /** @var DeveloperAppInterface $app */
     $app = $this->entity;

     // Sanity check, it could happen that the app owner (developer) does not
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


92) modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateFormForDeveloper.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The user from the route, captured in buildForm().
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


93) modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateFormBase.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface
+   * @var DeveloperAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;

@@ @@
   /**
    * DeveloperAppCreateFormBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The developer app credential controller factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller, DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


94) modules/contrib/apigee_edge/src/Entity/Form/DeveloperAppCreateForm.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   protected $developerController;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs DeveloperAppCreateForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The developer app credential controller factory.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller, DeveloperControllerInterface $developer_controller, DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory, RendererInterface $renderer) {
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public function updateApiProductList(array $form, FormStateInterface $form_state) : AjaxResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


95) modules/contrib/apigee_edge/src/Entity/Form/AppForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Form;

+use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface;
 use Drupal\apigee_edge\Entity\Storage\EdgeEntityStorageBase;
@@ @@
   /**
    * Constructs AppCreationForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $form = parent::form($form, $form_state);
     $form['#tree'] = TRUE;

-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;

     // By default we render this as a simple text field, sub-classes can change
@@ @@
   /**
    * Returns the list of API product that the user can see on the form.
    *
-   * @return \Drupal\apigee_edge\Entity\ApiProductInterface[]
+   * @return ApiProductInterface[]
    *   Array of API product entities.
    */
   abstract protected function apiProductList(array $form, FormStateInterface $form_state): array;
@@ @@
   /**
    * Returns the label of the Save button on the form.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translatable label.
    */
   protected function saveButtonLabel() : TranslatableMarkup {
@@ @@
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $entity = parent::buildEntity($form, $form_state);
     // Set the owner of the app. Without this an app can not be saved.
     // @see \Drupal\apigee_edge\Entity\Controller\DeveloperAppEdgeEntityControllerProxy::create()
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;
     $was_new = $app->isNew();
     $context = [
@@ @@
    *   SAVED_NEW, SAVED_UPDATED or SAVED_UNKNOWN.
    */
   protected function saveApp(): int {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;
     $was_new = $app->isNew();
     try {
@@ @@
    * It should log failures but it should not display messages to users.
    * This is handled in save().
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity which credentials gets updated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object with the credential related changes.
    *
    * @return bool|null
@@ @@
   /**
    * Returns the URL where the user should be redirected after form submission.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect URL.
    */
   protected function getRedirectUrl(): Url {
@@ @@
    * @param string $app_name
    *   The name of an app.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface
+   * @return AppCredentialControllerInterface
    *   The app credential controller.
    */
   abstract protected function appCredentialController(string $owner, string $app_name) : AppCredentialControllerInterface;
@@ @@
    *   The app name.
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return bool
@@ @@
   /**
    * Returns the developer/team (company) app entity definition.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The app entity definition.
    */
   abstract protected function appEntityDefinition(): EntityTypeInterface;
@@ @@
   /**
    * Returns the app owner (developer or team (company)) entity definition.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The app owner entity definition.
    */
   abstract protected function appOwnerEntityDefinition(): EntityTypeInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/apigee_edge/src/Entity/Form/AppEditForm.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $render;

@@ @@
   /**
    * AppEditForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $render
+   * @param RendererInterface $render
    *   The renderer service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $render) {
@@ @@
     $form = parent::form($form, $form_state);
     $form['#cache']['contexts'][] = 'user.permissions';

-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;

     $app_settings = $this->config('apigee_edge.common_app_settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/apigee_edge/src/Entity/Form/AppDeleteForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Form;

+use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;

@@ @@
    * {@inheritdoc}
    */
   protected function verificationCode() {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->getEntity();
     // Request the name of the app instead of the app id (UUID).
     return $app->getName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


98) modules/contrib/apigee_edge/src/Entity/Form/AppCreateForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Form;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Apigee\Edge\Api\Management\Entity\AppCredential;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface;
@@ @@
   /**
    * The API product controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface
+   * @var ApiProductControllerInterface
    */
   protected $apiProductController;

@@ @@
   /**
    * AppCreateForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller) {
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function alterFormBeforeApiProductElement(array &$form, FormStateInterface $form_state): void {}
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function alterFormWithApiProductElement(array &$form, FormStateInterface $form_state): void {}
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    *   The API product render element
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @see apiProductList()
    */
@@ @@
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   The complete form.
@@ @@
     $app_credential_controller = $this->appCredentialController($app->getAppOwner(), $app->getName());
     $logger = $this->logger('apigee_edge');

-    /** @var \Apigee\Edge\Api\Management\Entity\AppCredential[] $credentials */
+    /** @var AppCredential[] $credentials */
     $credentials = $app->getCredentials();
-    /** @var \Apigee\Edge\Api\Management\Entity\AppCredential $credential */
+    /** @var AppCredential $credential */
     $credential = reset($credentials);
     $selected_products = array_values(array_filter((array) $form_state->getValue('api_products')));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


99) modules/contrib/apigee_edge/src/Entity/FieldableEdgeEntityBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\apigee_edge\Exception\InvalidArgumentException;
 use Drupal\Core\Entity\EntityConstraintViolationList;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * Local cache for for fields.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface[]
+   * @var FieldItemListInterface[]
    *
    * @see \Drupal\apigee_edge\Entity\FieldableEdgeEntityBase::get()
    */
@@ @@
    * @param string $type
    *   Type of the property.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition|null
+   * @return BaseFieldDefinition|null
    *   Base field definition if found, null otherwise.
    */
   protected static function getBaseFieldDefinition(string $name, string $type): ?BaseFieldDefinition {
@@ @@
       }

       // Based on \Drupal\Core\Entity\ContentEntityBase::getTranslatedField().
-      /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $manager */
+      /** @var FieldTypePluginManagerInterface $manager */
       $manager = \Drupal::service('plugin.manager.field.field_type');
       $this->fields[$field_name] = $manager->createFieldItemList($this, $field_name, $value);
     }
@@ @@
    *   Value of a property.
    */
   protected function convertFieldValueToPropertyValue(string $field_name) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
+    /** @var FieldDefinitionInterface $definition */
     $definition = $this->getFieldDefinition($field_name);
     if ($definition->getFieldStorageDefinition()->getCardinality() === 1) {
       $value = $this->get($field_name)->value;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


100) modules/contrib/apigee_edge/src/Entity/EdgeEntityType.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Drupal\Core\Entity\Exception\EntityTypeIdLengthException;
 use Drupal\apigee_edge\Entity\ListBuilder\EdgeEntityListBuilder;
 use Drupal\apigee_edge\Exception\RuntimeException;
 use Drupal\Core\Config\ImmutableConfig;
@@ @@
    * @param array $definition
    *   An array of values from the annotation.
    *
-   * @throws \Drupal\Core\Entity\Exception\EntityTypeIdLengthException
+   * @throws EntityTypeIdLengthException
    *   Thrown when attempting to instantiate an entity type with too long ID.
    */
   public function __construct(array $definition) {
@@ @@
    *   - entity_label_singular
    *   - entity_label_plural.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig|null
+   * @return ImmutableConfig|null
    *   Config object.
    *
-   * @throws \Drupal\apigee_edge\Exception\RuntimeException
+   * @throws RuntimeException
    *   If the provided config object does not exists.
    */
   private function getConfigWithEntityLabels(): ?ImmutableConfig {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


101) modules/contrib/apigee_edge/src/Entity/EdgeEntityBase.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated SDK entity.
    *
-   * @var \Apigee\Edge\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $decorated;

@@ @@
    *   An array of values to set, keyed by property name.
    * @param null|string $entity_type
    *   Type of the entity.
-   * @param \Apigee\Edge\Entity\EntityInterface|null $decorated
+   * @param EntityInterface|null $decorated
    *   The SDK entity that this Drupal entity decorates.
    *
    * @throws \ReflectionException
@@ @@
   /**
    * Creates a Drupal entity from an SDK Entity.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An SDK entity.
    *
-   * @return \Drupal\apigee_edge\Entity\EdgeEntityInterface
+   * @return EdgeEntityInterface
    *   The Drupal entity that decorates the SDK entity.
    */
   public static function createFrom(EntityInterface $entity): EdgeEntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


102) modules/contrib/apigee_edge/src/Entity/DeveloperCompaniesCacheInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
 /**
  * Definition of the developer company membership cache.
  *
@@ @@
   /**
    * Saves developers' companies to cache.
    *
-   * @param \Apigee\Edge\Api\Management\Entity\DeveloperInterface[] $developers
+   * @param DeveloperInterface[] $developers
    *   Developer entities.
    */
   public function saveCompanies(array $developers): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


103) modules/contrib/apigee_edge/src/Entity/DeveloperCompaniesCache.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
+use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;
 use Drupal\Core\Cache\CacheBackendInterface;

@@ @@
   /**
    * The memory cache backend.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   private $backend;

@@ @@
   /**
    * DeveloperCompaniesCache constructor.
    *
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The memory cache factory service.
    */
   public function __construct(MemoryCacheFactoryInterface $memory_cache_factory) {
@@ @@
    * {@inheritdoc}
    */
   public function saveCompanies(array $developers): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperInterface $developer */
+    /** @var DeveloperInterface $developer */
     foreach ($developers as $developer) {
       $tags = array_merge([
         "developer:{$developer->getDeveloperId()}",
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


104) modules/contrib/apigee_edge/src/Entity/DeveloperAppRouteProvider.php:116

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the add-form route for developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the edit-form route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEditFormRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the delete-form route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteFormRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the canonical route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCanonicalRouteByDeveloper(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the collection route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRouteByDeveloper(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the app analytics route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAnalyticsRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-api-key-form route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddApiKeyRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the delete-api-key-form route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteApiKeyRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revoke-api-key-form route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevokeApiKeyRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * If route contains the {user} parameter add required changes to the route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to be checked and altered if needed.
    */
   private function ensureUserParameter(Route $route) {
@@ @@
   /**
    * Gets the api key route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getApiKeyRouteDeveloperApp(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


105) modules/contrib/apigee_edge/src/Entity/DeveloperApp.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Drupal\Core\Field\BaseFieldDefinition;
 use Apigee\Edge\Api\Management\Entity\DeveloperApp as EdgeDeveloperApp;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Drupal\apigee_edge\Exception\InvalidArgumentException;
@@ @@
       if ($this->getDeveloperId()) {
         $developer = Developer::load($this->getDeveloperId());
         if ($developer) {
-          /** @var \Drupal\user\UserInterface $account */
+          /** @var UserInterface $account */
           $account = user_load_by_mail($developer->getEmail());
           if ($account) {
             $this->drupalUserId = $account->id();
@@ @@
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);
     $developer_app_singular_label = \Drupal::entityTypeManager()->getDefinition('developer_app')->getSingularLabel();
     $developer_app_singular_label = mb_convert_case($developer_app_singular_label, MB_CASE_TITLE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


106) modules/contrib/apigee_edge/src/Entity/Developer.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface;
 use Apigee\Edge\Api\Management\Entity\Developer as EdgeDeveloper;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Apigee\Edge\Exception\ApiException;
@@ @@
    * This does not get saved to the persistent entity cache because it gets
    * calculated only when it is necessary, when getCompanies() gets called.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    *
    * @see getCompanies()
    */
@@ @@
     // companies.
     // @see https://apidocs.apigee.com/management/apis/get/organizations/%7Borg_name%7D/developers
     if ($this->companiesCache->getCompanies($this->getDeveloperId()) === NULL) {
-      /** @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $controller */
+      /** @var DeveloperControllerInterface $controller */
       $controller = \Drupal::service('apigee_edge.controller.developer');
       // If controller has an internal cache let's check whether this
       // developer in it and it has a non-empty company list.
@@ @@
   public function getOwnerId() {
     if ($this->drupalUserId === NULL) {
       if ($this->getEmail()) {
-        /** @var \Drupal\user\UserInterface $account */
+        /** @var UserInterface $account */
         $account = user_load_by_mail($this->getEmail());
         if ($account) {
           $this->drupalUserId = $account->id();
@@ @@
    */
   public static function postDelete(EntityStorageInterface $storage, array $entities) {
     parent::postDelete($storage, $entities);
-    /** @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $cache */
+    /** @var DeveloperCompaniesCacheInterface $cache */
     $cache = \Drupal::service('apigee_edge.controller.cache.developer_companies');
     $developer_mail_id_map = array_map(function (Developer $entity) {
       return $entity->getDeveloperId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


107) modules/contrib/apigee_edge/src/Entity/Controller/OrganizationController.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Api\Management\Entity\OrganizationInterface;
 use Apigee\Edge\Api\Management\Controller\OrganizationController as EdgeOrganizationController;
 use Apigee\Edge\Api\Management\Controller\OrganizationControllerInterface as EdgeOrganizationControllerInterface;
 use Apigee\Edge\Entity\EntityInterface;
@@ @@
   /**
    * The internal entity cache.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\OrganizationInterface[]
+   * @var OrganizationInterface[]
    */
   private $cache = [];

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * OrganizationController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
    */
   public function __construct(SDKConnectorInterface $connector) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


108) modules/contrib/apigee_edge/src/Entity/Controller/ManagementApiEdgeEntityControllerProxy.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The decorated controller from the SDK.
    *
-   * @var \Apigee\Edge\Controller\EntityCrudOperationsControllerInterface|\Apigee\Edge\Controller\NonPaginatedEntityListingControllerInterface|\Apigee\Edge\Controller\PaginatedEntityListingControllerInterface
+   * @var EntityCrudOperationsControllerInterface|NonPaginatedEntityListingControllerInterface|PaginatedEntityListingControllerInterface
    */
   private $controller;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


109) modules/contrib/apigee_edge/src/Entity/Controller/EntityCacheAwareControllerTrait.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the entity cache used by the controller.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @return EntityCacheInterface
    *   The entity cache.
    */
   abstract public function entityCache(): EntityCacheInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


110) modules/contrib/apigee_edge/src/Entity/Controller/EntityCacheAwareControllerInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the entity cache used by the controller.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @return EntityCacheInterface
    *   The entity cache.
    */
   public function entityCache(): EntityCacheInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


111) modules/contrib/apigee_edge/src/Entity/Controller/EdgeEntityControllerInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Entity\EntityInterface;

 /**
@@ @@
    *
    * Applies incoming values from Apigee Edge in $entity.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The created entity.
    */
   public function create(EntityInterface $entity): void;
@@ @@
    *   One of an entity's unique ids. (Some entities has more than one unique
    *   id at a moment, ex.: developer's email address and id (UUID).)
    *
-   * @return \Apigee\Edge\Entity\EntityInterface
+   * @return EntityInterface
    *   The load entity from Apigee Edge.
    *
-   * @throws \Apigee\Edge\Exception\ApiException
+   * @throws ApiException
    *   If entity does not exist with id.
    */
   public function load(string $id): EntityInterface;
@@ @@
    *
    * Applies incoming values from Apigee Edge in $entity.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The update entity.
    */
   public function update(EntityInterface $entity): void;
@@ @@
    * All entities, even on pagination enabled endpoints, this method must
    * return all entities even it requires multiple API calls.
    *
-   * @return \Apigee\Edge\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities.
    */
   public function loadAll(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


112) modules/contrib/apigee_edge/src/Entity/Controller/DeveloperController.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Api\Management\Entity\DeveloperAppInterface;
 use Apigee\Edge\Api\Management\Controller\DeveloperController as EdgeDeveloperController;
 use Apigee\Edge\Api\Management\Controller\DeveloperControllerInterface as EdgeDeveloperControllerInterface;
 use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;

@@ @@
   /**
    * The entity cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   private $entityCache;

@@ @@
   /**
    * The entity id cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $entityIdCache;

@@ @@
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;

@@ @@
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;

@@ @@
   /**
    * DeveloperController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface $entity_cache
+   * @param EntityCacheInterface $entity_cache
    *   The entity cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The entity id cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
    *   The app name cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, EntityCacheInterface $entity_cache, EntityIdCacheInterface $entity_id_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner) {
@@ @@
    * {@inheritdoc}
    */
   public function delete(string $entity_id): EntityInterface {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $entity = $this->traitDelete($entity_id);
     // Invalidate app caches that belongs to this developer.
     // This is implementation probably overcomplicated,
@@ @@
     foreach ([$entity->getEmail(), $entity->getDeveloperId()] as $owner) {
       $app_cache = $this->appCacheByOwnerFactory->getAppCache($owner);
       $app_names = [];
-      /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $app */
+      /** @var DeveloperAppInterface $app */
       foreach ($app_cache->getEntities() as $app) {
         $app_names[] = $app->getAppId();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


113) modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppEdgeEntityControllerProxy.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The developer app controller factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface
+   * @var DeveloperAppControllerFactoryInterface
    */
   private $devAppControllerFactory;

@@ @@
   /**
    * The app controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface
+   * @var AppControllerInterface
    */
   private $appController;

@@ @@
   /**
    * DeveloperAppEntityControllerProxy constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $developer_app_controller_factory
+   * @param DeveloperAppControllerFactoryInterface $developer_app_controller_factory
    *   The developer app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(DeveloperAppControllerFactoryInterface $developer_app_controller_factory, AppControllerInterface $app_controller) {
@@ @@
    * {@inheritdoc}
    */
   public function create(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $entity */
+    /** @var DeveloperAppInterface $entity */
     if (empty($entity->getDeveloperId())) {
       // Sanity check.
       throw new RuntimeException('Developer id has to set on the app.');
@@ @@
    * {@inheritdoc}
    */
   public function update(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $entity */
+    /** @var DeveloperAppInterface $entity */
     $controller = $this->devAppControllerFactory->developerAppController($entity->getDeveloperId());
     $controller->update($entity);
   }
@@ @@
       // Entity has not found in the entity cache, we have it from Apigee Edge.
       $entity = $this->load($id);
     }
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $entity */
+    /** @var DeveloperAppInterface $entity */
     $controller = $this->devAppControllerFactory->developerAppController($entity->getDeveloperId());
     // The id that we got is a UUID, what we need is an app name.
     $controller->delete($entity->getName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


114) modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerFactoryInterface.php:33

    ---------- begin diff ----------
@@ @@
    *   Name of an app. (Not an app id, because app credentials endpoints does
    *   not allow to use them.)
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface
+   * @return DeveloperAppCredentialControllerInterface
    *   The developer app credentials controller.
    */
   public function developerAppCredentialController(string $owner, string $app_name): DeveloperAppCredentialControllerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


115) modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppCredentialControllerFactory.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface[]
+   * @var DeveloperAppCredentialControllerInterface[]
    */
   private $instances;

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * DeveloperAppCredentialControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(SDKConnectorInterface $connector, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EventDispatcherInterface $event_dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


116) modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerFactoryInterface.php:30

    ---------- begin diff ----------
@@ @@
    * @param string $developer
    *   Email address or id (UUID) of a developer.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerInterface
+   * @return DeveloperAppControllerInterface
    *   Developer app controller.
    */
   public function developerAppController(string $developer): DeveloperAppControllerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


117) modules/contrib/apigee_edge/src/Entity/Controller/DeveloperAppControllerFactory.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerInterface[]
+   * @var DeveloperAppControllerInterface[]
    */
   private $instances = [];

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;

@@ @@
   /**
    * The app cache that stores apps by their ids (UUIDs).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;

@@ @@
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;

@@ @@
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;

@@ @@
   /**
    * DeveloperAppControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache that stores apps by their ids (UUIDs).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
+   * @param AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory, AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


118) modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedEntityListingControllerTrait.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Controller\PaginatedEntityListingControllerInterface;
 use Apigee\Edge\Structure\PagerInterface;

 /**
@@ @@
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\PaginatedEntityListingControllerInterface
+   * @return PaginatedEntityListingControllerInterface
    *   An entity controller that extends these interfaces.
    */
   abstract protected function decorated();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


119) modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedEntityIdListingControllerTrait.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface;
 use Apigee\Edge\Structure\PagerInterface;
 use Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface;

@@ @@
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface
+   * @return PaginatedEntityIdListingControllerInterface
    *   An entity controller that extends these interfaces.
    */
   abstract protected function decorated();
@@ @@
   /**
    * Entity id cache used by the entity controller.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @return EntityIdCacheInterface
    *   The entity id cache.
    */
   abstract protected function entityIdCache(): EntityIdCacheInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


120) modules/contrib/apigee_edge/src/Entity/Controller/CachedPaginatedControllerHelperTrait.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface;
+use Apigee\Edge\Controller\PaginatedEntityListingControllerInterface;
 use Apigee\Edge\Structure\PagerInterface;

 /**
@@ @@
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface|\Apigee\Edge\Controller\PaginatedEntityListingControllerInterface
+   * @return PaginatedEntityIdListingControllerInterface|PaginatedEntityListingControllerInterface
    *   An entity controller that extends these interfaces.
    */
   abstract protected function decorated();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


121) modules/contrib/apigee_edge/src/Entity/Controller/CachedManagementApiEdgeEntityControllerProxy.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The original cached entity controller.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\EntityCacheAwareControllerInterface
+   * @var EntityCacheAwareControllerInterface
    */
   private $originalController;

@@ @@
   /**
    * The MGMT API proxy controller created from the original controller.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\ManagementApiEdgeEntityControllerProxy
+   * @var ManagementApiEdgeEntityControllerProxy
    */
   private $proxiedController;

@@ @@
   /**
    * CachedManagementApiEdgeEntityControllerProxy constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\EntityCacheAwareControllerInterface $controller
+   * @param EntityCacheAwareControllerInterface $controller
    *   The entity controller that uses cache.
    */
   public function __construct(EntityCacheAwareControllerInterface $controller) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


122) modules/contrib/apigee_edge/src/Entity/Controller/CachedEntityCrudOperationsControllerTrait.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Controller\EntityCrudOperationsControllerInterface;
 use Apigee\Edge\Entity\EntityInterface;

 /**
@@ @@
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\EntityCrudOperationsControllerInterface
+   * @return EntityCrudOperationsControllerInterface
    *   An entity controller that extends this interface.
    */
   abstract protected function decorated();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


123) modules/contrib/apigee_edge/src/Entity/Controller/CachedAttributesAwareEntityControllerTrait.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Apigee\Edge\Api\Management\Controller\AttributesAwareEntityControllerInterface;
+use Apigee\Edge\Entity\Property\AttributesPropertyInterface;
 use Apigee\Edge\Structure\AttributesProperty;

 /**
@@ @@
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Api\Management\Controller\AttributesAwareEntityControllerInterface
+   * @return AttributesAwareEntityControllerInterface
    *   An entity controller that extends this interface.
    */
   abstract protected function decorated();
@@ @@
    */
   public function getAttributes(string $entity_id): AttributesProperty {
     $entity = $this->entityCache()->getEntity($entity_id);
-    /** @var \Apigee\Edge\Entity\Property\AttributesPropertyInterface $entity */
+    /** @var AttributesPropertyInterface $entity */
     if ($entity) {
       return $entity->getAttributes();
     }
@@ @@
    */
   public function getAttribute(string $entity_id, string $name): string {
     $entity = $this->entityCache()->getEntity($entity_id);
-    /** @var \Apigee\Edge\Entity\Property\AttributesPropertyInterface $entity */
+    /** @var AttributesPropertyInterface $entity */
     if ($entity) {
       return $entity->getAttributeValue($name);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


124) modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityIdCacheInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller\Cache;

+use Apigee\Edge\Entity\EntityInterface;
 /**
  * Stores entity ids that getEntityIds() methods returns in controllers.
  *
@@ @@
   /**
    * Adds entities to the cache.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of entities.
    */
   public function saveEntities(array $entities): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


125) modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityIdCache.php:122

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the unique id of an entity that getEntityIds() returns as well.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


126) modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityCacheInterface.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Saves entities to the cache.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of entities.
    */
   public function saveEntities(array $entities): void;
@@ @@
    *   Array of entity ids.
    *   If an empty array is passed all currently stored gets returned.
    *
-   * @return \Apigee\Edge\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities.
    */
   public function getEntities(array $ids = []): array;
@@ @@
    * @param string $id
    *   Entity id.
    *
-   * @return \Apigee\Edge\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity if it is in the cache, null otherwise.
    */
   public function getEntity(string $id): ?EntityInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


127) modules/contrib/apigee_edge/src/Entity/Controller/Cache/EntityCache.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller\Cache;

+use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Apigee\Edge\Entity\EntityInterface;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;

@@ @@
    * It is easier to invalidate cache entries in a cache backend that supports
    * tags.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The entity id cache related to this entity type.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   protected $entityIdCache;

@@ @@
   /**
    * EntityCache constructor.
    *
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The memory cache factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The related entity id cache.
    * @param string $entity_type
    *   The entity type.
@@ @@
   /**
    * Allows to perform additional tasks after entities got saved to cache.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of entities.
    */
   protected function doSaveEntities(array $entities): void {}
@@ @@
    *
    * The cache id returned here must be always unique!
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object that gets cached.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


128) modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperIdCache.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller\Cache;

+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Apigee\Edge\Entity\EntityInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   protected function getEntityId(EntityInterface $entity): string {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     return $entity->getEmail();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


129) modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperCache.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller\Cache;

+use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
 use Apigee\Edge\Entity\EntityInterface;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;

@@ @@
   /**
    * DeveloperCache constructor.
    *
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The memory cache factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The developer entity id cache.
    */
   public function __construct(MemoryCacheFactoryInterface $memory_cache_factory, EntityIdCacheInterface $entity_id_cache) {
@@ @@
    * {@inheritdoc}
    */
   protected function prepareCacheItem(EntityInterface $entity): array {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $item = parent::prepareCacheItem($entity);
     // Add developer's email as tag to generated cache items by the parent
     // class.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


130) modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperAppNameCacheFactory.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller\Cache;

+use Drupal\apigee_edge\Entity\Developer;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The (general) app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;

@@ @@
   /**
    * DeveloperAppNameCacheFactory constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
    *   The (general) app name cache by app owner factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
    */
   public function __construct(AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator) {
@@ @@
    */
   public function getAppNameCache(string $owner): EntityIdCacheInterface {
     if ($this->emailValidator->isValid($owner)) {
-      /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+      /** @var Developer $developer */
       $developer = $this->entityTypeManager->getStorage('developer')->load($owner);
       if ($developer === NULL) {
         throw new DeveloperDoesNotExistException($owner);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


131) modules/contrib/apigee_edge/src/Entity/Controller/Cache/DeveloperAppCacheFactory.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller\Cache;

+use Drupal\apigee_edge\Entity\Developer;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The (general) app cache by owner factory.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;

@@ @@
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * DeveloperAppCacheFactory constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The (general) app cache by owner factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
    */
   public function __construct(AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator) {
@@ @@
    * @param string $owner
    *   Developer id (UUID) or email.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface
+   * @return AppCacheByOwnerInterface
    *   The developer app cache that belongs to this owner.
    */
   public function getAppCache(string $owner): AppCacheByOwnerInterface {
     if ($this->emailValidator->isValid($owner)) {
-      /** @var \Drupal\apigee_edge\Entity\Developer|null $developer */
+      /** @var Developer|null $developer */
       $developer = $this->entityTypeManager->getStorage('developer')->load($owner);
       if ($developer === NULL) {
         throw new DeveloperDoesNotExistException($owner);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


132) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppNameCacheByOwnerFactoryInterface.php:33

    ---------- begin diff ----------
@@ @@
    * @param string $owner
    *   Developer id (UUID), email address or a company's company name.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @return EntityIdCacheInterface
    *   The app name cache instance that belongs to the owner.
    */
   public function getAppNameCache(string $owner): EntityIdCacheInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


133) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppNameCacheByOwnerFactory.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface[]
+   * @var EntityIdCacheInterface[]
    */
   private $instances = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


134) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppIdCache.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller\Cache;

+use Apigee\Edge\Api\Management\Entity\AppInterface;
 use Apigee\Edge\Entity\EntityInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   protected function getEntityId(EntityInterface $entity): string {
-    /** @var \Apigee\Edge\Api\Management\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     return $entity->getAppId();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


135) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheInterface.php:37

    ---------- begin diff ----------
@@ @@
    * @param string $owner
    *   Developer id (UUID) or company name.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\AppInterface[]
+   * @return AppInterface[]
    *   Array of apps that belongs to this owner in cache or null if no entry
    *   found in cache for this owner.
    */
@@ @@
   /**
    * Returns the owner of an app.
    *
-   * @param \Apigee\Edge\Api\Management\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


136) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerFactoryInterface.php:30

    ---------- begin diff ----------
@@ @@
    * @param string $owner
    *   Developer id (UUID), email address or a company's company name.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface
+   * @return AppCacheByOwnerInterface
    *   The app name cache instance that belongs to the owner.
    */
   public function getAppCache(string $owner): AppCacheByOwnerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


137) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwnerFactory.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface[]
+   * @var AppCacheByOwnerInterface[]
    */
   private $instances = [];

@@ @@
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;

@@ @@
   /**
    * The app cache service that stores app by their app id (UUID).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;

@@ @@
   /**
    * AppCacheByAppOwnerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache service that stores app by their app id (UUID).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(AppCacheInterface $app_cache, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


138) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCacheByOwner.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * The app cache service that stores app by their app id (UUID).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;

@@ @@
    * This cache is used by the getEntityIds() method on developer- and company
    * app controllers.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $appNameCache;

@@ @@
    *
    * @param string $owner
    *   Developer id (UUID), email address or a company's company name.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache service that stores app by their app id (UUID).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
    *   Dedicated cache instance that stores a specific owner app names.
    */
   public function __construct(string $owner, AppCacheInterface $app_cache, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner) {
@@ @@
    * @param array $names
    *   Array of app names.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\AppInterface[]
+   * @return AppInterface[]
    *   Array of apps.
    */
   private function getAppsByAppNames(array $names) : array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


139) modules/contrib/apigee_edge/src/Entity/Controller/Cache/AppCache.php:56

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function prepareCacheItem(EntityInterface $entity): array {
-    /** @var \Apigee\Edge\Api\Management\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $owner = $this->getAppOwner($entity);
     $item = [
       // We have to cache apps by their app ids here, $entity->id() returns
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


140) modules/contrib/apigee_edge/src/Entity/Controller/AppCredentialControllerBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface;
 use Apigee\Edge\Api\Management\Controller\AppCredentialController as EdgeAppCredentialController;
 use Apigee\Edge\Api\Management\Entity\AppCredentialInterface;
 use Apigee\Edge\Structure\AttributesProperty;
@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $connector;

@@ @@
   /**
    * App owner's dedicated app cache that uses app names as cache ids.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface
+   * @var AppCacheByOwnerInterface
    */
   protected $appCacheByOwner;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
    * @param string $app_name
    *   Name of an app. (Not an app id, because app credentials endpoints does
    *   not allow to use them.)
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(string $owner, string $app_name, SDKConnectorInterface $connector, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EventDispatcherInterface $event_dispatcher) {
@@ @@
    */
   public function addProducts(string $consumer_key, array $api_products): AppCredentialInterface {
     $credential = $this->decorated()->addProducts($consumer_key, $api_products);
-    $this->eventDispatcher->dispatch(AppCredentialAddApiProductEvent::EVENT_NAME, new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products));
+    $this->eventDispatcher->dispatch(new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products), AppCredentialAddApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function create(string $consumer_key, string $consumer_secret): AppCredentialInterface {
     $credential = $this->decorated()->create($consumer_key, $consumer_secret);
-    $this->eventDispatcher->dispatch(AppCredentialCreateEvent::EVENT_NAME, new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialCreateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function delete(string $consumer_key): AppCredentialInterface {
     $credential = $this->decorated()->delete($consumer_key);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteEvent::EVENT_NAME, new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialDeleteEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function deleteApiProduct(string $consumer_key, string $api_product): AppCredentialInterface {
     $credential = $this->decorated()->deleteApiProduct($consumer_key, $api_product);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteApiProductEvent::EVENT_NAME, new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product), AppCredentialDeleteApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ @@
    */
   public function generate(array $api_products, AttributesProperty $app_attributes, string $callback_url, array $scopes = [], string $key_expires_in = '-1'): AppCredentialInterface {
     $credential = $this->decorated()->generate($api_products, $app_attributes, $callback_url, $scopes, $key_expires_in);
-    $this->eventDispatcher->dispatch(AppCredentialGenerateEvent::EVENT_NAME, new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialGenerateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


141) modules/contrib/apigee_edge/src/Entity/Controller/AppControllerBase.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   protected $organizationController;

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $connector;

@@ @@
   /**
    * The app cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   protected $appCache;

@@ @@
   /**
    * AppControllerBase constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


142) modules/contrib/apigee_edge/src/Entity/Controller/AppController.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity\Controller;

+use Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface;
 use Apigee\Edge\Api\Management\Controller\AppController as EdgeAppController;
 use Apigee\Edge\Api\Management\Controller\AppControllerInterface as EdgeAppControllerInterface;
 use Apigee\Edge\Api\Management\Entity\AppInterface;
@@ @@
   /**
    * The (general) app by owner cache factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appByOwnerAppCacheFactory;

@@ @@
   /**
    * The app id cache service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appIdCache;

@@ @@
   /**
    * AppController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache that stores apps by their ids (UUIDs).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppIdCache $app_id_cache
+   * @param AppIdCache $app_id_cache
    *   The app id cache that stores app UUIDs.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The (general) app cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppIdCache $app_id_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory) {
@@ @@
    *
    * @param string $status
    *   App status.
-   * @param \Apigee\Edge\Structure\PagerInterface|null $pager
+   * @param PagerInterface|null $pager
    *   Pager.
    *
    * @return array|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


143) modules/contrib/apigee_edge/src/Entity/Controller/AppByOwnerController.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * App owner's dedicated app cache that uses app names as cache ids.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   protected $appCacheByOwner;

@@ @@
   /**
    * App owner's dedicated app name cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   protected $appNameCacheByOwner;

@@ @@
    *
    * @param string $owner
    *   A developer's email address, uuid or a company's company name.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(string $owner, SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


144) modules/contrib/apigee_edge/src/Entity/Controller/ApiProductController.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * The SDK connector.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The entity cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   private $entityCache;

@@ @@
   /**
    * The entity id cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $entityIdCache;

@@ @@
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;

@@ @@
   /**
    * ApiProductController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface $entity_cache
+   * @param EntityCacheInterface $entity_cache
    *   The entity cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The entity id cache used by this controller.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, EntityCacheInterface $entity_cache, EntityIdCacheInterface $entity_id_cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


145) modules/contrib/apigee_edge/src/Entity/AttributesAwareFieldableEdgeEntityBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Apigee\Edge\Entity\EntityInterface;
 use Apigee\Edge\Entity\Property\AttributesPropertyInterface;
 use Drupal\apigee_edge\Exception\InvalidArgumentException;
@@ @@
   /**
    * The decorated SDK entity.
    *
-   * @var \Apigee\Edge\Entity\EntityInterface|\Apigee\Edge\Entity\Property\AttributesPropertyInterface
+   * @var EntityInterface|AttributesPropertyInterface
    */
   protected $decorated;

@@ @@
    * @param null|string $entity_type
    *   Type of the entity. It is optional because constructor sets its default
    *   value.
-   * @param \Apigee\Edge\Entity\EntityInterface|null $decorated
+   * @param EntityInterface|null $decorated
    *   The SDK entity that this Drupal entity decorates.
    */
   public function __construct(array $values, string $entity_type, ?EntityInterface $decorated = NULL) {
@@ @@
   /**
    * Returns the field-attribute converter service.
    *
-   * @return \Drupal\apigee_edge\FieldAttributeConverterInterface
+   * @return FieldAttributeConverterInterface
    *   Field attribute convert service.
    */
   protected function fieldAttributeConverter(): FieldAttributeConverterInterface {
@@ @@
       return parent::get($field_name);
     }
     if (!isset($this->fields[$field_name])) {
-      /** @var \Drupal\field\Entity\FieldConfig $definition */
+      /** @var FieldConfig $definition */
       // Otherwise let's try to get the value of a field from an attribute
       // on the decorated entity.
       $value = $this->fieldAttributeConverter()->getFieldValueFromAttribute($this->entityTypeId, $field_name, $this->decorated->getAttributes());
       // Based on \Drupal\Core\Entity\ContentEntityBase::getTranslatedField().
-      /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $manager */
+      /** @var FieldTypePluginManagerInterface $manager */
       $manager = \Drupal::service('plugin.manager.field.field_type');
       $this->fields[$field_name] = $manager->createFieldItemList($this, $field_name, $value);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


146) modules/contrib/apigee_edge/src/Entity/AppWarningsCheckerInterface.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Checks credentials of an app and returns warnings about them.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity to be checked.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


147) modules/contrib/apigee_edge/src/Entity/AppWarningsChecker.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * AppWarningsChecker constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TimeInterface $time) {
@@ @@
             ->getSingularLabel();
           $args['@status'] = $cred_product->getStatus() == CredentialProduct::STATUS_REVOKED ? $this->t('revoked') : $this->t('pending');
           if (count($app->getCredentials()) === 1) {
-            /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $apiProduct */
+            /** @var ApiProductInterface $apiProduct */
             $api_product = $this->entityTypeManager->getStorage('api_product')
               ->load($cred_product->getApiproduct());
             $args['%name'] = $api_product->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


148) modules/contrib/apigee_edge/src/Entity/AppViewBuilder.php:33

    ---------- begin diff ----------
@@ @@
   public function buildMultiple(array $build_list) {
     $results = parent::buildMultiple($build_list);
     foreach (Element::children($results) as $key) {
-      /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+      /** @var AppInterface $app */
       $app = $results[$key]["#{$this->entityTypeId}"];
       // If the callback field is visible, display an error message if the
       // callback url field value does not contain a valid URI.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


149) modules/contrib/apigee_edge/src/Entity/AppTitleProvider.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Provides a title for the app analytics page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


150) modules/contrib/apigee_edge/src/Entity/AppRouteProvider.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the analytics route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAnalyticsRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


151) modules/contrib/apigee_edge/src/Entity/App.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Entity;

+use Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface;
+use Drupal\apigee_edge\Entity\Controller\AppControllerInterface;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Structure\AttributesProperty;
@@ @@
       return [];
     }
     // Get app credentials from the shared app cache if available.
-    /** @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache */
+    /** @var AppCacheInterface $app_cache */
     $app_cache = \Drupal::service('apigee_edge.controller.cache.apps');
     $app = $app_cache->getEntity($this->getAppId());
     if ($app === NULL) {
       // App has not found in cache, we have to load it from Apigee Edge.
-      /** @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller */
+      /** @var AppControllerInterface $app_controller */
       $app_controller = \Drupal::service('apigee_edge.controller.app');
       try {
         $app = $app_controller->loadApp($this->getAppId());
@@ @@
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);

     $definitions['name']->setRequired(TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


152) modules/contrib/apigee_edge/src/Element/ApigeeEntityListElement.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


153) modules/contrib/apigee_edge/src/CredentialsInterface.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the authentication object which instantiated by the key type.
    *
-   * @return \Http\Message\Authentication
+   * @return Authentication
    *   The authentication object.
    */
   public function getAuthentication(): Authentication;
@@ @@
   /**
    * Gets the key entity which stores the API credentials.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   The key entity which stores the API credentials.
    */
   public function getKey(): KeyInterface;
@@ @@
   /**
    * Gets the key type of the key entity.
    *
-   * @return \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface
+   * @return EdgeKeyTypeInterface
    *   The key type of the key entity.
    */
   public function getKeyType(): EdgeKeyTypeInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


154) modules/contrib/apigee_edge/src/Credentials.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The key entity which stores the API credentials.
    *
-   * @var \Drupal\key\KeyInterface
+   * @var KeyInterface
    */
   protected $key;

@@ @@
   /**
    * The key type of the key entity.
    *
-   * @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface
+   * @var EdgeKeyTypeInterface
    */
   protected $keyType;

@@ @@
   /**
    * Credentials constructor.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


155) modules/contrib/apigee_edge/src/Controller/ExportAnalyticsController.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Controller;

+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The PrivateTempStore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $store;

@@ @@
    * @param int $data_id
    *   The ID of the stored analytics data.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access($data_id): AccessResultInterface {
@@ @@
    * @param int $data_id
    *   The ID of the stored analytics data.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    */
   public function exportAsCsv($data_id): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


156) modules/contrib/apigee_edge/src/Controller/ErrorPageController.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * ErrorPageController constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory object.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


157) modules/contrib/apigee_edge/src/Controller/EdgeEntityFieldConfigListController.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * EdgeEntityFieldConfigListController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ @@
   public function listing($entity_type_id = NULL, $bundle = NULL, RouteMatchInterface $route_match = NULL) {
     $page = parent::listing($entity_type_id, $bundle, $route_match);
     $event = new EdgeEntityFieldConfigListAlterEvent($entity_type_id, $page);
-    $this->eventDispatcher->dispatch(EdgeEntityFieldConfigListAlterEvent::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EdgeEntityFieldConfigListAlterEvent::EVENT_NAME);
     return $event->getPage();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


158) modules/contrib/apigee_edge/src/Controller/DeveloperSyncController.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Controller;

+use Drupal\apigee_edge\JobExecutor;
 use Drupal\apigee_edge\Job\DeveloperSync;
 use Drupal\apigee_edge\Job\Job;
 use Drupal\apigee_edge\JobExecutorInterface;
@@ @@
   /**
    * Job executor.
    *
-   * @var \Drupal\apigee_edge\JobExecutor
+   * @var JobExecutor
    */
   protected $executor;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * DeveloperSyncController constructor.
    *
-   * @param \Drupal\apigee_edge\JobExecutorInterface $executor
+   * @param JobExecutorInterface $executor
    *   The job executor service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(JobExecutorInterface $executor, MessengerInterface $messenger) {
@@ @@
    *
    * Runs a developer sync in the background.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   HTTP response doing a redirect.
    */
   public function schedule(Request $request): RedirectResponse {
@@ @@
    *
    * Starts the developer sync batch process.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   HTTP response doing a redirect.
    */
   public function run(Request $request): RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


159) modules/contrib/apigee_edge/src/Controller/DeveloperAppViewControllerForDeveloper.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DeveloperAppViewControllerForDeveloper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


160) modules/contrib/apigee_edge/src/Controller/DeveloperAppKeysController.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * DeveloperAppKeysController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Returns app credentials.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The app credentials.
    */
   public function developerAppKeys($user, $app): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


161) modules/contrib/apigee_edge/src/Connector/HybridCredentials.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * HybridCredentials constructor.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


162) modules/contrib/apigee_edge/src/Connector/HybridAuthentication.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Connector;

+use Drupal\apigee_edge\SDKConnectorInterface;
 use Apigee\Edge\ClientInterface;
 use Apigee\Edge\HttpClient\Plugin\Authentication\ApigeeOnGcpOauth2;
 use Apigee\Edge\HttpClient\Plugin\Authentication\NullAuthentication;
@@ @@
    * {@inheritdoc}
    */
   protected function authClient(): ClientInterface {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     return $sdk_connector->buildClient(new NullAuthentication(), $this->getAuthServer());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


163) modules/contrib/apigee_edge/src/Connector/GceServiceAccountAuthentication.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Connector;

+use Drupal\apigee_edge\SDKConnectorInterface;
 use Apigee\Edge\ClientInterface;
 use Apigee\Edge\HttpClient\Plugin\Authentication\GceServiceAccount;

@@ @@
    * {@inheritdoc}
    */
   protected function authClient(): ClientInterface {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     return $sdk_connector->buildClient($this->getAuthHeader(), $this->getAuthServer());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


164) modules/contrib/apigee_edge/src/Commands/ApigeeEdgeCommands.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The interoperability cli service.
    *
-   * @var \Drupal\apigee_edge\CliServiceInterface
+   * @var CliServiceInterface
    */
   protected $cliService;

@@ @@
   /**
    * ApigeeEdgeCommands constructor.
    *
-   * @param \Drupal\apigee_edge\CliServiceInterface $cli_service
+   * @param CliServiceInterface $cli_service
    *   The CLI service which allows interoperability.
    */
   public function __construct(CliServiceInterface $cli_service = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


165) modules/contrib/apigee_edge/src/Command/Util/ApigeeEdgeManagementCliServiceInterface.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Create role in Apigee Edge for Drupal to use for Edge connection.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


166) modules/contrib/apigee_edge/src/Command/Util/ApigeeEdgeManagementCliService.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Command\Util;

+use GuzzleHttp\Client;
 use Drupal\Component\Utility\UrlHelper;
 use GuzzleHttp\ClientInterface;
 use Apigee\Edge\ClientInterface as ApigeeClientInterface;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * Set default permissions for a role used for Drupal portal connections.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
    * @return bool
    *   Returns true if the role exists, or false if it doesn't.
    *
-   * @throws \GuzzleHttp\Exception\TransferException
+   * @throws TransferException
    */
   public function doesRoleExist(string $org, string $email, string $password, string $base_url, string $role_name) {
     $url = $base_url . '/o/' . $org . '/userroles/' . $role_name;
@@ @@
   /**
    * Validate the Apigee Edge org connection settings.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
   /**
    * Print out helpful information to user running command when error happens.
    *
-   * @param \GuzzleHttp\Exception\TransferException $exception
+   * @param TransferException $exception
    *   The exception thrown.
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


167) modules/contrib/apigee_edge/src/Command/DrupalConsoleLog.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $logMessageParser;

@@ @@
   /**
    * The logger that messages will be passed through to.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a DrupalConsoleLog object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $log_message_parser
+   * @param LogMessageParserInterface $log_message_parser
    *   The parser to use when extracting message variables.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger instance.
    */
   public function __construct(LogMessageParserInterface $log_message_parser, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


168) modules/contrib/apigee_edge/src/CliServiceInterface.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Handle the sync interaction.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
@@ @@
   /**
    * Create an Apigee role for Drupal use.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


169) modules/contrib/apigee_edge/src/CliService.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The service that makes calls to the Apigee API.
    *
-   * @var \Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliServiceInterface
+   * @var ApigeeEdgeManagementCliServiceInterface
    */
   private $apigeeEdgeManagementCliService;

@@ @@
   /**
    * CliService constructor.
    *
-   * @param \Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliServiceInterface $apigeeEdgeManagementCliService
+   * @param ApigeeEdgeManagementCliServiceInterface $apigeeEdgeManagementCliService
    *   The ApigeeEdgeManagementCliService to make calls to Apigee Edge.
    */
   public function __construct(ApigeeEdgeManagementCliServiceInterface $apigeeEdgeManagementCliService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


170) modules/contrib/apigee_edge/src/Access/AppsPageAccessCheck.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * Grant access to the Apps page if user has any of the required permissions.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $route_match->getParameter('user');
     if ($user === NULL) {
       return AccessResult::forbidden('User is missing from route.');
@@ @@
   /**
    * Grant access to the user/[uid]/create-apps page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function createAppAccess(RouteMatchInterface $route_match, AccountInterface $account) {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $route_match->getParameter('user');
     if ($user === NULL) {
       return AccessResult::forbidden('User is missing from route.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


171) modules/contrib/apigee_edge/src/Access/AppAccessCheckByAppName.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
    *   _developer_app_access: 'view'
    * @endcode
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
    * @see \Drupal\Core\Entity\EntityAccessCheck
@@ @@
     $operation = $route->getRequirement('_app_access_check_by_app_name');
     // If $entity_type parameter is a valid entity, call its own access check.
     $parameters = $route_match->getParameters();
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $entity = $parameters->get('app');
     if ($entity) {
       return $entity->access($operation, $account, TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


172) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamPermissionHandlerInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\apigee_edge_teams\Structure\TeamPermission;
+use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   /**
    * Gets all available team permissions.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Array of team permissions.
    */
   public function getPermissions(): array;
@@ @@
   /**
    * Returns team permissions of a developer within a team.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team entity, the developer is not necessarily member of the team.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return array
    *   Array of team permissions names.
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    */
   public function getDeveloperPermissionsByTeam(TeamInterface $team, AccountInterface $account): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


173) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamPermissionHandler.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   private $classResolver;

@@ @@
    *
    * Use getYamlDiscovery() instead.
    *
-   * @var \Drupal\Core\Discovery\YamlDiscovery|null
+   * @var YamlDiscovery|null
    */
   private $yamlDiscovery;

@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * TeamPermissionHandler constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver, TeamMembershipManagerInterface $team_membership_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     // Only add team membership based permissions to the list if the developer
     // is still member of the team in Apigee Edge.
     if (in_array($team->id(), $developer_team_ids)) {
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $member_role */
+      /** @var TeamRoleInterface $member_role */
       $member_role = $this->entityTypeManager->getStorage('team_role')->load(TeamRoleInterface::TEAM_MEMBER_ROLE);
       $permissions += $member_role->getPermissions();
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface|null $dev_team_role */
+      /** @var TeamMemberRoleInterface|null $dev_team_role */
       $dev_team_role = $this->entityTypeManager->getStorage('team_member_role')->loadByDeveloperAndTeam($account, $team);
       if ($dev_team_role) {
         foreach ($dev_team_role->getTeamRoles() as $role) {
@@ @@
   /**
    * Gets the YAML discovery.
    *
-   * @return \Drupal\Core\Discovery\YamlDiscovery
+   * @return YamlDiscovery
    *   The YAML discovery.
    */
   private function getYamlDiscovery(): YamlDiscovery {
@@ @@
   /**
    * Builds all team permissions provided by .team_permissions.yml files.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Array of team permissions.
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   If permission provider class does not implement
    *   DynamicTeamPermissionProviderInterface.
    * @throws \InvalidArgumentException
@@ @@
           // resolver.
           $permission_provider = $this->classResolver->getInstanceFromDefinition($fqcn);
           if ($permission_provider instanceof DynamicTeamPermissionProviderInterface) {
-            /** @var \Drupal\apigee_edge_teams\Structure\TeamPermission $dynamic_permission */
+            /** @var TeamPermission $dynamic_permission */
             foreach ($permission_provider->permissions() as $dynamic_permission) {
               $all_dynamic_permissions[$dynamic_permission->getName()] = $dynamic_permission;
             }
@@ @@
    * @param array $all_permissions
    *   The team permissions to be sorted.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Sorted team permissions.
    */
   protected function sortPermissions(array $all_permissions = []) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


174) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMembershipManagerInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 /**
  * Base definition of the team membership manager service.
  *
@@ @@
    * @return string[]
    *   Array of team names.
    *
-   * @throws \Drupal\apigee_edge\Exception\DeveloperDoesNotExistException
+   * @throws DeveloperDoesNotExistException
    *   If developer not found with id.
    */
   public function getTeams(string $developer): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


175) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMembershipManager.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Apigee\Edge\Api\Management\Structure\CompanyMembership;
 use Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\EntityCacheAwareControllerInterface;
@@ @@
   /**
    * The company members controller factory service.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface
+   * @var CompanyMembersControllerFactoryInterface
    */
   private $companyMembersControllerFactory;

@@ @@
   /**
    * The developer companies cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompaniesCache;

@@ @@
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   private $developerController;

@@ @@
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   private $cacheTagsInvalidator;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * TeamMembershipManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface $company_members_controller_factory
+   * @param CompanyMembersControllerFactoryInterface $company_members_controller_factory
    *   The company members controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   The developer companies cache.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CompanyMembersControllerFactoryInterface $company_members_controller_factory, DeveloperControllerInterface $developer_controller, DeveloperCompaniesCacheInterface $developer_companies_cache, CacheTagsInvalidatorInterface $cache_tags_invalidator, LoggerInterface $logger) {
@@ @@
    */
   public function removeMembers(string $team, array $developers): void {
     $controller = $this->companyMembersControllerFactory->companyMembersController($team);
-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+    /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
     $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
-    /** @var \Drupal\user\UserInterface[] $users_by_mail */
+    /** @var UserInterface[] $users_by_mail */
     $users_by_mail = array_reduce($this->entityTypeManager->getStorage('user')->loadByProperties(['mail' => $developers]), function (array $carry, UserInterface $user) {
       $carry[$user->getEmail()] = $user;
       return $carry;
@@ @@
       $controller->removeMember($developer);
       // Remove team member's roles from Drupal.
       if (array_key_exists($developer, $users_by_mail)) {
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $team_member_roles_in_teams */
+        /** @var TeamMemberRoleInterface[] $team_member_roles_in_teams */
         $team_member_roles_in_teams = $team_member_role_storage->loadByDeveloper($users_by_mail[$developer]);
         foreach ($team_member_roles_in_teams as $team_member_roles_in_team) {
           try {
@@ @@
    * {@inheritdoc}
    */
   public function getTeams(string $developer): array {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $entity = $this->entityTypeManager->getStorage('developer')->load($developer);
     if ($entity === NULL) {
       throw new DeveloperDoesNotExistException($developer);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


176) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandlerInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Checks access to an operation on a given API product.
    *
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The operation access should be checked for.
    *   Usually one of "view", "view label", "update", "delete" or "assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   (optional) The user for which to check access, default is the
    *   current user.
    * @param bool $return_as_object
    *   (optional) Defaults to FALSE.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   The access result. Returns a boolean if $return_as_object is FALSE (this
    *   is the default) and otherwise an AccessResultInterface object.
    *   When a boolean is returned, the result of AccessInterface::isAllowed() is
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


177) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandler.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;

@@ @@
   /**
    * The currently logged-in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;

@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;

@@ @@
   /**
    * TeamApiProductAccessHandler constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently logged-in user.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, TeamPermissionHandlerInterface $team_permission_handler, ModuleHandlerInterface $module_handler, AccountInterface $current_user) {
@@ @@
   /**
    * Performs access checks.
    *
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'update', 'create',
    *   'delete' or 'assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The team member for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   private function checkAccess(ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account): AccessResultInterface {
@@ @@
    * - No modules say to deny access.
    * - At least one module says to grant access.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface[] $access
+   * @param AccessResultInterface[] $access
    *   An array of access results of the fired access hook.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The combined result of the various access checks' results. All their
    *   cacheability metadata is merged as well.
    *
@@ @@
       return AccessResult::neutral();
     }

-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = array_shift($access);
     foreach ($access as $other) {
       $result = $result->orIf($other);
@@ @@
   /**
    * Tries to retrieve a previously cached access value from the static cache.
    *
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'update', 'create',
    *   'delete' or 'assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The team member for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|null
+   * @return AccessResultInterface|null
    *   The cached AccessResult, or NULL if there is no record for the given
    *   API Product, operation, and team and account in the cache.
    */
@@ @@
   /**
    * Statically caches whether the given user has access.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $access
+   * @param AccessResultInterface $access
    *   The access result.
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'update', 'create',
    *   'delete' or 'assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The team member for which to check access.
    */
   protected function setCache(AccessResultInterface $access, ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


178) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationNotifierInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Sends notification for the provided team_invitation.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation
+   * @param TeamInvitationInterface $team_invitation
    *   The team_invitation entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


179) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamInvitationNotifierEmail.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\user\UserInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
@@ @@
   /**
    * The mail service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * TeamInvitationNotifierEmail constructor.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager) {
@@ @@
       'user' => NULL,
     ];

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = user_load_by_mail($email);
     if ($user) {
       $langcode = $user->getPreferredLangcode();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


180) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamContextManagerInterface.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Determines the current context from the route.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The current entity or NULL.
    */
   public function getCurrentContextEntity(): ?EntityInterface;
@@ @@
   /**
    * Returns the destination url for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The developer or team entity.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The destination URL.
    */
   public function getDestinationUrlForEntity(EntityInterface $entity): ?Url;
@@ @@
   /**
    * Gets the corresponding route name for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The developer or team entity.
    *
    * @return null|string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


181) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/TeamContextManager.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * TeamContextManager constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


182) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Structure/TeamPermission.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The human readable name of the team permission.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   private $label;

@@ @@
   /**
    * The optional description of the team permission.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @var TranslatableMarkup|null
    */
   private $description;

@@ @@
   /**
    * The category of the team permission.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   private $category;

@@ @@
    *
    * @param string $name
    *   The unique machine name of the team permission.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $label
+   * @param TranslatableMarkup $label
    *   The human-readable name of the team permission, to be shown on the
    *   team permission administration page.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $category
+   * @param TranslatableMarkup $category
    *   The category that the team permission belongs (ex.: "Team Apps", the
    *   name of the provider module, etc.), to be shown on the team permission
    *   administration page.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $description
+   * @param TranslatableMarkup|null $description
    *   A description of what the team permission does, to be shown on the team
    *   permission administration page.
    */
@@ @@
   /**
    * Returns the human readable name of the team permission.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The human readable name of the permission.
    */
   public function getLabel(): TranslatableMarkup {
@@ @@
   /**
    * Returns the description of the team permission.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   The description of the permission, or NULL.
    */
   public function getDescription(): ?TranslatableMarkup {
@@ @@
   /**
    * Returns the category of the team permission.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The category of the team permission.
    */
   public function getCategory(): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


183) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Routing/TeamAppDevelRouteFixerSubscriber.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * TeamAppDevelRouteFixerSubscriber constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


184) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/views/access/TeamPermission.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TeamPermissionHandlerInterface $team_permission_handler, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


185) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/TeamAppsLocalTask.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Plugin\Menu;

+use Drupal\apigee_edge_teams\Entity\Storage\TeamAppStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Menu\LocalTaskDefault;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The Team App entity type definition.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamAppStorageInterface|\Drupal\Core\Entity\EntityTypeInterface
+   * @var TeamAppStorageInterface|EntityTypeInterface
    */
   private $teamAppDefinition;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $team_app_definition
+   * @param EntityTypeInterface $team_app_definition
    *   The Team App entity definition.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeInterface $team_app_definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


186) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Menu/AddAppForTeamLocalAction.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Plugin\Menu;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Menu\LocalActionDefault;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ @@
   /**
    * The team app entity type definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $teamAppEntity;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider to load routes by name.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


187) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/EntityReferenceSelection/TeamMembersSelection.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;

@@ @@
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   private $developerController;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, Connection $connection, TeamMembershipManagerInterface $team_membership_manager, DeveloperControllerInterface $developer_controller, LoggerInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


188) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Plugin/Block/TeamContextSwitcherBlock.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Plugin\Block;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\apigee_edge_teams\TeamContextManagerInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Apigee team membership manager.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;

@@ @@
   /**
    * The Apigee team context manager.
    *
-   * @var \Drupal\apigee_edge_teams\TeamContextManagerInterface
+   * @var TeamContextManagerInterface
    */
   protected $teamContextManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The Apigee team membership manager.
-   * @param \Drupal\apigee_edge_teams\TeamContextManagerInterface $team_context_manager
+   * @param TeamContextManagerInterface $team_context_manager
    *   The Apigee team context manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $account, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, TeamContextManagerInterface $team_context_manager) {
@@ @@

     $links = [];

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       // No link if we are on the current context route.
       if ($current_context instanceof EntityInterface && $current_context->getEntityTypeId() === $entity->getEntityTypeId() && $current_context->id() === $entity->id()) {
@@ @@
    * @return array
    *   An array of additional links keyed with the route name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getAdditionalLinks() {
     return [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


189) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/ParamConverter/TeamAppNameConverter.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\ParamConverter;

+use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge\Entity\Storage\AppStorage;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * Constructs a TeamAppNameConverter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger) {
@@ @@
       return NULL;
     }
     $entity = NULL;
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     // If {team} parameter is before the {team_app} in the route then
     // entity parameter converter should have already up-casted it to
     // a team object if not then let's try to up-cast it here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


190) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamPermissionsForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Form;

+use Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\TeamPermissionHandlerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * TeamPermissionsForm constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permissions
+   * @param TeamPermissionHandlerInterface $team_permissions
    *   The team permission handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(TeamPermissionHandlerInterface $team_permissions, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->configFactory()->getEditable('apigee_edge_teams.team_settings')->set('non_member_team_apps_visible_api_products', array_keys(array_filter($form_state->getValue('non_member_team_apps_visible_api_products', []))))->save();

-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface $storage */
+    /** @var TeamRoleStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('team_role');
     foreach ($form_state->getValue('role_names') as $role_name => $name) {
       $storage->changePermissions($role_name, (array) $form_state->getValue($role_name));
@@ @@
   /**
    * Gets the team roles to display in this form.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[]
+   * @return TeamRoleInterface[]
    *   Array of team roles.
    */
   protected function getTeamRoles(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


191) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamMembersFormBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Form;

+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorage;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The team from the route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;

@@ @@
   /**
    * Team role storage.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface
+   * @var TeamRoleStorageInterface
    */
   protected $teamRoleStorage;

@@ @@
   /**
    * Team member role storage.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorage
+   * @var TeamMemberRoleStorage
    */
   protected $teamMemberRoleStorage;

@@ @@
   /**
    * TeamMembersFormBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


192) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/TeamAppApiKeyAddForm.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The team from route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


193) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/RemoveTeamMemberForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Form;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\user\UserStorageInterface;
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
@@ @@
   /**
    * The team from the route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;

@@ @@
   /**
    * The developer from the route.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   protected $developer;

@@ @@
   /**
    * The team entity type definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $teamEntityType;

@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * RemoveTeamMemberForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager) {
@@ @@
     // @see \Drupal\apigee_edge_teams\Controller\TeamMembersList::buildRow()
     $users = $this->userStorage->loadByProperties(['mail' => $this->developer->getEmail()]);
     if (!empty($users)) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = reset($users);
       $developer_label = $user->label();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


194) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/EditTeamMemberForm.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The developer from the route.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   protected $developer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


195) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Form/AddTeamMembersForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Form;

+use Drupal\user\UserStorageInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The team invitation storage.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface
+   * @var TeamInvitationStorageInterface
    */
   protected $teamInvitationStorage;

@@ @@
   /**
    * AddTeamMemberForms constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


196) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\EventSubscriber;

+use Drupal\apigee_edge_teams\Entity\TeamAppInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;

@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * TeamStatusWarningSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translations service.
    */
   public function __construct(AccountInterface $current_user, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, MessengerInterface $messenger, TranslationInterface $string_translation) {
@@ @@
   /**
    * Display's a warning message if team's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event) {
@@ @@
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos($this->routeMatch->getRouteName(), 'entity.team_app.') === 0) {
       // Team is available in most of the team app routes as a route parameter.
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface|NULL $team */
+      /** @var TeamInterface|NULL $team */
       $team = $this->routeMatch->getParameter('team');

       if ($team === NULL) {
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $app */
+        /** @var TeamAppInterface $app */
         $app = $this->routeMatch->getParameter('team_app') ?? $this->routeMatch->getParameter('app');
         if ($app) {
           $team = $this->entityTypeManager->getStorage('team')->load($app->getCompanyName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


197) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The team member api product access handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface
+   * @var TeamMemberApiProductAccessHandlerInterface
    */
   private $teamMemberApiProductAccessHandler;

@@ @@
   /**
    * TeamApiProductAccessCacheReset constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
+   * @param TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
    *   The team member api product access handler.
    */
   public function __construct(TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler) {
@@ @@
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Contracts\EventDispatcher\Event $event
+   * @param Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


198) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\EventSubscriber;

+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
+use Drupal\user\UserInterface;
+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRole;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\Event\TeamInvitationEventInterface;
@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The team membership manager.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The team_member_role storage handler.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface
+   * @var TeamMemberRoleStorageInterface
    */
   protected $teamMemberRoleStorage;

@@ @@
   /**
    * The team_invitation notifier service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface
+   * @var TeamInvitationNotifierInterface
    */
   protected $teamInvitationNotifier;

@@ @@
   /**
    * TeamInvitationSubscriber constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager.
-   * @param \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface $team_invitation_notifier
+   * @param TeamInvitationNotifierInterface $team_invitation_notifier
    *   The team_invitation notifier service.
    */
   public function __construct(LoggerChannelInterface $logger, EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, TeamInvitationNotifierInterface $team_invitation_notifier) {
@@ @@
   /**
    * Callback for on created event.
    *
-   * @param \Drupal\apigee_edge_teams\Event\TeamInvitationEventInterface $event
+   * @param TeamInvitationEventInterface $event
    *   The event.
    */
   public function onCreated(TeamInvitationEventInterface $event) {
@@ @@
   /**
    * Callback for on accepted event.
    *
-   * @param \Drupal\apigee_edge_teams\Event\TeamInvitationEventInterface $event
+   * @param TeamInvitationEventInterface $event
    *   The event.
    */
   public function onAccepted(TeamInvitationEventInterface $event) {
@@ @@
         return $team_member_role->id();
       }, $team_invitation->getTeamRoles());

-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = user_load_by_mail($team_invitation->getRecipient());

       if (!$user) {
@@ @@
         return;
       }

-      /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $team_member_roles */
+      /** @var TeamMemberRoleInterface $team_member_roles */
       $team_member_roles = $this->teamMemberRoleStorage->loadByDeveloperAndTeam($user, $team);
       if ($team_member_roles !== NULL) {
         // It could happen the a developer got removed from a team (company)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


199) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationQueryAccessSubscriber.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * TeamInvitationQueryAccessSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Modifies the access conditions for team_invitation.
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onQueryAccess(QueryAccessEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


200) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\EventSubscriber;

+use Drupal\Core\Controller\ControllerResolverInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * The class resolver service.
    *
-   * @var \Drupal\Core\Controller\ControllerResolverInterface
+   * @var ControllerResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * TeamInactiveStatusSubscriber constructor.
    *
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    * @param array $main_content_renderers
    *   The available main content renderer service IDs.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(ClassResolverInterface $class_resolver, RouteMatchInterface $route_match, array $main_content_renderers, AccountInterface $current_user) {
@@ @@
   /**
    * Display an error message on inactive team routes.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event) {
@@ @@
       return;
     }

-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->routeMatch->getParameter('team');
     if (!$team || $team->getStatus() !== TeamInterface::STATUS_INACTIVE) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


201) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/EventSubscriber/TeamAppFieldConfigListAlterEventSubscriber.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   private $formBuilder;

@@ @@
   /**
    * TeamAppFieldConfigListAlterEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(FormBuilderInterface $form_builder) {
@@ @@
   /**
    * Alters the field config UI page.
    *
-   * @param \Drupal\apigee_edge\Event\EdgeEntityFieldConfigListAlterEvent $event
+   * @param EdgeEntityFieldConfigListAlterEvent $event
    *   The field config list alter event.
    */
   public function alterPage(EdgeEntityFieldConfigListAlterEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


202) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEventInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the team_invitation entity.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
+   * @return TeamInvitationInterface
    *   The team invitation.
    */
   public function getTeamInvitation(): TeamInvitationInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


203) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The team_invitation entity.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
+   * @var TeamInvitationInterface
    */
   protected $teamInvitation;

@@ @@
   /**
    * TeamInvitationEvent constructor.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation
+   * @param TeamInvitationInterface $team_invitation
    *   The team invitation.
    */
   public function __construct(TeamInvitationInterface $team_invitation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


204) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamViewBuilder.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The 'apigee_edge_teams.team_settings' config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * TeamViewBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The 'apigee_edge_teams.team_settings' config.
-   * @param \Drupal\Core\Theme\Registry|null $theme_registry
+   * @param Registry|null $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null $entity_display_repository
+   * @param EntityDisplayRepositoryInterface|null $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Config $config, Registry $theme_registry = NULL, EntityDisplayRepositoryInterface $entity_display_repository = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


205) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamTitleProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Provides a title for the team members listing page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


206) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoutingHelperTrait.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * If route contains the {team} parameter add required changes to the route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to be checked and altered if needed.
    */
   private function ensureTeamParameter(Route $route) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


207) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRouteProvider.php:96

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the list team members route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getListTeamMembersRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add team members route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddTeamMembersRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the edit team member route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEditTeamMemberRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the remove team member route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRemoveTeamMemberRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


208) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamRoleAccessHandler.php:33

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $entity */
+    /** @var TeamRoleInterface $entity */
     if ($operation === 'delete' && $entity->isLocked()) {
       return AccessResult::forbidden('Team role is locked.')->cachePerUser();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


209) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamMemberRoleInterface.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the developer's user entity.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The developer's user entity or null if the entity is new and it has not
    *   been set yet.
    */
@@ @@
   /**
    * Returns the team entity.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInterface|null
+   * @return TeamInterface|null
    *   The team entity or null if the entity is new and it has not been set
    *   yet.
    */
@@ @@
   /**
    * Returns the team roles of the developer within the team.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[]
+   * @return TeamRoleInterface[]
    *   Array of team roles or an empty array if the entity is new and it has
    *   not been set yet.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


210) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamMemberRole.php:126

    ---------- begin diff ----------
@@ @@
   public function getTeamRoles(): array {
     $roles = [];

-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $reference */
+    /** @var TeamMemberRoleInterface $reference */
     foreach ($this->get('roles') as $reference) {
       // The team role has been deleted.
       if ($reference->entity === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


211) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProviderInterface.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Provides the accept title for a team_invitation.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ @@
   /**
    * Provides the decline title for a team_invitation.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ @@
   /**
    * Provides the resend title for a team_invitation.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


212) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationRouteProvider.php:59

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the delete-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the notify-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getResentFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the accept-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAcceptFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the decline-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeclineFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


213) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationInterface.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the team entity.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInterface|null
+   * @return TeamInterface|null
    *   The team entity or null.
    */
   public function getTeam(): ?TeamInterface;
@@ @@
   /**
    * Sets the team of the invitation.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team entity.
    *
    * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
@@ @@
   /**
    * Returns the team roles.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[]|null
+   * @return TeamRoleInterface[]|null
    *   The team roles or null.
    */
   public function getTeamRoles(): ?array;
@@ @@
   /**
    * Sets the team roles of the invitation.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[] $team_roles
+   * @param TeamRoleInterface[] $team_roles
    *   An array of team roles.
    *
    * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


214) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitationAccessControlHandler.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The team permissions handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;

@@ @@
   /**
    * TeamInvitationAccessControlHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permissions handler.
    */
   public function __construct(EntityTypeInterface $entity_type, TeamPermissionHandlerInterface $team_permission_handler) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitation $entity */
+    /** @var TeamInvitation $entity */
     $account = $this->prepareUser($account);

     // Check if team exists.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


215) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamInvitation.php:273

    ---------- begin diff ----------
@@ @@

     $config = \Drupal::config('apigee_edge_teams.team_settings');

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = user_load_by_mail($this->getRecipient());

     if ($user && $config->get('team_invitation_auto_approve')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


216) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppRouteProvider.php:43

    ---------- begin diff ----------
@@ @@
     $collection = parent::getRoutes($entity_type);
     $entity_type_id = $entity_type->id();

-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     foreach ($collection as $route) {
       $this->alterRoutesWithAppName($route);
     }
@@ @@
   /**
    * Gets the add-form route for team.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRouteForTeam(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the collection route for a team.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRouteByTeam(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets APpi Keys for team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getTeamApiKeysRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the add-api-key-form route for a team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddApiKeyRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the delete-api-key-form route for a team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteApiKeyRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revoke-api-key-form route for a team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevokeApiKeyRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Alters routers with {app} and not {team_app}.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   Route object.
    */
   private function alterRoutesWithAppName(Route $route): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


217) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAppAccessHandler.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * The team permissions handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;

@@ @@
   /**
    * TeamAppAccessHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permissions handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, TeamPermissionHandlerInterface $team_permission_handler, RouteMatchInterface $route_match) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $entity */
+    /** @var TeamAppInterface $entity */
     $result = parent::checkAccess($entity, $operation, $account);

     if ($result->isNeutral()) {
       $result = $this->checkAccessByPermissions($account);
       if ($result->isNeutral()) {
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+        /** @var TeamInterface $team */
         $team = $this->entityTypeManager->getStorage('team')->load($entity->getCompanyName());
         if ($team) {
           // The developer is not member of the team.
@@ @@
   /**
    * Performs access check based on a user's site-wide permissions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   private function checkAccessByPermissions(AccountInterface $account): AccessResultInterface {
@@ @@
   /**
    * Performs access check based on a user's team-level permissions.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that owns the app.
    * @param string $operation
    *   The entity operation on a team app: view, create, delete, update
    *   analytics, add_api_key, delete_api_key or revoke_api_key.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   private function checkAccessByTeamMemberPermissions(TeamInterface $team, string $operation, AccountInterface $account): AccessResultInterface {
@@ @@
    *
    * Adds necessary cache tags to the access result object.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $result
+   * @param AccessResultInterface $result
    *   The access result to be altered if needed.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to access check has happened.
    */
   private function processAccessResult(AccessResultInterface $result, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


218) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamApp.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity;

+use Apigee\Edge\Api\Management\Entity\CompanyAppInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
 use Apigee\Edge\Api\Management\Entity\CompanyApp;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Drupal\apigee_edge\Entity\App;
@@ @@
   /**
    * The decorated company app entity from the SDK.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\CompanyApp
+   * @var CompanyApp
    */
   protected $decorated;

@@ @@
    *   The SDK entity that this Drupal entity decorates.
    */
   public function __construct(array $values, ?string $entity_type = NULL, ?EdgeEntityInterface $decorated = NULL) {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $decorated */
+    /** @var CompanyAppInterface $decorated */
     $entity_type = $entity_type ?? 'team_app';
     parent::__construct($values, $entity_type, $decorated);
   }
@@ @@
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);
     $team_app_singular_label = \Drupal::entityTypeManager()->getDefinition('team_app')->getSingularLabel();
     $team_app_singular_label = mb_convert_case($team_app_singular_label, MB_CASE_TITLE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


219) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/TeamAccessHandler.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity;

+use Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface;
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
@@ @@
   /**
    * The developer storage.
    *
-   * @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface
+   * @var DeveloperStorageInterface
    */
   private $developerStorage;

@@ @@
   /**
    * TeamAccessHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = parent::checkAccess($entity, $operation, $account);

     if ($result->isNeutral()) {
@@ @@
         if ($account->isAuthenticated()) {
           // Grant access to the user if it is a member of the Team.
           // (Reminder, anonymous user can not be member of a team.
-          /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|null $developer */
+          /** @var DeveloperInterface|null $developer */
           $developer = $this->developerStorage->load($account->getEmail());
           if ($developer && in_array($entity->id(), $developer->getCompanies())) {
             $result = AccessResult::allowed();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


220) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Team.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity;

+use Drupal\Core\Field\BaseFieldDefinition;
 use Apigee\Edge\Api\Management\Entity\Company;
 use Apigee\Edge\Entity\EntityInterface;
 use Apigee\Edge\Structure\AttributesProperty;
@@ @@
   /**
    * The decorated company entity from the SDK.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\Company
+   * @var Company
    */
   protected $decorated;

@@ @@
    * @param null|string $entity_type
    *   Type of the entity. It is optional because constructor sets its default
    *   value.
-   * @param \Apigee\Edge\Entity\EntityInterface|null $decorated
+   * @param EntityInterface|null $decorated
    *   The SDK entity that this Drupal entity decorates.
    */
   public function __construct(array $values, ?string $entity_type, ?EntityInterface $decorated = NULL) {
@@ @@
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);

     $team_singular_label = \Drupal::entityTypeManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


221) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamStorage.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Storage;

+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Entity\Controller\CachedManagementApiEdgeEntityControllerProxy;
 use Drupal\apigee_edge\Entity\Controller\EdgeEntityControllerInterface;
@@ @@
   /**
    * The team controller service.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamControllerInterface
+   * @var TeamControllerInterface
    */
   private $teamController;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * Constructs an DeveloperStorage instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamControllerInterface $team_controller
+   * @param TeamControllerInterface $team_controller
    *   The team controller service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, TeamControllerInterface $team_controller, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config, LoggerInterface $logger) {
@@ @@
    * {@inheritdoc}
    */
   protected function doSave($id, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $entity */
+    /** @var TeamInterface $entity */
     $team_status = $entity->getStatus();
     $result = parent::doSave($id, $entity);

@@ @@
    * {@inheritdoc}
    */
   protected function doPostSave(EntityInterface $entity, $update) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $entity */
+    /** @var TeamInterface $entity */
     if (!$update) {
-      /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+      /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
       $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $team_roles_by_teams */
+      /** @var TeamMemberRoleInterface[] $team_roles_by_teams */
       $team_roles_by_teams = $team_member_role_storage->loadByTeam($entity);
       if ($team_roles_by_teams) {
         // Teams (Companies) can be deleted outside of Drupal so it could
@@ @@
    */
   protected function doDelete($entities) {
     parent::doDelete($entities);
-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+    /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
     $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $dev_roles_by_teams */
+    /** @var TeamMemberRoleInterface[] $dev_roles_by_teams */
     $dev_roles_by_teams = $team_member_role_storage->loadByProperties(['team' => array_keys($entities)]);
     // When a team gets deleted all team member roles related to the team
     // should be deleted from the database.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


222) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorage.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Storage;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   If team role does not exist.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   If changes could not be saved.
    */
   public function changePermissions(string $role_name, array $permissions): void {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $role */
+    /** @var TeamRoleInterface $role */
     $role = $this->load($role_name);
     if ($role === NULL) {
       throw new InvalidArgumentException("Team role with name does not exist: {$role_name}");
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


223) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorageInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Storage;

+use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
@@ @@
    * perform this check if needed. Thanks for this approach we can minimize
    * the API calls that are being sent to Apigee Edge.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface|null
+   * @return TeamMemberRoleInterface|null
    *   Team member role object if the developer has team roles within a team,
    *   null otherwise.
    */
@@ @@
    * perform this check if needed. Thanks for this approach we can minimize
    * the API calls that are being sent to Apigee Edge.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[]
+   * @return TeamMemberRoleInterface[]
    *   Array of team member role objects.
    */
   public function loadByDeveloper(AccountInterface $account): array;
@@ @@
    * perform this check if needed. Thanks for this approach we can minimize
    * the API calls that are being sent to Apigee Edge.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[]
+   * @return TeamMemberRoleInterface[]
    *   Array of team member role objects related to a team.
    */
   public function loadByTeam(TeamInterface $team): array;
@@ @@
   /**
    * Adds team roles to a developer in a team.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    * @param string[] $roles
    *   Array of team role entity ids.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface
+   * @return TeamMemberRoleInterface
    *   The updated team member role entity.
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidArgumentException
+   * @throws EntityStorageException
    */
   public function addTeamRoles(AccountInterface $account, TeamInterface $team, array $roles): TeamMemberRoleInterface;

@@ @@
    * If you would like to remove a developer from a team (remove its "member"
    * team role) use the team membership manager service.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    * @param string[] $roles
    *   Array of team role entity ids.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface
+   * @return TeamMemberRoleInterface
    *   The updated team member role entity.
    */
   public function removeTeamRoles(AccountInterface $account, TeamInterface $team, array $roles): TeamMemberRoleInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


224) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorage.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * TeamMemberRoleStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend to be used.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, TeamMembershipManagerInterface $team_membership_manager, LoggerInterface $logger, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, EntityTypeManagerInterface $entity_type_manager = NULL) {
@@ @@
     }
     // Indicates whether a new team member role entity had to be created
     // or not.
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $team_member_roles */
+    /** @var TeamMemberRoleInterface $team_member_roles */
     $team_member_roles = $this->loadByDeveloperAndTeam($account, $team);
     if ($team_member_roles === NULL) {
       $team_member_roles = $this->create(['uid' => ['target_id' => $account->id()], 'team' => ['target_id' => $team->id()]]);
@@ @@
     if (!in_array($team->id(), $developer_team_ids)) {
       throw new InvalidArgumentException("{$account->getEmail()} is not member of {$team->id()} team.");
     }
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $team_member_roles */
+    /** @var TeamMemberRoleInterface $team_member_roles */
     $team_member_roles = $this->loadByDeveloperAndTeam($account, $team);
     if ($team_member_roles === NULL) {
       throw new InvalidArgumentException("{$account->getEmail()} does not have team roles in {$team->id()} team.");
@@ @@
    * {@inheritdoc}
    */
   protected function doSave($id, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $entity */
+    /** @var TeamMemberRoleInterface $entity */
     $return = parent::doSave($id, $entity);

     if ($return === SAVED_NEW) {
@@ @@
    * {@inheritdoc}
    */
   protected function doDelete($entities) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $entity */
+    /** @var TeamMemberRoleInterface $entity */
     foreach ($entities as $entity) {
       // This sanity check allows uninstalling the module if there is no
       // connection to Apigee Edge.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


225) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorageInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Storage;

+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\Core\Entity\EntityStorageInterface;

 /**
@@ @@
    * @param string|null $team_id
    *   The team id.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface[]
+   * @return TeamInvitationInterface[]
    *   An array of team_invitation entities for this email address.
    */
   public function loadByRecipient(string $email, ?string $team_id = NULL): array;
@@ @@
   /**
    * Returns all team_invitation entities set to expire.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface[]
+   * @return TeamInvitationInterface[]
    *   An array of team_invitations entities set to expire.
    */
   public function getInvitationsToExpire(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


226) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * TeamInvitationStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entity_type_manager
+   * @param EntityTypeManagerInterface|null $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, TimeInterface $time) {
@@ @@
    * {@inheritdoc}
    */
   protected function invokeHook($hook, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $entity */
+    /** @var TeamInvitationInterface $entity */
     parent::invokeHook($hook, $entity);

     switch ($hook) {
       case 'insert':
         if ($entity->isAccepted()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::ACCEPTED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::ACCEPTED);
         }
         else {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::CREATED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::CREATED);
         }
         break;

       case 'update':
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $original */
+        /** @var TeamInvitationInterface $original */
         $original = $entity->original;
         if (!$original) {
           return;
@@ @@
         unset($entity->original);

         if (!$original->isDeclined() && $entity->isDeclined()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::DECLINED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::DECLINED);
         }

         if (!$original->isAccepted() && $entity->isAccepted()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::ACCEPTED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::ACCEPTED);
         }
         break;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


227) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorage.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The team app controller factory.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface
+   * @var TeamAppControllerFactoryInterface
    */
   private $teamAppControllerFactory;

@@ @@
   /**
    * AppStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $team_app_controller_factory
+   * @param TeamAppControllerFactoryInterface $team_app_controller_factory
    *   The team app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, TeamAppControllerFactoryInterface $team_app_controller_factory, AppControllerInterface $app_controller) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


228) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Query/TeamAppQuery.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Query;

+use Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface;
 use Drupal\apigee_edge\Entity\Query\AppQueryBase;

@@ @@
    * {@inheritdoc}
    */
   protected function appByOwnerController(string $owner): AppByOwnerControllerInterface {
-    /** @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $team_app_controller_factory */
+    /** @var TeamAppControllerFactoryInterface $team_app_controller_factory */
     $team_app_controller_factory = \Drupal::service('apigee_edge_teams.controller.team_app_controller_factory');
     return $team_app_controller_factory->teamAppController($owner);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


229) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamListBuilder.php:100

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $entity */
+    /** @var TeamInterface $entity */
     $row['name']['data'] = $entity->toLink()->toRenderable();
     $row['status']['data'] = [
       '#type' => 'status_property',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


230) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamInvitationListBuilder.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\ListBuilder;

+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $entity */
+    /** @var TeamInvitationInterface $entity */
     $operations = parent::getDefaultOperations($entity);

     if ($entity->isPending() && $entity->access('accept') && $entity->hasLinkTemplate('accept-form')) {
@@ @@
       ];
     }

-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $entity */
+    /** @var TeamInvitationInterface $entity */
     if ($entity->access('delete') && $entity->hasLinkTemplate('delete-form')) {
       $operations['delete'] = [
         'title' => $this->t('Revoke'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


231) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListByTeam.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * TeamAppListByTeam constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $render
+   * @param RendererInterface $render
    *   The render.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, RendererInterface $render, RequestStack $request_stack, TimeInterface $time, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory = NULL) {
@@ @@
   /**
    * Returns the title of the "team app list by team" page.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title of the page.
    */
   public function pageTitle(): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


232) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListBuilder.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\ListBuilder;

+use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Entity\ListBuilder\AppListBuilder;

@@ @@
    */
   protected function buildInfoRow(AppInterface $app, array &$rows) {
     /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $app */
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface[] $teams */
+    /** @var TeamInterface[] $teams */
     $teams = $this->entityTypeManager->getStorage('team')->loadMultiple();
     $css_id = $this->getCssIdForInfoRow($app);
     $rows[$css_id]['data']['team']['data'] = $teams[$app->getCompanyName()]->access('view') ? $teams[$app->getCompanyName()]->toLink()->toRenderable() : $teams[$app->getCompanyName()]->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


233) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationResendForm.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The team_invitation notifier service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface
+   * @var TeamInvitationNotifierInterface
    */
   protected $teamInvitationNotifier;

@@ @@
   /**
    * TeamInvitationResendForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface $team_invitation_notifier
+   * @param TeamInvitationNotifierInterface $team_invitation_notifier
    *   The team_invitation notifier service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, TeamInvitationNotifierInterface $team_invitation_notifier) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation */
+    /** @var TeamInvitationInterface $team_invitation */
     $team_invitation = $this->entity;

     // Reset the status and the expiry date.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


234) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationFormBase.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Form;

+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The team_invitaion entity.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
+   * @var TeamInvitationInterface
    */
   protected $entity;

@@ @@
   /**
    * The team.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


235) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeleteForm.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The team.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


236) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeclineForm.php:53

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $invitation */
+    /** @var TeamInvitationInterface $invitation */
     $invitation = $this->entity;
     $invitation->setStatus(TeamInvitationInterface::STATUS_DECLINED)->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


237) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationAcceptForm.php:53

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $invitation */
+    /** @var TeamInvitationInterface $invitation */
     $invitation = $this->entity;
     $invitation->setStatus(TeamInvitationInterface::STATUS_ACCEPTED)->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


238) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamForm.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Form;

+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Entity\Form\EdgeEntityFormInterface;
 use Drupal\apigee_edge\Entity\Form\FieldableEdgeEntityForm;
@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * TeamForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, AccountProxyInterface $current_user, LoggerChannelInterface $logger) {
@@ @@
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = parent::buildEntity($form, $form_state);

     // ADMIN_EMAIL_ATTRIBUTE is a required field for monetization.
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->entity;

     $form['name'] = [
@@ @@
    *   Team name.
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return bool
@@ @@
    * {@inheritdoc}
    */
   protected function actions(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->entity;
     $label = mb_strtolower($this->entityTypeManager->getDefinition('team')->getSingularLabel());
     $actions = parent::actions($form, $form_state);
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->entity;
     $was_new = $team->isNew();
     $result = parent::save($form, $form_state);
@@ @@
         $this->teamMembershipManager->addMembers($team->id(), [$this->currentUser->getEmail()]);

         try {
-          /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+          /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
           $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
           $team_member_role_storage->addTeamRoles($this->currentUser(), $team, [TeamRoleInterface::TEAM_ADMIN_ROLE]);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


239) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppFormTrait.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Form;

+use Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Exception\ClientErrorException;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
@@ @@
     // query to reduce the number API calls. (Entity query may load all
     // developers to return whether the given team has an app with
     // the provided name already.)
-    /** @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $factory */
+    /** @var TeamAppControllerFactoryInterface $factory */
     $factory = \Drupal::service('apigee_edge_teams.controller.team_app_controller_factory');
     $app = TRUE;
     try {
@@ @@
   /**
    * Allows to access to the injected entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   private function getEntityTypeManager(): EntityTypeManagerInterface {
@@ @@
   /**
    * Allows to access to the injected team member API product access handler.
    *
-   * @return \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface
+   * @return TeamMemberApiProductAccessHandlerInterface
    *   The team member API product access handler.
    */
   private function getTeamMemberApiProductAccessHandler(): TeamMemberApiProductAccessHandlerInterface {
@@ @@
   /**
    * Allows to access to the injected team membership manager.
    *
-   * @return \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @return TeamMembershipManagerInterface
    *   The team membership manager.
    */
   private function getTeamMembershipMananger(): TeamMembershipManagerInterface {
@@ @@
    * @param string $config
    *   Config object name.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The config object.
    */
   private function getConfigObject(string $config): ImmutableConfig {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = \Drupal::service('config.factory');
     if (method_exists($this, 'configFactory') && $this->configFactory() instanceof ConfigFactoryInterface) {
       $config_factory = $this->configFactory();
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ @@
    */
   protected function apiProductList(array $form, FormStateInterface $form_state): array {
     $team_name = $this->getTeamName($form, $form_state);
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface|null $team */
+    /** @var TeamInterface|null $team */
     $team = $this->getEntityTypeManager()->getStorage('team')->load($team_name);
     // Sanity check, team should always exists with team name in this context.
     if ($team === NULL) {
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


240) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppEditForm.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface
+   * @var TeamAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;

@@ @@
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;

@@ @@
   /**
    * Constructs TeamAppEditForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The team app credential controller factory.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory, TeamPermissionHandlerInterface $team_permission_handler = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


241) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormForTeam.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The team from the route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


242) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormBase.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface
+   * @var TeamAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;

@@ @@
   /**
    * Constructs TeamAppCreateFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API Product controller service.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The team app credential controller factory.
-   * @param \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
+   * @param TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
    *   The team API product access handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller, TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory, TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


243) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateForm.php:72

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public static function updateApiProductList(array $form, FormStateInterface $form_state) : AjaxResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


244) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamController.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Controller;

+use Apigee\Edge\Api\Management\Entity\CompanyInterface;
+use Apigee\Edge\Api\Management\Entity\CompanyAppInterface;
 use Apigee\Edge\Api\Management\Controller\CompanyController as EdgeCompanyController;
 use Apigee\Edge\Api\Management\Controller\CompanyControllerInterface as EdgeCompanyControllerInterface;
 use Apigee\Edge\Entity\EntityInterface;
@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;

@@ @@
   /**
    * The entity cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   private $entityCache;

@@ @@
   /**
    * The entity id cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $entityIdCache;

@@ @@
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;

@@ @@
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;

@@ @@
   /**
    * The company membership object cache.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface
+   * @var CompanyMembershipObjectCacheInterface
    */
   private $companyMembershipObjectCache;

@@ @@
   /**
    * The developer companies cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompaniesCache;

@@ @@
   /**
    * CompanyController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface $entity_cache
+   * @param EntityCacheInterface $entity_cache
    *   The entity cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The entity id cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
    *   The app name cache by owner factory service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $company_membership_object_cache
+   * @param CompanyMembershipObjectCacheInterface $company_membership_object_cache
    *   The company membership object cache.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   The developer companies cache.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, EntityCacheInterface $entity_cache, EntityIdCacheInterface $entity_id_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner, CompanyMembershipObjectCacheInterface $company_membership_object_cache, DeveloperCompaniesCacheInterface $developer_companies_cache) {
@@ @@
    * {@inheritdoc}
    */
   public function delete(string $entity_id): EntityInterface {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyInterface $entity */
+    /** @var CompanyInterface $entity */
     $entity = $this->traitDelete($entity_id);

     // Invalidate developer companies cache to force reload
@@ @@
     // Invalidate app caches that belongs to this company.
     $app_cache = $this->appCacheByOwnerFactory->getAppCache($entity->id());
     $app_ids = [];
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $app */
+    /** @var CompanyAppInterface $app */
     foreach ($app_cache->getEntities() as $app) {
       $app_ids[] = $app->getAppId();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


245) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppEdgeEntityControllerProxy.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The team app controller factory service.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface
+   * @var TeamAppControllerFactoryInterface
    */
   private $teamAppControllerFactory;

@@ @@
   /**
    * The app controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface
+   * @var AppControllerInterface
    */
   private $appController;

@@ @@
   /**
    * TeamAppEdgeEntityControllerProxy constructor.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $team_app_controller_factory
+   * @param TeamAppControllerFactoryInterface $team_app_controller_factory
    *   The team app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(TeamAppControllerFactoryInterface $team_app_controller_factory, AppControllerInterface $app_controller) {
@@ @@
    * {@inheritdoc}
    */
   public function create(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $entity */
+    /** @var CompanyAppInterface $entity */
     if (empty($entity->getCompanyName())) {
       // Sanity check.
       throw new RuntimeException('Company name has to set on the app.');
@@ @@
    * {@inheritdoc}
    */
   public function update(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $entity */
+    /** @var CompanyAppInterface $entity */
     $controller = $this->teamAppControllerFactory->teamAppController($entity->getCompanyName());
     $controller->update($entity);
   }
@@ @@
       // Entity has not found in the entity cache, we have it from Apigee Edge.
       $entity = $this->load($id);
     }
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $entity */
+    /** @var CompanyAppInterface $entity */
     $controller = $this->teamAppControllerFactory->teamAppController($entity->getCompanyName());
     // The id that we got is a UUID, what we need is an app name.
     $controller->delete($entity->getName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


246) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactoryInterface.php:33

    ---------- begin diff ----------
@@ @@
    *   Name of an app. (Not an app id, because app credentials endpoints does
    *   not allow to use them.)
    *
-   * @return \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerInterface
+   * @return TeamAppCredentialControllerInterface
    *   The team app credentials controller.
    */
   public function teamAppCredentialController(string $owner, string $app_name): TeamAppCredentialControllerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


247) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactory.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Controller;

+use Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface;
 use Drupal\apigee_edge\SDKConnectorInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
@@ @@
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface[]
+   * @var DeveloperAppCredentialControllerInterface[]
    */
   private $instances;

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * TeamAppCredentialControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(SDKConnectorInterface $connector, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EventDispatcherInterface $event_dispatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


248) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactoryInterface.php:30

    ---------- begin diff ----------
@@ @@
    * @param string $team
    *   Name of a team.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerInterface
+   * @return TeamAppControllerInterface
    *   Team app controller.
    */
   public function teamAppController(string $team): TeamAppControllerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


249) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactory.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerInterface[]
+   * @var TeamAppControllerInterface[]
    */
   private $instances = [];

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;

@@ @@
   /**
    * The app cache that stores apps by their ids (UUIDs).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;

@@ @@
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;

@@ @@
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;

@@ @@
   /**
    * DeveloperAppControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache that stores apps by their ids (UUIDs).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
+   * @param AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory, AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


250) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Entity/Controller/TeamAppController.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Entity\Controller;

+use Apigee\Edge\Api\Management\Controller\CompanyAppControllerInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface as EdgeAppByOwnerControllerInterface;
 use Apigee\Edge\Api\Management\Controller\CompanyAppController as EdgeCompanyAppController;
 use Drupal\apigee_edge\Entity\Controller\AppByOwnerController;
@@ @@
    * {@inheritdoc}
    */
   public function getCompanyName(): string {
-    /** @var \Apigee\Edge\Api\Management\Controller\CompanyAppControllerInterface $decorated */
+    /** @var CompanyAppControllerInterface $decorated */
     $decorated = $this->decorated();
     return $decorated->getCompanyName();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


251) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/DynamicTeamPermissionProviderInterface.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\apigee_edge_teams\Structure\TeamPermission;
 /**
  * Allows modules to provide dynamic team permissions.
  *
@@ @@
   /**
    * Returns team permissions provided by a module.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Array of team permissions.
    *
    * @see \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


252) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/DefaultTeamPermissionsProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * DefaultTeamPermissionsProvider constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   String translation.
    */
   public function __construct(TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


253) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Controller/TeamMembersList.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Controller;

+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
 use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   protected $moduleHandler;

@@ @@
   /**
    * TeamMembersList constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface|null $module_handler
+   * @param ModuleHandlerInterface|null $module_handler
    *   The module handler.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler = NULL) {
@@ @@
   /**
    * Returns a list of team members.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team which members gets listed.
    *
    * @return array
@@ @@
         $carry[$item->getEmail()] = $item;
         return $carry;
       }, []);
-      /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+      /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
       $team_member_role_storage = $this->entityTypeManager()->getStorage('team_member_role');
       $team_member_roles_by_mail = array_reduce($team_member_role_storage->loadByTeam($team), function ($carry, TeamMemberRoleInterface $developer_role) {
         $carry[$developer_role->getDeveloper()->getEmail()] = $developer_role;
@@ @@
    * @param array $users_by_mail
    *   Associative array of Drupal users keyed by their email addresses. The
    *   list only contains those Drupal users who are member of the team.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $team_member_roles_by_mail
+   * @param TeamMemberRoleInterface[] $team_member_roles_by_mail
    *   Associative array of team member roles keyed by email addresses.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that the member belongs.
    *
    * @return array
@@ @@
    *
    * @param string $member
    *   The email address of a member (developer).
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that the member belongs.
    *
    * @return array
@@ @@
    *
    * @param string $member
    *   The email address of a member (developer).
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that the member belongs.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


254) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Controller/TeamAppKeysController.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Returns app credentials.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The app credentials.
    */
   public function teamAppKeys($team, $app): JsonResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


255) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembershipObjectCacheInterface.php:31

    ---------- begin diff ----------
@@ @@
    *
    * @param string $company
    *   Name of a company.
-   * @param \Apigee\Edge\Api\Management\Structure\CompanyMembership $membership
+   * @param CompanyMembership $membership
    *   Membership object with the members.
    */
   public function saveMembership(string $company, CompanyMembership $membership): void;
@@ @@
    * @param string $company
    *   Name of a company.
    *
-   * @return \Apigee\Edge\Api\Management\Structure\CompanyMembership|null
+   * @return CompanyMembership|null
    *   Membership object with the members or null if no entry found for the
    *   given company in the cache.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


256) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembershipObjectCache.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams;

+use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Apigee\Edge\Api\Management\Structure\CompanyMembership;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * Persistent cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $persistentCacheBackend;

@@ @@
   /**
    * Non-persistent cache backend.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   private $memoryCache;

@@ @@
   /**
    * The system time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $systemTime;

@@ @@
   /**
    * CompanyMembershipObjectCache constructor.
    *
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $cache_factory
+   * @param CacheFactoryInterface $cache_factory
    *   The cache factory.
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The module specific memory cache factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time service.
    */
   public function __construct(CacheFactoryInterface $cache_factory, MemoryCacheFactoryInterface $memory_cache_factory, ConfigFactoryInterface $config, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


257) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerFactoryInterface.php:30

    ---------- begin diff ----------
@@ @@
    * @param string $company
    *   Name of a company.
    *
-   * @return \Drupal\apigee_edge_teams\CompanyMembersControllerInterface
+   * @return CompanyMembersControllerInterface
    *   The preconfigured company members control of the company.
    */
   public function companyMembersController(string $company): CompanyMembersControllerInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


258) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersControllerFactory.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembersControllerInterface[]
+   * @var CompanyMembersControllerInterface[]
    */
   private $instances = [];

@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The company membership object cache.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface
+   * @var CompanyMembershipObjectCacheInterface
    */
   private $companyMembershipObjectCache;

@@ @@
   /**
    * CompanyMembersControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $company_membership_object_cache
+   * @param CompanyMembershipObjectCacheInterface $company_membership_object_cache
    *   The company membership object cache.
    */
   public function __construct(SDKConnectorInterface $connector, CompanyMembershipObjectCacheInterface $company_membership_object_cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


259) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/CompanyMembersController.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;

@@ @@
   /**
    * The company membership object cache.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface
+   * @var CompanyMembershipObjectCacheInterface
    */
   private $companyMembershipObjectCache;

@@ @@
    *
    * @param string $company
    *   The name of the company.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $company_membership_object_cache
+   * @param CompanyMembershipObjectCacheInterface $company_membership_object_cache
    *   The company membership object cache.
    */
   public function __construct(string $company, SDKConnectorInterface $connector, CompanyMembershipObjectCacheInterface $company_membership_object_cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


260) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Access/TeamAppListByTeamAccess.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\apigee_edge_teams\Entity\TeamAppPermissionProvider;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamPermissionHandlerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The team permission handler service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;

@@ @@
   /**
    * TeamAppListByTeamAccess constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TeamPermissionHandlerInterface $team_permission_handler) {
@@ @@
   /**
    * Grant access to Team app list by team page.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team entity from the route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(TeamInterface $team, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


261) modules/contrib/apigee_edge/modules/apigee_edge_teams/src/Access/ManageTeamMembersAccess.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_teams\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Drupal\apigee_edge_teams\TeamPermissionHandlerInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;

@@ @@
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;

@@ @@
   /**
    * ManageTeamMembersAccess constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, TeamPermissionHandlerInterface $team_permission_handler) {
@@ @@
   /**
    * Grant access to Manage team members pages.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
@@ @@
     if ($account->isAnonymous()) {
       return AccessResult::forbidden('This UI only available to logged in users.');
     }
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $route_match->getParameter('team');
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|null $developer */
+    /** @var DeveloperInterface|null $developer */
     $developer = $route_match->getParameter('developer');

     // If the developer parameter is available in the route make sure it is
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


262) modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 /**
  * @file
  * Implements tokens for apigee_edge_teams module.
@@ @@
     return [];
   }

-  /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation */
+  /** @var TeamInvitationInterface $team_invitation */
   $team_invitation = $data['team_invitation'];
   $team = $team_invitation->getTeam();
   $replacements = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


263) modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
+use Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamStorageInterface;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface;
+use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
+use Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ @@
   // @see devel_entity_type_alter()
   // @see \Drupal\apigee_edge_teams\Routing\TeamAppDevelRouteFixerSubscriber
   if (\Drupal::moduleHandler()->moduleExists('devel')) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = &$entity_types['team_app'];
     if ($entity_type->hasLinkTemplate('canonical')) {
       $canonical_link = $entity_type->getLinkTemplate('canonical');
@@ @@
 /**
  * Gets the title of team listing page.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   The title of the page.
  */
 function apigee_edge_teams_team_listing_page_title(): TranslatableMarkup {
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  */
 function _apigee_edge_teams_team_app_entity_form_display_edit_form_validate(array &$form, FormStateInterface $form_state) {
@@ @@
  */
 function apigee_edge_teams_user_delete(EntityInterface $entity) {
   /** @var \Drupal\user\UserInterface $entity */
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+  /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
   $team_member_role_storage = \Drupal::entityTypeManager()->getStorage('team_member_role');
   // When a user gets deleted then its developer account also gets deleted
   // from Apigee Edge which removes its (team) company memberships.
@@ @@
  */
 function apigee_edge_teams_developer_delete(EntityInterface $entity) {
   /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
-  /** @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $cache */
+  /** @var CompanyMembershipObjectCacheInterface $cache */
   $cache = \Drupal::service('apigee_edge_teams.cache.company_membership_object');
   // Remove all company membership object cache entries that contained the
   // removed developer.
@@ @@
  */
 function apigee_edge_teams_team_delete(EntityInterface $entity) {
   // Delete all invitations from this team.
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamStorageInterface $storage */
+  /** @var TeamStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('team_invitation');
   if ($invitations = $storage->loadByProperties(['team' => $entity->id()])) {
     $storage->delete($invitations);
@@ @@
     $breadcrumb->addLink(Link::createFromRoute($team_entity_def->getPluralLabel(), 'entity.team.collection'));
   }
   elseif ($route_match->getRouteName() === 'entity.team.add_members') {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $route_match->getParameter('team');
     $breadcrumb->addLink($team->toLink(t('Members'), 'members'));
   }
   elseif ($route_match->getRouteName() === 'entity.team_app.add_form_for_team') {
     $team_app_entity_def = \Drupal::entityTypeManager()->getDefinition('team_app');
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $route_match->getParameter('team');
     $breadcrumb->addLink(Link::createFromRoute($team_app_entity_def->getPluralLabel(), 'entity.team_app.collection_by_team', ['team' => $team->id()]));
   }
@@ @@
     return;
   }

-  /** @var \Drupal\Core\Url $url */
+  /** @var Url $url */
   $url = $variables['link']['#url'];
   if (!in_array($url->getRouteName(), TeamInactiveStatusSubscriber::getDisabledRoutes())) {
     return;
@@ @@
  * teams' API Product access.
  */
 function apigee_edge_teams_api_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $entity */
+  /** @var ApiProductInterface $entity */
   // The "assign" in not in this list, because it is handled by team API Product
   // access manager service directly. Team members should not be able to
   // assign API products to their developer apps just because they have access
@@ @@
     return AccessResult::neutral('Anonymous user can not be member of a team.');
   }

-  /** @var \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface $access_checker */
+  /** @var TeamMemberApiProductAccessHandlerInterface $access_checker */
   $access_checker = \Drupal::service('apigee_edge_teams.team_member_api_product_access_handler');
-  /** @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager */
+  /** @var TeamMembershipManagerInterface $team_membership_manager */
   $team_membership_manager = \Drupal::service('apigee_edge_teams.team_membership_manager');
   try {
     $developer_team_ids = $team_membership_manager->getTeams($account->getEmail());
@@ @@
     $result = AccessResult::neutral("{$account->getEmail()} is not member of any team.");
     // If developer's team membership changes access must be re-evaluated.
     // @see \Drupal\apigee_edge_teams\TeamMembershipManager
-    /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface $developer_storage */
+    /** @var DeveloperStorageInterface $developer_storage */
     $developer_storage = \Drupal::entityTypeManager()->getStorage('developer');
     $developer = $developer_storage->load($account->getEmail());
     if ($developer) {
@@ @@
     }
   }
   else {
-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamStorageInterface $team_storage */
+    /** @var TeamStorageInterface $team_storage */
     $team_storage = \Drupal::entityTypeManager()->getStorage('team');
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $teams = $team_storage->loadMultiple($developer_team_ids);
     foreach ($teams as $team) {
       $result = $access_checker->access($entity, $operation, $team, $account, TRUE);
@@ @@
  * Implements hook_cron().
  */
 function apigee_edge_teams_cron() {
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface $storage */
+  /** @var TeamInvitationStorageInterface $storage */
   $storage = Drupal::entityTypeManager()->getStorage('team_invitation');
   $team_invitations = $storage->getInvitationsToExpire();
   if (!count($team_invitations)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


264) modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\apigee_edge\SDKConnectorInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
+use Drupal\Core\Config\StorageInterface;
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Copyright 2019 Google Inc.
@@ @@

   if ($phase == 'install' || $phase == 'runtime') {
     try {
-      /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+      /** @var SDKConnectorInterface $sdk_connector */
       $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
       $org_controller = \Drupal::service('apigee_edge.controller.organization');
       /* @var \Apigee\Edge\Api\Management\Entity\Organization $organization */
@@ @@
     'team_app_edit_api_products',
     'team_app_revoke_api_key',
   ];
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface $storage */
+  /** @var TeamRoleStorageInterface $storage */
   $storage = Drupal::entityTypeManager()->getStorage('team_role');
-  /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $admin_role */
+  /** @var TeamRoleInterface $admin_role */
   $admin_role = $storage->load($role);
   $storage->changePermissions($role, array_combine($admin_role->getPermissions(), $admin_role->getPermissions()) + array_combine($api_key_permissions, $api_key_permissions));
 }
@@ @@
     'team_invitation_email_existing',
     'team_invitation_email_new',
   ];
-  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
+  /** @var StorageInterface $config_storage */
   $config_storage = \Drupal::service('config.storage');
   $module_path = \Drupal::service('extension.list.module')->getPath('apigee_edge_teams');
   $source = new FileStorage("$module_path/config/install");
@@ @@
  * Set disable_sql_rewrite to false for Team invitations view.
  */
 function apigee_edge_teams_update_8705() {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   if ($view = Views::getView('team_invitations')) {
     $view->setDisplay('user');
     $query = $view->getDisplay()->getOption('query');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


265) modules/contrib/apigee_edge/modules/apigee_edge_teams/apigee_edge_teams.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  * MA 02110-1301, USA.
  */
-
 /**
  * Hooks for apigee_edge_teams module.
  */
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alters the title of team listing page and its default menu link item.
  *
- * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
+ * @param TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_teams_team_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_teams_team_listing_page_title_alter(TranslatableMarkup &$title) {
 }

 /**
  * Control API product entity operation access of a team (and its members).
  *
- * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+ * @param ApiProductInterface $api_product
  *   The API Product entity for which to check access.
  * @param string $operation
  *   The entity operation. Usually one of 'view', 'update', 'create',
  *   'delete' or 'assign".
- * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+ * @param TeamInterface $team
  *   The team for which to check access.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The team member for which to check access.
  *
- * @return \Drupal\Core\Access\AccessResultInterface
+ * @return AccessResultInterface
  *   The access result.
  *
  * @see \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandler
  */
-function hook_apigee_edge_teams_team_api_product_access(\Drupal\apigee_edge\Entity\ApiProductInterface $api_product, string $operation, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_team_api_product_access(ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account) {
   // Grant access if API product's name is prefixed with the team's name.
-  return \Drupal\Core\Access\AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
+  return AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
 }

 /**
@@ @@
  *
  * @param array $permissions
  *   Array of team permissions.
- * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+ * @param TeamInterface $team
  *   The team entity.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The Drupal user of the developer.
  */
-function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, TeamInterface $team, AccountInterface $account) {
   // @see apigee_edge_teams_test_apigee_edge_teams_developer_permissions_by_team_alter()
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


266) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/SDKConnector.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new SDKConnector.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $inner_service
+   * @param SDKConnectorInterface $inner_service
    *   The decorated SDK connector service.
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   Http client.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   The key repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   Info file parser service.
    */
   public function __construct(SDKConnectorInterface $inner_service, ClientFactory $client_factory, KeyRepositoryInterface $key_repository, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, InfoParserInterface $info_parser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


267) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginInterface.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Formats a request.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   Request object.
    *
    * @return string
@@ @@
   /**
    * Formats a response.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response object.
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   Request object that triggered the response.
    *
    * @return string
@@ @@
   /**
    * Formats stats object.
    *
-   * @param \GuzzleHttp\TransferStats $stats
+   * @param TransferStats $stats
    *   Transfer statistics.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


268) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * DebugMessageFormatterPluginBase constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
    * @param array $configuration
    *   Plugin configuration.
@@ @@
   /**
    * Returns the wrapped message formatter.
    *
-   * @return \Http\Message\Formatter
+   * @return Formatter
    *   Message formatter.
    */
   abstract protected function getFormatter(): Formatter;
@@ @@
   /**
    * Utility function that collects and formats times from transfer statistic.
    *
-   * @param \GuzzleHttp\TransferStats $stats
+   * @param TransferStats $stats
    *   Transfer statistic.
    * @param int $precision
    *   Precision of rounding applied on times.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


269) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/HttpClientMiddleware/DevelKintApiClientProfiler.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_debug\HttpClientMiddleware;

+use Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface;
 use Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager;
 use Drupal\apigee_edge_debug\SDKConnector;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The currently logged-in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;

@@ @@
   /**
    * The debug message formatter plugin.
    *
-   * @var \Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface
+   * @var DebugMessageFormatterPluginInterface
    */
   private $formatter;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   private $moduleHandler;

@@ @@
   /**
    * DevelKintApiClientProfiler constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager $debug_message_formatter_plugin
+   * @param DebugMessageFormatterPluginManager $debug_message_formatter_plugin
    *   Debug message formatter plugin manager.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The currently logged-in user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DebugMessageFormatterPluginManager $debug_message_formatter_plugin, AccountInterface $currentUser, ModuleHandlerInterface $module_handler, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


270) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/HttpClientMiddleware/ApiClientProfiler.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_debug\HttpClientMiddleware;

+use Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface;
 use Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager;
 use Drupal\apigee_edge_debug\SDKConnector;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * The debug message formatter plugin.
    *
-   * @var \Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface
+   * @var DebugMessageFormatterPluginInterface
    */
   private $formatter;

@@ @@
   /**
    * ApiClientProfiler constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
-   * @param \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager $debug_message_formatter_plugin
+   * @param DebugMessageFormatterPluginManager $debug_message_formatter_plugin
    *   Debug message formatter plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger, DebugMessageFormatterPluginManager $debug_message_formatter_plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


271) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Form/ConfigForm.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Debug message formatter plugin manager.
    *
-   * @var \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager
+   * @var DebugMessageFormatterPluginManager
    */
   private $pluginManager;

@@ @@
   /**
    * ConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager $plugin_manager
+   * @param DebugMessageFormatterPluginManager $plugin_manager
    *   The debug message formatter plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DebugMessageFormatterPluginManager $plugin_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


272) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/DebugMessageFormatterPluginManager.php:36

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


273) modules/contrib/apigee_edge/modules/apigee_edge_debug/src/Annotation/DebugMessageFormatter.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_debug\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The name of the formatter plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


274) modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/src/RoleBasedAccessSettingsBatch.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_apiproduct_rbac;

+use Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Exception\ApiResponseException;
 use Drupal\Component\Utility\Xss;
@@ @@
     }

     // Process API products by groups of 5.
-    /** @var \Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface $controller */
+    /** @var ApiProductControllerInterface $controller */
     $controller = \Drupal::service('apigee_edge.controller.api_product');

     foreach (array_slice($product_name_display_name_map, $context['sandbox']['progress'], 5) as $product_name => $product_display_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


275) modules/contrib/apigee_edge/modules/apigee_edge_apiproduct_rbac/apigee_edge_apiproduct_rbac.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ @@
  * @see apigee_edge_api_product_access()
  */
 function apigee_edge_apiproduct_rbac_api_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $entity */
+  /** @var ApiProductInterface $entity */
   if (!in_array($operation, ['view', 'view label', 'assign'])) {
     return AccessResult::neutral(sprintf('%s is not supported by %s.', $operation, __FUNCTION__));
   }
@@ @@
     ];
   }

-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface[] $api_products */
+  /** @var ApiProductInterface[] $api_products */
   $api_products = $api_product_storage->loadMultiple();
   // Sort products alphabetically (display name is an attribute so sorting in
   // the query level does not work).
@@ @@
       'grant_access_if_attribute_missing',
     ], FALSE))
     ->save();
-  /** @var \Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface $controller */
+  /** @var ApiProductControllerInterface $controller */
   $rid_product_map = [];
   foreach ($form_state->getValue(['rbac', 'role_names'], []) as $rid => $name) {
     // Do not store roles with by pass permission in the attribute
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


276) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/TeamMembershipManager.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_actions;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge;
 use Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface;
 use Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface;
@@ @@
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $inner;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;

@@ @@
   /**
    * The company members controller factory service.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface
+   * @var CompanyMembersControllerFactoryInterface
    */
   private $companyMembersControllerFactory;

@@ @@
   /**
    * The developer companies cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompaniesCache;

@@ @@
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   private $developerController;

@@ @@
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   private $cacheTagsInvalidator;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * TeamMembershipManager constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $inner
+   * @param TeamMembershipManagerInterface $inner
    *   The Apigee Edge team manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface $company_members_controller_factory
+   * @param CompanyMembersControllerFactoryInterface $company_members_controller_factory
    *   The company members controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   The developer companies cache.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(TeamMembershipManagerInterface $inner, EntityTypeManagerInterface $entity_type_manager, CompanyMembersControllerFactoryInterface $company_members_controller_factory, DeveloperControllerInterface $developer_controller, DeveloperCompaniesCacheInterface $developer_companies_cache, CacheTagsInvalidatorInterface $cache_tags_invalidator, LoggerInterface $logger, EventDispatcherInterface $event_dispatcher) {
@@ @@
    * @param array $developers
    *   An array of developers.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function dispatchEvent(string $event, string $team, array $developers) {
     $team = $this->entityTypeManager->getStorage('team')->load($team);
@@ @@

     // Dispatch an event for each developer.
     foreach ($developers as $developer) {
-      $this->eventDispatcher->dispatch($event, new EdgeEntityEventEdge($team, [
+      $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($team, [
         'team' => $team,
         'member' => $users_by_mail[$developer],
-      ]));
+      ]),
+      $event);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


277) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverInterface.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the event's label. Example: 'After saving a new App'.
    *
-   * @param \Drupal\apigee_edge\Entity\EdgeEntityTypeInterface $entity_type
+   * @param EdgeEntityTypeInterface $entity_type
    *   The Apigee Edge entity type.
    *
    * @return string
@@ @@
   /**
    * Returns an array of event context.
    *
-   * @param \Drupal\apigee_edge\Entity\EdgeEntityTypeInterface $entity_type
+   * @param EdgeEntityTypeInterface $entity_type
    *   The Apigee Edge entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


278) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverBase.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The apigee app entity type manager service.
    *
-   * @var \Drupal\apigee_edge_actions\ApigeeActionsEntityTypeHelperInterface
+   * @var ApigeeActionsEntityTypeHelperInterface
    */
   protected $edgeEntityTypeManager;

@@ @@
   /**
    * AppEventDeriver constructor.
    *
-   * @param \Drupal\apigee_edge_actions\ApigeeActionsEntityTypeHelperInterface $edge_entity_type_manager
+   * @param ApigeeActionsEntityTypeHelperInterface $edge_entity_type_manager
    *   The apigee app entity type manager service.
    */
   public function __construct(ApigeeActionsEntityTypeHelperInterface $edge_entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


279) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_edge_actions\EventSubscriber;

+use Drupal\apigee_edge\Entity\Developer;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManger;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * AppCredentialEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, AccountInterface $current_user, LoggerChannelInterface $logger) {
@@ @@
   /**
    * Responds to add product events.
    *
-   * @param \Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent $event
+   * @param AppCredentialAddApiProductEvent $event
    *   The app credential add product event.
    */
   public function onAddProduct(AppCredentialAddApiProductEvent $event) {
@@ @@
   /**
    * Responds to remove product events.
    *
-   * @param \Drupal\apigee_edge\Event\AppCredentialDeleteApiProductEvent $event
+   * @param AppCredentialDeleteApiProductEvent $event
    *   The app credential remove product event.
    */
   public function onRemoveProduct(AppCredentialDeleteApiProductEvent $event) {
@@ @@
    *
    * @param string $rules_event_name
    *   The name of the rules event.
-   * @param \Symfony\Contracts\EventDispatcher\Event $event
+   * @param Event $event
    *   The api credential event.
    * @param array $api_products
    *   An array of api products.
@@ @@
       if ('developer_app' == $app_type) {
         // For developer apps, get the Drupal account from the app owner.
         /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface $developer_storage */
-        /** @var \Drupal\apigee_edge\Entity\Developer $owner */
+        /** @var Developer $owner */
         $developer_storage = $this->entityTypeManger->getStorage($event->getAppType());
         $owner = $developer_storage->load($event->getOwnerId());
         $developer = user_load_by_mail($owner->getEmail());
@@ @@
       }

       foreach ($api_products as $product) {
-        /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $api_product */
+        /** @var ApiProductInterface $api_product */
         $api_product = $this->entityTypeManger
           ->getStorage('api_product')
           ->load($product);
-        $this->eventDispatcher->dispatch($rules_event_name, new EdgeEntityEventEdge($app, [
+        $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($app, [
           $app_type => $app,
           'developer' => $developer,
           'api_product_name' => $api_product->getName(),
           'api_product_display_name' => $api_product->getDisplayName(),
-        ]));
+        ]),
+        $rules_event_name);
       }
     }
     catch (PluginException $exception) {
@@ @@
    * @param string $app_type
    *   The type of the app.
    *
-   * @return \Drupal\apigee_edge\Entity\AppInterface|null
+   * @return AppInterface|null
    *   The app with the provided name or null.
    */
   protected function getAppByName(string $name, string $owner_id, string $app_type): ?AppInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


280) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelperInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Returns an array of Apigee Edge entity types.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of Apigee Edge entity types.
    */
   public function getEntityTypes(): array;
@@ @@
   /**
    * Determines if the given entity type is a fieldable Edge entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


281) modules/contrib/apigee_edge/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelper.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ApigeeAppEntityTypeManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


282) modules/contrib/apigee_edge/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * ApigeeEdgeActionsDebugEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(LoggerChannelInterface $logger) {
@@ @@
   /**
    * Responds to rules events.
    *
-   * @param \Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge $event
+   * @param EdgeEntityEventEdge $event
    *   The event object.
    * @param string $event_name
    *   The event name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


283) modules/contrib/apigee_edge/modules/apigee_edge_actions/apigee_edge_actions.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Implements tokens for Apigee Edge entities.
@@ @@
  * Implements hook_token_info_alter().
  */
 function apigee_edge_actions_token_info_alter(&$info) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $apigee_entity_types */
+  /** @var EntityTypeInterface[] $apigee_entity_types */
   $apigee_entity_types = Drupal::service('apigee_edge_actions.edge_entity_type_manager')->getEntityTypes();
   $type_info = Drupal::service('plugin.manager.field.field_type')->getDefinitions();

@@ @@

       $fields = Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type->id());
       foreach ($fields as $field_name => $field) {
-        /** @var \Drupal\field\FieldStorageConfigInterface $field */
+        /** @var FieldStorageConfigInterface $field */
         $params['@type'] = $type_info[$field->getType()]['label'];
         $description = t('@type field.', $params);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


284) modules/contrib/apigee_edge/modules/apigee_edge_actions/apigee_edge_actions.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\apigee_edge_teams\Entity\TeamAppInterface;
+use Drupal\apigee_edge\Entity\EdgeEntityInterface;
 /**
  * Copyright 2020 Google Inc.
  *
@@ @@
 /**
  * Helper to dispatch an entity event.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  * @param string $event_name
  *   The event name.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _apigee_edge_actions_dispatch_entity_event(EntityInterface $entity, string $event_name) {
   if (!Drupal::service('apigee_edge_actions.edge_entity_type_manager')
@@ @@
       $user_id = $developer->getEmail();
     }
     else {
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $entity */
+      /** @var TeamAppInterface $entity */
       // For TeamApps, getAppOwner() is a team name, not a developer or email,
       // and we cannot rely on getCreatedBy() as it is deprecated, so we
       // default to the current user for the developer.
@@ @@
     $arguments["{$entity->getEntityTypeId()}_unchanged"] = $entity->original;
   }

-  /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+  /** @var EdgeEntityInterface $entity */
   Drupal::service('event_dispatcher')
     ->dispatch($dispatched_event_name, new EdgeEntityEventEdge($entity, $arguments));
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


285) modules/contrib/apigee_edge/apigee_edge.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\apigee_edge\KeyEntityFormEnhancer;
+use Drupal\apigee_edge\Entity\EdgeEntityInterface;
+use Drupal\Core\Controller\TitleResolverInterface;
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\apigee_edge\Entity\AppWarningsCheckerInterface;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge\SDKConnectorInterface;
+use Drupal\user\RegisterForm;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\apigee_edge\UserDeveloperConverterInterface;
+use Drupal\apigee_edge\FieldAttributeConverterInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\key\KeyInterface;
+use Drupal\apigee_edge\Entity\DeveloperApp;
+use Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
+use Drupal\apigee_edge\Entity\Storage\DeveloperAppStorageInterface;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ @@
   // Even if the original Key forms should not be altered, the Authentication
   // form provided by this module should still work the same.
   if ($do_not_alter_key_entity_forms) {
-    /** @var \Drupal\apigee_edge\KeyEntityFormEnhancer $key_entity_form_enhancer */
+    /** @var KeyEntityFormEnhancer $key_entity_form_enhancer */
     $key_entity_form_enhancer = \Drupal::service('apigee_edge.key_entity_form_enhancer');
     $key_entity_form_enhancer->alterForm($form, $form_state);
   }
@@ @@
     return;
   }

-  /** @var \Drupal\apigee_edge\KeyEntityFormEnhancer $key_entity_form_enhancer */
+  /** @var KeyEntityFormEnhancer $key_entity_form_enhancer */
   $key_entity_form_enhancer = \Drupal::service('apigee_edge.key_entity_form_enhancer');
   // Only those Key forms gets altered that defines an Apigee Edge key type.
   $key_entity_form_enhancer->alterForm($form, $form_state);
@@ @@
  */
 function template_preprocess_apigee_entity(array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
-  /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+  /** @var EdgeEntityInterface $entity */
   $entity = $variables['entity'] = $variables['elements']['#entity'];

   $variables['label'] = $entity->label();
@@ @@
  */
 function apigee_edge_theme_suggestions_apigee_entity(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+  /** @var EdgeEntityInterface $entity */
   $entity = $variables['elements']['#entity'];
   $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);

@@ @@
   }
   if ($route_match->getRouteName() === 'entity.developer_app.add_form_for_developer') {
     $collection_route_by_developer_name = 'entity.developer_app.collection_by_developer';
-    /** @var \Drupal\Core\Controller\TitleResolverInterface $title_resolver */
+    /** @var TitleResolverInterface $title_resolver */
     $title_resolver = \Drupal::service('title_resolver');
-    /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
+    /** @var RouteProviderInterface $route_provider */
     $route_provider = \Drupal::service('router.route_provider');
     $breadcrumb->addLink(Link::createFromRoute(
       $title_resolver->getTitle(\Drupal::requestStack()->getCurrentRequest(), $route_provider->getRouteByName($collection_route_by_developer_name)),
@@ @@
  * Implements hook_entity_base_field_info_alter().
  */
 function apigee_edge_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+  /** @var FieldDefinitionInterface[] $fields */
   if ($entity_type->id() === 'user') {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition $mail */
+    /** @var BaseFieldDefinition $mail */
     $mail = $fields['mail'];
     $mail->setRequired(TRUE);
     $mail->addConstraint('DeveloperMailUnique');
@@ @@
     }

     if ($display->getComponent('credentials')) {
-      /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+      /** @var AppInterface $entity */
       $defaults = [
         '#cache' => [
           'contexts' => $entity->getCacheContexts(),
@@ @@
   }

   if ($display->getComponent('warnings')) {
-    /** @var \Drupal\apigee_edge\Entity\AppWarningsCheckerInterface $app_warnings_checker */
+    /** @var AppWarningsCheckerInterface $app_warnings_checker */
     $app_warnings_checker = \Drupal::service('apigee_edge.entity.app_warnings_checker');
     $warnings = array_filter($app_warnings_checker->getWarnings($entity));
     if (count($warnings)) {
@@ @@
  * apigee_edge.settings.developer.api_product_access.
  */
 function apigee_edge_api_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $entity */
+  /** @var ApiProductInterface $entity */
   if (!in_array($operation, ['view', 'view label', 'assign'])) {
     return AccessResult::neutral(sprintf('%s is not supported by %s.', $operation, __FUNCTION__));
   }
@@ @@
     return AccessResult::neutral();
   }

-  /** @var \Drupal\apigee_edge\Entity\AppInterface $entity **/
-
+  /** @var AppInterface $entity **/
   $approved_credentials = array_filter($entity->getCredentials(), function (AppCredentialInterface $credential) {
     return $credential->getStatus() === AppCredentialInterface::STATUS_APPROVED;
   });
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  */
 function _apigee_edge_developer_app_entity_form_display_edit_form_validate(array &$form, FormStateInterface $form_state) {
@@ @@
  *
  * @param array $form_element
  *   Form element array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  *
  * @return array
@@ @@
   $token_service = \Drupal::token();
   $language_manager = \Drupal::languageManager();
   $langcode = $message['langcode'];
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   $account = $params['account'];
   $variables = ['user' => $account];

@@ @@
 /**
  * Sends a verification email to the developer email that is already taken.
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The user object of the account being notified. Must contain at
  *   least the fields 'uid', 'name', and 'mail'.
  * @param string $langcode
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  */
 function apigee_edge_form_user_form_developer_email_validate(array $form, FormStateInterface $form_state) {
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  *
  * @return array
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  */
 function apigee_edge_form_user_form_api_connection_validate(array $form, FormStateInterface $form_state) {
@@ @@
   // If there is no connection to Apigee Edge interrupt the registration/user
   // update, otherwise it could be a security leak if a developer exists in
   // Apigee Edge with the same email address.
-  /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+  /** @var SDKConnectorInterface $sdk_connector */
   $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
   try {
     $sdk_connector->testConnection();
@@ @@
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  */
 function apigee_edge_form_user_register_form_developer_email_validate(array $form, FormStateInterface $form_state) {
@@ @@
     return;
   }

-  /** @var \Drupal\user\RegisterForm $registerForm */
+  /** @var RegisterForm $registerForm */
   $registerForm = $form_state->getFormObject();
   // Pass this information to hook_user_presave() in case if we would get
   // there.
@@ @@
   $request = \Drupal::request();
   $token = $request->query->get($config->get('verification_token'));
   $timestamp = $request->query->get('timestamp');
-  /** @var \Drupal\user\UserInterface $account */
+  /** @var UserInterface $account */
   // Build user object from the submitted form values.
   $account = $registerForm->buildEntity($form, $form_state);
   // If required parameters are available in the url.
@@ @@
   // in case of anonymous user because every page request creates a new, empty
   // private temp storage.
   $storage = \Drupal::service('tempstore.shared');
-  /** @var \Drupal\Core\TempStore\PrivateTempStore $sendNotifications */
+  /** @var PrivateTempStore $sendNotifications */
   $sendNotifications = $storage->get('apigee_edge_developer_email_verification_sent');
   // Do not send multiple email verifications to the same email address
   // every time when form validation fails with an error.
@@ @@
  *
  * Based on user_cancel_url().
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User object.
  * @param array $options
  *   (optional) A keyed array of settings. Supported options are:
@@ @@
  *
  * Based on user_pass_rehash().
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User object.
  * @param string $timestamp
  *   Timestamp for seed.
@@ @@
 /**
  * Validates token for a registration with an existing developer email on Edge.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User object.
  * @param string $token
  *   Generated token from the url.
@@ @@
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_app_credential_product_list(array &$variables) {
-  /** @var \Apigee\Edge\Structure\CredentialProduct[] $cred_products */
+  /** @var CredentialProduct[] $cred_products */
   $cred_products = $variables['elements']['#credential_products'];
   $cred_product_ids = array_map(function ($product) {
-    /** @var \Apigee\Edge\Structure\CredentialProduct $product */
+    /** @var CredentialProduct $product */
     return $product->getApiproduct();
   }, $cred_products);
-  /** @var \Drupal\apigee_edge\Entity\ApiProduct[] $allProducts */
+  /** @var ApiProduct[] $allProducts */
   $variables['#api_product_entities'] = $allProducts = ApiProduct::loadMultiple($cred_product_ids);
   $variables += ['content' => []];
   foreach ($cred_products as $product) {
@@ @@
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_app_credential(array &$variables) {
-  /** @var \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential */
+  /** @var AppCredentialInterface $credential */
   $credential = $variables['elements']['#credential'];
-  /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+  /** @var AppInterface $app */
   $app = $variables['elements']['#app'];
-  /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
+  /** @var DateFormatterInterface $dateFormatter */
   $dateFormatter = Drupal::service('date.formatter');
   $serializer = new AppCredentialSerializer();
   // Convert app entity to an array.
@@ @@
     return;
   }

-  /** @var \Drupal\apigee_edge\UserDeveloperConverterInterface $user_developer */
+  /** @var UserDeveloperConverterInterface $user_developer */
   $user_developer = \Drupal::service('apigee_edge.converter.user_developer');
-  /** @var \Drupal\apigee_edge\FieldAttributeConverterInterface $field_to_attribute */
+  /** @var FieldAttributeConverterInterface $field_to_attribute */
   $field_to_attribute = \Drupal::service('apigee_edge.converter.field_attribute');
-  /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+  /** @var LoggerChannelInterface $logger */
   $logger = \Drupal::service('logger.channel.apigee_edge');
   try {
-    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+    /** @var Developer $developer */
     $result = $user_developer->convertUser($account);
     // There were no changes.
     if ($result->getSuccessfullyAppliedChanges() === 0) {
@@ @@
  */
 function apigee_edge_user_cancel(array $edit, UserInterface $account, $method) {
   if ($method === 'user_cancel_block_unpublish' || $method === 'user_cancel_block') {
-    /** @var \Drupal\apigee_edge\UserDeveloperConverterInterface $user_developer */
+    /** @var UserDeveloperConverterInterface $user_developer */
     $user_developer = \Drupal::service('apigee_edge.converter.user_developer');
-    /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+    /** @var LoggerChannelInterface $logger */
     $logger = \Drupal::service('logger.channel.apigee_edge');
     try {
-      /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+      /** @var Developer $developer */
       $developer = $user_developer->convertUser($account)->getDeveloper();
       $developer->save();
     }
@@ @@
   }

   try {
-    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+    /** @var Developer $developer */
     $developer = Developer::load($account->getEmail());
     // Sanity check, the developer may not exist in Apigee Edge.
     if ($developer) {
@@ @@
  * Removes field name from the module's configuration after deleting the field.
  */
 function apigee_edge_field_config_delete(EntityInterface $entity) {
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   $user_fields_to_sync = \Drupal::configFactory()
     ->get('apigee_edge.sync')
     ->get('user_fields_to_sync');
@@ @@
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function apigee_edge_field_ui_field_storage_add_form_submit(array &$form, FormStateInterface &$form_state) {
@@ @@
  * Implements hook_key_delete().
  */
 function apigee_edge_key_delete(EntityInterface $entity) {
-  /** @var \Drupal\key\KeyInterface $entity */
+  /** @var KeyInterface $entity */
   $active_key = \Drupal::configFactory()
     ->get('apigee_edge.auth')
     ->get('active_key');
@@ @@
  * Implements hook_cron().
  */
 function apigee_edge_cron() {
-  /** @var \Drupal\apigee_edge\JobExecutor $executor */
+  /** @var JobExecutor $executor */
   $executor = \Drupal::service('apigee_edge.job_executor');
   // Schedules 100 items from the job table.
   // The reason of this is to avoid race conditions.
@@ @@
 /**
  * Returns the job executor instance.
  *
- * @return \Drupal\apigee_edge\JobExecutor
+ * @return JobExecutor
  *   The job executor instance.
  */
 function apigee_edge_get_executor(): JobExecutor {
@@ @@
  */
 function apigee_edge_developer_storage_load(array $entities) {
   $developerId_mail_map = [];
-  /** @var \Drupal\apigee_edge\Entity\Developer $entity */
+  /** @var Developer $entity */
   foreach ($entities as $entity) {
     $developerId_mail_map[$entity->getDeveloperId()] = $entity->getEmail();
   }
@@ @@
  */
 function apigee_edge_developer_app_storage_load(array $entities) {
   $developer_ids = [];
-  /** @var \Drupal\apigee_edge\Entity\DeveloperApp $entity */
+  /** @var DeveloperApp $entity */
   foreach ($entities as $entity) {
     $developer_ids[] = $entity->getDeveloperId();
   }
   $developer_ids = array_unique($developer_ids);
   $dev_id_mail_map = [];
-  /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface $developer_storage */
+  /** @var DeveloperStorageInterface $developer_storage */
   $developer_storage = \Drupal::entityTypeManager()->getStorage('developer');
   foreach ($developer_storage->loadByProperties(['developerId' => $developer_ids]) as $developer) {
-    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+    /** @var Developer $developer */
     $dev_id_mail_map[$developer->uuid()] = $developer->getEmail();
   }

@@ @@
  *
  * @param string $product_name
  *   API Product name.
- * @param \Drupal\Core\Session\AccountInterface|null $account
+ * @param AccountInterface|null $account
  *   (optional) The user session for which to check access, or NULL to check
  *   access for the current user. Defaults to NULL.
  * @param bool $return_as_object
  *   (optional) Defaults to FALSE.
  *
- * @return \Drupal\Core\Access\AccessResultInterface|bool
+ * @return AccessResultInterface|bool
  *   The access result. Returns a boolean if $return_as_object is FALSE (this
  *   is the default) and otherwise an AccessResultInterface object.
  *   When a boolean is returned, the result of AccessInterface::isAllowed() is
@@ @@
     $result = AccessResult::neutral('Anonymous user does not have a developer account on Apigee Edge.');
   }
   else {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface|null $app_with_product */
+    /** @var DeveloperAppInterface|null $app_with_product */
     $app_with_product = NULL;
-    /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperAppStorageInterface $developer_app_storage */
+    /** @var DeveloperAppStorageInterface $developer_app_storage */
     $developer_app_storage = \Drupal::entityTypeManager()->getStorage('developer_app');

     foreach ($developer_app_storage->loadByDeveloper($account->getEmail()) as $app) {
-      /** @var \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential */
+      /** @var AppCredentialInterface $credential */
       foreach ($app->getCredentials() as $credential) {
         $product_ids = array_map(function (CredentialProduct $product) {
           return $product->getApiproduct();
@@ @@
 /**
  * Gets the title of app listing page.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   The title of the page.
  */
 function apigee_edge_app_listing_page_title(): TranslatableMarkup {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


286) modules/contrib/apigee_edge/apigee_edge.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\apigee_edge\SDKConnectorInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Entity\EntityDisplayRepository;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ @@

   }
   elseif ($phase === 'runtime') {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     try {
       $sdk_connector->testConnection();
@@ @@
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');

-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions */
+  /** @var FieldStorageDefinitionInterface[] $field_storage_definitions */
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
   $entity_type = $definition_update_manager->getEntityType($entity_type_id);

@@ @@
   $entity_type_id = 'user';
   $fields = ['first_name', 'last_name'];

-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+  /** @var EntityFieldManagerInterface $entity_field_manager */
   $entity_field_manager = Drupal::service('entity_field.manager');
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');

   $field_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
@@ @@
       continue;
     }

-    /** @var \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository */
+    /** @var EntityDisplayRepository $entity_display_repository */
     $entity_display_repository = \Drupal::service('entity_display.repository');
     $entity_view_display = $entity_display_repository->getViewDisplay($entity_type_id, $entity_type_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


287) modules/contrib/apigee_edge/apigee_edge.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Copyright 2020 Google Inc.
@@ @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  * MA 02110-1301, USA.
  */
-
 /**
  * Hooks for apigee_edge module.
  */
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alters the title of app listing page and its default menu link item.
  *
- * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
+ * @param TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_app_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_app_listing_page_title_alter(TranslatableMarkup &$title) {
 }

 /**
    ----------- end diff -----------

 [ERROR] Could not process                                                      
         "modules/contrib/apigee_edge/src/Command/DeveloperSyncCommand.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/apigee_edge/src/Command/CreateEdgeRoleCommand.php" file,
         due to:                                                                
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/apigee_edge/src/Command/CommandBase.php" file, due to: 
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/Rules
         Action/SystemEmailToUsersOfRole.php" file, due to:                     
         "Analyze error: "Class                                                 
         Drupal\rules\Plugin\RulesAction\SystemEmailToUsersOfRole not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/apigee_edge/modules/apigee_edge_actions/src/Plugin/Rules
         Action/LogMessage.php" file, due to:                                   
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

