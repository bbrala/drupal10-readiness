modules/contrib/jira_rest/jira_rest.install
modules/contrib/jira_rest/jira_rest.module
modules/contrib/jira_rest/src/Controller/JiraEndpointListBuilder.php
modules/contrib/jira_rest/src/Controller/JiraRestController.php
modules/contrib/jira_rest/src/Element/JiraEndpointSelect.php
modules/contrib/jira_rest/src/Entity/JiraEndpoint.php
modules/contrib/jira_rest/src/Form/JiraEndpointAddForm.php
modules/contrib/jira_rest/src/Form/JiraEndpointDeleteForm.php
modules/contrib/jira_rest/src/Form/JiraEndpointEditForm.php
modules/contrib/jira_rest/src/Form/JiraEndpointFormBase.php
modules/contrib/jira_rest/src/JiraEndpointInterface.php
modules/contrib/jira_rest/src/JiraEndpointRepository.php
modules/contrib/jira_rest/src/JiraEndpointRepositoryInterface.php
modules/contrib/jira_rest/src/JiraRestException.php
modules/contrib/jira_rest/src/JiraRestWrapperService.php
modules/contrib/jira_rest/tests/src/Unit/JiraRestController/JiraRestSearchIssueTest.php

8 files with changes
====================

1) modules/contrib/jira_rest/tests/src/Unit/JiraRestController/JiraRestSearchIssueTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Jira rest API Controller.
    *
-   * @var \Drupal\jira_rest\Controller\JiraRestController
+   * @var JiraRestController
    */
   protected $jiraRestController;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
-    $this->jiraRestController = $this->getMockBuilder('Drupal\jira_rest\Controller\JiraRestController')
-      ->disableOriginalConstructor()
-      ->getMock();
+  public function setUp(): void {
+    $this->jiraRestController = $this->createMock('Drupal\jira_rest\Controller\JiraRestController');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jira_rest/src/JiraRestWrapperService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jira_rest;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\key\KeyInterface;
 use Drupal\Core\Config\ConfigValueException;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The JIRA Endpoint Config Object.
    *
-   * @var \Drupal\jira_rest\JiraEndpointRepositoryInterface
+   * @var JiraEndpointRepositoryInterface
    */
   protected $endpointRepository;

@@ @@
   /**
    * The key repository.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerRestJira;

@@ @@
   /**
    * JiraRestWrapper constructor.
    *
-   * @param \Drupal\jira_rest\JiraEndpointRepositoryInterface $endpoint_repository
+   * @param JiraEndpointRepositoryInterface $endpoint_repository
    *   JIRA Endpoint Repository service.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   Key Repository service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger Factory service.
    *
    * @throws \Exception
@@ @@
   }

   /**
-   * @param \Drupal\jira_rest\JiraEndpointInterface $jira_endpoint
+   * @param JiraEndpointInterface $jira_endpoint
    *
-   * @return \JiraRestApi\Configuration\ArrayConfiguration
+   * @return ArrayConfiguration
    *   An array of JIRA configuration settings.
    *
    * @throws \Exception
@@ @@
         $username = $credential['username'];
         break;
       case "key":
-        /** @var \Drupal\key\KeyInterface $key */
+        /** @var KeyInterface $key */
         if ($key_username = $this->keyRepository->getKey($credential['username'])) {
           if ($key_value = $key_username->getKeyValue()) {
             $username = $key_value;
@@ @@
         }
         break;
       case "multikey":
-        /** @var \Drupal\key\KeyInterface $multikey */
+        /** @var KeyInterface $multikey */
         if ($multikey = $this->keyRepository->getKey($credential['user_password'])) {
           $key_values = $multikey->getKeyValues();
           $username = $key_values['username'] ?? '';
@@ @@
         break;
       case "key":
       case "key_password_only":
-        /** @var \Drupal\key\KeyInterface $key */
+        /** @var KeyInterface $key */
         if ($key_password = $this->keyRepository->getKey($credential['password'])) {
           if ($key_value = $key_password->getKeyValue()) {
             $password = $key_value;
@@ @@
         }
         break;
       case "multikey":
-        /** @var \Drupal\key\KeyInterface $multikey */
+        /** @var KeyInterface $multikey */
         if ($multikey = $this->keyRepository->getKey($credential['user_password'])) {
           $key_values = $multikey->getKeyValues();
           $password = $key_values['password'] ?? '';
@@ @@
   /**
    * Get the Issue service api.
    *
-   * @return \JiraRestApi\Issue\IssueService
+   * @return IssueService
    *   Issue Service API.
-   * @throws \JiraRestApi\JiraException
+   * @throws JiraException
    * @throws \JsonMapper_Exception
    * @throws \Exception
    */
@@ @@
   /**
    * Get the Project service api.
    *
-   * @return \JiraRestApi\Project\ProjectService
+   * @return ProjectService
    *   Project Service API.
-   * @throws \JiraRestApi\JiraException
+   * @throws JiraException
    * @throws \JsonMapper_Exception
    * @throws \Exception
    */
@@ @@
   /**
    * Get the User service api.
    *
-   * @return \JiraRestApi\User\UserService
+   * @return UserService
    *   User Service API.
-   * @throws \JiraRestApi\JiraException
+   * @throws JiraException
    * @throws \JsonMapper_Exception
    * @throws \Exception
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/jira_rest/src/JiraEndpointRepositoryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jira_rest;

+use Drupal\jira_rest\Entity\JiraEndpoint;
+use JiraRestApi\JiraException;
 /**
  * Provides the interface for a repository of JIRA Endpoint entities.
  */
@@ @@
    * @param array $endpoint_ids
    *   (optional) An array of entity IDs, or NULL to load all entities.
    *
-   * @return \Drupal\jira_rest\Entity\JiraEndpoint[]
+   * @return JiraEndpoint[]
    *   An array of jira endpoint entities, indexed by ID. Returns an empty array if no
    *   matching entities are found.
    */
@@ @@
    * @param string $endpoint_id
    *   The key ID to use.
    *
-   * @return \Drupal\jira_rest\Entity\JiraEndpoint
+   * @return JiraEndpoint
    *   The JiraEndpoint object with the given id.
    */
   public function getEndpoint($endpoint_id);
@@ @@
   /**
    * Get default endpoint. Note, this only works if there is one endpoint.
    *
-   * @return \Drupal\jira_rest\Entity\JiraEndpoint
+   * @return JiraEndpoint
    *   The JiraEndpoint object with the given id.
    *
-   * @throws \JiraRestApi\JiraException
+   * @throws JiraException
    */
   public function getDefaultEndpoint();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/jira_rest/src/JiraEndpointRepository.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new KeyRepository.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/jira_rest/src/Form/JiraEndpointFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jira_rest\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\key\Plugin\KeyPluginManager;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\HtmlCommand;
 use Drupal\Core\Entity\EntityForm;
@@ @@
   /**
    * The key storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

   /**
-   * @var \Drupal\jira_rest\JiraRestWrapperService
+   * @var JiraRestWrapperService
    */
   protected $jiraRestWrapper;

@@ @@
   /**
    * Constructs a new jira endpoint form base.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage
+   * @param ConfigEntityStorageInterface $storage
    *   The Jira Endpoint storage.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The Guzzle HTTP client for REST Requests.
    * @param \Drupal\jira_rest\JiraRestWrapperService
    *   The Jira rest wrapper service.
@@ @@
     if (\Drupal::moduleHandler()->moduleExists('key')) {
       $form['credential_provider']['#options']['key'] = 'Key Module';
       $form['credential_provider']['#options']['key_password_only'] = 'Key Module (password only)';
-      /** @var \Drupal\key\Plugin\KeyPluginManager $key_type */
+      /** @var KeyPluginManager $key_type */
       $key_type = \Drupal::service('plugin.manager.key.key_type');
       if ($key_type->hasDefinition('user_password')) {
         $form['credential_provider']['#options']['multikey'] = 'Key Module (user/password)';
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    */
   public function ajaxJiraRestValidation(array &$form, FormStateInterface $form_state) {
     if (!$form_state->hasAnyErrors()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/jira_rest/src/Element/JiraEndpointSelect.php:40

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jira_rest/src/Controller/JiraRestController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Jira Rest API Wrapper.
    *
-   * @var \Drupal\jira_rest\JiraRestWrapperService
+   * @var JiraRestWrapperService
    */
   protected $jiraRestWrapperService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/jira_rest/src/Controller/JiraEndpointListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jira_rest\Controller;

+use Drupal\jira_rest\JiraEndpointInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\jira_rest\JiraEndpointInterface $jira_endpoint */
+    /** @var JiraEndpointInterface $jira_endpoint */
     $jira_endpoint = $entity;

     $row['label'] = $jira_endpoint->label();
@@ @@
    * {@inheritdoc}
    */
   public function getOperations(EntityInterface $entity) {
-    /** @var \Drupal\jira_rest\JiraEndpointInterface $jira_endpoint */
+    /** @var JiraEndpointInterface $jira_endpoint */
     $jira_endpoint = $entity;

     $operations = parent::getOperations($jira_endpoint);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

