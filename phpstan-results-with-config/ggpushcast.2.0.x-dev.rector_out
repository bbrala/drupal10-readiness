modules/contrib/ggpushcast/ggpushcast.install
modules/contrib/ggpushcast/ggpushcast.module
modules/contrib/ggpushcast/src/Controller/GgpushcastRepushFailedNotificationController.php
modules/contrib/ggpushcast/src/Form/GgpushcastFailedLogClearForm.php
modules/contrib/ggpushcast/src/Form/GgpushcastFailedLogForm.php
modules/contrib/ggpushcast/src/Form/GgpushcastSettingsForm.php
modules/contrib/ggpushcast/src/Form/GgpushcastSuccessLogClearForm.php
modules/contrib/ggpushcast/src/Form/GgpushcastSuccessLogForm.php
modules/contrib/ggpushcast/src/GgpushcastNotificationsManager.php
modules/contrib/ggpushcast/src/GgpushcastNotificationsManagerInterface.php
modules/contrib/ggpushcast/src/Plugin/QueueWorker/GgpushcastRepushFailedNotifications.php

9 files with changes
====================

1) modules/contrib/ggpushcast/src/Plugin/QueueWorker/GgpushcastRepushFailedNotifications.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\ggpushcast\GgpushcastNotificationsManagerInterface definition.
    *
-   * @var \Drupal\ggpushcast\GgpushcastNotificationsManagerInterface
+   * @var GgpushcastNotificationsManagerInterface
    */
   protected $notificationsManager;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\ggpushcast\GgpushcastNotificationsManagerInterface $notifications_manager
+   * @param GgpushcastNotificationsManagerInterface $notifications_manager
    *   Ggpushcast notifications manager service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, GgpushcastNotificationsManagerInterface $notifications_manager, StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ggpushcast/src/GgpushcastNotificationsManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Send a notification data to the 'G&G Pushcast' service.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   A node that was published and for which we need to send a notification.
    *
    * @return int
@@ @@
    * To do this a user click on the 'Push' button in the log message table.
    * Also, this method could be called from the queue worker when Cron runs.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   A node that was published and for which we need to send a notification.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/ggpushcast/src/GgpushcastNotificationsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ggpushcast;

+use Drupal\file\FileStorage;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Queue\QueueInterface;
 use GuzzleHttp\ClientInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The storage handler class for files.
    *
-   * @var \Drupal\file\FileStorage
+   * @var FileStorage
    */
   protected $fileStorage;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The queue for resending failed notifications when Cron runs.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Create a notification payload for a node to sending to a REST endpoint.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   A node that was published and for which we need to send a notification.
    *
    * @return array
@@ @@
         $image_field = $settings['image_field'];
         $image_entity = $node->get($image_field)->entity;
         if ($image_entity) {
-          $image = file_create_url($image_entity->getFileUri());
+          $image = \Drupal::service('file_url_generator')->generateAbsoluteString($image_entity->getFileUri());
         }
         break;
     }
@@ @@
         $fid = $config->get('icon_file');
         if ($fid) {
           $file = $this->fileStorage->load($fid);
-          $icon = file_create_url($file->getFileUri());
+          $icon = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
         }
         break;
     }
@@ @@
         $fid = $config->get('badge_file');
         if ($fid) {
           $file = $this->fileStorage->load($fid);
-          $badge = file_create_url($file->getFileUri());
+          $badge = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
         }
         break;
     }
@@ @@
   /**
    * Send a notification data to the 'G&G Pushcast' service.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   A node that was published and for which we need to send a notification.
    *
    * @return bool
@@ @@
    * The difference from the 'push()' method is that here we don't create the
    * log message if the pushing was failed.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   A node that was published and for which we need to send a notification.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/ggpushcast/src/Form/GgpushcastSuccessLogForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ggpushcast\Form;

+use Drupal\Core\State\StateInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\Core\State\StateInterface definition.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ggpushcast/src/Form/GgpushcastSuccessLogClearForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ggpushcast\Form;

+use Drupal\Core\State\StateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ggpushcast/src/Form/GgpushcastSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ggpushcast\Form;

+use Drupal\file\FileStorage;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The storage handler class for files.
    *
-   * @var \Drupal\file\FileStorage
+   * @var FileStorage
    */
   protected $fileStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ggpushcast/src/Form/GgpushcastFailedLogForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ggpushcast\Form;

+use Drupal\Core\State\StateInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ggpushcast/src/Form/GgpushcastFailedLogClearForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ggpushcast\Form;

+use Drupal\Core\State\StateInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ggpushcast/src/Controller/GgpushcastRepushFailedNotificationController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ggpushcast\Controller;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\ggpushcast\GgpushcastNotificationsManagerInterface;
+use Drupal\Core\State\StateInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\node\NodeInterface;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\ggpushcast\GgpushcastNotificationsManagerInterface definition.
    *
-   * @var \Drupal\ggpushcast\GgpushcastNotificationsManagerInterface
+   * @var GgpushcastNotificationsManagerInterface
    */
   protected $notificationsManager;

@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

