diff --git a/legal.info.yml b/legal.info.yml
index 647d79a..6ad2956 100644
--- a/legal.info.yml
+++ b/legal.info.yml
@@ -6,5 +6,4 @@ dependencies:
   - 'drupal:user'
   - 'drupal:views'
 configure: legal.config_legal
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
diff --git a/legal.module b/legal.module
index f520046..95a4f75 100644
--- a/legal.module
+++ b/legal.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Module file for Legal.
@@ -200,7 +202,7 @@ function legal_display_fields(array &$form, array $conditions, $action) {
  * @param bool $modal
  *   Should target be shown in a modal dialog.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   Label with markup.
  */
 function legal_accept_label($link = FALSE, $modal = FALSE) {
@@ -651,7 +653,7 @@ function legal_get_accept($uid) {
  * @param int $uid
  *   User ID of user.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function legal_save_accept($version, $revision, $language, $uid) {
 
diff --git a/src/Form/LegalAdminTermsForm.php b/src/Form/LegalAdminTermsForm.php
index 8b27f16..0db97fd 100644
--- a/src/Form/LegalAdminTermsForm.php
+++ b/src/Form/LegalAdminTermsForm.php
@@ -22,21 +22,21 @@ class LegalAdminTermsForm extends ConfigFormBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -449,7 +449,7 @@ class LegalAdminTermsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/LegalLanguageSettings.php b/src/Form/LegalLanguageSettings.php
index 60f1915..d55bdd3 100644
--- a/src/Form/LegalLanguageSettings.php
+++ b/src/Form/LegalLanguageSettings.php
@@ -20,7 +20,7 @@ class LegalLanguageSettings extends FormBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -157,7 +157,7 @@ class LegalLanguageSettings extends FormBase {
    *
    * Check that Locale module is enabled and user has access permission.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    */
   public function access(AccountInterface $account) {
diff --git a/src/Form/LegalLogin.php b/src/Form/LegalLogin.php
index 9f37ffc..9351df9 100644
--- a/src/Form/LegalLogin.php
+++ b/src/Form/LegalLogin.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\legal\Form;
 
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -22,28 +26,28 @@ class LegalLogin extends FormBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Language handling.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The account the shortcut set is for.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
@@ -242,7 +246,7 @@ class LegalLogin extends FormBase {
    *
    * Check that access cookie and hash have been set.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    */
   public function access(AccountInterface $account) {
diff --git a/tests/src/Functional/LegalTestBase.php b/tests/src/Functional/LegalTestBase.php
index 94e1c12..f041b1e 100644
--- a/tests/src/Functional/LegalTestBase.php
+++ b/tests/src/Functional/LegalTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\legal\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\legal\Entity\Conditions;
 use Drupal\filter\Entity\FilterFormat;
@@ -23,7 +24,7 @@ abstract class LegalTestBase extends BrowserTestBase {
   /**
    * The user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
 
@@ -58,7 +59,7 @@ abstract class LegalTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
 
     parent::setUp();
 
diff --git a/tests/src/Functional/LoginTest.php b/tests/src/Functional/LoginTest.php
index 9b08594..c5b0f36 100644
--- a/tests/src/Functional/LoginTest.php
+++ b/tests/src/Functional/LoginTest.php
@@ -18,15 +18,16 @@ class LoginTest extends LegalTestBase {
    */
   public function testLogin() {
 
+    $this->drupalGet('user/login');
     // Test with default Legal settings.
     // Log user in.
-    $this->drupalPostForm('user/login', $this->loginDetails, 'Log in');
+    $this->submitForm($this->loginDetails, 'Log in');
 
     // Check user is redirected to T&C acceptance page.
     $current_url = $this->getUrl();
     $expected_url = substr($current_url, strlen($this->baseUrl), 20);
     $this->assertEquals($expected_url, '/legal_accept?token=');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Accept T&Cs and submit form.
     $edit = ['edit-legal-accept' => TRUE];
@@ -52,9 +53,10 @@ class LoginTest extends LegalTestBase {
       ->set('login_terms_style', 0)
       ->set('login_container', 0)
       ->save();
+    $this->drupalGet('user/login');
 
     // Log user in.
-    $this->drupalPostForm('user/login', $this->loginDetails, 'Log in');
+    $this->submitForm($this->loginDetails, 'Log in');
 
     // Check T&Cs displayed as textarea.
     $readonly = $this->assertSession()
@@ -79,9 +81,10 @@ class LoginTest extends LegalTestBase {
       ->set('login_terms_style', 1)
       ->set('login_container', 0)
       ->save();
+    $this->drupalGet('user/login');
 
     // Log user in.
-    $this->drupalPostForm('user/login', $this->loginDetails, 'Log in');
+    $this->submitForm($this->loginDetails, 'Log in');
 
     // Check T&Cs displayed as a div with class JS will target as a scroll box.
     $this->assertSession()
@@ -102,8 +105,9 @@ class LoginTest extends LegalTestBase {
       ->set('login_terms_style', 2)
       ->set('login_container', 0)
       ->save();
+    $this->drupalGet('user/login');
 
-    $this->drupalPostForm('user/login', $this->loginDetails, 'Log in');
+    $this->submitForm($this->loginDetails, 'Log in');
 
     // Check T&Cs displayed as HTML.
     $this->assertSession()
@@ -120,8 +124,9 @@ class LoginTest extends LegalTestBase {
       ->set('login_terms_style', 3)
       ->set('login_container', 0)
       ->save();
+    $this->drupalGet('user/login');
 
-    $this->drupalPostForm('user/login', $this->loginDetails, $this->t('Log in'));
+    $this->submitForm($this->loginDetails, $this->t('Log in'));
 
     // Check link display.
     $this->assertSession()
diff --git a/tests/src/Functional/PasswordResetTest.php b/tests/src/Functional/PasswordResetTest.php
index 9476d12..ecdf92f 100644
--- a/tests/src/Functional/PasswordResetTest.php
+++ b/tests/src/Functional/PasswordResetTest.php
@@ -20,7 +20,7 @@ class PasswordResetTest extends LegalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Set the last login time that is used to generate the one-time link so
@@ -41,7 +41,7 @@ class PasswordResetTest extends LegalTestBase {
     // Reset the password by username via the password reset page.
     $this->drupalGet('user/password');
     $edit['name'] = $this->loginDetails['name'];
-    $this->drupalPostForm(NULL, $edit, 'Submit');
+    $this->submitForm($edit, 'Submit');
 
     // Get one time login URL from email (assume the most recent email).
     $_emails = $this->drupalGetMails();
@@ -62,7 +62,7 @@ class PasswordResetTest extends LegalTestBase {
     ];
     $expected_url = Url::fromRoute('legal.legal_login', [], ['query' => $expected_query])->setAbsolute()->toString();
     $this->assertStringStartsWith($expected_url, $this->getUrl());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Accept T&Cs and submit form.
     $edit = ['edit-legal-accept' => TRUE];
diff --git a/tests/src/Functional/RegistrationTest.php b/tests/src/Functional/RegistrationTest.php
index d289164..e6c7a33 100644
--- a/tests/src/Functional/RegistrationTest.php
+++ b/tests/src/Functional/RegistrationTest.php
@@ -14,7 +14,7 @@ class RegistrationTest extends LegalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Don't require email verification.
@@ -38,12 +38,16 @@ class RegistrationTest extends LegalTestBase {
       'pass[pass2]' => 'xyz',
       'legal_accept' => TRUE,
     ];
+    $this->drupalGet('user/register');
 
     // Register user.
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->submitForm($edit, 'Create new account');
 
     // Check for success message.
-    $this->assertText('Registration successful. You are now logged in.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
   }
 
   /**
