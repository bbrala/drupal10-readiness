modules/contrib/rest_api_access_token/rest_api_access_token.install
modules/contrib/rest_api_access_token/rest_api_access_token.module
modules/contrib/rest_api_access_token/src/Authentication/Event/AccessTokenEvents.php
modules/contrib/rest_api_access_token/src/Authentication/Event/LogoutEvent.php
modules/contrib/rest_api_access_token/src/Authentication/Event/TokenResponseEvent.php
modules/contrib/rest_api_access_token/src/Authentication/Provider/AccessTokenProvider.php
modules/contrib/rest_api_access_token/src/Controller/AuthController.php
modules/contrib/rest_api_access_token/src/EventSubscriber/CacheEndpointSubscriber.php
modules/contrib/rest_api_access_token/src/Exception/AccessDeniedException.php
modules/contrib/rest_api_access_token/src/Exception/AuthenticationException.php
modules/contrib/rest_api_access_token/src/Exception/EntityNotFoundException.php
modules/contrib/rest_api_access_token/src/Exception/InvalidRequestIdException.php
modules/contrib/rest_api_access_token/src/Exception/TokenGeneratorException.php
modules/contrib/rest_api_access_token/src/Exception/TokenNotFoundException.php
modules/contrib/rest_api_access_token/src/Form/ConfigForm.php
modules/contrib/rest_api_access_token/src/Model/Token.php
modules/contrib/rest_api_access_token/src/PageCache/RequestPolicy/DisallowXAuthTokenRequests.php
modules/contrib/rest_api_access_token/src/Repository/TokenRepository.php
modules/contrib/rest_api_access_token/src/Service/LoginService.php
modules/contrib/rest_api_access_token/src/Service/TokenGenerator.php

8 files with changes
====================

1) modules/contrib/rest_api_access_token/src/Service/TokenGenerator.php:17

    ---------- begin diff ----------
@@ @@
    * @param int $userId
    *   User id.
    *
-   * @return \Drupal\rest_api_access_token\Model\Token
+   * @return Token
    *   Token model.
    *
-   * @throws \Drupal\rest_api_access_token\Exception\TokenGeneratorException
+   * @throws TokenGeneratorException
    *   When hash algorithm generate empty string.
    */
   public function execute(int $userId) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/rest_api_access_token/src/Service/LoginService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_api_access_token\Service;

+use Drupal\rest_api_access_token\Model\Token;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\rest_api_access_token\Exception\AuthenticationException;
 use Drupal\rest_api_access_token\Exception\TokenGeneratorException;
@@ @@
   /**
    * Token generator service.
    *
-   * @var \Drupal\rest_api_access_token\Service\TokenGenerator
+   * @var TokenGenerator
    */
   protected $tokenGenerator;

@@ @@
   /**
    * Token model repository.
    *
-   * @var \Drupal\rest_api_access_token\Repository\TokenRepository
+   * @var TokenRepository
    */
   protected $tokenRepository;

@@ @@
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * User authentication service.
    *
-   * @var \Drupal\user\UserAuthInterface
+   * @var UserAuthInterface
    */
   protected $userAuth;

@@ @@
   /**
    * LoginService constructor.
    *
-   * @param \Drupal\rest_api_access_token\Service\TokenGenerator $tokenGenerator
+   * @param TokenGenerator $tokenGenerator
    *   Token generator service.
-   * @param \Drupal\rest_api_access_token\Repository\TokenRepository $tokenRepository
+   * @param TokenRepository $tokenRepository
    *   Token model repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity manager service.
-   * @param \Drupal\user\UserAuthInterface $userAuth
+   * @param UserAuthInterface $userAuth
    *   User authentication service.
    */
   public function __construct(TokenGenerator $tokenGenerator, TokenRepository $tokenRepository, EntityTypeManagerInterface $entityTypeManager, UserAuthInterface $userAuth) {
@@ @@
    * @param string $password
    *   User password.
    *
-   * @return bool|\Drupal\rest_api_access_token\Model\Token
+   * @return bool|Token
    *   Token model
    *
    * @throws \Exception
@@ @@
   /**
    * Logout user form all devices.
    *
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   User entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/rest_api_access_token/src/Repository/TokenRepository.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    *   Database connection.
    */
   protected $connection;
@@ @@
   /**
    * TokenRepository constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
    */
   public function __construct(Connection $connection) {
@@ @@
    * @param string $token
    *   User token.
    *
-   * @return \Drupal\rest_api_access_token\Model\Token
+   * @return Token
    *   Return Token model.
    *
-   * @throws \Drupal\rest_api_access_token\Exception\TokenNotFoundException
+   * @throws TokenNotFoundException
    *   Not found exception.
    */
   public function getByPublicToken(string $token) {
@@ @@
   /**
    * Insert Token model into database.
    *
-   * @param \Drupal\rest_api_access_token\Model\Token $accessToken
+   * @param Token $accessToken
    *   Token model.
    *
    * @return int
@@ @@
   /**
    * Remove Token model by User.
    *
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   User model.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/rest_api_access_token/src/EventSubscriber/CacheEndpointSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_api_access_token\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\rest_api_access_token\Authentication\Provider\AccessTokenProvider;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

 /**
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * CacheEndpointSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CacheBackendInterface $cache, TimeInterface $time) {
@@ @@
   /**
    * Get cached request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ @@
   /**
    * Store request response in cache.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   Response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     $request = $event->getRequest();
     $requestId = (string) $request->headers->get(AccessTokenProvider::REQUEST_ID);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/rest_api_access_token/src/Controller/AuthController.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Access token provider.
    *
-   * @var \Drupal\rest_api_access_token\Authentication\Provider\AccessTokenProvider
+   * @var AccessTokenProvider
    */
   protected $accessTokenProvider;

@@ @@
   /**
    * Login service.
    *
-   * @var \Drupal\rest_api_access_token\Service\LoginService
+   * @var LoginService
    */
   protected $loginService;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * AuthController constructor.
    *
-   * @param \Drupal\rest_api_access_token\Authentication\Provider\AccessTokenProvider $accessTokenProvider
+   * @param AccessTokenProvider $accessTokenProvider
    *   Access token provider.
-   * @param \Drupal\rest_api_access_token\Service\LoginService $loginService
+   * @param LoginService $loginService
    *   Login service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   Current user.
    */
   public function __construct(AccessTokenProvider $accessTokenProvider, LoginService $loginService, EventDispatcherInterface $eventDispatcher, AccountProxyInterface $account) {
@@ @@
   /**
    * Get token and secret after success login.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Symfony http request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Json response.
    *
    * @throws \Exception
@@ @@
     $token = $this->loginService->login($login, $password);

     $event = new TokenResponseEvent($token, $data);
-    $this->eventDispatcher->dispatch(AccessTokenEvents::TOKEN_RESPONSE, $event);
+    $this->eventDispatcher->dispatch($event, AccessTokenEvents::TOKEN_RESPONSE);

     if (!$event->hasAccess()) {
       throw new AuthenticationException($event->getErrorMessage());
@@ @@
   /**
    * Logout user from current device.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Symfony http request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Json response.
    */
   public function logout(Request $request) {
@@ @@
     $status = $this->loginService->logout($publicToken);

     $event = new LogoutEvent($request, $user);
-    $this->eventDispatcher->dispatch(AccessTokenEvents::LOGOUT, $event);
+    $this->eventDispatcher->dispatch($event, AccessTokenEvents::LOGOUT);

     $response = [
       self::FIELD_LOGOUT => $status,
@@ @@
   /**
    * Logout user from all devices.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Symfony http request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Json response.
    */
   public function logoutFromAllDevices(Request $request) {
@@ @@
     $status = $this->loginService->logoutFromAllDevices($user);

     $event = new LogoutEvent($request, $user);
-    $this->eventDispatcher->dispatch(AccessTokenEvents::LOGOUT, $event);
+    $this->eventDispatcher->dispatch($event, AccessTokenEvents::LOGOUT);

     $response = [
       self::FIELD_LOGOUT => $status,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/rest_api_access_token/src/Authentication/Provider/AccessTokenProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_api_access_token\Authentication\Provider;

+use Drupal\user\UserStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Token repository.
    *
-   * @var \Drupal\rest_api_access_token\Repository\TokenRepository
+   * @var TokenRepository
    */
   protected $tokenRepository;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Translator.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $translator;

@@ @@
   /**
    * User storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * AccessTokenProvider constructor.
    *
-   * @param \Drupal\rest_api_access_token\Repository\TokenRepository $tokenRepository
+   * @param TokenRepository $tokenRepository
    *   Token repository.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translator
+   * @param TranslationInterface $translator
    *   Translator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Invalid plugin definition exception.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Plugin not found exception.
    */
   public function __construct(TokenRepository $tokenRepository, ConfigFactoryInterface $configFactory, TranslationInterface $translator, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Authenticate user via tokens in request header.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Symfony http request.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   User entity.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/rest_api_access_token/src/Authentication/Event/TokenResponseEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_api_access_token\Authentication\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\rest_api_access_token\Model\Token;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class TokenResponseEvent extends Event.
@@ @@
   /**
    * Token model.
    *
-   * @var \Drupal\rest_api_access_token\Model\Token
+   * @var Token
    */
   private $token;

@@ @@
   /**
    * TokenResponseEvent constructor.
    *
-   * @param \Drupal\rest_api_access_token\Model\Token $token
+   * @param Token $token
    *   Token model.
    * @param array $requestContent
    *   Request content.
@@ @@
   /**
    * Get Token model.
    *
-   * @return \Drupal\rest_api_access_token\Model\Token
+   * @return Token
    *   Token model.
    */
   public function getToken(): Token {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/rest_api_access_token/src/Authentication/Event/LogoutEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_api_access_token\Authentication\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\Entity\User;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
   /**
    * Request model.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   private $request;

@@ @@
   /**
    * User entity.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $user;

@@ @@
   /**
    * LogoutEvent constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request model.
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   User entity.
    */
   public function __construct(Request $request, User $user) {
@@ @@
   /**
    * Get Request model.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   Request model.
    */
   public function getRequest(): Request {
@@ @@
   /**
    * Get User entity.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   User entity.
    */
   public function getUser(): User {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 8 files have been changed by Rector                                       

