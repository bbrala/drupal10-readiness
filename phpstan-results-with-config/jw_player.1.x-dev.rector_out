modules/contrib/jw_player/jw_player.api.php
modules/contrib/jw_player/jw_player.install
modules/contrib/jw_player/jw_player.module
modules/contrib/jw_player/src/Element/JwPlayer.php
modules/contrib/jw_player/src/Entity/Jw_player.php
modules/contrib/jw_player/src/EventSubscriber/JwPlayerSettingsCacheTag.php
modules/contrib/jw_player/src/Form/JwplayerPresetAdd.php
modules/contrib/jw_player/src/Form/JwplayerSettingsForm.php
modules/contrib/jw_player/src/Jw_playerInterface.php
modules/contrib/jw_player/src/Jw_playerListBuilder.php
modules/contrib/jw_player/src/Plugin/Field/FieldFormatter/JwplayerFormatter.php
modules/contrib/jw_player/tests/src/Functional/JwPlayer7ConfigurationTest.php
modules/contrib/jw_player/tests/src/Functional/JwPlayerConfigurationTest.php

8 files with changes
====================

1) modules/contrib/jw_player/tests/src/Functional/JwPlayerConfigurationTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create jw_player content type.
     $this->drupalCreateContentType(array('type' => 'jw_player', 'name' => 'JW content'));
@@ @@
       'jw_player_hosting' => 'cloud',
       'cloud_player_library_url' => $cloud_library = 'https://content.jwplatform.com/libraries/' . $this->randomMachineName(8) . '.js',
     ];
-    $this->drupalPostForm('admin/config/media/jw_player/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/media/jw_player/settings');
+    $this->submitForm($edit, t('Save configuration'));
     // Create a jw player preset.
     $edit = array(
       'label' => 'Test preset',
@@ @@
       'settings[mute]' => TRUE,
       'settings[autostart]' => TRUE,
     );
-    $this->drupalPostForm('admin/config/media/jw_player/add', $edit, t('Save'));
-    $this->assertText('Saved the Test preset Preset.');
+    $this->drupalGet('admin/config/media/jw_player/add');
+    $this->submitForm($edit, t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Saved the Test preset Preset.');
     // Make sure preset has correct values.
     $this->drupalGet('admin/config/media/jw_player/test_preset');
-    $this->assertFieldByName('label', 'Test preset');
-    $this->assertFieldByName('description', 'Test preset description');
-    $this->assertFieldByName('settings[mode]', 'html5');
-    $this->assertFieldByName('settings[skin]', 'bekle');
-    $this->assertFieldByName('settings[advertising][client]', 'vast');
-    $this->assertFieldByName('settings[advertising][tag]', 'www.example.com/vast');
-    $this->assertFieldByName('settings[controlbar]', 'bottom');
-    $this->assertFieldByName('settings[mute]', TRUE);
-    $this->assertFieldByName('settings[autostart]', TRUE);
-    $this->assertNoFieldByName('settings[sharing]');
+    $this->assertSession()->fieldValueEquals('label', 'Test preset');
+    $this->assertSession()->fieldValueEquals('description', 'Test preset description');
+    $this->assertSession()->fieldValueEquals('settings[mode]', 'html5');
+    $this->assertSession()->fieldValueEquals('settings[skin]', 'bekle');
+    $this->assertSession()->fieldValueEquals('settings[advertising][client]', 'vast');
+    $this->assertSession()->fieldValueEquals('settings[advertising][tag]', 'www.example.com/vast');
+    $this->assertSession()->fieldValueEquals('settings[controlbar]', 'bottom');
+    $this->assertSession()->fieldValueEquals('settings[mute]', TRUE);
+    $this->assertSession()->fieldValueEquals('settings[autostart]', TRUE);
+    $this->assertSession()->fieldValueNotEquals('settings[sharing]', '');

     // Create a JW player format file field in JW content type.
     static::fieldUIAddNewField('admin/structure/types/manage/jw_player', 'video', 'Video', 'file', array(), array('settings[file_extensions]' => 'mp4'));
-    $this->drupalPostForm('admin/structure/types/manage/jw_player/display', array('fields[field_video][type]' => 'jwplayer_formatter'), t('Save'));
-    $this->drupalPostForm(NULL, NULL, 'field_video_settings_edit');
+    $this->drupalGet('admin/structure/types/manage/jw_player/display');
+    $this->submitForm(array('fields[field_video][type]' => 'jwplayer_formatter'), t('Save'));
+    $this->submitForm(NULL, 'field_video_settings_edit');
     $edit = [
       'fields[field_video][settings_edit_form][settings][jwplayer_preset]' => 'test_preset',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Update'));
-    $this->drupalPostForm(NULL, NULL, t('Save'));
+    $this->submitForm($edit, t('Update'));
+    $this->submitForm(NULL, t('Save'));
     // Make sure JW preset is correct.
-    $this->assertText('Preset: Test preset');
-    $this->assertText('Dimensions: 100x100, uniform');
-    $this->assertText('Skin: bekle');
-    $this->assertText('Enabled options: Autostart, Mute');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Preset: Test preset');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Dimensions: 100x100, uniform');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Skin: bekle');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Enabled options: Autostart, Mute');
     // Make sure the formatter reports correct dependencies.
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
+    /** @var EntityViewDisplay $view_display */
     $view_display = EntityViewDisplay::load('node.jw_player.default');
     $this->assertTrue(in_array('jw_player.preset.test_preset', $view_display->getDependencies()['config']));

@@ @@
       'title[0][value]' => 'Test video',
       'files[field_video_0]' => \Drupal::service('file_system')->realpath('temporary://myVideo.mp4'),
     );
-    $this->drupalPostForm('node/add/jw_player', $edit, t('Save'));
-    $this->assertText('JW content Test video has been created.');
+    $this->drupalGet('node/add/jw_player');
+    $this->submitForm($edit, t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('JW content Test video has been created.');

     $element = $this->getSession()->getPage()->find('css', 'video');
     $id =  $element->getAttribute('id');
     // Check the jw_player js, since the cloud player library url is set the
     // preset config is not applied.
-    $this->assertRaw('jw_player":{"players":{"' . $id . '":{"file":"' . str_replace('/', '\/', (file_create_url(\Drupal::token()->replace('public://[date:custom:Y]-[date:custom:m]/myVideo.mp4')))) . '"');
+    $this->assertSession()->responseContains('jw_player":{"players":{"' . $id . '":{"file":"' . str_replace('/', '\/', (file_create_url(\Drupal::token()->replace('public://[date:custom:Y]-[date:custom:m]/myVideo.mp4')))) . '"');
     // Make sure the hash is there.
     $this->assertEquals(1, preg_match('/jwplayer-[a-zA-Z0-9]{1,}$/', $id));
     // Check the library created because of cloud hosting.
-    $this->assertRaw('<script src="' . $cloud_library . '"></script>');
+    $this->assertSession()->responseContains('<script src="' . $cloud_library . '"></script>');
     // @todo Add test for advertising.
   }

@@ @@
       'administer site configuration',
     ));
     $this->drupalLogin($admin_user);
+    $this->drupalGet('admin/config/media/jw_player/add');

     // Create a preset.
-    $this->drupalPostForm('admin/config/media/jw_player/add', [
+    $this->submitForm([
       'label' => 'Test preset',
       'id' => 'test_preset',
       'settings[width]' => 100,
@@ @@
     ], t('Save'));

     $this->clickLink(t('Delete'));
-    $this->drupalPostForm(NULL, [], t('Delete'));
-    $this->assertRaw(t('The @entity-type %label has been deleted.', ['@entity-type' => 'jw player preset', '%label' => 'Test preset']));
-    $this->assertEqual([], $this->xpath('//td[text()=@label]', ['@label' => 'Test preset']));
+    $this->submitForm([], t('Delete'));
+    $this->assertSession()->responseContains(t('The @entity-type %label has been deleted.', ['@entity-type' => 'jw player preset', '%label' => 'Test preset']));
+    $this->assertEquals([], $this->xpath('//td[text()=@label]', ['@label' => 'Test preset']));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jw_player/tests/src/Functional/JwPlayer7ConfigurationTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create jw_player content type.
     $this->drupalCreateContentType(array('type' => 'jw_player', 'name' => 'JW content'));
@@ @@
       'jw_player_hosting' => 'cloud',
       'jw_player_version' => 7,
     ];
-    $this->drupalPostForm('admin/config/media/jw_player/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/media/jw_player/settings');
+    $this->submitForm($edit, t('Save configuration'));
     // Create a jw player preset.
     $edit = array(
       'label' => 'Test preset',
@@ @@
       'settings[sharing_sites][sites][linkedin][enabled]' => TRUE,
       'settings[sharing_sites][sites][email][enabled]' => TRUE,
     );
-    $this->drupalPostForm('admin/config/media/jw_player/add', $edit, t('Save'));
-    $this->assertText('Saved the Test preset Preset.');
+    $this->drupalGet('admin/config/media/jw_player/add');
+    $this->submitForm($edit, t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Saved the Test preset Preset.');
     // Make sure preset has correct values.
     $this->drupalGet('admin/config/media/jw_player/test_preset');
-    $this->assertFieldByName('label', 'Test preset');
-    $this->assertFieldByName('description', 'Test preset description');
-    $this->assertNoField('settings[mode]');
-    $this->assertFieldByName('settings[preset_source]', 'drupal');
-    $this->assertFieldByName('settings[mute]', '1');
-    $this->assertFieldByName('settings[sharing]', '1');
-    $this->assertFieldByName('settings[skin]', NULL);
-    $this->assertFieldByName('settings[advertising][client]', 'vast');
-    $this->assertFieldByName('settings[advertising][tag]', 'www.example.com/vast');
-    $this->assertFieldByName('settings[advertising][tag_post]', 'www.example.com/vast');
-    $this->assertFieldByName('settings[advertising][skipoffset]', 5);
-    $this->assertFieldByName('settings[advertising][skipmessage]', 'Skip ad in xx');
-    $this->assertFieldByName('settings[advertising][skiptext]', 'Skip');
-    $this->assertFieldByName('settings[controlbar]', 'bottom');
-    $this->assertFieldByName('settings[mute]', TRUE);
-    $this->assertFieldByName('settings[autostart]', TRUE);
-    $this->assertFieldByName('settings[sharing]', TRUE);
-    $this->assertFieldByName('settings[sharing_sites][sites][linkedin][enabled]', TRUE);
-    $this->assertFieldByName('settings[sharing_sites][sites][email][enabled]', TRUE);
+    $this->assertSession()->fieldValueEquals('label', 'Test preset');
+    $this->assertSession()->fieldValueEquals('description', 'Test preset description');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists('settings[mode]');
+    $this->assertSession()->fieldValueEquals('settings[preset_source]', 'drupal');
+    $this->assertSession()->fieldValueEquals('settings[mute]', '1');
+    $this->assertSession()->fieldValueEquals('settings[sharing]', '1');
+    $this->assertSession()->fieldExists('settings[skin]');
+    $this->assertSession()->fieldValueEquals('settings[advertising][client]', 'vast');
+    $this->assertSession()->fieldValueEquals('settings[advertising][tag]', 'www.example.com/vast');
+    $this->assertSession()->fieldValueEquals('settings[advertising][tag_post]', 'www.example.com/vast');
+    $this->assertSession()->fieldValueEquals('settings[advertising][skipoffset]', 5);
+    $this->assertSession()->fieldValueEquals('settings[advertising][skipmessage]', 'Skip ad in xx');
+    $this->assertSession()->fieldValueEquals('settings[advertising][skiptext]', 'Skip');
+    $this->assertSession()->fieldValueEquals('settings[controlbar]', 'bottom');
+    $this->assertSession()->fieldValueEquals('settings[mute]', TRUE);
+    $this->assertSession()->fieldValueEquals('settings[autostart]', TRUE);
+    $this->assertSession()->fieldValueEquals('settings[sharing]', TRUE);
+    $this->assertSession()->fieldValueEquals('settings[sharing_sites][sites][linkedin][enabled]', TRUE);
+    $this->assertSession()->fieldValueEquals('settings[sharing_sites][sites][email][enabled]', TRUE);

     // Create a JW player format file field in JW content type.
     static::fieldUIAddNewField('admin/structure/types/manage/jw_player', 'video', 'Video', 'file', array(), array('settings[file_extensions]' => 'mp4'));
     // Create a Image field in JW content type.
     static::fieldUIAddNewField('admin/structure/types/manage/jw_player', 'image_preview', 'image_preview', 'image', [], []);
-    $this->drupalPostForm('admin/structure/types/manage/jw_player/display', array('fields[field_video][type]' => 'jwplayer_formatter'), t('Save'));
-    $this->drupalPostForm(NULL, NULL, 'field_video_settings_edit');
+    $this->drupalGet('admin/structure/types/manage/jw_player/display');
+    $this->submitForm(array('fields[field_video][type]' => 'jwplayer_formatter'), t('Save'));
+    $this->submitForm(NULL, 'field_video_settings_edit');
     // Set the image field as preview of the jw player video.
     $edit = [
       'fields[field_video][settings_edit_form][settings][jwplayer_preset]' => 'test_preset',
@@ @@
       'fields[field_video][settings_edit_form][settings][preview_image_field]' => 'node:jw_player|field_image_preview',
       'fields[field_video][settings_edit_form][settings][preview_image_style]' => 'medium',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Update'));
-    $this->drupalPostForm(NULL, NULL, t('Save'));
+    $this->submitForm($edit, t('Update'));
+    $this->submitForm(NULL, t('Save'));
     // Make sure JW preset is correct.
-    $this->assertText('Preset: Test preset');
-    $this->assertText('Dimensions: 100x100, uniform');
-    $this->assertText('Preview: image_preview (Medium');
-    $this->assertText('Enabled options: Autostart, Mute, Sharing');
-    $this->assertText('Sharing sites: Email, LinkedIn');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Preset: Test preset');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Dimensions: 100x100, uniform');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Preview: image_preview (Medium');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Enabled options: Autostart, Mute, Sharing');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sharing sites: Email, LinkedIn');
     // Make sure the formatter reports correct dependencies.
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
+    /** @var EntityViewDisplay $view_display */
     $view_display = EntityViewDisplay::load('node.jw_player.default');
     $this->assertTrue(in_array('jw_player.preset.test_preset', $view_display->getDependencies()['config']));

@@ @@

     // Upload an image in the node.
     $images = $this->getTestFiles('image')[1];
-    $this->drupalPostForm('node/add/jw_player', [
+    $this->drupalGet('node/add/jw_player');
+    $this->submitForm([
       'files[field_image_preview_0]' => $images->uri,
     ], t('Upload'));

@@ @@
       'files[field_video_0]' => \Drupal::service('file_system')->realpath('temporary://myVideo.mp4'),
       'field_image_preview[0][alt]' => 'preview_image',
     );
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertText('JW content Test video has been created.');
+    $this->submitForm($edit, t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('JW content Test video has been created.');

     $element = $this->getSession()->getPage()->find('css', 'video');
     $id =  $element->getAttribute('id');
@@ @@
     $decoded_info = json_decode($player_info, TRUE);

     // Assert the image and file.
-    $image = file_create_url(\Drupal::token()->replace('public://styles/medium/public/[date:custom:Y]-[date:custom:m]/' . $images->filename));
+    $image = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::token()->replace('public://styles/medium/public/[date:custom:Y]-[date:custom:m]/' . $images->filename));
     $this->assertTrue(strpos($decoded_info['jw_player']['players'][$id]['image'], $image) !== FALSE);
-    $file = file_create_url(\Drupal::token()->replace('public://[date:custom:Y]-[date:custom:m]/myVideo.mp4'));
-    $this->assertEqual($file, $decoded_info['jw_player']['players'][$id]['file']);
+    $file = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::token()->replace('public://[date:custom:Y]-[date:custom:m]/myVideo.mp4'));
+    $this->assertEquals($file, $decoded_info['jw_player']['players'][$id]['file']);

     // Make sure the hash is there.
     $this->assertEquals(1, preg_match('/jwplayer-[a-zA-Z0-9]{1,}$/', $id));
     // Check the library created because of cloud hosting.
-    $this->assertRaw('<script src="' . $cloud_library . '"></script>');
+    $this->assertSession()->responseContains('<script src="' . $cloud_library . '"></script>');

     // Change player hosting.
     $edit = [
@@ @@
       'jw_player_hosting' => 'self',
       'jw_player_key' => 'this_is_my_fancy_license_key',
     ];
-    $this->drupalPostForm('admin/config/media/jw_player/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/media/jw_player/settings');
+    $this->submitForm($edit, t('Save configuration'));
     $this->drupalGet('node/1');
     $element = $this->getSession()->getPage()->find('css', 'video');
     $id =  $element->getAttribute('id');
@@ @@
     $this->assertEquals('Skip', $decoded_info['jw_player']['players'][$id]['advertising']['skiptext']);

     // Check the library created because of cloud hosting.
-    $this->assertNoRaw('<script src="' . $cloud_library . '"></script>');
+    $this->assertSession()->responseNotContains('<script src="' . $cloud_library . '"></script>');

     // Test the formatter for a link field.
     static::fieldUIAddNewField('admin/structure/types/manage/jw_player', 'jw_link', 'JW link', 'link', [], []);
-    $this->drupalPostForm('admin/structure/types/manage/jw_player/display', array('fields[field_jw_link][type]' => 'jwplayer_formatter'), t('Save'));
+    $this->drupalGet('admin/structure/types/manage/jw_player/display');
+    $this->submitForm(array('fields[field_jw_link][type]' => 'jwplayer_formatter'), t('Save'));
     // Add a new node.
     $this->drupalGet('node/add/jw_player');
     $edit = [
@@ @@
       'field_jw_link[0][uri]' => 'https://www.youtube.com/watch?v=mAAIfi0pYHw',
       'field_jw_link[0][title]' => 'Jw Player Drupal 7',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $node = $this->drupalGetNodeByTitle('jw_link');
     $this->drupalGet('node/' . $node->id());
@@ @@
     $player_info = (string) $this->xpath('//script[@data-drupal-selector="drupal-settings-json"]')[0]->getHtml();
     $decoded_info = json_decode($player_info, TRUE);
     // Check the link info is in the player js.
-    $this->assertEqual('https://www.youtube.com/watch?v=mAAIfi0pYHw', $decoded_info['jw_player']['players'][$id]['file']);
+    $this->assertEquals('https://www.youtube.com/watch?v=mAAIfi0pYHw', $decoded_info['jw_player']['players'][$id]['file']);
   }

   /**
@@ @@
       'jw_player_hosting' => 'self',
       'jw_player_key' => $license_key = 'this_is_my_fancy_license_key',
     ];
-    $this->drupalPostForm('admin/config/media/jw_player/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/media/jw_player/settings');
+    $this->submitForm($edit, t('Save configuration'));

     // Assert the key is saved.
     $this->drupalGet('admin/config/media/jw_player/settings');
-    $this->assertFieldByName('jw_player_key', $license_key);
+    $this->assertSession()->fieldValueEquals('jw_player_key', $license_key);

     $edit = [
       'jw_player_hosting' => 'cloud',
       'cloud_player_library_url' => $cloud_url = 'this_is_my_fancy_cloud_url',
     ];
-    $this->drupalPostForm('admin/config/media/jw_player/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/media/jw_player/settings');
+    $this->submitForm($edit, t('Save configuration'));

     // Assert the cloud url is saved and the license key is cleared.
     $this->drupalGet('admin/config/media/jw_player/settings');
-    $this->assertNoFieldByName('jw_player_key', $license_key);
-    $this->assertFieldByName('cloud_player_library_url', $cloud_url);
+    $this->assertSession()->fieldValueNotEquals('jw_player_key', $license_key);
+    $this->assertSession()->fieldValueEquals('cloud_player_library_url', $cloud_url);
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * AssertNoFieldRector
 * AssertNoRawRector
 * AssertRawRector
 * AssertTextRector
 * FileCreateUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jw_player/src/Plugin/Field/FieldFormatter/JwplayerFormatter.php:209

    ---------- begin diff ----------
@@ @@
       if ($item->entity) {
         $file_uri = $item->entity->getFileUri();
         $file_mime = $item->entity->getMimeType();
-        $uri = file_create_url($file_uri);
+        $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($file_uri);

         // Add cache tags for the referenced file and the preset if it can be
         // loaded, to prevent fatal errors.
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/jw_player/src/Form/JwplayerPresetAdd.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jw_player\Form;

+use Drupal\jw_player\Jw_playerInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @var \Drupal\jw_player\Jw_playerInterface
+   * @var Jw_playerInterface
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/jw_player/src/EventSubscriber/JwPlayerSettingsCacheTag.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs a JwPlayerSettingsCacheTag object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ @@
   /**
    * Invalidate the 'library_info' cache tag whenever the settings are modified.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/jw_player/src/Element/JwPlayer.php:185

    ---------- begin diff ----------
@@ @@
     $library = $library_discovery->getLibraryByName('jw_player', 'jwplayer');

     if (!empty($library['library path'])) {
-      $defaults['base'] = file_create_url($library['library path'] . '/');
+      $defaults['base'] = \Drupal::service('file_url_generator')->generateAbsoluteString($library['library path'] . '/');
       // JW Player 7+ no longer uses the base for the flash path but supports
       // an explicit configuration option for it again.
       $defaults['flashplayer'] = $defaults['base'] . 'jwplayer.flash.swf';
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jw_player/jw_player.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Asset\LibrariesDirectoryFileFinder;
 /**
  * @file
  * Adds a theme function which allows theme developers to use the JW Player.
@@ @@
     $pattern = jw_player_use_legacy() ? '/\.xml|\.swf$/' : '/\.css$/';

     if (\Drupal::hasService('library.libraries_directory_file_finder')) {
-      /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
+      /** @var LibrariesDirectoryFileFinder $library_file_finder */
       $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
       $directory = $library_file_finder->find('jwplayer_skins');
     }
@@ @@
     $library_skins = [];
     if (!jw_player_use_legacy() && $config->get('jw_player_key')) {
       if (\Drupal::hasService('library.libraries_directory_file_finder')) {
-        /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
+        /** @var LibrariesDirectoryFileFinder $library_file_finder */
         $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
         $directory = $library_file_finder->find('jwplayer');
       }
@@ @@
   if ($config->get('jw_player_version') == '7' && $config->get('jw_player_key')) {
     // Check whether the library version 7 exists in library folder.
     if (\Drupal::hasService('library.libraries_directory_file_finder')) {
-      /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
+      /** @var LibrariesDirectoryFileFinder $library_file_finder */
       $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
       $version_7_path = $library_file_finder->find('jwplayer7');
     }
@@ @@
     // Use integration files from library definition.
     foreach ($info['integration files'] as $module => $files) {
       foreach (array_keys($files) as $type) {
-        $module_path = drupal_get_path('module', $module);
+        $module_path = \Drupal::service('extension.list.module')->getPath($module);
         foreach ($files[$type] as $data => $option) {
           if (is_numeric($data)) {
             $option = "{$module_path}/{$option}";
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


8) modules/contrib/jw_player/jw_player.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Asset\LibrariesDirectoryFileFinder;
 /**
  * @file
  * Install, update and uninstall functions for the JW Player module.
@@ @@

     // Check whether the library version 7 exists in library folder.
     if (\Drupal::hasService('library.libraries_directory_file_finder')) {
-      /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
+      /** @var LibrariesDirectoryFileFinder $library_file_finder */
       $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
       $directory = $library_file_finder->find('jwplayer');
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

