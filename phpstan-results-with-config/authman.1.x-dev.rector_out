modules/contrib/authman/src/Access/AuthmanAuthorizationCodeReceive.php
modules/contrib/authman/src/Annotation/AuthmanOauth.php
modules/contrib/authman/src/AuthmanAuthListBuilder.php
modules/contrib/authman/src/AuthmanInstance/AuthmanOauthFactory.php
modules/contrib/authman/src/AuthmanInstance/AuthmanOauthFactoryInterface.php
modules/contrib/authman/src/AuthmanInstance/AuthmanOauthInstance.php
modules/contrib/authman/src/AuthmanInstance/AuthmanOauthInstanceInterface.php
modules/contrib/authman/src/AuthmanPluginManager.php
modules/contrib/authman/src/Controller/AuthmanOauthAuthorizationCodeController.php
modules/contrib/authman/src/Entity/AuthmanAuth.php
modules/contrib/authman/src/Entity/AuthmanAuthInterface.php
modules/contrib/authman/src/EntityHandlers/AuthmanAuthRouteProvider.php
modules/contrib/authman/src/EntityHandlers/AuthmanAuthStorage.php
modules/contrib/authman/src/Exception/AuthmanAccessTokenException.php
modules/contrib/authman/src/Exception/AuthmanClientCredentialsException.php
modules/contrib/authman/src/Exception/AuthmanInstanceException.php
modules/contrib/authman/src/Exception/AuthmanKeyException.php
modules/contrib/authman/src/Exception/AuthmanPluginException.php
modules/contrib/authman/src/Exception/AuthmanTokenRenewalException.php
modules/contrib/authman/src/Form/AuthmanAuthForm.php
modules/contrib/authman/src/Form/AuthmanAuthInfoForm.php
modules/contrib/authman/src/Plugin/AuthmanOauth/AuthmanOauthPluginBase.php
modules/contrib/authman/src/Plugin/AuthmanOauth/AuthmanOauthPluginInterface.php
modules/contrib/authman/src/Plugin/AuthmanOauth/AuthmanOauthPluginResourceOwnerInterface.php
modules/contrib/authman/src/Plugin/AuthmanOauth/AuthmanOauthPluginScopeInterface.php
modules/contrib/authman/src/Plugin/AuthmanOauthPluginCollection.php
modules/contrib/authman/src/Plugin/KeyInput/OauthClientKeyInput.php
modules/contrib/authman/src/Plugin/KeyType/OauthAccessTokenKeyType.php
modules/contrib/authman/src/Plugin/KeyType/OauthClientKeyType.php
modules/contrib/authman/src/Plugin/KeyType/OauthKeyTypeInterface.php
modules/contrib/authman/src/Token/AuthmanAccessToken.php
modules/contrib/authman/src/Token/AuthmanAccessTokenProxyTrait.php
modules/contrib/authman/tests/modules/authman_test_providers/src/AuthmanTestAuthorizationCodeProvider.php
modules/contrib/authman/tests/modules/authman_test_providers/src/AuthmanTestClientCredentialsProvider.php
modules/contrib/authman/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestAuthorizationCode.php
modules/contrib/authman/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestClientCredentials.php
modules/contrib/authman/tests/modules/authman_test_time/src/TimeMachine.php
modules/contrib/authman/tests/src/Functional/AuthmanCrudUiTest.php
modules/contrib/authman/tests/src/Functional/AuthmanFormTest.php
modules/contrib/authman/tests/src/Functional/AuthmanInfoFormTest.php
modules/contrib/authman/tests/src/FunctionalJavascript/AuthmanFormTest.php
modules/contrib/authman/tests/src/Kernel/AuthmanAuthorizationCodeTest.php
modules/contrib/authman/tests/src/Kernel/AuthmanClientCredentialTest.php
modules/contrib/authman/tests/src/Kernel/AuthmanKeyTypeTest.php
modules/contrib/authman/tests/src/Traits/AuthmanConfigTrait.php
modules/contrib/authman/tests/src/Unit/AuthmanOauthInstanceUnitTest.php

25 files with changes
=====================

1) modules/contrib/authman/tests/src/Traits/AuthmanConfigTrait.php:23

    ---------- begin diff ----------
@@ @@
    * @param array|null $keyValues
    *   Optional values.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   A saved access token key.
    */
   protected function createClientKey(?array $keyValues = []): KeyInterface {
-    /** @var \Drupal\key\KeyInterface $clientKey */
+    /** @var KeyInterface $clientKey */
     $clientKey = Key::create([
       'id' => 'client_' . $this->randomMachineName(),
       'key_type' => 'authman_oauth_client',
@@ @@
    * @param array|null $keyValues
    *   Optional values.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   A saved access token key.
    */
   protected function createAccessTokenKey(?array $keyValues = []): KeyInterface {
-    /** @var \Drupal\key\KeyInterface $accessTokenKey */
+    /** @var KeyInterface $accessTokenKey */
     $accessTokenKey = Key::create([
       'id' => 'access_token_' . $this->randomMachineName(),
       'key_type' => 'authman_oauth_access_token',
@@ @@
    *   The ID of an Authman plguin.
    * @param string $grantType
    *   The grant type.
-   * @param \Drupal\key\KeyInterface|null $clientKey
+   * @param KeyInterface|null $clientKey
    *   Optionally associate a client Key.
-   * @param \Drupal\key\KeyInterface|null $accessTokenKey
+   * @param KeyInterface|null $accessTokenKey
    *   Optionally associate an access token Key.
    *
-   * @return \Drupal\authman\Entity\AuthmanAuthInterface
+   * @return AuthmanAuthInterface
    *   A saved Authman config instance.
    */
   protected function createAuthmanConfig(string $plugin, string $grantType, ?KeyInterface $clientKey = NULL, ?KeyInterface $accessTokenKey = NULL): AuthmanAuthInterface {
@@ @@
       $values['access_token_key'] = $accessTokenKey->id();
     }

-    /** @var \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig */
+    /** @var AuthmanAuthInterface $authmanConfig */
     $authmanConfig = AuthmanAuth::create($values);
     $authmanConfig->save();
     return $authmanConfig;
@@ @@
   /**
    * Get the authman instance factory.
    *
-   * @return \Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface
+   * @return AuthmanOauthFactoryInterface
    *   The authman instance factory.
    */
   protected function authmanInstanceFactory(): AuthmanOauthFactoryInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/authman/tests/src/Kernel/AuthmanClientCredentialTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\authman\Kernel;

+use Drupal\authman_test_time\TimeMachine;
+use GuzzleHttp\Psr7\Request;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman_test_providers\Plugin\AuthmanOauth\AuthmanTestClientCredentials;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
   /**
    * A mock Guzzle handler.
    *
-   * @var \GuzzleHttp\Handler\MockHandler
+   * @var MockHandler
    */
   protected $mockHandler;

@@ @@

     parent::setUp();

-    /** @var \Drupal\authman_test_time\TimeMachine $timeMachine */
+    /** @var TimeMachine $timeMachine */
     $timeMachine = \Drupal::service('datetime.time');
     $this->currentTime = new \DateTime('18th October 2014 4:00:00pm Asia/Singapore');
     $timeMachine->setTime($this->currentTime);
@@ @@
     $authmanInstance->authenticatedRequest('GET', 'http://example.com/resource/foo/1');
     $this->assertCount(2, $this->historyContainer);

-    /** @var \GuzzleHttp\Psr7\Request[] $requests */
+    /** @var Request[] $requests */
     $requests = array_column($this->historyContainer, 'request');
-    /** @var \GuzzleHttp\Psr7\Response[] $responses */
+    /** @var Response[] $responses */
     $responses = array_column($this->historyContainer, 'response');
     $this->assertEquals('POST', $requests[0]->getMethod());
     $this->assertEquals('http://example.com/oauth2/token', (string) $requests[0]->getUri());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/authman/tests/src/Kernel/AuthmanAuthorizationCodeTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\authman\Kernel;

+use Drupal\authman_test_time\TimeMachine;
+use GuzzleHttp\Psr7\Request;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Exception\AuthmanTokenRenewalException;
 use Drupal\authman\Token\AuthmanAccessToken;
@@ @@
   /**
    * A mock Guzzle handler.
    *
-   * @var \GuzzleHttp\Handler\MockHandler
+   * @var MockHandler
    */
   protected $mockHandler;

@@ @@

     parent::setUp();

-    /** @var \Drupal\authman_test_time\TimeMachine $timeMachine */
+    /** @var TimeMachine $timeMachine */
     $timeMachine = \Drupal::service('datetime.time');
     $this->currentTime = new \DateTime('18th October 2014 4:00:00pm Asia/Singapore');
     $timeMachine->setTime($this->currentTime);
@@ @@
     $this->assertCount(2, $this->historyContainer);

     // Refresh token flow.
-    /** @var \GuzzleHttp\Psr7\Request[] $requests */
+    /** @var Request[] $requests */
     $requests = array_column($this->historyContainer, 'request');
-    /** @var \GuzzleHttp\Psr7\Response[] $responses */
+    /** @var Response[] $responses */
     $responses = array_column($this->historyContainer, 'response');

     $this->assertEquals('POST', $requests[0]->getMethod());
@@ @@
     $authmanInstance->authenticatedRequest('GET', 'http://example.com/resource/foo/1');
     $this->assertCount(1, $this->historyContainer);

-    /** @var \GuzzleHttp\Psr7\Request[] $requests */
+    /** @var Request[] $requests */
     $requests = array_column($this->historyContainer, 'request');
-    /** @var \GuzzleHttp\Psr7\Response[] $responses */
+    /** @var Response[] $responses */
     $responses = array_column($this->historyContainer, 'response');
     $this->assertEquals('GET', $requests[0]->getMethod());
     $this->assertEquals('http://example.com/resource/foo/1', (string) $requests[0]->getUri());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/authman/tests/src/Functional/AuthmanInfoFormTest.php:60

    ---------- begin diff ----------
@@ @@
     $this->drupalGet($authmanConfig->toUrl('information'));
     $this->assertSession()->statusCodeEquals(200);

-    $this->drupalPostForm(NULL, [], 'edit-reset');
+    $this->submitForm([], 'edit-reset');
     $this->assertSession()->pageTextContains('Deleted access token');

     // Token values were cleared.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/authman/tests/src/Functional/AuthmanCrudUiTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\authman\Functional;

+use Drupal\user\UserInterface;
 use Drupal\authman\Entity\AuthmanAuth;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman_test_providers\Plugin\AuthmanOauth\AuthmanTestAuthorizationCode;
@@ @@
   /**
    * User interface.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Assert that admin can add an authman instance.
    *
-   * @return \Drupal\authman\Entity\AuthmanAuthInterface
+   * @return AuthmanAuthInterface
    *   The added instance.
    */
   private function assertThatAdminCanAddAuthmanInstances() : AuthmanAuthInterface {
@@ @@
     $assert->statusCodeEquals(200);
     $assert->linkExists('Add instance');
     $this->clickLink('Add instance');
-    $this->assertUrl(Url::fromRoute('entity.authman_auth.add_form'));
+    $this->assertSession()->addressEquals(Url::fromRoute('entity.authman_auth.add_form'));
     $instance_name = $this->randomMachineName();
     $id = mb_strtolower($this->randomMachineName());

@@ @@
   /**
    * Assert that admin can edit instances.
    *
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig
+   * @param AuthmanAuthInterface $authmanConfig
    *   Instance to edit.
    *
-   * @return \Drupal\authman\Entity\AuthmanAuthInterface
+   * @return AuthmanAuthInterface
    *   The edited instance.
    */
   private function assertThatAdminCanEditAuthmanInstances(AuthmanAuthInterface $authmanConfig) : AuthmanAuthInterface {
@@ @@
       'label' => $new_name,
     ], 'Save');
     $assert->pageTextContains(sprintf('Authman instance %s has been updated.', $new_name));
-    $this->assertUrl($collection_url);
+    $this->assertSession()->addressEquals($collection_url);
     return \Drupal::entityTypeManager()->getStorage('authman_auth')->loadUnchanged($authmanConfig->id());
   }

@@ @@
   /**
    * Assert that admin can delete authman instances.
    *
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig
+   * @param AuthmanAuthInterface $authmanConfig
    *   The instance to delete.
    */
   private function assertThatAdminCanDeleteAuthmanInstances(AuthmanAuthInterface $authmanConfig) : void {
    ----------- end diff -----------

Applied rules:
 * AssertUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/authman/tests/modules/authman_test_time/src/TimeMachine.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * State.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * TimeMachine constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State.
    */
   public function __construct(StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/authman/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestClientCredentials.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman_test_providers\Plugin\AuthmanOauth;

+use GuzzleHttp\Client;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstance;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginBase;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/authman/tests/modules/authman_test_providers/src/Plugin/AuthmanOauth/AuthmanTestAuthorizationCode.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman_test_providers\Plugin\AuthmanOauth;

+use GuzzleHttp\Client;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstance;
 use Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginBase;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/authman/src/Token/AuthmanAccessTokenProxyTrait.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\Token;

+use League\OAuth2\Client\Token\AccessTokenInterface;
 use Drupal\authman\Exception\AuthmanAccessTokenException;

 /**
@@ @@
   /**
    * The access token.
    *
-   * @var \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @var AccessTokenInterface|null
    */
   protected $token;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/authman/src/Token/AuthmanAccessToken.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\Token;

+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\authman\Exception\AuthmanAccessTokenException;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\key\KeyInterface;
@@ @@
   /**
    * The access token.
    *
-   * @var \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @var AccessTokenInterface|null
    */
   protected $token;

@@ @@
   /**
    * The key storage, or NULL to get directly from container.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface|null
+   * @var ConfigEntityStorageInterface|null
    */
   protected $keyStorage;

@@ @@
   /**
    * The time machine, or NULL to get directly from container.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface|null
+   * @var TimeInterface|null
    */
   protected $time;

@@ @@
    *
    * @param string $accessKeyId
    *   A Key config entity ID for an 'authman_oauth_access_token' key type.
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface|null $token
+   * @param AccessTokenInterface|null $token
    *   The access token.
    */
   public function __construct(string $accessKeyId, ?AccessTokenInterface $token = NULL) {
@@ @@
   /**
    * Saves the access token to a Key configuration entity.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   The saved Key config entity for an 'authman_oauth_access_token' key type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   If token could not be saved to Key.
    */
   public function saveToKey(): KeyInterface {
@@ @@
       throw new AuthmanAccessTokenException('Token not set.');
     }

-    /** @var \Drupal\key\KeyInterface $accessKey */
+    /** @var KeyInterface $accessKey */
     $accessKey = $this->keyStorage()->load($this->accessKeyId);
     // See \Drupal\authman\Plugin\KeyType\OauthAccessTokenKeyType.
     $accessKey->setKeyValue([
@@ @@
   /**
    * Sets the access token.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $token
+   * @param AccessTokenInterface $token
    *   The access token.
    */
   public function setAccessToken(AccessTokenInterface $token): void {
@@ @@
   /**
    * Get the access token.
    *
-   * @return \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @return AccessTokenInterface|null
    *   The access token.
    */
   public function getAccessToken(): ?AccessTokenInterface {
@@ @@
   /**
    * Get key config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The key config storage.
    */
   protected function keyStorage(): ConfigEntityStorageInterface {
@@ @@
   /**
    * Set key config storage.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $keyStorage
+   * @param ConfigEntityStorageInterface $keyStorage
    *   The key config storage.
    */
   public function setKeyStorage(ConfigEntityStorageInterface $keyStorage): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/authman/src/Plugin/AuthmanOauth/AuthmanOauthPluginResourceOwnerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Renders a resource owner retrieved by an instance of this plugin.
    *
-   * @param \League\OAuth2\Client\Provider\ResourceOwnerInterface $resourceOwner
+   * @param ResourceOwnerInterface $resourceOwner
    *   A resource owner instance.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/authman/src/Plugin/AuthmanOauth/AuthmanOauthPluginInterface.php:29

    ---------- begin diff ----------
@@ @@
    * @param string $grantType
    *   The grant type, any of value of constants
    *   \Drupal\authman\Entity\AuthmanAuthInterface::GRANT_*.
-   * @param \Drupal\key\KeyInterface $clientKey
+   * @param KeyInterface $clientKey
    *   A client credentials key.
    *
-   * @return \Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface
+   * @return AuthmanOauthInstanceInterface
    *   A single-use OAuth provider instance.
    *
    * @see \Drupal\authman\AuthmanInstance\AuthmanOauthFactory::get
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/authman/src/Form/AuthmanAuthInfoForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginResourceOwnerInterface;
 use Drupal\Core\Ajax\AjaxFormHelperTrait;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The OAuth provider instance factory.
    *
-   * @var \Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface
+   * @var AuthmanOauthFactoryInterface
    */
   protected $authmanOauthFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/authman/src/Form/AuthmanAuthForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\Form;

+use Drupal\key\KeyInterface;
 use Drupal\authman\AuthmanPluginManager;
 use Drupal\authman\Entity\AuthmanAuth;
 use Drupal\authman\Entity\AuthmanAuthInterface;
@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Plugin manager.
    *
-   * @var \Drupal\authman\AuthmanPluginManager
+   * @var AuthmanPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The plugin form factory.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

@@ @@
   /**
    * Constructs a AuthmanAuthForm.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\authman\AuthmanPluginManager $pluginManager
+   * @param AuthmanPluginManager $pluginManager
    *   Plugin manager.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $pluginFormFactory
+   * @param PluginFormFactoryInterface $pluginFormFactory
    *   The plugin form factory.
    */
   public function __construct(LoggerInterface $logger, MessengerInterface $messenger, AuthmanPluginManager $pluginManager, PluginFormFactoryInterface $pluginFormFactory) {
@@ @@
     do {
       $keyId = ($i === 1 ? $baseKeyId : sprintf('%s_%d', $baseKeyId, $i));
       $i++;
-      /** @var \Drupal\key\KeyInterface|null $key */
+      /** @var KeyInterface|null $key */
       $key = Key::load($keyId);
     } while ($key);
     return $keyId;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/authman/src/EntityHandlers/AuthmanAuthStorage.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\EntityHandlers;

+use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;

 /**
  * Storage handler for "authman_auth" configuration entities.
  *
- * @method \Drupal\authman\Entity\AuthmanAuthInterface|null load($id)
+ * @method AuthmanAuthInterface|null load($id)
  */
 class AuthmanAuthStorage extends ConfigEntityStorage {}
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


16) modules/contrib/authman/src/EntityHandlers/AuthmanAuthRouteProvider.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Gets information route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   Information route if applicable.
    */
   protected function getInformationRoute(EntityTypeInterface $entity_type): ?Route {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/authman/src/Entity/AuthmanAuthInterface.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the client key.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   Client Key, or NULL if it does not exist.
    */
   public function getClientKey(): ?KeyInterface;
@@ @@
   /**
    * Gets the access token Key.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   Client Key, or NULL if it does not exist.
    */
   public function getAccessTokenKey(): ?KeyInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/authman/src/Entity/AuthmanAuth.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\Entity;

+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\authman\Plugin\AuthmanOauthPluginCollection;
 use Drupal\authman\Plugin\AuthmanOauth\AuthmanOauthPluginInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * Encapsulates the creation of the plugin collection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection|null
+   * @return LazyPluginCollection|null
    *   The plugin collection, or NULL if no plugin collection was created.
    */
   protected function getPluginCollection(): ?AuthmanOauthPluginCollection {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/authman/src/Controller/AuthmanOauthAuthorizationCodeController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\Controller;

+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface;
+use Drupal\key\KeyInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Token\AuthmanAccessToken;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * The private tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateStoreFactory;

@@ @@
   /**
    * The OAuth provider instance factory.
    *
-   * @var \Drupal\authman\AuthmanInstance\AuthmanOauthFactoryInterface
+   * @var AuthmanOauthFactoryInterface
    */
   protected $authmanOauthFactory;

@@ @@
    * Users are redirected back to the website thanks to the redirectUri
    * setting in createProvider.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Redirect response offsite.
    */
   public function start(AuthmanAuthInterface $authman_auth): Response {
@@ @@
    * Some parts copied/inspired by docs at
    * https://github.com/thephpleague/oauth2-google.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Redirects users to info page, displaying success or error message.
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authman_auth
+   * @param AuthmanAuthInterface $authman_auth
    *   The Authman instance.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A redirect response.
    */
   public function receive(Request $request, AuthmanAuthInterface $authman_auth): Response {
@@ @@
     }

     $accessKeyId = $authman_auth->getAccessTokenKeyId();
-    /** @var \Drupal\key\KeyInterface $access_key */
+    /** @var KeyInterface $access_key */
     if (!$this->keyStorage()->load($accessKeyId)) {
       $this->messenger->addError($this->t('The key %key does not exist.', ['%key' => $accessKeyId]));
       throw new \LogicException(sprintf('The key %s does not exist', $accessKeyId));
@@ @@
   /**
    * Get key config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The key config storage.
    */
   protected function keyStorage(): EntityStorageInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/authman/src/AuthmanInstance/AuthmanOauthInstanceInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\AuthmanInstance;

+use Drupal\authman\Exception\AuthmanTokenRenewalException;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\authman\Token\AuthmanAccessToken;
 use Drupal\Core\Url;
 use League\OAuth2\Client\Provider\AbstractProvider;
@@ @@
   /**
    * Get the authorization server provider.
    *
-   * @return \League\OAuth2\Client\Provider\AbstractProvider
+   * @return AbstractProvider
    *   The authorization server provider.
    */
   public function getProvider(): AbstractProvider;
@@ @@
    *   Whether to automatically renew token if necessary, or set to NULL to use
    *   the system default.
    *
-   * @return \League\OAuth2\Client\Token\AccessTokenInterface|null
+   * @return AccessTokenInterface|null
    *   The access token, or NULL if not set.
    */
   public function getToken(?bool $autoRenew = TRUE): ?AccessTokenInterface;
@@ @@
    *
    * Use removeToken if the token should be removed.
    *
-   * @param \Drupal\authman\Token\AuthmanAccessToken $token
+   * @param AuthmanAccessToken $token
    *   The access token.
    *
    * @return $this
@@ @@
   /**
    * Determine if a token needs to be renewed.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $token
+   * @param AccessTokenInterface $token
    *   An access token.
    *
    * @return bool
@@ @@
    *
    * This will initiate a call to the authorization server.
    *
-   * @param \League\OAuth2\Client\Token\AccessTokenInterface $token
+   * @param AccessTokenInterface $token
    *   An access token.
    *
-   * @return \League\OAuth2\Client\Token\AccessTokenInterface
+   * @return AccessTokenInterface
    *   An access token with renewed lifetime.
    *
-   * @throws \Drupal\authman\Exception\AuthmanTokenRenewalException
+   * @throws AuthmanTokenRenewalException
    *   Thrown when the token failed to renew.
    */
   public function tokenRenew(AccessTokenInterface $token): AccessTokenInterface;
@@ @@
   /**
    * Get the URL for authorization codes.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The authorization code URL.
    */
   public function authorizationCodeUrl(): Url;
@@ @@
   /**
    * Executes an authenticated request.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The response from the resource server.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    *   Thrown when the request fails.
    *
    * @see \GuzzleHttp\ClientInterface::send
@@ @@
    *   filtered out.
    *   See also https://github.com/thephpleague/oauth2-client/issues/863.
    *
-   * @return \Psr\Http\Message\RequestInterface
+   * @return RequestInterface
    *   an authenticated PSR-7 request instance.
    *
    * @see \League\OAuth2\Client\Provider\AbstractProvider::getAuthenticatedRequest
@@ @@
   /**
    * Sends a request instance and returns a response instance.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   The request to execute.
    * @param array $options
    *   Additional options.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    *   Thrown when the request fails.
    *
    * @see \League\OAuth2\Client\Provider\AbstractProvider::getResponse
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/authman/src/AuthmanInstance/AuthmanOauthInstance.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\AuthmanInstance;

+use League\OAuth2\Client\Grant\GrantFactory;
+use League\OAuth2\Client\Tool\RequestFactory;
+use GuzzleHttp\ClientInterface;
+use League\OAuth2\Client\OptionProvider\OptionProviderInterface;
+use League\OAuth2\Client\Provider\ResourceOwnerInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\Exception\AuthmanAccessTokenException;
 use Drupal\authman\Exception\AuthmanTokenRenewalException;
@@ @@
  * Methods of provider can be called from this class, if a token is set then
  * token arguments are automatically set before proxying to provider.
  *
- * @method static setGrantFactory(\League\OAuth2\Client\Grant\GrantFactory $factory)
- * @method \League\OAuth2\Client\Grant\GrantFactory getGrantFactory()
- * @method static setRequestFactory(\League\OAuth2\Client\Tool\RequestFactory $factory)
- * @method \League\OAuth2\Client\Tool\RequestFactory getRequestFactory()
- * @method static setHttpClient(\GuzzleHttp\ClientInterface $client)
- * @method \GuzzleHttp\ClientInterface getHttpClient()
- * @method static setOptionProvider(\League\OAuth2\Client\OptionProvider\OptionProviderInterface $provider)
- * @method \League\OAuth2\Client\OptionProvider\OptionProviderInterface getOptionProvider()
+ * @method static setGrantFactory(GrantFactory $factory)
+ * @method GrantFactory getGrantFactory()
+ * @method static setRequestFactory(RequestFactory $factory)
+ * @method RequestFactory getRequestFactory()
+ * @method static setHttpClient(ClientInterface $client)
+ * @method ClientInterface getHttpClient()
+ * @method static setOptionProvider(OptionProviderInterface $provider)
+ * @method OptionProviderInterface getOptionProvider()
  * @method string getState()
  * @method string getBaseAuthorizationUrl()
  * @method string getBaseAccessTokenUrl(array $params)
- * @method string getResourceOwnerDetailsUrl(\League\OAuth2\Client\Token\AccessToken $token)
+ * @method string getResourceOwnerDetailsUrl(AccessToken $token)
  * @method string getAuthorizationUrl(array $options = [])
  * @method mixed authorize(array $options, ?callable $redirectHandler)
  * @method AccessTokenInterface getAccessToken($grant, array $options = [])
- * @method \Psr\Http\Message\RequestInterface getRequest(string $method, string $url, array $options = [])
- * @method mixed getParsedResponse(\Psr\Http\Message\RequestInterface $request)
- * @method \League\OAuth2\Client\Provider\ResourceOwnerInterface getResourceOwner()
+ * @method RequestInterface getRequest(string $method, string $url, array $options = [])
+ * @method mixed getParsedResponse(RequestInterface $request)
+ * @method ResourceOwnerInterface getResourceOwner()
  * @method array getHeaders(?mixed $token)
  */
 class AuthmanOauthInstance implements AuthmanOauthInstanceInterface {
@@ @@
   /**
    * An instance of an authorization server provider.
    *
-   * @var \League\OAuth2\Client\Provider\AbstractProvider
+   * @var AbstractProvider
    */
   protected $provider;

@@ @@
   /**
    * An access token.
    *
-   * @var \Drupal\authman\Token\AuthmanAccessToken|null
+   * @var AuthmanAccessToken|null
    */
   protected $authmanToken;

@@ @@
   /**
    * Constructs a new AuthmanOauthInstance.
    *
-   * @param \League\OAuth2\Client\Provider\AbstractProvider $provider
+   * @param AbstractProvider $provider
    *   An instance of an authorization server provider.
    * @param string $grantType
    *   The grant type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/authman/src/AuthmanInstance/AuthmanOauthFactoryInterface.php:16

    ---------- begin diff ----------
@@ @@
    * @param string $id
    *   ID of a 'authman_auth' configuration entity.
    *
-   * @return \Drupal\authman\AuthmanInstance\AuthmanOauthInstanceInterface
+   * @return AuthmanOauthInstanceInterface
    *   A ready-to-use single-use OAuth provider instance.
    */
   public function get(string $id): AuthmanOauthInstanceInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/authman/src/AuthmanInstance/AuthmanOauthFactory.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\AuthmanInstance;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\authman\Entity\AuthmanAuthInterface;
 use Drupal\authman\EntityHandlers\AuthmanAuthStorage;
 use Drupal\authman\Exception\AuthmanClientCredentialsException;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * AuthmanOauthFactory constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Creates an access token.
    *
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authmanConfig
+   * @param AuthmanAuthInterface $authmanConfig
    *   An Authman config instance.
    *
-   * @return \Drupal\authman\Token\AuthmanAccessToken
+   * @return AuthmanAccessToken
    *   An access token with reference its storage. This is useful for when an
    *   access token needs to be refreshed and re-saved to Key.
    */
@@ @@
   /**
    * Get key config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The key config storage.
    */
   protected function keyStorage(): EntityStorageInterface {
@@ @@
   /**
    * Get authman_auth config storage.
    *
-   * @return \Drupal\authman\EntityHandlers\AuthmanAuthStorage
+   * @return AuthmanAuthStorage
    *   The authman_auth config storage.
    */
   protected function authmanAuthStorage(): AuthmanAuthStorage {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/authman/src/Annotation/AuthmanOauth.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\authman\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Description.
    *
-   * @var \Drupal\Core\Annotation\Translation|null
+   * @var Translation|null
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


25) modules/contrib/authman/src/Access/AuthmanAuthorizationCodeReceive.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The private tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateStoreFactory;

@@ @@
   /**
    * AuthmanAuthorizationCodeReceive constructor.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $privateStoreFactory
+   * @param PrivateTempStoreFactory $privateStoreFactory
    *   The private tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $privateStoreFactory) {
@@ @@
   /**
    * Protect against CSRF on authorization code receive route.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\authman\Entity\AuthmanAuthInterface $authman_auth
+   * @param AuthmanAuthInterface $authman_auth
    *   The upcasted authman_auth config entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Request $request, AuthmanAuthInterface $authman_auth): AccessResultInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 25 files have been changed by Rector                                      

