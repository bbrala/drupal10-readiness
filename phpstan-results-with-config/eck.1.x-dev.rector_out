modules/contrib/eck/eck.install
modules/contrib/eck/eck.module
modules/contrib/eck/eck.pages.inc
modules/contrib/eck/src/Access/EckEntityCreateAccessCheck.php
modules/contrib/eck/src/ArrayDeprecationWrapper.php
modules/contrib/eck/src/Controller/EckContentController.php
modules/contrib/eck/src/Controller/EckEntityBundleListBuilder.php
modules/contrib/eck/src/Controller/EckEntityListBuilder.php
modules/contrib/eck/src/Controller/EckEntityTypeListBuilder.php
modules/contrib/eck/src/EckBundleAccessControlHandler.php
modules/contrib/eck/src/EckEntityAccessControlHandler.php
modules/contrib/eck/src/EckEntityAccessControlHandlerInterface.php
modules/contrib/eck/src/EckEntityBundleInterface.php
modules/contrib/eck/src/EckEntityInterface.php
modules/contrib/eck/src/EckEntityTypeBundleInfo.php
modules/contrib/eck/src/EckEntityTypeInterface.php
modules/contrib/eck/src/Entity/EckEntity.php
modules/contrib/eck/src/Entity/EckEntityBundle.php
modules/contrib/eck/src/Entity/EckEntityRouteProvider.php
modules/contrib/eck/src/Entity/EckEntityType.php
modules/contrib/eck/src/EntityUpdateService.php
modules/contrib/eck/src/EventSubscriber/EckEntityAdminRouteSubscriber.php
modules/contrib/eck/src/Form/Entity/EckEntityDeleteForm.php
modules/contrib/eck/src/Form/Entity/EckEntityForm.php
modules/contrib/eck/src/Form/EntityBundle/EckEntityBundleDeleteConfirm.php
modules/contrib/eck/src/Form/EntityBundle/EckEntityBundleForm.php
modules/contrib/eck/src/Form/EntityType/EckEntityTypeAddForm.php
modules/contrib/eck/src/Form/EntityType/EckEntityTypeDeleteForm.php
modules/contrib/eck/src/Form/EntityType/EckEntityTypeEditForm.php
modules/contrib/eck/src/Form/EntityType/EckEntityTypeFormBase.php
modules/contrib/eck/src/PermissionsGenerator.php
modules/contrib/eck/src/Plugin/Derivative/EckEntityContentLocalTask.php
modules/contrib/eck/src/Plugin/migrate/D7EckDeriver.php
modules/contrib/eck/src/Plugin/migrate/D7EckType.php
modules/contrib/eck/src/Plugin/migrate/source/d7/EckEntity.php
modules/contrib/eck/src/Plugin/migrate/source/d7/EckEntityBundle.php
modules/contrib/eck/src/Plugin/migrate/source/d7/EckEntityTranslation.php
modules/contrib/eck/src/Plugin/migrate/source/d7/EckEntityTranslationSettings.php
modules/contrib/eck/src/Plugin/migrate/source/d7/EckEntityType.php
modules/contrib/eck/src/Routing/EckRoutes.php
modules/contrib/eck/tests/fixtures/drupal7.php
modules/contrib/eck/tests/src/Functional/AccessTest.php
modules/contrib/eck/tests/src/Functional/BundleCRUDTest.php
modules/contrib/eck/tests/src/Functional/ConfigImportTest.php
modules/contrib/eck/tests/src/Functional/DynamicBaseFieldTest.php
modules/contrib/eck/tests/src/Functional/EckEntityTranslationTest.php
modules/contrib/eck/tests/src/Functional/EntityCRUDTest.php
modules/contrib/eck/tests/src/Functional/EntityTypeCRUDTest.php
modules/contrib/eck/tests/src/Functional/FunctionalTestBase.php
modules/contrib/eck/tests/src/Functional/LocalTaskEntityTest.php
modules/contrib/eck/tests/src/Functional/MigrateUpgradeEckTest.php
modules/contrib/eck/tests/src/Functional/NavigationalStructureTest.php
modules/contrib/eck/tests/src/Functional/UITest.php
modules/contrib/eck/tests/src/Functional/WorkspacesIntegrationTest.php
modules/contrib/eck/tests/src/Kernel/EckEntityTest.php
modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckBundleTest.php
modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckDeriverTest.php
modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckFieldInstanceTest.php
modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckFieldTest.php
modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckTest.php
modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckTestBase.php
modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckTypeTest.php
modules/contrib/eck/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityBundleTest.php
modules/contrib/eck/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityExceptionTest.php
modules/contrib/eck/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityTest.php
modules/contrib/eck/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityTranslationTest.php
modules/contrib/eck/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityTypeTest.php
modules/contrib/eck/tests/src/Unit/EckEntityTest.php
modules/contrib/eck/tests/src/Unit/EntityTypeBundleInfoTest.php
modules/contrib/eck/tests/src/Unit/PermissionsGeneratorTest.php
modules/contrib/eck/tests/src/Unit/TestDoubles/FieldTypePluginManagerDummy.php
modules/contrib/eck/tests/src/Unit/TestDoubles/FieldTypePluginManagerMock.php
modules/contrib/eck/tests/src/Unit/UnitTestBase.php

41 files with changes
=====================

1) modules/contrib/eck/tests/src/Unit/UnitTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Unit {

+  use Drupal\Core\Session\AccountProxyInterface;
   use Drupal\Core\Entity\EntityInterface;
   use Drupal\Core\Entity\EntityManagerInterface;
   use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
     /**
      * {@inheritdoc}
      */
-    protected function setUp() {
+    protected function setUp(): void {
       parent::setUp();
       $this->entities = [];
       $this->prepareContainer();
@@ @@
     /**
      * Creates and returns a mocked user.
      *
-     * @return \Drupal\Core\Session\AccountProxyInterface
+     * @return AccountProxyInterface
      *   The mocked user.
      */
     private function getNewUserMock() {
@@ @@
      * @param array $values
      *   The values to be set on the created entity.
      *
-     * @return \Drupal\eck\Entity\EckEntityType
+     * @return EckEntityType
      *   The created eck entity type.
      */
     protected function createEckEntityType($entity_type_id, array $values = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/eck/tests/src/Unit/PermissionsGeneratorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Unit;

+use Drupal\eck\Entity\EckEntityType;
 use Drupal\eck\PermissionsGenerator;

 /**
@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\eck\PermissionsGenerator
+   * @var PermissionsGenerator
    */
   private $sut;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->sut = $this->createNewSubjectUnderTest();
@@ @@
   /**
    * Creates a PermissionsGenerator to be used in the tests.
    *
-   * @return \Drupal\eck\PermissionsGenerator
+   * @return PermissionsGenerator
    *   The created PermissionsGenerator instance.
    */
   private function createNewSubjectUnderTest() {
@@ @@
    */
   protected function assertOwnerPermissions($permissions) {
     foreach ($this->entities as $id => $entity) {
-      /** @var \Drupal\eck\Entity\EckEntityType $entity */
+      /** @var EckEntityType $entity */
       if ($entity->hasAuthorField()) {
         $this->assertArrayHasKey("edit own {$id} entities", $permissions);
         $this->assertArrayHasKey("delete own {$id} entities", $permissions);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/eck/tests/src/Unit/EntityTypeBundleInfoTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Unit;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\eck\EckEntityTypeBundleInfo;
-use PHPUnit_Framework_MockObject_MockObject;

 /**
  * Tests the form element implementation.
@@ @@
   /**
    * The entity type manager mock.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManagerMock;
   /**
    * The language manager mock.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManagerMock;
   /**
    * The module handler mock.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandlerMock;
   /**
    * The typed data manager mock.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManagerMock;
   /**
    * The cache backend mock.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackendMock;

@@ @@
    * Tests caching of data.
    *
    * @test
+   * @doesNotPerformAssertions
    */
   public function entityTypeHasBundlesMethodCachesData() {
     $this->cacheBackendMock = $this->getMockForAbstractClass(CacheBackendInterface::class);
@@ @@
   /**
    * Creates a new test subject.
    *
-   * @return \Drupal\eck\EckEntityTypeBundleInfo
+   * @return EckEntityTypeBundleInfo
    *   The newly created test subject.
    */
   protected function createNewTestSubject() {
@@ @@
   /**
    * Creates a new test subject with an entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityTypeMock
+   * @param EntityTypeInterface $entityTypeMock
    *   The entity type mock.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorageMock
+   * @param EntityStorageInterface $entityStorageMock
    *   The entity storage mock.
    *
-   * @return \Drupal\eck\EckEntityTypeBundleInfo
+   * @return EckEntityTypeBundleInfo
    *   The test subject.
    */
   protected function createNewTestSubjectWithEntityType(EntityTypeInterface $entityTypeMock = NULL, EntityStorageInterface $entityStorageMock = NULL) {
@@ @@
    * @param int $numberOfBundlesToCreate
    *   The number of bundles to create.
    *
-   * @return \Drupal\eck\EckEntityTypeBundleInfo
+   * @return EckEntityTypeBundleInfo
    *   The bundle info to test.
    */
   protected function createNewTestSubjectWithEntityTypeAndBundles($numberOfBundlesToCreate = 1) {
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/eck/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityExceptionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Kernel\Plugin\migrate\source;

+use Drupal\migrate\Plugin\MigrationPluginManager;
 use Drupal\migrate\Exception\RequirementsException;
 use Drupal\migrate\MigrateException;
 use Drupal\Tests\eck\Kernel\Migrate\d7\MigrateEckTestBase;
@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->migrationPluginManager = \Drupal::service('plugin.manager.migration');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckTypeTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->executeMigrations(['d7_eck_type']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Kernel\Migrate\d7;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\eck\Entity\EckEntity;
 use Drupal\eck\Entity\EckEntityBundle;
 use Drupal\eck\Entity\EckEntityType;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = \Drupal::entityTypeManager();
   }
@@ @@
    */
   public function assertEck(array $eck) {
     $message = "Failure for eck entity type '" . $eck['type'] . "' with id of '" . $eck['id'] . "'";
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityTypeManager
       ->getStorage($eck['type'])
       ->load($eck['id']);
@@ @@
   protected function assertFieldStorage($id, $expected_type, $expected_translatable, $expected_cardinality) {
     list($expected_entity_type, $expected_name) = explode('.', $id);

-    /** @var \Drupal\field\FieldStorageConfigInterface $field */
+    /** @var FieldStorageConfigInterface $field */
     $field = FieldStorageConfig::load($id);
     $this->assertInstanceOf(FieldStorageConfigInterface::class, $field);
     $this->assertEquals($expected_name, $field->getName());
@@ @@
   protected function assertFieldInstance($id, $expected_label, $expected_field_type, $is_required, $expected_translatable) {
     list($expected_entity_type, $expected_bundle, $expected_name) = explode('.', $id);

-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::load($id);
     $this->assertInstanceOf(FieldConfigInterface::class, $field);
     $this->assertEquals($expected_label, $field->label());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installConfig(static::$modules);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckFieldTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(static::$modules);
     $this->executeMigrations([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckFieldInstanceTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(static::$modules);
     $this->executeMigrations([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/eck/tests/src/Kernel/Migrate/d7/MigrateEckBundleTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->executeMigrations([
       'd7_eck_type',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/eck/tests/src/Kernel/EckEntityTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('eck');
   }
@@ @@
   /**
    * Creates ECK entity type.
    *
-   * @return \Drupal\eck\Entity\EckEntityType
+   * @return EckEntityType
    */
   protected function createEckEntityType($id, $base_fields = []) {
     $entity_type = EckEntityType::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/eck/tests/src/Functional/WorkspacesIntegrationTest.php:12

    ---------- begin diff ----------
@@ @@

   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function workspacesCanBeEnabledWhenNoEntityTypesAreDefined() {
     $this->container->get('module_installer')->install(['workspaces'], TRUE);
@@ @@

   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function workspacesCanBeEnabledWhenEntityTypeIsDefined() {
     $testType = EckEntityType::create([
@@ @@

   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function cacheCanBeClearedWhenWorkbenchIsEnabled() {
     $testType = EckEntityType::create([
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/eck/tests/src/Functional/UITest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Place the actions block, to test if the actions are placed correctly.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/eck/tests/src/Functional/NavigationalStructureTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Functional;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Behat\Mink\Exception\ResponseTextException;
+use Behat\Mink\Exception\ExpectationException;
 use Behat\Mink\Element\NodeElement;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $entity_type = $this->createEntityType();
@@ @@
   /**
    * Retrieves the entity storage handler.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage handler.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getEntityStorageHandler() {
     return \Drupal::entityTypeManager()
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function entityTypeDelete() {
     $route = 'entity.eck_entity_type.delete_form';
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function entityTypeDeleteWithMultipleBundles() {
     // Create a randomly named bundle.
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function entityTypeDeleteWithMatchingBundle() {
     $this->createEntityBundle($this->entityTypeMachineName, $this->entityTypeLabel);
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function entityTypeDeleteWithField() {
     // Delete the original bundle.
@@ @@
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function entityTypeDeleteWithContent() {
@@ @@
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function entityView() {
     $entityTitle = $this->randomString();
@@ @@
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function entityEdit() {
     $entityTitle = $this->randomString();
@@ @@
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function entityDelete() {
     $entityTitle = $this->randomString();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/eck/tests/src/Functional/MigrateUpgradeEckTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Functional;

+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\migrate_drupal_ui\Functional\MigrateUpgradeTestBase;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->writeSettings([
       'settings' => [
@@ @@
         ],
       ],
     ]);
-    $this->loadFixture(drupal_get_path('module', 'eck') . '/tests/fixtures/drupal7.php');
+    $this->loadFixture(\Drupal::service('extension.list.module')->getPath('eck') . '/tests/fixtures/drupal7.php');
   }

   /**
@@ @@
    *   An array of modules that will not be upgraded. Defaults to
    *   $this->getMissingPaths().
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function assertReviewForm(array $available_paths = NULL, array $missing_paths = NULL) {
     $session = $this->assertSession();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/eck/tests/src/Functional/LocalTaskEntityTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->entityTypeInfo = $this->createEntityType();
     $this->bundleInfo = $this->createEntityBundle($this->entityTypeInfo['id']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/eck/tests/src/Functional/FunctionalTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Functional;

+use Drupal\user\UserInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser($this->getAdministratorPermissions());
@@ @@
    *   - id:    the type's machine name
    *   - label: the type's label.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function createEntityType(array $fields = [], $label = '') {
     $label = empty($label) ? $this->randomMachineName() : $label;
@@ @@
    * @return array
    *   The machine name and label of the new bundle.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function createEntityBundle($entity_type, $label = '', $title_overrides = []) {
     if (empty($label)) {
@@ @@
    * @return array
    *   The machine name and label of the new bundle.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function editEntityBundle($entity_type, $bundle, $label, $title_overrides = []) {
     $this->drupalGet(Url::fromRoute("entity.{$entity_type}_type.edit_form", ["{$entity_type}_type" => $bundle]));
@@ @@
    *   An array of settings.
    *   Example: 'id' => 'foo'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   A new entity.
    */
   protected function createEntity($entity_type, array $values) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/eck/tests/src/Functional/EckEntityTranslationTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create new entity type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/eck/tests/src/Functional/ConfigImportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Functional;

+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Url;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $permissions = [
@@ @@

     // Export the current configuration.
     $configFactory = \Drupal::configFactory();
-    /** @var \Drupal\Core\Config\StorageInterface $sync */
+    /** @var StorageInterface $sync */
     $sync = $this->container->get('config.storage.sync');
     $config = $configFactory->loadMultiple($configFactory->listAll());
     foreach ($config as $name => $conf) {
@@ @@

     $entityTypeConfigName = 'eck.eck_entity_type.test_entity';
     $entityBundleConfigName = 'eck.eck_type.test_entity.bundle';
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = $this->container->get('config.storage');
-    /** @var \Drupal\Core\Config\StorageInterface $sync */
+    /** @var StorageInterface $sync */
     $sync = $this->container->get('config.storage.sync');

     // Verify the configuration to create does not exist yet.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/eck/tests/src/Functional/BundleCRUDTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\eck\Functional;

+use Behat\Mink\Exception\ExpectationException;
 /**
  * Tests eck's bundle creation, update and deletion.
  *
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function singleBundleCreation() {
     $entityTypeInfo = $this->createEntityType([], 'TestType');
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function singleBundleCreationWithOverrides() {
     $entityTypeInfo = $this->createEntityType();
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function singleBundleEditWithOverrides() {
     $entityTypeInfo = $this->createEntityType();
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function multipleBundleCreation() {
     $entityTypeInfo = $this->createEntityType([], 'TestType');
@@ @@
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function identicallyNamedBundleCreation() {
     $entityTypeInfo1 = $this->createEntityType([], 'TestType1');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/eck/tests/src/Functional/AccessTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->entityTypeInfo = $this->createEntityType();
     $this->bundleInfo = $this->createEntityBundle($this->entityTypeInfo['id']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/eck/src/Routing/EckRoutes.php:18

    ---------- begin diff ----------
@@ @@
   public function routes() {
     $routeCollection = new RouteCollection();

-    /** @var \Drupal\eck\Entity\EckEntityType $entityType */
+    /** @var EckEntityType $entityType */
     foreach (EckEntityType::loadMultiple() as $entityType) {
       $entityTypeId = $entityType->id();
       $entityTypeLabel = $entityType->label();
@@ @@
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The created listing route.
    */
   private function createListRoute($entityTypeId, $entityTypeLabel) {
@@ @@
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The created bundle listing route.
    */
   private function createBundleListRoute($entityTypeId, $entityTypeLabel) {
@@ @@
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The add bundle route.
    */
   private function createAddBundleRoute($entityTypeId, $entityTypeLabel) {
@@ @@
    * @param string $op
    *   The operation.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The bundle crud route.
    */
   private function createBundleCrudRoute($entityTypeId, $entityTypeLabel, $path, $op) {
@@ @@
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The edit bundle route.
    */
   private function createEditBundleRoute($entityTypeId, $entityTypeLabel) {
@@ @@
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The delete bundle route.
    */
   private function createDeleteBundleRoute($entityTypeId, $entityTypeLabel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/eck/src/Plugin/migrate/D7EckDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eck\Plugin\migrate;

+use Drupal\migrate\Plugin\Migration;
+use Drupal\migrate\Row;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The migration field discovery service.
    *
-   * @var \Drupal\migrate_drupal\FieldDiscoveryInterface
+   * @var FieldDiscoveryInterface
    */
   protected $fieldDiscovery;

@@ @@
    *   The base plugin ID for the plugin ID.
    * @param bool $translations
    *   Whether or not to include translations.
-   * @param \Drupal\migrate_drupal\FieldDiscoveryInterface $field_discovery
+   * @param FieldDiscoveryInterface $field_discovery
    *   The migration field discovery service.
    */
   public function __construct($base_plugin_id, $translations, FieldDiscoveryInterface $field_discovery) {
@@ @@
           $values['destination']['plugin'] = "entity:{$entity_type}";
           $values['destination']['default_bundle'] = $bundle;

-          /** @var \Drupal\migrate\Plugin\Migration $migration */
+          /** @var Migration $migration */
           $migration = \Drupal::service('plugin.manager.migration')->createStubMigration($values);
           $source_plugin = $migration->getSourcePlugin();
           $source_plugin->rewind();
-          /** @var \Drupal\migrate\Row $row */
+          /** @var Row $row */
           $row = $source_plugin->current();
           if (!$row) {
             continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/eck/src/Plugin/Derivative/EckEntityContentLocalTask.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(TranslationInterface $string_translation) {
@@ @@
     $this->basePluginDefinition = $basePluginDefinition;
     $derivatives = [];

-    /** @var \Drupal\eck\Entity\EckEntityType $type */
+    /** @var EckEntityType $type */
     foreach (EckEntityType::loadMultiple() as $type) {
       $entity_type = $type->id();
       $base_route = "entity.{$entity_type}.canonical";
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/eck/src/PermissionsGenerator.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a standard list of entity permissions for a given type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $eck_type
+   * @param EckEntityType $eck_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Retrieves the listing permission for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Retrieves the create permission for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Retrieves the edit permissions for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    *
    * @return array
@@ @@
   /**
    * Retrieves the edit permission for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    * @param string $op
    *   The operation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/eck/src/Form/EntityType/EckEntityTypeFormBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eckEntityTypeStorage;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Construct the EckEntityTypeFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $eck_entity_type_storage
+   * @param EntityStorageInterface $eck_entity_type_storage
    *   The eck_entity_type storage.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(EntityStorageInterface $eck_entity_type_storage, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/eck/src/Form/EntityType/EckEntityTypeEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eck\Form\EntityType;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $fieldStorage */
+    /** @var SqlContentEntityStorage $fieldStorage */
     $fieldStorage = $this->entityTypeManager->getStorage($this->entity->id());

-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $definitions = $this->entityFieldManager->getBaseFieldDefinitions($this->entity->id());

     foreach (['title', 'created', 'changed', 'uid', 'status'] as $field) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/eck/src/Form/EntityBundle/EckEntityBundleForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
    *   The bundle type.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/eck/src/Form/EntityBundle/EckEntityBundleDeleteConfirm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EckEntityBundleDeleteConfirm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/eck/src/Form/Entity/EckEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eck\Form\Entity;

+use Drupal\eck\Entity\EckEntity;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\eck\Entity\EckEntity $entity */
+    /** @var EckEntity $entity */
     $entity = $this->entity;

     if ($this->operation == 'edit') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/eck/src/Form/Entity/EckEntityDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eck\Form\Entity;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Url;

@@ @@
    * {@inheritdoc}
    */
   protected function logDeletionMessage() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();

     if (!$entity->isDefaultTranslation()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


32) modules/contrib/eck/src/EventSubscriber/EckEntityAdminRouteSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new EckEntityAdminRouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/eck/src/EntityUpdateService.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   private $entityDefinitionUpdateManager;

@@ @@
   /**
    * The last installed schema repository.
    *
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface
+   * @var EntityLastInstalledSchemaRepositoryInterface
    */
   private $entityLastInstalledSchemaRepository;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The entity type listener service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeListenerInterface
+   * @var EntityTypeListenerInterface
    */
   private $entityTypeListener;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;

@@ @@
   /**
    * The field storage definition listener service.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface
+   * @var FieldStorageDefinitionListenerInterface
    */
   private $fieldStorageDefinitionListener;

@@ @@
   /**
    * Constructs a new EntityDefinitionUpdateManager.
    *
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
+   * @param EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
    *   The entity definition update manager.
-   * @param \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
+   * @param EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
    *   The last installed schema repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeListenerInterface $entity_type_listener
+   * @param EntityTypeListenerInterface $entity_type_listener
    *   The entity type listener interface.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener
+   * @param FieldStorageDefinitionListenerInterface $field_storage_definition_listener
    *   The field storage definition listener service.
    */
   public function __construct(
@@ @@
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_DELETED.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface|null $storage_definition
+   * @param FieldStorageDefinitionInterface|null $storage_definition
    *   (optional) The new field storage definition. Defaults to none.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface|null $original_storage_definition
+   * @param FieldStorageDefinitionInterface|null $original_storage_definition
    *   (optional) The original field storage definition. Defaults to none.
    */
   private function doFieldUpdate($op, FieldStorageDefinitionInterface $storage_definition = NULL, FieldStorageDefinitionInterface $original_storage_definition = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/eck/src/Entity/EckEntityType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eck\Entity;

+use Drupal\field\FieldConfigInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\eck\EckEntityTypeInterface;
@@ @@
    * @param string $target_entity_type_id
    *   The entity type id created by ECK.
    *
-   * @return \Drupal\field\FieldConfigInterface[]
+   * @return FieldConfigInterface[]
    *   Returns loaded config fields entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public static function loadReferenceFieldsByType($target_entity_type_id) {
     $entity_manager = \Drupal::entityTypeManager();
@@ @@
     $fields_array = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('entity_reference');
     $field_storage = $entity_manager->getStorage('field_config');

-    /** @var \Drupal\field\FieldConfigInterface[] $fields_list */
+    /** @var FieldConfigInterface[] $fields_list */
     $fields_list = $list = [];

     // Get list of fields with type entity_reference.
@@ @@
    * @param string $channel
    *   The name of the channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger for this channel.
    */
   protected function logger($channel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/eck/src/EckEntityAccessControlHandler.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Determines if the given account is allowed to bypass access control.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account.
    *
    * @return bool
@@ @@
    * @param bool $return_as_object
    *   Should a bool or AccessResult object be returned?
    *
-   * @return \Drupal\Core\Access\AccessResult|bool
+   * @return AccessResult|bool
    *   The created access result.
    */
   private function getBypassAccessResult($return_as_object) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/eck/src/Controller/EckEntityTypeListBuilder.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EckEntityTypeBundleInfo service.
    *
-   * @var \Drupal\eck\EckEntityTypeBundleInfo
+   * @var EckEntityTypeBundleInfo
    */
   protected $eckBundleInfo;

@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\eck\EckEntityTypeBundleInfo $bundle_info
+   * @param EckEntityTypeBundleInfo $bundle_info
    *   ECK Entity Bundle Info service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, EckEntityTypeBundleInfo $bundle_info) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/eck/src/Controller/EckEntityBundleListBuilder.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * Constructs a EckEntityBundleListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, UrlGeneratorInterface $url_generator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/eck/src/Controller/EckContentController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eck\Controller;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Render\RendererInterface;
@@ @@
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs an EckContentController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
   /**
    * Displays add content link for available entity types.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The request parameters.
    *
    * @return array
@@ @@
   public function addPage(EckEntityTypeInterface $eck_entity_type) {
     $content = [];
     $bundleStorage = $this->getBundleStorage($eck_entity_type);
-    /** @var \Drupal\eck\Entity\EckEntityBundle $bundle */
+    /** @var EckEntityBundle $bundle */
     foreach ($bundleStorage->loadMultiple() as $bundle) {
       if ($this->entityTypeManager()
         ->getAccessControlHandler($eck_entity_type->id())
@@ @@
   /**
    * Provides the entity submission form.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    * @param string $eck_entity_bundle
    *   The entity type bundle.
@@ @@
   /**
    * Title callback for add page.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    *
    * @return string
@@ @@
   /**
    * Retrieves the bundle storage for the given entity type.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The bundle storage.
    */
   private function getBundleStorage(EckEntityTypeInterface $eck_entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/eck/src/Access/EckEntityCreateAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eck\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an EckEntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks access to the eck entity add page for the entity bundle type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    * @param string $eck_entity_bundle
    *   (optional) The entity type bundle.
    *
-   * @return bool|AccessResult|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResult|AccessResultInterface
    *   A \Drupal\Core\Access\AccessInterface constant value.
    */
   public function access(AccountInterface $account, EckEntityTypeInterface $eck_entity_type, $eck_entity_bundle = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


40) modules/contrib/eck/eck.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\eck\EckEntityTypeBundleInfo;
+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\migrate\Plugin\MigrateSourcePluginManager;
 /**
  * @file
  * Contains hook implementations.
@@ @@
 function eck_menu_local_actions_alter(&$local_actions) {
   $eck_types = EckEntityType::loadMultiple();

-  /** @var \Drupal\eck\EckEntityTypeBundleInfo $eckBundleInfo */
+  /** @var EckEntityTypeBundleInfo $eckBundleInfo */
   $eckBundleInfo = Drupal::service('eck.entity_type.bundle.info');

   $defaults = [
@@ @@
  * Implements hook_theme_suggestions_HOOK().
  */
 function eck_theme_suggestions_eck_entity(array $variables) {
-  /** @var \Drupal\eck\Entity\EckEntity $entity */
+  /** @var EckEntity $entity */
   $entity = $variables['elements']['#eck_entity'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

@@ @@
       continue;
     }

-    /** @var \Drupal\migrate\Plugin\MigrationPluginManager $migration_plugin_manager */
+    /** @var MigrationPluginManager $migration_plugin_manager */
     $migration_plugin_manager = \Drupal::service('plugin.manager.migration');
     $migration_stub = $migration_plugin_manager->createStubMigration($migration);
-    /** @var \Drupal\migrate\Plugin\MigrateSourcePluginManager $source_plugin_manager */
+    /** @var MigrateSourcePluginManager $source_plugin_manager */
     $source_plugin_manager = \Drupal::service('plugin.manager.migrate.source');
     $source = NULL;
     $configuration = $migration['source'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


41) modules/contrib/eck/eck.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\eck\Entity\EckEntityType;
 /**
  * @file
  */
@@ @@
  */
 function eck_update_8004() {
   $schema = Drupal::database()->schema();
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entityDefinitionUpdateManager */
+  /** @var EntityDefinitionUpdateManagerInterface $entityDefinitionUpdateManager */
   $entityDefinitionUpdateManager = Drupal::service('entity.definition_update_manager');
   $entityTypeManager = Drupal::entityTypeManager();
   $eckEntityTypes = $entityTypeManager
@@ @@
     'not null' => TRUE,
   ];

-  /** @var \Drupal\eck\Entity\EckEntityType $entity_type */
+  /** @var EckEntityType $entity_type */
   foreach ($eckEntityTypes as $machineName => $entity_type) {
     $entityTypeDefinition = $entityTypeManager->getDefinition($machineName);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 41 files have been changed by Rector                                      

