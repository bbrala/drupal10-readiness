diff --git a/hidden_tab.info.yml b/hidden_tab.info.yml
index ec7aac1..ff28063 100644
--- a/hidden_tab.info.yml
+++ b/hidden_tab.info.yml
@@ -2,7 +2,7 @@ name: Hidden Tab
 type: module
 description: 'Provides pages (Tabs) with secret Uri on entities.'
 package: Navigation
-core_version_requirement: ^8.8.0 || ^9.0
+core_version_requirement: ^9.3 || ^10
 configure: entity.hidden_tab_page.collection
 dependencies:
   - jquery_ui_tabs:jquery_ui_tabs
diff --git a/hidden_tab.module b/hidden_tab.module
index 55432df..fdfe01d 100644
--- a/hidden_tab.module
+++ b/hidden_tab.module
@@ -1,4 +1,6 @@
-<?php /** @noinspection PhpDocSignatureInspection */
+<?php use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface;
+/** @noinspection PhpDocSignatureInspection */
 
 /**
  * @file
@@ -33,13 +35,12 @@ define('HIDDEN_TAB_TARGET_TYPE', 'node');
  * @return array
  *   Defined themes.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginException
+ * @throws PluginException
  *
  * @see \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface
  */
 function hidden_tab_theme() {
-  /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */
-
+  /** @var HiddenTabTemplateInterface $plugin */
   $t = [];
   foreach (HiddenTabTemplatePluginManager::instance()->plugins() as $plugin) {
     $id = 'hidden_tab_' . $plugin->id();
@@ -98,8 +99,7 @@ function template_preprocess_hidden_tab_mailer(array &$variables) {
 /**
  * Implements hook_entity_delete().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
- *
+ * @param EntityInterface $entity
  */
 function hidden_tab_entity_delete(EntityInterface $entity) {
   if ($entity->getEntityTypeId() !== 'hidden_tab_page') {
@@ -146,8 +146,7 @@ function hidden_tab_entity_delete(EntityInterface $entity) {
 function hidden_tab_mail($key, &$message, $params) {
   /** @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page */
   /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $mailer */
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
-
+  /** @var EntityInterface $entity */
   $mailer = $params['mailer'];
   $email = $params['email'];
 
@@ -241,7 +240,7 @@ function _hidden_tab_mk_context(HiddenTabMailerInterface $mailer, array $params)
       ]));
       continue;
     }
-    /** @var Drupal\hidden_tab\Plugable\TplContext\HiddenTabTplContextInterface $ctx_maker */
+    /** @var HiddenTabTplContextInterface $ctx_maker */
     $ctx_maker = $ctx_man->plugin($context_maker);
     $ret += $ctx_maker->provide($params, $params);
   }
diff --git a/src/Controller/KomponentLibraryController.php b/src/Controller/KomponentLibraryController.php
index 3925e0b..3343cd3 100644
--- a/src/Controller/KomponentLibraryController.php
+++ b/src/Controller/KomponentLibraryController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\hidden_tab\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Menu\LocalActionManagerInterface;
@@ -29,7 +31,7 @@ class KomponentLibraryController extends ControllerBase {
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    *
    * @see \Drupal\hidden_tab\Controller\KomponentLibraryController::buildLocalActions()
    */
@@ -38,7 +40,7 @@ class KomponentLibraryController extends ControllerBase {
   /**
    * The local action manager.
    *
-   * @var \Drupal\Core\Menu\LocalActionManagerInterface
+   * @var LocalActionManagerInterface
    *
    * @see \Drupal\hidden_tab\Controller\KomponentLibraryController::buildLocalActions()
    */
@@ -47,7 +49,7 @@ class KomponentLibraryController extends ControllerBase {
   /**
    * To find komponents.
    *
-   * @var \Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentPluginManager
+   * @var HiddenTabKomponentPluginManager
    */
   protected $komponentMan;
 
@@ -77,16 +79,16 @@ class KomponentLibraryController extends ControllerBase {
   /**
    * Shows a list of components that can be added to a layout.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
    *   A render array as expected by the renderer.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function listKomponents(Request $request): array {
-    /** @var \Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentInterface $komponent_plugin */
+    /** @var HiddenTabKomponentInterface $komponent_plugin */
     $headers = [
       ['data' => $this->t('Komponent')],
       ['data' => $this->t('Description')],
diff --git a/src/Controller/PlacementAddController.php b/src/Controller/PlacementAddController.php
index 6aa2587..8a0502e 100644
--- a/src/Controller/PlacementAddController.php
+++ b/src/Controller/PlacementAddController.php
@@ -23,7 +23,7 @@ class PlacementAddController extends ControllerBase {
   /**
    * Hidden Tab Placement storage, to create a new placement.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $placementStorage;
 
diff --git a/src/Controller/SendMailController.php b/src/Controller/SendMailController.php
index 78414fd..bf86b6b 100644
--- a/src/Controller/SendMailController.php
+++ b/src/Controller/SendMailController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -24,28 +25,28 @@ class SendMailController extends ControllerBase implements ContainerInjectionInt
   /**
    * Hidden Tab Page helper.
    *
-   * @var \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface
+   * @var HiddenTabEntityHelperInterface
    */
   protected $entityHelper;
 
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $reqStack;
 
   /**
    * To find mail plugins.
    *
-   * @var \Drupal\hidden_tab\Plugable\MailDiscovery\HiddenTabMailDiscoveryPluginManager
+   * @var HiddenTabMailDiscoveryPluginManager
    */
   protected $discMan;
 
   /**
    * To find nodes to send them mails.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;
 
@@ -54,14 +55,13 @@ class SendMailController extends ControllerBase implements ContainerInjectionInt
    *
    * @var \Drupal\hidden_tab\Plugable\TplContext\HiddenTabTplContextPluginManager
    */
-
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $req_stack
-   * @param \Drupal\Core\Entity\EntityStorageInterface $node_storage
-   * @param \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface $entity_helper
-   * @param \Drupal\hidden_tab\Plugable\MailDiscovery\HiddenTabMailDiscoveryPluginManager $disc_man
+   * @param RequestStack $req_stack
+   * @param EntityStorageInterface $node_storage
+   * @param HiddenTabEntityHelperInterface $entity_helper
+   * @param HiddenTabMailDiscoveryPluginManager $disc_man
    */
   public function __construct(RequestStack $req_stack,
                               EntityStorageInterface $node_storage,
@@ -89,14 +89,14 @@ class SendMailController extends ControllerBase implements ContainerInjectionInt
   /**
    * Displays the actual page, called from Tab page.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $hidden_tab_mailer
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param HiddenTabMailerInterface $hidden_tab_mailer
+   * @param EntityInterface $target_entity
    *
    * @return array|Response
    *   Render array of komponents to put in the regions, as configured in the
    *   page's layout.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function send(HiddenTabMailerInterface $hidden_tab_mailer,
                        EntityInterface $target_entity): Response {
diff --git a/src/Controller/XPageRenderController.php b/src/Controller/XPageRenderController.php
index fe24038..081fc7f 100644
--- a/src/Controller/XPageRenderController.php
+++ b/src/Controller/XPageRenderController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\hidden_tab\Controller;
 
+use Drupal\hidden_tab\Plugable\Access\HiddenTabAccessPluginManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\hidden_tab\Plugable\Render\HiddenTabRenderInterface;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -42,21 +47,21 @@ class XPageRenderController extends ControllerBase implements ContainerInjection
   /**
    * Params including secret provided by user in the query.
    *
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   protected $query;
 
   /**
    * To find template plugins.
    *
-   * @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager
+   * @var HiddenTabTemplatePluginManager
    */
   protected $templateMan;
 
   /**
    * To check access
    *
-   * @var \Drupal\hidden_tab\Plugable\Access\HiddenTabAccessPluginManager
+   * @var HiddenTabAccessPluginManager
    */
   protected $renderMan;
 
@@ -64,7 +69,7 @@ class XPageRenderController extends ControllerBase implements ContainerInjection
   /**
    * Hidden Tab Page helper.
    *
-   * @var \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface
+   * @var HiddenTabEntityHelperInterface
    */
   protected $entityHelper;
 
@@ -73,13 +78,13 @@ class XPageRenderController extends ControllerBase implements ContainerInjection
    *
    * @param string $current_path
    *   See $this->currentPath.
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $query
+   * @param ParameterBag $query
    *   See $this->query.
-   * @param \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager $template_man
+   * @param HiddenTabTemplatePluginManager $template_man
    *   See $this->templateMan.
-   * @param \Drupal\hidden_tab\Plugable\Render\HiddenTabRenderPluginManager $render_man
+   * @param HiddenTabRenderPluginManager $render_man
    *   See $this->renderMan.
-   * @param \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface $entity_helper
+   * @param HiddenTabEntityHelperInterface $entity_helper
    *   See $this->pageHelper.
    */
   public function __construct(string $current_path,
@@ -111,19 +116,19 @@ class XPageRenderController extends ControllerBase implements ContainerInjection
   /**
    * Displays the actual page, called from Tab page.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *
    * @return array
    *   Render array of komponents to put in the regions, as configured in the
    *   page's layout.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws PluginException
    */
   public function display(NodeInterface $node): array {
     /** @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page */
-    /** @var \Drupal\hidden_tab\Plugable\Render\HiddenTabRenderInterface $plugin */
+    /** @var HiddenTabRenderInterface $plugin */
     $entity = $node;
 
     list($type, $page) = $this->getPage();
@@ -159,8 +164,8 @@ class XPageRenderController extends ControllerBase implements ContainerInjection
    * @return array
    *   Uri type (secret/tab) and the page.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getPage(): array {
     $path = explode('/', $this->currentPath);
@@ -185,9 +190,9 @@ class XPageRenderController extends ControllerBase implements ContainerInjection
   /**
    * Check access to page by context: uri type (secret / tab) and the entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity in question.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The current page being visited.
    * @param string $type
    *   Type of uri: secret / tab.
diff --git a/src/Entity/Base/RefrencerEntityInterface.php b/src/Entity/Base/RefrencerEntityInterface.php
index 72085ee..246891c 100644
--- a/src/Entity/Base/RefrencerEntityInterface.php
+++ b/src/Entity/Base/RefrencerEntityInterface.php
@@ -25,7 +25,7 @@ interface RefrencerEntityInterface extends EntityInterface {
   /**
    * Targeted hidden tab page, loaded.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null
+   * @return HiddenTabPageInterface|null
    *   Target hidden tab page entity loaded.
    */
   public function targetPageEntity(): ?HiddenTabPageInterface;
@@ -33,7 +33,7 @@ interface RefrencerEntityInterface extends EntityInterface {
   /**
    * Targeted user, loaded.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   Target user id.
    */
   public function targetUserId(): ?string;
@@ -41,7 +41,7 @@ interface RefrencerEntityInterface extends EntityInterface {
   /**
    * Id of targeted user.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   Target user entity loaded.
    */
   public function targetUserEntity(): ?UserInterface;
@@ -57,7 +57,7 @@ interface RefrencerEntityInterface extends EntityInterface {
   /**
    * Targeted entity, loaded.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Target entity loaded.
    */
   public function targetEntity(): ?EntityInterface;
diff --git a/src/Entity/Helper/ConfigListBuilderBase.php b/src/Entity/Helper/ConfigListBuilderBase.php
index 5ad789a..6052719 100644
--- a/src/Entity/Helper/ConfigListBuilderBase.php
+++ b/src/Entity/Helper/ConfigListBuilderBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Entity\Helper;
 
+use Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -22,7 +23,7 @@ abstract class ConfigListBuilderBase extends ConfigEntityListBuilder {
   /**
    * To see what operations user has access to.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $current_user;
 
@@ -88,7 +89,7 @@ abstract class ConfigListBuilderBase extends ConfigEntityListBuilder {
   /**
    * Helps build a row, displaying an entity, in the table of entities.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to render properties for.
    * @param array $props
    *   Properties of the entity to render.
@@ -99,7 +100,7 @@ abstract class ConfigListBuilderBase extends ConfigEntityListBuilder {
   protected function configRowsBuilder(ConfigEntityInterface $entity, array $props) {
     $t = $entity->getEntityTypeId();
     $i = $entity->id();
-    /** @var \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface $entity */
+    /** @var RefrencerEntityInterface $entity */
     $ret = [];
     foreach ($props as $prop) {
       switch ($prop) {
@@ -211,7 +212,7 @@ abstract class ConfigListBuilderBase extends ConfigEntityListBuilder {
   /**
    * Helper for buildRow(), same as buildRow() but may freely throw exceptions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to build row from.
    *
    * @return array
diff --git a/src/Entity/Helper/EntityListBuilderBase.php b/src/Entity/Helper/EntityListBuilderBase.php
index 85ecbd6..9126add 100644
--- a/src/Entity/Helper/EntityListBuilderBase.php
+++ b/src/Entity/Helper/EntityListBuilderBase.php
@@ -19,14 +19,14 @@ abstract class EntityListBuilderBase extends EntityListBuilder {
   /**
    * Used by render().
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
diff --git a/src/Entity/Helper/RefrencerEntityTrait.php b/src/Entity/Helper/RefrencerEntityTrait.php
index c4f1bae..e1543f3 100644
--- a/src/Entity/Helper/RefrencerEntityTrait.php
+++ b/src/Entity/Helper/RefrencerEntityTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\hidden_tab\Entity\Helper;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\hidden_tab\Entity\HiddenTabPageInterface;
@@ -27,7 +29,7 @@ trait RefrencerEntityTrait {
   /**
    * See targetPageEntity().
    *
-   * @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface
+   * @var HiddenTabPageInterface
    *
    * @see \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface::targetPageEntity()
    */
@@ -45,7 +47,7 @@ trait RefrencerEntityTrait {
   /**
    * See targetUserEntity().
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    *
    * @see \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface::targetUserEntity()
    */
@@ -63,7 +65,7 @@ trait RefrencerEntityTrait {
   /**
    * See targetEntity().
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    *
    * @see \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface::targetEntity()
    */
@@ -102,11 +104,11 @@ trait RefrencerEntityTrait {
   /**
    * See targetPageEntity() in RefrencerEntityTrait.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null
+   * @return HiddenTabPageInterface|null
    *   See targetPageEntity() in RefrencerEntityTrait.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface::targetPageEntity()
    */
@@ -131,16 +133,16 @@ trait RefrencerEntityTrait {
   }
 
   /**
-   * See targetUserEntity() in RefrencerEntityTrait.
-   *
-   * @return \Drupal\user\UserInterface|null See targetPageId() in
-   *   RefrencerEntityTrait. See targetUserEntity() in RefrencerEntityTrait.
-   *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   *
-   * @see \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface::targetUserEntity()
-   */
+  * See targetUserEntity() in RefrencerEntityTrait.
+  *
+   * @return UserInterface|null See targetPageId() in
+    RefrencerEntityTrait. See targetUserEntity() in RefrencerEntityTrait.
+  *
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+  *
+  * @see \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface::targetUserEntity()
+  */
   public function targetUserEntity(): ?UserInterface {
     if (!isset($this->targetUserEntity) && $this->targetUserId() !== NULL && $this->targetUserId() !== '') {
       $this->targetUserEntity = Drupal::entityTypeManager()
@@ -165,11 +167,11 @@ trait RefrencerEntityTrait {
   /**
    * See targetEntity() in RefrencerEntityTrait.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   See targetEntity() in RefrencerEntityTrait.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface::targetEntity()
    */
diff --git a/src/Entity/HiddenTabCredit.php b/src/Entity/HiddenTabCredit.php
index 9645ffd..dd3f6a6 100644
--- a/src/Entity/HiddenTabCredit.php
+++ b/src/Entity/HiddenTabCredit.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\hidden_tab\Entity;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface;
 use Drupal;
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Annotation\Translation;
@@ -130,7 +132,7 @@ class HiddenTabCredit extends ContentEntityBase implements HiddenTabCreditInterf
    * Those values who usually have sane defaults are omitted. So is the
    * target page as it is usually known.
    *
-   * @param \Drupal\Component\Uuid\Php $uuid
+   * @param Php $uuid
    * @param string $prefix
    *   The namespace to prefix form elements with.
    * @param bool $add_targets
@@ -138,7 +140,7 @@ class HiddenTabCredit extends ContentEntityBase implements HiddenTabCreditInterf
    *
    * @return array
    *   The form elements.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function littleForm(Php $uuid, string $prefix = '', bool $add_targets = TRUE): array {
     $form[$prefix . 'secret_key'] = [
@@ -197,10 +199,10 @@ class HiddenTabCredit extends ContentEntityBase implements HiddenTabCreditInterf
   /**
    * Extract values of a submitted form for entity creation.
    *
-   * @param \Drupal\Component\Uuid\Php $uuid
+   * @param Php $uuid
    * @param string $prefix
    *   Namespace prefix of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Submitted form.
    * @param bool $extractRefs
    *   Extract refrencer fields or not.
@@ -208,13 +210,13 @@ class HiddenTabCredit extends ContentEntityBase implements HiddenTabCreditInterf
    * @return array
    *   Extracted values, or sane defaults.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function extractFormValues(Php $uuid,
                                            string $prefix,
                                            FormStateInterface $form_state,
                                            bool $extractRefs): array {
-    /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */
+    /** @var HiddenTabTemplateInterface $plugin */
     $v = [
         'description' => $form_state->getValue($prefix . 'description'),
         'secret_key' => $form_state->getValue($prefix . 'secret_key')
diff --git a/src/Entity/HiddenTabCreditInterface.php b/src/Entity/HiddenTabCreditInterface.php
index fb651f3..54cb47f 100644
--- a/src/Entity/HiddenTabCreditInterface.php
+++ b/src/Entity/HiddenTabCreditInterface.php
@@ -155,7 +155,7 @@ interface HiddenTabCreditInterface extends
    * @param mixed $accounting
    *   Plugins data.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCredit
+   * @return HiddenTabCredit
    *   This.
    *
    * @see \Drupal\hidden_tab\Entity\HiddenTabCredit::isPerIp()
diff --git a/src/Entity/HiddenTabCreditListBuilder.php b/src/Entity/HiddenTabCreditListBuilder.php
index aad06c7..3148d1f 100644
--- a/src/Entity/HiddenTabCreditListBuilder.php
+++ b/src/Entity/HiddenTabCreditListBuilder.php
@@ -22,7 +22,7 @@ class HiddenTabCreditListBuilder extends EntityListBuilderBase {
   /**
    * Credit service, to show credit property and whether if it is infinite.
    *
-   * @var \Drupal\hidden_tab\Service\CreditChargingInterface
+   * @var CreditChargingInterface
    */
   protected $creditService;
 
@@ -64,7 +64,7 @@ class HiddenTabCreditListBuilder extends EntityListBuilderBase {
    * {@inheritdoc}
    */
   protected function unsafeBuildRow(EntityInterface $entity) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $entity */
+    /** @var HiddenTabCreditInterface $entity */
     return $this->row($this->creditService, $entity);
   }
 
@@ -84,9 +84,9 @@ class HiddenTabCreditListBuilder extends EntityListBuilderBase {
   /**
    * Helper to create a renderable row output of the entity.
    *
-   * @param \Drupal\hidden_tab\Service\CreditChargingInterface $creditService
+   * @param CreditChargingInterface $creditService
    *   To get credit amount.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $entity
+   * @param HiddenTabCreditInterface $entity
    *   Entity to render.
    *
    * @return array
diff --git a/src/Entity/HiddenTabMailerListBuilder.php b/src/Entity/HiddenTabMailerListBuilder.php
index f52aec2..a3e9b03 100644
--- a/src/Entity/HiddenTabMailerListBuilder.php
+++ b/src/Entity/HiddenTabMailerListBuilder.php
@@ -24,12 +24,12 @@ class HiddenTabMailerListBuilder extends EntityListBuilderBase {
   /**
    * To generate mail broadcast link.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrf;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $df;
 
@@ -75,7 +75,7 @@ class HiddenTabMailerListBuilder extends EntityListBuilderBase {
    * {@inheritdoc}
    */
   protected function unsafeBuildRow(EntityInterface $entity) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $entity */
+    /** @var HiddenTabMailerInterface $entity */
     return $this->row($this->df, $entity);
   }
 
@@ -95,8 +95,8 @@ class HiddenTabMailerListBuilder extends EntityListBuilderBase {
   /**
    * Helper to create a renderable row output of the entity.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $df
-   * @param \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $entity
+   * @param DateFormatterInterface $df
+   * @param HiddenTabMailerInterface $entity
    *   Entity to render.
    *
    * @return array
@@ -142,7 +142,7 @@ class HiddenTabMailerListBuilder extends EntityListBuilderBase {
    * {@inheritdoc}
    */
   protected function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $entity */
+    /** @var HiddenTabMailerInterface $entity */
     $op = parent::getDefaultOperations($entity);
 
     try {
diff --git a/src/Entity/HiddenTabPage.php b/src/Entity/HiddenTabPage.php
index 4d18891..2f39064 100644
--- a/src/Entity/HiddenTabPage.php
+++ b/src/Entity/HiddenTabPage.php
@@ -221,7 +221,7 @@ class HiddenTabPage extends ConfigEntityBase implements HiddenTabPageInterface {
                          $return_as_object = FALSE,
                          ?EntityInterface $context_entity = NULL,
                          ?ParameterBag $bag = NULL) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabPageAccessControlHandler $am */
+    /** @var HiddenTabPageAccessControlHandler $am */
     $am = $this->entityTypeManager()
       ->getAccessControlHandler($this->entityTypeId);
     if ($operation == 'create') {
diff --git a/src/Entity/HiddenTabPageAccessControlHandler.php b/src/Entity/HiddenTabPageAccessControlHandler.php
index f572e61..aac0595 100644
--- a/src/Entity/HiddenTabPageAccessControlHandler.php
+++ b/src/Entity/HiddenTabPageAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Entity;
 
+use Drupal\hidden_tab\Plugable\Access\HiddenTabAccessInterface;
 use Drupal;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
@@ -77,8 +78,7 @@ class HiddenTabPageAccessControlHandler extends EntityAccessControlHandler {
                                  EntityInterface $context_entity = NULL,
                                  ParameterBag $bag = NULL): AccessResult {
     /** @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface $entity */
-    /** @var \Drupal\hidden_tab\Plugable\Access\HiddenTabAccessInterface $plugin */
-
+    /** @var HiddenTabAccessInterface $plugin */
     // We do not want admin to see the page with wrong hash.
     if (AccessResult::allowedIfHasPermission($account, HiddenTabPageInterface::PERMISSION_ADMINISTER)
       ->isAllowed()) {
diff --git a/src/Entity/HiddenTabPageListBuilder.php b/src/Entity/HiddenTabPageListBuilder.php
index e234d27..cbfda10 100644
--- a/src/Entity/HiddenTabPageListBuilder.php
+++ b/src/Entity/HiddenTabPageListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Entity;
 
+use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -25,7 +26,7 @@ class HiddenTabPageListBuilder extends ConfigListBuilderBase {
   /**
    * To find list of templates, and show it's label on entity list.
    *
-   * @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager
+   * @var HiddenTabTemplatePluginManager
    */
   protected $templateMan;
 
@@ -73,8 +74,7 @@ class HiddenTabPageListBuilder extends ConfigListBuilderBase {
    */
   protected function unsafeBuildRow(EntityInterface $entity): array {
     /** @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface $entity */
-    /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */
-
+    /** @var HiddenTabTemplateInterface $plugin */
     $row = parent::configRowsBuilder($entity, [
       'id',
       'tab_uri',
diff --git a/src/Entity/HiddenTabPlacement.php b/src/Entity/HiddenTabPlacement.php
index 1dd2925..90f2b53 100644
--- a/src/Entity/HiddenTabPlacement.php
+++ b/src/Entity/HiddenTabPlacement.php
@@ -178,7 +178,7 @@ class HiddenTabPlacement extends ConfigEntityBase implements HiddenTabPlacementI
                          $return_as_object = FALSE,
                          ?EntityInterface $context_entity = NULL,
                          ?ParameterBag $bag = NULL) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabPlacementAccessControlHandler $am */
+    /** @var HiddenTabPlacementAccessControlHandler $am */
     $am = $this->entityTypeManager()
       ->getAccessControlHandler($this->entityTypeId);
     if ($operation == 'create') {
diff --git a/src/Entity/HiddenTabPlacementAccessControlHandler.php b/src/Entity/HiddenTabPlacementAccessControlHandler.php
index febf0bc..81aac81 100644
--- a/src/Entity/HiddenTabPlacementAccessControlHandler.php
+++ b/src/Entity/HiddenTabPlacementAccessControlHandler.php
@@ -94,7 +94,7 @@ class HiddenTabPlacementAccessControlHandler extends EntityAccessControlHandler
                                  AccountInterface $account,
                                  EntityInterface $context_entity = NULL,
                                  ParameterBag $query = NULL): AccessResult {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface $entity */
+    /** @var HiddenTabPlacementInterface $entity */
     $admin = AccessResult::allowedIfHasPermission($account, self::PERMISSION_ADMINISTER);
     if ($admin->isAllowed()) {
       return $admin;
diff --git a/src/Entity/HiddenTabPlacementListBuilder.php b/src/Entity/HiddenTabPlacementListBuilder.php
index ba09bb9..7fc5621 100644
--- a/src/Entity/HiddenTabPlacementListBuilder.php
+++ b/src/Entity/HiddenTabPlacementListBuilder.php
@@ -29,7 +29,7 @@ class HiddenTabPlacementListBuilder extends ConfigListBuilderBase {
    * {@inheritdoc}
    */
   protected function unsafeBuildRow(EntityInterface $entity): array {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface $entity */
+    /** @var HiddenTabPlacementInterface $entity */
     return parent::configRowsBuilder($entity, [
       'id',
       'target_hidden_tab_page',
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
index 7cb20ca..6fa9e3b 100644
--- a/src/EntityTypeInfo.php
+++ b/src/EntityTypeInfo.php
@@ -20,12 +20,12 @@ class EntityTypeInfo implements ContainerInjectionInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Event/HiddenTabAfterMailEvent.php b/src/Event/HiddenTabAfterMailEvent.php
index fdc84be..e22d626 100644
--- a/src/Event/HiddenTabAfterMailEvent.php
+++ b/src/Event/HiddenTabAfterMailEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\hidden_tab\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\hidden_tab\Entity\HiddenTabPageInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * The event published when a new mail is sent by mailer (after it is sent).
@@ -18,14 +18,14 @@ class HiddenTabAfterMailEvent extends Event {
   /**
    * The page entity being created (might not have been saved yet).
    *
-   * @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface
+   * @var HiddenTabPageInterface
    */
   public $page;
 
   /**
    * HiddenTabPageFormEvent constructor.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   See $this->page.
    */
   public function __construct(HiddenTabPageInterface $page) {
diff --git a/src/Event/HiddenTabPageFormEvent.php b/src/Event/HiddenTabPageFormEvent.php
index 7a7f3d4..a80090a 100644
--- a/src/Event/HiddenTabPageFormEvent.php
+++ b/src/Event/HiddenTabPageFormEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\hidden_tab\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\hidden_tab\Entity\HiddenTabPageInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * The event published when a new Hidden Tab Page is being created.
@@ -44,7 +44,7 @@ class HiddenTabPageFormEvent extends Event {
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   public $formState;
 
@@ -64,7 +64,7 @@ class HiddenTabPageFormEvent extends Event {
   /**
    * The page entity being created (might not have been saved yet).
    *
-   * @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface
+   * @var HiddenTabPageInterface
    */
   public $page;
 
@@ -73,9 +73,9 @@ class HiddenTabPageFormEvent extends Event {
    *
    * @param array $form
    *   See $this->form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   See $this->formState.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   See $this->page.
    * @param int $phase
    *   See $this->phase.
diff --git a/src/EventSubscriber/ForEntityListFormBase.php b/src/EventSubscriber/ForEntityListFormBase.php
index b23d8df..60a2381 100644
--- a/src/EventSubscriber/ForEntityListFormBase.php
+++ b/src/EventSubscriber/ForEntityListFormBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\hidden_tab\EventSubscriber;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -40,14 +43,14 @@ abstract class ForEntityListFormBase implements EventSubscriberInterface {
   /**
    * Translation.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $t;
 
   /**
    * To load the list.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
@@ -70,15 +73,15 @@ abstract class ForEntityListFormBase implements EventSubscriberInterface {
   /**
    * ForEntityListFormBase constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $t
+   * @param TranslationInterface $t
    *   See $this->t.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $em
+   * @param EntityTypeManagerInterface $em
    *   See $this->entityStorage.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   See $this->currentUrl.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(TranslationInterface $t,
                               EntityTypeManagerInterface $em,
@@ -99,7 +102,7 @@ abstract class ForEntityListFormBase implements EventSubscriberInterface {
   /**
    * Build the custom elements of row .
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to build row for.
    *
    * @return array
@@ -110,7 +113,7 @@ abstract class ForEntityListFormBase implements EventSubscriberInterface {
   /**
    * Handles the received event by hidden tab page form.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The received event.
    * \Exception\PluginNotFoundException
    */
diff --git a/src/EventSubscriber/ForNewEntityFormBase.php b/src/EventSubscriber/ForNewEntityFormBase.php
index b7dc8a7..efc5bfa 100644
--- a/src/EventSubscriber/ForNewEntityFormBase.php
+++ b/src/EventSubscriber/ForNewEntityFormBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\hidden_tab\EventSubscriber;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -46,21 +50,21 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * To translate.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $t;
 
   /**
    * Obvious.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * To create the new entity on form submit.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
@@ -77,15 +81,15 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * ForNewEntityFormBase constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $t
+   * @param TranslationInterface $t
    *   See $this->t.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   See $this->messenger.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   See $this->entityStorage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(TranslationInterface $t,
                               MessengerInterface $messenger,
@@ -98,10 +102,10 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * Handles the received event and delegates properly by form phase.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The received event.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public final function onEvent(HiddenTabPageFormEvent $event) {
     switch ($event->phase) {
@@ -122,7 +126,7 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * Handles when form is being created.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The received event.
    */
   private final function onForm(HiddenTabPageFormEvent $event) {
@@ -145,7 +149,7 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * Handles when form is being validated.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The received event.
    */
   private function onValidate(HiddenTabPageFormEvent $event) {
@@ -159,10 +163,10 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * Handles when form is being saved.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The received event.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private final function onSave(HiddenTabPageFormEvent $event) {
     if (!$event->get($this->prefix, 'create')) {
@@ -182,7 +186,7 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * Create the form.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The event happening.
    *
    * @return array
@@ -193,7 +197,7 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * Handles when form is being validated.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The received event.
    */
   protected abstract function onValidate0(HiddenTabPageFormEvent $event);
@@ -201,7 +205,7 @@ abstract class ForNewEntityFormBase implements EventSubscriberInterface {
   /**
    * Create entity values array to create the entity.
    *
-   * @param \Drupal\hidden_tab\Event\HiddenTabPageFormEvent $event
+   * @param HiddenTabPageFormEvent $event
    *   The received event.
    *
    * @return array
diff --git a/src/EventSubscriber/HiddenTabPageFormSubscriberForCreditList.php b/src/EventSubscriber/HiddenTabPageFormSubscriberForCreditList.php
index fdf6f6e..f94b2b9 100644
--- a/src/EventSubscriber/HiddenTabPageFormSubscriberForCreditList.php
+++ b/src/EventSubscriber/HiddenTabPageFormSubscriberForCreditList.php
@@ -32,7 +32,7 @@ class HiddenTabPageFormSubscriberForCreditList extends ForEntityListFormBase {
   /**
    * To pass to HiddenTabCreditInterface.
    *
-   * @var \Drupal\hidden_tab\Service\CreditCharging
+   * @var CreditCharging
    */
   protected $cc;
 
diff --git a/src/EventSubscriber/HiddenTabPageFormSubscriberForMailerList.php b/src/EventSubscriber/HiddenTabPageFormSubscriberForMailerList.php
index e87f2de..370978b 100644
--- a/src/EventSubscriber/HiddenTabPageFormSubscriberForMailerList.php
+++ b/src/EventSubscriber/HiddenTabPageFormSubscriberForMailerList.php
@@ -30,7 +30,7 @@ class HiddenTabPageFormSubscriberForMailerList extends ForEntityListFormBase {
   protected $label = 'Mailers';
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $df;
 
diff --git a/src/EventSubscriber/HiddenTabPageFormSubscriberForNewCredit.php b/src/EventSubscriber/HiddenTabPageFormSubscriberForNewCredit.php
index 57c0ef4..9bbd6d1 100644
--- a/src/EventSubscriber/HiddenTabPageFormSubscriberForNewCredit.php
+++ b/src/EventSubscriber/HiddenTabPageFormSubscriberForNewCredit.php
@@ -38,17 +38,17 @@ class HiddenTabPageFormSubscriberForNewCredit extends ForNewEntityFormBase {
   /**
    * To find the editing entity's credit entities.
    *
-   * @var \Drupal\hidden_tab\Service\CreditCharging
+   * @var CreditCharging
    */
   protected $creditingService;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Component\Uuid\Php
+   * @var Php
    */
   protected $uuid;
 
diff --git a/src/FUtility.php b/src/FUtility.php
index d7a96b2..cd56780 100644
--- a/src/FUtility.php
+++ b/src/FUtility.php
@@ -10,6 +10,8 @@
 
 namespace Drupal\hidden_tab;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -47,7 +49,7 @@ final class FUtility {
    * @param string|null $on_label
    *   The label to show as the on value.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    *
    * @see \Drupal\hidden_tab\FUtility::boolOff()
@@ -92,7 +94,7 @@ final class FUtility {
    * @param string|null $on_label
    *   The label to show as the on value.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    *
    * @see \Drupal\hidden_tab\FUtility::boolOn()
@@ -112,7 +114,7 @@ final class FUtility {
    * @param string|null $desc
    *   Description, if any.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function textArea(string $title,
@@ -139,7 +141,7 @@ final class FUtility {
   /**
    * Define a created time field, with default label and description.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function created(): BaseFieldDefinition {
@@ -163,7 +165,7 @@ final class FUtility {
   /**
    * Define a changed time field, with default label and description.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function changed(): BaseFieldDefinition {
@@ -176,7 +178,7 @@ final class FUtility {
   /**
    * Define a status (entity enabled or not) field with default label and desc.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function statusEnabled(): BaseFieldDefinition {
@@ -207,7 +209,7 @@ final class FUtility {
   /**
    * Define a entity description field, with default label and description.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function descriptionText(): BaseFieldDefinition {
@@ -235,7 +237,7 @@ final class FUtility {
    * @param string|null $desc
    *   Description, if any.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function timestamp(string $title,
@@ -259,7 +261,7 @@ final class FUtility {
    * @param string $target_type
    *   Target entity type.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function ref(string $title,
@@ -304,7 +306,7 @@ final class FUtility {
    * @param array $allowed
    *   Set of allowed values in field (id to label array).
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function list_(string $title,
@@ -346,7 +348,7 @@ final class FUtility {
    * @param int|null $max
    *   Max allowed value if any.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function int_(string $title,
@@ -387,7 +389,7 @@ final class FUtility {
    * @param string|null $desc
    *   Description, if any.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function string_(string $title,
@@ -419,7 +421,7 @@ final class FUtility {
    * @param string|null $desc
    *   Description, if any.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function bigString(string $title,
@@ -455,7 +457,7 @@ final class FUtility {
    * @param array $default_value
    *   <b>Json encoded</> default value.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   Defined field.
    */
   public static function jsonEncodedField(string $title,
@@ -593,11 +595,10 @@ final class FUtility {
 
 
   /** ====================================================================== */
-
   /**
    * Entities have a list builder. Build common columns.
    *
-   * @param \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface $entity
+   * @param RefrencerEntityInterface $entity
    *   Entity whose row is being built.
    * @param string $type
    *   Type of the entity.
@@ -785,7 +786,7 @@ final class FUtility {
       elseif ($value instanceof Link) {
         $toRenderable = $value->toRenderable();
         $ret[$key] = [
-          '#markup' => render($toRenderable),
+          '#markup' => \Drupal::service('renderer')->render($toRenderable),
         ];
       }
       else {
@@ -819,15 +820,15 @@ final class FUtility {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $typeManager
+   * @param EntityTypeManagerInterface $typeManager
    * @param string|null $target_hidden_tab_page_
    * @param string|null $target_entity_
    * @param string $target_entity_type
    * @param string|null $target_user_
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function validateTargets(EntityTypeManagerInterface $typeManager,
                                          ?string $target_hidden_tab_page_,
diff --git a/src/Form/Base/EntityFormBase.php b/src/Form/Base/EntityFormBase.php
index 957a5c6..3ba1cbe 100644
--- a/src/Form/Base/EntityFormBase.php
+++ b/src/Form/Base/EntityFormBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\hidden_tab\Form\Base;
 
+use Drupal\hidden_tab\Service\CreditCharging;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\hidden_tab\Entity\HiddenTabCreditInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -27,7 +30,7 @@ abstract class EntityFormBase extends ContentEntityForm {
   /**
    * To get some default entity properties from uri params, if any.
    *
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   protected $params;
 
@@ -36,28 +39,28 @@ abstract class EntityFormBase extends ContentEntityForm {
    *
    * Used by validation so no more than one exists.
    *
-   * @var \Drupal\hidden_tab\Service\CreditCharging;
+   * @var CreditCharging ;
    */
   protected $creditService;
 
   /**
    * To load user on form validation.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
   /**
    * To load target entity
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityRepository;
 
   /**
    * To generate a default secret key.
    *
-   * @var \Drupal\Component\Uuid\Php
+   * @var Php
    */
   protected $uuid;
 
@@ -129,13 +132,13 @@ abstract class EntityFormBase extends ContentEntityForm {
    * {@inheritdoc}
    */
   public final function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $entity */
+    /** @var HiddenTabCreditInterface $entity */
     $entity = $this->getEntity();
     $result = $entity->save();
     try {
       $l = $entity->toLink($this->t('View'));
       $ren = $l->toRenderable();
-      $link = render($ren);
+      $link = \Drupal::service('renderer')->render($ren);
     }
     catch (Throwable $error) {
       Utility::renderLog($error, 'hidden_tab_credit', 'view_link', $entity->id(), 'EntityFormBase::save');
diff --git a/src/Form/Base/OnPageAdd.php b/src/Form/Base/OnPageAdd.php
index fc6eef6..5138580 100644
--- a/src/Form/Base/OnPageAdd.php
+++ b/src/Form/Base/OnPageAdd.php
@@ -52,23 +52,23 @@ abstract class OnPageAdd extends FormBase {
   /**
    * Entity storage of entity type of the form.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * UUID!
    *
-   * @var \Drupal\Component\Uuid\Php
+   * @var Php
    */
   protected $uuid;
 
   /**
    * OnPageAdd constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   See $this->entityStorage.
-   * @param \Drupal\Component\Uuid\Php $uuid
+   * @param Php $uuid
    *   See $this->uuid.
    */
   public function __construct(EntityStorageInterface $entity_storage, Php $uuid) {
@@ -166,7 +166,7 @@ abstract class OnPageAdd extends FormBase {
   /**
    * Entity values to create the entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   To extract entity values from.
    *
    * @return array
diff --git a/src/Form/Base/PageBasedRedirectedDeleteFormBase.php b/src/Form/Base/PageBasedRedirectedDeleteFormBase.php
index b913490..be05a1c 100644
--- a/src/Form/Base/PageBasedRedirectedDeleteFormBase.php
+++ b/src/Form/Base/PageBasedRedirectedDeleteFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Form\Base;
 
+use Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -26,7 +27,7 @@ class PageBasedRedirectedDeleteFormBase extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   public function getCancelUrl() {
-    /** @var \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface $entity */
+    /** @var RefrencerEntityInterface $entity */
     $entity = $this->getEntity();
     if(!$entity->targetPageId()) {
       return parent::getCancelUrl();
@@ -41,7 +42,7 @@ class PageBasedRedirectedDeleteFormBase extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   protected function getRedirectUrl() {
-    /** @var \Drupal\hidden_tab\Entity\Base\RefrencerEntityInterface $entity */
+    /** @var RefrencerEntityInterface $entity */
     $entity = $this->getEntity();
     if(!$entity->targetPageId()) {
       return parent::getCancelUrl();
diff --git a/src/Form/HiddenTabCreditForm.php b/src/Form/HiddenTabCreditForm.php
index 8df8573..ca90107 100644
--- a/src/Form/HiddenTabCreditForm.php
+++ b/src/Form/HiddenTabCreditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -32,7 +33,7 @@ class HiddenTabCreditForm extends EntityFormBase {
   /**
    * To get some default entity properties from uri params, if any.
    *
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   protected $params;
 
@@ -41,35 +42,35 @@ class HiddenTabCreditForm extends EntityFormBase {
    *
    * Used by validation so no more than one exists.
    *
-   * @var \Drupal\hidden_tab\Service\CreditChargingInterface;
+   * @var CreditChargingInterface ;
    */
   protected $creditService;
 
   /**
    * To find templates.
    *
-   * @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager
+   * @var HiddenTabTemplatePluginManager
    */
   protected $templateMan;
 
   /**
    * To load user on form validation.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
   /**
    * To load target entity
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityRepository;
 
   /**
    * To generate a default secret key.
    *
-   * @var \Drupal\Component\Uuid\Php
+   * @var Php
    */
   protected $uuid;
 
diff --git a/src/Form/HiddenTabMailerForm.php b/src/Form/HiddenTabMailerForm.php
index ca80a67..e34767a 100644
--- a/src/Form/HiddenTabMailerForm.php
+++ b/src/Form/HiddenTabMailerForm.php
@@ -29,14 +29,14 @@ class HiddenTabMailerForm extends EntityFormBase {
   /**
    * To find mail discoverers.
    *
-   * @var \Drupal\hidden_tab\Plugable\MailDiscovery\HiddenTabMailDiscoveryPluginManager
+   * @var HiddenTabMailDiscoveryPluginManager
    */
   protected $discoveryMan;
 
   /**
    * To find template context plugins.
    *
-   * @var \Drupal\hidden_tab\Plugable\TplContext\HiddenTabTplContextPluginManager
+   * @var HiddenTabTplContextPluginManager
    */
   protected $contextMan;
 
@@ -76,7 +76,7 @@ class HiddenTabMailerForm extends EntityFormBase {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $entity */
+    /** @var HiddenTabMailerInterface $entity */
     $form = parent::buildForm($form, $form_state);
 
     $entity = $this->getEntity();
@@ -128,8 +128,7 @@ class HiddenTabMailerForm extends EntityFormBase {
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
-
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $entity */
+    /** @var HiddenTabMailerInterface $entity */
     $entity = $this->getEntity();
 
     $d_pid = HiddenTabMailDiscoveryInterface::PID;
@@ -151,7 +150,7 @@ class HiddenTabMailerForm extends EntityFormBase {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state): HiddenTabMailerInterface {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $entity */
+    /** @var HiddenTabMailerInterface $entity */
     $entity = parent::buildEntity($form, $form_state);
 
     // Bad, we might loss config of other things.
diff --git a/src/Form/HiddenTabPageForm.php b/src/Form/HiddenTabPageForm.php
index a51a35d..29cc4e6 100644
--- a/src/Form/HiddenTabPageForm.php
+++ b/src/Form/HiddenTabPageForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\hidden_tab\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityForm;
@@ -27,7 +29,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 /**
  * Hidden Tab Page entity add/edit form..
  *
- * @property \Drupal\hidden_tab\Entity\HiddenTabPageInterface $entity
+ * @property HiddenTabPageInterface $entity
  *
  * @see \Drupal\hidden_tab\Entity\HiddenTabPageInterface
  */
@@ -38,7 +40,7 @@ class HiddenTabPageForm extends EntityForm {
    *
    * To provide a list of permissions for select list.
    *
-   * @var \Drupal\user\PermissionHandler
+   * @var PermissionHandler
    *
    * @see \Drupal\hidden_tab\Form\HiddenTabPageForm::form()
    */
@@ -47,7 +49,7 @@ class HiddenTabPageForm extends EntityForm {
   /**
    * Event dispatcher service, to dispatch the form and it's event to plugins.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    *
    * @see \Drupal\hidden_tab\Event\HiddenTabPageFormEvent
    */
@@ -58,7 +60,7 @@ class HiddenTabPageForm extends EntityForm {
    *
    * Needed to limit the page to specific bundle.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    *
    * @see \Drupal\hidden_tab\Form\HiddenTabPageForm::form()
    */
@@ -67,105 +69,103 @@ class HiddenTabPageForm extends EntityForm {
   /**
    * Handy service for creating the event.
    *
-   * @var \Drupal\Component\Uuid\Php
+   * @var Php
    */
   protected $uuid;
 
   /**
    * Handy service for creating the event.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * To find templates.
    *
-   * @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager
+   * @var HiddenTabTemplatePluginManager
    */
   protected $templateMan;
 
   /**
    * To work with hidden tab defined entities.
    *
-   * @var \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface
+   * @var HiddenTabEntityHelperInterface
    */
   protected $entityHelper;
 
   // ==========================================================================
-
   /**
    * To clear route cache and rebuild routes, to register page's route.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;
 
   /**
    * To clear route cache and rebuild routes, to register page's route.
    *
-   * @var \Drupal\Core\Menu\ContextualLinkManagerInterface
+   * @var ContextualLinkManagerInterface
    */
   protected $contextualLinkManager;
 
   /**
    * To clear route cache and rebuild routes, to register page's route.
    *
-   * @var \Drupal\Core\Menu\LocalTaskManagerInterface
+   * @var LocalTaskManagerInterface
    */
   protected $localTaskLinkManager;
 
   /**
    * To clear route cache and rebuild routes, to register page's route.
    *
-   * @var \Drupal\Core\Menu\LocalActionManagerInterface
+   * @var LocalActionManagerInterface
    */
   protected $localActionLinkManager;
 
   /**
    * To clear route cache and rebuild routes, to register page's route.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $menuCache;
 
   /**
    * To clear route cache and rebuild routes, to register page's route.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerRebuilder;
 
   // ==========================================================================
-
   /**
    * HiddenTabPageForm constructor.
    *
-   * @param \Drupal\user\PermissionHandler $user_permission_service
+   * @param PermissionHandler $user_permission_service
    *   See $this->user_permission_service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventer
+   * @param EventDispatcherInterface $eventer
    *   See $this->eventer.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $bundle_info
+   * @param EntityTypeBundleInfo $bundle_info
    *   See $this->bundleInfo.
-   * @param \Drupal\Component\Uuid\Php $uuid
+   * @param Php $uuid
    *   See $this->uuid.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   See $this->formBuilder.
-   * @param \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager $template_man
+   * @param HiddenTabTemplatePluginManager $template_man
    *   See $this->templateMan.
-   * @param \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface $entity_helper
+   * @param HiddenTabEntityHelperInterface $entity_helper
    *   See $this->entityHelper.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager
+   * @param MenuLinkManagerInterface $menu_link_manager
    *   See $this->menuLinkManager.
-   * @param \Drupal\Core\Menu\ContextualLinkManagerInterface $contextual_link_manager
+   * @param ContextualLinkManagerInterface $contextual_link_manager
    *   See $this->contextualLinkManager.
-   * @param \Drupal\Core\Menu\LocalTaskManagerInterface $local_task_link_manager
+   * @param LocalTaskManagerInterface $local_task_link_manager
    *   See $this->localTaskLinkManager.
-   * @param \Drupal\Core\Menu\LocalActionManagerInterface $local_action_link_manager
+   * @param LocalActionManagerInterface $local_action_link_manager
    *   See $this->localActionLinkManager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $menu_cache
+   * @param CacheBackendInterface $menu_cache
    *   See $this->menuCache.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   See $this->routerRebuilder.
    */
   public function __construct(PermissionHandler $user_permission_service,
@@ -427,8 +427,8 @@ class HiddenTabPageForm extends EntityForm {
     ];
 
     // Give other modules opportunity to add stuff to the form.
-    $this->eventer->dispatch(HiddenTabPageFormEvent::EVENT_NAME,
-      $this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_FORM));
+    $this->eventer->dispatch($this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_FORM),
+      HiddenTabPageFormEvent::EVENT_NAME);
 
     return $form;
   }
@@ -445,8 +445,8 @@ class HiddenTabPageForm extends EntityForm {
       $form_state->setErrorByName('secret_uri', $this->t("Both Uris can't be same"));
     }
     // Give other modules opportunity to validate their added stuff.
-    $this->eventer->dispatch(HiddenTabPageFormEvent::EVENT_NAME,
-      $this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_VALIDATE));
+    $this->eventer->dispatch($this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_VALIDATE),
+      HiddenTabPageFormEvent::EVENT_NAME);
   }
 
   /**
@@ -522,8 +522,8 @@ class HiddenTabPageForm extends EntityForm {
     }
 
     // Give other modules opportunity to save their added stuff.
-    $this->eventer->dispatch(HiddenTabPageFormEvent::EVENT_NAME,
-      $this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_SUBMIT));
+    $this->eventer->dispatch($this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_SUBMIT),
+      HiddenTabPageFormEvent::EVENT_NAME);
 
     if (!$is_cc && !$was_new && ($form_state->getValue('tab_uri') !== $form_state->getValue('old_tab_uri'))) {
       $this->messenger()
@@ -556,11 +556,11 @@ class HiddenTabPageForm extends EntityForm {
    * to user on the layouts form. Which is bad. So we put those with missing
    * regions, in the first region of the newly selected template.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of page being saved.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws EntityStorageException
+   * @throws PluginException
    */
   private function resetRegion(FormStateInterface $form_state) {
     $placements = $this->entityHelper->placementsOfPage($this->entity->id());
@@ -586,12 +586,12 @@ class HiddenTabPageForm extends EntityForm {
    *
    * @param array $form
    *   Event argument.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Event argument.
    * @param int $phase
    *   Event argument.
    *
-   * @return \Drupal\hidden_tab\Event\HiddenTabPageFormEvent
+   * @return HiddenTabPageFormEvent
    */
   private function event(array &$form,
                          FormStateInterface $form_state,
@@ -611,7 +611,7 @@ class HiddenTabPageForm extends EntityForm {
    * @return array
    *   Form element for previews.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function previews(): array {
     // Show all of them at once.
diff --git a/src/Form/HiddenTabPlacementForm.php b/src/Form/HiddenTabPlacementForm.php
index 1ac566f..30c6137 100644
--- a/src/Form/HiddenTabPlacementForm.php
+++ b/src/Form/HiddenTabPlacementForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Form;
 
+use Drupal\hidden_tab\Entity\HiddenTabPlacementInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -22,22 +23,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  *
  * @see \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface
  * @see \Drupal\hidden_tab\Entity\HiddenTabPageInterface
- * @property \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface $entity
- *
+ * @property HiddenTabPlacementInterface $entity
  */
 class HiddenTabPlacementForm extends EntityForm {
 
   /**
    * Hidden Tab Page storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $pageStorage;
 
   /**
    * To get a list of all permissions for select list.
    *
-   * @var \Drupal\user\PermissionHandler
+   * @var PermissionHandler
    *
    * @see \Drupal\hidden_tab\Form\HiddenTabPageForm::form()
    */
@@ -46,14 +46,14 @@ class HiddenTabPlacementForm extends EntityForm {
   /**
    * To find komponents
    *
-   * @var \Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentPluginManager
+   * @var HiddenTabKomponentPluginManager
    */
   protected $komponentMan;
 
   /**
    * To find templates
    *
-   * @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager
+   * @var HiddenTabTemplatePluginManager
    */
   protected $templateMan;
 
diff --git a/src/Form/LayoutForm.php b/src/Form/LayoutForm.php
index c19998c..c4b69a0 100644
--- a/src/Form/LayoutForm.php
+++ b/src/Form/LayoutForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\hidden_tab\Form;
 
+use Drupal\hidden_tab\Entity\HiddenTabPageInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\hidden_tab\Entity\HiddenTabPlacementInterface;
+use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
@@ -22,8 +26,7 @@ use Symfony\Component\HttpFoundation\Request;
  *
  * @see \Drupal\hidden_tab\Entity\HiddenTabPageInterface
  * @see \Drupal\block\BlockListBuilder
- * @property \Drupal\hidden_tab\Entity\HiddenTabPageInterface $entity
- *
+ * @property HiddenTabPageInterface $entity
  */
 class LayoutForm extends EntityForm {
 
@@ -34,28 +37,28 @@ class LayoutForm extends EntityForm {
    *
    * To get query parameter, block-placement out of.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * To find label of plugins.
    *
-   * @var \Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentPluginManager
+   * @var HiddenTabKomponentPluginManager
    */
   protected $komponentMan;
 
   /**
    * To find templates.
    *
-   * @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager
+   * @var HiddenTabTemplatePluginManager
    */
   protected $templateMan;
 
   /**
    * To find placements.
    *
-   * @var \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface
+   * @var HiddenTabEntityHelperInterface
    */
   protected $entityHelper;
 
@@ -94,12 +97,12 @@ class LayoutForm extends EntityForm {
    * @return array
    *   Render array
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function table(array $regions): array {
     $blocks = [];
     $entities = $this->entityHelper->placementsOfPage($this->entity->id());
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface[] $entities */
+    /** @var HiddenTabPlacementInterface[] $entities */
     foreach ($entities as $placement) {
       $into = $placement->region();
       if (!isset($regions[$into])) {
@@ -302,7 +305,7 @@ class LayoutForm extends EntityForm {
     $regions = NULL;
     foreach ($this->templateMan->plugins() as $plugin) {
       if ($this->entity->template() === $plugin->id()) {
-        /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */
+        /** @var HiddenTabTemplateInterface $plugin */
         $regions = $plugin->regions();
         break;
       }
@@ -330,7 +333,7 @@ class LayoutForm extends EntityForm {
   public function save(array $form, FormStateInterface $form_state) {
     $result = parent::save($form, $form_state);
     foreach ($form_state->getValue('blocks') as $placement => $attr) {
-      /** @var \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface $c */
+      /** @var HiddenTabPlacementInterface $c */
       $c = $this->entityHelper->placement($placement);
       $c->set('weight', $attr['weight'] ?: 0);
       $c->set('region', $attr['region']);
diff --git a/src/Form/OnPageAddCreditForm.php b/src/Form/OnPageAddCreditForm.php
index 1622a00..5407b06 100644
--- a/src/Form/OnPageAddCreditForm.php
+++ b/src/Form/OnPageAddCreditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Form;
 
+use Drupal\hidden_tab\Entity\HiddenTabCreditInterface;
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -18,8 +19,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  *
  * @see \Drupal\hidden_tab\Entity\HiddenTabCreditInterface
  * @see \Drupal\hidden_tab\Controller\XPageRenderController
- * @property \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $entity
- *
+ * @property HiddenTabCreditInterface $entity
  */
 class OnPageAddCreditForm extends OnPageAdd {
 
@@ -44,12 +44,12 @@ class OnPageAddCreditForm extends OnPageAdd {
   protected static $type = 'hidden_tab_credit';
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
-   * @var \Drupal\hidden_tab\Service\CreditChargingInterface
+   * @var CreditChargingInterface
    */
   protected $creditCharging;
 
diff --git a/src/Plugable/Access/HiddenTabAccessInterface.php b/src/Plugable/Access/HiddenTabAccessInterface.php
index 90b67e1..93fabe8 100644
--- a/src/Plugable/Access/HiddenTabAccessInterface.php
+++ b/src/Plugable/Access/HiddenTabAccessInterface.php
@@ -17,22 +17,22 @@ interface HiddenTabAccessInterface extends HiddenTabPluginInterfaceBase {
   const PID = 'hidden_tab_access';
 
   /**
-   * A decision, access or deny, or neutral.
-   *
-   * @param \Drupal\Core\Entity\EntityInterface $context_entity
-   *   The entity being acted upon.
-   * @param \Drupal\Core\Session\AccountInterface $account
-   *   The acting user.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null $page
-   *   The page being access, if any.
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $query
-   *   Current query.
-   * @param string $operation
-   *   Requested operation on the entity.
-   *
-   * @return \Drupal\Core\Access\AccessResult What the plugin has decided. What the plugin has decided.
-   *   What the plugin has decided. What the plugin has decided.
-   */
+  * A decision, access or deny, or neutral.
+  *
+   * @param EntityInterface $context_entity
+  *   The entity being acted upon.
+   * @param AccountInterface $account
+  *   The acting user.
+   * @param HiddenTabPageInterface|null $page
+  *   The page being access, if any.
+   * @param ParameterBag $query
+  *   Current query.
+  * @param string $operation
+  *   Requested operation on the entity.
+  *
+   * @return AccessResult What the plugin has decided. What the plugin has decided.
+    What the plugin has decided. What the plugin has decided.
+  */
   public function canAccess(EntityInterface $context_entity,
                             AccountInterface $account,
                             ?HiddenTabPageInterface $page,
diff --git a/src/Plugable/Access/HiddenTabAccessPluginManager.php b/src/Plugable/Access/HiddenTabAccessPluginManager.php
index 6da8032..a7a2a7d 100644
--- a/src/Plugable/Access/HiddenTabAccessPluginManager.php
+++ b/src/Plugable/Access/HiddenTabAccessPluginManager.php
@@ -38,7 +38,7 @@ class HiddenTabAccessPluginManager extends HiddenTabPluginManager {
   /**
    * Factory method, create an instance from container.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginManager
+   * @return HiddenTabPluginManager
    */
   public static function instance(): HiddenTabPluginManager {
     return Drupal::service('plugin.manager.' . HiddenTabAccessInterface::PID);
diff --git a/src/Plugable/HiddenTabPluginInterfaceBase.php b/src/Plugable/HiddenTabPluginInterfaceBase.php
index d64b05b..65a0727 100644
--- a/src/Plugable/HiddenTabPluginInterfaceBase.php
+++ b/src/Plugable/HiddenTabPluginInterfaceBase.php
@@ -58,7 +58,7 @@ interface HiddenTabPluginInterfaceBase extends ContainerFactoryPluginInterface {
    *
    * @param array $form
    *   The form of configuration.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of configuration.
    * @param string $form_fieldset
    *   All the elements added by plugin must go into this fieldset in form.
@@ -75,7 +75,7 @@ interface HiddenTabPluginInterfaceBase extends ContainerFactoryPluginInterface {
    *
    * @param array $form
    *   The form being validated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state being validated.
    * @param mixed|null $config
    *   The previous configuration stored by the plugin (json_decoded).
@@ -90,7 +90,7 @@ interface HiddenTabPluginInterfaceBase extends ContainerFactoryPluginInterface {
    *
    * @param array|null $form
    *   The form of configuration.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of configuration.
    *
    * @return mixed
diff --git a/src/Plugable/HiddenTabPluginManager.php b/src/Plugable/HiddenTabPluginManager.php
index 655ec49..0597a60 100644
--- a/src/Plugable/HiddenTabPluginManager.php
+++ b/src/Plugable/HiddenTabPluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugable;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use RuntimeException;
 
@@ -34,10 +35,10 @@ abstract class HiddenTabPluginManager extends DefaultPluginManager {
    * @param string|null $tagged
    *   Only return plugins having this tag.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginInterfaceBase[]
+   * @return HiddenTabPluginInterfaceBase[]
    *   all the implementing plugins.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @see \Drupal\hidden_tab\Plugable\PluginHelper::pluginsSorted()
    */
   public function plugins(?string $tagged = NULL): array {
@@ -66,10 +67,10 @@ abstract class HiddenTabPluginManager extends DefaultPluginManager {
   /**
    * all the implementing plugins, but sorted by weight.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginInterfaceBase[]
+   * @return HiddenTabPluginInterfaceBase[]
    *   all the implementing plugins, but sorted by weight.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @see \Drupal\hidden_tab\Plugable\PluginHelper::plugins()
    */
@@ -87,9 +88,9 @@ abstract class HiddenTabPluginManager extends DefaultPluginManager {
    * @param string $plugin_id
    *   id of the plugin.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginInterfaceBase
+   * @return HiddenTabPluginInterfaceBase
    *   a single plugin by id.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function plugin(string $plugin_id): HiddenTabPluginInterfaceBase {
     $all = $this->plugins();
@@ -108,7 +109,7 @@ abstract class HiddenTabPluginManager extends DefaultPluginManager {
    *
    * @return bool
    *   If plugin exists.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function exists(string $id): bool {
     return isset($this->plugins()[$id]);
@@ -124,7 +125,7 @@ abstract class HiddenTabPluginManager extends DefaultPluginManager {
    *
    * @return array
    *   plugins and their label suitable for a select element options.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function pluginsForSelectElement(?string $tagged = NULL, $none_option = FALSE): array {
     $options = [];
@@ -146,7 +147,7 @@ abstract class HiddenTabPluginManager extends DefaultPluginManager {
    * @return string
    *   Label of plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function labelOfPlugin(string $plugin_id): string {
     if ($this->exists($plugin_id)) {
diff --git a/src/Plugable/Komponent/HiddenTabKomponentInterface.php b/src/Plugable/Komponent/HiddenTabKomponentInterface.php
index 8adcebc..247a12c 100644
--- a/src/Plugable/Komponent/HiddenTabKomponentInterface.php
+++ b/src/Plugable/Komponent/HiddenTabKomponentInterface.php
@@ -47,11 +47,11 @@ interface HiddenTabKomponentInterface extends HiddenTabPluginInterfaceBase {
   public function komponents(): array;
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being visited.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page being visited.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface $placement
+   * @param HiddenTabPlacementInterface $placement
    *   The placement to be rendered.
    *
    * @return string
diff --git a/src/Plugable/Komponent/HiddenTabKomponentPluginManager.php b/src/Plugable/Komponent/HiddenTabKomponentPluginManager.php
index e75fc1f..bd502ac 100644
--- a/src/Plugable/Komponent/HiddenTabKomponentPluginManager.php
+++ b/src/Plugable/Komponent/HiddenTabKomponentPluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugable\Komponent;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -44,7 +45,7 @@ class HiddenTabKomponentPluginManager extends HiddenTabPluginManager {
    * @return array
    *   All the komponents a plugin provides.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @see \Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentInterface::komponents()
    */
@@ -56,7 +57,7 @@ class HiddenTabKomponentPluginManager extends HiddenTabPluginManager {
   /**
    * Factory method, create an instance from container.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginManager
+   * @return HiddenTabPluginManager
    */
   public static function instance(): HiddenTabPluginManager {
     return Drupal::service('plugin.manager.' . HiddenTabKomponentInterface::PID);
diff --git a/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryInterface.php b/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryInterface.php
index 15cd2b3..3760702 100644
--- a/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryInterface.php
+++ b/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryInterface.php
@@ -19,11 +19,11 @@ interface HiddenTabMailDiscoveryInterface extends HiddenTabPluginInterfaceBase {
   /**
    * Find the emails, according to plugins implementation.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $mailer
+   * @param HiddenTabMailerInterface $mailer
    *   Mailing config.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page email is being sent for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The node email is being sent for.
    *
    * @return string[]
diff --git a/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryPluginManager.php b/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryPluginManager.php
index f2bf081..c524cf0 100644
--- a/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryPluginManager.php
+++ b/src/Plugable/MailDiscovery/HiddenTabMailDiscoveryPluginManager.php
@@ -38,7 +38,7 @@ class HiddenTabMailDiscoveryPluginManager extends HiddenTabPluginManager {
   /**
    * Factory method, create an instance from container.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginManager
+   * @return HiddenTabPluginManager
    */
   public static function instance(): HiddenTabPluginManager {
     return Drupal::service('plugin.manager.' . HiddenTabMailDiscoveryInterface::PID);
diff --git a/src/Plugable/Render/HiddenTabRenderInterface.php b/src/Plugable/Render/HiddenTabRenderInterface.php
index 16a9a5e..1bb7fec 100644
--- a/src/Plugable/Render/HiddenTabRenderInterface.php
+++ b/src/Plugable/Render/HiddenTabRenderInterface.php
@@ -21,11 +21,11 @@ interface HiddenTabRenderInterface extends HiddenTabPluginInterfaceBase {
   /**
    * Check if user has access to view output of the plugin.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity being accessed.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   page being accessed.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The accessing user.
    *
    * @return AccessResult
@@ -38,13 +38,13 @@ interface HiddenTabRenderInterface extends HiddenTabPluginInterfaceBase {
   /**
    * Render the component
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being visited.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page being visited.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   Accessing user.
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $bag
+   * @param ParameterBag $bag
    *   Received parameters.
    * @param array $output
    *   The generated output, ready to be flushed as renderable.
diff --git a/src/Plugable/Render/HiddenTabRenderPluginManager.php b/src/Plugable/Render/HiddenTabRenderPluginManager.php
index b81c479..bd73b09 100644
--- a/src/Plugable/Render/HiddenTabRenderPluginManager.php
+++ b/src/Plugable/Render/HiddenTabRenderPluginManager.php
@@ -38,7 +38,7 @@ class HiddenTabRenderPluginManager extends HiddenTabPluginManager {
   /**
    * Factory method, create an instance from container.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginManager
+   * @return HiddenTabPluginManager
    */
   public static function instance(): HiddenTabPluginManager {
     return Drupal::service('plugin.manager.' . HiddenTabRenderInterface::PID);
diff --git a/src/Plugable/Render/HiddenTabRenderSafeTrait.php b/src/Plugable/Render/HiddenTabRenderSafeTrait.php
index d847921..57e9fcb 100644
--- a/src/Plugable/Render/HiddenTabRenderSafeTrait.php
+++ b/src/Plugable/Render/HiddenTabRenderSafeTrait.php
@@ -39,13 +39,13 @@ trait HiddenTabRenderSafeTrait {
    * Sub classes may extend this instead and let render() of this class handle
    * exceptions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   See render().
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   See render().
-   * @param \Drupal\Core\Session\AccountInterface $use
+   * @param AccountInterface $use
    *   See render().
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $bag
+   * @param ParameterBag $bag
    *   See render().
    * @param array $output
    *   See render().
diff --git a/src/Plugable/Template/HiddenTabTemplatePluginBase.php b/src/Plugable/Template/HiddenTabTemplatePluginBase.php
index 838c12c..577e2e8 100644
--- a/src/Plugable/Template/HiddenTabTemplatePluginBase.php
+++ b/src/Plugable/Template/HiddenTabTemplatePluginBase.php
@@ -49,8 +49,8 @@ abstract class HiddenTabTemplatePluginBase extends HiddenTabPluginBase implement
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
-    $this->imageUri = drupal_get_path('module', 'hidden_tab') . '/asset/image/preview.png';
-    $this->templateFilePath = drupal_get_path('module', 'hidden_tab') . '/templates';
+    $this->imageUri = \Drupal::service('extension.list.module')->getPath('hidden_tab') . '/asset/image/preview.png';
+    $this->templateFilePath = \Drupal::service('extension.list.module')->getPath('hidden_tab') . '/templates';
   }
 
   /**
diff --git a/src/Plugable/Template/HiddenTabTemplatePluginManager.php b/src/Plugable/Template/HiddenTabTemplatePluginManager.php
index 90118f0..75a629b 100644
--- a/src/Plugable/Template/HiddenTabTemplatePluginManager.php
+++ b/src/Plugable/Template/HiddenTabTemplatePluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugable\Template;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -24,9 +25,9 @@ class HiddenTabTemplatePluginManager extends HiddenTabPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(Traversable $namespaces,
@@ -49,11 +50,11 @@ class HiddenTabTemplatePluginManager extends HiddenTabPluginManager {
    * @return array
    *   label to image uri array, label of templates and their preview images.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function templatePreviewImages(): array {
     $options = [];
-    /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */
+    /** @var HiddenTabTemplateInterface $plugin */
     foreach ($this->plugins() as $plugin) {
       $options[$plugin->label()] = $plugin->imageUri();
     }
@@ -69,10 +70,10 @@ class HiddenTabTemplatePluginManager extends HiddenTabPluginManager {
    * @return array
    *   Id to label array of regions available in the template.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function regionsOfTemplate(string $plugin_id): array {
-    /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */
+    /** @var HiddenTabTemplateInterface $plugin */
     $plugin = $this->plugin($plugin_id);
     return $plugin->regions();
   }
@@ -80,7 +81,7 @@ class HiddenTabTemplatePluginManager extends HiddenTabPluginManager {
   /**
    * Factory method, create an instance from container.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginManager
+   * @return HiddenTabPluginManager
    */
   public static function instance(): HiddenTabPluginManager {
     return Drupal::service('plugin.manager.' . HiddenTabTemplateInterface::PID);
diff --git a/src/Plugable/TplContext/HiddenTabTplContextPluginManager.php b/src/Plugable/TplContext/HiddenTabTplContextPluginManager.php
index eea2ebd..8e2bd63 100644
--- a/src/Plugable/TplContext/HiddenTabTplContextPluginManager.php
+++ b/src/Plugable/TplContext/HiddenTabTplContextPluginManager.php
@@ -38,7 +38,7 @@ class HiddenTabTplContextPluginManager extends HiddenTabPluginManager {
   /**
    * Factory method, create an instance from container.
    *
-   * @return \Drupal\hidden_tab\Plugable\HiddenTabPluginManager
+   * @return HiddenTabPluginManager
    */
   public static function instance(): HiddenTabPluginManager {
     return Drupal::service('plugin.manager.' . HiddenTabTplContextInterface::PID);
diff --git a/src/Plugin/Derivative/DevelLocalTask.php b/src/Plugin/Derivative/DevelLocalTask.php
index 1d3b192..23b1c24 100644
--- a/src/Plugin/Derivative/DevelLocalTask.php
+++ b/src/Plugin/Derivative/DevelLocalTask.php
@@ -22,16 +22,16 @@ class DevelLocalTask extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The entity manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an DevelLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/HiddenTabAccess/HiddenTabCreditPermission.php b/src/Plugin/HiddenTabAccess/HiddenTabCreditPermission.php
index 84708e9..7e0c68c 100644
--- a/src/Plugin/HiddenTabAccess/HiddenTabCreditPermission.php
+++ b/src/Plugin/HiddenTabAccess/HiddenTabCreditPermission.php
@@ -73,21 +73,21 @@ class HiddenTabCreditPermission extends HiddenTabAccessPluginBase {
   /**
    * Well, to charge user for credit.
    *
-   * @var \Drupal\hidden_tab\Service\CreditChargingInterface
+   * @var CreditChargingInterface
    */
   protected $cc;
 
   /**
    * To log.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;
 
   /**
    * To translate.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $t;
 
diff --git a/src/Plugin/HiddenTabKomponent/HiddenTabViewsKomponent.php b/src/Plugin/HiddenTabKomponent/HiddenTabViewsKomponent.php
index 88eed6a..a194383 100644
--- a/src/Plugin/HiddenTabKomponent/HiddenTabViewsKomponent.php
+++ b/src/Plugin/HiddenTabKomponent/HiddenTabViewsKomponent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugin\HiddenTabKomponent;
 
+use Drupal\views\Entity\View;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\hidden_tab\Entity\HiddenTabPageInterface;
@@ -78,7 +79,7 @@ class HiddenTabViewsKomponent extends HiddenTabKomponentPluginBase {
   /**
    * To load all tne views.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $viewsStorage;
 
@@ -115,7 +116,7 @@ class HiddenTabViewsKomponent extends HiddenTabKomponentPluginBase {
   public function komponents(): array {
     $definitions = [];
     foreach ($this->viewsStorage->loadMultiple() as $view) {
-      /** @var  \Drupal\views\Entity\View $view */
+      /** @var View $view */
       foreach ($view->get('display') as $disp) {
         $definitions[$view->id() . '::' . $disp['id']] =
           $view->label() . ' : ' . $disp['display_title'];
diff --git a/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByEmailField.php b/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByEmailField.php
index af18bb5..0e4edb6 100644
--- a/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByEmailField.php
+++ b/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByEmailField.php
@@ -71,7 +71,7 @@ class HiddenTabMailDiscoveryByEmailField extends HiddenTabMailDiscoveryPluginBas
   /**
    * To load list of fields.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fieldStorage;
 
diff --git a/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByTextField.php b/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByTextField.php
index b9b4318..893aa62 100644
--- a/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByTextField.php
+++ b/src/Plugin/HiddenTabMailDiscovery/HiddenTabMailDiscoveryByTextField.php
@@ -70,7 +70,7 @@ class HiddenTabMailDiscoveryByTextField extends HiddenTabMailDiscoveryPluginBase
   /**
    * To load list of fields.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fieldStorage;
 
diff --git a/src/Plugin/HiddenTabRender/HiddenTabRenderAddCredit.php b/src/Plugin/HiddenTabRender/HiddenTabRenderAddCredit.php
index 68d0f86..129d768 100644
--- a/src/Plugin/HiddenTabRender/HiddenTabRenderAddCredit.php
+++ b/src/Plugin/HiddenTabRender/HiddenTabRenderAddCredit.php
@@ -75,12 +75,12 @@ class HiddenTabRenderAddCredit extends HiddenTabRenderAdministrativeBase {
   /**
    * To build the add form.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;
 
diff --git a/src/Plugin/HiddenTabRender/HiddenTabRenderAdminLinks.php b/src/Plugin/HiddenTabRender/HiddenTabRenderAdminLinks.php
index e3a596f..db8418b 100644
--- a/src/Plugin/HiddenTabRender/HiddenTabRenderAdminLinks.php
+++ b/src/Plugin/HiddenTabRender/HiddenTabRenderAdminLinks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugin\HiddenTabRender;
 
+use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Session\AccountInterface;
@@ -80,7 +81,7 @@ class HiddenTabRenderAdminLinks extends HiddenTabRenderAdministrativeBase {
                              ParameterBag $bag,
                              array &$output) {
 
-    /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $p */
+    /** @var HiddenTabTemplateInterface $p */
     $p = HiddenTabTemplatePluginManager::instance()
       ->plugin('hidden_tab_admin_links');
 
diff --git a/src/Plugin/HiddenTabRender/HiddenTabRenderAdminSenders.php b/src/Plugin/HiddenTabRender/HiddenTabRenderAdminSenders.php
index 0e90a34..710a116 100644
--- a/src/Plugin/HiddenTabRender/HiddenTabRenderAdminSenders.php
+++ b/src/Plugin/HiddenTabRender/HiddenTabRenderAdminSenders.php
@@ -71,7 +71,7 @@ class HiddenTabRenderAdminSenders extends HiddenTabRenderAdministrativeBase {
   /**
    * To build the send form.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
diff --git a/src/Plugin/HiddenTabRender/HiddenTabRenderCreditsList.php b/src/Plugin/HiddenTabRender/HiddenTabRenderCreditsList.php
index ada3392..46ca64f 100644
--- a/src/Plugin/HiddenTabRender/HiddenTabRenderCreditsList.php
+++ b/src/Plugin/HiddenTabRender/HiddenTabRenderCreditsList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugin\HiddenTabRender;
 
+use Drupal\hidden_tab\Entity\HiddenTabCreditInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -73,7 +74,7 @@ class HiddenTabRenderCreditsList extends HiddenTabRenderAdministrativeBase {
   /**
    * To load credits.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
@@ -138,7 +139,7 @@ class HiddenTabRenderCreditsList extends HiddenTabRenderAdministrativeBase {
       '#empty' => t('There are no items yet, <a href="@add">Add a new one</a>.', $add_link),
     ];
 
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[] $entities */
+    /** @var HiddenTabCreditInterface[] $entities */
     $entities = $this->storage->loadByProperties([
       'target_hidden_tab_page' => $page->id(),
     ]);
diff --git a/src/Plugin/HiddenTabRender/HiddenTabRenderMailersList.php b/src/Plugin/HiddenTabRender/HiddenTabRenderMailersList.php
index 2c44491..7952a9e 100644
--- a/src/Plugin/HiddenTabRender/HiddenTabRenderMailersList.php
+++ b/src/Plugin/HiddenTabRender/HiddenTabRenderMailersList.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugin\HiddenTabRender;
 
+use Drupal\hidden_tab\Entity\HiddenTabMailerInterface;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -75,21 +76,21 @@ class HiddenTabRenderMailersList extends HiddenTabRenderAdministrativeBase {
   /**
    * To load mailers.
    *
-   * @var \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface
+   * @var HiddenTabEntityHelperInterface
    */
   protected $entityHelper;
 
   /**
    * To format... dates?
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $df;
 
   /**
    * To protect mail send link.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrf;
 
@@ -134,8 +135,7 @@ class HiddenTabRenderMailersList extends HiddenTabRenderAdministrativeBase {
                           AccountInterface $user,
                           ParameterBag $bag,
                           array &$output) {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $rower */
-
+    /** @var HiddenTabMailerInterface $rower */
     $add_link['@add'] = Url::fromRoute('entity.hidden_tab_mailer.add_form', [
       'page' => $page->id(),
       'target-entity' => $entity->id(),
diff --git a/src/Plugin/HiddenTabRender/HiddenTabRenderPage.php b/src/Plugin/HiddenTabRender/HiddenTabRenderPage.php
index f980f2b..4e48c4d 100644
--- a/src/Plugin/HiddenTabRender/HiddenTabRenderPage.php
+++ b/src/Plugin/HiddenTabRender/HiddenTabRenderPage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\hidden_tab\Plugin\HiddenTabRender;
 
+use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Logger\LoggerChannel;
@@ -79,28 +80,28 @@ class HiddenTabRenderPage extends HiddenTabRenderPluginBase {
   /**
    * To log!.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;
 
   /**
    * To find placements of page.
    *
-   * @var \Drupal\hidden_tab\Service\HiddenTabEntityHelperInterface
+   * @var HiddenTabEntityHelperInterface
    */
   protected $entityHelper;
 
   /**
    * To find templates.
    *
-   * @var \Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentPluginManager
+   * @var HiddenTabKomponentPluginManager
    */
   protected $komponentMan;
 
   /**
    * To find templates.
    *
-   * @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager
+   * @var HiddenTabTemplatePluginManager
    */
   protected $templateMan;
 
@@ -169,8 +170,7 @@ class HiddenTabRenderPage extends HiddenTabRenderPluginBase {
                           ParameterBag $bag,
                           array &$output) {
     /** @var \Drupal\hidden_tab\Plugable\Komponent\HiddenTabKomponentInterface[] $komponent_types */
-    /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $admin_template */
-
+    /** @var HiddenTabTemplateInterface $admin_template */
     $komponent_types = $this->komponentMan->plugins();
 
     $placements = $this->entityHelper->placementsOfPage($page->id());
@@ -258,7 +258,7 @@ class HiddenTabRenderPage extends HiddenTabRenderPluginBase {
     }
     else {
       if ($this->templateMan->exists($page->template())) {
-        /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $a */
+        /** @var HiddenTabTemplateInterface $a */
         $a = $this->templateMan->plugin($page->template());
         $page_r = [
           '#attached' => $a->attachLibrary(),
diff --git a/src/Plugin/HiddenTabTplContext/HiddenTabHiddenTabCreditTplContext.php b/src/Plugin/HiddenTabTplContext/HiddenTabHiddenTabCreditTplContext.php
index db554f6..2016461 100644
--- a/src/Plugin/HiddenTabTplContext/HiddenTabHiddenTabCreditTplContext.php
+++ b/src/Plugin/HiddenTabTplContext/HiddenTabHiddenTabCreditTplContext.php
@@ -75,12 +75,12 @@ class HiddenTabHiddenTabCreditTplContext extends HiddenTabTplContextPluginBase {
   /**
    * To find credit entities.
    *
-   * @var \Drupal\hidden_tab\Service\CreditChargingInterface
+   * @var CreditChargingInterface
    */
   protected $cc;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -119,7 +119,7 @@ class HiddenTabHiddenTabCreditTplContext extends HiddenTabTplContextPluginBase {
    */
   public function provide(array $entities, array $extra): array {
     /** @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page */
-    /** @var \Drupal\Core\Entity\EntityInterface $target_entity */
+    /** @var EntityInterface $target_entity */
     $none = [
       'credit' => NULL,
       'credit_link' => '',
diff --git a/src/Routing/DynamicRouting.php b/src/Routing/DynamicRouting.php
index 3c0de18..e775c23 100644
--- a/src/Routing/DynamicRouting.php
+++ b/src/Routing/DynamicRouting.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\hidden_tab\Routing;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\hidden_tab\Controller\XPageRenderController;
 use Drupal\hidden_tab\Service\HiddenTabEntityHelper;
 use Symfony\Component\Routing\Route;
@@ -21,10 +23,10 @@ class DynamicRouting {
    *
    * Disabled pages ($page->isEnabled()) are skipped.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   All the routes created by this class.
    */
   public function routes(): RouteCollection {
diff --git a/src/Service/CreditCharging.php b/src/Service/CreditCharging.php
index d0926e6..b27ed92 100644
--- a/src/Service/CreditCharging.php
+++ b/src/Service/CreditCharging.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\hidden_tab\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,24 +23,24 @@ class CreditCharging implements CreditChargingInterface {
   /**
    * Used by findCreditEntityById().
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $creditStorage;
 
   /**
    * To get current IP, for per ip accounting.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $message;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
@@ -57,11 +60,11 @@ class CreditCharging implements CreditChargingInterface {
    * @param $id
    *   Id of entity
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface
+   * @return HiddenTabCreditInterface
    *   Loaded entity if any.
    */
   private function findCreditEntityById($id): HiddenTabCreditInterface {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $credit */
+    /** @var HiddenTabCreditInterface $credit */
     $credit = $this->creditStorage->load($id);
     return $credit;
   }
@@ -331,7 +334,7 @@ class CreditCharging implements CreditChargingInterface {
   /**
    * Factory method, create an instance of the service.
    *
-   * @return \Drupal\hidden_tab\Service\CreditChargingInterface
+   * @return CreditChargingInterface
    */
   public static function instance(): CreditChargingInterface {
     return Drupal::service('hidden_tab.credit_service');
diff --git a/src/Service/CreditChargingInterface.php b/src/Service/CreditChargingInterface.php
index 237a815..48fdd26 100644
--- a/src/Service/CreditChargingInterface.php
+++ b/src/Service/CreditChargingInterface.php
@@ -8,6 +8,7 @@
 
 namespace Drupal\hidden_tab\Service;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\hidden_tab\Entity\HiddenTabCreditInterface;
@@ -57,14 +58,14 @@ interface CreditChargingInterface {
    *
    * TODO do not take full entity, get ID.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null $page
+   * @param HiddenTabPageInterface|null $page
    *   The hidden tab page in question.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity in question.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function he(?HiddenTabPageInterface $page,
@@ -72,14 +73,14 @@ interface CreditChargingInterface {
                      ?AccountInterface $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The account in question.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function peu(HiddenTabPageInterface $page,
@@ -87,14 +88,14 @@ interface CreditChargingInterface {
                       AccountInterface $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity in question.
    * @param bool $account
    *   Dummy.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function pex(HiddenTabPageInterface $page,
@@ -102,14 +103,14 @@ interface CreditChargingInterface {
                       bool $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
    * @param bool $entity
    *   Dummy.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function pxu(HiddenTabPageInterface $page,
@@ -117,14 +118,14 @@ interface CreditChargingInterface {
                       AccountInterface $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
    * @param bool $entity
    *   Dummy.
    * @param bool $account
    *   Dummy.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function pxx(?HiddenTabPageInterface $page,
@@ -134,12 +135,12 @@ interface CreditChargingInterface {
   /**
    * @param bool $page
    *   Dummy.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity in question.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function xeu(bool $page,
@@ -149,12 +150,12 @@ interface CreditChargingInterface {
   /**
    * @param bool $page
    *   Dummy.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity in question.
    * @param bool $account
    *   Dummy.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function xex(bool $page,
@@ -166,10 +167,10 @@ interface CreditChargingInterface {
    *   Dummy.
    * @param bool $entity
    *   Dummy.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabCreditInterface[]
+   * @return HiddenTabCreditInterface[]
    *   Loaded entities
    */
   public function xxu(bool $page,
@@ -177,18 +178,17 @@ interface CreditChargingInterface {
                       AccountInterface $account): array;
 
   // ==========================================================================
-
   /**
    * Check credit, charge credit and return TRUE meaning account had credit.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $credit
+   * @param HiddenTabCreditInterface $credit
    *   The credit to check credit of.
-   * @param \Drupal\Core\Session\AccountInterface $from_user
+   * @param AccountInterface $from_user
    *   The user who is going to be charged credit.
    *
    * @return bool
    *   True if account has credit.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function charge(HiddenTabCreditInterface $credit,
                          AccountInterface $from_user): bool;
@@ -196,7 +196,7 @@ interface CreditChargingInterface {
   /**
    * If credit can be charged from credit, that is it's enabled and has credit.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $credit
+   * @param HiddenTabCreditInterface $credit
    *   Credit entity to check.
    *
    * @return bool
diff --git a/src/Service/HiddenTabEntityHelper.php b/src/Service/HiddenTabEntityHelper.php
index 75a67b7..6d57dc6 100644
--- a/src/Service/HiddenTabEntityHelper.php
+++ b/src/Service/HiddenTabEntityHelper.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\hidden_tab\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,32 +21,32 @@ class HiddenTabEntityHelper implements HiddenTabEntityHelperInterface {
   /**
    * To find pages from.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $pageStorage;
 
   /**
    * To find placements from.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $placementStorage;
 
   /**
    * To find mailers from.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mailerStorage;
 
   /**
    * HiddenTabEntityHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $em
+   * @param EntityTypeManagerInterface $em
    *   To get page storage from.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $em) {
     $this->pageStorage = $em->getStorage('hidden_tab_page');
diff --git a/src/Service/HiddenTabEntityHelperInterface.php b/src/Service/HiddenTabEntityHelperInterface.php
index 5c83509..783b051 100644
--- a/src/Service/HiddenTabEntityHelperInterface.php
+++ b/src/Service/HiddenTabEntityHelperInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\hidden_tab\Service;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\hidden_tab\Entity\HiddenTabMailerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\hidden_tab\Entity\HiddenTabPageInterface;
 use Drupal\hidden_tab\Entity\HiddenTabPlacementInterface;
@@ -19,10 +22,10 @@ interface HiddenTabEntityHelperInterface {
    * @param string $tab_uri
    *   Uri to check.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null
+   * @return HiddenTabPageInterface|null
    *   Found page, if any.
    */
   public function pageByTabUri($tab_uri): ?HiddenTabPageInterface;
@@ -33,10 +36,10 @@ interface HiddenTabEntityHelperInterface {
    * @param string $secret_uri
    *   Uri to check.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null
+   * @return HiddenTabPageInterface|null
    *   Found page, if any.
    */
   public function pageBySecretUri($secret_uri): ?HiddenTabPageInterface;
@@ -47,10 +50,10 @@ interface HiddenTabEntityHelperInterface {
    * @param string $id
    *   Entity id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null
+   * @return HiddenTabPageInterface|null
    *   Loaded entity, if any.
    */
   public function page(string $id): ?HiddenTabPageInterface;
@@ -58,10 +61,10 @@ interface HiddenTabEntityHelperInterface {
   /**
    * Load all pages.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPageInterface[]
+   * @return HiddenTabPageInterface[]
    *   All entities loaded.
    */
   public function pages(): array;
@@ -75,14 +78,13 @@ interface HiddenTabEntityHelperInterface {
   public function allPagesForSelectElement(): array;
 
   // ==========================================================================
-
   /**
    * Given a page, load all it's placements.
    *
    * @param string $page_id
    *   The page in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface[]
+   * @return HiddenTabPlacementInterface[]
    *   All the placements in the page.
    */
   public function placementsOfPage(string $page_id): array;
@@ -93,25 +95,24 @@ interface HiddenTabEntityHelperInterface {
    * @param string $id
    *   Entity id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabPlacementInterface|null
+   * @return HiddenTabPlacementInterface|null
    *   Loaded entity, if any.
    */
   public function placement(string $id): ?HiddenTabPlacementInterface;
 
   // ==========================================================================
-
   /**
    * Load mailers suitable for an entity (but not having target user).
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page to look for it's mailers.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Found mailers.
    */
   public function entityMailers(HiddenTabPageInterface $page, EntityInterface $entity): array;
diff --git a/src/Service/MailerSender.php b/src/Service/MailerSender.php
index 002d6e9..f28c267 100644
--- a/src/Service/MailerSender.php
+++ b/src/Service/MailerSender.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\hidden_tab\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -15,27 +19,27 @@ class MailerSender implements MailerSenderInterface {
   /**
    * Used by findMailerEntityById().
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mailerStorage;
 
   /**
    * To get current IP, for per ip accounting.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * MailerSender constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   See $this->>mailerStorage.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   See $this->request
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
                               RequestStack $request_stack) {
@@ -49,11 +53,11 @@ class MailerSender implements MailerSenderInterface {
    * @param $id
    *   Id of entity
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface
+   * @return HiddenTabMailerInterface
    *   Loaded entity if any.
    */
   private function findMailerEntityById($id): HiddenTabMailerInterface {
-    /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $mailer */
+    /** @var HiddenTabMailerInterface $mailer */
     $mailer = $this->mailerStorage->load($id);
     return $mailer;
   }
diff --git a/src/Service/MailerSenderInterface.php b/src/Service/MailerSenderInterface.php
index a344214..7943416 100644
--- a/src/Service/MailerSenderInterface.php
+++ b/src/Service/MailerSenderInterface.php
@@ -8,6 +8,7 @@
 
 namespace Drupal\hidden_tab\Service;
 
+use Drupal\hidden_tab\Entity\HiddenTabMailerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\hidden_tab\Entity\HiddenTabPageInterface;
@@ -20,14 +21,14 @@ interface MailerSenderInterface {
   /**
    * Find mailer entity by params.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface|null $page
+   * @param HiddenTabPageInterface|null $page
    *   The hidden tab page in question.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity in question.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function he(?HiddenTabPageInterface $page,
@@ -35,14 +36,14 @@ interface MailerSenderInterface {
                      ?AccountInterface $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The account in question.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function peu(HiddenTabPageInterface $page,
@@ -50,14 +51,14 @@ interface MailerSenderInterface {
                       AccountInterface $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity in question.
    * @param bool $account
    *   Dummy.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function pex(HiddenTabPageInterface $page,
@@ -65,14 +66,14 @@ interface MailerSenderInterface {
                       bool $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
    * @param bool $entity
    *   Dummy.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function pxu(HiddenTabPageInterface $page,
@@ -80,14 +81,14 @@ interface MailerSenderInterface {
                       AccountInterface $account): array;
 
   /**
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
    * @param bool $entity
    *   Dummy.
    * @param bool $account
    *   Dummy.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function pxx(?HiddenTabPageInterface $page,
@@ -97,12 +98,12 @@ interface MailerSenderInterface {
   /**
    * @param bool $page
    *   Dummy.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity in question.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function xeu(bool $page,
@@ -112,12 +113,12 @@ interface MailerSenderInterface {
   /**
    * @param bool $page
    *   Dummy.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity in question.
    * @param bool $account
    *   Dummy.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function xex(bool $page,
@@ -129,10 +130,10 @@ interface MailerSenderInterface {
    *   Dummy.
    * @param bool $entity
    *   Dummy.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Loaded entities
    */
   public function xxu(bool $page,
@@ -142,7 +143,7 @@ interface MailerSenderInterface {
   /**
    * Execute the mailer.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $mailer
+   * @param EntityInterface|null $mailer
    *   The mailer to send.
    *
    * @return bool
diff --git a/src/Utility.php b/src/Utility.php
index 44b9db2..9470fc2 100644
--- a/src/Utility.php
+++ b/src/Utility.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\hidden_tab;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Entity\EntityInterface;
@@ -22,7 +24,7 @@ use Throwable;
 final class Utility {
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   public static $logger = NULL;
 
@@ -168,7 +170,7 @@ final class Utility {
   /**
    * Find a suitable lredirect value created by redirectHere().
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The found Url to redirect to.
    *
    * @see \Drupal\hidden_tab\Utility::redirectHere()
@@ -187,9 +189,9 @@ final class Utility {
   /**
    * Same path just like redirectHere() but for the given page.
    *
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page to redirect to.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabCreditInterface $credit
+   * @param HiddenTabCreditInterface $credit
    *   The current hash being visited.
    *
    * @return string
@@ -250,7 +252,7 @@ final class Utility {
   /**
    * Calculates current Url, doh!
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   To calculate current Url from.
    *
    * @return string
@@ -262,17 +264,16 @@ final class Utility {
   }
 
   // ==================================================================== EMAIL
-
   /**
    * Send an email (the secret link).
    *
    * @param string $mail
    *   The email address.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page
+   * @param HiddenTabPageInterface $page
    *   The page in question.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity in question.
-   * @param \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $mailer
+   * @param HiddenTabMailerInterface $mailer
    *   The mail configuration for the given page.
    * @param array $ctx
    *
@@ -316,11 +317,11 @@ final class Utility {
    * @param string $page_id
    *   The page in question.
    *
-   * @return \Drupal\hidden_tab\Entity\HiddenTabMailerInterface[]
+   * @return HiddenTabMailerInterface[]
    *   Mail configurations set for a pge
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public static function mailConfigOfPage(string $page_id): array {
     return Drupal::entityTypeManager()->getStorage('hidden_tab_mailer')
