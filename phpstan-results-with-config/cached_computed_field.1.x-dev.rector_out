modules/contrib/cached_computed_field/cached_computed_field.install
modules/contrib/cached_computed_field/cached_computed_field.module
modules/contrib/cached_computed_field/cached_computed_field.post_update.php
modules/contrib/cached_computed_field/src/CachedComputedFieldManager.php
modules/contrib/cached_computed_field/src/CachedComputedFieldManagerInterface.php
modules/contrib/cached_computed_field/src/Event/RefreshExpiredFieldsEvent.php
modules/contrib/cached_computed_field/src/Event/RefreshExpiredFieldsEventInterface.php
modules/contrib/cached_computed_field/src/EventSubscriber/RefreshExpiredFieldsSubscriberBase.php
modules/contrib/cached_computed_field/src/EventSubscriber/RefreshExpiredFieldsSubscriberInterface.php
modules/contrib/cached_computed_field/src/ExpiredItem.php
modules/contrib/cached_computed_field/src/ExpiredItemCollection.php
modules/contrib/cached_computed_field/src/ExpiredItemCollectionInterface.php
modules/contrib/cached_computed_field/src/ExpiredItemInterface.php
modules/contrib/cached_computed_field/src/Form/SettingsForm.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedBooleanItem.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedDecimalItem.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedFloatItem.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedIntegerItem.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedItemTrait.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedStringItem.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedStringLongItem.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedTextItem.php
modules/contrib/cached_computed_field/src/Plugin/Field/FieldType/CachedComputedTextLongItem.php
modules/contrib/cached_computed_field/tests/modules/cached_computed_field_test/cached_computed_field_test.module
modules/contrib/cached_computed_field/tests/modules/cached_computed_field_test/src/EventSubscriber/RefreshExpiredFieldsTestSubscriber.php
modules/contrib/cached_computed_field/tests/modules/cached_computed_field_test/src/EventSubscriber/RefreshExpiredIntegerFieldsSubscriber.php
modules/contrib/cached_computed_field/tests/src/Kernel/BatchProcessingTest.php
modules/contrib/cached_computed_field/tests/src/Kernel/KernelTestBase.php
modules/contrib/cached_computed_field/tests/src/Kernel/MockTimeService.php
modules/contrib/cached_computed_field/tests/src/Kernel/RefreshExpiredFieldsSubscriberBaseTest.php
modules/contrib/cached_computed_field/tests/src/Kernel/SlowQueueProcessingTest.php

12 files with changes
=====================

1) modules/contrib/cached_computed_field/tests/src/Kernel/SlowQueueProcessingTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create 3 test entities.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cached_computed_field/tests/src/Kernel/RefreshExpiredFieldsSubscriberBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cached_computed_field\Kernel;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\cached_computed_field\ExpiredItem;
 use Drupal\cached_computed_field_test\EventSubscriber\RefreshExpiredFieldsTestSubscriber;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The event subscriber under test.
    *
-   * @var \Drupal\cached_computed_field_test\EventSubscriber\RefreshExpiredFieldsTestSubscriber
+   * @var RefreshExpiredFieldsTestSubscriber
    */
   protected $subscriber;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Instantiate the event subscriber being tested with a mocked time service
@@ @@
   /**
    * Creates an ExpiredItem object for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to create the expired item.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItem
+   * @return ExpiredItem
    *   The expired item.
    */
   protected function getExpiredItem(EntityInterface $entity) {
@@ @@
    * @param int|NULL $value
    *   Optional value to set on the cached computed field.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The test entity.
    */
   protected function createEntity(int $expire_time, int $value = NULL) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityStorage->create([
       'title' => $this->randomMachineName(),
       'type' => 'entity_test',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cached_computed_field/tests/src/Kernel/KernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\cached_computed_field\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Queue\QueueInterface;
+use Drupal\entity_test\Entity\EntityTest;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase as DrupalKernelTestBase;

 /**
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity_test entity type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The queue that contains expired fields.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The entities used in this test.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest[]
+   * @var EntityTest[]
    */
   protected $entities;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig([
@@ @@
    * @param int $count
    *   The number of entities to create.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if the entity storage for the `entity_test` entity doesn't exist.
    */
   protected function createTestEntities($count) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cached_computed_field/src/ExpiredItemCollectionInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the expired items in the collection.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItem[]
+   * @return ExpiredItem[]
    *   An array of expired items.
    */
   public function getItems();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/cached_computed_field/src/ExpiredItemCollection.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The expired items.
    *
-   * @var \Drupal\cached_computed_field\ExpiredItemInterface[]
+   * @var ExpiredItemInterface[]
    */
   protected $items;

@@ @@
   /**
    * Constructs a new ExpiredItemCollection object.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface[] $items
+   * @param ExpiredItemInterface[] $items
    *   An array of expired items.
    */
   public function __construct(array $items) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/cached_computed_field/src/EventSubscriber/RefreshExpiredFieldsSubscriberInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cached_computed_field\EventSubscriber;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\cached_computed_field\Event\RefreshExpiredFieldsEventInterface;
 use Drupal\cached_computed_field\ExpiredItemInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * Event subscriber that reacts to the RefreshExpiredFieldsEvent.
    *
-   * @param \Drupal\cached_computed_field\Event\RefreshExpiredFieldsEventInterface $event
+   * @param RefreshExpiredFieldsEventInterface $event
    *   The triggering event.
    */
   public function refreshExpiredFields(RefreshExpiredFieldsEventInterface $event);
@@ @@
   /**
    * Returns the entity that contains the expired field.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function getEntity(ExpiredItemInterface $expiredItem);
@@ @@
   /**
    * Returns the field definition of the expired field.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   The definition of the field.
    */
   public function getFieldDefinition(ExpiredItemInterface $expiredItem);
@@ @@
   /**
    * Returns the expired data that is currently cached in the field.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
    * @return mixed
@@ @@
    * Call this with the calculated value. It will write the value to the
    * database and reset the cache lifetime.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    * @param mixed $value
    *   The value to set.
@@ @@
    * It is possible a field value has already been refreshed in the time between
    * it was added to the queue and the moment the event fires.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
    * @return bool
@@ @@
   /**
    * Returns the expired field instance.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface
+   * @return FieldItemListInterface
    *   The field instance.
    */
   public function getField(ExpiredItemInterface $expiredItem);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/cached_computed_field/src/EventSubscriber/RefreshExpiredFieldsSubscriberBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The system time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new RefreshExpiredFieldSubscriberBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/cached_computed_field/src/Event/RefreshExpiredFieldsEventInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cached_computed_field\Event;

+use Drupal\cached_computed_field\ExpiredItemCollection;
 /**
  * Interface for events that fire when cached computed fields expire.
  */
@@ @@
   /**
    * Returns the expired items.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItemCollection
+   * @return ExpiredItemCollection
    *   A collection of expired items.
    */
   public function getExpiredItems();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/cached_computed_field/src/Event/RefreshExpiredFieldsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cached_computed_field\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cached_computed_field\ExpiredItemCollectionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * An event that fires when cached computed fields expire.
@@ @@
   /**
    * A collection of expired items.
    *
-   * @var \Drupal\cached_computed_field\ExpiredItemCollectionInterface
+   * @var ExpiredItemCollectionInterface
    */
   protected $expiredItems;

@@ @@
   /**
    * Constructs a new RefreshExpiredFieldsEvent.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemCollectionInterface $expiredItems
+   * @param ExpiredItemCollectionInterface $expiredItems
    *   The collection of expired items.
    */
   public function __construct(ExpiredItemCollectionInterface $expiredItems) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/cached_computed_field/src/CachedComputedFieldManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cached_computed_field;

+use Drupal\Core\Queue\QueueInterface;
 /**
  * Interface for services that manage cached computed fields.
  */
@@ @@
   /**
    * Returns the queue that holds the fields to process.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   The queue object.
    */
   public function getQueue();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/cached_computed_field/src/CachedComputedFieldManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cached_computed_field;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\cached_computed_field\Event\RefreshExpiredFieldsEvent;
 use Drupal\cached_computed_field\Event\RefreshExpiredFieldsEventInterface;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The database queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a CachedComputedFieldManager object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $fieldTypePluginManager
+   * @param FieldTypePluginManagerInterface $fieldTypePluginManager
    *   The field type plugin manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   The queue factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EntityTypeManagerInterface $entityTypeManager, FieldTypePluginManagerInterface $fieldTypePluginManager, TimeInterface $time, ConfigFactoryInterface $configFactory, QueueFactory $queueFactory, EventDispatcherInterface $eventDispatcher) {
@@ @@
     $end = time() + $this->getTimeLimit();
     while ((time() < $end) && $items = $this->claimItems()) {
       $event = new RefreshExpiredFieldsEvent($items);
-      $this->eventDispatcher->dispatch(RefreshExpiredFieldsEventInterface::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, RefreshExpiredFieldsEventInterface::EVENT_NAME);
     }
   }

@@ @@
   /**
    * Claims a batch of expired items from the queue and returns them.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItemCollectionInterface|null
+   * @return ExpiredItemCollectionInterface|null
    *   A collection of expired items, or NULL if there are no more items in the
    *   queue.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/cached_computed_field/cached_computed_field.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\cached_computed_field\CachedComputedFieldManagerInterface;
 /**
  * @file
  * Main functions and hook implementations of the Cached Computed Field module.
@@ @@
  * Implements hook_cron().
  */
 function cached_computed_field_cron() {
-  /** @var \Drupal\cached_computed_field\CachedComputedFieldManagerInterface $field_manager */
+  /** @var CachedComputedFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('cached_computed_field.manager');

   // If there are any items in the queue, process them. If not, repopulate the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 12 files have been changed by Rector                                      

