modules/contrib/drowl_paragraphs/drowl_paragraphs.api.php
modules/contrib/drowl_paragraphs/drowl_paragraphs.install
modules/contrib/drowl_paragraphs/drowl_paragraphs.module
modules/contrib/drowl_paragraphs/modules/drowl_paragraphs_type_countdown/drowl_paragraphs_type_countdown.install
modules/contrib/drowl_paragraphs/modules/drowl_paragraphs_type_countdown/drowl_paragraphs_type_countdown.module
modules/contrib/drowl_paragraphs/modules/drowl_paragraphs_type_score/drowl_paragraphs_type_score.install
modules/contrib/drowl_paragraphs/modules/drowl_paragraphs_type_score/drowl_paragraphs_type_score.module
modules/contrib/drowl_paragraphs/modules/drowl_paragraphs_types/drowl_paragraphs_types.install
modules/contrib/drowl_paragraphs/modules/drowl_paragraphs_types/drowl_paragraphs_types.module
modules/contrib/drowl_paragraphs/src/Form/DrowlParagraphsSettingsForm.php
modules/contrib/drowl_paragraphs/src/Plugin/Field/FieldFormatter/DrowlParagraphsSettingsDefaultFormatter.php
modules/contrib/drowl_paragraphs/src/Plugin/Field/FieldType/DrowlParagraphsSettingsItem.php
modules/contrib/drowl_paragraphs/src/Plugin/Field/FieldWidget/DrowlParagraphsSettingsDefaultWidget.php

7 files with changes
====================

1) modules/contrib/drowl_paragraphs/src/Plugin/Field/FieldWidget/DrowlParagraphsSettingsDefaultWidget.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/drowl_paragraphs/src/Plugin/Field/FieldType/DrowlParagraphsSettingsItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drowl_paragraphs\Plugin\Field\FieldType;

+use Drupal\Component\Utility\Html;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\FieldItemInterface;
@@ @@
     if(!empty($classes_additional)){
       $classes_additional_array = explode(' ', trim($classes_additional));
       foreach($classes_additional_array as $class){
-        $classes_additional_sanitized .= ' ' . trim(\Drupal\Component\Utility\Html::getClass(trim($class)));
+        $classes_additional_sanitized .= ' ' . trim(Html::getClass(trim($class)));
       }
     }
     $this->get('classes_additional')->setValue(trim($classes_additional_sanitized));
@@ @@
     // Sanitize ID:
     $id_attr = $this->get('id_attr')->getValue();
     if(!empty($id_attr)){
-      $this->get('id_attr')->setValue(\Drupal\Component\Utility\Html::cleanCssIdentifier(trim($id_attr)));
+      $this->get('id_attr')->setValue(Html::cleanCssIdentifier(trim($id_attr)));
     }
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/drowl_paragraphs/src/Plugin/Field/FieldFormatter/DrowlParagraphsSettingsDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\drowl_paragraphs\Plugin\Field\FieldFormatter;

+use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
             '#type' => 'container',
             '#title' => $value->getName(),
             '#attributes' => array(
-              'class' => \Drupal\Component\Utility\Html::cleanCssIdentifier($value->getName()),
+              'class' => Html::cleanCssIdentifier($value->getName()),
             ),
             '#plain_text' => $value->getValue(),
             // '#markup' => t('Name'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/drowl_paragraphs/modules/drowl_paragraphs_types/drowl_paragraphs_types.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
+use Drupal\Core\Config\ConfigManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\FileStorage;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
     $results = $query->execute();
     $bildTextParagraphs = $entityTypeStorage->loadMultiple($results);
     if (!empty($bildTextParagraphs)) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       foreach ($bildTextParagraphs as $bildTextParagraph) {
         // Update the base table, set type from "bild_text" to "image_text", keep everything else!
         $database->update($paragraphEntityTypeDefinition->getBaseTable())
@@ @@
   }

   // Delete paragraph bild_text bundle!
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
+  /** @var ConfigEntityStorage $entity_storage */
   $entity_storage = \Drupal::entityTypeManager()->getStorage('paragraphs_type');
   $configEntityBildText = $entity_storage->load('bild_text');
   if (!empty($configEntityBildText)) {
@@ @@
   $results = $query->execute();
   $paragraphs = $entityTypeStorage->loadMultiple($results);
   if (!empty($paragraphs)) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($paragraphs as $paragraph) {
       if (!$paragraph->hasField('field_paragraph_settings')) {
         \Drupal::logger('drowl_paragraphs_types')->notice('@function: No field_paragraph_settings (source) on @bundle Paragraph with ID: @id', [
@@ @@
   $installConfig = new FileStorage($installConfigDir);
   $config_record = $installConfig->read($config_name);

-  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+  /** @var ConfigManagerInterface $config_manager */
   $config_manager = \Drupal::service('config.manager');
   $type = $config_manager->getEntityTypeIdByName($config_name);
   $entityTypeManager = \Drupal::service('entity_type.manager');
@@ @@
     // The given config wasn't found in $installConfig.
     // Check if it already exists in active configuration, otherwise
     // throw an error aw we need it.
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $activeConfigFactory */
+    /** @var ConfigFactoryInterface $activeConfigFactory */
     $activeConfigFactory = \Drupal::service('config.factory');
     $existsInActiveConfig = !$activeConfigFactory->get($config_name)->isNew();
     if (!$existsInActiveConfig) {
@@ @@
     return FALSE;
   }
   // \Drupal::logger('drowl_paragraphs_types')->notice($config_name . ' | Type: ' . $type . ' | ID-Key: ' . $id_key . ' | ID: ' . $id);
-
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
+  /** @var ConfigEntityStorage $entity_storage */
   $entity_storage = \Drupal::entityTypeManager()->getStorage($type);
   $configEntity = $entity_storage->load($id);
   if ($configEntity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/drowl_paragraphs/drowl_paragraphs.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Component\Serialization\Json;
+use Drupal\paragraphs\Entity\Paragraph;
 /**
  * @file
  * DROWL paragraphs enhancements.
@@ @@
           }
           if (!empty($animations)) {
             $variables['attributes']->addClass('has-animation');
-            $variables['attributes']->setAttribute('data-animations', \Drupal\Component\Serialization\Json::encode($animations));
+            $variables['attributes']->setAttribute('data-animations', Json::encode($animations));
           }
           if (!empty($ps['layout_min_height'])) {
             $variables['attributes']->addClass('min-height-' . $ps['layout_min_height']);
@@ @@

     // Indicate subparagraph and type of parent paragraph for twig:
     $parentEntity = $paragraph->getParentEntity();
-    if($parentEntity instanceof \Drupal\paragraphs\Entity\Paragraph){
+    if($parentEntity instanceof Paragraph){
       $bundle = $parentEntity->bundle();
       $variables['attributes']->addClass('is-subparagraph');
       $variables['is_subparagraph'] = TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/drowl_paragraphs/drowl_paragraphs.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Install, update and uninstall functions for the drowl_paragraphs module.
@@ @@
   $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');

   foreach ($entity_field_map as $entity_type_id => $field_map) {
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $entity_storage */
+    /** @var SqlContentEntityStorage $entity_storage */
     $entity_storage = $entity_type_manager->getStorage($entity_type_id);

     // Only SQL storage based entities are supported / throw known exception.
@@ @@

     $entity_type = $entity_type_manager->getDefinition($entity_type_id);
     $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
-    /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
     // Only need field storage definitions of address fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition */
+    /** @var FieldStorageDefinitionInterface $field_storage_definition */
     foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
       $field_name = $field_storage_definition->getName();
       try {
@@ @@
   $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');

   foreach ($entity_field_map as $entity_type_id => $field_map) {
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $entity_storage */
+    /** @var SqlContentEntityStorage $entity_storage */
     $entity_storage = $entity_type_manager->getStorage($entity_type_id);
     $entity_type = $entity_type_manager->getDefinition($entity_type_id);
     $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
-    /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
     // Only need field storage definitions of address fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition */
+    /** @var FieldStorageDefinitionInterface $field_storage_definition */
     foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
       $field_name = $field_storage_definition->getName();
       $tables = [];
@@ @@
   $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');

   foreach ($entity_field_map as $entity_type_id => $field_map) {
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $entity_storage */
+    /** @var SqlContentEntityStorage $entity_storage */
     $entity_storage = $entity_type_manager->getStorage($entity_type_id);

     // Only SQL storage based entities are supported / throw known exception.
@@ @@

     $entity_type = $entity_type_manager->getDefinition($entity_type_id);
     $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
-    /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
     // Only need field storage definitions of address fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition */
+    /** @var FieldStorageDefinitionInterface $field_storage_definition */
     foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
       $field_name = $field_storage_definition->getName();
       try {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/drowl_paragraphs/drowl_paragraphs.api.php:0

    ---------- begin diff ----------
@@ @@
 #Warning: Strings contain different line endings!
-<?php
-
-
-// ---- Other hook / manipulation examples
+<?php
+
+use Drupal\Core\Form\FormStateInterface;
+// ---- Other hook / manipulation examples
 /**
  * Implements hook_field_widget_form_alter.
- */
-function MYMODULE_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context){
+ */
+function MYMODULE_field_widget_form_alter(&$element, FormStateInterface $form_state, $context){
   // Add custom styles:
   if (get_class($context['widget']) === 'Drupal\drowl_paragraphs\Plugin\Field\FieldWidget\DrowlParagraphsSettingsDefaultWidget' && !empty($element['style']['style_boxstyle']['style_boxstyle'])) {
     $element['style']['style_boxstyle']['style_boxstyle']['#options']['drowl_customer_XYZ'] = 'Customer: XYZ';
   }
-}
+}
    ----------- end diff -----------

 [OK] 7 files have been changed by Rector                                       

