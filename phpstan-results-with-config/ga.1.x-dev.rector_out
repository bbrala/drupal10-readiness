modules/contrib/ga/ga.install
modules/contrib/ga/ga.module
modules/contrib/ga/modules/ga_tokens/src/EventSubscriber/AnalyticsSubscriber.php
modules/contrib/ga/modules/ga_tokens/src/Form/GlobalForm.php
modules/contrib/ga/src/AnalyticsCommand/Create.php
modules/contrib/ga/src/AnalyticsCommand/Dimension.php
modules/contrib/ga/src/AnalyticsCommand/DrupalSettingCommandsInterface.php
modules/contrib/ga/src/AnalyticsCommand/DrupalSettingCommandsTrait.php
modules/contrib/ga/src/AnalyticsCommand/Event.php
modules/contrib/ga/src/AnalyticsCommand/Exception.php
modules/contrib/ga/src/AnalyticsCommand/Generic.php
modules/contrib/ga/src/AnalyticsCommand/Group.php
modules/contrib/ga/src/AnalyticsCommand/GroupInterface.php
modules/contrib/ga/src/AnalyticsCommand/Linker/AutoLink.php
modules/contrib/ga/src/AnalyticsCommand/Metric.php
modules/contrib/ga/src/AnalyticsCommand/Pageview.php
modules/contrib/ga/src/AnalyticsCommand/RequirePlugin.php
modules/contrib/ga/src/AnalyticsCommand/Send.php
modules/contrib/ga/src/AnalyticsCommand/Set.php
modules/contrib/ga/src/AnalyticsCommand/Timing.php
modules/contrib/ga/src/AnalyticsEvents.php
modules/contrib/ga/src/CommandRegistryService.php
modules/contrib/ga/src/Event/CollectEvent.php
modules/contrib/ga/src/EventSubscriber/CspSubscriber.php
modules/contrib/ga/src/EventSubscriber/DefaultCommandSubscriber.php
modules/contrib/ga/src/Form/AdminSettingsForm.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/CreateTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/DimensionTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/EventTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/GenericTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/Linker/AutoLinkTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/MetricTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/PageviewTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/RequirePluginTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/SendTest.php
modules/contrib/ga/tests/src/Unit/AnalyticsCommand/SetTest.php
modules/contrib/ga/tests/src/Unit/EventSubscriber/CspSubscriberTest.php

12 files with changes
=====================

1) modules/contrib/ga/tests/src/Unit/EventSubscriber/CspSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ga\Unit\EventSubscriber;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\csp\Csp;
 use Drupal\csp\CspEvents;
@@ @@
   /**
    * The response object.
    *
-   * @var \Drupal\Core\Render\HtmlResponse|\PHPUnit\Framework\MockObject\MockObject
+   * @var HtmlResponse|MockObject
    */
   private $response;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     if (!class_exists(Csp::class)) {
@@ @@
       $this->markTestSkipped('Content Security Policy module is not available.');
     }

-    $this->response = $this->getMockBuilder(HtmlResponse::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->response = $this->createMock(HtmlResponse::class);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/SendTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Test specifying an invalid hit type.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Invalid hit type specified.
    */
   public function testInvalidHitType() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Invalid hit type specified.');
     $command = new Send('badtype');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/MetricTest.php:43

    ---------- begin diff ----------
@@ @@

   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric('index', 123);
   }

   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(4.2, 123);
   }

   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(420, 123);
   }

   /**
    * Test a string value.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
     new Metric(42, 'value');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/EventTest.php:82

    ---------- begin diff ----------
@@ @@
   /**
    * Test with a float event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithFloatValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, 1.5);
   }

@@ @@
   /**
    * Test with a negative integer event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithNegativeIntegerValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, -1);
   }

@@ @@
   /**
    * Test with a string event value.
    *
-   * @expectedException \InvalidArgumentException
    *
-   * @expectedExceptionMessage Event value must be a positive integer
    */
   public function testWithStringValue() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('Event value must be a positive integer');
     $command = new Event('category', 'action', NULL, '1');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ga/tests/src/Unit/AnalyticsCommand/DimensionTest.php:30

    ---------- begin diff ----------
@@ @@

   /**
    * Test an invalid index of type string.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testStringIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension('index', 'value');
   }

   /**
    * Test an invalid index of type float.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testFloatIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(4.2, 'value');
   }

   /**
    * Test an index greater than the valid range.
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testOutOfBoundsIndex() {
+    $this->expectException(\InvalidArgumentException::class);
     new Dimension(420, 'value');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ga/src/EventSubscriber/DefaultCommandSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ga\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The ga Command Registry service.
    *
-   * @var \Drupal\ga\CommandRegistryService
+   * @var CommandRegistryService
    */
   protected $commandRegistry;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * User Entity Storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * DefaultCommandSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\ga\CommandRegistryService $commandRegistry
+   * @param CommandRegistryService $commandRegistry
    *   The command registry service.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(
@@ @@
   /**
    * Add commands registered with the command registry service.
    *
-   * @param \Drupal\ga\Event\CollectEvent $event
+   * @param CollectEvent $event
    *   The AnalyticsEvents::COLLECT event.
    */
   public function onCollectRegisteredCommands(CollectEvent $event) {
@@ @@
   /**
    * Add default events according to configuration.
    *
-   * @param \Drupal\ga\Event\CollectEvent $event
+   * @param CollectEvent $event
    *   The AnalyticsEvents::COLLECT event.
    */
   public function onCollectDefaultCommands(CollectEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/ga/src/Event/CollectEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ga\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class CollectEvent.
@@ @@
   /**
    * The registered analytics commands.
    *
-   * @var \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface[]
+   * @var DrupalSettingCommandsInterface[]
    */
   protected $commands;

@@ @@
   /**
    * Add a command.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   An analytics command.
    */
   public function addCommand(DrupalSettingCommandsInterface $command) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ga/src/CommandRegistryService.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The registered analytics commands.
    *
-   * @var \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface[]
+   * @var DrupalSettingCommandsInterface[]
    */
   protected $commands;

@@ @@
   /**
    * Add a command to the registry.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   An analytics command.
    *
    * @deprecated Use addCommand() instead.
@@ @@
   /**
    * Add a command to the registry.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   An analytics command.
    */
   public function addCommand(DrupalSettingCommandsInterface $command) {
@@ @@
   /**
    * Get all commands registered.
    *
-   * @return \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface[]
+   * @return DrupalSettingCommandsInterface[]
    *   The array of registered commands.
    */
   public function getCommands() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/ga/src/AnalyticsCommand/Group.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Add a command to the group.
    *
-   * @param \Drupal\ga\AnalyticsCommand\DrupalSettingCommandsInterface $command
+   * @param DrupalSettingCommandsInterface $command
    *   A command.
    */
   public function addCommand(DrupalSettingCommandsInterface $command) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/ga/modules/ga_tokens/src/Form/GlobalForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Module Handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * GlobalForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The Module Handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $moduleHandler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/ga/modules/ga_tokens/src/EventSubscriber/AnalyticsSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * DefaultCommandSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The Token service.
    */
   public function __construct(
@@ @@
   /**
    * Add global dimensions and metrics.
    *
-   * @param \Drupal\ga\Event\CollectEvent $event
+   * @param CollectEvent $event
    *   The AnalyticsEvents::COLLECT event.
    */
   public function onCollectGlobalProperties(CollectEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/ga/ga.module:17

    ---------- begin diff ----------
@@ @@
     return;
   }

-  /** @var \Drupal\ga\Event\CollectEvent $event */
+  /** @var CollectEvent $event */
   $event = \Drupal::service('event_dispatcher')
     ->dispatch(AnalyticsEvents::COLLECT, new CollectEvent());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 12 files have been changed by Rector                                      

