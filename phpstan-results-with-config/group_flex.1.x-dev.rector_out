modules/contrib/group_flex/group_flex.api.php
modules/contrib/group_flex/group_flex.module
modules/contrib/group_flex/modules/group_flex_content/group_flex_content.install
modules/contrib/group_flex/modules/group_flex_content/group_flex_content.module
modules/contrib/group_flex/modules/group_flex_content/src/GroupContentTypeSaver.php
modules/contrib/group_flex/modules/group_flex_content/src/Plugin/GroupContentAccessControlHandler.php
modules/contrib/group_flex/modules/group_flex_content/src/Plugin/GroupFlexContentPermissionProvider.php
modules/contrib/group_flex/modules/group_flex_content/src/QueryAccess/EntityQueryAlter.php
modules/contrib/group_flex/modules/group_flex_content/tests/src/Functional/GroupFlexContentTest.php
modules/contrib/group_flex/src/Annotation/GroupJoiningMethod.php
modules/contrib/group_flex/src/Annotation/GroupVisibility.php
modules/contrib/group_flex/src/Entity/Form/GroupForm.php
modules/contrib/group_flex/src/Entity/Form/GroupTypeForm.php
modules/contrib/group_flex/src/GroupFlexGroup.php
modules/contrib/group_flex/src/GroupFlexGroupSaver.php
modules/contrib/group_flex/src/GroupFlexGroupType.php
modules/contrib/group_flex/src/GroupFlexGroupTypeSaver.php
modules/contrib/group_flex/src/Plugin/GroupFlexPluginCollection.php
modules/contrib/group_flex/src/Plugin/GroupJoiningMethod/GroupMembershipInvite.php
modules/contrib/group_flex/src/Plugin/GroupJoiningMethod/GroupMembershipRequest.php
modules/contrib/group_flex/src/Plugin/GroupJoiningMethod/JoinButton.php
modules/contrib/group_flex/src/Plugin/GroupJoiningMethodBase.php
modules/contrib/group_flex/src/Plugin/GroupJoiningMethodInterface.php
modules/contrib/group_flex/src/Plugin/GroupJoiningMethodManager.php
modules/contrib/group_flex/src/Plugin/GroupVisibility/FlexVisibility.php
modules/contrib/group_flex/src/Plugin/GroupVisibility/PrivateVisibility.php
modules/contrib/group_flex/src/Plugin/GroupVisibility/PublicVisibility.php
modules/contrib/group_flex/src/Plugin/GroupVisibilityBase.php
modules/contrib/group_flex/src/Plugin/GroupVisibilityInterface.php
modules/contrib/group_flex/src/Plugin/GroupVisibilityManager.php
modules/contrib/group_flex/tests/modules/group_flex_test/src/Plugin/GroupJoiningMethod/FakeButton.php
modules/contrib/group_flex/tests/src/Functional/GroupFlexTest.php

22 files with changes
=====================

1) modules/contrib/group_flex/tests/src/Functional/GroupFlexTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\group_flex\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\Group;
+use Drupal\user\Entity\User;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\group_flex\Plugin\GroupVisibilityInterface;
 use Drupal\Tests\group\Functional\GroupBrowserTestBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group we will use to test methods on.
    *
-   * @var \Drupal\group\Entity\Group
+   * @var Group
    */
   protected $group;

@@ @@
   /**
    * The normal user we will use.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $account;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->account = $this->createUser([
       'administer group',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/group_flex/src/Plugin/GroupVisibilityManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Get all plugins.
    *
-   * @return \Drupal\group_flex\Plugin\GroupFlexPluginCollection
+   * @return GroupFlexPluginCollection
    *   The plugin collection.
    */
   public function getAll(): GroupFlexPluginCollection {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/group_flex/src/Plugin/GroupVisibilityInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Plugin;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ @@
    * This can be used to save the group specific permissions
    * when this visibility option is enabled.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group.
    *
    * @return array
@@ @@
    * This can be used to remove the group specific permissions
    * when this visibility option is enabled.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group.
    *
    * @return array
@@ @@
   /**
    * Enable the visibility on the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function enableGroupType(GroupTypeInterface $groupType);

@@ @@
   /**
    * Disable the visibility on the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function disableGroupType(GroupTypeInterface $groupType);

@@ @@
    *
    * @param array $mappedPerm
    *   The Mapped permissions, keyed by group type role id.
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function saveMappedPerm(array $mappedPerm, GroupTypeInterface $groupType);

@@ @@
   /**
    * The group label for this visibility.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
    * @return string
@@ @@
   /**
    * The description for the group visibility.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/group_flex/src/Plugin/GroupVisibilityBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Plugin;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\GroupRoleInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\group\Entity\GroupInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;

@@ @@
   public function saveMappedPerm(array $mappedPerm, GroupTypeInterface $groupType) {
     foreach ($mappedPerm as $roleName => $permissions) {
       $groupRoleStorage = $this->entityTypeManager->getStorage('group_role');
-      /** @var \Drupal\group\Entity\GroupRoleInterface $groupRole */
+      /** @var GroupRoleInterface $groupRole */
       $groupRole = $groupRoleStorage->load($roleName);

       if ($groupRole && !empty($permissions)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/group_flex/src/Plugin/GroupJoiningMethodManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Get all plugins.
    *
-   * @return \Drupal\group_flex\Plugin\GroupFlexPluginCollection
+   * @return GroupFlexPluginCollection
    *   The plugin collection.
    */
   public function getAll(): GroupFlexPluginCollection {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/group_flex/src/Plugin/GroupJoiningMethodInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Plugin;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ @@
    *
    * @param array $mappedPerm
    *   The Mapped permissions, keyed by group type role id.
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function saveMappedPerm(array $mappedPerm, GroupTypeInterface $groupType);

@@ @@
   /**
    * Enable the joining method on the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function enableGroupType(GroupTypeInterface $groupType);

@@ @@
   /**
    * Disable the joining method on the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function disableGroupType(GroupTypeInterface $groupType);

@@ @@
    * This can be used to save the group specific permissions
    * when this joining method is enabled.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group.
    *
    * @return array
@@ @@
    * This can be used to remove the group specific permissions
    * when this joining method is enabled.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/group_flex/src/Plugin/GroupJoiningMethodBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Plugin;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
+use Drupal\group\Entity\GroupRoleInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;

@@ @@
   /**
    * The group content enabler plugin.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   public $groupContentEnabler;

@@ @@
   public function saveMappedPerm(array $mappedPerm, GroupTypeInterface $groupType) {
     foreach ($mappedPerm as $roleName => $permissions) {
       $groupRoleStorage = $this->entityTypeManager->getStorage('group_role');
-      /** @var \Drupal\group\Entity\GroupRoleInterface $groupRole */
+      /** @var GroupRoleInterface $groupRole */
       $groupRole = $groupRoleStorage->load($roleName);

       if ($groupRole && !empty($permissions)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/group_flex/src/GroupFlexGroupTypeSaver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\group_flex\Plugin\GroupVisibilityBase;
+use Drupal\group_flex\Plugin\GroupJoiningMethodBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\group_flex\Plugin\GroupJoiningMethodManager;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group visibility manager.
    *
-   * @var \Drupal\group_flex\Plugin\GroupVisibilityManager
+   * @var GroupVisibilityManager
    */
   private $visibilityManager;

@@ @@
   /**
    * The group joining method manager.
    *
-   * @var \Drupal\group_flex\Plugin\GroupJoiningMethodManager
+   * @var GroupJoiningMethodManager
    */
   private $joiningMethodManager;

@@ @@
   /**
    * Constructs a new GroupFlexGroupTypeSaver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\group_flex\Plugin\GroupVisibilityManager $visibilityManager
+   * @param GroupVisibilityManager $visibilityManager
    *   The group visibility manager.
-   * @param \Drupal\group_flex\Plugin\GroupJoiningMethodManager $joiningMethodManager
+   * @param GroupJoiningMethodManager $joiningMethodManager
    *   The group joining method manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, GroupVisibilityManager $visibilityManager, GroupJoiningMethodManager $joiningMethodManager) {
@@ @@
   /**
    * Save the group flex settings.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(GroupTypeInterface $groupType) {
     $this->saveGroupVisibility($groupType);
@@ @@
   /**
    * Save the group visibility settings.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function saveGroupVisibility(GroupTypeInterface $groupType) {
     $visibility = $groupType->getThirdPartySetting('group_flex', 'group_type_visibility');
-    /** @var \Drupal\group_flex\Plugin\GroupVisibilityBase $pluginInstance */
+    /** @var GroupVisibilityBase $pluginInstance */
     $groupVisibilities = $this->getAllGroupVisibility();
     foreach ($groupVisibilities as $id => $pluginInstance) {
       if ($visibility !== $id) {
@@ @@
   /**
    * Saves the joining methods for the given group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function saveJoiningMethods(GroupTypeInterface $groupType) {
     $setJoiningMethods = $groupType->getThirdPartySetting('group_flex', 'group_type_joining_method', []);
-    /** @var \Drupal\group_flex\Plugin\GroupJoiningMethodBase $pluginInstance */
+    /** @var GroupJoiningMethodBase $pluginInstance */
     $joiningMethods = $this->getAllJoiningMethods();
     foreach ($joiningMethods as $id => $pluginInstance) {
       $status = $setJoiningMethods[$id] ?? 0;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/group_flex/src/GroupFlexGroupType.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group joining method manager.
    *
-   * @var \Drupal\group_flex\Plugin\GroupJoiningMethodManager
+   * @var GroupJoiningMethodManager
    */
   private $joiningMethodManager;

@@ @@
   /**
    * Constructs a new GroupFlexGroupType.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\group_flex\Plugin\GroupJoiningMethodManager $joiningMethodManager
+   * @param GroupJoiningMethodManager $joiningMethodManager
    *   The group joining method manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, GroupJoiningMethodManager $joiningMethodManager) {
@@ @@
   /**
    * Get whether flex is enabled for the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
    * @return bool
@@ @@
   /**
    * Get the group type visibility.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
    * @return string|null
@@ @@
   /**
    * Returns TRUE if the group type visibility can be changed on group level.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
    * @return bool
@@ @@
   /**
    * Get the value from the group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
    * @return array
@@ @@
   /**
    * Whether the creator can override the joining method on the group level.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
    * @return bool
@@ @@
   /**
    * Get the enabled joining method plugins for given group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The Group Type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/group_flex/src/GroupFlexGroupSaver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex;

+use Drupal\group_flex\Plugin\GroupVisibilityBase;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\group_flex\Plugin\GroupJoiningMethodBase;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Entity\GroupInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\group_permissions\GroupPermissionsManager definition.
    *
-   * @var \Drupal\group_permissions\GroupPermissionsManager
+   * @var GroupPermissionsManager
    */
   protected $groupPermManager;

@@ @@
   /**
    * The group visibility manager.
    *
-   * @var \Drupal\group_flex\Plugin\GroupVisibilityManager
+   * @var GroupVisibilityManager
    */
   private $visibilityManager;

@@ @@
   /**
    * The group joining method manager.
    *
-   * @var \Drupal\group_flex\Plugin\GroupJoiningMethodManager
+   * @var GroupJoiningMethodManager
    */
   private $joiningMethodManager;

@@ @@
   /**
    * The group flex group object.
    *
-   * @var \Drupal\group_flex\GroupFlexGroup
+   * @var GroupFlexGroup
    */
   private $groupFlex;

@@ @@
   /**
    * Constructs a new GroupFlexGroupSaver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\group_permissions\GroupPermissionsManager $groupPermManager
+   * @param GroupPermissionsManager $groupPermManager
    *   The group permissions manager.
-   * @param \Drupal\group_flex\Plugin\GroupVisibilityManager $visibilityManager
+   * @param GroupVisibilityManager $visibilityManager
    *   The group visibility manager.
-   * @param \Drupal\group_flex\Plugin\GroupJoiningMethodManager $joiningMethodManager
+   * @param GroupJoiningMethodManager $joiningMethodManager
    *   The group joining method manager.
-   * @param \Drupal\group_flex\GroupFlexGroup $groupFlex
+   * @param GroupFlexGroup $groupFlex
    *   The group flex.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, GroupPermissionsManager $groupPermManager, GroupVisibilityManager $visibilityManager, GroupJoiningMethodManager $joiningMethodManager, GroupFlexGroup $groupFlex) {
@@ @@
   /**
    * Save the group visibility.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to save.
    * @param string $groupVisibility
    *   The desired visibility of the group.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function saveGroupVisibility(GroupInterface $group, string $groupVisibility) {
     $groupPermission = $this->getGroupPermissionObject($group);
@@ @@
       return;
     }

-    /** @var \Drupal\group_flex\Plugin\GroupVisibilityBase $pluginInstance */
+    /** @var GroupVisibilityBase $pluginInstance */
     foreach ($this->getAllGroupVisibility() as $id => $pluginInstance) {
       // Retrieve the current group visibility plugin.
       if ($groupVisibility !== $id) {
@@ @@
   /**
    * Save the group joining methods.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to save.
    * @param array $joiningMethods
    *   The desired joining methods of the group.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    */
   public function saveGroupJoiningMethods(GroupInterface $group, array $joiningMethods) {
     $groupPermission = $this->getGroupPermissionObject($group);
@@ @@
       return;
     }

-    /** @var \Drupal\group_flex\Plugin\GroupJoiningMethodBase $pluginInstance */
+    /** @var GroupJoiningMethodBase $pluginInstance */
     foreach ($this->getAllJoiningMethods() as $id => $pluginInstance) {
       // Checks if the method is enabled.
       $isEnabled = in_array($id, $joiningMethods, TRUE) && $joiningMethods[$id] === $id;
@@ @@
   /**
    * Get the default permissions for the given group type.
    *
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *   The group type to return the permissions for.
    *
    * @return array
@@ @@
   /**
    * Get the groupPermission object, will create a new one if needed.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to get the group permission object for.
    *
-   * @return \Drupal\group_permissions\Entity\GroupPermission|null
+   * @return GroupPermission|null
    *   The (new) group permission object, returns NULL if something went wrong.
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
   private function getGroupPermissionObject(GroupInterface $group): ?GroupPermission {
-    /** @var \Drupal\group_permissions\Entity\GroupPermission $groupPermission */
+    /** @var GroupPermission $groupPermission */
     $groupPermission = $this->groupPermManager->getGroupPermission($group);

     if ($groupPermission === NULL) {
@@ @@
   /**
    * Add role permissions to the group.
    *
-   * @param \Drupal\group_permissions\Entity\GroupPermission $groupPermission
+   * @param GroupPermission $groupPermission
    *   The group permission object to add the permissions to.
    * @param string $role
    *   The role to add the permissions to.
@@ @@
    * @param array $rolePermissions
    *   The permissions to add to the role.
    *
-   * @return \Drupal\group_permissions\Entity\GroupPermission
+   * @return GroupPermission
    *   The group permission object with the updated permissions.
    */
   private function addRolePermissionsToGroup(GroupPermission $groupPermission, string $role, array $rolePermissions): GroupPermission {
@@ @@
   /**
    * Remove role permissions from the group.
    *
-   * @param \Drupal\group_permissions\Entity\GroupPermission $groupPermission
+   * @param GroupPermission $groupPermission
    *   The group permission object to set the permissions to.
    * @param string $role
    *   The role to remove the permissions from.
@@ @@
    * @param array $rolePermissions
    *   The permissions to remove from the role.
    *
-   * @return \Drupal\group_permissions\Entity\GroupPermission
+   * @return GroupPermission
    *   The group permission object with the updated permissions.
    */
   private function removeRolePermissionsFromGroup(GroupPermission $groupPermission, string $role, array $rolePermissions): GroupPermission {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/group_flex/src/GroupFlexGroup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex;

+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group_flex\Plugin\GroupVisibilityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The permissions manager.
    *
-   * @var \Drupal\group_permissions\GroupPermissionsManager
+   * @var GroupPermissionsManager
    */
   protected $groupPermManager;

@@ @@
   /**
    * The flex group type helper.
    *
-   * @var \Drupal\group_flex\GroupFlexGroupType
+   * @var GroupFlexGroupType
    */
   protected $flexGroupType;

@@ @@
   /**
    * Constructs a new GroupFlexGroup.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\group_permissions\GroupPermissionsManager $groupPermManager
+   * @param GroupPermissionsManager $groupPermManager
    *   The group permissions manager.
-   * @param \Drupal\group_flex\GroupFlexGroupType $flexGroupType
+   * @param GroupFlexGroupType $flexGroupType
    *   The group type flex.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, GroupPermissionsManager $groupPermManager, GroupFlexGroupType $flexGroupType) {
@@ @@
   /**
    * Get the group visibility for a given group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to return the default value for.
    *
    * @return string
    *   The group visibility.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getGroupVisibility(GroupInterface $group): string {
     // Retrieve the default group type permission.
@@ @@
   /**
    * Retrieve the default joining methods for a given group.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   The group to retrieve the joining methods for.
    *
    * @return array
    *   The default joining methods for the given group.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getDefaultJoiningMethods(GroupInterface $group): array {
     $defaultMethods = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/group_flex/src/Entity/Form/GroupTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Entity\Form;

+use Drupal\group_flex\Plugin\GroupJoiningMethodBase;
+use Drupal\group_flex\Plugin\GroupVisibilityBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Url;
 use Drupal\group\Entity\Form\GroupTypeForm as GroupTypeFormBase;
@@ @@
   /**
    * The Group Type Saver service to save the form state.
    *
-   * @var \Drupal\group_flex\GroupFlexGroupTypeSaver
+   * @var GroupFlexGroupTypeSaver
    */
   private $groupTypeSaver;

@@ @@
   /**
    * The Group Type service to retrieve the values.
    *
-   * @var \Drupal\group_flex\GroupFlexGroupType
+   * @var GroupFlexGroupType
    */
   private $flexGroupType;

@@ @@
   /**
    * Constructs a new GroupTypeForm.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager service.
-   * @param \Drupal\group_flex\GroupFlexGroupTypeSaver $groupTypeSaver
+   * @param GroupFlexGroupTypeSaver $groupTypeSaver
    *   The group type saver service.
-   * @param \Drupal\group_flex\GroupFlexGroupType $flexGroupType
+   * @param GroupFlexGroupType $flexGroupType
    *   The group type service.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, GroupFlexGroupTypeSaver $groupTypeSaver, GroupFlexGroupType $flexGroupType) {
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state): array {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $type */
+    /** @var GroupTypeInterface $type */
     $form = parent::form($form, $form_state);
     $type = $this->entity;

@@ @@
       '#disabled' => FALSE,
     ];
     // Availability of join method may depend on value of the group visibility.
-    /** @var \Drupal\group_flex\Plugin\GroupJoiningMethodBase $joiningMethod */
+    /** @var GroupJoiningMethodBase $joiningMethod */
     foreach ($this->groupTypeSaver->getAllJoiningMethods() as $id => $joiningMethod) {
       $enabledVisOptions = $joiningMethod->getVisibilityOptions();
       if (!empty($enabledVisOptions)) {
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\group\Entity\GroupTypeInterface $type */
+    /** @var GroupTypeInterface $type */
     parent::save($form, $form_state);
     $type = $this->entity;

@@ @@

     }

-    /** @var \Drupal\group_flex\Plugin\GroupVisibilityBase|\Drupal\group_flex\Plugin\GroupJoiningMethodBase $option */
+    /** @var GroupVisibilityBase|GroupJoiningMethodBase $option */
     foreach ($optionProvider as $id => $option) {
       $label = $option->getLabel();
       $options[$id] = $label;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/group_flex/src/Entity/Form/GroupForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Entity\Form;

+use Drupal\group_flex\GroupFlexGroupType;
+use Drupal\group_flex\GroupFlexGroup;
+use Drupal\group_flex\Plugin\GroupVisibilityManager;
+use Drupal\group_flex\GroupFlexGroupSaver;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group_flex\Plugin\GroupJoiningMethodBase;
 use Drupal\Core\TempStore\TempStoreException;
 use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\group\Entity\Form\GroupForm as GroupFormBase;
@@ @@
   /**
    * The group type flex service.
    *
-   * @var \Drupal\group_flex\GroupFlexGroupType
+   * @var GroupFlexGroupType
    */
   private $groupTypeFlex;

@@ @@
   /**
    * The group flex service.
    *
-   * @var \Drupal\group_flex\GroupFlexGroup
+   * @var GroupFlexGroup
    */
   private $groupFlex;

@@ @@
   /**
    * The group visibility manager.
    *
-   * @var \Drupal\group_flex\Plugin\GroupVisibilityManager
+   * @var GroupVisibilityManager
    */
   private $visibilityManager;

@@ @@
   /**
    * The flex group type saver.
    *
-   * @var \Drupal\group_flex\GroupFlexGroupSaver
+   * @var GroupFlexGroupSaver
    */
   private $groupFlexSaver;

@@ @@
   public function form(array $form, FormStateInterface $form_state): array {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\group\Entity\GroupInterface $group */
+    /** @var GroupInterface $group */
     $group = $this->getEntity();

-    /** @var \Drupal\group\Entity\GroupTypeInterface $groupType */
+    /** @var GroupTypeInterface $groupType */
     $groupType = $this->getEntity()->getGroupType();

     // The group flex logic is enabled for this group type.
@@ @@

         // Availability of join method depends on the group visibility.
         if (isset($visibilityOptions)) {
-          /** @var \Drupal\group_flex\Plugin\GroupJoiningMethodBase $joiningMethod */
+          /** @var GroupJoiningMethodBase $joiningMethod */
           foreach ($enabledMethods as $id => $joiningMethod) {
             $allowedVisOptions = $joiningMethod->getVisibilityOptions();
             if (!empty($allowedVisOptions)) {
@@ @@
   public function save(array $form, FormStateInterface $form_state): int {
     $return = parent::save($form, $form_state);

-    /** @var \Drupal\group\Entity\GroupInterface $group */
+    /** @var GroupInterface $group */
     $group = $this->entity;
     $groupType = $group->getGroupType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/group_flex/src/Annotation/GroupVisibility.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


15) modules/contrib/group_flex/src/Annotation/GroupJoiningMethod.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


16) modules/contrib/group_flex/modules/group_flex_content/tests/src/Functional/GroupFlexContentTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\group_flex_content\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\Group;
+use Drupal\user\Entity\User;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\group_flex\Plugin\GroupVisibilityInterface;
 use Drupal\Tests\group\Functional\GroupBrowserTestBase;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The group we will use to test methods on.
    *
-   * @var \Drupal\group\Entity\Group
+   * @var Group
    */
   protected $group;

@@ @@
   /**
    * The normal user we will use.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $account;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->account = $this->createUser($this->getGlobalPermissions());
     $this->group = $this->createGroup(['uid' => $this->account->id()]);
@@ @@
     $edit = [
       'title[0][value]' => 'Anonymous node',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create an "outsider" node.
     $this->drupalGet('/group/1/content/create/group_node%3Aoutsider');
@@ @@
     $edit = [
       'title[0][value]' => 'Outsider node',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create a "member" node.
     $this->drupalGet('/group/1/content/create/group_node%3Amember');
@@ @@
     $edit = [
       'title[0][value]' => 'Member node',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create a "flexible" node with visibility "anonymous".
     $this->drupalGet('/group/1/content/create/group_node%3Aflexible');
@@ @@
       'title[0][value]' => 'Flexible anonymous node',
       'content_visibility' => 'anonymous',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create a "flexible" node with visibility "outsider".
     $this->drupalGet('/group/1/content/create/group_node%3Aflexible');
@@ @@
       'title[0][value]' => 'Flexible outsider node',
       'content_visibility' => 'outsider',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create a "flexible" node with visibility "member".
     $this->drupalGet('/group/1/content/create/group_node%3Aflexible');
@@ @@
       'title[0][value]' => 'Flexible member node',
       'content_visibility' => 'member',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Open all the pages as anonymous user.
     $this->drupalLogout();
@@ @@
     $edit = [
       'default-member[create group_node:contentvisibility entity]' => 'create group_node:contentvisibility entity',
     ];
-    $this->drupalPostForm('/admin/group/types/manage/default/permissions', $edit, 'Save permissions');
+    $this->drupalGet('/admin/group/types/manage/default/permissions');
+    $this->submitForm($edit, 'Save permissions');

     // Add a normal user to the group.
     $user2 = $this->createUser(['access content']);
@@ @@
       'default-member[use visibility anonymous for group_node:contentvisibility entity]' => '',
       'default-member[use visibility outsider for group_node:contentvisibility entity]' => '',
     ];
-    $this->drupalPostForm('/admin/group/types/manage/default/permissions', $edit, 'Save permissions');
+    $this->drupalGet('/admin/group/types/manage/default/permissions');
+    $this->submitForm($edit, 'Save permissions');

     // Log back in as the normal user.
     $this->drupalLogin($user2);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/group_flex/modules/group_flex_content/src/QueryAccess/EntityQueryAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex_content\QueryAccess;

+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * Actually alters the select query for the given entity type.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The select query.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string $operation
    *   The query operation.
@@ @@
       return [];
     }
     // Load all of the group content types that define access.
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $gct_storage */
+    /** @var GroupContentTypeStorageInterface $gct_storage */
     $gct_storage = $this->entityTypeManager->getStorage('group_content_type');
     $group_content_types = $gct_storage->loadByContentPluginId($plugin_ids);
     if (empty($group_content_types)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/group_flex/modules/group_flex_content/src/Plugin/GroupContentAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex_content\Plugin;

+use Drupal\group\Entity\Storage\GroupContentStorageInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
       return $parentAccess;
     }

-    /** @var \Drupal\group\Entity\Storage\GroupContentStorageInterface $storage */
+    /** @var GroupContentStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('group_content');
     $group_contents = $storage->loadByEntity($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/group_flex/modules/group_flex_content/src/GroupContentTypeSaver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_flex_content;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new GroupContentTypeSaver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Save the group content type settings.
    *
-   * @param \Drupal\group\Entity\GroupContentTypeInterface $groupContentType
+   * @param GroupContentTypeInterface $groupContentType
    *   The Group Content Type.
    * @param string $visibility
    *   The visibility.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(GroupContentTypeInterface $groupContentType, string $visibility) {
     if (!$visibility) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/group_flex/modules/group_flex_content/group_flex_content.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\Entity\GroupContentType;
+use Drupal\group\Entity\GroupContentTypeInterface;
+use Drupal\group_flex\GroupFlexGroupType;
+use Drupal\group\Plugin\GroupContentEnablerBase;
+use Drupal\group\Entity\Storage\GroupContentTypeStorageInterface;
+use Drupal\group_flex_content\GroupContentTypeSaver;
+use Drupal\group_flex\GroupFlexGroup;
+use Drupal\group\Entity\GroupInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\group\Entity\GroupContentInterface;
 /**
  * @file
  * Group flex content module file.
@@ @@

   $group_content_type_form = $form_state->getBuildInfo()['callback_object'];

-  /** @var \Drupal\group\Entity\GroupContentType $entity */
+  /** @var GroupContentType $entity */
   if ($entity = $group_content_type_form->getEntity()) {
     $entity_id = $entity->id();

@@ @@
  */
 function _group_flex_content_form_alter(&$form, $form_state) {
   $group_content_type_form = $form_state->getBuildInfo()['callback_object'];
-  /** @var \Drupal\group\Entity\GroupContentTypeInterface $entity */
+  /** @var GroupContentTypeInterface $entity */
   if ($entity = $group_content_type_form->getEntity()) {
     $group_type = $entity->getGroupType();

-    /** @var \Drupal\group_flex\GroupFlexGroupType $group_flex_type */
+    /** @var GroupFlexGroupType $group_flex_type */
     $group_flex_type = Drupal::service('group_flex.group_type');
     if (!$group_flex_type->hasFlexEnabled($group_type)) {
       return;
     }

-    /** @var Drupal\group\Plugin\GroupContentEnablerBase $plugin */
+    /** @var GroupContentEnablerBase $plugin */
     $plugin = $entity->getContentPlugin();
     if ($plugin->getPluginDefinition()["id"] !== 'group_node') {
       return;
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  */
 function _group_flex_content_type_submit(array $form, FormStateInterface $form_state) {
   $group_content_type_form = $form_state->getBuildInfo()['callback_object'];
-  /** @var \Drupal\group\Entity\GroupContentType $entity */
+  /** @var GroupContentType $entity */
   if ($entity = $group_content_type_form->getEntity()) {
     if ($entity->isNew()) {
       $plugin_id = $entity->getContentPluginId();
-      /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+      /** @var GroupContentTypeStorageInterface $storage */
       $storage = Drupal::entityTypeManager()->getStorage('group_content_type');
       $loaded_entity = $storage->loadByProperties([
         'content_plugin' => $plugin_id,
@@ @@
       $entity = reset($loaded_entity);

     }
-    /** @var \Drupal\group_flex_content\GroupContentTypeSaver $group_content_type_saver */
+    /** @var GroupContentTypeSaver $group_content_type_saver */
     $group_content_type_saver = Drupal::service('group_flex_content.type_saver');
     $group_content_type_saver->save($entity, $form_state->getValue('group_content_visibility'));
   }
@@ @@
 /**
  * Get all the content visibility values.
  *
- * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+ * @param FieldStorageDefinitionInterface $definition
  *   The field storage definition.
- * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+ * @param FieldableEntityInterface|null $entity
  *   The entity.
  * @param bool $cacheable
  *   Whether the values are cacheable.
@@ @@
  * Implements hook_group_content_info_alter().
  */
 function group_flex_content_group_content_info_alter(array &$definitions) {
-  /** @var Drupal\group\Plugin\GroupContentEnablerBase $definition */
+  /** @var GroupContentEnablerBase $definition */
   foreach ($definitions as $definition_id => $definition) {
     if ($definition['id'] === 'group_node') {
       $definition['handlers']['access'] = GroupContentAccessControlHandler::class;
@@ @@
   // Assume we need to hide the field until proven otherwise.
   $hide_field = TRUE;

-  /** @var \Drupal\group_flex\GroupFlexGroup $group_flex_group */
+  /** @var GroupFlexGroup $group_flex_group */
   $group_flex_group = Drupal::service('group_flex.group');

   // Scenario 1: New group content item is being created.
   if ($form_state->has('group_wizard') && $form_state->get('group_wizard_id') === 'group_entity') {
     // Check if the content_visibility needs to be added.
-    /** @var \Drupal\group\Entity\GroupInterface $group */
+    /** @var GroupInterface $group */
     $group = $form_state->get('group');
     $group_content_plugin = $form_state->get('group_content_enabler');
     $group_type = $group->getGroupType();
@@ @@
   }

   // Scenario 2: We are in the node form, let's check if group content exist.
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   if (($form_state->getFormObject() && ($entity = $form_state->getFormObject()->getEntity())) && !$entity->isNew()) {
     $plugin_id = 'group_node:' . $entity->bundle();
     // If no responsible group content types were found, we return nothing.
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = Drupal::entityTypeManager()->getStorage('group_content_type');
     $group_content_types = $storage->loadByContentPluginId($plugin_id);
     if (!empty($group_content_types)) {
@@ @@
         'entity_id' => $entity->id(),
       ]);

-      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
+      /** @var GroupContentInterface $group_content */
       foreach ($group_contents as $group_content) {
         if ($plugin = $group_content->getContentPlugin()) {
           $plugin_config = $plugin->getConfiguration();
@@ @@
  * @see \Drupal\group\Entity\Controller\GroupContentController::createForm()
  */
 function group_flex_content_content_visibility_submit($form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   $entity = $form_state->getFormObject()->getEntity();

   $content_visibility = $form_state->getValue('content_visibility', NULL);
@@ @@
   if (!$entity->isNew()) {
     $plugin_id = 'group_node:' . $entity->bundle();
     // If no responsible group content types were found, we return nothing.
-    /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $storage */
+    /** @var GroupContentTypeStorageInterface $storage */
     $storage = Drupal::entityTypeManager()->getStorage('group_content_type');
     $group_content_types = $storage->loadByContentPluginId($plugin_id);
     if (!empty($group_content_types)) {
@@ @@
         'entity_id' => $entity->id(),
       ]);

-      /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
+      /** @var GroupContentInterface $group_content */
       foreach ($group_contents as $group_content) {
         if ($plugin = $group_content->getContentPlugin()) {
           $pluginConfig = $plugin->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


21) modules/contrib/group_flex/group_flex.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\group_flex\GroupFlexGroupSaver;
+use Drupal\Core\Extension\ModuleHandler;
 /**
  * @file
  * Group flex module file.
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+ * @throws EntityStorageException
+ * @throws MissingDataException
  */
 function _group_flex_form_group_step2_form_submit(array $form, FormStateInterface $form_state) {
   $privateTempStore = Drupal::service('tempstore.private');
@@ @@
   $group_flex_settings = ['visibility', 'joining_methods'];
   foreach ($group_flex_settings as $key) {
     if ($value = $store->get("$store_id:$key")) {
-      /** @var \Drupal\group_flex\GroupFlexGroupSaver $group_flex_group_saver */
+      /** @var GroupFlexGroupSaver $group_flex_group_saver */
       $group_flex_group_saver = Drupal::service('group_flex.group_saver');
       switch ($key) {
         case 'visibility':
@@ @@
  * Implements hook_group_flex_group_joining_method_info_alter().
  */
 function group_flex_group_flex_group_joining_method_info_alter(array &$definitions) {
-  /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
+  /** @var ModuleHandler $moduleHandler */
   $moduleHandler = Drupal::service('module_handler');

   // When the grequest module is not installed remove this plugin.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/group_flex/group_flex.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleHandler;
 /**
  * @file
  * Hooks specific to the Group Flex module.
@@ @@
 function hook_group_flex_group_joining_method_info_alter(array &$definitions) {
   // When the grequest module is not installed remove this plugin.
   if (isset($definitions['group_membership_request'])) {
-    /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
+    /** @var ModuleHandler $moduleHandler */
     $moduleHandler = Drupal::service('module_handler');
     if (!$moduleHandler->moduleExists('grequest')) {
       unset($definitions['group_membership_request']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 22 files have been changed by Rector                                      

