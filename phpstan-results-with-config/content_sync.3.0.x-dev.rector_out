modules/contrib/content_sync/content_sync.admin.inc
modules/contrib/content_sync/content_sync.install
modules/contrib/content_sync/content_sync.module
modules/contrib/content_sync/includes/content_sync.theme.inc
modules/contrib/content_sync/src/Annotation/SyncNormalizerDecorator.php
modules/contrib/content_sync/src/Commands/ContentSyncCommands.php
modules/contrib/content_sync/src/Content/ContentDatabaseStorage.php
modules/contrib/content_sync/src/Content/ContentFileStorageFactory.php
modules/contrib/content_sync/src/Content/ContentStorageComparer.php
modules/contrib/content_sync/src/ContentSyncHelpManager.php
modules/contrib/content_sync/src/ContentSyncHelpManagerInterface.php
modules/contrib/content_sync/src/ContentSyncManager.php
modules/contrib/content_sync/src/ContentSyncManagerInterface.php
modules/contrib/content_sync/src/Controller/ContentController.php
modules/contrib/content_sync/src/Controller/ContentElementController.php
modules/contrib/content_sync/src/Controller/ContentHelpController.php
modules/contrib/content_sync/src/Controller/ContentLogController.php
modules/contrib/content_sync/src/DependencyResolver/ContentSyncResolverInterface.php
modules/contrib/content_sync/src/DependencyResolver/ExportQueueResolver.php
modules/contrib/content_sync/src/DependencyResolver/ImportQueueResolver.php
modules/contrib/content_sync/src/Element/ContentSyncMessage.php
modules/contrib/content_sync/src/Encoder/YamlEncoder.php
modules/contrib/content_sync/src/EventSubscriber/ContentSyncEvents.php
modules/contrib/content_sync/src/Exporter/ContentExporter.php
modules/contrib/content_sync/src/Exporter/ContentExporterInterface.php
modules/contrib/content_sync/src/Form/ContentExportForm.php
modules/contrib/content_sync/src/Form/ContentExportMultiple.php
modules/contrib/content_sync/src/Form/ContentExportTrait.php
modules/contrib/content_sync/src/Form/ContentImportForm.php
modules/contrib/content_sync/src/Form/ContentImportTrait.php
modules/contrib/content_sync/src/Form/ContentLogFilterForm.php
modules/contrib/content_sync/src/Form/ContentSettingsForm.php
modules/contrib/content_sync/src/Form/ContentSingleExportForm.php
modules/contrib/content_sync/src/Form/ContentSingleImportForm.php
modules/contrib/content_sync/src/Form/ContentSync.php
modules/contrib/content_sync/src/Importer/ContentImporter.php
modules/contrib/content_sync/src/Importer/ContentImporterInterface.php
modules/contrib/content_sync/src/Logger/ContentSyncLog.php
modules/contrib/content_sync/src/Normalizer/ContentEntityNormalizer.php
modules/contrib/content_sync/src/Normalizer/EntityReferenceFieldItemNormalizer.php
modules/contrib/content_sync/src/Normalizer/FileEntityNormalizer.php
modules/contrib/content_sync/src/Normalizer/ImageItemNormalizer.php
modules/contrib/content_sync/src/Normalizer/LinkItemNormalizer.php
modules/contrib/content_sync/src/Normalizer/ParagraphEntityNormalizer.php
modules/contrib/content_sync/src/Normalizer/PathAliasEntityNormalizer.php
modules/contrib/content_sync/src/Normalizer/TextItemNormalizer.php
modules/contrib/content_sync/src/Normalizer/TimestampItemNormalizer.php
modules/contrib/content_sync/src/Normalizer/UserEntityNormalizer.php
modules/contrib/content_sync/src/Plugin/Action/ExportNodes.php
modules/contrib/content_sync/src/Plugin/SyncNormalizerDecorator/IdsCleaner.php
modules/contrib/content_sync/src/Plugin/SyncNormalizerDecoratorBase.php
modules/contrib/content_sync/src/Plugin/SyncNormalizerDecoratorInterface.php
modules/contrib/content_sync/src/Plugin/SyncNormalizerDecoratorManager.php
modules/contrib/content_sync/src/Plugin/SyncNormalizerDecoratorTrait.php
modules/contrib/content_sync/src/Utility/ContentSyncDialogHelper.php

38 files with changes
=====================

1) modules/contrib/content_sync/src/Utility/ContentSyncDialogHelper.php:63

    ---------- begin diff ----------
@@ @@
     // @see \Drupal\content_sync\Element\content_syncHtmlEditor::preRendercontent_syncHtmlEditor
     if (\Drupal::moduleHandler()->moduleExists('imce') && Imce::access()) {
       $element['#attached']['library'][] = 'imce/drupal.imce.ckeditor';
-      $element['#attached']['drupalSettings']['content_sync']['html_editor']['ImceImageIcon'] = file_create_url(drupal_get_path('module', 'imce') . '/js/plugins/ckeditor/icons/imceimage.png');
+      $element['#attached']['drupalSettings']['content_sync']['html_editor']['ImceImageIcon'] = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('imce') . '/js/plugins/ckeditor/icons/imceimage.png');
     }
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/content_sync/src/Plugin/SyncNormalizerDecoratorManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/content_sync/src/Plugin/SyncNormalizerDecorator/IdsCleaner.php:22

    ---------- begin diff ----------
@@ @@
 class IdsCleaner extends SyncNormalizerDecoratorBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ @@
    * @param string $plugin_id
    * @param mixed $plugin_definition
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
-   *
+   * @param EntityFieldManagerInterface $entityFieldManager
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    */
   public function __construct(array $configuration,
             $plugin_id,
@@ @@

   /**
    * @param array $normalized_entity
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param $format
    * @param array $context
    */
@@ @@

   /**
    * @param $normalized_entity
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return mixed
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/content_sync/src/Plugin/Action/ExportNodes.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    * @param AccountInterface $current_user
    *   Current user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/content_sync/src/Normalizer/UserEntityNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Normalizer;

+use Drupal\user\Entity\User;
 /**
  * User entity normalizer class.
  */
@@ @@
    * {@inheritdoc}
    */
   protected function getContentSyncMetadata($object, $context = []) {
-    /** @var \Drupal\user\Entity\User $object */
+    /** @var User $object */
     $metadata = parent::getContentSyncMetadata($object, $context);
     if ($object->isAnonymous()) {
       $metadata['is_anonymous'] = TRUE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/content_sync/src/Normalizer/PathAliasEntityNormalizer.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs an EntityNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param SyncNormalizerDecoratorManager $decorator_manager
    * @param EntityRepositoryInterface $entityRepository
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/content_sync/src/Normalizer/ParagraphEntityNormalizer.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs an EntityNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param SyncNormalizerDecoratorManager $decorator_manager
    * @param EntityRepositoryInterface $entityRepository
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/content_sync/src/Normalizer/LinkItemNormalizer.php:23

    ---------- begin diff ----------
@@ @@
    */
   protected $supportedInterfaceOrClass = LinkItem::class;
   //protected $supportedInterfaceOrClass = 'Drupal\link\Plugin\Field\FieldType\LinkItem';
-
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a EntityReferenceFieldItemNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   protected function constructValue($data, $context) {
     if (isset($data['target_uuid'])) {
-      /** @var \Drupal\link\Plugin\Field\FieldType\LinkItem $field_item */
+      /** @var LinkItem $field_item */
       $field_item = $context['target_instance'];
       if (empty($data['target_uuid'])) {
         throw new InvalidArgumentException(sprintf('If provided "target_uuid" cannot be empty for field "%s".', $field_item->getName()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/content_sync/src/Normalizer/FileEntityNormalizer.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * FileEntityNormalizer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    *
-   * @param \Drupal\content_sync\Plugin\SyncNormalizerDecoratorManager $decorator_manager
+   * @param SyncNormalizerDecoratorManager $decorator_manager
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    */
   public function __construct(
       EntityTypeManagerInterface $entity_type_manager,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/content_sync/src/Normalizer/EntityReferenceFieldItemNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Normalizer;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\content_sync\ContentSyncManager;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\RevisionableInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a EntityReferenceFieldItemNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(EntityRepositoryInterface $entity_repository) {
@@ @@
    */
   public function normalize($field_item, $format = NULL, array $context = []) {
     $values = parent::normalize($field_item, $format, $context);
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     if ($entity = $field_item->get('entity')->getValue()) {
       // We are only interested in content entities.
       $reflection = new \ReflectionClass($entity);
@@ @@
    */
   protected function constructValue($data, $context) {
     if (isset($data['target_uuid'])) {
-      /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $field_item */
+      /** @var EntityReferenceItem $field_item */
       $field_item = $context['target_instance'];
       if (empty($data['target_uuid'])) {
         throw new InvalidArgumentException(sprintf('If provided "target_uuid" cannot be empty for field "%s".', $field_item->getName()));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/content_sync/src/Normalizer/ContentEntityNormalizer.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs an EntityNormalizer object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param SyncNormalizerDecoratorManager $decorator_manager
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/content_sync/src/Logger/ContentSyncLog.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $parser;

@@ @@
   /**
    * Constructs a csLog object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The parser to use when extracting message variables.
    */
   public function __construct(Connection $connection, LogMessageParserInterface $parser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/content_sync/src/Importer/ContentImporterInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Importer;

-
+use Drupal\Core\Entity\ContentEntityInterface;
 interface ContentImporterInterface {

   /**
@@ @@
    * @param $entity_type_id
    * @param array $context
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function importEntity($decoded_entity, $context = []);

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/content_sync/src/Importer/ContentImporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Importer;

+use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\serialization\Normalizer\SerializedColumnNormalizerTrait;
@@ @@
   protected $context = [];

   /**
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param $entity
    *   An entity object.
-   * @param \Drupal\Core\Entity\ContentEntityType $entity_type
+   * @param ContentEntityType $entity_type
    *   A ContentEntityType object.
    * @param array $entity_translations
    *   An array of translations.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/content_sync/src/Form/ContentSync.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The sync content object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $syncStorage;

@@ @@
   /**
    * The active content object.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;

@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface;
+   * @var ConfigManagerInterface ;
    */
   protected $configManager;

   /**
-   * @var \Drupal\content_sync\ContentSyncManagerInterface
+   * @var ContentSyncManagerInterface
    */
   protected $contentSyncManager;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $sync_storage
+   * @param StorageInterface $sync_storage
    *   The source storage.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
+   * @param StorageInterface $active_storage
    *   The target storage.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   Configuration manager.
-   * @param \Drupal\content_sync\ContentSyncManagerInterface $content_sync_manager
+   * @param ContentSyncManagerInterface $content_sync_manager
    *   The content sync manager.
    */
   public function __construct(StorageInterface $sync_storage, StorageInterface $active_storage, ConfigManagerInterface $config_manager, ContentSyncManagerInterface $content_sync_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/content_sync/src/Form/ContentSingleImportForm.php:14

    ---------- begin diff ----------
@@ @@
 class ContentSingleImportForm extends FormBase {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\content_sync\Importer\ContentImporterInterface
+   * @var ContentImporterInterface
    */
   protected $contentImporter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/content_sync/src/Form/ContentSingleExportForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity bundle manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityBundleManager;

   /**
-   * @var \Drupal\content_sync\Exporter\ContentExporterInterface
+   * @var ContentExporterInterface
    */
   protected $contentExporter;

@@ @@
   /**
    * Constructs a new ContentSingleExportForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entity_bundle_manager
+   * @param EntityTypeBundleInfo $entity_bundle_manager
    *
-   * @param \Drupal\content_sync\Exporter\ContentExporterInterface $content_exporter
+   * @param ContentExporterInterface $content_exporter
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfo $entity_bundle_manager, ContentExporterInterface $content_exporter) {
     $this->entityTypeManager = $entity_type_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/content_sync/src/Form/ContentLogFilterForm.php:85

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function resetForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/content_sync/src/Form/ContentExportTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\content_sync\Exporter\ContentExporterInterface;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Archiver\ArchiveTar;
 use Drupal\content_sync\Content\ContentDatabaseStorage;
 use Drupal\Core\Entity\ContentEntityType;
@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   abstract protected function getEntityTypeManager();

   /**
-   * @return \Drupal\content_sync\Exporter\ContentExporterInterface
+   * @return ContentExporterInterface
    */
   abstract protected function getContentExporter();

   /**
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    */
   abstract protected function getExportLogger();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/content_sync/src/Form/ContentExportMultiple.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Private Temp Store Factory service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

   /**
-   * @var \Drupal\content_sync\ContentSyncManagerInterface
+   * @var ContentSyncManagerInterface
    */
   protected $contentSyncManager;

@@ @@
   /**
    * Constructs a ContentSyncMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity type manager.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $manager, ContentSyncManagerInterface $content_sync_manager, array $formats, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/content_sync/src/Form/ContentExportForm.php:18

    ---------- begin diff ----------
@@ @@
   use ContentExportTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\content_sync\Exporter\ContentExporterInterface
+   * @var ContentExporterInterface
    */
   protected $contentExporter;

   /**
-   * @var \Drupal\content_sync\ContentSyncManagerInterface
+   * @var ContentSyncManagerInterface
    */
   protected $contentSyncManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/content_sync/src/Exporter/ContentExporterInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Exports the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param array $context
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/content_sync/src/Exporter/ContentExporter.php:63

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @return \Symfony\Component\Serializer\Serializer
+   * @return Serializer
    */
   public function getSerializer() {
     return $this->serializer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/content_sync/src/EventSubscriber/ContentSyncEvents.php:16

    ---------- begin diff ----------
@@ @@
    * This method is called whenever the EntityTypeEvents::CREATE event is 
    * dispatched.
    *
-   * @param \Drupal\Core\Entity\EntityTypeEvent $event
+   * @param EntityTypeEvent $event
    *   The Event to process.
    */
   public function onContentSyncCreate(EntityTypeEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/content_sync/src/Element/ContentSyncMessage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Element;

+use Drupal\Core\State\StateInterface;
+use Drupal\user\UserDataInterface;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Url;
@@ @@
     $namespace = 'content_sync.element.message';
     switch ($storage) {
       case self::STORAGE_STATE:
-        /** @var \Drupal\Core\State\StateInterface $state */
+        /** @var StateInterface $state */
         $state = \Drupal::service('state');
         $values = $state->get($namespace, []);
         return (isset($values[$id])) ? TRUE : FALSE;

       case self::STORAGE_USER:
-        /** @var \Drupal\user\UserDataInterface $user_data */
+        /** @var UserDataInterface $user_data */
         $user_data = \Drupal::service('user.data');
         $values = $user_data->get('content_sync', $account->id(), $namespace) ?: [];
         return (isset($values[$id])) ? TRUE : FALSE;
@@ @@
     $namespace = 'content_sync.element.message';
     switch ($storage) {
       case self::STORAGE_STATE:
-        /** @var \Drupal\Core\State\StateInterface $state */
+        /** @var StateInterface $state */
         $state = \Drupal::service('state');
         $values = $state->get($namespace, []);
         $values[$id] = TRUE;
@@ @@
         break;

       case self::STORAGE_USER:
-        /** @var \Drupal\user\UserDataInterface $user_data */
+        /** @var UserDataInterface $user_data */
         $user_data = \Drupal::service('user.data');
         $values = $user_data->get('content_sync', $account->id(), $namespace) ?: [];
         $values[$id] = TRUE;
@@ @@
     $namespace = 'content_sync.element.message';
     switch ($storage) {
       case self::STORAGE_STATE:
-        /** @var \Drupal\Core\State\StateInterface $state */
+        /** @var StateInterface $state */
         $state = \Drupal::service('state');
         $values = $state->get($namespace, []);
         unset($values[$id]);
@@ @@
         break;

       case self::STORAGE_USER:
-        /** @var \Drupal\user\UserDataInterface $user_data */
+        /** @var UserDataInterface $user_data */
         $user_data = \Drupal::service('user.data');
         $values = $user_data->get('content_sync', $account->id(), $namespace) ?: [];
         unset($values[$id]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/content_sync/src/Controller/ContentLogController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Controller;

+use Drupal\user\UserStorageInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Component\Utility\Xss;
@@ @@
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * Constructs a LogController object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   A module handler.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(Connection $database, ModuleHandlerInterface $module_handler, DateFormatterInterface $date_formatter, FormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *   The record from the cs_logs table. The object properties are: csid, uid,
    *   severity, type, timestamp, message, variables, link, name.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup|false
+   * @return string|TranslatableMarkup|false
    *   The formatted log message or FALSE if the message or variables properties
    *   are not set.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/content_sync/src/Controller/ContentHelpController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Controller;

+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\content_sync\ContentSyncHelpManagerInterface;
@@ @@
   /**
    * The help manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $helpManager;

@@ @@
   /**
    * Constructs a ContentSyncHelpController object.
    *
-   * @param \Drupal\content_sync\ContentSyncHelpManagerInterface $help_manager
+   * @param ContentSyncHelpManagerInterface $help_manager
    *   The help manager.
    */
   public function __construct(ContentSyncHelpManagerInterface $help_manager) {
@@ @@
   /**
    * Returns dedicated help about (aka How can we help you?) page.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return array
@@ @@
   /**
    * Returns dedicated help video page.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $id
    *   The video id.
@@ @@
   /**
    * Route video title callback.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $id
    *   The id of the dedicated help section.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/content_sync/src/Controller/ContentElementController.php:18

    ---------- begin diff ----------
@@ @@
    * @param string $id
    *   The unique id of the message.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An empty Ajax response.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/content_sync/src/Controller/ContentController.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The target storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $targetStorage;

@@ @@
   /**
    * The source storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $sourceStorage;

@@ @@
   /**
    * The content manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $contentManager;

@@ @@
   /**
    * The file download controller.
    *
-   * @var \Drupal\system\FileDownloadController
+   * @var FileDownloadController
    */
   protected $fileDownloadController;

@@ @@
   /**
    * The diff formatter.
    *
-   * @var \Drupal\Core\Diff\DiffFormatter
+   * @var DiffFormatter
    */
   protected $diffFormatter;

@@ @@
   /**
    * Constructs a ContentController object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $target_storage
+   * @param StorageInterface $target_storage
    *   The target storage.
-   * @param \Drupal\Core\Config\StorageInterface $source_storage
+   * @param StorageInterface $source_storage
    *   The source storage
-   * @param \Drupal\system\FileDownloadController $file_download_controller
+   * @param FileDownloadController $file_download_controller
    *   The file download controller.
    */
   public function __construct(StorageInterface $target_storage, StorageInterface $source_storage, ConfigManagerInterface $content_manager, DiffFormatter $diff_formatter, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/content_sync/src/ContentSyncManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync;

-
+use Drupal\content_sync\Importer\ContentImporterInterface;
+use Drupal\content_sync\Exporter\ContentExporterInterface;
+use Symfony\Component\Serializer\Serializer;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * Interface ContentSyncManagerInterface.
  *
@@ @@
 interface ContentSyncManagerInterface {

   /**
-   * @return \Drupal\content_sync\Importer\ContentImporterInterface
+   * @return ContentImporterInterface
    */
   public function getContentImporter();

   /**
-   * @return \Drupal\content_sync\Exporter\ContentExporterInterface
+   * @return ContentExporterInterface
    */
   public function getContentExporter();

   /**
-   * @return \Symfony\Component\Serializer\Serializer
+   * @return Serializer
    */
   public function getSerializer();

   /**
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   public function getEntityTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/content_sync/src/ContentSyncManager.php:13

    ---------- begin diff ----------
@@ @@
   const DELIMITER = '.';

   /**
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\content_sync\Exporter\ContentExporterInterface
+   * @var ContentExporterInterface
    */
   protected $contentExporter;

   /**
-   * @var \Drupal\content_sync\Importer\ContentImporterInterface
+   * @var ContentImporterInterface
    */
   protected $contentImporter;

@@ @@
   }

   /**
-   * @return \Drupal\content_sync\Exporter\ContentExporterInterface
+   * @return ContentExporterInterface
    */
   public function getContentExporter() {
     return $this->contentExporter;
@@ @@
   }

   /**
-   * @return \Drupal\content_sync\Importer\ContentImporterInterface
+   * @return ContentImporterInterface
    */
   public function getContentImporter() {
     return $this->contentImporter;
@@ @@
   }

   /**
-   * @return \Symfony\Component\Serializer\Serializer
+   * @return Serializer
    */
   public function getSerializer() {
     return $this->serializer;
@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    */
   public function getEntityTypeManager() {
     return $this->entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/content_sync/src/ContentSyncHelpManagerInterface.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param string $route_name
    *   The route for which to find help.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object from which to find help.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/content_sync/src/ContentSyncHelpManager.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The configuration object factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * Constructs a ContentSyncHelpManager object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
    */
   public function __construct(AccountInterface $current_user, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, StateInterface $state, PathMatcherInterface $path_matcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/content_sync/src/Content/ContentFileStorageFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Content;

+use Drupal\Core\Config\FileStorage;
 /**
  * Provides a factory for creating content file storage objects.
  */
@@ @@
   /**
    * Returns a FileStorage object working with the active content directory.
    *
-   * @return \Drupal\Core\Config\FileStorage FileStorage
+   * @return FileStorage FileStorage
    *
    * @deprecated in Drupal 8.0.x and will be removed before 9.0.0. Drupal core
    * no longer creates an active directory.
@@ @@
   /**
    * Returns a FileStorage object working with the sync content directory.
    *
-   * @return \Drupal\Core\Config\FileStorage FileStorage
+   * @return FileStorage FileStorage
    */
   public static function getSync() {
     // Load the class from a different namespace.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/content_sync/src/Commands/ContentSyncCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Commands;

+use Drupal\Core\TempStore\Lock;
 use Drupal\content_sync\Content\ContentStorageComparer;
 use Drupal\content_sync\ContentSyncManagerInterface;
 use Drupal\content_sync\Exporter\ContentExporterInterface;
@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface;
+   * @var ConfigManagerInterface ;
    */
   protected $configManager;

@@ @@
   /**
    * The content storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorage;

@@ @@
   /**
    * The content sync storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $contentStorageSync;

@@ @@
   /**
    * The content sync manager.
    *
-   * @var \Drupal\content_sync\ContentSyncManagerInterface
+   * @var ContentSyncManagerInterface
    */
   protected $contentSyncManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The content exporter.
    *
-   * @var \Drupal\content_sync\Exporter\ContentExporterInterface
+   * @var ContentExporterInterface
    */
   protected $contentExporter;

@@ @@
   /**
    * The lock information for this configuration.
    *
-   * @var \Drupal\Core\TempStore\Lock|null
+   * @var Lock|null
    */
   protected $lock;

@@ @@
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;

@@ @@
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The string translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Gets the configManager.
    *
-   * @return \Drupal\Core\Config\ConfigManagerInterface
+   * @return ConfigManagerInterface
    *   The configManager.
    */
   public function getConfigManager() {
@@ @@
   /**
    * Gets the contentStorage.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The contentStorage.
    */
   public function getContentStorage() {
@@ @@
   /**
    * Gets the contentStorageSync.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The contentStorageSync.
    */
   public function getContentStorageSync() {
@@ @@
   /**
    * ContentSyncCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
+   * @param ConfigManagerInterface $configManager
    *   The configManager.
-   * @param \Drupal\Core\Config\StorageInterface $contentStorage
+   * @param StorageInterface $contentStorage
    *   The contentStorage.
-   * @param \Drupal\Core\Config\StorageInterface $contentStorageSync
+   * @param StorageInterface $contentStorageSync
    *   The contentStorageSync.
-   * @param \Drupal\content_sync\ContentSyncManagerInterface $contentSyncManager
+   * @param ContentSyncManagerInterface $contentSyncManager
    *   The contentSyncManager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entityTypeManager.
-   * @param \Drupal\content_sync\Exporter\ContentExporterInterface $content_exporter
+   * @param ContentExporterInterface $content_exporter
    *   The contentExporter.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The moduleHandler.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The eventDispatcher.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager
+   * @param TypedConfigManagerInterface $typedConfigManager
    *   The typedConfigManager.
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller
+   * @param ModuleInstallerInterface $moduleInstaller
    *   The moduleInstaller.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The themeHandler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The stringTranslation.
    */
   public function __construct(ConfigManagerInterface $configManager, StorageInterface $contentStorage, StorageInterface $contentStorageSync, ContentSyncManagerInterface $contentSyncManager, EntityTypeManagerInterface $entity_type_manager, ContentExporterInterface $content_exporter, ModuleHandlerInterface $moduleHandler, EventDispatcherInterface $eventDispatcher, LockBackendInterface $lock, TypedConfigManagerInterface $typedConfigManager, ModuleInstallerInterface $moduleInstaller, ThemeHandlerInterface $themeHandler, TranslationInterface $stringTranslation) {
@@ @@
    *
    * @param array $content_changes
    *   An array of changes keyed by collection.
-   * @param \Symfony\Component\Console\Output\OutputInterface $output
+   * @param OutputInterface $output
    *   The output.
    * @param bool $use_color
    *   If it should use color.
    *
-   * @return \Symfony\Component\Console\Helper\Table
+   * @return Table
    *   A Symfony table object.
    */
   public static function contentChangesTable(array $content_changes, OutputInterface $output, $use_color = TRUE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/content_sync/src/Annotation/SyncNormalizerDecorator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_sync\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


37) modules/contrib/content_sync/includes/content_sync.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\content_sync\ContentSyncHelpManagerInterface;
 /**
  * @file
  * Preprocessors and helper functions to make theming easier.
@@ @@
  *   - content: Help content.
  */
 function template_preprocess_content_sync_help(array &$variables) {
-  /** @var \Drupal\content_sync\ContentSyncHelpManagerInterface $help_manager */
+  /** @var ContentSyncHelpManagerInterface $help_manager */
   $help_manager = \Drupal::service('content_sync.help_manager');

   $help_info = $variables['info'];
@@ @@
   if (isset($element['#closed'])) {
     $variables['closed'] = $element['#closed'];
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/content_sync/content_sync.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\content_sync\ContentSyncHelpManagerInterface;
 /**
  * @file
  * Allows site administrators to modify content.
@@ @@
     return NULL;
   }

-  /** @var \Drupal\content_sync\ContentSyncHelpManagerInterface $help_manager */
+  /** @var ContentSyncHelpManagerInterface $help_manager */
   $help_manager = \Drupal::service('content_sync.help_manager');
   if ($route_name == 'help.page.content_sync') {
     $build = $help_manager->buildIndex();
@@ @@
       $output .= '<h3>' . t('Uses') . '</h3>';
       $output .= '<dl>';
       $output .= '<dt>' . t('Exporting the full content') . '</dt>';
-      $output .= '<dd>' . t('You can create and download an archive consisting of all your site\'s content exported as <em>*.yml</em> files on the <a href=":url">Export</a> page.', [':url' => \Drupal::url('content.export_full')]) . '</dd>';
+      $output .= '<dd>' . t('You can create and download an archive consisting of all your site\'s content exported as <em>*.yml</em> files on the <a href=":url">Export</a> page.', [':url' => Url::fromRoute('content.export_full')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Importing a full content') . '</dt>';
-      $output .= '<dd>' . t('You can upload a full site content from an archive file on the <a href=":url">Import</a> page. When importing data from a different environment, the site and import files must have matching configuration values for UUID in the <em>system.site</em> configuration item. That means that your other environments should initially be set up as clones of the target site.', [':url' => \Drupal::url('content.import_full')]) . '</dd>';
+      $output .= '<dd>' . t('You can upload a full site content from an archive file on the <a href=":url">Import</a> page. When importing data from a different environment, the site and import files must have matching configuration values for UUID in the <em>system.site</em> configuration item. That means that your other environments should initially be set up as clones of the target site.', [':url' => Url::fromRoute('content.import_full')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Exporting a single content item') . '</dt>';
-      $output .= '<dd>' . t('You can export a single content item by selecting a <em>Content type</em> and <em>Content name</em> on the <a href=":single-export">Single export</a> page. The content and its corresponding <em>*.yml file name</em> are then displayed on the page for you to copy.', [':single-export' => \Drupal::url('content.export_single')]) . '</dd>';
+      $output .= '<dd>' . t('You can export a single content item by selecting a <em>Content type</em> and <em>Content name</em> on the <a href=":single-export">Single export</a> page. The content and its corresponding <em>*.yml file name</em> are then displayed on the page for you to copy.', [':single-export' => Url::fromRoute('content.export_single')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Importing a single content item') . '</dt>';
-      $output .= '<dd>' . t('You can import a single content item by pasting it in YAML format into the form on the <a href=":single-import">Single import</a> page.', [':single-import' => \Drupal::url('content.import_single')]) . '</dd>';
+      $output .= '<dd>' . t('You can import a single content item by pasting it in YAML format into the form on the <a href=":single-import">Single import</a> page.', [':single-import' => Url::fromRoute('content.import_single')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Synchronizing content') . '</dt>';
-      $output .= '<dd>' . t('You can review differences between the active content and an imported content archive on the <a href=":synchronize">Synchronize</a> page to ensure that the changes are as expected, before finalizing the import. The <a href=":synchronize">Synchronize</a>Synchronize</a> page also shows content items that would be added or removed.', [':synchronize' => \Drupal::url('content.sync')]) . '</dd>';
+      $output .= '<dd>' . t('You can review differences between the active content and an imported content archive on the <a href=":synchronize">Synchronize</a> page to ensure that the changes are as expected, before finalizing the import. The <a href=":synchronize">Synchronize</a>Synchronize</a> page also shows content items that would be added or removed.', [':synchronize' => Url::fromRoute('content.sync')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Content logs') . '</dt>';
-      $output .= '<dd>' . t('You can view a chronological list of recorded events containing errors, warnings and operational information of the content import, export and synchronization on the <a href=":content-logs">Logs</a> page.', [':content-logs' => \Drupal::url('content.overview')]) . '</dd>';
+      $output .= '<dd>' . t('You can view a chronological list of recorded events containing errors, warnings and operational information of the content import, export and synchronization on the <a href=":content-logs">Logs</a> page.', [':content-logs' => Url::fromRoute('content.overview')->toString()]) . '</dd>';
       $output .= '<dt>' . t('Content synchronization settings') . '</dt>';
-      $output .= '<dd>' . t('You can set specific settings for the content synchronization behavior as ignore the UUID Site validation and more on the <a href=":settings">Settings</a> page.', [':settings' => \Drupal::url('content.settings')]) . '</dd>';
+      $output .= '<dd>' . t('You can set specific settings for the content synchronization behavior as ignore the UUID Site validation and more on the <a href=":settings">Settings</a> page.', [':settings' => Url::fromRoute('content.settings')->toString()]) . '</dd>';
       $output .= '</dl>';

       //return $output;
@@ @@
     // Invalidate the CS Cache of the entity.
     $cache = \Drupal::cache('content')->invalidate($entity_type.".".$entity_bundle.":".$name);
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * DrupalURLRector
 * ArgumentRemoverRector


 [OK] 38 files have been changed by Rector                                      

