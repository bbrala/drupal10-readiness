diff --git a/extra_field.module b/extra_field.module
index 71eaf1d..aaf6330 100644
--- a/extra_field.module
+++ b/extra_field.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Hook implementations for Extra Field module.
@@ -25,7 +26,7 @@ function extra_field_entity_extra_field_info() {
  */
 function extra_field_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
 
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   Drupal::service('plugin.manager.extra_field_display')->entityView($build, $entity, $display, $view_mode);
 }
 
diff --git a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php
index 9115208..9b4ddb4 100644
--- a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php
+++ b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field_example\Plugin\ExtraField\Display;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\extra_field\Plugin\ExtraFieldDisplayFormattedBase;
@@ -34,7 +35,7 @@ class ExampleMultilingualField extends ExtraFieldDisplayFormattedBase {
       // Build the field output as a concatenated string of tags.
       $tags = [];
       foreach ($tagsField as $item) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $tag */
+        /** @var ContentEntityInterface $tag */
         $tag = $item->entity;
         $tags[] = $tag->label();
         $cache->addCacheableDependency($tag);
@@ -101,7 +102,7 @@ class ExampleMultilingualField extends ExtraFieldDisplayFormattedBase {
   /**
    * Returns the Tags field this plugin uses.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The taxonomy terms this field references.
    */
   protected function getTagsField() {
diff --git a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php
index f31daf7..57f7cfb 100644
--- a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php
+++ b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field_example\Plugin\ExtraField\Display;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -28,7 +29,7 @@ class ExampleWithDependencyInjection extends ExtraFieldDisplayBase implements Co
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
@@ -41,7 +42,7 @@ class ExampleWithDependencyInjection extends ExtraFieldDisplayBase implements Co
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack) {
diff --git a/modules/extra_field_example/src/Plugin/ExtraField/Form/CustomSubmit.php b/modules/extra_field_example/src/Plugin/ExtraField/Form/CustomSubmit.php
index e58abc5..93f869f 100644
--- a/modules/extra_field_example/src/Plugin/ExtraField/Form/CustomSubmit.php
+++ b/modules/extra_field_example/src/Plugin/ExtraField/Form/CustomSubmit.php
@@ -47,7 +47,7 @@ class CustomSubmit extends ExtraFieldFormBase {
    *
    * @param array $form
    *   The entity form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function addCustomMessage(array $form, FormStateInterface $form_state) {
diff --git a/modules/extra_field_example/src/Plugin/ExtraField/Form/ExampleCustomInput.php b/modules/extra_field_example/src/Plugin/ExtraField/Form/ExampleCustomInput.php
index 20f26ba..52064e7 100644
--- a/modules/extra_field_example/src/Plugin/ExtraField/Form/ExampleCustomInput.php
+++ b/modules/extra_field_example/src/Plugin/ExtraField/Form/ExampleCustomInput.php
@@ -44,7 +44,7 @@ class ExampleCustomInput extends ExtraFieldFormBase implements ContainerFactoryP
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -57,7 +57,7 @@ class ExampleCustomInput extends ExtraFieldFormBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager) {
@@ -93,7 +93,7 @@ class ExampleCustomInput extends ExtraFieldFormBase implements ContainerFactoryP
    *
    * @param array $form
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateVoucherCode(array $form, FormStateInterface $form_state) {
diff --git a/src/Annotation/ExtraFieldDisplay.php b/src/Annotation/ExtraFieldDisplay.php
index 6012846..684ceef 100644
--- a/src/Annotation/ExtraFieldDisplay.php
+++ b/src/Annotation/ExtraFieldDisplay.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class ExtraFieldDisplay extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class ExtraFieldDisplay extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/ExtraFieldForm.php b/src/Annotation/ExtraFieldForm.php
index af377c5..6427522 100644
--- a/src/Annotation/ExtraFieldForm.php
+++ b/src/Annotation/ExtraFieldForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class ExtraFieldForm extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class ExtraFieldForm extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Plugin/ExtraFieldDisplayBase.php b/src/Plugin/ExtraFieldDisplayBase.php
index 514f082..049b031 100644
--- a/src/Plugin/ExtraFieldDisplayBase.php
+++ b/src/Plugin/ExtraFieldDisplayBase.php
@@ -14,7 +14,7 @@ abstract class ExtraFieldDisplayBase extends PluginBase implements ExtraFieldDis
   /**
    * The field's parent entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -30,7 +30,7 @@ abstract class ExtraFieldDisplayBase extends PluginBase implements ExtraFieldDis
    *
    * Contains the display options configured for the entity components.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $entityViewDisplay;
 
diff --git a/src/Plugin/ExtraFieldDisplayFormattedBase.php b/src/Plugin/ExtraFieldDisplayFormattedBase.php
index 7687040..740cafc 100644
--- a/src/Plugin/ExtraFieldDisplayFormattedBase.php
+++ b/src/Plugin/ExtraFieldDisplayFormattedBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Plugin;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Render\Element;
@@ -35,7 +36,7 @@ abstract class ExtraFieldDisplayFormattedBase extends ExtraFieldDisplayBase impl
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
diff --git a/src/Plugin/ExtraFieldDisplayFormattedInterface.php b/src/Plugin/ExtraFieldDisplayFormattedInterface.php
index 870a50b..aeab28c 100644
--- a/src/Plugin/ExtraFieldDisplayFormattedInterface.php
+++ b/src/Plugin/ExtraFieldDisplayFormattedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Plugin;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -12,7 +13,7 @@ interface ExtraFieldDisplayFormattedInterface extends ExtraFieldDisplayInterface
   /**
    * Returns the renderable array of the field item(s).
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The field's host entity.
    *
    * @return array
@@ -27,7 +28,7 @@ interface ExtraFieldDisplayFormattedInterface extends ExtraFieldDisplayInterface
    *
    * If applicable, the code has to take care of the translatability.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The field label.
    */
   public function getLabel();
diff --git a/src/Plugin/ExtraFieldDisplayInterface.php b/src/Plugin/ExtraFieldDisplayInterface.php
index 53b544e..b83de16 100644
--- a/src/Plugin/ExtraFieldDisplayInterface.php
+++ b/src/Plugin/ExtraFieldDisplayInterface.php
@@ -14,7 +14,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Builds a renderable array for the field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The field's host entity.
    *
    * @return array
@@ -25,7 +25,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Stores the field's parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that hosts the field.
    */
   public function setEntity(ContentEntityInterface $entity);
@@ -33,7 +33,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Returns the field's parent entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that hosts the field.
    */
   public function getEntity();
@@ -41,7 +41,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Stores the entity view display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display holding the display options configured for the
    *   entity components. As provided by hook_entity_view()
    */
@@ -50,7 +50,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Returns the entity view display object of the field's host entity.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @return EntityViewDisplayInterface
    *   The entity view display object.
    */
   public function getEntityViewDisplay();
diff --git a/src/Plugin/ExtraFieldDisplayManager.php b/src/Plugin/ExtraFieldDisplayManager.php
index 74f816d..caa9fb8 100644
--- a/src/Plugin/ExtraFieldDisplayManager.php
+++ b/src/Plugin/ExtraFieldDisplayManager.php
@@ -43,7 +43,7 @@ class ExtraFieldDisplayManager extends ExtraFieldManagerBase implements ExtraFie
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -53,11 +53,11 @@ class ExtraFieldDisplayManager extends ExtraFieldManagerBase implements ExtraFie
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/ExtraFieldDisplayManagerInterface.php b/src/Plugin/ExtraFieldDisplayManagerInterface.php
index 57d325b..6d6d97e 100644
--- a/src/Plugin/ExtraFieldDisplayManagerInterface.php
+++ b/src/Plugin/ExtraFieldDisplayManagerInterface.php
@@ -37,9 +37,9 @@ interface ExtraFieldDisplayManagerInterface {
    *   A renderable array representing the entity content. The module may add
    *   elements to $build prior to rendering. The structure of $build is a
    *   renderable array as expected by drupal_render().
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display holding the display options configured for the
    *   entity components.
    * @param string $viewMode
diff --git a/src/Plugin/ExtraFieldFormBase.php b/src/Plugin/ExtraFieldFormBase.php
index 59d10d4..3a4ee17 100644
--- a/src/Plugin/ExtraFieldFormBase.php
+++ b/src/Plugin/ExtraFieldFormBase.php
@@ -17,7 +17,7 @@ abstract class ExtraFieldFormBase extends PluginBase implements ExtraFieldFormIn
   /**
    * The field's parent entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -33,7 +33,7 @@ abstract class ExtraFieldFormBase extends PluginBase implements ExtraFieldFormIn
    *
    * Contains the form display options configured for the entity components.
    *
-   * @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @var EntityFormDisplayInterface
    */
   protected $entityFormDisplay;
 
diff --git a/src/Plugin/ExtraFieldFormInterface.php b/src/Plugin/ExtraFieldFormInterface.php
index 8d10537..4cc52ab 100644
--- a/src/Plugin/ExtraFieldFormInterface.php
+++ b/src/Plugin/ExtraFieldFormInterface.php
@@ -17,7 +17,7 @@ interface ExtraFieldFormInterface extends PluginInspectionInterface {
    *
    * @param array $form
    *   The entity form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -28,7 +28,7 @@ interface ExtraFieldFormInterface extends PluginInspectionInterface {
   /**
    * Stores the field's parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that hosts the field.
    */
   public function setEntity(ContentEntityInterface $entity);
@@ -36,7 +36,7 @@ interface ExtraFieldFormInterface extends PluginInspectionInterface {
   /**
    * Returns the field's parent entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that hosts the field.
    */
   public function getEntity();
@@ -44,7 +44,7 @@ interface ExtraFieldFormInterface extends PluginInspectionInterface {
   /**
    * Stores the entity form display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display
+   * @param EntityFormDisplayInterface $display
    *   The entity form display holding the display options configured for the
    *   entity components.
    */
@@ -53,7 +53,7 @@ interface ExtraFieldFormInterface extends PluginInspectionInterface {
   /**
    * Returns the entity form display object of the field's host entity.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   The entity view display object.
    */
   public function getEntityFormDisplay();
diff --git a/src/Plugin/ExtraFieldFormManager.php b/src/Plugin/ExtraFieldFormManager.php
index 48fbea9..f46afa5 100644
--- a/src/Plugin/ExtraFieldFormManager.php
+++ b/src/Plugin/ExtraFieldFormManager.php
@@ -44,7 +44,7 @@ class ExtraFieldFormManager extends ExtraFieldManagerBase implements ExtraFieldF
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -54,11 +54,11 @@ class ExtraFieldFormManager extends ExtraFieldManagerBase implements ExtraFieldF
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/ExtraFieldFormManagerInterface.php b/src/Plugin/ExtraFieldFormManagerInterface.php
index 894088f..4e883d5 100644
--- a/src/Plugin/ExtraFieldFormManagerInterface.php
+++ b/src/Plugin/ExtraFieldFormManagerInterface.php
@@ -25,7 +25,7 @@ interface ExtraFieldFormManagerInterface {
    *
    * @param array $form
    *   The entity form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function entityFormAlter(array &$form, FormStateInterface $form_state);
diff --git a/src/Plugin/ExtraFieldManagerBase.php b/src/Plugin/ExtraFieldManagerBase.php
index fe6b0ac..6540ce6 100644
--- a/src/Plugin/ExtraFieldManagerBase.php
+++ b/src/Plugin/ExtraFieldManagerBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Plugin;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 
@@ -252,7 +253,7 @@ abstract class ExtraFieldManagerBase extends DefaultPluginManager implements Ext
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   abstract protected function getEntityTypeManager();
diff --git a/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php b/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php
index efb972d..d07444c 100644
--- a/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php
+++ b/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php
@@ -30,14 +30,14 @@ class MultipleItemsFieldWithCacheDependencyTest extends ExtraFieldDisplayFormatt
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -50,9 +50,9 @@ class MultipleItemsFieldWithCacheDependencyTest extends ExtraFieldDisplayFormatt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
diff --git a/tests/src/Functional/ExtraFieldBrowserTestBase.php b/tests/src/Functional/ExtraFieldBrowserTestBase.php
index df54856..a651141 100644
--- a/tests/src/Functional/ExtraFieldBrowserTestBase.php
+++ b/tests/src/Functional/ExtraFieldBrowserTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Tests\BrowserTestBase;
@@ -68,13 +69,13 @@ abstract class ExtraFieldBrowserTestBase extends BrowserTestBase {
    * @param string $contentType
    *   Content type of the node.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The new node.
    */
   public function createContent($contentType) {
 
     $this->createContentType(['type' => $contentType]);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $node */
+    /** @var ContentEntityInterface $node */
     $node = \Drupal::entityTypeManager()->getStorage('node')->create([
       'type' => $contentType,
       'title' => $this->randomMachineName(),
diff --git a/tests/src/Functional/ExtraFieldDisplayFieldTest.php b/tests/src/Functional/ExtraFieldDisplayFieldTest.php
index 91b8873..dea6435 100644
--- a/tests/src/Functional/ExtraFieldDisplayFieldTest.php
+++ b/tests/src/Functional/ExtraFieldDisplayFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\node\Entity\Node;
 /**
  * Tests the extra_field Display with field wrapper.
  *
@@ -21,21 +22,21 @@ class ExtraFieldDisplayFieldTest extends ExtraFieldBrowserTestBase {
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $firstNode;
 
   /**
    * A second node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $secondNode;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->firstNode = $this->createContent('first_node_type');
@@ -62,7 +63,7 @@ class ExtraFieldDisplayFieldTest extends ExtraFieldBrowserTestBase {
     // Test the output of field with cacheable dependency.
     $this->assertSession()->pageTextContains('Related pages');
     $this->assertSession()->pageTextContains($this->secondNode->label());
-    $this->assertCacheTag('node:' . $this->secondNode->id());
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'node:' . $this->secondNode->id());
 
     // Test the output of the empty field.
     $this->assertSession()->pageTextNotContains('Empty field');
diff --git a/tests/src/Functional/ExtraFieldDisplayUITest.php b/tests/src/Functional/ExtraFieldDisplayUITest.php
index d957bce..5647402 100644
--- a/tests/src/Functional/ExtraFieldDisplayUITest.php
+++ b/tests/src/Functional/ExtraFieldDisplayUITest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * Tests the extra field Display on entity UI pages.
  *
@@ -22,7 +23,7 @@ class ExtraFieldDisplayUITest extends ExtraFieldBrowserTestBase {
   /**
    * Entity display for each content type.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[]
+   * @var EntityViewDisplayInterface[]
    */
   protected $entityDisplay;
 
@@ -36,7 +37,7 @@ class ExtraFieldDisplayUITest extends ExtraFieldBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
     $adminUser = $this->drupalCreateUser(['administer node display']);
diff --git a/tests/src/Functional/ExtraFieldDisplayViewTest.php b/tests/src/Functional/ExtraFieldDisplayViewTest.php
index ab50333..6ea150f 100644
--- a/tests/src/Functional/ExtraFieldDisplayViewTest.php
+++ b/tests/src/Functional/ExtraFieldDisplayViewTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\node\Entity\Node;
 /**
  * Tests the view of extra field Displays.
  *
@@ -21,14 +22,14 @@ class ExtraFieldDisplayViewTest extends ExtraFieldBrowserTestBase {
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $content;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->content = $this->createContent('first_node_type');
diff --git a/tests/src/Functional/ExtraFieldFormUITest.php b/tests/src/Functional/ExtraFieldFormUITest.php
index b13f6c3..b4556aa 100644
--- a/tests/src/Functional/ExtraFieldFormUITest.php
+++ b/tests/src/Functional/ExtraFieldFormUITest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * Tests the extra field Form on entity UI pages.
  *
@@ -22,7 +23,7 @@ class ExtraFieldFormUITest extends ExtraFieldBrowserTestBase {
   /**
    * Entity form display for each content type.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[]
+   * @var EntityViewDisplayInterface[]
    */
   protected $entityFrom;
 
@@ -36,7 +37,7 @@ class ExtraFieldFormUITest extends ExtraFieldBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
     $adminUser = $this->drupalCreateUser(['administer node form display']);
diff --git a/tests/src/Functional/ExtraFieldFormViewTest.php b/tests/src/Functional/ExtraFieldFormViewTest.php
index cb312f4..adccc1d 100644
--- a/tests/src/Functional/ExtraFieldFormViewTest.php
+++ b/tests/src/Functional/ExtraFieldFormViewTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\node\Entity\Node;
 /**
  * Tests the view of extra field form plugins.
  *
@@ -21,14 +22,14 @@ class ExtraFieldFormViewTest extends ExtraFieldBrowserTestBase {
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $content;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->content = $this->createContent('first_node_type');
diff --git a/tests/src/Kernel/ExtraFieldDisplayPluginTest.php b/tests/src/Kernel/ExtraFieldDisplayPluginTest.php
index 600d312..e80da3f 100644
--- a/tests/src/Kernel/ExtraFieldDisplayPluginTest.php
+++ b/tests/src/Kernel/ExtraFieldDisplayPluginTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\extra_field\Kernel;
 
+use Drupal\extra_field\Plugin\ExtraFieldDisplayManager;
+use Drupal\node\NodeInterface;
 use Drupal\extra_field_test\Plugin\ExtraField\Display\AllNodeTypesTest;
 use Drupal\extra_field_test\Plugin\ExtraField\Display\EmptyFormattedFieldTest;
 use Drupal\extra_field_test\Plugin\ExtraField\Display\SingleTextFieldTest;
@@ -35,21 +37,21 @@ class ExtraFieldDisplayPluginTest extends KernelTestBase {
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $displayManager;
 
   /**
    * The node that contains the extra fields under test.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
diff --git a/tests/src/Unit/ExtraFieldDisplayManagerTest.php b/tests/src/Unit/ExtraFieldDisplayManagerTest.php
index b5c8225..954cc6d 100644
--- a/tests/src/Unit/ExtraFieldDisplayManagerTest.php
+++ b/tests/src/Unit/ExtraFieldDisplayManagerTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\extra_field\Unit;
 
+use Drupal\extra_field\Plugin\ExtraFieldDisplayManager;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\extra_field\Plugin\ExtraFieldDisplayInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Component\Plugin\Factory\FactoryInterface;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -14,7 +20,7 @@ class ExtraFieldDisplayManagerTest extends UnitTestCase {
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var ExtraFieldDisplayManager|MockObject
    */
   protected $displayManager;
 
@@ -73,7 +79,7 @@ class ExtraFieldDisplayManagerTest extends UnitTestCase {
   /**
    * Returns a mocked ExtraFieldDisplay object.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return ExtraFieldDisplayInterface|MockObject
    *   The mocked object.
    */
   protected function createMockDisplayPlugin($entity, $display, $viewMode, $build) {
@@ -308,7 +314,7 @@ class ExtraFieldDisplayManagerTest extends UnitTestCase {
     $this->prepareDefinitions($definitions);
 
     // Mock content entity.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface|\PHPUnit\Framework\MockObject\MockObject $contentEntity */
+    /** @var ContentEntityInterface|MockObject $contentEntity */
     $contentEntity = $this->createMock('Drupal\Core\Entity\ContentEntityInterface');
     $contentEntity->expects($this->any())
       ->method('getEntityTypeId')
@@ -318,14 +324,14 @@ class ExtraFieldDisplayManagerTest extends UnitTestCase {
       ->will($this->returnValue($bundle));
 
     // Mock entity view display.
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay|\PHPUnit\Framework\MockObject\MockObject $display */
+    /** @var EntityViewDisplay|MockObject $display */
     $display = $this->createMock('Drupal\Core\Entity\Entity\EntityViewDisplay');
     $display->expects($this->any())
       ->method('getComponent')
       ->will($this->returnValue($hasComponent));
 
     // Mock extra field display plugin.
-    /** @var \Drupal\Component\Plugin\Factory\FactoryInterface|\PHPUnit\Framework\MockObject\MockObject $pluginFactory */
+    /** @var FactoryInterface|MockObject $pluginFactory */
     $pluginFactory = $this->createMock('Drupal\Component\Plugin\Factory\FactoryInterface');
     $pluginFactory->expects($this->any())
       ->method('createInstance')
diff --git a/tests/src/Unit/ExtraFieldFormManagerTest.php b/tests/src/Unit/ExtraFieldFormManagerTest.php
index f838cf4..ae5d71b 100644
--- a/tests/src/Unit/ExtraFieldFormManagerTest.php
+++ b/tests/src/Unit/ExtraFieldFormManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\extra_field\Unit;
 
+use Drupal\extra_field\Plugin\ExtraFieldFormManagerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -14,14 +16,14 @@ class ExtraFieldFormManagerTest extends UnitTestCase {
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldFormManagerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var ExtraFieldFormManagerInterface|MockObject
    */
   protected $formManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->formManager = $this->getMockBuilder('Drupal\extra_field\Plugin\ExtraFieldFormManager')
diff --git a/tests/src/Unit/ExtraFieldManagerBaseTest.php b/tests/src/Unit/ExtraFieldManagerBaseTest.php
index dc54d0a..d5aecb7 100644
--- a/tests/src/Unit/ExtraFieldManagerBaseTest.php
+++ b/tests/src/Unit/ExtraFieldManagerBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Unit;
 
+use Drupal\extra_field\Plugin\ExtraFieldManagerBaseInterface;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -14,14 +15,14 @@ class ExtraFieldManagerBaseTest extends UnitTestCase {
   /**
    * The ExtraFieldManagerBase under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldManagerBaseInterface
+   * @var ExtraFieldManagerBaseInterface
    */
   protected $baseManager;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->baseManager = $this->getMockBuilder('Drupal\extra_field\Plugin\ExtraFieldManagerBase')
