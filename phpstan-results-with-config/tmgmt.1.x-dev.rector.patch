diff --git a/sources/content/src/Access/KeyAccessCheck.php b/sources/content/src/Access/KeyAccessCheck.php
index 44e54d09..0dfa81f0 100644
--- a/sources/content/src/Access/KeyAccessCheck.php
+++ b/sources/content/src/Access/KeyAccessCheck.php
@@ -20,9 +20,9 @@ class KeyAccessCheck implements RoutingAccessInterface {
    * Checks access for TMGMT job item by comparing the hashed key from job item
    * data and key from the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request.
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   Job item.
    *
    * @return AccessResult
@@ -42,7 +42,7 @@ class KeyAccessCheck implements RoutingAccessInterface {
   /**
    * Generates a key from job item data that can be used in the URL.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   Job item.
    *
    * @return string
diff --git a/sources/content/src/ContentEntitySourcePluginUi.php b/sources/content/src/ContentEntitySourcePluginUi.php
index a69da7bf..ef4b77c9 100644
--- a/sources/content/src/ContentEntitySourcePluginUi.php
+++ b/sources/content/src/ContentEntitySourcePluginUi.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\tmgmt_content;
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workflows\Transition;
 use Drupal\content_translation\ContentTranslationManager;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -170,7 +173,7 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
         $entity = $default_revision;
         $latest_revision_id = $storage->getLatestTranslationAffectedRevisionId($entity->id(), $langcode);
         if ($latest_revision_id) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $latest_revision */
+          /** @var ContentEntityInterface $latest_revision */
           $latest_revision = $storage->loadRevision($latest_revision_id);
           // Make sure we do not list removed translations, i.e. translations
           // that have been part of a default revision but no longer are.
@@ -268,7 +271,7 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
   /**
    * Adds selected sources to continuous jobs.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state array.
    * @param string $item_type
    *   Entity type.
@@ -402,7 +405,7 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
    *   the provided entity property exists for given entity type and its value
    *   is processed.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface|NULL
+   * @return QueryInterface|NULL
    *   The query for translatable entities or NULL if the query can not be
    *   built for this entity type.
    */
@@ -564,7 +567,7 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
       return $form;
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = ContentEntitySource::load($item->getItemType(), $item->getItemId());
 
     if (!$form_state->isRebuilding() && $entity) {
@@ -606,9 +609,9 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
   /**
    * Build a publish state element.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item.
-   * @param \Drupal\Core\Entity\EntityPublishedInterface $entity
+   * @param EntityPublishedInterface $entity
    *   The source publishable entity.
    *
    * @return array
@@ -647,9 +650,9 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
   /**
    * Build a content moderation elemenet for the translation.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The source moderated entity.
    *
    * @return array
@@ -658,7 +661,7 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
   protected function buildContentModerationElement(JobItemInterface $item, ContentEntityInterface $entity) {
     $element = [];
 
-    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
+    /** @var ModerationInformationInterface $moderation_info */
     $moderation_info = \Drupal::service('content_moderation.moderation_information');
     $workflow = $moderation_info->getWorkflowForEntity($entity);
     $moderation_validator = \Drupal::service('content_moderation.state_transition_validation');
@@ -669,7 +672,7 @@ class ContentEntitySourcePluginUi extends SourcePluginUiBase {
     $default = $workflow->getTypePlugin()->getState($current_state);
 
     // Get a list of valid transitions.
-    /** @var \Drupal\workflows\Transition[] $transitions */
+    /** @var Transition[] $transitions */
     $transitions = $moderation_validator->getValidTransitions($entity, \Drupal::currentUser());
 
     $transition_labels = [];
diff --git a/sources/content/src/Controller/ContentTranslationPreviewController.php b/sources/content/src/Controller/ContentTranslationPreviewController.php
index b30e116a..1292df3a 100644
--- a/sources/content/src/Controller/ContentTranslationPreviewController.php
+++ b/sources/content/src/Controller/ContentTranslationPreviewController.php
@@ -19,14 +19,14 @@ class ContentTranslationPreviewController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an ContentTranslationPreviewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -45,7 +45,7 @@ class ContentTranslationPreviewController extends ControllerBase {
   /**
    * Preview job item entity data.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   Job item to be previewed.
    * @param string $view_mode
    *   The view mode that should be used to display the entity.
@@ -82,7 +82,7 @@ class ContentTranslationPreviewController extends ControllerBase {
   /**
    * The _title_callback for the page that renders a single node in preview.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   The current node.
    *
    * @return string
@@ -102,14 +102,14 @@ class ContentTranslationPreviewController extends ControllerBase {
   /**
    * Builds the entity translation for the provided translation data.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which the translation should be returned.
    * @param array $data
    *   The translation data for the fields.
    * @param string $target_langcode
    *   The target language.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Translation data.
    */
   protected function makePreview(ContentEntityInterface $entity, array $data, $target_langcode) {
diff --git a/sources/content/src/DefaultFieldProcessor.php b/sources/content/src/DefaultFieldProcessor.php
index d12da429..451a22df 100644
--- a/sources/content/src/DefaultFieldProcessor.php
+++ b/sources/content/src/DefaultFieldProcessor.php
@@ -109,7 +109,7 @@ class DefaultFieldProcessor implements FieldProcessorInterface {
   /**
    * Returns whether the property should be translated or not.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $property
+   * @param TypedDataInterface $property
    *   The field property to check.
    *
    * @return bool
diff --git a/sources/content/src/FieldProcessorInterface.php b/sources/content/src/FieldProcessorInterface.php
index 5b79dcdc..f6c7ef9d 100644
--- a/sources/content/src/FieldProcessorInterface.php
+++ b/sources/content/src/FieldProcessorInterface.php
@@ -14,7 +14,7 @@ interface FieldProcessorInterface {
   /**
    * Extracts the translatatable data structure from the given field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field object.
    *
    * @return array $data
@@ -31,7 +31,7 @@ interface FieldProcessorInterface {
    *
    * @param array $field_data
    *   The translated data for this field.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field object.
    *
    * @see \Drupal\tmgmt_content\Plugin\tmgmt\Source\ContentEntitySource::doSaveTranslations()
diff --git a/sources/content/src/Form/ContentTranslateForm.php b/sources/content/src/Form/ContentTranslateForm.php
index 91a6e4a3..96aed24f 100644
--- a/sources/content/src/Form/ContentTranslateForm.php
+++ b/sources/content/src/Form/ContentTranslateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_content\Form;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Link;
@@ -125,7 +126,7 @@ class ContentTranslateForm extends FormBase {
    * {@inheritdoc}
    */
   function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->get('entity');
     $values = $form_state->getValues();
     $jobs = array();
diff --git a/sources/content/src/Plugin/tmgmt/Source/ContentEntitySource.php b/sources/content/src/Plugin/tmgmt/Source/ContentEntitySource.php
index b101d7b2..6d32790d 100644
--- a/sources/content/src/Plugin/tmgmt/Source/ContentEntitySource.php
+++ b/sources/content/src/Plugin/tmgmt/Source/ContentEntitySource.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\tmgmt_content\Plugin\tmgmt\Source;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\tmgmt_content\FieldProcessorInterface;
 use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -40,10 +45,10 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   /**
    * Returns the entity for the given job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job entity
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   protected function getEntity(JobItemInterface $job_item) {
@@ -63,14 +68,14 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
    * @param string|null $langcode
    *   (optional) The language code. Defaults to source entity language.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Returns a list of entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function loadMultiple($entity_type_id, array $entity_ids, $langcode = NULL) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
 
     $entities = $storage->loadMultiple($entity_ids);
@@ -111,11 +116,11 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
    * @param string|null $langcode
    *   (optional) The language code. Defaults to source entity language.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The loaded entity or null if not found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function load($entity_type_id, $id, $langcode = NULL) {
     $entities = static::loadMultiple($entity_type_id, [$id], $langcode);
@@ -139,7 +144,7 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
    * {@inheritdoc}
    */
   public function getUrl(JobItemInterface $job_item) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $langcode = $job_item->getJob() ? $job_item->getJob()->getSourceLangcode() : NULL;
     if ($entity = static::load($job_item->getItemType(), $job_item->getItemId(), $langcode)) {
       if ($entity->hasLinkTemplate('canonical')) {
@@ -219,7 +224,7 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   /**
    * Extracts translatable data from an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to get the translatable data from.
    *
    * @return array $data
@@ -230,7 +235,7 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
     $exclude_field_types = ['language'];
     $exclude_field_names = ['moderation_state'];
 
-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = \Drupal::service('content_translation.manager');
     $is_bundle_translatable = $content_translation_manager->isEnabled($entity->getEntityTypeId(), $entity->bundle());
 
@@ -316,7 +321,7 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   /**
    * Determines whether an entity is moderated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ -331,17 +336,17 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   }
 
   /**
-   * Returns fields that should be embedded into the data for the given entity.
-   *
-   * Includes explicitly enabled fields and composite entities that are
-   * implicitly included to the translatable data.
-   *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
-   *   The entity to get the translatable data from.
-   *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[] $embeddable_fields
-   *   A list of field definitions that can be embedded.
-   */
+  * Returns fields that should be embedded into the data for the given entity.
+  *
+  * Includes explicitly enabled fields and composite entities that are
+  * implicitly included to the translatable data.
+  *
+   * @param ContentEntityInterface $entity
+  *   The entity to get the translatable data from.
+  *
+   * @return FieldDefinitionInterface[] $embeddable_fields
+    A list of field definitions that can be embedded.
+  */
   public static function getEmbeddableFields(ContentEntityInterface $entity) {
     // Get the configurable embeddable references.
     $field_definitions = $entity->getFieldDefinitions();
@@ -391,7 +396,7 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
       return FALSE;
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     if ($entity_revision = $this->getPendingRevisionWithCompositeReferenceField($job_item)) {
       $title = $entity_revision->hasLinkTemplate('latest-version') ? $entity_revision->toLink(NULL, 'latest-version')->toString() : $entity_revision->label();
       $job_item->addMessage('This translation cannot be accepted as there is a pending revision in the default translation. You must publish %title first before saving this translation.', [
@@ -475,13 +480,13 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   /**
    * Saves translation data in an entity translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which the translation should be saved.
    * @param array $data
    *   The translation data for the fields.
    * @param string $target_langcode
    *   The target language.
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item.
    * @param bool $save
    *   (optional) Whether to save the translation or not.
@@ -595,7 +600,7 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
     }
 
     if ($entity->getEntityType()->isRevisionable()) {
-      /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $storage */
+      /** @var TranslatableRevisionableStorageInterface $storage */
       $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
 
       if ($storage instanceof TranslatableRevisionableStorageInterface) {
@@ -619,12 +624,12 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   /**
    * Creates a translation duplicate of the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   The target entity to clone.
    * @param string $langcode
    *   Language code for all the clone entities created.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   New entity object with the data from the original entity. Not
    *   saved. No sub-entities are cloned.
    */
@@ -727,7 +732,7 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   /**
    * Returns the bundle label for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return string
@@ -746,14 +751,14 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   }
 
   /**
-   * Returns the field processor for a given field type.
-   *
-   * @param string $field_type
-   *   The field type.
-   *
-   * @return \Drupal\tmgmt_content\FieldProcessorInterface $field_processor
-   *   The field processor for this field type.
-   */
+  * Returns the field processor for a given field type.
+  *
+  * @param string $field_type
+  *   The field type.
+  *
+   * @return FieldProcessorInterface $field_processor
+    The field processor for this field type.
+  */
   protected function getFieldProcessor($field_type) {
     $definition = \Drupal::service('plugin.manager.field.field_type')->getDefinition($field_type);
 
@@ -761,14 +766,14 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   }
 
   /**
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    * @param array $field_item
    * @param $delta
    * @param $property
    * @param bool $is_target_type_translatable
    *   (optional) Whether the target entity type is translatable.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function findReferencedEntity(FieldItemListInterface $field, array $field_item, $delta, $property, $is_target_type_translatable = TRUE) {
     // If an id is provided, loop over the field item deltas until we find the
@@ -796,9 +801,9 @@ class ContentEntitySource extends SourcePluginBase implements SourcePreviewInter
   /**
    * Returns the source revision if it is a pending revision with an ERR field.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The source revision entity if it is a pending revision with an ERR field.
    */
   public function getPendingRevisionWithCompositeReferenceField(JobItemInterface $job_item) {
diff --git a/sources/content/tests/src/Functional/ContentEntitySourceContentModerationTest.php b/sources/content/tests/src/Functional/ContentEntitySourceContentModerationTest.php
index d8af831f..48cc0c29 100644
--- a/sources/content/tests/src/Functional/ContentEntitySourceContentModerationTest.php
+++ b/sources/content/tests/src/Functional/ContentEntitySourceContentModerationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tmgmt_content\Functional;
 
+use Drupal\workflows\WorkflowInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
@@ -35,7 +37,7 @@ class ContentEntitySourceContentModerationTest extends TMGMTTestBase {
   /**
    * The workflow entity.
    *
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;
 
@@ -76,7 +78,7 @@ class ContentEntitySourceContentModerationTest extends TMGMTTestBase {
     // Create the reference field to the composite entity test.
     $this->createEntityReferenceField('node', 'composite', 'entity_test_composite', 'entity_test_composite', 'entity_test_composite');
     FieldConfig::loadByName('node', 'composite', 'entity_test_composite')->setTranslatable(FALSE)->save();
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $fd */
+    /** @var EntityFormDisplayInterface $fd */
     \Drupal::service('entity_display.repository')
       ->getFormDisplay('node', 'composite')
       ->setComponent('entity_test_composite', ['type' => 'entity_reference_autocomplete'])
diff --git a/sources/content/tests/src/Functional/ContentTmgmtEntitySourceUiTest.php b/sources/content/tests/src/Functional/ContentTmgmtEntitySourceUiTest.php
index 33be4b9d..f55b7b26 100644
--- a/sources/content/tests/src/Functional/ContentTmgmtEntitySourceUiTest.php
+++ b/sources/content/tests/src/Functional/ContentTmgmtEntitySourceUiTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt_content\Functional;
 
+use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\comment\Entity\Comment;
@@ -453,7 +454,7 @@ class ContentTmgmtEntitySourceUiTest extends TMGMTTestBase {
     $this->addDefaultCommentField('node', 'article');
 
     // Enable comment translation.
-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = \Drupal::service('content_translation.manager');
     $content_translation_manager->setEnabled('comment', 'comment', TRUE);
 
diff --git a/sources/content/tests/src/Kernel/ContentEntitySourceContentModerationTest.php b/sources/content/tests/src/Kernel/ContentEntitySourceContentModerationTest.php
index 97f1820f..943fc721 100644
--- a/sources/content/tests/src/Kernel/ContentEntitySourceContentModerationTest.php
+++ b/sources/content/tests/src/Kernel/ContentEntitySourceContentModerationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt_content\Kernel;
 
+use Drupal\workflows\WorkflowInterface;
 use Drupal\entity_test\Entity\EntityTestMulRev;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
@@ -25,7 +26,7 @@ class ContentEntitySourceContentModerationTest extends ContentEntityTestBase {
   /**
    * The workflow entity.
    *
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;
 
diff --git a/sources/content/tests/src/Kernel/ContentEntitySourceUnitTest.php b/sources/content/tests/src/Kernel/ContentEntitySourceUnitTest.php
index f1d39051..b608908a 100644
--- a/sources/content/tests/src/Kernel/ContentEntitySourceUnitTest.php
+++ b/sources/content/tests/src/Kernel/ContentEntitySourceUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt_content\Kernel;
 
+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -433,7 +434,7 @@ class ContentEntitySourceUnitTest extends ContentEntityTestBase {
     // Request translation. Here it fails.
     $job->requestTranslation();
     $items = $job->getItems();
-    /** @var \Drupal\tmgmt\Entity\JobItem $item */
+    /** @var JobItem $item */
     $item = reset($items);
     // As was set to auto_accept, should be accepted.
     $this->assertEquals(JobItemInterface::STATE_ACCEPTED, $item->getState());
diff --git a/sources/content/tests/src/Kernel/ContentEntitySourceUntranslatableTargetsUnitTest.php b/sources/content/tests/src/Kernel/ContentEntitySourceUntranslatableTargetsUnitTest.php
index 15d8df8c..5ba5f35c 100644
--- a/sources/content/tests/src/Kernel/ContentEntitySourceUntranslatableTargetsUnitTest.php
+++ b/sources/content/tests/src/Kernel/ContentEntitySourceUntranslatableTargetsUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt_content\Kernel;
 
+use Drupal\node\NodeInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -116,7 +117,7 @@ class ContentEntitySourceUntranslatableTargetsUnitTest extends ContentEntityTest
 
     // Check that the translations of the composite references were duplicated
     // correctly.
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::load($node->id());
     $node_translation = $node->getTranslation('de');
     $composite_en = $node->get('t_composite')->entity;
diff --git a/sources/content/tmgmt_content.api.php b/sources/content/tmgmt_content.api.php
index 73fcba89..5bd6362a 100644
--- a/sources/content/tmgmt_content.api.php
+++ b/sources/content/tmgmt_content.api.php
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Hooks provided by the content entity source module.
@@ -16,19 +19,19 @@
  *
  * @see TMGMTEntityDefaultSourceUIController
  */
-function hook_tmgmt_content_list_query_alter(\Drupal\Core\Entity\Query\QueryInterface $query) {
+function hook_tmgmt_content_list_query_alter(QueryInterface $query) {
   $query->condition('type', array('article', 'page'), 'IN');
 }
 
 /**
  * Allows to exclude some fields from translation with TMGMT.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity to exclude fields from.
- * @param \Drupal\Core\Field\FieldDefinitionInterface[] $translatable_fields
+ * @param FieldDefinitionInterface[] $translatable_fields
  *   An array of field definitions, keyed by field name.
  */
-function hook_tmgmt_translatable_fields_alter(\Drupal\Core\Entity\ContentEntityInterface $entity, array &$translatable_fields) {
+function hook_tmgmt_translatable_fields_alter(ContentEntityInterface $entity, array &$translatable_fields) {
   if (isset($translatable_fields['title'])) {
     unset($translatable_fields['title']);
   }
diff --git a/sources/content/tmgmt_content.module b/sources/content/tmgmt_content.module
index 86ad241d..1c6cec06 100644
--- a/sources/content/tmgmt_content.module
+++ b/sources/content/tmgmt_content.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\menu_link_content\MenuLinkContentInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\field\Entity\FieldConfig;
 /**
  * @file
  * Source plugin for the Translation Management system that handles entities.
@@ -36,7 +40,7 @@ function tmgmt_content_tmgmt_source_suggestions(array $items, JobInterface $job)
       }
 
       // Load translatable menu items.
-      /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+      /** @var MenuLinkManagerInterface $menu_link_manager */
       $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
       $entity_type = $entity->getEntityType()->id();
       $menu_items = $menu_link_manager->loadLinksByRoute(
@@ -50,7 +54,7 @@ function tmgmt_content_tmgmt_source_suggestions(array $items, JobInterface $job)
           if (!Uuid::isValid($menu_item->getDerivativeId())) {
             continue;
           }
-          /** @var \Drupal\menu_link_content\MenuLinkContentInterface $target */
+          /** @var MenuLinkContentInterface $target */
           $target = \Drupal::service('entity.repository')->loadEntityByUuid($menu_item->getBaseId(), $menu_item->getDerivativeId());
           if ($target->hasTranslation($job->getSourceLangcode())) {
             $suggestions[] = [
@@ -101,11 +105,11 @@ function tmgmt_content_tmgmt_source_suggestions(array $items, JobInterface $job)
 }
 
   /**
-   * Implements hook_form_FORM_ID_alter() for tmgmt_settings_form().
-   *
-   * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   */
+ * Implements hook_form_FORM_ID_alter() for tmgmt_settings_form().
+ *
+ * @param array $form
+ * @param FormStateInterface $form_state
+ */
 function tmgmt_content_form_tmgmt_settings_form_alter(array &$form, FormStateInterface $form_state) {
   module_load_include('inc', 'views', 'views.views');
   $entity_types = \Drupal::entitytypeManager()->getDefinitions();
@@ -300,7 +304,7 @@ function tmgmt_content_entity_update(EntityInterface $entity) {
     $source_langcode = $entity->language()->getId();
     $current_job_items = tmgmt_job_item_load_latest('content', $entity->getEntityTypeId(), $entity->id(), $source_langcode);
     if ($current_job_items) {
-      /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+      /** @var JobItemInterface $job_item */
       foreach ($current_job_items as $job_item) {
         // If the job item is not yet submitted update its data.
         if ($job_item->getJob()->isSubmittable() || $job_item->isInactive()) {
@@ -320,7 +324,7 @@ function tmgmt_content_entity_update(EntityInterface $entity) {
 /**
  * Creates continuous job items for entity.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   Entity to be inserted or updated.
  *
  * @return int
@@ -372,14 +376,14 @@ function tmgmt_content_create_continuous_job_items_batch_finished($success, $res
 /**
  * Implements hook_entity_access().
  */
-function tmgmt_content_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
+function tmgmt_content_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   $result = AccessResult::neutral();
   $key = \Drupal::request()->query->get('key');
   if ($entity instanceof ContentEntityInterface && $operation == 'view' && $key) {
     $entity = $entity->getUntranslated();
     $source_langcode = $entity->language()->getId();
     $current_job_items = tmgmt_job_item_load_latest('content', $entity->getEntityTypeId(), $entity->id(), $source_langcode);
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     if ($current_job_items) {
       foreach ($current_job_items as $job_item) {
         $valid_key = \Drupal::service('tmgmt_content.key_access')
@@ -400,7 +404,7 @@ function tmgmt_content_entity_access(\Drupal\Core\Entity\EntityInterface $entity
  */
 function tmgmt_content_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
 
-  /** @var \Drupal\field\Entity\FieldConfig $field_config */
+  /** @var FieldConfig $field_config */
   $field_config = $form_state->getFormObject()->getEntity();
   $bundle_is_translatable = \Drupal::service('content_translation.manager')->isEnabled($field_config->getTargetEntityTypeId(), $field_config->getTargetBundle());
 
diff --git a/sources/locale/src/Plugin/tmgmt/Source/LocaleSource.php b/sources/locale/src/Plugin/tmgmt/Source/LocaleSource.php
index 89d5cea2..e00ddd4a 100644
--- a/sources/locale/src/Plugin/tmgmt/Source/LocaleSource.php
+++ b/sources/locale/src/Plugin/tmgmt/Source/LocaleSource.php
@@ -86,7 +86,7 @@ class LocaleSource extends SourcePluginBase {
   /**
    * Helper function to obtain a locale object for given job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *
    * @return locale object
    */
diff --git a/sources/locale/tests/src/Functional/LocaleSourceUiTest.php b/sources/locale/tests/src/Functional/LocaleSourceUiTest.php
index 3a369f9f..d6d1651c 100644
--- a/sources/locale/tests/src/Functional/LocaleSourceUiTest.php
+++ b/sources/locale/tests/src/Functional/LocaleSourceUiTest.php
@@ -29,7 +29,7 @@ class LocaleSourceUiTest extends TMGMTTestBase {
     $this->langcode = 'de';
     $this->context = 'default';
     $file = new \stdClass();
-    $file->uri =  \Drupal::service('file_system')->realpath(drupal_get_path('module', 'tmgmt_locale') . '/tests/test.xx.po');
+    $file->uri =  \Drupal::service('file_system')->realpath(\Drupal::service('extension.list.module')->getPath('tmgmt_locale') . '/tests/test.xx.po');
     $file->langcode = $this->langcode;
     Gettext::fileToDatabase($file, array());
     $this->addLanguage($this->langcode);
diff --git a/sources/locale/tests/src/Kernel/LocaleSourceTest.php b/sources/locale/tests/src/Kernel/LocaleSourceTest.php
index ef090823..f1ae3e13 100644
--- a/sources/locale/tests/src/Kernel/LocaleSourceTest.php
+++ b/sources/locale/tests/src/Kernel/LocaleSourceTest.php
@@ -31,7 +31,7 @@ class LocaleSourceTest extends TMGMTKernelTestBase {
     \Drupal::service('router.builder')->rebuild();
     $this->installSchema('locale', array('locales_source', 'locales_target'));
     $file = new \stdClass();
-    $file->uri =  \Drupal::service('file_system')->realpath(drupal_get_path('module', 'tmgmt_locale') . '/tests/test.xx.po');
+    $file->uri =  \Drupal::service('file_system')->realpath(\Drupal::service('extension.list.module')->getPath('tmgmt_locale') . '/tests/test.xx.po');
     $file->langcode = $this->langcode;
     Gettext::fileToDatabase($file, array());
     $this->addLanguage('es');
diff --git a/sources/tmgmt_config/src/ConfigProcessorInterface.php b/sources/tmgmt_config/src/ConfigProcessorInterface.php
index f7b70978..33fdfb2a 100644
--- a/sources/tmgmt_config/src/ConfigProcessorInterface.php
+++ b/sources/tmgmt_config/src/ConfigProcessorInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_config;
 
+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\Core\Config\Schema\TypedConfigInterface;
 use Drupal\config_translation\ConfigMapperInterface;
 
 interface ConfigProcessorInterface {
@@ -10,7 +12,7 @@ interface ConfigProcessorInterface {
   public function setConfigMapper(ConfigMapperInterface $config_mapper);
 
   /**
-   * @param \Drupal\Core\TypedData\TypedDataInterface[]|\Drupal\Core\Config\Schema\TypedConfigInterface $schema
+   * @param TypedDataInterface[]|TypedConfigInterface $schema
    *   A list of schema definitions.
    * @param $config_data
    * @param string $base_key
diff --git a/sources/tmgmt_config/src/ConfigSourcePluginUi.php b/sources/tmgmt_config/src/ConfigSourcePluginUi.php
index d92f9707..86559697 100644
--- a/sources/tmgmt_config/src/ConfigSourcePluginUi.php
+++ b/sources/tmgmt_config/src/ConfigSourcePluginUi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_config;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\SourcePluginUiBase;
@@ -102,7 +103,7 @@ class ConfigSourcePluginUi extends SourcePluginUiBase {
   /**
    * Builds a table row for overview form.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   Data needed to build the list row.
    *
    * @return array
@@ -270,7 +271,7 @@ class ConfigSourcePluginUi extends SourcePluginUiBase {
    *   the provided entity property exists for given entity type and its value
    *   is processed.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   Array of translatable entities.
    */
   function getTranslatableEntities($entity_type_id, $property_conditions = array()) {
@@ -327,7 +328,7 @@ class ConfigSourcePluginUi extends SourcePluginUiBase {
    * @param array $search_properties
    *   Search properties that are going to be used for the filter.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   Array of translatable definitions.
    */
   public function getFilteredSimpleConfigDefinitions($search_properties = array()) {
diff --git a/sources/tmgmt_config/src/DefaultConfigProcessor.php b/sources/tmgmt_config/src/DefaultConfigProcessor.php
index 892b3e01..a4afd85d 100644
--- a/sources/tmgmt_config/src/DefaultConfigProcessor.php
+++ b/sources/tmgmt_config/src/DefaultConfigProcessor.php
@@ -13,7 +13,7 @@ use Drupal\Core\Render\Element;
 class DefaultConfigProcessor implements ConfigProcessorInterface {
 
   /**
-   * @var \Drupal\config_translation\ConfigMapperInterface
+   * @var ConfigMapperInterface
    */
   protected $configMapper;
 
diff --git a/sources/tmgmt_config/src/Form/ConfigTranslateForm.php b/sources/tmgmt_config/src/Form/ConfigTranslateForm.php
index b0a2b149..64a47e75 100644
--- a/sources/tmgmt_config/src/Form/ConfigTranslateForm.php
+++ b/sources/tmgmt_config/src/Form/ConfigTranslateForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_config\Form;
 
+use Drupal\Core\Routing\RouteMatch;
+use Drupal\config_translation\ConfigMapperInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Link;
@@ -22,14 +24,14 @@ class ConfigTranslateForm extends FormBase {
   /**
    * The configuration mapper manager.
    *
-   * @var \Drupal\config_translation\ConfigMapperManagerInterface
+   * @var ConfigMapperManagerInterface
    */
   protected $configMapperManager;
 
   /**
    * The RouteMatch service.
    *
-   * @var \Drupal\Core\Routing\RouteMatch
+   * @var RouteMatch
    */
   protected $routeMatch;
 
@@ -43,9 +45,9 @@ class ConfigTranslateForm extends FormBase {
   /**
    * Constructs a ConfigTranslationController.
    *
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $config_mapper_manager
+   * @param ConfigMapperManagerInterface $config_mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The RouteMatch service.
    */
   public function __construct(ConfigMapperManagerInterface $config_mapper_manager, RouteMatchInterface $route_match) {
@@ -54,7 +56,7 @@ class ConfigTranslateForm extends FormBase {
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ -72,7 +74,7 @@ class ConfigTranslateForm extends FormBase {
     // submit handler.
     $mapper_definition = \Drupal::service('plugin.manager.config_translation.mapper')->getDefinition($plugin_id);
 
-    /** @var \Drupal\config_translation\ConfigMapperInterface $mapper */
+    /** @var ConfigMapperInterface $mapper */
     $mapper = $this->configMapperManager->createInstance($plugin_id);
     $mapper->populateFromRouteMatch($this->routeMatch);
 
@@ -187,7 +189,7 @@ class ConfigTranslateForm extends FormBase {
    * {@inheritdoc}
    */
   function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapper */
+    /** @var ConfigMapperManagerInterface $mapper */
     $mapper = $form_state->get('mapper');
     $values = $form_state->getValues();
 
diff --git a/sources/tmgmt_config/src/Plugin/tmgmt/Source/ConfigSource.php b/sources/tmgmt_config/src/Plugin/tmgmt/Source/ConfigSource.php
index b95c55f6..4fe8fbd2 100644
--- a/sources/tmgmt_config/src/Plugin/tmgmt/Source/ConfigSource.php
+++ b/sources/tmgmt_config/src/Plugin/tmgmt/Source/ConfigSource.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\tmgmt_config\Plugin\tmgmt\Source;
 
+use Drupal\config_translation\ConfigMapperInterface;
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
+use Drupal\tmgmt_config\ConfigProcessorInterface;
 use Drupal\config_translation\ConfigMapperManagerInterface;
 use Drupal\config_translation\Form\ConfigTranslationFormBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -39,31 +42,31 @@ class ConfigSource extends SourcePluginBase implements ContainerFactoryPluginInt
   /**
    * The configuration mapper manager.
    *
-   * @var \Drupal\config_translation\ConfigMapperManagerInterface
+   * @var ConfigMapperManagerInterface
    */
   protected $configMapperManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Configuration factory manager
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactoryManager;
 
   /**
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;
 
   /**
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
@@ -76,13 +79,13 @@ class ConfigSource extends SourcePluginBase implements ContainerFactoryPluginInt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $config_mapper_manager
+   * @param ConfigMapperManagerInterface $config_mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param  \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManagerInterface
+   * @param TypedConfigManagerInterface $typedConfigManagerInterface
    *   The typed config.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    * @param \Drupal\language\ConfigurableLanguageManagerInterface
    *   Configurable language manager.
@@ -106,7 +109,7 @@ class ConfigSource extends SourcePluginBase implements ContainerFactoryPluginInt
   /**
    * Gets the mapper ID.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return string
@@ -132,22 +135,22 @@ class ConfigSource extends SourcePluginBase implements ContainerFactoryPluginInt
   }
 
   /**
-   * Gets the mapper.
-   *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
-   *   Gets a job item as a parameter.
-   *
-   * @return \Drupal\config_translation\ConfigMapperInterface $config_mapper
-   *   Returns the config mapper.
-   *
-   * @throws \Drupal\tmgmt\TMGMTException
-   *   If there is no entity, throws an exception.
-   */
+  * Gets the mapper.
+  *
+   * @param JobItemInterface $job_item
+  *   Gets a job item as a parameter.
+  *
+   * @return ConfigMapperInterface $config_mapper
+    Returns the config mapper.
+  *
+   * @throws TMGMTException
+  *   If there is no entity, throws an exception.
+  */
   protected function getMapper(JobItemInterface $job_item) {
     $config_mapper =$this->configMapperManager->createInstance($this->getMapperId($job_item));
 
     if ($job_item->getItemType() != static::SIMPLE_CONFIG) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entity_type */
+      /** @var ConfigEntityTypeInterface $entity_type */
       $entity_type = $this->entityTypeManager->getDefinition($config_mapper->getType());
 
       $pos = strpos($job_item->getItemId(), $entity_type->getConfigPrefix());
@@ -226,10 +229,10 @@ class ConfigSource extends SourcePluginBase implements ContainerFactoryPluginInt
   /**
    * Returns the config processor for a given configuration definition.
    *
-   * @param \Drupal\Core\TypedData\TraversableTypedDataInterface $definition
+   * @param TraversableTypedDataInterface $definition
    *   The field type.
    *
-   * @return \Drupal\tmgmt_config\ConfigProcessorInterface
+   * @return ConfigProcessorInterface
    *   The config processor for this configuration definition.
    */
   protected function getConfigProcessor(TraversableTypedDataInterface $definition) {
diff --git a/sources/tmgmt_config/src/WebformConfigProcessor.php b/sources/tmgmt_config/src/WebformConfigProcessor.php
index 4de98f52..cd880955 100644
--- a/sources/tmgmt_config/src/WebformConfigProcessor.php
+++ b/sources/tmgmt_config/src/WebformConfigProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_config;
 
+use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Config\Schema\Mapping;
 use Drupal\Core\Config\Schema\Sequence;
@@ -15,7 +16,7 @@ class WebformConfigProcessor extends DefaultConfigProcessor {
   ];
 
   /**
-   * @var \Drupal\config_translation\ConfigEntityMapper
+   * @var ConfigEntityMapper
    */
   protected $configMapper;
 
diff --git a/src/Annotation/SourcePlugin.php b/src/Annotation/SourcePlugin.php
index 572ed786..847dc95a 100644
--- a/src/Annotation/SourcePlugin.php
+++ b/src/Annotation/SourcePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class SourcePlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -34,7 +35,7 @@ class SourcePlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/TranslatorPlugin.php b/src/Annotation/TranslatorPlugin.php
index a97e4b02..d38f269e 100644
--- a/src/Annotation/TranslatorPlugin.php
+++ b/src/Annotation/TranslatorPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class TranslatorPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
@@ -34,7 +35,7 @@ class TranslatorPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/ContinuousManager.php b/src/ContinuousManager.php
index b3bd3a5a..e66055be 100644
--- a/src/ContinuousManager.php
+++ b/src/ContinuousManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\tmgmt\Events\ShouldCreateJobEvent;
 use Drupal\tmgmt\Entity\Job;
@@ -17,48 +18,48 @@ class ContinuousManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The source plugin manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourcePluginManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The translation manager.
    *
-   * @var \Drupal\tmgmt\TranslatorManager
+   * @var TranslatorManager
    */
   protected $translatorManager;
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a new ContinuousManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\tmgmt\SourceManager $source_plugin_manager
+   * @param SourceManager $source_plugin_manager
    *   The source plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The translation manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SourceManager $source_plugin_manager, ConfigFactoryInterface $config_factory, TranslatorManager $translator_manager, EventDispatcherInterface $event_dispatcher) {
@@ -116,7 +117,7 @@ class ContinuousManager {
    * The job item will be immediately submitted to the translator unless
    * this happens on cron runs.
    *
-   * @param \Drupal\tmgmt\Entity\Job $job
+   * @param Job $job
    *   Continuous job.
    * @param string $plugin
    *   The plugin name.
@@ -125,7 +126,7 @@ class ContinuousManager {
    * @param string $item_id
    *   The source item id.
    *
-   * @return \Drupal\tmgmt\Entity\JobItem
+   * @return JobItem
    *   Continuous job item.
    *
    * @see \Drupal\tmgmt\Events\ContinuousEvents::SHOULD_CREATE_JOB
@@ -137,7 +138,7 @@ class ContinuousManager {
 
     // Some modules might want to filter out candidates for items.
     $event = new ShouldCreateJobEvent($job, $plugin, $item_type, $item_id, $should_create_item);
-    $this->eventDispatcher->dispatch(ContinuousEvents::SHOULD_CREATE_JOB, $event);
+    $this->eventDispatcher->dispatch($event, ContinuousEvents::SHOULD_CREATE_JOB);
 
     if ($event->shouldCreateItem()) {
       if ($most_recent_job_item) {
diff --git a/src/ContinuousSourceInterface.php b/src/ContinuousSourceInterface.php
index bd1cb832..13b446a2 100644
--- a/src/ContinuousSourceInterface.php
+++ b/src/ContinuousSourceInterface.php
@@ -17,9 +17,9 @@ interface ContinuousSourceInterface {
    *
    * @param array $form
    *   The job form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\tmgmt\Entity\Job $job
+   * @param Job $job
    *   Continuous job.
    *
    * @return array
@@ -31,7 +31,7 @@ interface ContinuousSourceInterface {
   /**
    * Checks whether the continuous job item should be created.
    *
-   * @param \Drupal\tmgmt\Entity\Job $job
+   * @param Job $job
    *   Continuous job.
    * @param string $plugin
    *   The plugin name.
diff --git a/src/Controller/TMGMTController.php b/src/Controller/TMGMTController.php
index 9a223717..90a9a1bd 100644
--- a/src/Controller/TMGMTController.php
+++ b/src/Controller/TMGMTController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Controller;
 
+use Drupal\Core\Url;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\system\SystemManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,14 +15,14 @@ class TMGMTController extends ControllerBase {
   /**
    * System Manager Service.
    *
-   * @var \Drupal\system\SystemManager
+   * @var SystemManager
    */
   protected $systemManager;
 
   /**
    * Constructs a new TMGMTLocalController.
    *
-   * @param \Drupal\system\SystemManager $system_manager
+   * @param SystemManager $system_manager
    *   System manager service.
    */
   public function __construct(SystemManager $system_manager) {
@@ -41,7 +42,7 @@ class TMGMTController extends ControllerBase {
   public function translatorAdminMenuBlockPage() {
     $contents = $this->systemManager->getBlockContents();
     if (count($contents['#content']) === 1) {
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = reset($contents['#content'])['url'];
       return $this->redirect($url->getRouteName(), $url->getRouteParameters(), $url->getOptions());
     }
diff --git a/src/Controller/TranslatorController.php b/src/Controller/TranslatorController.php
index a13a2aba..cd651461 100644
--- a/src/Controller/TranslatorController.php
+++ b/src/Controller/TranslatorController.php
@@ -17,7 +17,7 @@ class TranslatorController extends ControllerBase {
    * @param \Drupal\tmgmt\TranslatorInterface $tmgmt_translator
    *   The Translator object to enable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the tmgmt listing page.
    */
   function enable(TranslatorInterface $tmgmt_translator) {
@@ -31,7 +31,7 @@ class TranslatorController extends ControllerBase {
    * @param \Drupal\tmgmt\TranslatorInterface $tmgmt_translator
    *   The Translator object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the tmgmt listing page.
    */
   function disable(TranslatorInterface $tmgmt_translator) {
diff --git a/src/Data.php b/src/Data.php
index 7cc49ae7..4895b57a 100644
--- a/src/Data.php
+++ b/src/Data.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -15,7 +16,7 @@ class Data {
   /**
    * Configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -27,7 +28,7 @@ class Data {
   /**
    * Configuration constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
     $this->config = $config_factory->get('tmgmt.settings');
diff --git a/src/Entity/Controller/JobAccessControlHandler.php b/src/Entity/Controller/JobAccessControlHandler.php
index 70e17bb5..f5498131 100644
--- a/src/Entity/Controller/JobAccessControlHandler.php
+++ b/src/Entity/Controller/JobAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Entity\Controller;
 
+use Drupal\tmgmt\JobInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,7 +19,7 @@ class JobAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\tmgmt\JobInterface $entity */
+    /** @var JobInterface $entity */
     if ($account->hasPermission('administer tmgmt')) {
       // Administrators can do everything.
       return AccessResult::allowed()->cachePerPermissions();
diff --git a/src/Entity/Controller/TranslatorAccessControlHandler.php b/src/Entity/Controller/TranslatorAccessControlHandler.php
index 305b5def..6f6932e6 100644
--- a/src/Entity/Controller/TranslatorAccessControlHandler.php
+++ b/src/Entity/Controller/TranslatorAccessControlHandler.php
@@ -22,16 +22,16 @@ class TranslatorAccessControlHandler extends EntityAccessControlHandler implemen
   /**
    * The translator manager which knows about installed translator plugins.
    *
-   * @var \Drupal\tmgmt\TranslatorManager $translatorManager
+   * @var TranslatorManager $translatorManager
    */
   protected $translatorManager;
 
   /**
    * Constructs a TranslatorAccessControlHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The translator manager.
    */
   public function __construct(EntityTypeInterface $entity_type, TranslatorManager $translator_manager) {
diff --git a/src/Entity/Job.php b/src/Entity/Job.php
index 7ffdd0aa..44b69d1a 100644
--- a/src/Entity/Job.php
+++ b/src/Entity/Job.php
@@ -711,7 +711,7 @@ class Job extends ContentEntityBase implements EntityOwnerInterface, JobInterfac
     if (!isset($message)) {
       $message = 'The translation job has been aborted.';
     }
-    /** @var \Drupal\tmgmt\JobItemInterface $item */
+    /** @var JobItemInterface $item */
     foreach ($this->getItems() as $item) {
       $item->setState(JobItem::STATE_ABORTED);
     }
diff --git a/src/Entity/JobItem.php b/src/Entity/JobItem.php
index ba1e1038..da51d8a1 100644
--- a/src/Entity/JobItem.php
+++ b/src/Entity/JobItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Entity;
 
+use Drupal\tmgmt\SegmenterInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Json;
@@ -396,7 +397,7 @@ class JobItem extends ContentEntityBase implements JobItemInterface {
   public function getSourceData() {
     if ($plugin = $this->getSourcePlugin()) {
       $data = $plugin->getData($this);
-      /** @var \Drupal\tmgmt\SegmenterInterface $segmenter */
+      /** @var SegmenterInterface $segmenter */
       $segmenter = \Drupal::service('tmgmt.segmenter');
       return $segmenter->getSegmentedData($data);
     }
@@ -664,7 +665,7 @@ class JobItem extends ContentEntityBase implements JobItemInterface {
    *   TMGMT_DATA_ITEM_STATE_PRELIMINARY or TMGMT_DATA_ITEM_STATE_REVIEWED to
    *   set it to that value. Other statuses are not supported.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If is given an unsupported status.
    */
   protected function addTranslatedDataRecursive(array $translation, $key = array(), $status = NULL) {
@@ -1156,14 +1157,14 @@ class JobItem extends ContentEntityBase implements JobItemInterface {
       static::STATE_ACTIVE => [
         'label' => t('In progress'),
         'type' => 'state',
-        'icon' => drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg',
+        'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg',
         'weight' => 0,
         'show_job_filter' => TRUE,
       ],
       static::STATE_REVIEW => [
         'label' => t('Needs review'),
         'type' => 'state',
-        'icon' => drupal_get_path('module', 'tmgmt') . '/icons/ready.svg',
+        'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg',
         'weight' => 5,
         'show_job_filter' => TRUE,
       ],
@@ -1180,7 +1181,7 @@ class JobItem extends ContentEntityBase implements JobItemInterface {
       static::STATE_INACTIVE => [
         'label' => t('Inactive'),
         'type' => 'state',
-        'icon' => drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg',
+        'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg',
         'weight' => 20,
       ],
     ];
diff --git a/src/Entity/ListBuilder/TranslatorListBuilder.php b/src/Entity/ListBuilder/TranslatorListBuilder.php
index 5c23f2ce..1a227e27 100644
--- a/src/Entity/ListBuilder/TranslatorListBuilder.php
+++ b/src/Entity/ListBuilder/TranslatorListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Entity\ListBuilder;
 
+use Drupal\tmgmt\Entity\Translator;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilderInterface;
@@ -18,25 +19,25 @@ class TranslatorListBuilder extends DraggableListBuilder implements EntityListBu
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\tmgmt\TranslatorManager $translatorManager
+   * @var TranslatorManager $translatorManager
    */
   protected $translatorManager;
 
   /**
    * Constructs a TranslatorListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The config storage definition.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The language manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, TranslatorManager $translator_manager) {
@@ -48,9 +49,9 @@ class TranslatorListBuilder extends DraggableListBuilder implements EntityListBu
   /**
    * Creates the instance of the list builder.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container entity.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type which should be created.
    *
    * @return TranslatorListBuilder
@@ -104,12 +105,12 @@ class TranslatorListBuilder extends DraggableListBuilder implements EntityListBu
     $row['label'] = $entity->label();
 
     // Add provider logo.
-    /** @var \Drupal\tmgmt\Entity\Translator $entity */
+    /** @var Translator $entity */
     $definition = \Drupal::service('plugin.manager.tmgmt.translator')->getDefinition($entity->getPluginId());
     if (isset($definition['logo'])) {
       $logo_render_array = [
         '#theme' => 'image',
-        '#uri' => file_create_url(drupal_get_path('module', $definition['provider']) . '/' . $definition['logo']),
+        '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath($definition['provider']) . '/' . $definition['logo']),
         '#alt' => $definition['label'],
         '#title' => $definition['label'],
         '#attributes' => [
diff --git a/src/Entity/Translator.php b/src/Entity/Translator.php
index 4d68abb3..4341aaae 100644
--- a/src/Entity/Translator.php
+++ b/src/Entity/Translator.php
@@ -255,7 +255,7 @@ class Translator extends ConfigEntityBase implements TranslatorInterface {
         ->condition('translator', $key)
         ->execute();
       $jobs = Job::loadMultiple($job_ids);
-      /** @var \Drupal\tmgmt\JobInterface $job */
+      /** @var JobInterface $job */
       foreach ($jobs as $job) {
         $job->aborted('Job has been aborted because the translation provider %provider was deleted.', ['%provider' => $job->getTranslatorLabel()]);
       }
diff --git a/src/Events/ShouldCreateJobEvent.php b/src/Events/ShouldCreateJobEvent.php
index abae9e30..478f20ae 100644
--- a/src/Events/ShouldCreateJobEvent.php
+++ b/src/Events/ShouldCreateJobEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\tmgmt\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\tmgmt\JobInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Represents a job item about to be added to a continuous job.
@@ -15,7 +15,7 @@ class ShouldCreateJobEvent extends Event {
   /**
    *  Continuous job entity.
    *
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $job;
 
@@ -50,7 +50,7 @@ class ShouldCreateJobEvent extends Event {
   /**
    * ShouldCreateJobEvent constructor.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Continuous job.
    * @param string $plugin
    *   The plugin name.
@@ -72,7 +72,7 @@ class ShouldCreateJobEvent extends Event {
   /**
    * Gets the job entity.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The Job object.
    */
   public function getJob() {
diff --git a/src/Form/CartForm.php b/src/Form/CartForm.php
index 48076239..dd72da26 100644
--- a/src/Form/CartForm.php
+++ b/src/Form/CartForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\JobItemInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Link;
 use Drupal\tmgmt\Entity\JobItem;
@@ -167,7 +168,7 @@ class CartForm extends FormBase {
 
         $job = tmgmt_job_create($source_language, $target_language, $this->currentUser()->id());
         $job_empty = TRUE;
-        /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+        /** @var JobItemInterface $job_item */
         foreach ($job_items as $id => $job_item) {
           try {
             // As the same item might be added to multiple jobs, we need to
diff --git a/src/Form/ContinuousJobForm.php b/src/Form/ContinuousJobForm.php
index 014acf3b..296e91ab 100644
--- a/src/Form/ContinuousJobForm.php
+++ b/src/Form/ContinuousJobForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\JobInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -17,7 +18,7 @@ use Drupal\tmgmt\Entity\Job;
 class ContinuousJobForm extends JobForm {
 
   /**
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $entity;
 
@@ -83,7 +84,7 @@ class ContinuousJobForm extends JobForm {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
@@ -124,10 +125,10 @@ class ContinuousJobForm extends JobForm {
   /**
    * Custom access check for continuous job form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Returns allowed if we have a translator with ContinuousSourceInterface
    *   and the logged in user has permission to create translation jobs.
    */
diff --git a/src/Form/JobAbortForm.php b/src/Form/JobAbortForm.php
index 6c7a108b..4a5aa151 100644
--- a/src/Form/JobAbortForm.php
+++ b/src/Form/JobAbortForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\Entity\Job;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -35,7 +36,7 @@ class JobAbortForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\Entity\Job $entity */
+    /** @var Job $entity */
     $entity = $this->entity;
     // It would make more sense to not display the button for the action,
     // however we do not know if the translator is able to abort a job until
diff --git a/src/Form/JobForm.php b/src/Form/JobForm.php
index 4c9bb0aa..14c033c2 100644
--- a/src/Form/JobForm.php
+++ b/src/Form/JobForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\JobQueue;
+use Drupal\tmgmt\Entity\Translator;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InsertCommand;
 use Drupal\Core\Ajax\InvokeCommand;
@@ -29,17 +31,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class JobForm extends TmgmtFormBase {
 
   /**
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $entity;
 
   /**
-   * @var \Drupal\tmgmt\JobQueue
+   * @var JobQueue
    */
   protected $jobQueue;
 
   /**
-   * @var \Drupal\tmgmt\JobCheckoutManager
+   * @var JobCheckoutManager
    */
   protected $jobCheckoutManager;
 
@@ -427,12 +429,12 @@ class JobForm extends TmgmtFormBase {
       );
 
       // Add the provider logo in the settings wrapper.
-      /** @var \Drupal\tmgmt\Entity\Translator $entity */
+      /** @var Translator $entity */
       $definition = \Drupal::service('plugin.manager.tmgmt.translator')->getDefinition($job->getTranslatorPlugin()->getPluginId());
       if (isset($definition['logo'])) {
         $form['translator_wrapper']['logo'] = $logo_render_array = [
           '#theme' => 'image',
-          '#uri' => file_create_url(drupal_get_path('module', $definition['provider']) . '/' . $definition['logo']),
+          '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath($definition['provider']) . '/' . $definition['logo']),
           '#alt' => $definition['label'],
           '#title' => $definition['label'],
           '#attributes' => [
@@ -569,7 +571,7 @@ class JobForm extends TmgmtFormBase {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = parent::validateForm($form, $form_state);
     if ($job->hasTranslator()) {
       $translator = $job->getTranslator();
@@ -600,7 +602,7 @@ class JobForm extends TmgmtFormBase {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = parent::buildEntity($form, $form_state);
 
     if ($job->hasTranslator()) {
@@ -871,10 +873,10 @@ class JobForm extends TmgmtFormBase {
   /**
    * Builds a message on conflicting job items.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job to build the message for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   Either a message with the inforamtion about the conflicting items or
    *   null if there are none.
    */
diff --git a/src/Form/JobItemAbortForm.php b/src/Form/JobItemAbortForm.php
index 38d025b2..45d5a52a 100644
--- a/src/Form/JobItemAbortForm.php
+++ b/src/Form/JobItemAbortForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\TMGMTException;
@@ -36,7 +37,7 @@ class JobItemAbortForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\Entity\JobItem $entity */
+    /** @var JobItem $entity */
     $entity = $this->entity;
     try {
       if (!$entity->abortTranslation()) {
diff --git a/src/Form/JobItemForm.php b/src/Form/JobItemForm.php
index a0cc02ef..b465e244 100644
--- a/src/Form/JobItemForm.php
+++ b/src/Form/JobItemForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\JobItemInterface;
+use Drupal\tmgmt\SegmenterInterface;
 use Drupal\Component\Diff\Diff;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
@@ -27,7 +29,7 @@ use Drupal\views\Entity\View;
 class JobItemForm extends TmgmtFormBase {
 
   /**
-   * @var \Drupal\tmgmt\JobItemInterface
+   * @var JobItemInterface
    */
   protected $entity;
 
@@ -290,7 +292,7 @@ class JobItemForm extends TmgmtFormBase {
         $form_state->setError($form['review'][$group_key][$parent_key][$key]['translation'], $this->t('The field is empty.'));
         continue;
       }
-      /** @var \Drupal\tmgmt\SegmenterInterface $segmenter */
+      /** @var SegmenterInterface $segmenter */
       $segmenter = \Drupal::service('tmgmt.segmenter');
       $segmenter->validateFormTranslation($form_state, $form['review'][$group_key][$parent_key][$key]['translation'], $this->getEntity());
     }
@@ -304,7 +306,7 @@ class JobItemForm extends TmgmtFormBase {
    *
    * @param array $element
    *   The input element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateMaxLength(array $element, FormStateInterface &$form_state) {
@@ -394,7 +396,7 @@ class JobItemForm extends TmgmtFormBase {
    * @todo Mention in the api documentation that the char '|' is not allowed in
    * field names.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $data
    *   Flattened array of translation data items.
@@ -459,7 +461,7 @@ class JobItemForm extends TmgmtFormBase {
         // Check if the field has a text format attached and check access.
         if (!empty($data_item['#format'])) {
           $format_id = $data_item['#format'];
-          /** @var \Drupal\filter\Entity\FilterFormat $format */
+          /** @var FilterFormat $format */
           $format = FilterFormat::load($format_id);
 
           if (!$format || !$format->access('use')) {
@@ -534,16 +536,16 @@ class JobItemForm extends TmgmtFormBase {
         break;
       case TMGMT_DATA_ITEM_STATE_REVIEWED:
         $title = t('Reviewed');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg';
         break;
       case TMGMT_DATA_ITEM_STATE_TRANSLATED:
         $title = t('Translated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
         break;
       case TMGMT_DATA_ITEM_STATE_PENDING:
       default:
         $title = t('Pending');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg';
         break;
     }
 
@@ -683,7 +685,7 @@ class JobItemForm extends TmgmtFormBase {
    *
    * @param array $data
    *   The data items.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function trackChangedSource(array $data, FormStateInterface $form_state) {
@@ -850,7 +852,7 @@ class JobItemForm extends TmgmtFormBase {
    *
    * @param array $item_element
    *   The form element for the data item.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $field_name
    *   The name of the form element.
@@ -962,7 +964,7 @@ class JobItemForm extends TmgmtFormBase {
    *   The data item.
    * @param int $rows
    *   The number of rows that should be displayed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param bool $is_preliminary
    *   TRUE is the data item is in the PRELIMINARY STATE, FALSE otherwise.
@@ -1040,7 +1042,7 @@ class JobItemForm extends TmgmtFormBase {
    *   The data item.
    * @param int $rows
    *   The number of rows that should be displayed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
diff --git a/src/Form/JobResubmitForm.php b/src/Form/JobResubmitForm.php
index 83cde288..83314865 100644
--- a/src/Form/JobResubmitForm.php
+++ b/src/Form/JobResubmitForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\JobItemInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -36,7 +37,7 @@ class JobResubmitForm extends ContentEntityConfirmFormBase {
     $new_job = $this->entity->cloneAsUnprocessed();
     $new_job->uid = $this->currentUser()->id();
     $new_job->save();
-    /** @var \Drupal\tmgmt\JobItemInterface $item */
+    /** @var JobItemInterface $item */
     foreach ($this->entity->getItems() as $item) {
       $item_to_resubmit = $item->cloneAsActive();
       $new_job->addExistingItem($item_to_resubmit);
diff --git a/src/Form/SourceOverviewForm.php b/src/Form/SourceOverviewForm.php
index 4b5f0a0f..947b9178 100644
--- a/src/Form/SourceOverviewForm.php
+++ b/src/Form/SourceOverviewForm.php
@@ -25,23 +25,23 @@ class SourceOverviewForm extends FormBase {
   /**
    * The source manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourceManager;
 
   /**
    * The continuous manager.
    *
-   * @var \Drupal\tmgmt\ContinuousManager
+   * @var ContinuousManager
    */
   protected $continuousManager;
 
   /**
    * Constructs a new SourceLocalTasks object.
    *
-   * @param \Drupal\tmgmt\SourceManager $source_manager
+   * @param SourceManager $source_manager
    *   The source manager.
-   * @param \Drupal\tmgmt\ContinuousManager $continuous_manager
+   * @param ContinuousManager $continuous_manager
    *   The continuous manager.
    */
   public function __construct(SourceManager $source_manager, ContinuousManager $continuous_manager) {
@@ -301,7 +301,7 @@ class SourceOverviewForm extends FormBase {
    * Gets the url when selecting a source type.
    *
    * @param string $source
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getUrlForSource($source) {
     list($selected_plugin, $selected_item_type) = explode(':', $source);
@@ -313,7 +313,7 @@ class SourceOverviewForm extends FormBase {
    *
    * @param array $form
    *   An associate array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateItemsSelected(array $form, FormStateInterface $form_state) {
diff --git a/src/Form/TmgmtFormBase.php b/src/Form/TmgmtFormBase.php
index c4fa2e18..f55fd361 100644
--- a/src/Form/TmgmtFormBase.php
+++ b/src/Form/TmgmtFormBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\TranslatorManager;
+use Drupal\tmgmt\SourceManager;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -15,28 +19,28 @@ class TmgmtFormBase extends ContentEntityForm {
   /**
    * Translator plugin manager.
    *
-   * @var \Drupal\tmgmt\TranslatorManager
+   * @var TranslatorManager
    */
   protected $translatorManager;
 
   /**
    * Source plugin manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourceManager;
 
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
diff --git a/src/Form/TranslatorForm.php b/src/Form/TranslatorForm.php
index d9f1bf6e..22958f9d 100644
--- a/src/Form/TranslatorForm.php
+++ b/src/Form/TranslatorForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Form;
 
+use Drupal\tmgmt\TranslatorInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\tmgmt\SourceManager;
@@ -18,21 +19,21 @@ use Drupal\Core\Render\Element;
 class TranslatorForm extends EntityForm {
 
   /**
-   * @var \Drupal\tmgmt\TranslatorInterface
+   * @var TranslatorInterface
    */
   protected $entity;
 
   /**
    * Translator plugin manager.
    *
-   * @var \Drupal\tmgmt\TranslatorManager
+   * @var TranslatorManager
    */
   protected $translatorManager;
 
   /**
    * Source plugin manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourceManager;
 
@@ -41,7 +42,7 @@ class TranslatorForm extends EntityForm {
    *
    * @param \Drupal\Core\Extension\ModuleHandlerInterface
    *   The module handler service.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The translator plugin manager.
    */
   public function __construct(TranslatorManager $translator_manager, SourceManager $source_manager) {
@@ -143,7 +144,7 @@ class TranslatorForm extends EntityForm {
       if (isset($definition['logo'])) {
         $form['plugin_wrapper']['logo'] = $logo_render_array = [
           '#theme' => 'image',
-          '#uri' => file_create_url(drupal_get_path('module', $definition['provider']) . '/' . $definition['logo']),
+          '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath($definition['provider']) . '/' . $definition['logo']),
           '#alt' => $definition['label'],
           '#title' => $definition['label'],
           '#attributes' => [
@@ -210,7 +211,7 @@ class TranslatorForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the initial structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public static function updateRemoteLanguagesMappings(array $form, FormStateInterface $form_state) {
diff --git a/src/JobCheckoutManager.php b/src/JobCheckoutManager.php
index ba39f3c2..eb786f61 100644
--- a/src/JobCheckoutManager.php
+++ b/src/JobCheckoutManager.php
@@ -23,27 +23,27 @@ class JobCheckoutManager {
   use MessengerTrait;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\tmgmt\JobQueue
+   * @var JobQueue
    */
   protected $jobQueue;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -58,9 +58,9 @@ class JobCheckoutManager {
   /**
    * Attempts to checkout a number of jobs and prepare the necessary redirects.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state array, used to set the initial redirect.
-   * @param \Drupal\tmgmt\JobInterface[] $jobs
+   * @param JobInterface[] $jobs
    *   Array of jobs to attempt checkout
    *
    * @ingroup tmgmt_job
@@ -127,14 +127,14 @@ class JobCheckoutManager {
    * Performs a number of checks on each job and also allows to alter the
    * behavior through hooks.
    *
-   * @param \Drupal\tmgmt\JobInterface[] $jobs
+   * @param JobInterface[] $jobs
    *   The jobs to be checked out.
    * @param bool $skip_request_translation
    *   (optional) If TRUE, the jobs that can be submitted immediately will be
    *   prepared but not submitted yet. They will not be returned, the caller
    *   is responsible for submitting them.
    *
-   * @return \Drupal\tmgmt\JobInterface[]
+   * @return JobInterface[]
    *   List of jobs that have not been submitted immediately and need to be
    *   processed.
    *
@@ -194,7 +194,7 @@ class JobCheckoutManager {
    * The current checks include if there is more than one translator available,
    * if he has settings and if the job has a fixed target language.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job item.
    *
    * @return bool
@@ -245,7 +245,7 @@ class JobCheckoutManager {
    *   (optional) A template job to use for the translator and settings.
    */
   public function doBatchSubmit($job_id, $template_job_id = NULL) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = $this->entityTypeManager->getStorage('tmgmt_job')->load($job_id);
     if (!$job) {
       return;
@@ -264,7 +264,7 @@ class JobCheckoutManager {
     }
 
     if ($template_job_id && $job_id != $template_job_id) {
-      /** @var \Drupal\tmgmt\JobInterface $template_job */
+      /** @var JobInterface $template_job */
       $template_job = $this->entityTypeManager->getStorage('tmgmt_job')->load($template_job_id);
       if ($template_job) {
         $job->set('translator', $template_job->getTranslatorId());
@@ -319,7 +319,7 @@ class JobCheckoutManager {
    * Requests translations for a job and prints messages which have happened since
    * then.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job object for which translations should be requested.
    *
    * @return bool
diff --git a/src/JobInterface.php b/src/JobInterface.php
index e382f91d..1d5d0525 100644
--- a/src/JobInterface.php
+++ b/src/JobInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\tmgmt\Entity\Translator;
+use Drupal\tmgmt\Translator\TranslatableResult;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\EntityOwnerInterface;
@@ -90,7 +94,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Returns the target language.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   The target language.
    */
   public function getTargetLanguage();
@@ -106,7 +110,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Returns the source language.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   The source language.
    */
   public function getSourceLanguage();
@@ -174,10 +178,10 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
    * @param string $item_id
    *   The source item id.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   The job item that was added to the job or FALSE if it couldn't be saved.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   On zero item word count.
    */
   public function addItem($plugin, $item_type, $item_id);
@@ -185,7 +189,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Add a givenJobItem to this job.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item to add.
    */
   public function addExistingItem(JobItemInterface $item);
@@ -214,7 +218,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
    * @param array $conditions
    *   Additional conditions.
    *
-   * @return \Drupal\tmgmt\JobItemInterface[]
+   * @return JobItemInterface[]
    *   An array of translation job items.
    */
   public function getItems($conditions = array());
@@ -229,7 +233,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
    * @param string $item_id
    *   Source item ID.
    *
-   * @return \Drupal\tmgmt\JobItemInterface|null
+   * @return JobItemInterface|null
    *   The most recent job item that matches that source or NULL if none
    *   exists.
    */
@@ -241,7 +245,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
    * @param array $conditions
    *   Additional conditions.
    *
-   * @return \Drupal\tmgmt\MessageInterface[]
+   * @return MessageInterface[]
    *   An array of translation job messages.
    */
   public function getMessages($conditions = array());
@@ -255,7 +259,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
    *   (Optional) Messages need to have a newer timestamp than $time. Defaults
    *   to REQUEST_TIME.
    *
-   * @return \Drupal\tmgmt\MessageInterface[]
+   * @return MessageInterface[]
    *   An array of translation job messages.
    */
   public function getMessagesSince($time = NULL);
@@ -309,7 +313,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Returns the label of the translator for this job.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The label of the translator, "(Missing)" in case the translator has
    *   been deleted or "(Undefined)" in case the translator is not set.
    */
@@ -318,10 +322,10 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Returns the translator for this job.
    *
-   * @return \Drupal\tmgmt\Entity\Translator
+   * @return Translator
    *   The translator entity.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   Throws an exception when there is no translator assigned or when the
    *   translator is missing the plugin.
    */
@@ -443,7 +447,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Checks whether a job is translatable.
    *
-   * @return \Drupal\tmgmt\Translator\TranslatableResult
+   * @return TranslatableResult
    *   Whether the job can be translated or not.
    */
   public function canRequestTranslation();
@@ -573,10 +577,10 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Returns the translator plugin of the translator of this job.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginInterface
+   * @return TranslatorPluginInterface
    *   The translator plugin instance.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   Throws an exception when there is no translator assigned or when the
    *   translator is missing the plugin.
    */
@@ -663,7 +667,7 @@ interface JobInterface extends ContentEntityInterface, EntityOwnerInterface {
    *   TMGMT_DATA_ITEM_STATE_PRELIMINARY to set it to that value.
    *   Other statuses are not supported.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If is given an unsupported status.
    */
   public function addTranslatedData(array $data, $key = NULL, $status = NULL);
diff --git a/src/JobItemCart.php b/src/JobItemCart.php
index 9456f25e..1196d4c8 100644
--- a/src/JobItemCart.php
+++ b/src/JobItemCart.php
@@ -41,7 +41,7 @@ class JobItemCart {
   /**
    * Adds existing job items into the cart.
    *
-   * @param \Drupal\tmgmt\JobItemInterface[] $items
+   * @param JobItemInterface[] $items
    *   Job items to be added.
    */
   public function addExistingJobItems(array $items) {
@@ -109,11 +109,11 @@ class JobItemCart {
   }
 
   /**
-   * Gets job items in the cart.
-   *
-   * @return \Drupal\tmgmt\JobItemInterface[] $items
-   *   Job items in the cart.
-   */
+  * Gets job items in the cart.
+  *
+   * @return JobItemInterface[] $items
+    Job items in the cart.
+  */
   public function getJobItemsFromCart() {
     return JobItem::loadMultiple($this->cart);
   }
diff --git a/src/JobItemInterface.php b/src/JobItemInterface.php
index 5eb336aa..adc03764 100644
--- a/src/JobItemInterface.php
+++ b/src/JobItemInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\Core\Url;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -112,7 +113,7 @@ interface JobItemInterface extends ContentEntityInterface {
   /**
    * Retrieves the path to the source object via the source controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object for the source object.
    */
   public function getSourceUrl();
@@ -125,7 +126,7 @@ interface JobItemInterface extends ContentEntityInterface {
   /**
    * Loads the job entity that this job item is attached to.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The job entity that this job item is attached to or NULL if there is
    *   no job.
    */
@@ -134,7 +135,7 @@ interface JobItemInterface extends ContentEntityInterface {
   /**
    * Returns the translator for this job item.
    *
-   * @return \Drupal\tmgmt\TranslatorInterface
+   * @return TranslatorInterface
    *   The translator entity or NULL if there is none.
    */
   public function getTranslator();
@@ -150,7 +151,7 @@ interface JobItemInterface extends ContentEntityInterface {
   /**
    * Returns the translator plugin of the translator of this job item.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginInterface|null
+   * @return TranslatorPluginInterface|null
    *   The translator plugin instance or NULL if there is none.
    */
   public function getTranslatorPlugin();
@@ -161,7 +162,7 @@ interface JobItemInterface extends ContentEntityInterface {
    * Already accepted job items can not be aborted. Always use this method if
    * you want to abort a translation job item.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If fails to abort the job item.
    */
   public function abortTranslation();
@@ -204,7 +205,7 @@ interface JobItemInterface extends ContentEntityInterface {
   /**
    * Returns an instance of the configured source plugin.
    *
-   * @return \Drupal\tmgmt\SourcePluginInterface
+   * @return SourcePluginInterface
    */
   public function getSourcePlugin();
 
@@ -448,7 +449,7 @@ interface JobItemInterface extends ContentEntityInterface {
    *   TMGMT_DATA_ITEM_STATE_PRELIMINARY to set it to that value.
    *   Other statuses are not supported.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If is given an unsupported status.
    */
   public function addTranslatedData(array $translation, $key = array(), $status = NULL);
diff --git a/src/JobQueue.php b/src/JobQueue.php
index 40e8ed00..8507fd72 100644
--- a/src/JobQueue.php
+++ b/src/JobQueue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\Core\Url;
 use Drupal\tmgmt\Entity\Job;
 
 /**
@@ -60,7 +61,7 @@ class JobQueue {
   /**
    * Initializes the queue with a set of jobs, resets the queue.
    *
-   * @param \Drupal\tmgmt\JobInterface[] $jobs
+   * @param JobInterface[] $jobs
    *   Job jobs to be added.
    * @param string $destination
    *   (optional) A destination to redirect to after the queue is finished.
@@ -99,7 +100,7 @@ class JobQueue {
   /**
    * Remove job jobs from the queue without marking them as processed.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job to be marked as processed.
    */
   public function markJobAsProcessed(JobInterface $job) {
@@ -110,11 +111,11 @@ class JobQueue {
   }
 
   /**
-   * Gets jobs in the queue without removing them from the queue.
-   *
-   * @return \Drupal\tmgmt\JobInterface[] $jobs
-   *   Jobs in the queue.
-   */
+  * Gets jobs in the queue without removing them from the queue.
+  *
+   * @return JobInterface[] $jobs
+    Jobs in the queue.
+  */
   public function getAllJobs() {
     return Job::loadMultiple($this->queue);
   }
@@ -132,7 +133,7 @@ class JobQueue {
   /**
    * Returns the next job from the queue.
    *
-   * @return \Drupal\tmgmt\JobInterface|null
+   * @return JobInterface|null
    *   A job or NULL if the queue is empty.
    */
   public function getNextJob() {
@@ -150,7 +151,7 @@ class JobQueue {
   /**
    * Returns URL from the queue.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   A URL or NULL if the queue is empty.
    */
   public function getNextUrl() {
diff --git a/src/MessageInterface.php b/src/MessageInterface.php
index 4995a99e..a7424769 100644
--- a/src/MessageInterface.php
+++ b/src/MessageInterface.php
@@ -22,7 +22,7 @@ interface MessageInterface extends ContentEntityInterface {
   /**
    * Loads the job entity that this job message is attached to.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The job entity that this job message is attached to or FALSE if there was
    *   a problem.
    */
@@ -31,7 +31,7 @@ interface MessageInterface extends ContentEntityInterface {
   /**
    * Loads the job entity that this job message is attached to.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   The job item entity that this job message is attached to or FALSE if
    *   there was a problem.
    */
diff --git a/src/Plugin/views/field/JobItemState.php b/src/Plugin/views/field/JobItemState.php
index e1f4c1e8..f51a6750 100644
--- a/src/Plugin/views/field/JobItemState.php
+++ b/src/Plugin/views/field/JobItemState.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Plugin\views\field;
 
+use Drupal\tmgmt\JobItemInterface;
 use Drupal\views\Plugin\views\field\NumericField;
 use Drupal\views\ResultRow;
 
@@ -16,7 +17,7 @@ class JobItemState extends NumericField {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_item = $this->getEntity($values);
     return $job_item->getStateIcon();
   }
diff --git a/src/Plugin/views/field/JobState.php b/src/Plugin/views/field/JobState.php
index b31e0e4f..728c83f8 100644
--- a/src/Plugin/views/field/JobState.php
+++ b/src/Plugin/views/field/JobState.php
@@ -17,12 +17,12 @@ class JobState extends NumericField {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = $this->getEntity($values);
     switch ($job->getState()) {
       case JobInterface::STATE_UNPROCESSED:
         $label = t('Unprocessed');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg';
         break;
 
       case JobInterface::STATE_ACTIVE:
@@ -37,17 +37,17 @@ class JobState extends NumericField {
           return $highest_weight_icon;
         }
         $label = t('In progress');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg';
         break;
 
       case JobInterface::STATE_CONTINUOUS:
         $label = t('Continuous');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/continuous.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/continuous.svg';
         break;
 
       case JobInterface::STATE_CONTINUOUS_INACTIVE:
         $label = t('Continuous Inactive');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/continuous_inactive.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/continuous_inactive.svg';
         break;
 
       default:
@@ -58,7 +58,7 @@ class JobState extends NumericField {
     if ($icon && $label) {
       return [
         '#theme' => 'image',
-        '#uri' => file_create_url($icon),
+        '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon),
         '#title' => $label,
         '#alt' => $label,
         '#width' => 16,
diff --git a/src/Plugin/views/field/Translator.php b/src/Plugin/views/field/Translator.php
index c40502dd..ca5c0d21 100644
--- a/src/Plugin/views/field/Translator.php
+++ b/src/Plugin/views/field/Translator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Plugin\views\field;
 
+use Drupal\tmgmt\JobInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
 
@@ -16,7 +17,7 @@ class Translator extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     if ($job = $this->getEntity($values)) {
       return $job->getTranslatorLabel();
     }
diff --git a/src/Plugin/views/filter/JobItemState.php b/src/Plugin/views/filter/JobItemState.php
index 08e8bb65..c380ab44 100644
--- a/src/Plugin/views/filter/JobItemState.php
+++ b/src/Plugin/views/filter/JobItemState.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\tmgmt\Entity\JobItem;
 use Drupal\views\Plugin\views\filter\ManyToOne;
 
@@ -17,7 +18,7 @@ class JobItemState extends ManyToOne {
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
 
diff --git a/src/Plugin/views/filter/JobState.php b/src/Plugin/views/filter/JobState.php
index d1c68082..f776ad2c 100644
--- a/src/Plugin/views/filter/JobState.php
+++ b/src/Plugin/views/filter/JobState.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\tmgmt\ContinuousTranslatorInterface;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
@@ -20,7 +21,7 @@ class JobState extends ManyToOne {
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
 
diff --git a/src/Plugin/views/filter/JobType.php b/src/Plugin/views/filter/JobType.php
index 53852104..49873f77 100644
--- a/src/Plugin/views/filter/JobType.php
+++ b/src/Plugin/views/filter/JobType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt\Plugin\views\filter;
 
+use Drupal\tmgmt\ContinuousManager;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -20,7 +21,7 @@ class JobType extends StringFilter {
   /**
    * The continuous manager.
    *
-   * @var \Drupal\tmgmt\ContinuousManager
+   * @var ContinuousManager
    */
   protected $continuousManager;
 
diff --git a/src/RemoteMappingInterface.php b/src/RemoteMappingInterface.php
index 7eaefc5e..7f4e51f6 100644
--- a/src/RemoteMappingInterface.php
+++ b/src/RemoteMappingInterface.php
@@ -21,7 +21,7 @@ interface RemoteMappingInterface extends ContentEntityInterface {
   /**
    * Gets translation job.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   Returns the translation job.
    */
   public function getJob();
@@ -37,7 +37,7 @@ interface RemoteMappingInterface extends ContentEntityInterface {
   /**
    * Gets translation job item.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   Returns the job item.
    */
   public function getJobItem();
diff --git a/src/SegmenterInterface.php b/src/SegmenterInterface.php
index 2f26f443..1e8f4d15 100644
--- a/src/SegmenterInterface.php
+++ b/src/SegmenterInterface.php
@@ -77,11 +77,11 @@ interface SegmenterInterface {
    *
    * If the form does not validate, it will add the error to the $element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A string with the XML serialized data.
    * @param array $element
    *   The translation element of the form.
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The Job Item.
    */
   public function validateFormTranslation(FormStateInterface &$form_state, $element, JobItemInterface $job_item);
diff --git a/src/SourceManager.php b/src/SourceManager.php
index ae90f638..12f7721b 100644
--- a/src/SourceManager.php
+++ b/src/SourceManager.php
@@ -28,9 +28,9 @@ class SourceManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -45,7 +45,7 @@ class SourceManager extends DefaultPluginManager {
    * @param string $plugin
    *   Name of the source plugin.
    *
-   * @return \Drupal\tmgmt\SourcePluginUiInterface
+   * @return SourcePluginUiInterface
    *   Instance a source plugin UI instance.
    */
   public function createUIInstance($plugin) {
diff --git a/src/SourcePluginInterface.php b/src/SourcePluginInterface.php
index a89d8680..f3c8087a 100644
--- a/src/SourcePluginInterface.php
+++ b/src/SourcePluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\Core\Url;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -14,7 +15,7 @@ interface SourcePluginInterface extends PluginInspectionInterface {
   /**
    * Returns an array with the data structured for translation.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item entity.
    *
    * @see JobItem::getData()
@@ -24,7 +25,7 @@ interface SourcePluginInterface extends PluginInspectionInterface {
   /**
    * Saves a translation.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item entity.
    * @param string $target_langcode
    *   The target language code.
@@ -45,10 +46,10 @@ interface SourcePluginInterface extends PluginInspectionInterface {
   /**
    * Returns the Uri for this job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item entity.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The URL object for the source object.
    */
   public function getUrl(JobItemInterface $job_item);
@@ -69,7 +70,7 @@ interface SourcePluginInterface extends PluginInspectionInterface {
   /**
    * Returns the type of a job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return string
@@ -80,7 +81,7 @@ interface SourcePluginInterface extends PluginInspectionInterface {
   /**
    * Gets language code of the job item source.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return string|false
@@ -94,7 +95,7 @@ interface SourcePluginInterface extends PluginInspectionInterface {
    * Returns language codes that can be used as the source language for a
    * translation job.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return array
diff --git a/src/SourcePluginUiBase.php b/src/SourcePluginUiBase.php
index 7e6091dc..4bc6ea85 100644
--- a/src/SourcePluginUiBase.php
+++ b/src/SourcePluginUiBase.php
@@ -46,7 +46,7 @@ class SourcePluginUiBase extends PluginBase implements SourcePluginUiInterface {
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $type
    *   Entity type.
@@ -80,7 +80,7 @@ class SourcePluginUiBase extends PluginBase implements SourcePluginUiInterface {
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $type
    *   Entity type.
@@ -134,7 +134,7 @@ class SourcePluginUiBase extends PluginBase implements SourcePluginUiInterface {
 
         $job = tmgmt_job_create($source_language, $target_language, \Drupal::currentUser()->id());
         $job_empty = TRUE;
-        /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+        /** @var JobItemInterface $job_item */
         foreach ($job_items as $id => $job_item) {
           try {
             // As the same item might be added to multiple jobs, we need to
@@ -284,7 +284,7 @@ class SourcePluginUiBase extends PluginBase implements SourcePluginUiInterface {
    *
    * @param int $status
    *   The source status: original, missing, current or outofdate.
-   * @param \Drupal\tmgmt\JobItemInterface|NULL $job_item
+   * @param JobItemInterface|NULL $job_item
    *   The existing job item for the source.
    *
    * @return array
@@ -304,7 +304,7 @@ class SourcePluginUiBase extends PluginBase implements SourcePluginUiInterface {
 
       case 'outofdate':
         $label = t('Translation Outdated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/outdated.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/outdated.svg';
         break;
 
       default:
diff --git a/src/SourcePreviewInterface.php b/src/SourcePreviewInterface.php
index c43870f4..e62657a7 100644
--- a/src/SourcePreviewInterface.php
+++ b/src/SourcePreviewInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\Core\Url;
 /**
  * Interface for source plugin controllers they may be previewed.
  *
@@ -12,10 +13,10 @@ interface SourcePreviewInterface {
   /**
    * Returns preview url if preview is supported.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job item.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Url object.
    */
   public function getPreviewUrl(JobItemInterface $job_item);
diff --git a/src/Translator/TranslatorResult.php b/src/Translator/TranslatorResult.php
index 7bfabc50..dd89a788 100644
--- a/src/Translator/TranslatorResult.php
+++ b/src/Translator/TranslatorResult.php
@@ -28,7 +28,7 @@ abstract class TranslatorResult {
    *
    * @param bool $success
    *   Whether or not the check was successful.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $reason
+   * @param TranslatableMarkup|null $reason
    *   The reason in case of an unsuccessful check.
    */
   protected function __construct($success, TranslatableMarkup $reason = NULL) {
@@ -39,7 +39,7 @@ abstract class TranslatorResult {
   /**
    * Returns the reason for an unsuccessful result.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The reason.
    */
   public function getReason() {
@@ -84,7 +84,7 @@ abstract class TranslatorResult {
   /**
    * Returns the object with FALSE and a message.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $reason
+   * @param TranslatableMarkup|null $reason
    *   The reason in case of an unsuccessful check.
    *
    * @return static
diff --git a/src/TranslatorInterface.php b/src/TranslatorInterface.php
index a0a85555..43094803 100644
--- a/src/TranslatorInterface.php
+++ b/src/TranslatorInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\tmgmt\Translator\TranslatableResult;
+use Drupal\tmgmt\Translator\AvailableResult;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -105,7 +107,7 @@ interface TranslatorInterface extends ConfigEntityInterface {
   /**
    * Returns the translator plugin of this translator.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginInterface
+   * @return TranslatorPluginInterface
    *   Returns the TranslatorPluginInterface.
    */
   public function getPlugin();
@@ -163,7 +165,7 @@ interface TranslatorInterface extends ConfigEntityInterface {
    * @param \Drupal\tmgmt\JobInterface Job
    *   The Job entity that should be translated.
    *
-   * @return \Drupal\tmgmt\Translator\TranslatableResult
+   * @return TranslatableResult
    *   TRUE if the job can be processed and translated, FALSE otherwise.
    */
   public function checkTranslatable(JobInterface $job);
@@ -171,7 +173,7 @@ interface TranslatorInterface extends ConfigEntityInterface {
   /**
    * Checks whether a translator is available.
    *
-   * @return \Drupal\tmgmt\Translator\AvailableResult
+   * @return AvailableResult
    *   TRUE if the translator plugin is available, FALSE otherwise.
    */
   public function checkAvailable();
@@ -179,7 +181,7 @@ interface TranslatorInterface extends ConfigEntityInterface {
   /**
    * Returns if the plugin has any settings for this job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The Job entity that should be translated.
    */
   public function hasCheckoutSettings(JobInterface $job);
diff --git a/src/TranslatorManager.php b/src/TranslatorManager.php
index c7406e05..147c4dba 100644
--- a/src/TranslatorManager.php
+++ b/src/TranslatorManager.php
@@ -24,9 +24,9 @@ class TranslatorManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -41,7 +41,7 @@ class TranslatorManager extends DefaultPluginManager {
    * @param string $plugin
    *   Name of the translator plugin.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginUiInterface
+   * @return TranslatorPluginUiInterface
    *   Instance a translator plugin UI instance.
    */
   public function createUIInstance($plugin) {
diff --git a/src/TranslatorPluginInterface.php b/src/TranslatorPluginInterface.php
index 053d80a3..724201b9 100644
--- a/src/TranslatorPluginInterface.php
+++ b/src/TranslatorPluginInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt;
 
+use Drupal\tmgmt\Translator\AvailableResult;
+use Drupal\tmgmt\Translator\TranslatableResult;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -17,7 +19,7 @@ interface TranslatorPluginInterface extends PluginInspectionInterface {
    * @param TranslatorInterface $translator
    *   The translator entity.
    *
-   * @return \Drupal\tmgmt\Translator\AvailableResult
+   * @return AvailableResult
    *   The result of the availability check.
    */
   public function checkAvailable(TranslatorInterface $translator);
@@ -28,10 +30,10 @@ interface TranslatorPluginInterface extends PluginInspectionInterface {
    *
    * @param TranslatorInterface $translator
    *   The Translator entity that should handle the translation.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The Job entity that should be translated.
    *
-   * @return \Drupal\tmgmt\Translator\TranslatableResult
+   * @return TranslatableResult
    *   The result of the translatable check.
    */
   public function checkTranslatable(TranslatorInterface $translator, JobInterface $job);
@@ -90,7 +92,7 @@ interface TranslatorPluginInterface extends PluginInspectionInterface {
    * This info may be used by other plugins to find out what language pairs
    * can handle the translator.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    *   The translator entity.
    *
    * @return array
@@ -115,7 +117,7 @@ interface TranslatorPluginInterface extends PluginInspectionInterface {
    * During the translation process, Job::getItems() will only return job items
    * that are not already fully translated.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job that should be submitted.
    *
    * @see hook_tmgmt_job_before_request_translation()
@@ -128,7 +130,7 @@ interface TranslatorPluginInterface extends PluginInspectionInterface {
   /**
    * Aborts a translation job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job that should have its translation aborted.
    *
    * @return bool
diff --git a/src/TranslatorPluginUiBase.php b/src/TranslatorPluginUiBase.php
index 3467f255..dac22ce3 100644
--- a/src/TranslatorPluginUiBase.php
+++ b/src/TranslatorPluginUiBase.php
@@ -34,7 +34,7 @@ class TranslatorPluginUiBase extends PluginBase implements TranslatorPluginUiInt
   /**
    * Provides a simple wrapper for the checkout info fieldset.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job object.
    * @param $form
    *   Partial form structure to be wrapped in the fieldset.
diff --git a/src/TranslatorPluginUiInterface.php b/src/TranslatorPluginUiInterface.php
index 0143a2b6..30cef6ad 100644
--- a/src/TranslatorPluginUiInterface.php
+++ b/src/TranslatorPluginUiInterface.php
@@ -24,7 +24,7 @@ interface TranslatorPluginUiInterface extends PluginInspectionInterface, PluginF
    * Services based translators with remote states should place a Poll button
    * here to sync the job state.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The translation job.
    */
   public function checkoutInfo(JobInterface $job);
diff --git a/tests/src/Functional/TMGMTUiTest.php b/tests/src/Functional/TMGMTUiTest.php
index 476f3836..862b889b 100644
--- a/tests/src/Functional/TMGMTUiTest.php
+++ b/tests/src/Functional/TMGMTUiTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt\Functional;
 
+use Drupal\tmgmt\JobCheckoutManager;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\tmgmt\Entity\Job;
@@ -100,7 +101,7 @@ class TMGMTUiTest extends TMGMTTestBase {
     $this->assertSession()->pageTextContains(t('@translator can not translate from @source to @target.', array('@translator' => 'Test provider', '@source' => 'English', '@target' => 'Greek')));
 
     // Job still needs to be in state new.
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = \Drupal::entityTypeManager()->getStorage('tmgmt_job')->loadUnchanged($job->id());
     $this->assertTrue($job->isUnprocessed());
 
@@ -114,7 +115,7 @@ class TMGMTUiTest extends TMGMTTestBase {
       'settings[action]' => 'translate',
     );
     $this->submitForm($edit, t('Submit to provider'));
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = \Drupal::entityTypeManager()->getStorage('tmgmt_job')->loadUnchanged($job->id());
     $this->assertTrue($job->isAuthor());
 
@@ -375,7 +376,7 @@ class TMGMTUiTest extends TMGMTTestBase {
   function testCheckoutFunction() {
     $job = $this->createJob();
 
-    /** @var \Drupal\tmgmt\JobCheckoutManager $job_checkout_manager */
+    /** @var JobCheckoutManager $job_checkout_manager */
     $job_checkout_manager = \Drupal::service('tmgmt.job_checkout_manager');
 
     // Check out a job when only the test translator is available. That one has
diff --git a/tests/src/Functional/TmgmtEntityTestTrait.php b/tests/src/Functional/TmgmtEntityTestTrait.php
index 937ce033..29ac6978 100644
--- a/tests/src/Functional/TmgmtEntityTestTrait.php
+++ b/tests/src/Functional/TmgmtEntityTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\comment\Tests\CommentTestTrait;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -155,7 +156,7 @@ trait TmgmtEntityTestTrait {
    * @param string $sourcelang
    *   Source lang of the node to be created.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Newly created node object.
    */
   protected function createTranslatableNode($bundle, $sourcelang = 'en') {
diff --git a/tests/src/Functional/TmgmtTestTrait.php b/tests/src/Functional/TmgmtTestTrait.php
index 1a517a38..b8fbb932 100644
--- a/tests/src/Functional/TmgmtTestTrait.php
+++ b/tests/src/Functional/TmgmtTestTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tmgmt\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\tmgmt\TranslatorInterface;
+use Drupal\tmgmt\JobInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\tmgmt\Entity\Translator;
 use Drupal\tmgmt\JobItemInterface;
@@ -26,7 +29,7 @@ trait TmgmtTestTrait {
   /**
    * Drupal user object created by loginAsAdmin().
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin_user = NULL;
 
@@ -44,7 +47,7 @@ trait TmgmtTestTrait {
   /**
    * Drupal user object created by loginAsTranslator().
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $translator_user = NULL;
 
@@ -112,7 +115,7 @@ trait TmgmtTestTrait {
   /**
    * Creates, saves and returns a translator.
    *
-   * @return \Drupal\tmgmt\TranslatorInterface
+   * @return TranslatorInterface
    */
   function createTranslator(array $values = []) {
     $translator = Translator::create($values + [
@@ -132,7 +135,7 @@ trait TmgmtTestTrait {
   /**
    * Creates, saves and returns a translation job.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    */
   function createJob($source = 'en', $target = 'de', $uid = 1, $values = array())  {
     $job = tmgmt_job_create($source, $target, $uid, $values);
@@ -159,7 +162,7 @@ trait TmgmtTestTrait {
   /**
    * Asserts job item language codes.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job item to check.
    * @param string $expected_source_lang
    *   Expected source language.
diff --git a/tests/src/Functional/TranslatorTest.php b/tests/src/Functional/TranslatorTest.php
index c831694a..1adb8941 100644
--- a/tests/src/Functional/TranslatorTest.php
+++ b/tests/src/Functional/TranslatorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt\Functional;
 
+use Drupal\tmgmt\JobInterface;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
 
@@ -66,7 +67,7 @@ class TranslatorTest extends TMGMTTestBase {
     // Delete a provider using an API call and assert that active job and its
     // job item used by deleted translator were aborted.
     $translator->delete();
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = Job::load($job->id());
     $continuous = Job::load($continuous->id());
     $this->assertEquals(Job::STATE_ABORTED, $job->getState());
diff --git a/tests/src/FunctionalJavascript/TMGMTUiJavascriptTest.php b/tests/src/FunctionalJavascript/TMGMTUiJavascriptTest.php
index 4df8f535..eda1ce62 100644
--- a/tests/src/FunctionalJavascript/TMGMTUiJavascriptTest.php
+++ b/tests/src/FunctionalJavascript/TMGMTUiJavascriptTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt\FunctionalJavascript;
 
+use Drupal\file\FileInterface;
 use Drupal\file\Entity\File;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -24,14 +25,14 @@ class TMGMTUiJavascriptTest extends WebDriverTestBase {
   /**
    * A default translator using the test translator.
    *
-   * @var \Drupal\tmgmt\Entity\Translator
+   * @var Translator
    */
   protected $default_translator;
 
   /**
    * A file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $image;
 
diff --git a/tests/src/Kernel/TMGMTKernelTestBase.php b/tests/src/Kernel/TMGMTKernelTestBase.php
index 83f3b45d..7eb68096 100644
--- a/tests/src/Kernel/TMGMTKernelTestBase.php
+++ b/tests/src/Kernel/TMGMTKernelTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tmgmt\Kernel;
 
+use Drupal\tmgmt\TranslatorInterface;
+use Drupal\tmgmt\JobInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\tmgmt\Entity\Translator;
@@ -15,7 +17,7 @@ abstract class TMGMTKernelTestBase extends KernelTestBase {
   /**
    * A default translator using the test translator.
    *
-   * @var \Drupal\tmgmt\TranslatorInterface
+   * @var TranslatorInterface
    */
   protected $default_translator;
 
@@ -50,7 +52,7 @@ abstract class TMGMTKernelTestBase extends KernelTestBase {
   /**
    * Creates, saves and returns a translator.
    *
-   * @return \Drupal\tmgmt\TranslatorInterface
+   * @return TranslatorInterface
    */
   function createTranslator() {
     $translator = Translator::create([
@@ -68,20 +70,20 @@ abstract class TMGMTKernelTestBase extends KernelTestBase {
   }
 
   /**
-   * Creates, saves and returns a translation job.
-   *
-   * @param string $source
-   *   The source langcode.
-   * @param string $target
-   *   The target langcode.
-   * @param int $uid
-   *   The user ID.
-   * @param array $values
-   *   (Optional) An array of additional entity values.
-   *
-   * @return \Drupal\tmgmt\JobInterface A new job.
-   *   A new job.
-   */
+  * Creates, saves and returns a translation job.
+  *
+  * @param string $source
+  *   The source langcode.
+  * @param string $target
+  *   The target langcode.
+  * @param int $uid
+  *   The user ID.
+  * @param array $values
+  *   (Optional) An array of additional entity values.
+  *
+   * @return JobInterface A new job.
+    A new job.
+  */
   protected function createJob($source = 'en', $target = 'de', $uid = 0, array $values = array()) {
     $job = tmgmt_job_create($source, $target, $uid, $values);
     $this->assertEquals(SAVED_NEW, $job->save());
@@ -107,7 +109,7 @@ abstract class TMGMTKernelTestBase extends KernelTestBase {
   /**
    * Asserts job item language codes.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job item to check.
    * @param string $expected_source_lang
    *   Expected source language.
diff --git a/tmgmt.api.php b/tmgmt.api.php
index 971dec09..4a6db25a 100644
--- a/tmgmt.api.php
+++ b/tmgmt.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\tmgmt\Data;
 /**
  * @file
  * Hooks provided by the Translation Management module.
@@ -30,7 +31,7 @@ function hook_tmgmt_source_plugin_info_alter(&$info) {
  *   translations.
  *   - JobItem A JobItem to check for suggestions.
  *   - ...
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The current translation job to check for additional translation items.
  *
  * @return array
@@ -68,7 +69,6 @@ function hook_tmgmt_translator_plugin_info_alter(&$info) {
 /**
  * @} End of "addtogroup tmgmt_translator".
  */
-
 /**
  * @defgroup tmgmt_job Translation Jobs
  *
@@ -120,7 +120,6 @@ function hook_tmgmt_translator_plugin_info_alter(&$info) {
  * $job->accepted('Optional message');
  * @endcode
  */
-
 /**
  * @defgroup tmgmt_translator Translators
  *
@@ -135,7 +134,6 @@ function hook_tmgmt_translator_plugin_info_alter(&$info) {
  *
  * TBD.
  */
-
 /**
  * @defgroup tmgmt_source Translation source
  *
@@ -158,7 +156,6 @@ function hook_tmgmt_translator_plugin_info_alter(&$info) {
  *   sources in their implementation of
  *   SourcePluginControllerInterface::saveTranslation().
  */
-
 /**
  * @defgroup tmgmt_remote_languages_mapping Remote languages mapping
  *
@@ -210,7 +207,6 @@ function hook_tmgmt_translator_plugin_info_alter(&$info) {
  * request in the TranslatorPluginControllerInterface::requestTranslation()
  * plugin implementation.
  */
-
 /**
  * @defgroup tmgmt_cart Translation cart
  *
@@ -223,16 +219,15 @@ function hook_tmgmt_translator_plugin_info_alter(&$info) {
  * tmgmt_add_cart_form() on either the source overview page as well as the
  * translate tab.
  */
-
 /**
  * Allows to alter job checkout workflow before the default behavior kicks in.
  *
  * Note: The default behavior will ignore jobs that have already been checked
  * out. Remove jobs from the array to prevent the default behavior for them.
  *
- * @param \Drupal\tmgmt\JobInterface[] $remaining_jobs
+ * @param JobInterface[] $remaining_jobs
  *   List of redirects the user is supposed to be redirected to.
- * @param \Drupal\tmgmt\JobInterface[] $jobs
+ * @param JobInterface[] $jobs
  *   Array with the translation jobs to be checked out.
  */
 function hook_tmgmt_job_checkout_before_alter(&$remaining_jobs, &$jobs) {
@@ -261,11 +256,11 @@ function hook_tmgmt_job_checkout_after_alter(&$redirects, &$jobs) {
 /**
  * Allows to alter job checkout workflow before the default behavior.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The Job being submitted.
  */
 function hook_tmgmt_job_before_request_translation(JobInterface $job) {
-  /** @var \Drupal\tmgmt\Data $data_service */
+  /** @var Data $data_service */
   $data_service = \Drupal::service('tmgmt.data');
 
   // Do changes to the data for example.
@@ -281,11 +276,11 @@ function hook_tmgmt_job_before_request_translation(JobInterface $job) {
 /**
  * Allows to alter job checkout workflow after the default behavior.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The Job being submitted.
  */
 function hook_tmgmt_job_after_request_translation(JobInterface $job) {
-  /** @var \Drupal\tmgmt\Data $data_service */
+  /** @var Data $data_service */
   $data_service = \Drupal::service('tmgmt.data');
 
   // Reset the previous done changes to the data for example.
diff --git a/tmgmt.install b/tmgmt.install
index 4d17f084..222b6b5b 100644
--- a/tmgmt.install
+++ b/tmgmt.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\tmgmt\JobInterface;
 /**
  * @file
  * Update function for the tmgmt module.
@@ -72,7 +73,7 @@ function tmgmt_update_8004() {
  * Add job items overview.
  */
 function tmgmt_update_8005() {
-  $overview = file_get_contents(drupal_get_path('module', 'tmgmt') . '/config/install/views.view.tmgmt_translation_all_job_items.yml');
+  $overview = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/config/install/views.view.tmgmt_translation_all_job_items.yml');
   $values = Yaml::decode($overview);
   $storage_controller = \Drupal::entityTypeManager()->getStorage('view');
   $storage_controller->create($values)->save();
@@ -96,7 +97,7 @@ function tmgmt_update_8006() {
  */
 function tmgmt_update_8007() {
   $continuous_jobs = \Drupal::entityTypeManager()->getStorage('tmgmt_job')->loadByProperties(['job_type' => Job::TYPE_CONTINUOUS]);
-  /** @var \Drupal\tmgmt\JobInterface $continuous_job */
+  /** @var JobInterface $continuous_job */
   foreach ($continuous_jobs as $continuous_job) {
     $continuous_job->setState(Job::STATE_CONTINUOUS);
   }
diff --git a/tmgmt.module b/tmgmt.module
index 59cc76a3..87b8a38e 100644
--- a/tmgmt.module
+++ b/tmgmt.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\tmgmt\MessageInterface;
+use Drupal\tmgmt\JobItemCart;
 /**
  * @file
  * Main module file for the Translation Management module.
@@ -153,7 +155,6 @@ function tmgmt_available_languages($exclude = array()) {
  * @addtogroup tmgmt_job
  * @{
  */
-
 /**
  * Loads active job entities that have a job item with the identifiers.
  *
@@ -166,7 +167,7 @@ function tmgmt_available_languages($exclude = array()) {
  * @param string $source_language
  *   The source language of the item.
  *
- * @return \Drupal\tmgmt\Entity\JobItem[]
+ * @return JobItem[]
  *   An array of job item entities.
  */
 function tmgmt_job_item_load_latest($plugin, $item_type, $item_id, $source_language) {
@@ -209,7 +210,7 @@ function tmgmt_job_item_load_latest($plugin, $item_type, $item_id, $source_langu
  * @param string $source_language
  *   The source language of the item.
  *
- * @return \Drupal\tmgmt\Entity\JobItem[]
+ * @return JobItem[]
  *   An array of job item entities.
  */
 function tmgmt_job_item_load_all_latest($plugin, $item_type, $item_id, $source_language) {
@@ -248,7 +249,7 @@ function tmgmt_job_item_load_all_latest($plugin, $item_type, $item_id, $source_l
  * @param $account
  *   (Optional) A user object. Defaults to the currently logged in user.
  *
- * @return \Drupal\tmgmt\JobInterface
+ * @return JobInterface
  *   The job entity.
  */
 function tmgmt_job_match_item($source_language, $target_language, $account = NULL) {
@@ -286,20 +287,20 @@ function tmgmt_job_check_finished($tjid) {
 }
 
 /**
- * Creates a translation job.
- *
- * @param string $source_language
- *   The source language from which should be translated.
- * @param string $target_language
- *   The target language into which should be translated.
- * @param int $uid
- *   The user ID.
- * @param array $values
- *   (Optional) An array of additional entity values.
- *
- * @return \Drupal\tmgmt\JobInterface The job entity.
- *   The job entity.
- */
+* Creates a translation job.
+*
+* @param string $source_language
+*   The source language from which should be translated.
+* @param string $target_language
+*   The target language into which should be translated.
+* @param int $uid
+*   The user ID.
+* @param array $values
+*   (Optional) An array of additional entity values.
+*
+* @return JobInterface The job entity.
+ The job entity.
+*/
 function tmgmt_job_create($source_language, $target_language, $uid = 0, array $values = array()) {
   return Job::create(array_merge($values, array(
     'source_language' => $source_language,
@@ -390,7 +391,7 @@ function tmgmt_job_statistic(JobInterface $job, $key) {
  * @param $values
  *   (Optional) An array of additional entity values to be set.
  *
- * @return \Drupal\tmgmt\JobItemInterface
+ * @return JobItemInterface
  *   The created, not yet saved, job item entity.
  */
 function tmgmt_job_item_create($plugin, $item_type, $item_id, array $values = array()) {
@@ -411,7 +412,7 @@ function tmgmt_job_item_create($plugin, $item_type, $item_id, array $values = ar
  * @param $values
  *   (Optional) An array of additional entity values to be set.
  *
- * @return \Drupal\tmgmt\MessageInterface
+ * @return MessageInterface
  *   The created, not yet saved, message entity.
  */
 function tmgmt_message_create($message = '', $variables = array(), $values = array()) {
@@ -428,12 +429,11 @@ function tmgmt_message_create($message = '', $variables = array(), $values = arr
  * @addtogroup tmgmt_translator
  * @{
  */
-
 /**
  * Loads all translators that are available and, if a translation job is given,
  * support translations for that job with its current configuration.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   (Optional) A translation job.
  *
  * @return array
@@ -515,7 +515,7 @@ function tmgmt_translator_labels() {
  * This can either be because the configuration of the passed job is not
  * supported or because the translator service can't be reached.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   (Optional) A translation job.
  *
  * @return array
@@ -525,7 +525,7 @@ function tmgmt_translator_labels_flagged(JobInterface $job = NULL) {
   $labels = array();
   $translators = Translator::loadMultiple();
   uasort($translators, array('Drupal\Core\Config\Entity\ConfigEntityBase', 'sort'));
-  /** @var \Drupal\tmgmt\Entity\Translator $translator */
+  /** @var Translator $translator */
   foreach ($translators as $translator) {
     if (isset($job) && $job->isContinuous() && !($translator->getPlugin() instanceof ContinuousTranslatorInterface)) {
       continue;
@@ -586,7 +586,7 @@ function template_preprocess_tmgmt_data_items_form(&$variables) {
  * Attempts to check out a number of jobs. Performs a number of checks on each
  * job and also allows to alter the behavior through hooks.
  *
- * @param \Drupal\tmgmt\JobInterface[] $jobs
+ * @param JobInterface[] $jobs
  *   The jobs to be checked out.
  *
  * @return
@@ -653,7 +653,7 @@ function tmgmt_job_checkout_multiple(array $jobs) {
  * more than one translator available, if he has settings and if the job has a
  * fixed target language.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The job item
  *
  * @return
@@ -690,7 +690,7 @@ function tmgmt_job_needs_checkout_form(JobInterface $job) {
  * Requests translations for a job and prints messages which have happened since
  * then.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The job object for which translations should be requested.
  *
  * @return
@@ -709,7 +709,7 @@ function tmgmt_job_request_translation(JobInterface $job) {
 /**
  * Print all messages that occurred since our request to the screen.
  *
- * @param \Drupal\tmgmt\JobInterface|\Drupal\tmgmt\JobItemInterface $entity
+ * @param JobInterface|JobItemInterface $entity
  *    The translation job or job item for which the message should be written.
  *
  * @return bool
@@ -750,7 +750,7 @@ function tmgmt_review_form_element_ajaxid($parent_key) {
  */
 function tmgmt_translation_review_form_revert(array $form, FormStateInterface $form_state) {
 
-  /** @var \Drupal\tmgmt\JobItemInterface $item */
+  /** @var JobItemInterface $item */
   $item = $form_state->getFormObject()->getEntity();
 
   $key = \Drupal::service('tmgmt.data')->ensureArrayKey($form_state->getTriggeringElement()['#data_item_key']);
@@ -785,7 +785,7 @@ function tmgmt_translation_review_form_update_state(array $form, FormStateInterf
   $data = array();
   $job_item = $form_state->getFormObject()->getEntity();
 
-  /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+  /** @var JobItemInterface $job_item */
   $plugin = $job_item->getTranslatorPlugin();
   $success = TRUE;
   switch ($matches['action']) {
@@ -944,19 +944,19 @@ function tmgmt_redirect_queue_dequeue() {
 function tmgmt_color_legend() {
   $items = [
     [
-      'icon' => file_create_url('core/misc/icons/bebebe/house.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/bebebe/house.svg'),
       'legend' => t('Original language'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/bebebe/ex.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/bebebe/ex.svg'),
       'legend' => t('Not translated'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/outdated.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/outdated.svg'),
       'legend' => t('Translation Outdated'),
     ],
   ];
@@ -972,7 +972,7 @@ function tmgmt_color_legend() {
   foreach (JobItem::getStateDefinitions() as $state_definition) {
     if (!empty($state_definition['icon'])) {
       $items[] = [
-        'icon' => file_url_transform_relative(file_create_url($state_definition['icon'])),
+        'icon' => \Drupal::service('file_url_generator')->generateString($state_definition['icon']),
         'legend' => $state_definition['label'],
       ];
     }
@@ -1003,7 +1003,7 @@ function tmgmt_color_job_item_legend() {
   foreach (JobItem::getStateDefinitions() as $state_definition) {
     if (!empty($state_definition['icon'])) {
       $items[] = [
-        'icon' => file_url_transform_relative(file_create_url($state_definition['icon'])),
+        'icon' => \Drupal::service('file_url_generator')->generateString($state_definition['icon']),
         'legend' => $state_definition['label'],
       ];
     }
@@ -1030,7 +1030,7 @@ function tmgmt_color_job_item_legend() {
 function tmgmt_color_job_legend() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg'),
       'legend' => t('Unprocessed'),
     ],
   ];
@@ -1038,7 +1038,7 @@ function tmgmt_color_job_legend() {
   foreach (JobItem::getStateDefinitions() as $state_definition) {
     if (!empty($state_definition['icon'])) {
       $items[] = [
-        'icon' => file_url_transform_relative(file_create_url($state_definition['icon'])),
+        'icon' => \Drupal::service('file_url_generator')->generateString($state_definition['icon']),
         'legend' => $state_definition['label'],
       ];
     }
@@ -1046,7 +1046,7 @@ function tmgmt_color_job_legend() {
 
   if (\Drupal::service('tmgmt.continuous')->hasContinuousJobs()) {
     $items[] = [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/continuous.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/continuous.svg'),
       'legend' => t('Continuous'),
     ];
   };
@@ -1072,19 +1072,19 @@ function tmgmt_color_job_legend() {
 function tmgmt_color_review_legend() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg'),
       'legend' => t('Pending'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg'),
       'legend' => t('Reviewed'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Accepted'),
     ],
   ];
@@ -1152,11 +1152,10 @@ function tmgmt_submit_redirect(array $form, FormStateInterface $form_state) {
  * @addtogroup tmgmt_cart
  * @{
  */
-
 /**
  * Returns the cart service.
  *
- * @return \Drupal\tmgmt\JobItemCart
+ * @return JobItemCart
  *   The cart object.
  */
 function tmgmt_cart_get() {
diff --git a/tmgmt.post_update.php b/tmgmt.post_update.php
index efd037a4..f0ad56d8 100644
--- a/tmgmt.post_update.php
+++ b/tmgmt.post_update.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Component\Serialization\Json;
 
 /**
@@ -29,7 +30,7 @@ function tmgmt_post_update_json(&$sandbox = NULL) {
     return;
   }
 
-  /** @var \Drupal\tmgmt\Entity\JobItem[] $job_items */
+  /** @var JobItem[] $job_items */
   $job_items = $job_item_storage->loadMultiple($result);
   foreach ($job_items as $job_item) {
 
diff --git a/tmgmt_test/src/EventSubscriber/TestContinuousEventSubscriber.php b/tmgmt_test/src/EventSubscriber/TestContinuousEventSubscriber.php
index 8fb83337..38b5a39b 100644
--- a/tmgmt_test/src/EventSubscriber/TestContinuousEventSubscriber.php
+++ b/tmgmt_test/src/EventSubscriber/TestContinuousEventSubscriber.php
@@ -18,14 +18,14 @@ class TestContinuousEventSubscriber implements EventSubscriberInterface {
   const DISALLOWED_LABEL = 'Testing SHOULD_CREATE_JOB event';
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * TestContinuousEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -35,7 +35,7 @@ class TestContinuousEventSubscriber implements EventSubscriberInterface {
   /**
    * Do not add the job if we have a filter match.
    *
-   * @param \Drupal\tmgmt\Events\ShouldCreateJobEvent $event
+   * @param ShouldCreateJobEvent $event
    *   The event object.
    */
   public function onShouldCreateJob(ShouldCreateJobEvent $event) {
diff --git a/tmgmt_test/src/Plugin/tmgmt/Source/TestHtmlSource.php b/tmgmt_test/src/Plugin/tmgmt/Source/TestHtmlSource.php
index c3c6c96d..51e800bd 100644
--- a/tmgmt_test/src/Plugin/tmgmt/Source/TestHtmlSource.php
+++ b/tmgmt_test/src/Plugin/tmgmt/Source/TestHtmlSource.php
@@ -22,7 +22,7 @@ class TestHtmlSource extends TestSource {
     return array(
       'dummy' => array(
         'deep_nesting' => array(
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'),
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'),
           '#label' => 'Label for job item with type ' . $job_item->getItemType() . ' and id ' . $job_item->getItemId() . '.',
         ),
       ),
diff --git a/tmgmt_test/src/TestTranslatorUi.php b/tmgmt_test/src/TestTranslatorUi.php
index 8029fe11..007e75e2 100644
--- a/tmgmt_test/src/TestTranslatorUi.php
+++ b/tmgmt_test/src/TestTranslatorUi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_test;
 
+use Drupal\tmgmt\TranslatorInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\JobInterface;
 use Drupal\tmgmt\JobItemInterface;
@@ -18,7 +19,7 @@ class TestTranslatorUi extends TranslatorPluginUiBase {
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
 
-    /** @var \Drupal\tmgmt\TranslatorInterface $test_translator */
+    /** @var TranslatorInterface $test_translator */
     $test_translator = $form_state->getFormObject()->getEntity();
 
     $form['expose_settings'] = array(
diff --git a/tmgmt_test/tmgmt_test.module b/tmgmt_test/tmgmt_test.module
index 41b7758b..07027092 100644
--- a/tmgmt_test/tmgmt_test.module
+++ b/tmgmt_test/tmgmt_test.module
@@ -66,7 +66,7 @@ function tmgmt_test_tmgmt_job_item_state_definitions_alter(&$definitions) {
   $definitions['tmgmt_test_generating'] = [
     'label' => t('Translation is requested from the elders of the Internet'),
     'type' => 'translator_state',
-    'icon' => drupal_get_path('module', 'tmgmt') . '/icons/earth.svg',
+    'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/earth.svg',
     'show_job_filter' => TRUE,
   ];
 }
diff --git a/translators/tmgmt_file/src/Annotation/FormatPlugin.php b/translators/tmgmt_file/src/Annotation/FormatPlugin.php
index 9911efe8..169f80a5 100644
--- a/translators/tmgmt_file/src/Annotation/FormatPlugin.php
+++ b/translators/tmgmt_file/src/Annotation/FormatPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_file\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class FormatPlugin extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/translators/tmgmt_file/src/FileTranslatorUi.php b/translators/tmgmt_file/src/FileTranslatorUi.php
index e504ae21..5480512e 100644
--- a/translators/tmgmt_file/src/FileTranslatorUi.php
+++ b/translators/tmgmt_file/src/FileTranslatorUi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_file;
 
+use Drupal\tmgmt\TranslatorInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
@@ -19,7 +20,7 @@ class FileTranslatorUi extends TranslatorPluginUiBase {
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
 
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
     $form['export_format'] = array(
       '#type' => 'radios',
diff --git a/translators/tmgmt_file/src/Format/FormatManager.php b/translators/tmgmt_file/src/Format/FormatManager.php
index 869bc1ad..030a3017 100644
--- a/translators/tmgmt_file/src/Format/FormatManager.php
+++ b/translators/tmgmt_file/src/Format/FormatManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_file\Format;
 
+use Drupal\tmgmt\SourcePluginUiInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ -28,9 +29,9 @@ class FormatManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -45,7 +46,7 @@ class FormatManager extends DefaultPluginManager {
    * @param string $plugin
    *   Name of the source plugin.
    *
-   * @return \Drupal\tmgmt\SourcePluginUiInterface
+   * @return SourcePluginUiInterface
    *   Instance a source plugin UI instance.
    */
   public function createUIInstance($plugin) {
diff --git a/translators/tmgmt_file/src/Plugin/tmgmt/Translator/FileTranslator.php b/translators/tmgmt_file/src/Plugin/tmgmt/Translator/FileTranslator.php
index 0796b6cd..48c5c87c 100644
--- a/translators/tmgmt_file/src/Plugin/tmgmt/Translator/FileTranslator.php
+++ b/translators/tmgmt_file/src/Plugin/tmgmt/Translator/FileTranslator.php
@@ -39,9 +39,9 @@ class FileTranslator extends TranslatorPluginBase {
     $path = $job->getSetting('scheme') . '://tmgmt_file/' . $name . '.' .  $job->getSetting('export_format');
     $dirname = dirname($path);
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
-      $file = file_save_data($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
       \Drupal::service('file.usage')->add($file, 'tmgmt_file', 'tmgmt_job', $job->id());
-      $job->submitted('Exported file can be downloaded <a href="@link" download>here</a>.', array('@link' => file_create_url($path)));
+      $job->submitted('Exported file can be downloaded <a href="@link" download>here</a>.', array('@link' => \Drupal::service('file_url_generator')->generateAbsoluteString($path)));
     }
     else {
       $job->rejected('Failed to create writable directory @dirname, check file system permissions.', ['@dirname' => $dirname]);
diff --git a/translators/tmgmt_file/src/Plugin/tmgmt_file/Format/Xliff.php b/translators/tmgmt_file/src/Plugin/tmgmt_file/Format/Xliff.php
index a68ca5d5..273df19d 100644
--- a/translators/tmgmt_file/src/Plugin/tmgmt_file/Format/Xliff.php
+++ b/translators/tmgmt_file/src/Plugin/tmgmt_file/Format/Xliff.php
@@ -120,7 +120,7 @@ class Xliff extends \XMLWriter implements FormatInterface {
    *   The unique identifier for this data element.
    * @param $element
    *   Array with the properties #text and optionally #label.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job.
    */
   protected function addTransUnit($key, $element, JobInterface $job) {
@@ -409,7 +409,7 @@ class Xliff extends \XMLWriter implements FormatInterface {
    *
    * @param string $translation
    *   Job data array.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job.
    *
    * @return string
diff --git a/translators/tmgmt_file/tests/src/Functional/FileTranslatorTest.php b/translators/tmgmt_file/tests/src/Functional/FileTranslatorTest.php
index 7dd468bb..34ef0a7d 100644
--- a/translators/tmgmt_file/tests/src/Functional/FileTranslatorTest.php
+++ b/translators/tmgmt_file/tests/src/Functional/FileTranslatorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt_file\Functional;
 
+use Drupal\tmgmt\MessageInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Tests\tmgmt\Functional\TMGMTTestBase;
@@ -49,7 +50,7 @@ class FileTranslatorTest extends TMGMTTestBase {
     ]);
 
     // Get the source text.
-    $source_text = trim(file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'));
+    $source_text = trim(file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'));
 
     // Create the reader instance, it will be used through the tests.
     $reader = new \XMLReader();
@@ -156,7 +157,7 @@ class FileTranslatorTest extends TMGMTTestBase {
     ]);
 
     // Get the source text.
-    $source_text = trim(file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'));
+    $source_text = trim(file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'));
 
     // Create a new job.
     $job = $this->createJob();
@@ -174,7 +175,7 @@ class FileTranslatorTest extends TMGMTTestBase {
 
     $dom = new \DOMDocument();
     $dom->loadXML($xliff);
-    $this->assertTrue($dom->schemaValidate(drupal_get_path('module', 'tmgmt_file') . '/xliff-core-1.2-strict.xsd'));
+    $this->assertTrue($dom->schemaValidate(\Drupal::service('extension.list.module')->getPath('tmgmt_file') . '/xliff-core-1.2-strict.xsd'));
 
     // "Translate" items.
     $xml = simplexml_import_dom($dom);
@@ -298,7 +299,7 @@ class FileTranslatorTest extends TMGMTTestBase {
     \Drupal::state()->set('tmgmt.test_source_data', array(
       'dummy' => array(
         'deep_nesting' => array(
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html') . ' @id.',
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html') . ' @id.',
           '#label' => 'Label of deep nested item @id',
         ),
         '#label' => 'Dummy item',
@@ -327,7 +328,7 @@ class FileTranslatorTest extends TMGMTTestBase {
     $xliff = file_get_contents($download_url);
     $dom = new \DOMDocument();
     $dom->loadXML($xliff);
-    $this->assertTrue($dom->schemaValidate(drupal_get_path('module', 'tmgmt_file') . '/xliff-core-1.2-strict.xsd'));
+    $this->assertTrue($dom->schemaValidate(\Drupal::service('extension.list.module')->getPath('tmgmt_file') . '/xliff-core-1.2-strict.xsd'));
 
     // Build a list of expected note labels.
     $expected_notes = [
@@ -571,7 +572,7 @@ class FileTranslatorTest extends TMGMTTestBase {
   /**
    * Asserts import integrity for a job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job to check.
    * @param bool $expected
    *   (optional) If an integrity failed message is expected or not, defaults
@@ -579,7 +580,7 @@ class FileTranslatorTest extends TMGMTTestBase {
    */
   protected function assertIntegrityCheck(JobInterface $job, $expected = TRUE) {
     $integrity_check_failed = FALSE;
-    /** @var \Drupal\tmgmt\MessageInterface $message */
+    /** @var MessageInterface $message */
     foreach ($job->getMessages() as $message) {
       if ($message->getMessage() == new TranslatableMarkup('Failed to validate semantic integrity of %key element. Please check also the HTML code of the element in the review process.', array('%key' => 'dummy][deep_nesting'))) {
         $integrity_check_failed = TRUE;
diff --git a/translators/tmgmt_file/tmgmt_file.module b/translators/tmgmt_file/tmgmt_file.module
index 065fe350..49cfa307 100644
--- a/translators/tmgmt_file/tmgmt_file.module
+++ b/translators/tmgmt_file/tmgmt_file.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\file\FileUsage\FileUsageInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\Entity\File;
 use Drupal\tmgmt\Entity\Job;
@@ -16,7 +17,7 @@ use Drupal\tmgmt\JobInterface;
 function tmgmt_file_theme() {
   return array(
     'tmgmt_file_html_template' => array(
-      'path' => drupal_get_path('module', 'tmgmt_file') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('tmgmt_file') . '/templates',
       'template' => 'tmgmt_file_html_template',
       'variables' => array('tjid' => NULL, 'source_language' => NULL, 'target_language' => NULL, 'items' => NULL),
     ),
@@ -79,7 +80,7 @@ function tmgmt_file_tmgmt_job_delete(JobInterface $job) {
   $fids = $result->fetchCol();
   if (!empty($fids)) {
     // Remove file usage record.
-    /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+    /** @var FileUsageInterface $file_usage */
     $file_usage = \Drupal::service('file.usage');
     foreach (File::loadMultiple($fids) as $file) {
       $file_usage->delete($file, 'tmgmt_file', 'tmgmt_job', $job->id());
@@ -104,7 +105,7 @@ function tmgmt_file_file_download($uri) {
     ->condition('uri', $uri)
     ->execute();
   if ($fids) {
-    $files = \Drupal\file\Entity\File::loadMultiple($fids);
+    $files = File::loadMultiple($fids);
     foreach ($files as $item) {
       // Since some database servers sometimes use a case-insensitive comparison
       // by default, double check that the filename is an exact match.
diff --git a/translators/tmgmt_local/src/Controller/LocalTaskController.php b/translators/tmgmt_local/src/Controller/LocalTaskController.php
index 3751e816..ccb9eaa2 100644
--- a/translators/tmgmt_local/src/Controller/LocalTaskController.php
+++ b/translators/tmgmt_local/src/Controller/LocalTaskController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\tmgmt_local\LocalTaskInterface;
@@ -17,12 +18,12 @@ class LocalTaskController extends ControllerBase {
   /**
    * Assign this task to the current user and reloads the listing page.
    *
-   * @param \Drupal\tmgmt_local\LocalTaskInterface $tmgmt_local_task
+   * @param LocalTaskInterface $tmgmt_local_task
    *   The task being acted upon.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   Either returns a rebuilt listing page as an AJAX response, or redirects
    *   back to the listing page.
    */
diff --git a/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskItemListBuilder.php b/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskItemListBuilder.php
index 8674a073..58950fbd 100644
--- a/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskItemListBuilder.php
+++ b/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskItemListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Entity\ListBuilder;
 
+use Drupal\tmgmt_local\Entity\LocalTaskItem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -14,7 +15,7 @@ class LocalTaskItemListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   protected function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $entity */
+    /** @var LocalTaskItem $entity */
     $operations = parent::getDefaultOperations($entity);
     if ($entity->access('view', \Drupal::currentUser()) && $entity->getTask()->getAssignee() && $entity->getTask()->getAssignee()->id() == \Drupal::currentUser()->id()) {
       if ($entity->isPending()) {
diff --git a/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskListBuilder.php b/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskListBuilder.php
index 7d3fc266..d4d428f2 100644
--- a/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskListBuilder.php
+++ b/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Entity\ListBuilder;
 
+use Drupal\tmgmt_local\Entity\LocalTask;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\tmgmt_local\LocalTaskInterface;
@@ -16,7 +17,7 @@ class LocalTaskListBuilder extends EntityListBuilder {
    */
   protected function getDefaultOperations(EntityInterface $entity) {
     $operations = parent::getDefaultOperations($entity);
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $entity */
+    /** @var LocalTask $entity */
     if ($entity->access('view')) {
       $operations['view'] = array(
         'title' => $this->t('View'),
diff --git a/translators/tmgmt_local/src/Form/AssignMultiple.php b/translators/tmgmt_local/src/Form/AssignMultiple.php
index a9cc3a73..8a363f48 100644
--- a/translators/tmgmt_local/src/Form/AssignMultiple.php
+++ b/translators/tmgmt_local/src/Form/AssignMultiple.php
@@ -26,14 +26,14 @@ class AssignMultiple extends FormBase {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Constructs a DeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
diff --git a/translators/tmgmt_local/src/Form/LocalTaskAssignForm.php b/translators/tmgmt_local/src/Form/LocalTaskAssignForm.php
index b2c6be32..dd6077a3 100644
--- a/translators/tmgmt_local/src/Form/LocalTaskAssignForm.php
+++ b/translators/tmgmt_local/src/Form/LocalTaskAssignForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Form;
 
+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -48,10 +49,10 @@ class LocalTaskAssignForm extends ContentEntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\user\Entity\User $assignee */
+    /** @var User $assignee */
     $assignee = User::load($form_state->getValue('tuid'));
 
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     $task = $this->getEntity();
     $task->assign($assignee);
     $task->save();
diff --git a/translators/tmgmt_local/src/Form/LocalTaskForm.php b/translators/tmgmt_local/src/Form/LocalTaskForm.php
index 879a2ec4..d341ecc0 100644
--- a/translators/tmgmt_local/src/Form/LocalTaskForm.php
+++ b/translators/tmgmt_local/src/Form/LocalTaskForm.php
@@ -19,7 +19,7 @@ class LocalTaskForm extends ContentEntityForm {
   /**
    * The local task.
    *
-   * @var \Drupal\tmgmt_local\LocalTaskInterface
+   * @var LocalTaskInterface
    */
   protected $entity;
 
@@ -148,7 +148,7 @@ class LocalTaskForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = $this->getEntity();
 
     if (!empty($form_state->getValue('tuid'))) {
diff --git a/translators/tmgmt_local/src/Form/LocalTaskItemForm.php b/translators/tmgmt_local/src/Form/LocalTaskItemForm.php
index 32be8ed5..8334fafb 100644
--- a/translators/tmgmt_local/src/Form/LocalTaskItemForm.php
+++ b/translators/tmgmt_local/src/Form/LocalTaskItemForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\tmgmt_local\Form;
 
+use Drupal\tmgmt_local\Entity\LocalTask;
+use Drupal\tmgmt\Entity\JobItem;
+use Drupal\Core\Url;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Xss;
@@ -25,7 +28,7 @@ class LocalTaskItemForm extends ContentEntityForm {
   /**
    * The task item.
    *
-   * @var \Drupal\tmgmt_local\Entity\LocalTaskItem
+   * @var LocalTaskItem
    */
   protected $entity;
 
@@ -242,7 +245,7 @@ class LocalTaskItemForm extends ContentEntityForm {
         ];
         if (!empty($data[$key]['#format']) && \Drupal::config('tmgmt.settings')->get('respect_text_format') == '1') {
           $format_id = $data[$key]['#format'];
-          /** @var \Drupal\filter\Entity\FilterFormat $format */
+          /** @var FilterFormat $format */
           $format = FilterFormat::load($format_id);
 
           if ($format && $format->access('use')) {
@@ -342,7 +345,7 @@ class LocalTaskItemForm extends ContentEntityForm {
    * Change items to needs review state and task to completed status.
    */
   public function saveAsComplete(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = $this->entity->getTask();
 
     /** @var LocalTaskItem $task_item */
@@ -352,7 +355,7 @@ class LocalTaskItemForm extends ContentEntityForm {
 
     // Mark the task as completed if all assigned job items are at needs done.
     $all_done = TRUE;
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $item */
+    /** @var LocalTaskItem $item */
     foreach ($task->getItems() as $item) {
       if (!$item->isCompleted() && !$item->isClosed()) {
         $all_done = FALSE;
@@ -372,7 +375,7 @@ class LocalTaskItemForm extends ContentEntityForm {
       $form_state->setRedirect($uri->getRouteName(), $uri->getRouteParameters());
     }
 
-    /** @var \Drupal\tmgmt\Entity\JobItem $job_item */
+    /** @var JobItem $job_item */
     $job_item = $this->entity->getJobItem();
 
     // Add the translations to the job item.
@@ -414,7 +417,7 @@ class LocalTaskItemForm extends ContentEntityForm {
   public function submitStatus(array $form, FormStateInterface $form_state) {
     $values = $form_state->getValues();
 
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $item */
+    /** @var LocalTaskItem $item */
     $item = $this->entity;
 
     $action = $form_state->getTriggeringElement()['#tmgmt_local_action'];
@@ -469,7 +472,7 @@ class LocalTaskItemForm extends ContentEntityForm {
 
     $job_item->addTranslatedData($this->prepareData($task_item->getData()), [], TMGMT_DATA_ITEM_STATE_PRELIMINARY);
 
-    /** @var \Drupal\Core\Url $url */
+    /** @var Url $url */
     $url = $job_item->getSourcePlugin()->getPreviewUrl($job_item);
     $form_state->setRedirectUrl($url);
   }
diff --git a/translators/tmgmt_local/src/LocalTaskInterface.php b/translators/tmgmt_local/src/LocalTaskInterface.php
index c45a31db..042aba90 100644
--- a/translators/tmgmt_local/src/LocalTaskInterface.php
+++ b/translators/tmgmt_local/src/LocalTaskInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_local;
 
+use Drupal\tmgmt\JobInterface;
+use Drupal\tmgmt_local\Entity\LocalTaskItem;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -43,7 +45,7 @@ interface LocalTaskInterface extends ContentEntityInterface, EntityChangedInterf
   /**
    * Return the user assigned to this task.
    *
-   * @return \Drupal\Core\Session\AccountInterface|null
+   * @return AccountInterface|null
    *   The user assigned to this task or NULL if there is no user assigned.
    */
   public function getAssignee();
@@ -51,7 +53,7 @@ interface LocalTaskInterface extends ContentEntityInterface, EntityChangedInterf
   /**
    * Return the corresponding translation job.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The job.
    */
   public function getJob();
@@ -59,7 +61,7 @@ interface LocalTaskInterface extends ContentEntityInterface, EntityChangedInterf
   /**
    * Assign translation task to passed user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User object.
    */
   public function assign(AccountInterface $user);
@@ -75,7 +77,7 @@ interface LocalTaskInterface extends ContentEntityInterface, EntityChangedInterf
    * @param array $conditions
    *   Additional conditions.
    *
-   * @return \Drupal\tmgmt_local\Entity\LocalTaskItem[]
+   * @return LocalTaskItem[]
    *   An array of local task items.
    */
   public function getItems($conditions = array());
@@ -83,7 +85,7 @@ interface LocalTaskInterface extends ContentEntityInterface, EntityChangedInterf
   /**
    * Create a task item for this task and the given job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    */
   public function addTaskItem(JobItemInterface $job_item);
@@ -129,7 +131,7 @@ interface LocalTaskInterface extends ContentEntityInterface, EntityChangedInterf
   /**
    * Checks whether the user described by $account is the author of this task.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (Optional) A user object. Defaults to the currently logged in user.
    */
   public function isAuthor(AccountInterface $account = NULL);
diff --git a/translators/tmgmt_local/src/LocalTaskItemInterface.php b/translators/tmgmt_local/src/LocalTaskItemInterface.php
index 2e66e16a..74a0df03 100644
--- a/translators/tmgmt_local/src/LocalTaskItemInterface.php
+++ b/translators/tmgmt_local/src/LocalTaskItemInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_local;
 
+use Drupal\tmgmt_local\Entity\LocalTask;
+use Drupal\tmgmt\JobItemInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 
@@ -35,7 +37,7 @@ interface LocalTaskItemInterface extends ContentEntityInterface, EntityChangedIn
   /**
    * Returns the translation task.
    *
-   * @return \Drupal\tmgmt_local\Entity\LocalTask
+   * @return LocalTask
    *   The LocalTask.
    */
   public function getTask();
@@ -43,7 +45,7 @@ interface LocalTaskItemInterface extends ContentEntityInterface, EntityChangedIn
   /**
    * Returns the translation job item.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   The JobItem.
    */
   public function getJobItem();
diff --git a/translators/tmgmt_local/src/Plugin/Action/AssignTask.php b/translators/tmgmt_local/src/Plugin/Action/AssignTask.php
index 87752557..575feaaa 100644
--- a/translators/tmgmt_local/src/Plugin/Action/AssignTask.php
+++ b/translators/tmgmt_local/src/Plugin/Action/AssignTask.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Plugin\Action;
 
+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -31,7 +32,7 @@ class AssignTask extends ActionBase implements ContainerFactoryPluginInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -44,7 +45,7 @@ class AssignTask extends ActionBase implements ContainerFactoryPluginInterface {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    * @param AccountInterface $current_user
    *   Current user.
@@ -74,7 +75,7 @@ class AssignTask extends ActionBase implements ContainerFactoryPluginInterface {
    */
   public function executeMultiple(array $entities) {
     $info = [];
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     foreach ($entities as $task) {
       $info[$task->id()] = $task;
     }
diff --git a/translators/tmgmt_local/src/Plugin/Action/AssignToMeTask.php b/translators/tmgmt_local/src/Plugin/Action/AssignToMeTask.php
index c0c627d5..2b5029a9 100644
--- a/translators/tmgmt_local/src/Plugin/Action/AssignToMeTask.php
+++ b/translators/tmgmt_local/src/Plugin/Action/AssignToMeTask.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Plugin\Action;
 
+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -34,7 +35,7 @@ class AssignToMeTask extends ActionBase implements ContainerFactoryPluginInterfa
    * {@inheritdoc}
    */
   public function executeMultiple(array $entities) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     foreach ($entities as $task) {
       $task->assign(\Drupal::currentUser());
       $task->save();
diff --git a/translators/tmgmt_local/src/Plugin/Action/UnassignTask.php b/translators/tmgmt_local/src/Plugin/Action/UnassignTask.php
index ebe2f264..19f16bd9 100644
--- a/translators/tmgmt_local/src/Plugin/Action/UnassignTask.php
+++ b/translators/tmgmt_local/src/Plugin/Action/UnassignTask.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Plugin\Action;
 
+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -33,7 +34,7 @@ class UnassignTask extends ActionBase implements ContainerFactoryPluginInterface
    * {@inheritdoc}
    */
   public function executeMultiple(array $entities) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     foreach ($entities as $task) {
       $task->unassign();
       $task->save();
diff --git a/translators/tmgmt_local/src/Plugin/tmgmt/Translator/LocalTranslator.php b/translators/tmgmt_local/src/Plugin/tmgmt/Translator/LocalTranslator.php
index 51fde633..cc18bd1c 100644
--- a/translators/tmgmt_local/src/Plugin/tmgmt/Translator/LocalTranslator.php
+++ b/translators/tmgmt_local/src/Plugin/tmgmt/Translator/LocalTranslator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Plugin\tmgmt\Translator;
 
+use Drupal\tmgmt\Entity\Job;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\tmgmt\ContinuousTranslatorInterface;
@@ -42,12 +43,12 @@ class LocalTranslator extends TranslatorPluginBase implements ContinuousTranslat
    * {@inheritdoc}
    */
   public function requestJobItemsTranslation(array $job_items) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = reset($job_items)->getJob();
     $tuid = $job->getSetting('translator');
 
     // Create local task for this job.
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $local_task */
+    /** @var LocalTaskInterface $local_task */
     $local_task = LocalTask::create(array(
       'uid' => $job->getOwnerId(),
       'tuid' => $tuid,
diff --git a/translators/tmgmt_local/src/Plugin/views/field/ItemCount.php b/translators/tmgmt_local/src/Plugin/views/field/ItemCount.php
index f8e81c5e..0096aff4 100644
--- a/translators/tmgmt_local/src/Plugin/views/field/ItemCount.php
+++ b/translators/tmgmt_local/src/Plugin/views/field/ItemCount.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_local\Plugin\views\field;
 
+use Drupal\views\Plugin\views\query\Sql;
+use Drupal\views\Plugin\views\join\Standard;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\Entity\JobItem;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ -17,7 +19,7 @@ class ItemCount extends FieldPluginBase {
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
 
@@ -76,7 +78,7 @@ class ItemCount extends FieldPluginBase {
         ]
       ];
     }
-    /** @var \Drupal\views\Plugin\views\join\Standard $join */
+    /** @var Standard $join */
     $join = Views::pluginManager('join')->createInstance('standard', $configuration);
 
     // Add the join to the tmgmt_job_item table.
diff --git a/translators/tmgmt_local/src/Plugin/views/field/LoopCount.php b/translators/tmgmt_local/src/Plugin/views/field/LoopCount.php
index ef20d5ba..ccc32763 100644
--- a/translators/tmgmt_local/src/Plugin/views/field/LoopCount.php
+++ b/translators/tmgmt_local/src/Plugin/views/field/LoopCount.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Plugin\views\field;
 
+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
 
@@ -16,7 +17,7 @@ class LoopCount extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $entity */
+    /** @var LocalTaskInterface $entity */
     $entity = $values->_entity;
     return $entity->getLoopCount();
   }
diff --git a/translators/tmgmt_local/src/Plugin/views/field/TaskItemStatus.php b/translators/tmgmt_local/src/Plugin/views/field/TaskItemStatus.php
index 9a9dd058..0d966f13 100644
--- a/translators/tmgmt_local/src/Plugin/views/field/TaskItemStatus.php
+++ b/translators/tmgmt_local/src/Plugin/views/field/TaskItemStatus.php
@@ -21,17 +21,17 @@ class TaskItemStatus extends NumericField {
     switch ($value) {
       case LocalTaskItemInterface::STATUS_PENDING:
         $label = t('Untranslated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
         break;
 
       case LocalTaskItemInterface::STATUS_COMPLETED:
         $label = t('Translated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg';
         break;
 
       case LocalTaskItemInterface::STATUS_REJECTED:
         $label = t('Rejected');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg';
         break;
 
       case LocalTaskItemInterface::STATUS_CLOSED:
@@ -41,13 +41,13 @@ class TaskItemStatus extends NumericField {
 
       default:
         $label = t('Untranslated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
     }
     $element = [
       '#type' => 'inline_template',
       '#template' => '<img src="{{ icon }}" title="{{ label }}"><span></span></img>',
       '#context' => array(
-        'icon' => file_create_url($icon),
+        'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon),
         'label' => $label,
       ),
     ];
diff --git a/translators/tmgmt_local/src/Plugin/views/field/TaskStatus.php b/translators/tmgmt_local/src/Plugin/views/field/TaskStatus.php
index b2d0b219..b427db2f 100644
--- a/translators/tmgmt_local/src/Plugin/views/field/TaskStatus.php
+++ b/translators/tmgmt_local/src/Plugin/views/field/TaskStatus.php
@@ -21,17 +21,17 @@ class TaskStatus extends NumericField {
     switch ($value) {
       case LocalTaskInterface::STATUS_PENDING:
         $label = t('Needs action');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
         break;
 
       case LocalTaskInterface::STATUS_COMPLETED:
         $label = t('In review');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg';
         break;
 
       case LocalTaskInterface::STATUS_REJECTED:
         $label = t('Rejected');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ex-red.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ex-red.svg';
         break;
 
       case LocalTaskInterface::STATUS_CLOSED:
@@ -41,13 +41,13 @@ class TaskStatus extends NumericField {
 
       default:
         $label = t('Unassigned');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg';
     }
     $element = [
       '#type' => 'inline_template',
       '#template' => '<img src="{{ icon }}" title="{{ label }}"><span></span></img>',
       '#context' => array(
-        'icon' => file_create_url($icon),
+        'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon),
         'label' => $label,
       ),
     ];
diff --git a/translators/tmgmt_local/src/Plugin/views/field/WordCount.php b/translators/tmgmt_local/src/Plugin/views/field/WordCount.php
index 306fcc85..70a2cb26 100644
--- a/translators/tmgmt_local/src/Plugin/views/field/WordCount.php
+++ b/translators/tmgmt_local/src/Plugin/views/field/WordCount.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Plugin\views\field;
 
+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\tmgmt\Plugin\views\field\StatisticsBase;
 use Drupal\views\ResultRow;
 
@@ -16,7 +17,7 @@ class WordCount extends StatisticsBase {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $entity */
+    /** @var LocalTaskInterface $entity */
     $entity = $values->_entity;
     return $entity->getWordCount();
   }
diff --git a/translators/tmgmt_local/src/Plugin/views/filter/TaskEligible.php b/translators/tmgmt_local/src/Plugin/views/filter/TaskEligible.php
index ad2c6134..185ca7f1 100644
--- a/translators/tmgmt_local/src/Plugin/views/filter/TaskEligible.php
+++ b/translators/tmgmt_local/src/Plugin/views/filter/TaskEligible.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_local\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\views\Plugin\views\filter\FilterPluginBase;
 
 /**
@@ -16,7 +17,7 @@ class TaskEligible extends FilterPluginBase {
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
 
diff --git a/translators/tmgmt_local/src/Routing/RouteSubscriber.php b/translators/tmgmt_local/src/Routing/RouteSubscriber.php
index 6aef364c..374ebf3f 100644
--- a/translators/tmgmt_local/src/Routing/RouteSubscriber.php
+++ b/translators/tmgmt_local/src/Routing/RouteSubscriber.php
@@ -14,14 +14,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new RouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/translators/tmgmt_local/tests/src/Functional/LocalTranslatorPreviewTest.php b/translators/tmgmt_local/tests/src/Functional/LocalTranslatorPreviewTest.php
index edf996d9..b4cc9e06 100755
--- a/translators/tmgmt_local/tests/src/Functional/LocalTranslatorPreviewTest.php
+++ b/translators/tmgmt_local/tests/src/Functional/LocalTranslatorPreviewTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tmgmt_local\Functional;
 
+use Drupal\tmgmt\JobItemInterface;
 use Drupal\tmgmt\Entity\Translator;
 
 /**
@@ -33,7 +34,7 @@ class LocalTranslatorPreviewTest extends LocalTranslatorTestBase {
     $job = $this->createJob('en', 'de');
     $job->translator = $translator;
     $job->save();
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_item = tmgmt_job_item_create('content', $node->getEntityTypeId(), $node->id(), array('tjid' => $job->id()));
     $job_item->save();
 
diff --git a/translators/tmgmt_local/tests/src/Functional/LocalTranslatorTest.php b/translators/tmgmt_local/tests/src/Functional/LocalTranslatorTest.php
index bd539d47..418874e8 100755
--- a/translators/tmgmt_local/tests/src/Functional/LocalTranslatorTest.php
+++ b/translators/tmgmt_local/tests/src/Functional/LocalTranslatorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tmgmt_local\Functional;
 
+use Drupal\tmgmt_local\Entity\LocalTaskItem;
+use Drupal\tmgmt\JobItemInterface;
+use Drupal\tmgmt\JobInterface;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
@@ -173,7 +176,7 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     \Drupal::state()->set('tmgmt.test_source_data', [
       'dummy' => [
         'deep_nesting' => [
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'),
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'),
           '#label' => 'Label for job item with type test and id 2.',
           '#translate' => TRUE,
           '#format' => 'basic_html',
@@ -356,12 +359,12 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     $this->drupalGet('translate/pending');
     $this->clickLink(t('View'));
     $this->assertNotEmpty(preg_match('|translate/(\d+)|', $this->getUrl(), $matches), 'Task found');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->load($matches[1]);
     $this->assertTrue($task->isPending());
 
     $items = $task->getItems();
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $first_task_item */
+    /** @var LocalTaskItem $first_task_item */
     $first_task_item = reset($items);
     $this->assertTrue($first_task_item->isPending());
 
@@ -438,7 +441,7 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
 
     // Check that the source has not being modified.
     $this->clickLink(t('View'));
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_items = $job->getItems(['tjiid' => 1]);
     $job_item = reset($job_items);
     $source = $job_item->getData(['dummy', 'deep_nesting', '#text']);
@@ -447,7 +450,7 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     // Review and accept the first item.
     \Drupal::entityTypeManager()->getStorage('tmgmt_job_item')->resetCache();
     drupal_static_reset('tmgmt_local_task_statistics_load');
-    /** @var \Drupal\tmgmt\JobItemInterface $item1 */
+    /** @var JobItemInterface $item1 */
     $item1 = JobItem::load(1);
     // The first item should be available for review.
     $this->assertTrue($item1->isNeedsReview(), 'Job item 1 needs review.');
@@ -468,10 +471,10 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     $this->drupalGet('translate/items/1');
     $this->clickLink($task->label());
     // Let's check the task status.
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->loadUnchanged($task->id());
     $this->assertTrue($task->isPending());
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $second_task_item */
+    /** @var LocalTaskItem $second_task_item */
     list($first_task_item, $second_task_item) = array_values($task->getItems());
     $this->assertTrue($first_task_item->isClosed());
 
@@ -512,7 +515,7 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     $this->assertSession()->pageTextContains('The translation for ' . $second_task_item->label() . ' has been saved.');
 
     drupal_static_reset('tmgmt_local_task_statistics_load');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->loadUnchanged($task->id());
     $this->assertTrue($task->isPending());
 
@@ -526,7 +529,7 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
 
     \Drupal::entityTypeManager()->getStorage('tmgmt_local_task_item')->resetCache();
     drupal_static_reset('tmgmt_local_task_statistics_load');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->loadUnchanged($task->id());
     $this->assertTrue($task->isPending());
     list($first_task_item, $second_task_item) = array_values($task->getItems());
@@ -535,9 +538,9 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
 
     // Check the job data.
     \Drupal::entityTypeManager()->getStorage('tmgmt_job_item')->resetCache();
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = Job::load($job->id());
-    /** @var \Drupal\tmgmt\JobItemInterface $item2 */
+    /** @var JobItemInterface $item2 */
     list($item1, $item2) = array_values($job->getItems());
     $this->assertTrue($item1->isAccepted(), 'Job item 1 is accepted.');
     // The first item should be active.
@@ -969,9 +972,9 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     $this->drupalGet('/manage-translate/completed');
     $this->assertTaskStatusIcon(1, 'manage-translate-task', 'completed', 'In review');
     // Accept translation of the job items.
-    /** @var \Drupal\tmgmt\Entity\Job $job1 */
+    /** @var Job $job1 */
     $job1 = Job::load($job->id());
-    /** @var \Drupal\tmgmt\Entity\JobItem $item */
+    /** @var JobItem $item */
     foreach ($job1->getItems() as $item) {
       $item->acceptTranslation();
     }
@@ -1062,7 +1065,7 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     \Drupal::state()->set('tmgmt.test_source_data', [
       'dummy' => [
         'deep_nesting' => [
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'),
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'),
           '#label' => 'Label for job item with type test and id 2.',
           '#translate' => TRUE,
           '#format' => 'basic_html',
@@ -1085,7 +1088,7 @@ class LocalTranslatorTest extends LocalTranslatorTestBase {
     $this->clickLink(t('View'));
     $this->assertSession()->responseContains('views-field-progress">Closed');
     $this->assertNotEmpty(preg_match('|translate/(\d+)|', $this->getUrl(), $matches), 'Task found');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->load($matches[1]);
     $this->assertTrue($task->isPending());
 
diff --git a/translators/tmgmt_local/tmgmt_local.module b/translators/tmgmt_local/tmgmt_local.module
index 0efb2944..97bd4801 100755
--- a/translators/tmgmt_local/tmgmt_local.module
+++ b/translators/tmgmt_local/tmgmt_local.module
@@ -1,4 +1,5 @@
 <?php
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\ProxyClass\Routing\RouteBuilder;
@@ -264,7 +265,7 @@ function tmgmt_local_clear_languages_cache() {
 /**
  * Implements hook_view_access().
  */
-function tmgmt_local_view_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
+function tmgmt_local_view_access(EntityInterface $entity, $operation, AccountInterface $account) {
   if ($entity->id() == 'tmgmt_local_task_overview') {
     switch ($operation) {
       case 'delete':
@@ -704,19 +705,19 @@ function tmgmt_local_rules_component_access($type, $name) {
 function tmgmt_color_legend_local_task_item() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Untranslated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg'),
       'legend' => t('Rejected'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Completed'),
     ],
   ];
@@ -742,23 +743,23 @@ function tmgmt_color_legend_local_task_item() {
 function tmgmt_color_legend_local_task() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg'),
       'legend' => t('Unassigned'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Needs action'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg'),
       'legend' => t('In review'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ex-red.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ex-red.svg'),
       'legend' => t('Rejected'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Closed'),
     ],
   ];
@@ -784,15 +785,15 @@ function tmgmt_color_legend_local_task() {
 function tmgmt_color_local_review_legend() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Untranslated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Accepted'),
     ],
   ];
diff --git a/translators/tmgmt_local/tmgmt_local.post_update.php b/translators/tmgmt_local/tmgmt_local.post_update.php
index 28c18543..66adfb1b 100644
--- a/translators/tmgmt_local/tmgmt_local.post_update.php
+++ b/translators/tmgmt_local/tmgmt_local.post_update.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\tmgmt_local\Entity\LocalTaskItem;
 use Drupal\Component\Serialization\Json;
 
 /**
@@ -29,7 +30,7 @@ function tmgmt_local_post_update_json(&$sandbox = NULL) {
     return;
   }
 
-  /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem[] $task_items */
+  /** @var LocalTaskItem[] $task_items */
   $task_items = $task_item_storage->loadMultiple($result);
   foreach ($task_items as $task_item) {
 
diff --git a/translators/tmgmt_local/tmgmt_local.theme.inc b/translators/tmgmt_local/tmgmt_local.theme.inc
index 38d15a93..45a79531 100644
--- a/translators/tmgmt_local/tmgmt_local.theme.inc
+++ b/translators/tmgmt_local/tmgmt_local.theme.inc
@@ -59,17 +59,17 @@ function template_preprocess_tmgmt_local_translation_form_element_status(array &
       break;
     case TMGMT_DATA_ITEM_STATE_TRANSLATED:
       $title = t('Translated');
-      $icon = drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg';
+      $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg';
       break;
     case TMGMT_DATA_ITEM_STATE_UNTRANSLATED:
     default:
       $title = t('Untranslated');
-      $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+      $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
       break;
   }
   $variables['wrapper_attributes'] = new Attribute([
     'class' => $classes,
   ]);
-  $variables['icon_url'] = file_create_url($icon);
+  $variables['icon_url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($icon);
   $variables['title'] = $title;
 }
