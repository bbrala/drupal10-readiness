modules/contrib/backup_migrate/backup_migrate.install
modules/contrib/backup_migrate/backup_migrate.module
modules/contrib/backup_migrate/backup_migrate.post_update.php
modules/contrib/backup_migrate/src/Controller/BackupController.php
modules/contrib/backup_migrate/src/Controller/DestinationListBuilder.php
modules/contrib/backup_migrate/src/Controller/ScheduleListBuilder.php
modules/contrib/backup_migrate/src/Controller/SettingsProfileListBuilder.php
modules/contrib/backup_migrate/src/Controller/SourceListBuilder.php
modules/contrib/backup_migrate/src/Core/Config/Config.php
modules/contrib/backup_migrate/src/Core/Config/ConfigInterface.php
modules/contrib/backup_migrate/src/Core/Config/ConfigurableInterface.php
modules/contrib/backup_migrate/src/Core/Config/ConfigurableTrait.php
modules/contrib/backup_migrate/src/Core/Config/ValidationError.php
modules/contrib/backup_migrate/src/Core/Config/ValidationErrorInterface.php
modules/contrib/backup_migrate/src/Core/Destination/BrowserDownloadDestination.php
modules/contrib/backup_migrate/src/Core/Destination/DebugDestination.php
modules/contrib/backup_migrate/src/Core/Destination/DestinationBase.php
modules/contrib/backup_migrate/src/Core/Destination/DestinationInterface.php
modules/contrib/backup_migrate/src/Core/Destination/DirectoryDestination.php
modules/contrib/backup_migrate/src/Core/Destination/ListableDestinationInterface.php
modules/contrib/backup_migrate/src/Core/Destination/ReadableDestinationInterface.php
modules/contrib/backup_migrate/src/Core/Destination/RemoteDestinationInterface.php
modules/contrib/backup_migrate/src/Core/Destination/SidecarMetadataDestinationTrait.php
modules/contrib/backup_migrate/src/Core/Destination/StreamDestination.php
modules/contrib/backup_migrate/src/Core/Destination/WritableDestinationInterface.php
modules/contrib/backup_migrate/src/Core/Exception/BackupMigrateException.php
modules/contrib/backup_migrate/src/Core/Exception/DestinationNotWritableException.php
modules/contrib/backup_migrate/src/Core/Exception/HttpClientException.php
modules/contrib/backup_migrate/src/Core/Exception/IgnorableException.php
modules/contrib/backup_migrate/src/Core/File/BackupFile.php
modules/contrib/backup_migrate/src/Core/File/BackupFileInterface.php
modules/contrib/backup_migrate/src/Core/File/BackupFileReadableInterface.php
modules/contrib/backup_migrate/src/Core/File/BackupFileWritableInterface.php
modules/contrib/backup_migrate/src/Core/File/ReadableStreamBackupFile.php
modules/contrib/backup_migrate/src/Core/File/TempFileAdapter.php
modules/contrib/backup_migrate/src/Core/File/TempFileAdapterInterface.php
modules/contrib/backup_migrate/src/Core/File/TempFileManager.php
modules/contrib/backup_migrate/src/Core/File/TempFileManagerInterface.php
modules/contrib/backup_migrate/src/Core/File/WritableStreamBackupFile.php
modules/contrib/backup_migrate/src/Core/Filter/CompressionFilter.php
modules/contrib/backup_migrate/src/Core/Filter/DBExcludeFilter.php
modules/contrib/backup_migrate/src/Core/Filter/FileExcludeFilter.php
modules/contrib/backup_migrate/src/Core/Filter/FileNamer.php
modules/contrib/backup_migrate/src/Core/Filter/MetadataWriter.php
modules/contrib/backup_migrate/src/Core/Filter/Notify.php
modules/contrib/backup_migrate/src/Core/Main/BackupMigrate.php
modules/contrib/backup_migrate/src/Core/Main/BackupMigrateInterface.php
modules/contrib/backup_migrate/src/Core/Plugin/FileProcessorInterface.php
modules/contrib/backup_migrate/src/Core/Plugin/FileProcessorTrait.php
modules/contrib/backup_migrate/src/Core/Plugin/PluginBase.php
modules/contrib/backup_migrate/src/Core/Plugin/PluginCallerInterface.php
modules/contrib/backup_migrate/src/Core/Plugin/PluginCallerTrait.php
modules/contrib/backup_migrate/src/Core/Plugin/PluginInterface.php
modules/contrib/backup_migrate/src/Core/Plugin/PluginManager.php
modules/contrib/backup_migrate/src/Core/Plugin/PluginManagerInterface.php
modules/contrib/backup_migrate/src/Core/Service/ArchiveReaderInterface.php
modules/contrib/backup_migrate/src/Core/Service/ArchiveWriterInterface.php
modules/contrib/backup_migrate/src/Core/Service/ArchiverInterface.php
modules/contrib/backup_migrate/src/Core/Service/HttpClientInterface.php
modules/contrib/backup_migrate/src/Core/Service/Mailer.php
modules/contrib/backup_migrate/src/Core/Service/MailerInterface.php
modules/contrib/backup_migrate/src/Core/Service/PhpCurlHttpClient.php
modules/contrib/backup_migrate/src/Core/Service/ServiceManager.php
modules/contrib/backup_migrate/src/Core/Service/ServiceManagerInterface.php
modules/contrib/backup_migrate/src/Core/Service/StashLogger.php
modules/contrib/backup_migrate/src/Core/Service/TarArchiveReader.php
modules/contrib/backup_migrate/src/Core/Service/TarArchiveWriter.php
modules/contrib/backup_migrate/src/Core/Service/TeeLogger.php
modules/contrib/backup_migrate/src/Core/Source/DatabaseSource.php
modules/contrib/backup_migrate/src/Core/Source/DatabaseSourceInterface.php
modules/contrib/backup_migrate/src/Core/Source/FileDirectorySource.php
modules/contrib/backup_migrate/src/Core/Source/MySQLiSource.php
modules/contrib/backup_migrate/src/Core/Source/SourceBase.php
modules/contrib/backup_migrate/src/Core/Source/SourceInterface.php
modules/contrib/backup_migrate/src/Core/Translation/PassthroughTranslator.php
modules/contrib/backup_migrate/src/Core/Translation/TranslatableInterface.php
modules/contrib/backup_migrate/src/Core/Translation/TranslatableTrait.php
modules/contrib/backup_migrate/src/Core/Translation/TranslatorInterface.php
modules/contrib/backup_migrate/src/Drupal/Config/DrupalConfigHelper.php
modules/contrib/backup_migrate/src/Drupal/Destination/DrupalBrowserDownloadDestination.php
modules/contrib/backup_migrate/src/Drupal/Destination/DrupalBrowserUploadDestination.php
modules/contrib/backup_migrate/src/Drupal/Destination/DrupalDirectoryDestination.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/Annotation/BackupMigrateDestinationPlugin.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/Annotation/BackupMigrateSourcePlugin.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/DestinationPluginBase.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/DestinationPluginInterface.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/DestinationPluginManager.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/SourcePluginBase.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/SourcePluginInterface.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/SourcePluginManager.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/WrapperPluginBase.php
modules/contrib/backup_migrate/src/Drupal/EntityPlugins/WrapperPluginInterface.php
modules/contrib/backup_migrate/src/Drupal/Environment/DrupalSetMessageLogger.php
modules/contrib/backup_migrate/src/Drupal/File/DrupalTempFileAdapter.php
modules/contrib/backup_migrate/src/Drupal/Filter/DrupalEncrypt.php
modules/contrib/backup_migrate/src/Drupal/Filter/DrupalPublicFileExcludeFilter.php
modules/contrib/backup_migrate/src/Drupal/Filter/DrupalUtils.php
modules/contrib/backup_migrate/src/Drupal/Source/DrupalMySQLiSource.php
modules/contrib/backup_migrate/src/Drupal/Source/DrupalPublicFilesSource.php
modules/contrib/backup_migrate/src/Drupal/Source/DrupalSiteArchiveSource.php
modules/contrib/backup_migrate/src/Entity/Destination.php
modules/contrib/backup_migrate/src/Entity/Schedule.php
modules/contrib/backup_migrate/src/Entity/SettingsProfile.php
modules/contrib/backup_migrate/src/Entity/Source.php
modules/contrib/backup_migrate/src/Entity/WrapperEntityBase.php
modules/contrib/backup_migrate/src/Form/BackupDeleteForm.php
modules/contrib/backup_migrate/src/Form/BackupMigrateAdvancedBackupForm.php
modules/contrib/backup_migrate/src/Form/BackupMigrateQuickBackupForm.php
modules/contrib/backup_migrate/src/Form/BackupMigrateRestoreForm.php
modules/contrib/backup_migrate/src/Form/BackupRestoreForm.php
modules/contrib/backup_migrate/src/Form/DestinationForm.php
modules/contrib/backup_migrate/src/Form/EntityDeleteForm.php
modules/contrib/backup_migrate/src/Form/ScheduleDeleteForm.php
modules/contrib/backup_migrate/src/Form/ScheduleForm.php
modules/contrib/backup_migrate/src/Form/SettingsProfileDeleteForm.php
modules/contrib/backup_migrate/src/Form/SettingsProfileForm.php
modules/contrib/backup_migrate/src/Form/SourceForm.php
modules/contrib/backup_migrate/src/Form/WrapperEntityForm.php
modules/contrib/backup_migrate/src/Plugin/BackupMigrateDestination/DirectoryDestinationPlugin.php
modules/contrib/backup_migrate/src/Plugin/BackupMigrateSource/DefaultDBSourcePlugin.php
modules/contrib/backup_migrate/src/Plugin/BackupMigrateSource/DrupalFilesSourcePlugin.php
modules/contrib/backup_migrate/src/Plugin/BackupMigrateSource/EntireSiteSourcePlugin.php
modules/contrib/backup_migrate/src/Plugin/BackupMigrateSource/FileDirectorySourcePlugin.php
modules/contrib/backup_migrate/src/Plugin/BackupMigrateSource/MySQLSourcePlugin.php
modules/contrib/backup_migrate/src/SettingsProfileInterface.php
modules/contrib/backup_migrate/tests/src/Functional/AdminFunctionalityTest.php
modules/contrib/backup_migrate/tests/src/Functional/BackupMigrateEnablingTest.php
modules/contrib/backup_migrate/tests/src/Functional/BackupMigratePermissionsTest.php
modules/contrib/backup_migrate/tests/src/Functional/BackupMigrateQuickBackupTest.php

62 files with changes
=====================

1) modules/contrib/backup_migrate/src/Plugin/BackupMigrateSource/EntireSiteSourcePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Plugin\BackupMigrateSource;

+use Drupal\backup_migrate\Core\Plugin\PluginInterface;
 use Drupal\Core\Database\Database;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Drupal\Source\DrupalMySQLiSource;
@@ @@
   /**
    * Get the Backup and Migrate plugin object.
    *
-   * @return Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    */
   public function getObject() {
     // Add the default database.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/backup_migrate/src/Plugin/BackupMigrateSource/DefaultDBSourcePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Plugin\BackupMigrateSource;

+use Drupal\backup_migrate\Core\Plugin\PluginInterface;
 use Drupal\Core\Database\Database;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Filter\DBExcludeFilter;
@@ @@
   /**
    * Get the Backup and Migrate plugin object.
    *
-   * @return Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    */
   public function getObject() {
     // Add the default database.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/backup_migrate/src/Form/WrapperEntityForm.php:104

    ---------- begin diff ----------
@@ @@
    *
    * Let it store the config which would otherwise be removed for some reason.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/backup_migrate/src/Form/BackupRestoreForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Form;

+use Drupal\backup_migrate\Entity\Destination;
+use Drupal\Core\Url;
 use Drupal\backup_migrate\Drupal\Config\DrupalConfigHelper;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class BackupRestoreForm extends ConfirmFormBase {

   /**
-   * @var \Drupal\backup_migrate\Entity\Destination
+   * @var Destination
    */
   public $destination;

@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $backup_migrate_destination
    * @param $backupId
    *
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/backup_migrate/src/Form/BackupDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Form;

+use Drupal\backup_migrate\Entity\Destination;
+use Drupal\Core\Url;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
 class BackupDeleteForm extends ConfirmFormBase {

   /**
-   * @var \Drupal\backup_migrate\Entity\Destination
+   * @var Destination
    */
   public $destination;

@@ @@
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/backup_migrate/src/Entity/WrapperEntityBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Entity;

+use Drupal\block\BlockPluginCollection;
+use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
@@ @@
   /**
    * The plugin collection that holds the block plugin for this entity.
    *
-   * @var \Drupal\block\BlockPluginCollection
+   * @var BlockPluginCollection
    */
   protected $pluginCollection;

@@ @@
   /**
    * @return SourcePluginInterface
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getObject() {
     if ($plugin = $this->getPlugin()) {
@@ @@
    *
    * @return mixed
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getPlugin() {
     if ($this->get('type')) {
@@ @@
    *
    * @return mixed
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getPluginDefinition() {
     if ($plugin = $this->getPlugin()) {
@@ @@
   /**
    * Gets the plugin collections used by this entity.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ @@
   }

   /**
-   * @return \Drupal\block\BlockPluginCollection
+   * @return BlockPluginCollection
    */
   public function getPluginCollection() {
     if ($this->get('type')) {
@@ @@
   /**
    * Return the plugin manager.
    *
-   * @return \Drupal\Component\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   abstract public function getPluginManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/backup_migrate/src/Entity/Schedule.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Entity;

+use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Destination\ListableDestinationInterface;
 use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected static $state;

@@ @@
   /**
    * Run the schedule.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    *   The Backup and Migrate service object used to execute the backups.
    * @param bool $force
    *   Run the schedule even if it is not due to be run.
@@ @@
    *
    * Easier to replace in unit tests than mocking the actual state service.
    *
-   * @return \Drupal\Core\State\StateInterface
+   * @return StateInterface
    *   The state service.
    */
   protected static function state(): StateInterface {
@@ @@
   /**
    * Return the schedule frequency formatted for display in human language.
    *
-   * @return \Drupal\Core\StringTranslation\PluralTranslatableMarkup
+   * @return PluralTranslatableMarkup
    *   The schedule frequency.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getPeriodFormatted() {
     return Schedule::formatPeriod(Schedule::secondsToPeriod($this->get('period')));
@@ @@
    *   An array containing the period definition and the number of them.
    *   ['number' => 123, 'type' => [...]]
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public static function secondsToPeriod($seconds) {
     foreach (array_reverse(Schedule::getPeriodTypes()) as $type) {
@@ @@
    * @return mixed
    *   The number of seconds. Should be an integer value.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public static function periodToSeconds(array $period) {
     return $period['number'] * $period['type']['seconds'];
@@ @@
    * @param int $period
    *   The array to convert.
    *
-   * @return \Drupal\Core\StringTranslation\PluralTranslatableMarkup
+   * @return PluralTranslatableMarkup
    *   The converted period.
    */
   public static function formatPeriod($period) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/backup_migrate/src/Drupal/Source/DrupalSiteArchiveSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Drupal\Source;

+use Drupal\backup_migrate\Core\Config\ConfigInterface;
+use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
+use Drupal\backup_migrate\Core\Exception\IgnorableException;
+use Drupal\backup_migrate\Core\File\BackupFileWritableInterface;
 use Drupal\backup_migrate\Core\Source\FileDirectorySource;
 use Drupal\backup_migrate\Core\Source\SourceInterface;
 use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
@@ @@
 class DrupalSiteArchiveSource extends FileDirectorySource {

   /**
-   * @var \Drupal\backup_migrate\Core\Source\SourceInterface
+   * @var SourceInterface
    */
   protected $dbSource;

   /**
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface|array $init
-   * @param \Drupal\backup_migrate\Core\Source\SourceInterface $db
+   * @param ConfigInterface|array $init
+   * @param SourceInterface $db
    */
   public function __construct($init, SourceInterface $db) {
     parent::__construct($init);
@@ @@
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
-   * @throws \Drupal\backup_migrate\Core\Exception\IgnorableException
+   * @throws BackupMigrateException
+   * @throws IgnorableException
    *
    * @internal param $directory
    */
@@ @@
    *
    * This is the main restore function for this source.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to read the backup from. It will not be opened for reading.
    *
    * @return bool|void
@@ @@
   /**
    * Get a file which contains the file.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    */
   protected function getManifestFile() {
     $out = $this->getTempFileManager()->create('ini');
@@ @@
   }

   /**
-   * @return \Drupal\backup_migrate\Core\Source\SourceInterface
+   * @return SourceInterface
    */
   public function getDbSource() {
     return $this->dbSource;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/backup_migrate/src/Drupal/Source/DrupalPublicFilesSource.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     $config = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/backup_migrate/src/Drupal/Filter/DrupalUtils.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ @@
    *
    * @todo Remove this.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function beforeRestore(BackupFileReadableInterface $file) {
     return $file;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/backup_migrate/src/Drupal/Filter/DrupalPublicFileExcludeFilter.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     $config = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/backup_migrate/src/Drupal/Filter/DrupalEncrypt.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/backup_migrate/src/Drupal/File/DrupalTempFileAdapter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Drupal\File;

+use Drupal\Core\File\FileSystem;
 use Drupal\backup_migrate\Core\File\TempFileAdapter;
 use Drupal\backup_migrate\Core\File\TempFileAdapterInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * The Drupal file system for provisioning temp files.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $filesystem;

@@ @@
   /**
    * Construct a manager.
    *
-   * @param \Drupal\Core\File\FileSystem $filesystem
+   * @param FileSystem $filesystem
    *   A file path or stream URL for the temp directory.
    * @param string $dir
    *   The directory to save to.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/backup_migrate/src/Drupal/EntityPlugins/WrapperPluginInterface.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Alter the backup_migrate object to add the source and required services.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    *   The BackupMigrate object to add plugins and services to.
    * @param string $key
    *   The id of the source to add.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/backup_migrate/src/Drupal/EntityPlugins/WrapperPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Drupal\EntityPlugins;

+use Drupal\backup_migrate\Core\Plugin\PluginInterface;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Main\BackupMigrateInterface;
 use Drupal\Component\Plugin\PluginBase;
@@ @@
   /**
    * Get the Backup and Migrate plugin object.
    *
-   * @return Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    */
   public function getObject() {
     // If the class to wrap was specified in the annotation then add that class.
@@ @@
   /**
    * Return a Backup and Migrate Config object with the plugin configuration.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function getConfig() {
     return new Config($this->getConfiguration());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/backup_migrate/src/Drupal/EntityPlugins/SourcePluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/backup_migrate/src/Drupal/EntityPlugins/DestinationPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/backup_migrate/src/Drupal/EntityPlugins/Annotation/BackupMigrateSourcePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Drupal\EntityPlugins\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


19) modules/contrib/backup_migrate/src/Drupal/EntityPlugins/Annotation/BackupMigrateDestinationPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Drupal\EntityPlugins\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/backup_migrate/src/Drupal/Destination/DrupalDirectoryDestination.php:21

    ---------- begin diff ----------
@@ @@
    * This function is called to save the data file AND the metadata sidecar
    * file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function saveTheFile(BackupFileReadableInterface $file) {
     // Check if the directory exists.
@@ @@
   /**
    * Check that the directory can be used for backup.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   protected function checkDirectory() {
     // @todo Figure out if the file is or might be accessible via the web.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/backup_migrate/src/Drupal/Destination/DrupalBrowserUploadDestination.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Drupal\Destination;

+use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
 use Drupal\backup_migrate\Core\Destination\ReadableDestinationInterface;
 use Drupal\backup_migrate\Core\File\BackupFileInterface;
 use Drupal\backup_migrate\Core\File\ReadableStreamBackupFile;
@@ @@
   /**
    * Load the metadata for the given file however it may be stored.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface
+   * @return BackupFileInterface
    */
   public function loadFileMetadata(BackupFileInterface $file) {
     return $file;
@@ @@
   /**
    * Load the file with the given ID from the destination.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface The file if it exists or NULL if it doesn't
+   * @return BackupFileReadableInterface The file if it exists or NULL if it doesn't
    */
   public function loadFileForReading(BackupFileInterface $file) {
     return $file;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/backup_migrate/src/Drupal/Config/DrupalConfigHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Drupal\Config;

+use Drupal\backup_migrate\Core\Config\ConfigurableInterface;
 use Drupal\backup_migrate\Core\Config\ConfigInterface;
 use Drupal\backup_migrate\Core\Main\BackupMigrateInterface;
 use Drupal\backup_migrate\Core\Plugin\PluginManagerInterface;
@@ @@
   /**
    * Build the configuration form for all plugins in a manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param PluginManagerInterface $plugins
    *   The PluginManager containing all of the plugins to be configured.
    * @param string $operation
    *   'backup', 'restore', or 'initialize' depending on the operation being
@@ @@
   /**
    * @param array $schema
    *   A configuration schema from one or more Backup and Migrate plugins.
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   The configuration object containing the default values.
    * @param array $parents
    *   The form parents array.
@@ @@
    *   The form structure being worked on.
    * @param array $schema
    *   A configuration schema from one or more Backup and Migrate plugins.
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   The configuration object containing the default values.
    * @param array $parents
    *   The form parents array.
@@ @@
    *
    * @param $element
    * @param $input
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function valueCallbackSecret(&$element, $input, FormStateInterface $form_state) {
     if (empty($input)) {
@@ @@
   /**
    * Get a pulldown for the given list of plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigurableInterface[]|\Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param ConfigurableInterface[]|PluginManagerInterface $plugins
    * @param $title
    * @param $default_value
    *
@@ @@
   /**
    * Get a select form item for the given list of sources.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    * @param $title
    * @param $default_value
    *
@@ @@
   /**
    * Get a select form item for the given list of sources.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    * @param string $title
    * @param mixed $default_value
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/backup_migrate/src/Core/Source/SourceInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * This should be the main back up function for this source.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    *   A backup file with the contents of the source dumped to it..
    */
   public function exportToFile();
@@ @@
    *
    * This is the main restore function for this source.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to read the backup from. It will not be opened for reading.
    */
   public function importFromFile(BackupFileReadableInterface $file);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/backup_migrate/src/Core/Source/MySQLiSource.php:40

    ---------- begin diff ----------
@@ @@
    *
    * This should be the main back up function for this source.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    *   A backup file with the contents of the source dumped to it.
    */
   public function exportToFile() {
@@ @@
    *
    * This is the main restore function for this source.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to read the backup from. It will not be opened for reading.
    *
    * @return bool|int
@@ @@
    * Supports the formatting created by mysqldump, but won't handle multiline
    * comments.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/backup_migrate/src/Core/Source/FileDirectorySource.php:23

    ---------- begin diff ----------
@@ @@
   use PluginCallerTrait;

   /**
-   * @var \Drupal\backup_migrate\Core\Service\ArchiveWriterInterface
+   * @var ArchiveWriterInterface
    */
   private $archiveWriter;

   /**
-   * @var \Drupal\backup_migrate\Core\Service\ArchiveReaderInterface
+   * @var ArchiveReaderInterface
    */
   private $archiveReader;

@@ @@
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
-   * @throws \Drupal\backup_migrate\Core\Exception\IgnorableException
+   * @throws BackupMigrateException
+   * @throws IgnorableException
    *
    * @internal param $directory
    */
@@ @@
   }

   /**
-   * @param \Drupal\backup_migrate\Core\Service\ArchiveWriterInterface $writer
+   * @param ArchiveWriterInterface $writer
    */
   public function setArchiveWriter(ArchiveWriterInterface $writer) {
     $this->archiveWriter = $writer;
@@ @@
   }

   /**
-   * @return \Drupal\backup_migrate\Core\Service\ArchiveWriterInterface
+   * @return ArchiveWriterInterface
    */
   public function getArchiveWriter() {
     return $this->archiveWriter;
@@ @@
   }

   /**
-   * @return \Drupal\backup_migrate\Core\Service\ArchiveReaderInterface
+   * @return ArchiveReaderInterface
    */
   public function getArchiveReader() {
     return $this->archiveReader;
@@ @@
   }

   /**
-   * @param \Drupal\backup_migrate\Core\Service\ArchiveReaderInterface $reader
+   * @param ArchiveReaderInterface $reader
    */
   public function setArchiveReader(ArchiveReaderInterface $reader) {
     $this->archiveReader = $reader;
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/backup_migrate/src/Core/Source/DatabaseSource.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/backup_migrate/src/Core/Service/TeeLogger.php:12

    ---------- begin diff ----------
@@ @@
 class TeeLogger extends AbstractLogger {

   /**
-   * @var \Psr\Log\LoggerInterface[]
+   * @var LoggerInterface[]
    */
   protected $loggers;

   /**
-   * @param \Psr\Log\LoggerInterface[] $loggers
+   * @param LoggerInterface[] $loggers
    */
   public function __construct(array $loggers) {
     $this->setLoggers($loggers);
@@ @@
   }

   /**
-   * @return \Psr\Log\LoggerInterface[]
+   * @return LoggerInterface[]
    */
   public function getLoggers() {
     return $this->loggers;
@@ @@
   }

   /**
-   * @param \Psr\Log\LoggerInterface[] $loggers
+   * @param LoggerInterface[] $loggers
    */
   public function setLoggers(array $loggers) {
     $this->loggers = $loggers;
@@ @@
   }

   /**
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    */
   public function addLogger(LoggerInterface $logger) {
     $this->loggers[] = $logger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/backup_migrate/src/Core/Service/TarArchiveWriter.php:11

    ---------- begin diff ----------
@@ @@
 class TarArchiveWriter implements ArchiveWriterInterface {

   /**
-   * @var \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @var BackupFileWritableInterface
    */
   protected $archive;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/backup_migrate/src/Core/Service/TarArchiveReader.php:12

    ---------- begin diff ----------
@@ @@
 class TarArchiveReader implements ArchiveReaderInterface {

   /**
-   * @var \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @var BackupFileReadableInterface
    */
   protected $archive;

@@ @@
    *
    * @return bool
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   private function extractAllToDirectory($directory) {
     clearstatcache();
@@ @@
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   private function readHeader($block, array $header = []) {
     if (strlen($block) == 0) {
@@ @@
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   private function readLongHeader(array $header) {
     $filename = '';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/backup_migrate/src/Core/Service/PhpCurlHttpClient.php:42

    ---------- begin diff ----------
@@ @@
    * Post a file along with other data (as an array).
    *
    * @param $url
-   * @param \Drupal\backup_migrate\Core\File\ReadableStreamBackupFile $file
+   * @param ReadableStreamBackupFile $file
    * @param $data
    *
    * @return mixed
@@ @@
    *
    * @return mixed
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\HttpClientException
+   * @throws HttpClientException
    */
   protected function curlExec($ch) {
     $body = curl_exec($ch);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/backup_migrate/src/Core/Service/HttpClientInterface.php:33

    ---------- begin diff ----------
@@ @@
    * Post a file along with other data (as an array).
    *
    * @param $url
-   * @param \Drupal\backup_migrate\Core\File\ReadableStreamBackupFile $file
+   * @param ReadableStreamBackupFile $file
    * @param $data
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/backup_migrate/src/Core/Service/ArchiverInterface.php:21

    ---------- begin diff ----------
@@ @@
   public function getFileExt();

   /**
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $out
+   * @param BackupFileReadableInterface $out
    */
   public function setArchive(BackupFileReadableInterface $out);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/backup_migrate/src/Core/Service/ArchiveWriterInterface.php:21

    ---------- begin diff ----------
@@ @@
   public function getFileExt();

   /**
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $out
+   * @param BackupFileWritableInterface $out
    */
   public function setArchive(BackupFileWritableInterface $out);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


34) modules/contrib/backup_migrate/src/Core/Service/ArchiveReaderInterface.php:21

    ---------- begin diff ----------
@@ @@
   public function getFileExt();

   /**
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $out
+   * @param BackupFileReadableInterface $out
    */
   public function setArchive(BackupFileReadableInterface $out);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/backup_migrate/src/Core/Plugin/PluginManagerInterface.php:12

    ---------- begin diff ----------
@@ @@
    * Add an item to the manager.
    *
    * @param $id
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginInterface|object $item
+   * @param PluginInterface|object $item
    *   The source to add.
    *
    * @return
@@ @@
    *
    * @param $id
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    *   The item specified by the id or NULL if it doesn't exist.
    */
   public function get($id);
@@ @@
   /**
    * Get a list of all of the items.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @return PluginInterface[]
    *   An ordered list of the sources, keyed by their id.
    */
   public function getAll();
@@ @@
   /**
    * Set the configuration for all plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   A configuration object containing only configuration for all plugins.
    */
   public function setConfig(ConfigInterface $config);
@@ @@
    * @param string $op
    *   The name of the operation.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @return PluginInterface[]
    */
   public function getAllByOp($op);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


36) modules/contrib/backup_migrate/src/Core/Plugin/PluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Core\Plugin;

+use Drupal\backup_migrate\Core\File\TempFileManagerInterface;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Config\ConfigInterface;
 use Drupal\backup_migrate\Core\Config\ConfigurableInterface;
@@ @@
   use ConfigurableTrait;

   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @var PluginInterface[]
    */
   protected $items;

   /**
-   * @var \Drupal\backup_migrate\Core\Service\ServiceManagerInterface
+   * @var ServiceManagerInterface
    */
   protected $services;

   /**
-   * @var \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @var TempFileManagerInterface
    */
   protected $tempFileManager;

   /**
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManagerInterface $services
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ServiceManagerInterface $services
+   * @param ConfigInterface $config
    */
   public function __construct(ServiceManagerInterface $services = NULL, ConfigInterface $config = NULL) {
     // Add the injected service locator for dependency injection into plugins.
@@ @@
   /**
    * Set the configuration. Reconfigure all of the installed plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    */
   public function setConfig(ConfigInterface $config) {
     // Set the configuration object to the one passed in.
@@ @@
    * @param string $op
    *   The name of the operation.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @return PluginInterface[]
    */
   public function getAllByOp($op) {
     $out = [];
@@ @@
    * plugin according to the config object injected into the manager. It also
    * injects other dependencies as needed.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginInterface $plugin
+   * @param PluginInterface $plugin
    *   The plugin to prepare for use.
    * @param string $id
    *   The id of the plugin (to extract the correct settings).
@@ @@
   }

   /**
-   * @return \Drupal\backup_migrate\Core\Service\ServiceManagerInterface
+   * @return ServiceManagerInterface
    */
   public function services() {
     return $this->services;
@@ @@
   }

   /**
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManagerInterface $services
+   * @param ServiceManagerInterface $services
    */
   public function setServiceManager(ServiceManagerInterface $services) {
     $this->services = $services;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/backup_migrate/src/Core/Plugin/PluginCallerTrait.php:9

    ---------- begin diff ----------
@@ @@
 trait PluginCallerTrait {

   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $plugins;

@@ @@
   /**
    * Inject the plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param PluginManagerInterface $plugins
    */
   public function setPluginManager(PluginManagerInterface $plugins) {
     $this->plugins = $plugins;
@@ @@
   /**
    * Get the plugin manager.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function plugins() {
     // Return the list of plugins or a blank placeholder.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


38) modules/contrib/backup_migrate/src/Core/Plugin/PluginCallerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Inject the plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param PluginManagerInterface $plugins
    */
   public function setPluginManager(PluginManagerInterface $plugins);

@@ @@
   /**
    * Get the plugin manager.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function plugins();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


39) modules/contrib/backup_migrate/src/Core/Plugin/FileProcessorTrait.php:11

    ---------- begin diff ----------
@@ @@
 trait FileProcessorTrait {

   /**
-   * @var \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @var TempFileManagerInterface
    */
   protected $tempfilemanager;

@@ @@
   /**
    * Inject the temp file manager.
    *
-   * @param \Drupal\backup_migrate\Core\File\TempFileManagerInterface $tempfilemanager
+   * @param TempFileManagerInterface $tempfilemanager
    *
    * @return mixed
    */
@@ @@
   /**
    * Get the temp file manager.
    *
-   * @return \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @return TempFileManagerInterface
    */
   public function getTempFileManager() {
     return $this->tempfilemanager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


40) modules/contrib/backup_migrate/src/Core/Plugin/FileProcessorInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Inject the temp file manager.
    *
-   * @param \Drupal\backup_migrate\Core\File\TempFileManagerInterface $tempfilemanager
+   * @param TempFileManagerInterface $tempfilemanager
    *
    * @return mixed
    */
@@ @@
   /**
    * Get the temp file manager.
    *
-   * @return \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @return TempFileManagerInterface
    */
   public function getTempFileManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


41) modules/contrib/backup_migrate/src/Core/Main/BackupMigrateInterface.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Get the list of available destinations.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function destinations();

@@ @@
   /**
    * Set the destinations plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $destinations
+   * @param PluginManagerInterface $destinations
    */
   public function setDestinationManager(PluginManagerInterface $destinations);

@@ @@
   /**
    * Get the list of sources.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function sources();

@@ @@
   /**
    * Set the sources plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $sources
+   * @param PluginManagerInterface $sources
    */
   public function setSourceManager(PluginManagerInterface $sources);

@@ @@
   /**
    * Get the service locator.
    *
-   * @return \Drupal\backup_migrate\Core\Service\ServiceManager
+   * @return ServiceManager
    */
   public function services();

@@ @@
   /**
    * Set the service locator.
    *
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManager $services
+   * @param ServiceManager $services
    */
   public function setServiceManager(ServiceManager $services);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/backup_migrate/src/Core/Main/BackupMigrate.php:15

    ---------- begin diff ----------
@@ @@
   use PluginCallerTrait;

   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $sources;

   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $destinations;

@@ @@
    * is done by plugins. This can be called after the service is instantiated to
    * pass new configuration to the plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    */
   public function setConfig(ConfigInterface $config) {
     $this->plugins()->setConfig($config);
@@ @@
   /**
    * Get the list of available destinations.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function destinations() {
     return $this->destinations;
@@ @@
   /**
    * Set the destinations plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $destinations
+   * @param PluginManagerInterface $destinations
    */
   public function setDestinationManager(PluginManagerInterface $destinations) {
     $this->destinations = $destinations;
@@ @@
   /**
    * Get the list of sources.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function sources() {
     return $this->sources;
@@ @@
   /**
    * Set the sources plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $sources
+   * @param PluginManagerInterface $sources
    */
   public function setSourceManager(PluginManagerInterface $sources) {
     $this->sources = $sources;
@@ @@
   /**
    * Get the service locator.
    *
-   * @return \Drupal\backup_migrate\Core\Service\ServiceManager
+   * @return ServiceManager
    */
   public function services() {
     return $this->services;
@@ @@
   /**
    * Set the service locator.
    *
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManager $services
+   * @param ServiceManager $services
    */
   public function setServiceManager(ServiceManager $services) {
     $this->services = $services;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/backup_migrate/src/Core/Filter/Notify.php:31

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @var \Drupal\backup_migrate\Core\Service\StashLogger
+   * @var StashLogger
    */
   protected $logstash;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/backup_migrate/src/Core/Filter/MetadataWriter.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ @@
   /**
    * Run after a backup. Add metadata to the file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $file
+   * @param BackupFileWritableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    */
   public function afterBackup(BackupFileWritableInterface $file) {
     // Add the various metadata.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/backup_migrate/src/Core/Filter/FileNamer.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ @@
   /**
    * Run on a backup. Name the backup file according to the configuration.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function afterBackup(BackupFileReadableInterface $file) {
     if (\Drupal::moduleHandler()->moduleExists('token')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/backup_migrate/src/Core/Filter/FileExcludeFilter.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/backup_migrate/src/Core/Filter/DBExcludeFilter.php:14

    ---------- begin diff ----------
@@ @@
 class DBExcludeFilter extends PluginBase {

   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManager
+   * @var PluginManager
    */
   protected $sourceManager;

@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ @@
   }

   /**
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManager
+   * @return PluginManager
    */
   public function sources() {
     return $this->sourceManager ? $this->sourceManager : new PluginManager();
@@ @@
   }

   /**
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManager $sourceManager
+   * @param PluginManager $sourceManager
    */
   public function setSourceManager(PluginManager $sourceManager) {
     $this->sourceManager = $sourceManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/backup_migrate/src/Core/Filter/CompressionFilter.php:101

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ @@
   /**
    * Run on a backup.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function afterBackup(BackupFileReadableInterface $file) {
     $out = $success = FALSE;
@@ @@
   /**
    * Run on a restore.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function beforeRestore(BackupFileReadableInterface $file) {
     // If the file is not a supported compression type then simply return the
@@ @@
   /**
    * Gzip encode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ @@
   /**
    * Gzip decode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ @@
   /**
    * BZip encode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ @@
   /**
    * BZip decode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ @@
   /**
    * Zip encode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
+   * @param BackupFileReadableInterface $from
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ @@
   /**
    * Gzip decode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/backup_migrate/src/Core/File/TempFileManagerInterface.php:20

    ---------- begin diff ----------
@@ @@
    * @param string $ext
    *   The file extension for this file (optional)
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    */
   public function create($ext = '');

@@ @@
    *
    * For example: xxx.mysql would become xxx.mysql.gz.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *   The file to add the extension to.
    * @param $ext
    *   The new file extension.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the new extension and all of the metadata
    *   from the previous file.
    */
@@ @@
    *
    * For example: xxx.mysql.gz would become xxx.mysql.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the last extension removed and
    *   all of the metadata from the previous file.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/backup_migrate/src/Core/File/TempFileManager.php:9

    ---------- begin diff ----------
@@ @@
 class TempFileManager implements TempFileManagerInterface {

   /**
-   * @var \Drupal\backup_migrate\Core\File\TempFileAdapterInterface
+   * @var TempFileAdapterInterface
    */
   protected $adapter;

@@ @@
    *
    * This manager needs the adapter to create the actual temp files.
    *
-   * @param \Drupal\backup_migrate\Core\File\TempFileAdapterInterface $adapter
+   * @param TempFileAdapterInterface $adapter
    */
   public function __construct(TempFileAdapterInterface $adapter) {
     $this->adapter = $adapter;
@@ @@
    *
    * For example: xxx.mysql would become xxx.mysql.gz.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *   The file to add the extension to.
    * @param $ext
    *   The new file extension.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the new extension and all of the metadata
    *   from the previous file.
    */
@@ @@
    *
    * For example: xxx.mysql.gz would become xxx.mysql.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the last extension removed and
    *   all of the metadata from the previous file.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


51) modules/contrib/backup_migrate/src/Core/Destination/WritableDestinationInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Save a file to the destination.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to save.
    */
   public function saveFile(BackupFileReadableInterface $file);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/backup_migrate/src/Core/Destination/ReadableDestinationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Core\Destination;

+use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
 use Drupal\backup_migrate\Core\File\BackupFileInterface;

 /**
@@ @@
    * @param string $id
    *   The unique identifier for the file. Usually the filename.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface
+   * @return BackupFileInterface
    *   The file if it exists or NULL if it doesn't
    */
   public function getFile($id);
@@ @@
   /**
    * Load the metadata for the given file however it may be stored.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface
+   * @return BackupFileInterface
    */
   public function loadFileMetadata(BackupFileInterface $file);

@@ @@
   /**
    * Load the file with the given ID from the destination.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    *   The file if it exists or NULL if it doesn't.
    */
   public function loadFileForReading(BackupFileInterface $file);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


53) modules/contrib/backup_migrate/src/Core/Destination/ListableDestinationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Core\Destination;

+use Drupal\backup_migrate\Core\File\BackupFileInterface;
 /**
  * Interface ListableDestinationInterface.
  *
@@ @@
    * @todo Decide if extended metadata should ALWAYS be loaded here. Is there
    * a use case for getting a list of files WITHOUT metadata?
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface[]
+   * @return BackupFileInterface[]
    *   An array of BackupFileInterface objects representing the files with
    *   the file ids as keys. The file ids are usually file names but that
    *   is up to the implementing destination to decide. The returned files
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/backup_migrate/src/Core/Destination/DirectoryDestination.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Core\Destination;

+use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\backup_migrate\Core\Config\ConfigurableInterface;
 use Drupal\backup_migrate\Core\Exception\DestinationNotWritableException;
 use Drupal\backup_migrate\Core\Plugin\FileProcessorInterface;
@@ @@
    * This function is called to save the data file AND the metadata sidecar
    * file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function saveTheFile(BackupFileReadableInterface $file) {
     // Check if the directory exists.
@@ @@
   /**
    * Check that the directory can be used for backup.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   protected function checkDirectory() {
     $dir = $this->confGet('directory');
@@ @@
     // Read the list of files from the directory.
     $dir = $this->confGet('directory');

-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+    /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
     $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
     $scheme = $stream_wrapper_manager->getScheme($dir);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/backup_migrate/src/Core/Destination/DestinationBase.php:79

    ---------- begin diff ----------
@@ @@
    * Should take care of the actual creation of a file in the destination
    * without regard for metadata.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    */
   abstract protected function saveTheFile(BackupFileReadableInterface $file);

@@ @@
    * This function is called to save the data file AND the metadata sidecar
    * file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    */
   abstract protected function saveTheFileMetadata(BackupFileInterface $file);

@@ @@
   /**
    * Load the actual metadata for the file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    */
   abstract protected function loadFileMetadataArray(BackupFileInterface $file);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/backup_migrate/src/Core/Destination/DebugDestination.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/backup_migrate/src/Core/Config/ConfigurableTrait.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The object's configuration object.
    *
-   * @var \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @var ConfigInterface
    */
   protected $config;

@@ @@
    * not be overwritten. If the object is re-configured after construction any
    * missing configuration options will revert to these values.
    *
-   * @var \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @var ConfigInterface
    */
   protected $init;

@@ @@
   /**
    * Get the configuration object for this item.
    *
-   * @return \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @return ConfigInterface
    */
   public function config() {
     return $this->config ? $this->config : new Config();
@@ @@
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


58) modules/contrib/backup_migrate/src/Core/Config/ConfigurableInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Set the configuration for all plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   A configuration object containing only configuration for all plugins.
    */
   public function setConfig(ConfigInterface $config);
@@ @@
   /**
    * Get the configuration object for this item.
    *
-   * @return \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @return ConfigInterface
    */
   public function config();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


59) modules/contrib/backup_migrate/src/Controller/DestinationListBuilder.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * Gets this list's default operations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the operations are for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/backup_migrate/src/Controller/BackupController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\backup_migrate\Controller;

+use Drupal\backup_migrate\Core\Destination\DestinationInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\backup_migrate\Core\Destination\ListableDestinationInterface;
 use Drupal\backup_migrate\Drupal\Destination\DrupalBrowserDownloadDestination;
 use Drupal\backup_migrate\Entity\Destination;
@@ @@
 class BackupController extends ControllerBase {

   /**
-   * @var \Drupal\backup_migrate\Core\Destination\DestinationInterface
+   * @var DestinationInterface
    */
   public $destination;

@@ @@
   /**
    * Get the title for the listing page of a destination entity.
    *
-   * @param \Drupal\backup_migrate\Entity\Destination $backup_migrate_destination
+   * @param Destination $backup_migrate_destination
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function listDestinationEntityBackupsTitle(Destination $backup_migrate_destination) {
     return $this->t('Backups in @destination_name',
@@ @@
   /**
    * List the backups in the given destination.
    *
-   * @param \Drupal\backup_migrate\Entity\Destination $backup_migrate_destination
+   * @param Destination $backup_migrate_destination
    *
    * @return mixed
    */
@@ @@
   /**
    * List the backups in the given destination.
    *
-   * @param \Drupal\backup_migrate\Core\Destination\ListableDestinationInterface $destination
+   * @param ListableDestinationInterface $destination
    * @param $backup_migrate_destination_id
    * @param int $count
    *
@@ @@
   /**
    * Download a backup via the browser.
    *
-   * @param \Drupal\backup_migrate\Entity\Destination $backup_migrate_destination
+   * @param Destination $backup_migrate_destination
    * @param $backup_id
    */
   public function download(Destination $backup_migrate_destination, $backup_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/backup_migrate/backup_migrate.module:81

    ---------- begin diff ----------
@@ @@
  * @param array|null $options
  *   A keyed array of options.
  *
- * @return \Drupal\backup_migrate\Core\Main\BackupMigrate
+ * @return BackupMigrate
  */
 function backup_migrate_get_service_object($config = [], $options = []) {
   static $bam = NULL;
@@ @@

     $output = '';
     foreach ($help as $key => $value) {
-      $output .= render($value);
+      $output .= \Drupal::service('renderer')->render($value);
     }

     return $output;
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


62) modules/contrib/backup_migrate/backup_migrate.install:16

    ---------- begin diff ----------
@@ @@
   $kv = \Drupal::keyValue('backup_migrate_schedule:last_run');

   $schedules = Schedule::loadMultiple();
-  /** @var \Drupal\backup_migrate\Entity\Schedule $schedule */
+  /** @var Schedule $schedule */
   foreach ($schedules as $schedule) {
     $id = $schedule->id();
     $last = (int) $kv->get($id);
@@ @@
  */
 function backup_migrate_uninstall($is_syncing) {
   $schedules = Schedule::loadMultiple();
-  /** @var \Drupal\backup_migrate\Entity\Schedule $schedule */
+  /** @var Schedule $schedule */
   foreach ($schedules as $schedule) {
     $schedule->setLastRun(0);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 62 files have been changed by Rector                                      

