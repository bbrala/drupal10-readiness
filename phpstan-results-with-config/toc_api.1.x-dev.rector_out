modules/contrib/toc_api/modules/toc_api_example/toc_api_example.module
modules/contrib/toc_api/src/Entity/TocType.php
modules/contrib/toc_api/src/Plugin/Block/TocBlockBase.php
modules/contrib/toc_api/src/Tests/TocManagerTest.php
modules/contrib/toc_api/src/Toc.php
modules/contrib/toc_api/src/TocBuilder.php
modules/contrib/toc_api/src/TocBuilderInterface.php
modules/contrib/toc_api/src/TocFormatter.php
modules/contrib/toc_api/src/TocFormatterInterface.php
modules/contrib/toc_api/src/TocInterface.php
modules/contrib/toc_api/src/TocManager.php
modules/contrib/toc_api/src/TocManagerInterface.php
modules/contrib/toc_api/src/TocTypeAccessControlHandler.php
modules/contrib/toc_api/src/TocTypeForm.php
modules/contrib/toc_api/src/TocTypeInterface.php
modules/contrib/toc_api/src/TocTypeListBuilder.php
modules/contrib/toc_api/tests/src/Unit/TocFormatterTest.php
modules/contrib/toc_api/tests/src/Unit/TocTest.php
modules/contrib/toc_api/toc_api.install
modules/contrib/toc_api/toc_api.module

11 files with changes
=====================

1) modules/contrib/toc_api/toc_api.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\toc_api\TocInterface;
 /**
  * @file
  * Converts header tags into a hierarchical table of contents.
@@ @@
  *   - item: A table of contents header item.
  */
 function template_preprocess_toc_header(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];

   $item = $variables['item'];
@@ @@
  *   - attributes: Attributes to be added to back to top link.
  */
 function template_preprocess_toc_back_to_top(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];

   $options = $toc->getOptions();
@@ @@
  *   - attributes: Attributes to be added to back to top link.
  */
 function template_preprocess_toc_tree(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];

   $variables['tree'] = $toc->getTree();
@@ @@
  *   - attributes: Attributes to be added to back to top link.
  */
 function template_preprocess_toc_menu(&$variables) {
-  /** @var \Drupal\toc_api\TocInterface $toc */
+  /** @var TocInterface $toc */
   $toc = $variables['toc'];

   $options = $toc->getOptions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/toc_api/tests/src/Unit/TocTest.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The service container used for testing.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->container = new ContainerBuilder();
@@ @@
     // Check update content ids.
     $toc = new Toc('<h2>header 2</h2><h3 id="three" class="custom">header 3</h3><h4 id="four">header 4</h4><h4 id="four">header 4</h4><h2>header 2</h2>', []);
     $content = $toc->getContent();
-    $this->assertContains('<h2 id="header-2">', $content);
-    $this->assertContains('<h3 id="three" class="custom">', $content);
-    $this->assertContains('<h4 id="four">', $content);
-    $this->assertContains('<h4 id="four-01">', $content);
+    $this->assertStringContainsString('<h2 id="header-2">', $content);
+    $this->assertStringContainsString('<h3 id="three" class="custom">', $content);
+    $this->assertStringContainsString('<h4 id="four">', $content);
+    $this->assertStringContainsString('<h4 id="four-01">', $content);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/toc_api/tests/src/Unit/TocFormatterTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The table of contents formatter.
    *
-   * @var \Drupal\toc_api\TocFormatter
+   * @var TocFormatter
    */
   protected $formatter;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->formatter = new TocFormatter();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/toc_api/src/TocTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\toc_api;

+use Drupal\toc_api\Entity\TocType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager to create query factory.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The theme registry.
    *
-   * @var \Drupal\Core\Theme\Registry
+   * @var Registry
    */
   protected $themeRegistry;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The theme initialization logic.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;

@@ @@
   /**
    * Constructs a new TocTypeForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity query factory.
    *
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Registry $theme_registry, ThemeManagerInterface $theme_manager, ThemeInitializationInterface $theme_initialization) {
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\toc_api\Entity\TocType $toc_type */
+    /** @var TocType $toc_type */
     $toc_type = $this->getEntity();
     $toc_type->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/toc_api/src/TocManagerInterface.php:19

    ---------- begin diff ----------
@@ @@
    *   (optional) An associative array of options used to generate a table of
    *   contents and bookmarked headers.
    *
-   * @return \Drupal\toc_api\TocInterface
+   * @return TocInterface
    *   A new TOC object.
    */
   public function create($id, $source, array $options = []);
@@ @@
    *   ID used to track the TOC object's instance. Typically, the ID can be
    *   the TOC implementation's module name.
    *
-   * @return \Drupal\toc_api\TocInterface
+   * @return TocInterface
    *   The current TOC instance.
    */
   public function getToc($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/toc_api/src/TocManager.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The TOC instances.
    *
-   * @var \Drupal\toc_api\Toc[]
+   * @var Toc[]
    */
   protected $tocs = [];

@@ @@
   /**
    * Constructs a new TocManager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
    */
   public function create($id, $source, array $options = []) {
     // Merge default TOC type options with passed options.
-    /** @var \Drupal\toc_api\TocTypeInterface $default_toc */
+    /** @var TocTypeInterface $default_toc */
     if ($default_toc = TocType::load('default')) {
       $options = NestedArray::mergeDeep($default_toc->getOptions(), $options);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/toc_api/src/TocBuilderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\toc_api;

+use Drupal\Component\Render\MarkupInterface;
 /**
  * Provides an interface defining a TOC builder.
  */
@@ @@
   /**
    * Renders a table of contents' body.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
    * @return string
@@ @@
   /**
    * Build a table of contents' body.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
    * @return array
@@ @@
   /**
    * Renders a table of contents navigation.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered table of contents.
    */
   public function renderToc(TocInterface $toc);
@@ @@
   /**
    * Builds a table of contents navigation.
    *
-   * @param \Drupal\toc_api\TocInterface $toc
+   * @param TocInterface $toc
    *   A TOC object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/toc_api/src/TocBuilder.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new TocBuilder.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/toc_api/src/Toc.php:335

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * Gets the TOC formatter.
-   *
-   * @return \Drupal\toc_api\TocFormatter.
-   *   The TOC formatter
-   */
+  * Gets the TOC formatter.
+  *
+   * @return TocFormatter .
+    The TOC formatter
+  */
   protected function formatter() {
     return \Drupal::service('toc_api.formatter');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/toc_api/src/Plugin/Block/TocBlockBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\toc_api\Plugin\Block;

+use Drupal\toc_api\TocManagerInterface;
+use Drupal\toc_api\TocInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    */
   protected function blockAccess(AccountInterface $account) {
     $this->getCurrentTocId();
-    /** @var \Drupal\toc_api\TocManagerInterface $toc_manager */
+    /** @var TocManagerInterface $toc_manager */
     $toc_manager = \Drupal::service('toc_api.manager');

     // Get the new TOC instance and see if it is visible and should be
@@ @@
   /**
    * Get the current request TOC object instance.
    *
-   * @return \Drupal\toc_api\TocInterface
+   * @return TocInterface
    *   A TOC object.
    */
   protected function getCurrentToc() {
-    /** @var \Drupal\toc_api\TocManagerInterface $toc_manager */
+    /** @var TocManagerInterface $toc_manager */
     $toc_manager = \Drupal::service('toc_api.manager');

     // Get the new TOC instance using the module name.
@@ @@
   /**
    * Load the node associated with the current request.
    *
-   * @return \Drupal\node\NodeInterface|null
+   * @return NodeInterface|null
    *   A node entity, or NULL if no node is not found.
    */
   protected function getCurrentNode() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/toc_api/modules/toc_api_example/toc_api_example.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\toc_api\TocTypeInterface;
+use Drupal\toc_api\TocManagerInterface;
+use Drupal\toc_api\TocInterface;
+use Drupal\toc_api\TocBuilderInterface;
 /**
  * @file
  * Example of a custom implementation of the TOC API that adds a table of contents to specified content types.
@@ @@
     $body = (string) \Drupal::service('renderer')->render($build['body'][0]);

     // Get 'default' TOC type options.
-    /** @var \Drupal\toc_api\TocTypeInterface $toc_type */
+    /** @var TocTypeInterface $toc_type */
     $toc_type = TocType::load('default');
     $options = ($toc_type) ? $toc_type->getOptions() : [];

     // Create a TOC instance using the TOC manager.
-    /** @var \Drupal\toc_api\TocManagerInterface $toc_manager */
+    /** @var TocManagerInterface $toc_manager */
     $toc_manager = \Drupal::service('toc_api.manager');
-    /** @var \Drupal\toc_api\TocInterface $toc */
+    /** @var TocInterface $toc */
     $toc = $toc_manager->create('toc_filter', $body, $options);

     // If the TOC is visible (ie has more than X headers), replace the body
     // render array with the TOC and update body content using the TOC builder.
     if ($toc->isVisible()) {
-      /** @var \Drupal\toc_api\TocBuilderInterface $toc_builder */
+      /** @var TocBuilderInterface $toc_builder */
       $toc_builder = \Drupal::service('toc_api.builder');
       $build['body'][0] = [
         'toc' => $toc_builder->buildToc($toc),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process "modules/contrib/toc_api/src/Tests/TocManagerTest.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\simpletest\WebTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

