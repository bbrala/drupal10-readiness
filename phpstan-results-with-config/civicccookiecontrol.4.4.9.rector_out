modules/contrib/civicccookiecontrol/civiccookiecontrol.install
modules/contrib/civicccookiecontrol/civiccookiecontrol.module
modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/civic_govuk_cookiecontrol.install
modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/civic_govuk_cookiecontrol.module
modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/src/Form/CivicGovUkCookieControlSettings.php
modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/src/GovUKConfigNames.php
modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/src/Plugin/Block/CivicGovUkCookieControlBannerBlock.php
modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/src/Plugin/Block/CivicGovUkCookieControlDetailsBlock.php
modules/contrib/civicccookiecontrol/src/Access/CookieControlAccess.php
modules/contrib/civicccookiecontrol/src/Access/IAB1Access.php
modules/contrib/civicccookiecontrol/src/Access/IAB2Access.php
modules/contrib/civicccookiecontrol/src/Access/IAB2EnabledAccess.php
modules/contrib/civicccookiecontrol/src/AltLanguageInterface.php
modules/contrib/civicccookiecontrol/src/CCCConfig/AbstractCCCConfig.php
modules/contrib/civicccookiecontrol/src/CCCConfig/CCC8Config.php
modules/contrib/civicccookiecontrol/src/CCCConfig/CCC9Config.php
modules/contrib/civicccookiecontrol/src/CCCConfig/CCCConfigFactory.php
modules/contrib/civicccookiecontrol/src/CCCConfigNames.php
modules/contrib/civicccookiecontrol/src/Controller/AltLanguageListBuilder.php
modules/contrib/civicccookiecontrol/src/Controller/CookieCategoryListBuilder.php
modules/contrib/civicccookiecontrol/src/Controller/ExcludedCountryListBuilder.php
modules/contrib/civicccookiecontrol/src/Controller/NecessaryCookieListBuilder.php
modules/contrib/civicccookiecontrol/src/CookieCategoryInterface.php
modules/contrib/civicccookiecontrol/src/Entity/AltLanguage.php
modules/contrib/civicccookiecontrol/src/Entity/CookieCategory.php
modules/contrib/civicccookiecontrol/src/Entity/ExcludedCountry.php
modules/contrib/civicccookiecontrol/src/Entity/NecessaryCookie.php
modules/contrib/civicccookiecontrol/src/ExcludedCountryInterface.php
modules/contrib/civicccookiecontrol/src/Form/AltLanguageDeleteForm.php
modules/contrib/civicccookiecontrol/src/Form/AltLanguageForm.php
modules/contrib/civicccookiecontrol/src/Form/Buttons/CCCBaseButton.php
modules/contrib/civicccookiecontrol/src/Form/Buttons/CCCButtonInterface.php
modules/contrib/civicccookiecontrol/src/Form/Buttons/CCCFlushFormCacheButton.php
modules/contrib/civicccookiecontrol/src/Form/Buttons/CCCLicenseInfoButton.php
modules/contrib/civicccookiecontrol/src/Form/Buttons/CCCSettingsButton.php
modules/contrib/civicccookiecontrol/src/Form/Buttons/CCCSubmitButton.php
modules/contrib/civicccookiecontrol/src/Form/CCCFormHelper.php
modules/contrib/civicccookiecontrol/src/Form/CivicCookieControlSettings.php
modules/contrib/civicccookiecontrol/src/Form/CookieCategoryDeleteForm.php
modules/contrib/civicccookiecontrol/src/Form/CookieCategoryForm.php
modules/contrib/civicccookiecontrol/src/Form/ExcludedCountryDeleteForm.php
modules/contrib/civicccookiecontrol/src/Form/ExcludedCountryForm.php
modules/contrib/civicccookiecontrol/src/Form/IAB1Settings.php
modules/contrib/civicccookiecontrol/src/Form/IAB2Settings.php
modules/contrib/civicccookiecontrol/src/Form/NecessaryCookieDeleteForm.php
modules/contrib/civicccookiecontrol/src/Form/NecessaryCookieForm.php
modules/contrib/civicccookiecontrol/src/Form/Steps/CCCBaseStep.php
modules/contrib/civicccookiecontrol/src/Form/Steps/CCCLicenseInfo.php
modules/contrib/civicccookiecontrol/src/Form/Steps/CCCSettings.php
modules/contrib/civicccookiecontrol/src/Form/Steps/CCCStepInterface.php
modules/contrib/civicccookiecontrol/src/Form/Steps/CCCStepsEnum.php
modules/contrib/civicccookiecontrol/src/Form/Steps/CCCStepsManager.php
modules/contrib/civicccookiecontrol/src/NecessaryCookieInterface.php

31 files with changes
=====================

1) modules/contrib/civicccookiecontrol/src/Form/Steps/CCCStepsManager.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Add a step to the steps property.
    *
-   * @param \Drupal\civiccookiecontrol\Form\Steps\CCCStepInterface $step
+   * @param CCCStepInterface $step
    *   Step of the form.
    */
   public function addStep(CCCStepInterface $step) {
@@ @@
    * @param int $step_id
    *   Step ID.
    *
-   * @return \Drupal\civiccookiecontrol\Form\Steps\CCCStepInterface
+   * @return CCCStepInterface
    *   Return step object.
    */
   public function getStep($step_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/civicccookiecontrol/src/Form/Steps/CCCSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form\Steps;

+use Drupal\Core\Config\Config;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\civiccookiecontrol\Form\Buttons\CCCFlushFormCacheButton;
 use Drupal\civiccookiecontrol\Form\Buttons\CCCSettingsButton;
@@ @@
   /**
    * The configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * CCCSettings constructor.
    *
-   * @param \Drupal\Core\Locale\CountryManager $countryManager
+   * @param CountryManager $countryManager
    *   Injected country manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Injected config factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Injected files system service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   Injected tempstore private service.
    */
   public function __construct(
@@ @@
         }

         if (empty($element['#placeholder']) && ($key == 'civiccookiecontrol_button_icon')) {
-          $element['#placeholder'] = $base_url . file_url_transform_relative(file_create_url(
-                theme_get_setting('logo.url', $this->config->get('default'))
-            ));
+          $element['#placeholder'] = $base_url . \Drupal::service('file_url_generator')->generateString(theme_get_setting('logo.url', $this->config->get('default')));
         }

         if (array_key_exists('#format', $element) && $element['#format'] == 'full_html') {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/civicccookiecontrol/src/Form/Steps/CCCLicenseInfo.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form\Steps;

+use Drupal\Core\Config\Config;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\civiccookiecontrol\Form\Buttons\CCCLicenseInfoButton;
 use Drupal\civiccookiecontrol\Form\CCCFormHelper;
@@ @@
   /**
    * The configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/civicccookiecontrol/src/Form/Steps/CCCBaseStep.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form\Steps;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Locale\CountryManager;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\Core\TempStore\TempStoreException;
 use Symfony\Component\Yaml\Yaml;
@@ @@
   /**
    * PrivateTempStore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   public $tempStore;

@@ @@
   /**
    * Filesystem object.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   public $fileSystem;

@@ @@
   /**
    * Country manager object.
    *
-   * @var \Drupal\Core\Locale\CountryManager
+   * @var CountryManager
    */
-
   public $countryManager;
   /**
    * Multi steps of the form.
@@ @@
   /**
    * Step manager.
    *
-   * @var \Drupal\civiccookiecontrol\Form\Steps\CCCStepsManager
+   * @var CCCStepsManager
    */
   private $stepManager;

@@ @@
   /**
    * Get steps manager.
    *
-   * @return \Drupal\civiccookiecontrol\Form\Steps\CCCStepsManager
+   * @return CCCStepsManager
    *   The manager.
    */
   public function getStepManager() {
@@ @@
   /**
    * Set the steps manager object.
    *
-   * @param \Drupal\civiccookiecontrol\Form\Steps\CCCStepsManager $stepManager
+   * @param CCCStepsManager $stepManager
    *   The step manager.
    */
   public function setStepManager(CCCStepsManager $stepManager): void {
@@ @@
     $cccFormElements = $this->tempStore->get('cccFormElements');

     if (empty($cccFormElements)) {
-      $ymlFiles = $this->fileSystem->scanDirectory(DRUPAL_ROOT . '/' . drupal_get_path('module', 'civiccookiecontrol') . "/src/Form/CookieControlFormElements", '/.*\.yml$/');
+      $ymlFiles = $this->fileSystem->scanDirectory(DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('civiccookiecontrol') . "/src/Form/CookieControlFormElements", '/.*\.yml$/');
       foreach ($ymlFiles as $file_path => $ymlFile) {
         $file_contents = file_get_contents($file_path);
         $formItems = Yaml::parse($file_contents);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/civicccookiecontrol/src/Form/NecessaryCookieForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
   /**
    * Cache object from dependency injection.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * CookieCategoryForm constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
    */
   public function __construct(CacheBackendInterface $cache) {
@@ @@
    * @return bool
    *   Returns true if machine name already exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exist($id) {
     $entity = $this->entityTypeManager->getStorage('necessarycookie')->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/civicccookiecontrol/src/Form/NecessaryCookieDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Cache backend object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The form constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
    */
   public function __construct(CacheBackendInterface $cache) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/civicccookiecontrol/src/Form/IAB2Settings.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Country manager object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Drupal\Core\Locale\CountryManager
+   * @var ConfigFactoryInterface|CountryManager
    */
   protected $countryManager;

@@ @@
   /**
    * Cache backend object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Router builder object.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * IAB2Settings constructor.
    *
-   * @param \Drupal\Core\Locale\CountryManager $countryManager
+   * @param CountryManager $countryManager
    *   Injected CountyManager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Injected config factory service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $routeBuilder
+   * @param RouteBuilderInterface $routeBuilder
    *   Injected router builder service.
    */
   public function __construct(
@@ @@
    * Loads IAB 2.0 form elements from the corresponding twig file.
    */
   protected function loadIabSettings(&$form) {
-    $iabYamlPath = drupal_get_path('module', 'civiccookiecontrol') . "/src/Form/IAB2FormElements/iab.settings.yml";
+    $iabYamlPath = \Drupal::service('extension.list.module')->getPath('civiccookiecontrol') . "/src/Form/IAB2FormElements/iab.settings.yml";
     $formItems = Yaml::parse(file_get_contents($iabYamlPath));
     foreach ($formItems as $key => $element) {
       if (array_key_exists('#format', $element) && $element['#format'] == 'full_html') {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/civicccookiecontrol/src/Form/IAB1Settings.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Country manager object from dependency injection.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Drupal\Core\Locale\CountryManager
+   * @var ConfigFactoryInterface|CountryManager
    */
   protected $countryManager;

@@ @@
   /**
    * Cache object from dependency injection.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * IAB2Settings constructor.
    *
-   * @param \Drupal\Core\Locale\CountryManager $countryManager
+   * @param CountryManager $countryManager
    *   Injected CountyManager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Injected config factory service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/civicccookiecontrol/src/Form/ExcludedCountryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
   /**
    * The cache backend object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * ExcludedCountryForm constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache object.
    */
   public function __construct(CacheBackendInterface $cache) {
@@ @@
    * @return bool
    *   Return value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exist($id) {
     $entity = $this->entityTypeManager->getStorage('excludedcountry')->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/civicccookiecontrol/src/Form/ExcludedCountryDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Cache backend object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The ExcludedCountryDeleteForm constructur.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
    */
   public function __construct(CacheBackendInterface $cache) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/civicccookiecontrol/src/Form/CookieCategoryForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Cache configuration object from dependency injection.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Router builder for dependency injection.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * CookieCategoryForm constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Dependency injected cache object.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $routeBuilder
+   * @param RouteBuilderInterface $routeBuilder
    *   Dependency injected router builder object.
    */
   public function __construct(CacheBackendInterface $cache, RouteBuilderInterface $routeBuilder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/civicccookiecontrol/src/Form/CookieCategoryDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Cache backend object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The form constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
    */
   public function __construct(CacheBackendInterface $cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/civicccookiecontrol/src/Form/CivicCookieControlSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\civiccookiecontrol\Form\Steps\CCCBaseStep;
 use Drupal\civiccookiecontrol\Access\CookieControlAccess;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\civiccookiecontrol\Form\Steps\CCCStepsEnum;
@@ @@
   /**
    * Country manager object.
    *
-   * @var \Drupal\Core\Locale\CountryManager
+   * @var CountryManager
    */
   protected $countryManager;

@@ @@
   /**
    * Cahche onject.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Router builder object from dependency injection.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * Filesystem object from dependency injection.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * PrivateTempStore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   private $tempStore;

@@ @@
   /**
    * Current step.
    *
-   * @var \Drupal\civiccookiecontrol\Form\Steps\CCCBaseStep
+   * @var CCCBaseStep
    */
   protected $step;

@@ @@
   /**
    * The step manager.
    *
-   * @var \Drupal\civiccookiecontrol\Form\Steps\CCCStepsManager
+   * @var CCCStepsManager
    */
   protected $stepManager;

@@ @@
   /**
    * Entity type manager from dependency injection.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function loadStep(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param string $key
    *   The configuration key of the element to validate.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   protected function validateStatementNode(array &$form, FormStateInterface $form_state, $key) {
     if ($form_state->getValue([$key]) > 0) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitValues(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function clearTempstore(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/civicccookiecontrol/src/Form/AltLanguageForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Form;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Xss;
@@ @@
   /**
    * Cookie categories entities.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   private $cookieCategories;

@@ @@
   /**
    * Cache configuration object from dependency injection.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * CookieCategoryForm constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache interface.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(CacheBackendInterface $cache, EntityTypeManagerInterface $entityTypeManager) {
     $this->cache = $cache;
@@ @@
    * @return bool
    *   If alt language entity exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exist($id) {
     $entity = $this->entityTypeManager->getStorage('altlanguage')->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/civicccookiecontrol/src/Form/AltLanguageDeleteForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Cache backend object.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The form constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Inject the cache service.
    */
   public function __construct(CacheBackendInterface $cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/civicccookiecontrol/src/Controller/NecessaryCookieListBuilder.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/civicccookiecontrol/src/Controller/ExcludedCountryListBuilder.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/civicccookiecontrol/src/Controller/AltLanguageListBuilder.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/civicccookiecontrol/src/CCCConfig/CCCConfigFactory.php:12

    ---------- begin diff ----------
@@ @@
    * @param int $version
    *   Cookie control api key version.
    *
-   * @return \Drupal\civiccookiecontrol\CCCConfig\CCC8Config|\Drupal\civiccookiecontrol\CCCConfig\CCC9Config
+   * @return CCC8Config|CCC9Config
    *   Cookie control configuration object.
    */
   public static function getCccConfig($version) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/civicccookiecontrol/src/CCCConfig/CCC9Config.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * CCC9Config constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Injected config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   Injected Entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Injected date formatter service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Injected language manager service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/civicccookiecontrol/src/CCCConfig/CCC8Config.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * CCC8Config constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Injected config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   Injected Entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Injected date formatter service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/civicccookiecontrol/src/CCCConfig/AbstractCCCConfig.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\CCCConfig;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * Cookie contro configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $cccConfig;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * AbstractCCCConfig constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Injected config service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   Injected entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Injected date formatter service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Injected cache service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/civicccookiecontrol/src/Access/IAB2EnabledAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Access;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The cookie control configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $cccSettingsConfig;
   /**
    * The IAB 2 configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $iab2Config;
   /**
@@ @@
   /**
    * The constructor of the service that checks access to IAB2.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Inject config factory service.
    * @param IAB1Access $iab1Access
    *   Inject service to check IAB1 access.
@@ @@
   /**
    * Checks if current users has access to IAB2 configuration form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user object of current logged user.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResult|AccessResultAllowed|AccessResultNeutral
    *   Returns the access result to grant user access.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/civicccookiecontrol/src/Access/IAB2Access.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Access;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The cookie control configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $cccSettingsConfig;

@@ @@
   /**
    * The service constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The injected config factory object.
    */
   public function __construct(ConfigFactoryInterface $config) {
@@ @@
   /**
    * Checks if current users has access to IAB2 configuration form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user object of current logged user.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResult|AccessResultAllowed|AccessResultNeutral
    *   Returns the access result to grant user access.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/civicccookiecontrol/src/Access/IAB1Access.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Access;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The cookie control configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $cccSettingsConfig;

@@ @@
   /**
    * The service constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The injected config factory object.
    */
   public function __construct(ConfigFactoryInterface $config) {
@@ @@
   /**
    * Checks if current users has access to IAB1 configuration form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user object of current logged user.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResult|AccessResultAllowed|AccessResultNeutral
    *   Returns the access result to grant user access.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/civicccookiecontrol/src/Access/CookieControlAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civiccookiecontrol\Access;

+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\civiccookiecontrol\CCCConfigNames;
 use Drupal\civiccookiecontrol\Form\CCCFormHelper;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * Function that checks if user has the perms to admin cookie control.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user account.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResult|AccessResultAllowed|AccessResultNeutral
    *   Return value.
    */
   public function checkAccess(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/src/Plugin/Block/CivicGovUkCookieControlDetailsBlock.php:5

    ---------- begin diff ----------
@@ @@
  * @file
  * Contains \Drupal\civic_govuk_cookiecontrol\Plugin\Block\CivicGovUkCookieControlDetailsBlock.
  */
-
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\civiccookiecontrol\Entity\AltLanguage;
 use Drupal\civic_govuk_cookiecontrol\GovUKConfigNames;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
   /**
    * The cookie control configuration settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $cookieControlConfig;
   /**
    * Entity type manager object from dependency injection.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
   /**
    * The GOV UK CookieControl configuration settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $cookieControlGovUkConfig;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Injected config factory service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Injected language manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Injected Entity type manager service.
    */
   public function __construct(
@@ @@
    *   The render array.
    * @param string $lang
    *   Current language.
-   * @param \Drupal\civiccookiecontrol\Entity\AltLanguage|null $altLangEntity
+   * @param AltLanguage|null $altLangEntity
    *   The cookie control altlanguage entity.
    *
    * @return mixed
    *   The final render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadCookieTextsInRenderArray(array &$renderArray, $lang = 'en', $altLangEntity = NULL) {
     $categories = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/src/Plugin/Block/CivicGovUkCookieControlBannerBlock.php:5

    ---------- begin diff ----------
@@ @@
  * @file
  * Contains \Drupal\civic_govuk_cookiecontrol\Plugin\Block\CivicGovUkCookieControlBannerBlock.
  */
-
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\civic_govuk_cookiecontrol\GovUKConfigNames;
 use Drupal\civiccookiecontrol\Entity\AltLanguage;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
   /**
    * The cookie control configuration settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $cookieControlConfig;
   /**
    * The GOV UK CookieControl configuration settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $cookieControlGovUkConfig;

@@ @@
   /**
    * Entity type manager object from dependency injection.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The string locale storage service.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localeStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Injected config factory service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Injected language manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Injected Entity type manager service.
-   * @param \Drupal\locale\StringStorageInterface $localeStorage
+   * @param StringStorageInterface $localeStorage
    *   Injected string storage service.
    */
   public function __construct(
@@ @@
    *   The render array.
    * @param string $lang
    *   Current language.
-   * @param \Drupal\civiccookiecontrol\Entity\AltLanguage|null $altLangEntity
+   * @param AltLanguage|null $altLangEntity
    *   The cookie control altlanguage entity.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/src/Form/CivicGovUkCookieControlSettings.php:5

    ---------- begin diff ----------
@@ @@
  * @file
  * Contains \Drupal\civic_govuk_cookiecontrol\Form\CivicGovUkCookieControlSettings.
  */
-
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\locale\StringStorageException;
 use Drupal\civic_govuk_cookiecontrol\GovUKConfigNames;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
   /**
    * The string locale storage service.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $localeStorage;
   /**
    * The array of defined languages.
    *
-   * @var \Drupal\Core\Language\LanguageInterface[]
+   * @var LanguageInterface[]
    */
   protected $langCodes;

@@ @@
   /**
    * CivicGovUkCookieControlSettings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Injected config factory service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Injected language manager service.
-   * @param \Drupal\locale\StringStorageInterface $localeStorage
+   * @param StringStorageInterface $localeStorage
    *   Injected string storage service.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\locale\StringStorageException
+   * @throws StringStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {

@@ @@
    *   Current language string.
    */
   protected function loadSettings(array &$form, $langCode, $lang) {
-    $iabYamlPath = drupal_get_path(
-          'module',
-          'civic_govuk_cookiecontrol'
-      ) .
+    $iabYamlPath = \Drupal::service('extension.list.module')->getPath('civic_govuk_cookiecontrol') .
           "/src/Form/GovUkFormElements/civic_govuk_cookiecontrol.texts.yml";

     $formItems = Yaml::parse(file_get_contents($iabYamlPath));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/civicccookiecontrol/modules/civic_govuk_cookiecontrol/civic_govuk_cookiecontrol.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\locale\StringStorageException;
 /**
  * @file
  * Main file for Civic GovUK Cookie Control.
@@ @@
 /**
  * Function to load strings from configuration object in locale storage.
  *
- * @throws \Drupal\locale\StringStorageException
+ * @throws StringStorageException
  */
 function civic_govuk_cookiecontrol_preload_source_strings() {
   $config = \Drupal::configFactory()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


31) modules/contrib/civicccookiecontrol/civiccookiecontrol.module:95

    ---------- begin diff ----------
@@ @@
   $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

   $page['#attached']['drupalSettings']['path'] = [
-    'civiccookiecontrol_path' => drupal_get_path('module', 'civiccookiecontrol'),
+    'civiccookiecontrol_path' => \Drupal::service('extension.list.module')->getPath('civiccookiecontrol'),
   ];
   if (!$is_admin || $cccConfig->get('civiccookiecontrol_drupal_admin')) {
     $page['#attached']['drupalSettings']['civiccookiecontrol'] = CCCConfigFactory::getCccConfig($cccConfig->get('civiccookiecontrol_api_key_version'))->getCccConfigJson();
@@ @@
  */
 function civiccookiecontrol_set_ccclogo(array &$variables) {
   global $base_url;
-  $variables['ccc_logo'] = $base_url . '/' . drupal_get_path('module', 'civiccookiecontrol') . '/images/CookieControlCivic.png';
+  $variables['ccc_logo'] = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('civiccookiecontrol') . '/images/CookieControlCivic.png';
 }

 /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 31 files have been changed by Rector                                      

