modules/contrib/telephone_advanced/src/FieldSettings.php
modules/contrib/telephone_advanced/src/Plugin/Field/FieldFormatter/TelephoneAdvancedFormatter.php
modules/contrib/telephone_advanced/src/Plugin/Field/FieldType/TelephoneItem.php
modules/contrib/telephone_advanced/src/Plugin/Validation/Constraint/TelephoneAdvancedConstraint.php
modules/contrib/telephone_advanced/src/Plugin/Validation/Constraint/TelephoneAdvancedConstraintValidator.php
modules/contrib/telephone_advanced/src/TelephoneFormatter.php
modules/contrib/telephone_advanced/src/TelephoneFormatterInterface.php
modules/contrib/telephone_advanced/src/TelephoneParser.php
modules/contrib/telephone_advanced/src/TelephoneParserInterface.php
modules/contrib/telephone_advanced/src/TelephoneTypes.php
modules/contrib/telephone_advanced/src/TelephoneValidator.php
modules/contrib/telephone_advanced/src/TelephoneValidatorInterface.php
modules/contrib/telephone_advanced/telephone_advanced.module

10 files with changes
=====================

1) modules/contrib/telephone_advanced/telephone_advanced.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Locale\CountryManagerInterface;
+use Drupal\telephone_advanced\TelephoneValidatorInterface;
+use Drupal\telephone_advanced\TelephoneFormatterInterface;
 /**
  * @file
  * Main module file.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function telephone_advanced_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+  /** @var EntityFormInterface $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_object->getEntity();

   if ($field->getType() !== 'telephone') {
@@ @@
     return;
   }

-  /** @var \Drupal\Core\Locale\CountryManagerInterface $country_manager */
+  /** @var CountryManagerInterface $country_manager */
   $country_manager = Drupal::service('country_manager');

   $form['telephone_advanced'] = [
@@ @@
  *
  * @param array $form
  *   The complete form structure.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current form state.
  */
 function telephone_advanced_form_field_config_edit_form_validate(array &$form, FormStateInterface $form_state) {
@@ @@
  *
  * @param array $form
  *   The complete form structure.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current form state.
  */
 function telephone_advanced_form_field_config_edit_form_submit(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+  /** @var EntityFormInterface $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_object->getEntity();

   $enabled = (bool) $form_state->getValue(['telephone_advanced', 'enabled']);
@@ @@
  *
  * @param array $element
  *   The form element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  * @param array $complete_form
  *   The complete form structure.
@@ @@
     'format' => NULL,
   ];

-  /** @var \Drupal\telephone_advanced\TelephoneValidatorInterface $validator */
+  /** @var TelephoneValidatorInterface $validator */
   $validator = Drupal::service('telephone_advanced.telephone_validator');

   // Validate the telephone number.
@@ @@

   // Validate the country.
   if (!$settings['allowed_countries'] && !$validator->isFromCountry($element['#value'], $settings['allowed_countries'], $settings['default_country'])) {
-    /** @var \Drupal\Core\Locale\CountryManagerInterface $country_manager */
+    /** @var CountryManagerInterface $country_manager */
     $country_manager = Drupal::service('country_manager');
     $countries = array_intersect_key($country_manager->getList(), array_flip($settings['allowed_countries']));
     $countries = implode(', ', $countries);
@@ @@

   // Format.
   if ($settings['format'] !== NULL) {
-    /** @var \Drupal\telephone_advanced\TelephoneFormatterInterface $formatter */
+    /** @var TelephoneFormatterInterface $formatter */
     $formatter = Drupal::service('telephone_advanced.telephone_formatter');
     $element['#value'] = $formatter->format($element['#value'], $settings['format'], $settings['default_country']);
     $form_state->setValueForElement($element, $element['#value']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/telephone_advanced/src/TelephoneValidatorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\telephone_advanced;

+use libphonenumber\PhoneNumber;
 /**
  * Interface for the telephone validator service.
  */
@@ @@
   /**
    * Check if a telephone number is from a country.
    *
-   * @param string|\libphonenumber\PhoneNumber $number
+   * @param string|PhoneNumber $number
    *   The telephone number.
    * @param string|array $countries
    *   The allowed country or countries.
@@ @@
   /**
    * Check the telephone number type.
    *
-   * @param string|\libphonenumber\PhoneNumber $number
+   * @param string|PhoneNumber $number
    *   The telephone number.
    * @param int|array $types
    *   The allowed type or types.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/telephone_advanced/src/TelephoneValidator.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The telephone parser.
    *
-   * @var \Drupal\telephone_advanced\TelephoneParserInterface
+   * @var TelephoneParserInterface
    */
   protected $telephoneParser;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\telephone_advanced\TelephoneParserInterface $telephone_parser
+   * @param TelephoneParserInterface $telephone_parser
    *   The telephone parser.
    */
   public function __construct(TelephoneParserInterface $telephone_parser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/telephone_advanced/src/TelephoneTypes.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\telephone_advanced;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use libphonenumber\PhoneNumberType;

 /**
@@ @@
   /**
    * Get all telephone number type labels.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The type labels.
    */
   public static function getLabels() {
@@ @@
    * @param int $type
    *   The type.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   The type label or NULL if unknown.
    */
   public static function getLabel($type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/telephone_advanced/src/TelephoneParserInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\telephone_advanced;

+use libphonenumber\PhoneNumber;
+use libphonenumber\NumberParseException;
 /**
  * Interface for the telephone parser service.
  */
@@ @@
    *   The default country code, leave NULL if the number is guaranteed
    *   to start with a country calling code.
    *
-   * @return \libphonenumber\PhoneNumber
+   * @return PhoneNumber
    *   The phone number object.
    *
-   * @throws \libphonenumber\NumberParseException
+   * @throws NumberParseException
    */
   public function parse($number, $default_country = NULL);

@@ @@
   /**
    * Get the country of a telephone number.
    *
-   * @param string|\libphonenumber\PhoneNumber $number
+   * @param string|PhoneNumber $number
    *   The telephone number.
    * @param string|null $default_country
    *   The default country code. Can be NULL when $number is a PhoneNumber object
@@ @@
   /**
    * Get the telephone number type.
    *
-   * @param string|\libphonenumber\PhoneNumber $number
+   * @param string|PhoneNumber $number
    *   The telephone number.
    * @param string|null $default_country
    *   The default country code. Can be NULL when $number is a PhoneNumber object
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/telephone_advanced/src/TelephoneFormatter.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The telephone parser.
    *
-   * @var \Drupal\telephone_advanced\TelephoneParserInterface
+   * @var TelephoneParserInterface
    */
   protected $telephoneParser;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\telephone_advanced\TelephoneParserInterface $telephone_parser
+   * @param TelephoneParserInterface $telephone_parser
    *   The telephone parser.
    */
   public function __construct(TelephoneParserInterface $telephone_parser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/telephone_advanced/src/Plugin/Validation/Constraint/TelephoneAdvancedConstraintValidator.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The telephone number validator.
    *
-   * @var \Drupal\telephone_advanced\TelephoneValidatorInterface
+   * @var TelephoneValidatorInterface
    */
   protected $telephoneValidator;

@@ @@
   /**
    * The country manager.
    *
-   * @var \Drupal\Core\Locale\CountryManagerInterface
+   * @var CountryManagerInterface
    */
   protected $countryManager;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\telephone_advanced\TelephoneValidatorInterface $number_validator
+   * @param TelephoneValidatorInterface $number_validator
    *   The telephone number validator.
-   * @param \Drupal\Core\Locale\CountryManagerInterface $country_manager
+   * @param CountryManagerInterface $country_manager
    *   The country manager.
    */
   public function __construct(TelephoneValidatorInterface $number_validator, CountryManagerInterface $country_manager) {
@@ @@

     // Validate the telephone number.
     if (!$this->telephoneValidator->isValid($item->value, $default_country)) {
-      /** @var \Drupal\telephone_advanced\Plugin\Validation\Constraint\TelephoneAdvancedConstraint $constraint */
+      /** @var TelephoneAdvancedConstraint $constraint */
       $this->context->addViolation($constraint->notValidMessage, [
         '@label' => $label,
       ]);
@@ @@

     // Validate the country.
     if ($allowed_countries && !$this->telephoneValidator->isFromCountry($item->value, $allowed_countries, $default_country)) {
-      /** @var \Drupal\Core\Locale\CountryManagerInterface $country_manager */
+      /** @var CountryManagerInterface $country_manager */
       $countries = array_intersect_key(
         $this->countryManager->getList(),
         array_flip($allowed_countries)
@@ @@
       $countries = implode(', ', $countries);

       if (count($allowed_countries) === 1) {
-        /** @var \Drupal\telephone_advanced\Plugin\Validation\Constraint\TelephoneAdvancedConstraint $constraint */
+        /** @var TelephoneAdvancedConstraint $constraint */
         $this->context->addViolation($constraint->countryNotAllowedSingularMessage, [
           '@label' => $label,
           '@country' => $countries,
@@ @@
         ]);
       }
       else {
-        /** @var \Drupal\telephone_advanced\Plugin\Validation\Constraint\TelephoneAdvancedConstraint $constraint */
+        /** @var TelephoneAdvancedConstraint $constraint */
         $this->context->addViolation($constraint->countryNotAllowedPluralMessage, [
           '@label' => $label,
           '@countries' => $countries,
@@ @@
     // Validate the type.
     if ($allowed_types && !$this->telephoneValidator->isOfType($item->value, $allowed_types, FALSE, $default_country)) {
       if (count($allowed_types) === 1) {
-        /** @var \Drupal\telephone_advanced\Plugin\Validation\Constraint\TelephoneAdvancedConstraint $constraint */
+        /** @var TelephoneAdvancedConstraint $constraint */
         $this->context->addViolation($constraint->typeNotAllowedSingularMessage, [
           '@label' => $label,
           '@type' => mb_strtolower(TelephoneTypes::getLabel(reset($allowed_types))),
@@ @@
         $types = array_intersect_key(TelephoneTypes::getLabels(), array_flip($allowed_types));
         $types = mb_strtolower(implode(', ', $types));

-        /** @var \Drupal\telephone_advanced\Plugin\Validation\Constraint\TelephoneAdvancedConstraint $constraint */
+        /** @var TelephoneAdvancedConstraint $constraint */
         $this->context->addViolation($constraint->typeNotAllowedPluralMessage, [
           '@label' => $label,
           '@types' => $types,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/telephone_advanced/src/Plugin/Field/FieldType/TelephoneItem.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The telephone formatter.
    *
-   * @var \Drupal\telephone_advanced\TelephoneFormatterInterface|null
+   * @var TelephoneFormatterInterface|null
    */
   protected $telephoneFormatter;

@@ @@
   /**
    * Set the telephone formatter.
    *
-   * @param \Drupal\telephone_advanced\TelephoneFormatterInterface $telephone_formatter
+   * @param TelephoneFormatterInterface $telephone_formatter
    *   The telephone formatter.
    */
   public function setTelephoneFormatter(TelephoneFormatterInterface $telephone_formatter) {
@@ @@
   /**
    * Get the telephone formatter.
    *
-   * @return \Drupal\telephone_advanced\TelephoneFormatterInterface
+   * @return TelephoneFormatterInterface
    *   The telephone formatter.
    */
   protected function getTelephoneFormatter() {
     if (!isset($this->telephoneFormatter)) {
-      /** @var \Drupal\telephone_advanced\TelephoneFormatterInterface $formatter */
+      /** @var TelephoneFormatterInterface $formatter */
       $formatter = \Drupal::service('telephone_advanced.telephone_formatter');
       $this->telephoneFormatter = $formatter;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/telephone_advanced/src/Plugin/Field/FieldFormatter/TelephoneAdvancedFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\telephone_advanced\Plugin\Field\FieldFormatter;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The telephone formatter.
    *
-   * @var \Drupal\telephone_advanced\TelephoneFormatterInterface
+   * @var TelephoneFormatterInterface
    */
   protected $telephoneFormatter;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   The third party settings.
-   * @param \Drupal\telephone_advanced\TelephoneFormatterInterface $telephone_formatter
+   * @param TelephoneFormatterInterface $telephone_formatter
    *   The telephone formatter.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, TelephoneFormatterInterface $telephone_formatter) {
@@ @@
   /**
    * Get the format options.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The format options.
    */
   protected function getFormatOptions() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/telephone_advanced/src/FieldSettings.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Check if our advanced features have been enabled.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return bool
@@ @@
   /**
    * Get the default country.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return string|null
@@ @@
   /**
    * Get the allowed countries.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return array
@@ @@
   /**
    * Get the allowed telephone number types.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return array
@@ @@
   /**
    * Get the storage format.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return int|null
@@ @@
   /**
    * Get one of our settings from the field definition.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param string $name
    *   The setting name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 10 files have been changed by Rector                                      

