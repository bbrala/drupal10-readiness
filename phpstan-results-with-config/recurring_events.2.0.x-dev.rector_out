modules/contrib/recurring_events/modules/group_recurring_events_series/group_recurring_events_series.install
modules/contrib/recurring_events/modules/group_recurring_events_series/group_recurring_events_series.module
modules/contrib/recurring_events/modules/group_recurring_events_series/src/Controller/GroupEventSeriesController.php
modules/contrib/recurring_events/modules/group_recurring_events_series/src/Plugin/GroupContentEnabler/GroupEventSeries.php
modules/contrib/recurring_events/modules/group_recurring_events_series/src/Plugin/GroupContentEnabler/GroupEventSeriesDeriver.php
modules/contrib/recurring_events/modules/group_recurring_events_series/src/Plugin/GroupEventSeriesPermissionProvider.php
modules/contrib/recurring_events/modules/group_recurring_events_series/src/Routing/GroupEventSeriesRouteProvider.php
modules/contrib/recurring_events/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.install
modules/contrib/recurring_events/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.module
modules/contrib/recurring_events/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.tokens.inc
modules/contrib/recurring_events/modules/recurring_events_registration/modules/recurring_events_reminders/src/Plugin/Field/FieldType/RegistrationReminders.php
modules/contrib/recurring_events/modules/recurring_events_registration/modules/recurring_events_reminders/src/Plugin/Field/FieldWidget/RegistrationRemindersWidget.php
modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.api.php
modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.install
modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.module
modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.post_update.php
modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.tokens.inc
modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.views.inc
modules/contrib/recurring_events/modules/recurring_events_registration/src/AccessHandler.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Controller/RegistrantController.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Entity/Registrant.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Entity/RegistrantInterface.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Entity/RegistrantType.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Entity/RegistrantTypeInterface.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Entity/RegistrantViewsData.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/ContactForm.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantDeleteForm.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantForm.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantResendForm.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantSettingsForm.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantTypeForm.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/NotificationService.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/ComputedField/AvailabilityCount.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/ComputedField/RegistrationCount.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/ComputedField/WaitlistCount.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/Field/ComputedRegistrantTitleFieldItemList.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/Field/FieldType/EventRegistration.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/Field/FieldWidget/EventRegistrationWidget.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/GroupContentEnabler/Registrant.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/access/EventRegistrationListAccess.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/argument/EventInstanceRegistrationAvailabilityCount.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceCapacity.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceRegistrationAvailability.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceRegistrationCount.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceWaitlistCount.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/filter/EventInstanceRegistrationAvailability.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/filter/EventInstanceRegistrationAvailabilityCount.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrantAccessControlHandler.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrantListBuilder.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrantTypeHtmlRouteProvider.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrantTypeListBuilder.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrationCreationService.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Routing/RouteSubscriber.php
modules/contrib/recurring_events/modules/recurring_events_registration/src/Traits/RegistrationCreationServiceTrait.php
modules/contrib/recurring_events/modules/recurring_events_views/recurring_events_views.install
modules/contrib/recurring_events/modules/recurring_events_views/recurring_events_views.module
modules/contrib/recurring_events/recurring_events.api.php
modules/contrib/recurring_events/recurring_events.install
modules/contrib/recurring_events/recurring_events.module
modules/contrib/recurring_events/recurring_events.tokens.inc
modules/contrib/recurring_events/recurring_events.views.inc
modules/contrib/recurring_events/src/Controller/EventInstanceController.php
modules/contrib/recurring_events/src/Controller/EventSeriesController.php
modules/contrib/recurring_events/src/Entity/EventInstance.php
modules/contrib/recurring_events/src/Entity/EventInstanceType.php
modules/contrib/recurring_events/src/Entity/EventInstanceTypeInterface.php
modules/contrib/recurring_events/src/Entity/EventSeries.php
modules/contrib/recurring_events/src/Entity/EventSeriesType.php
modules/contrib/recurring_events/src/Entity/EventSeriesTypeInterface.php
modules/contrib/recurring_events/src/Entity/ExcludedDates.php
modules/contrib/recurring_events/src/Entity/ExcludedDatesInterface.php
modules/contrib/recurring_events/src/Entity/IncludedDates.php
modules/contrib/recurring_events/src/Entity/IncludedDatesInterface.php
modules/contrib/recurring_events/src/EventCreationService.php
modules/contrib/recurring_events/src/EventInstanceAccessControlHandler.php
modules/contrib/recurring_events/src/EventInstanceHtmlRouteProvider.php
modules/contrib/recurring_events/src/EventInstanceListBuilder.php
modules/contrib/recurring_events/src/EventInstanceStorage.php
modules/contrib/recurring_events/src/EventInstanceStorageInterface.php
modules/contrib/recurring_events/src/EventInstanceTranslationHandler.php
modules/contrib/recurring_events/src/EventInstanceTypeHtmlRouteProvider.php
modules/contrib/recurring_events/src/EventInstanceTypeListBuilder.php
modules/contrib/recurring_events/src/EventInterface.php
modules/contrib/recurring_events/src/EventSeriesAccessControlHandler.php
modules/contrib/recurring_events/src/EventSeriesHtmlRouteProvider.php
modules/contrib/recurring_events/src/EventSeriesListBuilder.php
modules/contrib/recurring_events/src/EventSeriesStorage.php
modules/contrib/recurring_events/src/EventSeriesStorageInterface.php
modules/contrib/recurring_events/src/EventSeriesTranslationHandler.php
modules/contrib/recurring_events/src/EventSeriesTypeHtmlRouteProvider.php
modules/contrib/recurring_events/src/EventSeriesTypeListBuilder.php
modules/contrib/recurring_events/src/EventSubscriber/RecurringEventsAdminRouteSubscriber.php
modules/contrib/recurring_events/src/ExcludedDatesHtmlRouteProvider.php
modules/contrib/recurring_events/src/ExcludedDatesListBuilder.php
modules/contrib/recurring_events/src/Form/EventInstanceCloneForm.php
modules/contrib/recurring_events/src/Form/EventInstanceDeleteForm.php
modules/contrib/recurring_events/src/Form/EventInstanceForm.php
modules/contrib/recurring_events/src/Form/EventInstanceRevisionDeleteForm.php
modules/contrib/recurring_events/src/Form/EventInstanceRevisionRevertForm.php
modules/contrib/recurring_events/src/Form/EventInstanceRevisionRevertTranslationForm.php
modules/contrib/recurring_events/src/Form/EventInstanceSettingsForm.php
modules/contrib/recurring_events/src/Form/EventInstanceTypeForm.php
modules/contrib/recurring_events/src/Form/EventSeriesCloneForm.php
modules/contrib/recurring_events/src/Form/EventSeriesDeleteForm.php
modules/contrib/recurring_events/src/Form/EventSeriesForm.php
modules/contrib/recurring_events/src/Form/EventSeriesRevisionDeleteForm.php
modules/contrib/recurring_events/src/Form/EventSeriesRevisionRevertForm.php
modules/contrib/recurring_events/src/Form/EventSeriesRevisionRevertTranslationForm.php
modules/contrib/recurring_events/src/Form/EventSeriesSettingsForm.php
modules/contrib/recurring_events/src/Form/EventSeriesTypeDeleteForm.php
modules/contrib/recurring_events/src/Form/EventSeriesTypeForm.php
modules/contrib/recurring_events/src/Form/ExcludedDatesDeleteForm.php
modules/contrib/recurring_events/src/Form/ExcludedDatesForm.php
modules/contrib/recurring_events/src/Form/IncludedDatesDeleteForm.php
modules/contrib/recurring_events/src/Form/IncludedDatesForm.php
modules/contrib/recurring_events/src/IncludedDatesHtmlRouteProvider.php
modules/contrib/recurring_events/src/IncludedDatesListBuilder.php
modules/contrib/recurring_events/src/Plugin/ComputedField/EventInstances.php
modules/contrib/recurring_events/src/Plugin/Field/FieldFormatter/EventInstanceDateCompactFormatter.php
modules/contrib/recurring_events/src/Plugin/Field/FieldFormatter/EventInstanceDateFormatter.php
modules/contrib/recurring_events/src/Plugin/Field/FieldType/ConsecutiveRecurringDate.php
modules/contrib/recurring_events/src/Plugin/Field/FieldType/DailyRecurringDate.php
modules/contrib/recurring_events/src/Plugin/Field/FieldType/MonthlyRecurringDate.php
modules/contrib/recurring_events/src/Plugin/Field/FieldType/WeeklyRecurringDate.php
modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/ConsecutiveRecurringDateWidget.php
modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/DailyRecurringDateWidget.php
modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/MonthlyRecurringDateWidget.php
modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/WeeklyRecurringDateWidget.php
modules/contrib/recurring_events/src/Plugin/FullcalendarViewProcessor/RecurringEventsFullCalendarProcessor.php
modules/contrib/recurring_events/src/Plugin/RecurringEventsFieldTrait.php
modules/contrib/recurring_events/src/Plugin/migrate/destination/EntityEventSeries.php
modules/contrib/recurring_events/src/Plugin/views/argument/IndexTidEventInstanceDepth.php
modules/contrib/recurring_events/src/Plugin/views/argument/IndexTidEventSeriesDepth.php
modules/contrib/recurring_events/src/Plugin/views/field/EventSeriesInstanceCount.php
modules/contrib/recurring_events/src/Plugin/views/field/EventSeriesStartDate.php
modules/contrib/recurring_events/src/Plugin/views/filter/TaxonomyIndexTidEventInstanceDepth.php
modules/contrib/recurring_events/src/Plugin/views/filter/TaxonomyIndexTidEventSeriesDepth.php
modules/contrib/recurring_events/src/RecurringEventsFieldTypeInterface.php
modules/contrib/recurring_events/tests/src/Functional/LoadTest.php
modules/contrib/recurring_events/tests/src/Kernel/ConsecutiveRecurringDateTest.php
modules/contrib/recurring_events/tests/src/Kernel/DailyRecurringDateTest.php
modules/contrib/recurring_events/tests/src/Kernel/MonthlyRecurringDateTest.php
modules/contrib/recurring_events/tests/src/Kernel/RecurringEventsFieldTraitTest.php
modules/contrib/recurring_events/tests/src/Kernel/WeeklyRecurringDateTest.php

71 files with changes
=====================

1) modules/contrib/recurring_events/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\recurring_events\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/recurring_events/src/RecurringEventsFieldTypeInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Converts an EventSeries entity's recurring configuration to an array.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
    *
    * @return array
@@ @@
   /**
    * Converts a form state object's recurring configuration to an array.
    *
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of an updated event series entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/recurring_events/src/Plugin/views/filter/TaxonomyIndexTidEventSeriesDepth.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The entity bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @var EntityFieldManagerInterface $entity_field_manager
    */
   protected $entityFieldManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabulary_storage
+   * @param VocabularyStorageInterface $vocabulary_storage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, VocabularyStorageInterface $vocabulary_storage, TermStorageInterface $term_storage, AccountInterface $current_user = NULL,EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, EntityFieldManagerInterface $entity_field_manager = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/recurring_events/src/Plugin/views/argument/IndexTidEventSeriesDepth.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @var EntityFieldManagerInterface $entity_field_manager
    */
   protected $entityFieldManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $term_storage
+   * @param EntityStorageInterface $term_storage
    *   The entity storage interface.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $term_storage, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/recurring_events/src/Plugin/migrate/destination/EntityEventSeries.php:85

    ---------- begin diff ----------
@@ @@
    *   Date field data.
    * @param \DateTimeZone $source_timezone
    *   The source timezone for the recurring dates.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Row object.
    */
   private function setRecurringDateValues(array $source, \DateTimeZone $source_timezone, Row $row) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/WeeklyRecurringDateWidget.php:115

    ---------- begin diff ----------
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/MonthlyRecurringDateWidget.php:159

    ---------- begin diff ----------
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/DailyRecurringDateWidget.php:202

    ---------- begin diff ----------
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/recurring_events/src/Plugin/Field/FieldWidget/ConsecutiveRecurringDateWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Plugin\Field\FieldWidget;

+use Drupal\recurring_events\Entity\EventSeries;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\datetime_range\Plugin\Field\FieldWidget\DateRangeDefaultWidget;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    */
   public function changeDuration(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
-    /** @var \Drupal\recurring_events\Entity\EventSeries $entity */
+    /** @var EventSeries $entity */
     $entity = $form_state->getformObject()->getEntity();
     $form_id = $form_state->getBuildInfo()['form_id'] == 'eventseries_' . $entity->bundle() . '_edit_form' ? 'eventseries-' . $entity->bundle() . '-edit-form' : 'eventseries-' . $entity->bundle() . '-add-form';
     $response->addCommand(new HtmlCommand('#' . $form_id, $form));
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/recurring_events/src/Plugin/Field/FieldType/WeeklyRecurringDate.php:195

    ---------- begin diff ----------
@@ @@
    *
    * @param string $weekday
    *   The name of the day of the week.
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/recurring_events/src/Plugin/Field/FieldType/MonthlyRecurringDate.php:291

    ---------- begin diff ----------
@@ @@
    *
    * @param int $day_of_month
    *   The day of the month.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
@@ @@
    *
    * @param int $day_of_month
    *   The day of the month.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The start date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The next occurrence of a specific day of the month.
    */
   public static function findNextMonthDay($day_of_month, DrupalDateTime $date) {
@@ @@
    *   Which occurrence of the weekday to find.
    * @param string $weekday
    *   The name of the day of the week.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/recurring_events/src/Plugin/Field/FieldType/DailyRecurringDate.php:256

    ---------- begin diff ----------
@@ @@
   /**
    * Find all the daily date occurrences between two dates.
    *
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/recurring_events/src/Plugin/Field/FieldType/ConsecutiveRecurringDate.php:285

    ---------- begin diff ----------
@@ @@
   /**
    * Find all the daily date occurrences between two dates.
    *
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date.
    * @param bool $count_only
    *   Whether to only return a count.
@@ @@
   /**
    * Find all the time slots between two times of a specific day.
    *
-   * @param Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    * @param array $form_data
    *   The form data used to find the time slots.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/recurring_events/src/Plugin/Field/FieldFormatter/EventInstanceDateFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Plugin\Field\FieldFormatter;

+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
       $date_string = '';
       $user_timezone = new \DateTimeZone(date_default_timezone_get());
       if (!empty($entity->date->start_date) && !empty($entity->date->end_date)) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+        /** @var DrupalDateTime $start_date */
         $start_date = $entity->date->start_date;
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+        /** @var DrupalDateTime $end_date */
         $end_date = $entity->date->end_date;

         $start_date->setTimezone($user_timezone);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/recurring_events/src/Plugin/Field/FieldFormatter/EventInstanceDateCompactFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Plugin\Field\FieldFormatter;

+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
@@ @@
   /**
    * The date range format entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateRangeFormatStorage;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   Third party settings.
    * @param \Drupal\daterange_compact\DateRangeFormatterInterface $date_range_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $date_range_format_storage
+   * @param EntityStorageInterface $date_range_format_storage
    *   The date format entity storage.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, DateRangeFormatterInterface $date_range_formatter, EntityStorageInterface $date_range_format_storage) {
@@ @@
       $date_string = '';
       $user_timezone = new \DateTimeZone(date_default_timezone_get());
       if (!empty($entity->date->start_date) && !empty($entity->date->end_date)) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+        /** @var DrupalDateTime $start_date */
         $start_date = $entity->date->start_date;
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+        /** @var DrupalDateTime $end_date */
         $end_date = $entity->date->end_date;

         $start_date->setTimezone($user_timezone);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/recurring_events/src/Form/IncludedDatesForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Construct an FieldInheritanceForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/recurring_events/src/Form/IncludedDatesDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Construct an IncludedDatesDeleteForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/recurring_events/src/Form/ExcludedDatesForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Construct an FieldInheritanceForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/recurring_events/src/Form/ExcludedDatesDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Construct an IncludedDatesDeleteForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/recurring_events/src/Form/EventSeriesTypeForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new EventSeriesTypeForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/recurring_events/src/Form/EventSeriesTypeDeleteForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Construct a EventSeriesTypeDeleteForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/recurring_events/src/Form/EventSeriesSettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The event creation service.
    *
-   * @var \Drupal\recurring_events\EventCreationService
+   * @var EventCreationService
    */
   protected $creationService;

@@ @@
   /**
    * Constructs a new EventSeriesSettingsForm.
    *
-   * @param \Drupal\recurring_events\EventCreationService $creation_service
+   * @param EventCreationService $creation_service
    *   The event creation service.
    */
   public function __construct(EventCreationService $creation_service) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/recurring_events/src/Form/EventSeriesRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new EventSeriesRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventseries storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, TimeInterface $time) {
@@ @@
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\recurring_events\EventInterface $default_revision */
+    /** @var EventInterface $default_revision */
     $latest_revision = $this->eventSeriesStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/recurring_events/src/Form/EventSeriesRevisionRevertForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The eventseries revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;

@@ @@
   /**
    * The eventseries storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventSeriesStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new EventSeriesRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventseries storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, Messenger $messenger) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\recurring_events\EventInterface $revision
+   * @param EventInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\recurring_events\EventInterface
+   * @return EventInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/recurring_events/src/Form/EventSeriesRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Form;

+use Drupal\recurring_events\EventInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The eventseries revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;

@@ @@
   /**
    * The eventseries storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventSeriesStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new EventSeriesRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter, Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/recurring_events/src/Form/EventSeriesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Form;

+use Drupal\recurring_events\Entity\EventSeries;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The event creation service.
    *
-   * @var \Drupal\recurring_events\EventCreationService
+   * @var EventCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The entity storage interface.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The field type plugin manager.
    *
-   * @var Drupal\Core\Field\FieldTypePluginManager
+   * @var FieldTypePluginManager
    */
   protected $fieldTypePluginManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Construct an EventSeriesForm.
    *
-   * @param \Drupal\recurring_events\EventCreationService $creation_service
+   * @param EventCreationService $creation_service
    *   The event creation service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The storage interface.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManager $field_type_plugin_manager
+   * @param FieldTypePluginManager $field_type_plugin_manager
    *   The field type plugin manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository interface.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
    */
   public function __construct(EventCreationService $creation_service, EntityStorageInterface $storage, Messenger $messenger, DateFormatter $date_formatter, EntityFieldManager $entity_field_manager, FieldTypePluginManager $field_type_plugin_manager, EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, AccountProxyInterface $current_user = NULL, ModuleHandler $module_handler = NULL, ConfigFactory $config_factory = NULL) {
@@ @@

     $config = $this->configFactory->get('recurring_events.eventseries.config');

-    /** @var \Drupal\recurring_events\Entity\EventSeries $entity */
+    /** @var EventSeries $entity */
     $entity = $this->entity;

     $editing = ($form_state->getBuildInfo()['form_id'] == 'eventseries_' . $entity->bundle() . '_edit_form');
@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);

-    /** @var \Drupal\recurring_events\Entity\EventSeries $entity */
+    /** @var EventSeries $entity */
     $entity = $this->entity;
     $editing = ($form_state->getBuildInfo()['form_id'] == 'eventseries_' . $entity->bundle() . '_edit_form');
     $trigger = $form_state->getTriggeringElement();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/recurring_events/src/Form/EventSeriesDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The untranslated eventseries.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   public $untranslatedEvent;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Construct an EventSeriesDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, Messenger $messenger, Renderer $renderer, ConfigFactory $config) {
@@ @@
    */
   public function getQuestion() {

-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     if (!$entity->isDefaultTranslation()) {
       return $this
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {

-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();

     // Make sure that deleting a translation does not delete the whole entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/recurring_events/src/Form/EventInstanceTypeForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new EventSeriesTypeForm.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/recurring_events/src/Form/EventInstanceSettingsForm.php:35

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/recurring_events/src/Form/EventInstanceRevisionRevertTranslationForm.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new EventInstanceRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventinstance storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\recurring_events\EventInterface $default_revision */
+    /** @var EventInterface $default_revision */
     $latest_revision = $this->eventSeriesStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/recurring_events/src/Form/EventInstanceRevisionRevertForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The eventinstance revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;

@@ @@
   /**
    * The eventinstance storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventSeriesStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new EventInstanceRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The eventinstance storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, Messenger $messenger) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\recurring_events\EventInterface $revision
+   * @param EventInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\recurring_events\EventInterface
+   * @return EventInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(EventInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/recurring_events/src/Form/EventInstanceRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Form;

+use Drupal\recurring_events\EventInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The eventinstance revision.
    *
-   * @var \Drupal\recurring_events\EventInterface
+   * @var EventInterface
    */
   protected $revision;

@@ @@
   /**
    * The eventinstance storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eventInstanceStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new EventInstanceRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter, Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/recurring_events/src/Form/EventInstanceForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Form;

+use Drupal\recurring_events\Entity\EventInstance;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Construct an EventInstanceForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, Messenger $messenger, AccountProxyInterface $current_user) {
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\recurring_events\Entity\EventInstance $entity */
+    /** @var EventInstance $entity */
     $event = $this->entity;

     $form['notifications'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/recurring_events/src/Form/EventInstanceDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The untranslated event instance.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   public $untranslatedEventInstance;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Construct a EventInstanceDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, Messenger $messenger, DateFormatter $date_formatter) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     if (!$entity->isDefaultTranslation()) {
       return $this
@@ @@
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();

     // Make sure that deleting a translation does not delete the whole entity.
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();

     // Make sure that deleting a translation does not delete the whole entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/recurring_events/src/EventSubscriber/RecurringEventsAdminRouteSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The router builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;

@@ @@
   /**
    * Constructs a new RecurringEventsAdminRouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
@@ @@
   /**
    * Rebuilds the router when node.settings:use_admin_theme is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The config crud event that gets fired.
    */
   public function onConfigSave(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/recurring_events/src/EventSeriesStorageInterface.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of eventseries revision IDs for a specific eventseries.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventseries entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as eventseries author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventseries entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all eventseries with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/recurring_events/src/EventSeriesListBuilder.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
   /**
    * Constructs a new EventSeriesListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, ConfigFactory $config) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\recurring_events\EventInterface $entity */
+    /** @var EventInterface $entity */
     $row['name']['data'] = [
       '#type' => 'link',
       '#title' => $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/recurring_events/src/EventSeriesHtmlRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/recurring_events/src/EventInstanceStorageInterface.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of eventinstance revision IDs for a specific eventinstance.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventinstance entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as eventinstance author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\recurring_events\EventInterface $entity
+   * @param EventInterface $entity
    *   The eventinstance entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all eventinstance with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


40) modules/contrib/recurring_events/src/EventInstanceListBuilder.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
   /**
    * Constructs a new EventInstanceListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, ConfigFactory $config) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\recurring_events\EventInterface $entity */
+    /** @var EventInterface $entity */
     $row['name']['data'] = [
       '#type' => 'link',
       '#title' => $entity->getEventSeries()->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/recurring_events/src/EventInstanceHtmlRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/recurring_events/src/EventCreationService.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;

@@ @@
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The field type plugin manager.
    *
-   * @var Drupal\Core\Field\FieldTypePluginManager
+   * @var FieldTypePluginManager
    */
   protected $fieldTypePluginManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The key value storage service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValueStore;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Field\FieldTypePluginManager $field_type_plugin_manager
+   * @param FieldTypePluginManager $field_type_plugin_manager
    *   The field type plugin manager.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+   * @param KeyValueFactoryInterface $key_value
    *   The key value storage service.
    */
   public function __construct(TranslationInterface $translation, Connection $database, LoggerChannelFactoryInterface $logger, Messenger $messenger, FieldTypePluginManager $field_type_plugin_manager, EntityFieldManager $entity_field_manager, ModuleHandler $module_handler, EntityTypeManagerInterface $entity_type_manager, KeyValueFactoryInterface $key_value) {
@@ @@
   /**
    * Check whether there have been form recurring configuration changes.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of an updated event series entity.
    *
    * @return bool
@@ @@
   /**
    * Check whether there have been original recurring configuration changes.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\recurring_events\Entity\EventSeries $original
+   * @param EventSeries $original
    *   The original stored event series entity.
    *
    * @return bool
@@ @@
   /**
    * Converts an EventSeries entity's recurring configuration to an array.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
    *
    * @return array
@@ @@
   /**
    * Converts a form state object's recurring configuration to an array.
    *
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of an updated event series entity.
    *
    * @return array
@@ @@
   /**
    * Build diff array between stored entity and form state.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   (Optional) The form state of an updated event series entity.
-   * @param Drupal\recurring_events\Entity\EventSeries $edited
+   * @param EventSeries $edited
    *   (Optional) The edited event series entity.
    *
    * @return array
@@ @@
   /**
    * Clear out existing event instances..
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The event series entity.
    */
   public function clearEventInstances(EventSeries $event) {
@@ @@
   /**
    * Create the event instances from the form state.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
    */
   public function createInstances(EventSeries $event) {
@@ @@
   /**
    * Create an event instance from an event series.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The stored event series entity.
-   * @param Drupal\Core\Datetime\DrupalDateTime $start_date
+   * @param DrupalDateTime $start_date
    *   The start date and time of the event.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end_date
+   * @param DrupalDateTime $end_date
    *   The end date and time of the event.
    *
    * @return static
@@ @@
   /**
    * Configure the default field inheritances for event instances.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $instance
+   * @param EventInstance $instance
    *   The event instance.
    * @param int $series_id
    *   The event series entity ID.
@@ @@
   /**
    * When adding a new field inheritance, add the default values for it.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $instance
+   * @param EventInstance $instance
    *   The event instance for which to configure default inheritance values.
-   * @param Drupal\field_inheritance\Entity\FieldInheritanceInterface $field_inheritance
+   * @param FieldInheritanceInterface $field_inheritance
    *   The field inheritance being created or updated.
    */
   public function addNewDefaultInheritance(EventInstance $instance, FieldInheritanceInterface $field_inheritance) {
@@ @@
   /**
    * Update instance status.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $instance
+   * @param EventInstance $instance
    *   The event instance for which to update the status.
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The event series entity.
    */
   public function updateInstanceStatus(EventInstance $instance, EventSeries $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


43) modules/contrib/recurring_events/src/Entity/EventSeries.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Entity;

+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EditorialContentEntityBase;
@@ @@
   /**
    * Get series start.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the series start date.
    */
   public function getSeriesStart() {
@@ @@
   /**
    * Get consecutive recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the consecutive start date.
    */
   public function getConsecutiveStartDate() {
@@ @@
   /**
    * Get consecutive recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the consecutive end date.
    */
   public function getConsecutiveEndDate() {
@@ @@
   /**
    * Get daily recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the daily start date.
    */
   public function getDailyStartDate() {
@@ @@
   /**
    * Get daily recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the daily end date.
    */
   public function getDailyEndDate() {
@@ @@
   /**
    * Get weekly recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the weekly start date.
    */
   public function getWeeklyStartDate() {
@@ @@
   /**
    * Get weekly recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the weekly end date.
    */
   public function getWeeklyEndDate() {
@@ @@
   /**
    * Get monthly recurring start date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the monthly start date.
    */
   public function getMonthlyStartDate() {
@@ @@
   /**
    * Get monthly recurring end date.
    *
-   * @return Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date object for the monthly end date.
    */
   public function getMonthlyEndDate() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/recurring_events/src/Entity/EventInstance.php:405

    ---------- begin diff ----------
@@ @@
   /**
    * Get event series.
    *
-   * @return Drupal\recurring_events\EventInterface
+   * @return EventInterface
    *   The event series.
    */
   public function getEventSeries() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/recurring_events/src/Controller/EventSeriesController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * System Manager Service.
    *
-   * @var \Drupal\system\SystemManager
+   * @var SystemManager
    */
   protected $systemManager;

@@ @@
   /**
    * Constructs a EventSeriesController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\system\SystemManager $systemManager
+   * @param SystemManager $systemManager
    *   System manager service.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, SystemManager $systemManager) {
@@ @@
    *
    * Redirects to events/add/[type] if only one type is available.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the node types that can be added; however,
    *   if there is only one node type defined for the site, the function
    *   will return a RedirectResponse to the node add page for that one node
@@ @@
   /**
    * Create a new event.
    *
-   * @param \Drupal\recurring_events\Entity\EventSeriesTypeInterface $eventseries_type
+   * @param EventSeriesTypeInterface $eventseries_type
    *   The eventseries type.
    */
   public function add(EventSeriesTypeInterface $eventseries_type) {
@@ @@
   /**
    * The _title_callback for the entity.eventseries.add_form route.
    *
-   * @param \Drupal\recurring_events\Entity\EventSeriesTypeInterface $eventseries_type
+   * @param EventSeriesTypeInterface $eventseries_type
    *   The eventseries type.
    *
    * @return string
@@ @@
   /**
    * The _title_callback for the entity.eventseries.edit_form route.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   The eventseries type.
    *
    * @return string
@@ @@
   /**
    * The _title_callback for the entity.eventseries.delete_form route.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   The eventseries type.
    *
    * @return string
@@ @@
   /**
    * The _title_callback for the entity.eventseries.clone_form route.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   The eventseries type.
    *
    * @return string
@@ @@
   /**
    * Generates an overview table of older revisions of an eventseries.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventseries
+   * @param EventInterface $eventseries
    *   A eventseries object.
    *
    * @return array
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\recurring_events\EventInterface $revision */
+      /** @var EventInterface $revision */
       $revision = $eventseries_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/recurring_events/src/Controller/EventInstanceController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * System Manager Service.
    *
-   * @var \Drupal\system\SystemManager
+   * @var SystemManager
    */
   protected $systemManager;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a EventInstanceController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\system\SystemManager $systemManager
+   * @param SystemManager $systemManager
    *   System manager service.
-   * @param Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, SystemManager $systemManager, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Get the page title for an eventinstance.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventinstance
+   * @param EventInterface $eventinstance
    *   A eventinstance object.
    *
    * @return string
@@ @@
   /**
    * Generates an overview table of older revisions of an eventinstance.
    *
-   * @param \Drupal\recurring_events\EventInterface $eventinstance
+   * @param EventInterface $eventinstance
    *   A eventinstance object.
    *
    * @return array
@@ @@
     $latest_revision = TRUE;

     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\recurring_events\EventInterface $revision */
+      /** @var EventInterface $revision */
       $revision = $eventinstance_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/recurring_events/recurring_events.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\StorageInterface;
+use Drupal\views\Views;
 /**
  * @file
  * Installation and update functionality for the recurring_events module.
@@ @@
   ];

   foreach ($configs as $config) {
-    $path = drupal_get_path('module', 'recurring_events') . '/config/install';
+    $path = \Drupal::service('extension.list.module')->getPath('recurring_events') . '/config/install';
     $source = new FileStorage($path);
-    /** @var \Drupal\Core\Config\StorageInterface $active_storage */
+    /** @var StorageInterface $active_storage */
     $active_storage = \Drupal::service('config.storage');
     $active_storage->write($config, $source->read($config));
   }
@@ @@

   $config_factory = \Drupal::configFactory();

-  if (!$views = \Drupal\views\Views::getAllViews()) {
+  if (!$views = Views::getAllViews()) {
     return [];
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


48) modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrationCreationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\recurring_events_registration\Entity\RegistrantInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;

@@ @@
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The entity storage for registrants.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Event instance entity.
    *
-   * @var \Drupal\recurring_events\Entity\EventInstance
+   * @var EventInstance
    */
   protected $eventInstance;

@@ @@
   /**
    * Event series entity.
    *
-   * @var \Drupal\recurring_events\Entity\EventSeries
+   * @var EventSeries
    */
   protected $eventSeries;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(TranslationInterface $translation, Connection $database, LoggerChannelFactoryInterface $logger, Messenger $messenger, EntityTypeManager $entity_type_manager, ModuleHandler $module_handler, Token $token) {
@@ @@
   /**
    * Set the event entities.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $event_instance
+   * @param EventInstance $event_instance
    *   The event instance.
    */
   public function setEventInstance(EventInstance $event_instance) {
@@ @@
   /**
    * Set the event series, helpful to get a fresh copy of the entity.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event_series
+   * @param EventSeries $event_series
    *   The event series.
    */
   public function setEventSeries(EventSeries $event_series) {
@@ @@
   /**
    * Get the event instance.
    *
-   * @return Drupal\recurring_events\Entity\EventInstance
+   * @return EventInstance
    *   The event instance.
    */
   public function getEventInstance() {
@@ @@
   /**
    * Get the event series.
    *
-   * @return Drupal\recurring_events\Entity\EventSeries
+   * @return EventSeries
    *   The event series.
    */
   public function getEventSeries() {
@@ @@
   /**
    * Retreive first user on the waitlist.
    *
-   * @return \Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   A fully loaded registrant entity.
    */
   public function retrieveFirstWaitlistParty() {
     $waitlisted_users = $this->retrieveWaitlistedParties();
     if (!empty($waitlisted_users)) {
-      /** @var Drupal\recurring_events_registration\Entity\RegistrantInterface */
+      /** @var RegistrantInterface */
       $first = reset($waitlisted_users);
       $this->moduleHandler->alter('recurring_events_registration_first_waitlist', $first);
       return $first;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


49) modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrantListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration;

+use Drupal\recurring_events_registration\Entity\Registrant;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a new RegistrantListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request object.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactory $config, RequestStack $request, RegistrationCreationService $creation_service, EntityFieldManager $entity_field_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity  */
+    /** @var Registrant $entity  */
     $series = $entity->getEventSeries();
     $instance = $entity->getEventInstance();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/recurring_events/modules/recurring_events_registration/src/RegistrantAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration;

+use Drupal\recurring_events_registration\Entity\RegistrantInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * RegistrantAccessControlHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The creation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, RegistrationCreationService $creation_service, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\recurring_events_registration\Entity\RegistrantInterface $entity */
+    /** @var RegistrantInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view registrant entities');
@@ @@
   /**
    * Check if the user can edit or delete this registrant anonymously.
    *
-   * @param Drupal\Core\Entity\EntityInterface $registrant
+   * @param EntityInterface $registrant
    *   The registrant to be edited.
    * @param string $operation
    *   The operation being attempted.
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user attempting to gain access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkAnonymousAccess(EntityInterface $registrant, $operation, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/filter/EventInstanceRegistrationAvailabilityCount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Plugin\views\filter;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\views\Plugin\views\filter\NumericFilter;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/field/EventInstanceCapacity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Plugin\views\field;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $registrationCreationService;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $registration_creation_service
+   * @param RegistrationCreationService $registration_creation_service
    *   The registration creation service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RegistrationCreationService $registration_creation_service) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/argument/EventInstanceRegistrationAvailabilityCount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Plugin\views\argument;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\views\Plugin\views\argument\NumericArgument;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/views/access/EventRegistrationListAccess.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The access handler.
    *
-   * @var \Drupal\recurring_events_registration\AccessHandler
+   * @var AccessHandler
    */
   protected $accessHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param Drupal\recurring_events_registration\AccessHandler $access_handler
+   * @param AccessHandler $access_handler
    *   The access handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccessHandler $access_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/recurring_events/modules/recurring_events_registration/src/Plugin/Field/FieldWidget/EventRegistrationWidget.php:422

    ---------- begin diff ----------
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/recurring_events/modules/recurring_events_registration/src/NotificationService.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Logger Factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The registrant entity.
    *
-   * @var \Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @var RegistrantInterface
    */
   protected $entity;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
    */
   public function __construct(TranslationInterface $translation, ConfigFactory $config_factory, LoggerChannelFactoryInterface $logger, Messenger $messenger, Token $token, ModuleHandler $module_handler, RegistrationCreationService $creation_service) {
@@ @@
   /**
    * Set the registrant entity.
    *
-   * @param \Drupal\recurring_events_registration\Entity\RegistrantInterface $registrant
+   * @param RegistrantInterface $registrant
    *   The registrant entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


57) modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantTypeForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a RegistrantTypeForm object.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
    */
   public function __construct(Messenger $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantSettingsForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;

@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a RegistrantSettingsForm object.
    *
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registration notification service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
    */
   public function __construct(NotificationService $notification_service, RegistrationCreationService $creation_service, ModuleHandler $module_handler) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantResendForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Form;

+use Drupal\recurring_events\Entity\EventInstance;
+use Drupal\recurring_events_registration\Entity\Registrant;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mail;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * The event instance object.
    *
-   * @var \Drupal\recurring_events\Entity\EventInstance
+   * @var EventInstance
    */
   protected $eventInstance;

@@ @@
   /**
    * The registrant object.
    *
-   * @var \Drupal\recurring_events_registration\Entity\Registrant
+   * @var Registrant
    */
   protected $registrant;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a ContactForm object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request object.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registration notification service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Mail\MailManager $mail
+   * @param MailManager $mail
    *   The mail manager service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(RequestStack $request, RegistrationCreationService $creation_service, NotificationService $notification_service, Messenger $messenger, MailManager $mail, Renderer $renderer, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Form;

+use Drupal\recurring_events_registration\Entity\Registrant;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;

@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;

@@ @@
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformation
+   * @var ModerationInformation
    */
   protected $moderationInformation;

@@ @@
   /**
    * Construct an RegistrantForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registrant creation service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registation notification service.
-   * @param \Drupal\content_moderation\ModerationInformation $moderation_information
+   * @param ModerationInformation $moderation_information
    *   The moderation information service.
    */
   public function __construct(
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;

     $event_instance = $this->routeMatch->getParameter('eventinstance');
@@ @@
    *
    * @var array $form
    *   The form configuration array.
-   * @var Drupal\Core\Form\FormStateInterface $form_state
+   * @var FormStateInterface $form_state
    *   The form state interface.
    */
   protected function hideFormFields(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;
     $new = $entity->isNew();
     if ($new) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/RegistrantDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Form;

+use Drupal\recurring_events_registration\Entity\Registrant;
+use Drupal\recurring_events\EventInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * The creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Constructs a RegistrantDeleteForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The creation service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, Messenger $messenger, Renderer $renderer, RegistrationCreationService $creation_service, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ @@
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;

     $build['cancel'] = [
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\recurring_events_registration\Entity\Registrant $entity */
+    /** @var Registrant $entity */
     $entity = $this->entity;
     $entity->delete();
     $eventinstance = $entity->getEventInstance();
@@ @@
    * {@inheritdoc}
    */
   protected function getDeletionMessage() {
-    /** @var \Drupal\recurring_events\EventInterface $entity */
+    /** @var EventInterface $entity */
     $entity = $this->getEntity();

     return $this->t('Your registration for %email for %event has been cancelled.', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/recurring_events/modules/recurring_events_registration/src/Form/ContactForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Form;

+use Drupal\recurring_events\Entity\EventInstance;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The registration notification service.
    *
-   * @var \Drupal\recurring_events_registration\NotificationService
+   * @var NotificationService
    */
   protected $notificationService;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mail;

@@ @@
   /**
    * The event instance object.
    *
-   * @var \Drupal\recurring_events\Entity\EventInstance
+   * @var EventInstance
    */
   protected $eventInstance;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a ContactForm object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request object.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param \Drupal\recurring_events_registration\NotificationService $notification_service
+   * @param NotificationService $notification_service
    *   The registration notification service.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Mail\MailManager $mail
+   * @param MailManager $mail
    *   The mail manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(RequestStack $request, RegistrationCreationService $creation_service, NotificationService $notification_service, Messenger $messenger, MailManager $mail, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/recurring_events/modules/recurring_events_registration/src/Entity/Registrant.php:278

    ---------- begin diff ----------
@@ @@
   /**
    * Get the event series.
    *
-   * @return Drupal\recurring_events\Entity\EventSeries
+   * @return EventSeries
    *   The event series entity.
    */
   public function getEventSeries() {
@@ @@
   /**
    * Set the event series ID.
    *
-   * @param Drupal\recurring_events\Entity\EventSeries $event
+   * @param EventSeries $event
    *   The event series entity.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setEventSeries(EventSeries $event) {
@@ @@
   /**
    * Get the event.
    *
-   * @return Drupal\recurring_events\Entity\EventInstance
+   * @return EventInstance
    *   The eventinstance entity.
    */
   public function getEventInstance() {
@@ @@
   /**
    * Set the event ID.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $event
+   * @param EventInstance $event
    *   The eventinstance entity.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setEventInstance(EventInstance $event) {
@@ @@
    * @param string $type
    *   The type of registration, series or instance.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setRegistrationType($type) {
@@ @@
    * @param int $waitlist
    *   Whether the registrant is on the waitlist.
    *
-   * @return Drupal\recurring_events_registration\Entity\RegistrantInterface
+   * @return RegistrantInterface
    *   The registrant entity.
    */
   public function setWaitlist($waitlist) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/recurring_events/modules/recurring_events_registration/src/Controller/RegistrantController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\recurring_events_registration\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a RegistrantController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(RendererInterface $renderer, AccountProxyInterface $current_user, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Check if registration is enabled.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $eventinstance
+   * @param EventInstance $eventinstance
    *   The eventinstance entity.
    *
-   * @return Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether access is allowed based on whether registration is enabled.
    */
   public static function hasRegistration(EventInstance $eventinstance) {
@@ @@
   /**
    * Check if the user can contact the registrants.
    *
-   * @param Drupal\recurring_events\Entity\EventInstance $eventinstance
+   * @param EventInstance $eventinstance
    *   The eventinstance entity.
    *
-   * @return Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Whether access is allowed based on whether registration is enabled.
    */
   public function canContactRegistrants(EventInstance $eventinstance) {
@@ @@
   /**
    * Return a dynamic page title for a Registrant.
    *
-   * @param Drupal\recurring_events_registration\Entity\RegistrantInterface $registrant
+   * @param RegistrantInterface $registrant
    *   The entity for which to generate a page title.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/recurring_events/modules/recurring_events_registration/src/AccessHandler.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The translation interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   private $translation;

@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation interface.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
-   * @param Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(TranslationInterface $translation, RegistrationCreationService $creation_service, CurrentRouteMatch $route_match, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Access control based on whether the account has the right permission.
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current route.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


66) modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Post update hooks for the recurring_events_registration module.
@@ @@
  */
 function recurring_events_registration_post_update_make_registrant_revisionable(&$sandbox) {
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');

   $entity_type = $definition_update_manager->getEntityType('registrant');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


67) modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\recurring_events_registration\NotificationService;
 /**
  * @file
  * Contains recurring_events_registration.module.
@@ @@
  * Implements hook_mail().
  */
 function recurring_events_registration_mail($key, &$message, $params) {
-  /** @var \Drupal\recurring_events_registration\NotificationService */
+  /** @var NotificationService */
   $service = \Drupal::service('recurring_events_registration.notification_service');
   $service->setKey($key)->setEntity($params['registrant']);

@@ @@
  *
  * @param string $key
  *   The mail key used to determine the message and subject.
- * @param \Drupal\recurring_events_registration\Entity\RegistrantInterface $registrant
+ * @param RegistrantInterface $registrant
  *   The registrant this email relates to.
  */
 function recurring_events_registration_send_notification($key, RegistrantInterface $registrant) {
@@ @@
   if (strpos($route_name, 'entity.registrant.devel_') === 0 || $route_name === 'entity.registrant.token_devel') {
     foreach ($data['tabs'] as $tab_level) {
       foreach ($tab_level as $tab) {
-        /** @var Drupal\Core\Url $url */
+        /** @var Url $url */
         $url = $tab['#link']['url'];
         $tab_route_name = $url->getRouteName();
         $tab_route_parameters = $url->getRouteParameters();
@@ @@
  * @todo Remove when https://www.drupal.org/node/3173241 drops.
  */
 function recurring_events_registration_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\recurring_events_registration\Form\RegistrantForm $form_object */
+  /** @var RegistrantForm $form_object */
   $form_object = $form_state->getFormObject();
   if ($form_object instanceof RegistrantForm) {
-    /** @var \Drupal\recurring_events_registration\Entity\RegistrantInterface $entity */
+    /** @var RegistrantInterface $entity */
     $entity = $form_object->getEntity();
     if (!empty($entity) && $entity instanceof RegistrantInterface && $entity->getEntityTypeId() === 'registrant') {
       foreach ($form['actions']['submit']['#submit'] as $key => $submit) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


68) modules/contrib/recurring_events/modules/recurring_events_registration/recurring_events_registration.api.php:15

    ---------- begin diff ----------
@@ @@
  * instance of Drupal\recurring_events_registration\Entity\Registrant for the
  * specified event, which can be retrieved from the registrant entity.
  *
- * @param Drupal\recurring_events_registration\Entity\Registrant $registrant
+ * @param Registrant $registrant
  *   The default selected registrant.
  *
- * @return Drupal\recurring_events_registration\Entity\Registrant
+ * @return Registrant
  *   A valid registrant entity.
  */
 function hook_recurring_events_registration_first_waitlist_alter(Registrant $registrant) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


69) modules/contrib/recurring_events/modules/recurring_events_registration/modules/recurring_events_reminders/src/Plugin/Field/FieldWidget/RegistrationRemindersWidget.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The registration creation service.
    *
-   * @var \Drupal\recurring_events_registration\RegistrationCreationService
+   * @var RegistrationCreationService
    */
   protected $creationService;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\recurring_events_registration\RegistrationCreationService $creation_service
+   * @param RegistrationCreationService $creation_service
    *   The registration creation service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, RegistrationCreationService $creation_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/recurring_events/modules/recurring_events_registration/modules/recurring_events_reminders/recurring_events_reminders.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\recurring_events\Entity\EventInstance;
+use Drupal\recurring_events_registration\RegistrationCreationService;
 /**
  * @file
  * Primary module hooks for Recurring Events Registration Reminders module.
@@ @@
   if (!empty($event_instances)) {
     $instances = \Drupal::entityTypeManager()->getStorage('eventinstance')->loadMultiple($event_instances);

-    /** @var \Drupal\recurring_events\Entity\EventInstance */
+    /** @var EventInstance */
     foreach ($instances as $instance) {
       $instance->set('reminder_sent', time());
       $instance->setNewRevision(FALSE);
       $instance->save();

-      /** @var \Drupal\recurring_events_registration\RegistrationCreationService */
+      /** @var RegistrationCreationService */
       $registration_creation_service = \Drupal::service('recurring_events_registration.creation_service');
       $registration_creation_service->setEventInstance($instance);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


71) modules/contrib/recurring_events/modules/group_recurring_events_series/group_recurring_events_series.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Component\Routing\RouterInterface;
 /**
  * @file
  * Enables Group functionality for the Recurring events module.
@@ @@
   if ($entity->getEntityTypeId() == 'group' && \Drupal::moduleHandler()->moduleExists('views')) {
     /** @var \Drupal\group\Entity\GroupInterface $entity */
     if ($entity->hasPermission('access group_recurring_events_series overview', \Drupal::currentUser())) {
-      /** @var \Symfony\Component\Routing\RouterInterface $router */
+      /** @var RouterInterface $router */
       $router = \Drupal::service('router.no_access_checks');
       if ($router->getRouteCollection()->get('view.group_recurring_events_series.page_1') !== NULL) {
         $operations['recurring_events_series'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/recurring_events/src/Plugin/FullcalendarViewProcessor/Re
         curringEventsFullCalendarProcessor.php" file, due to:                  
         "Analyze error: "Class                                                 
         Drupal\fullcalendar_view\Plugin\FullcalendarViewProcessorBase not      
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/recurring_events/modules/recurring_events_registration/s
         rc/Plugin/GroupContentEnabler/Registrant.php" file, due to:            
         "Analyze error: "Class Drupal\group\Plugin\GroupContentEnablerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/recurring_events/modules/group_recurring_events_series/s
         rc/Plugin/GroupEventSeriesPermissionProvider.php" file, due to:        
         "Analyze error: "Class Drupal\group\Plugin\GroupContentPermissionProvider
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/recurring_events/modules/group_recurring_events_series/s
         rc/Plugin/GroupContentEnabler/GroupEventSeries.php" file, due to:      
         "Analyze error: "Class Drupal\group\Plugin\GroupContentEnablerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/recurring_events/modules/group_recurring_events_series/s
         rc/Controller/GroupEventSeriesController.php" file, due to:            
         "Analyze error: "Class                                                 
         Drupal\group\Entity\Controller\GroupContentController not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

