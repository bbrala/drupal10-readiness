diff --git a/apigee_edge.api.php b/apigee_edge.api.php
index 44c5ccf..1960db0 100644
--- a/apigee_edge.api.php
+++ b/apigee_edge.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Copyright 2020 Google Inc.
@@ -18,7 +19,6 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  * MA 02110-1301, USA.
  */
-
 /**
  * Hooks for apigee_edge module.
  */
@@ -26,14 +26,13 @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alters the title of app listing page and its default menu link item.
  *
- * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
+ * @param TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_app_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_app_listing_page_title_alter(TranslatableMarkup &$title) {
 }
 
 /**
diff --git a/apigee_edge.install b/apigee_edge.install
index bb2da52..171c700 100644
--- a/apigee_edge.install
+++ b/apigee_edge.install
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\apigee_edge\SDKConnectorInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Entity\EntityDisplayRepository;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ -52,7 +57,7 @@ function apigee_edge_requirements($phase) {
 
   }
   elseif ($phase === 'runtime') {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     try {
       $sdk_connector->testConnection();
@@ -215,7 +220,7 @@ function apigee_edge_update_8101() {
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
 
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions */
+  /** @var FieldStorageDefinitionInterface[] $field_storage_definitions */
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
   $entity_type = $definition_update_manager->getEntityType($entity_type_id);
 
@@ -265,9 +270,9 @@ function apigee_edge_update_8102() {
   $entity_type_id = 'user';
   $fields = ['first_name', 'last_name'];
 
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+  /** @var EntityFieldManagerInterface $entity_field_manager */
   $entity_field_manager = Drupal::service('entity_field.manager');
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
 
   $field_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
@@ -304,7 +309,7 @@ function apigee_edge_update_8104() {
       continue;
     }
 
-    /** @var \Drupal\Core\Entity\EntityDisplayRepository $entity_display_repository */
+    /** @var EntityDisplayRepository $entity_display_repository */
     $entity_display_repository = \Drupal::service('entity_display.repository');
     $entity_view_display = $entity_display_repository->getViewDisplay($entity_type_id, $entity_type_id);
 
diff --git a/apigee_edge.module b/apigee_edge.module
index ddba9a3..d42d18c 100644
--- a/apigee_edge.module
+++ b/apigee_edge.module
@@ -1,5 +1,26 @@
 <?php
 
+use Drupal\apigee_edge\KeyEntityFormEnhancer;
+use Drupal\apigee_edge\Entity\EdgeEntityInterface;
+use Drupal\Core\Controller\TitleResolverInterface;
+use Drupal\Core\Routing\RouteProviderInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\apigee_edge\Entity\AppWarningsCheckerInterface;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge\SDKConnectorInterface;
+use Drupal\user\RegisterForm;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\apigee_edge\UserDeveloperConverterInterface;
+use Drupal\apigee_edge\FieldAttributeConverterInterface;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\key\KeyInterface;
+use Drupal\apigee_edge\Entity\DeveloperApp;
+use Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
+use Drupal\apigee_edge\Entity\Storage\DeveloperAppStorageInterface;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ -86,7 +107,7 @@ function apigee_edge_form_apigee_edge_authentication_form_alter(array &$form, Fo
   // Even if the original Key forms should not be altered, the Authentication
   // form provided by this module should still work the same.
   if ($do_not_alter_key_entity_forms) {
-    /** @var \Drupal\apigee_edge\KeyEntityFormEnhancer $key_entity_form_enhancer */
+    /** @var KeyEntityFormEnhancer $key_entity_form_enhancer */
     $key_entity_form_enhancer = \Drupal::service('apigee_edge.key_entity_form_enhancer');
     $key_entity_form_enhancer->alterForm($form, $form_state);
   }
@@ -104,7 +125,7 @@ function apigee_edge_form_key_form_alter(array &$form, FormStateInterface $form_
     return;
   }
 
-  /** @var \Drupal\apigee_edge\KeyEntityFormEnhancer $key_entity_form_enhancer */
+  /** @var KeyEntityFormEnhancer $key_entity_form_enhancer */
   $key_entity_form_enhancer = \Drupal::service('apigee_edge.key_entity_form_enhancer');
   // Only those Key forms gets altered that defines an Apigee Edge key type.
   $key_entity_form_enhancer->alterForm($form, $form_state);
@@ -161,7 +182,7 @@ function template_preprocess_apigee_secret(&$variables) {
  */
 function template_preprocess_apigee_entity(array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
-  /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+  /** @var EdgeEntityInterface $entity */
   $entity = $variables['entity'] = $variables['elements']['#entity'];
 
   $variables['label'] = $entity->label();
@@ -182,7 +203,7 @@ function template_preprocess_apigee_entity(array &$variables) {
  */
 function apigee_edge_theme_suggestions_apigee_entity(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+  /** @var EdgeEntityInterface $entity */
   $entity = $variables['elements']['#entity'];
   $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);
 
@@ -257,9 +278,9 @@ function apigee_edge_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatch
   }
   if ($route_match->getRouteName() === 'entity.developer_app.add_form_for_developer') {
     $collection_route_by_developer_name = 'entity.developer_app.collection_by_developer';
-    /** @var \Drupal\Core\Controller\TitleResolverInterface $title_resolver */
+    /** @var TitleResolverInterface $title_resolver */
     $title_resolver = \Drupal::service('title_resolver');
-    /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
+    /** @var RouteProviderInterface $route_provider */
     $route_provider = \Drupal::service('router.route_provider');
     $breadcrumb->addLink(Link::createFromRoute(
       $title_resolver->getTitle(\Drupal::requestStack()->getCurrentRequest(), $route_provider->getRouteByName($collection_route_by_developer_name)),
@@ -320,9 +341,9 @@ function apigee_edge_entity_base_field_info(EntityTypeInterface $entity_type) {
  * Implements hook_entity_base_field_info_alter().
  */
 function apigee_edge_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+  /** @var FieldDefinitionInterface[] $fields */
   if ($entity_type->id() === 'user') {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition $mail */
+    /** @var BaseFieldDefinition $mail */
     $mail = $fields['mail'];
     $mail->setRequired(TRUE);
     $mail->addConstraint('DeveloperMailUnique');
@@ -391,7 +412,7 @@ function apigee_edge_entity_view(array &$build, EntityInterface $entity, EntityV
     }
 
     if ($display->getComponent('credentials')) {
-      /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+      /** @var AppInterface $entity */
       $defaults = [
         '#cache' => [
           'contexts' => $entity->getCacheContexts(),
@@ -453,7 +474,7 @@ function apigee_edge_entity_view(array &$build, EntityInterface $entity, EntityV
   }
 
   if ($display->getComponent('warnings')) {
-    /** @var \Drupal\apigee_edge\Entity\AppWarningsCheckerInterface $app_warnings_checker */
+    /** @var AppWarningsCheckerInterface $app_warnings_checker */
     $app_warnings_checker = \Drupal::service('apigee_edge.entity.app_warnings_checker');
     $warnings = array_filter($app_warnings_checker->getWarnings($entity));
     if (count($warnings)) {
@@ -489,7 +510,7 @@ function apigee_edge_entity_view(array &$build, EntityInterface $entity, EntityV
  * apigee_edge.settings.developer.api_product_access.
  */
 function apigee_edge_api_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $entity */
+  /** @var ApiProductInterface $entity */
   if (!in_array($operation, ['view', 'view label', 'assign'])) {
     return AccessResult::neutral(sprintf('%s is not supported by %s.', $operation, __FUNCTION__));
   }
@@ -537,8 +558,7 @@ function apigee_edge_entity_access(EntityInterface $entity, $operation, AccountI
     return AccessResult::neutral();
   }
 
-  /** @var \Drupal\apigee_edge\Entity\AppInterface $entity **/
-
+  /** @var AppInterface $entity **/
   $approved_credentials = array_filter($entity->getCredentials(), function (AppCredentialInterface $credential) {
     return $credential->getStatus() === AppCredentialInterface::STATUS_APPROVED;
   });
@@ -566,7 +586,7 @@ function apigee_edge_form_entity_form_display_edit_form_alter(&$form, FormStateI
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  */
 function _apigee_edge_developer_app_entity_form_display_edit_form_validate(array &$form, FormStateInterface $form_state) {
@@ -586,7 +606,7 @@ function _apigee_edge_developer_app_entity_form_display_edit_form_validate(array
  *
  * @param array $form_element
  *   Form element array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  *
  * @return array
@@ -611,7 +631,7 @@ function apigee_edge_mail($key, &$message, $params) {
   $token_service = \Drupal::token();
   $language_manager = \Drupal::languageManager();
   $langcode = $message['langcode'];
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   $account = $params['account'];
   $variables = ['user' => $account];
 
@@ -660,7 +680,7 @@ function _apigee_edge_existing_developer_mail_tokens(array &$replacements, array
 /**
  * Sends a verification email to the developer email that is already taken.
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The user object of the account being notified. Must contain at
  *   least the fields 'uid', 'name', and 'mail'.
  * @param string $langcode
@@ -729,7 +749,7 @@ function apigee_edge_form_user_form_alter(&$form, FormStateInterface $form_state
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  */
 function apigee_edge_form_user_form_developer_email_validate(array $form, FormStateInterface $form_state) {
@@ -834,7 +854,7 @@ function apigee_edge_form_user_register_form_alter(&$form, FormStateInterface $f
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  *
  * @return array
@@ -855,14 +875,14 @@ function apigee_edge_form_user_register_form_after_build(array $form, FormStateI
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  */
 function apigee_edge_form_user_form_api_connection_validate(array $form, FormStateInterface $form_state) {
   // If there is no connection to Apigee Edge interrupt the registration/user
   // update, otherwise it could be a security leak if a developer exists in
   // Apigee Edge with the same email address.
-  /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+  /** @var SDKConnectorInterface $sdk_connector */
   $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
   try {
     $sdk_connector->testConnection();
@@ -882,7 +902,7 @@ function apigee_edge_form_user_form_api_connection_validate(array $form, FormSta
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  */
 function apigee_edge_form_user_register_form_developer_email_validate(array $form, FormStateInterface $form_state) {
@@ -891,7 +911,7 @@ function apigee_edge_form_user_register_form_developer_email_validate(array $for
     return;
   }
 
-  /** @var \Drupal\user\RegisterForm $registerForm */
+  /** @var RegisterForm $registerForm */
   $registerForm = $form_state->getFormObject();
   // Pass this information to hook_user_presave() in case if we would get
   // there.
@@ -915,7 +935,7 @@ function apigee_edge_form_user_register_form_developer_email_validate(array $for
   $request = \Drupal::request();
   $token = $request->query->get($config->get('verification_token'));
   $timestamp = $request->query->get('timestamp');
-  /** @var \Drupal\user\UserInterface $account */
+  /** @var UserInterface $account */
   // Build user object from the submitted form values.
   $account = $registerForm->buildEntity($form, $form_state);
   // If required parameters are available in the url.
@@ -940,7 +960,7 @@ function apigee_edge_form_user_register_form_developer_email_validate(array $for
   // in case of anonymous user because every page request creates a new, empty
   // private temp storage.
   $storage = \Drupal::service('tempstore.shared');
-  /** @var \Drupal\Core\TempStore\PrivateTempStore $sendNotifications */
+  /** @var PrivateTempStore $sendNotifications */
   $sendNotifications = $storage->get('apigee_edge_developer_email_verification_sent');
   // Do not send multiple email verifications to the same email address
   // every time when form validation fails with an error.
@@ -961,7 +981,7 @@ function apigee_edge_form_user_register_form_developer_email_validate(array $for
  *
  * Based on user_cancel_url().
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User object.
  * @param array $options
  *   (optional) A keyed array of settings. Supported options are:
@@ -1003,7 +1023,7 @@ function _apigee_edge_existing_developer_email_verification_link(UserInterface $
  *
  * Based on user_pass_rehash().
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User object.
  * @param string $timestamp
  *   Timestamp for seed.
@@ -1022,7 +1042,7 @@ function apigee_edge_existing_developer_registration_hash(UserInterface $account
 /**
  * Validates token for a registration with an existing developer email on Edge.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User object.
  * @param string $token
  *   Generated token from the url.
@@ -1055,13 +1075,13 @@ function apigee_edge_existing_developer_registration_hash_validate(UserInterface
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_app_credential_product_list(array &$variables) {
-  /** @var \Apigee\Edge\Structure\CredentialProduct[] $cred_products */
+  /** @var CredentialProduct[] $cred_products */
   $cred_products = $variables['elements']['#credential_products'];
   $cred_product_ids = array_map(function ($product) {
-    /** @var \Apigee\Edge\Structure\CredentialProduct $product */
+    /** @var CredentialProduct $product */
     return $product->getApiproduct();
   }, $cred_products);
-  /** @var \Drupal\apigee_edge\Entity\ApiProduct[] $allProducts */
+  /** @var ApiProduct[] $allProducts */
   $variables['#api_product_entities'] = $allProducts = ApiProduct::loadMultiple($cred_product_ids);
   $variables += ['content' => []];
   foreach ($cred_products as $product) {
@@ -1122,11 +1142,11 @@ function template_preprocess_app_credential_product_list(array &$variables) {
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_app_credential(array &$variables) {
-  /** @var \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential */
+  /** @var AppCredentialInterface $credential */
   $credential = $variables['elements']['#credential'];
-  /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+  /** @var AppInterface $app */
   $app = $variables['elements']['#app'];
-  /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
+  /** @var DateFormatterInterface $dateFormatter */
   $dateFormatter = Drupal::service('date.formatter');
   $serializer = new AppCredentialSerializer();
   // Convert app entity to an array.
@@ -1283,14 +1303,14 @@ function apigee_edge_user_presave(UserInterface $account) {
     return;
   }
 
-  /** @var \Drupal\apigee_edge\UserDeveloperConverterInterface $user_developer */
+  /** @var UserDeveloperConverterInterface $user_developer */
   $user_developer = \Drupal::service('apigee_edge.converter.user_developer');
-  /** @var \Drupal\apigee_edge\FieldAttributeConverterInterface $field_to_attribute */
+  /** @var FieldAttributeConverterInterface $field_to_attribute */
   $field_to_attribute = \Drupal::service('apigee_edge.converter.field_attribute');
-  /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+  /** @var LoggerChannelInterface $logger */
   $logger = \Drupal::service('logger.channel.apigee_edge');
   try {
-    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+    /** @var Developer $developer */
     $result = $user_developer->convertUser($account);
     // There were no changes.
     if ($result->getSuccessfullyAppliedChanges() === 0) {
@@ -1396,12 +1416,12 @@ function apigee_edge_user_presave(UserInterface $account) {
  */
 function apigee_edge_user_cancel(array $edit, UserInterface $account, $method) {
   if ($method === 'user_cancel_block_unpublish' || $method === 'user_cancel_block') {
-    /** @var \Drupal\apigee_edge\UserDeveloperConverterInterface $user_developer */
+    /** @var UserDeveloperConverterInterface $user_developer */
     $user_developer = \Drupal::service('apigee_edge.converter.user_developer');
-    /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+    /** @var LoggerChannelInterface $logger */
     $logger = \Drupal::service('logger.channel.apigee_edge');
     try {
-      /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+      /** @var Developer $developer */
       $developer = $user_developer->convertUser($account)->getDeveloper();
       $developer->save();
     }
@@ -1471,7 +1491,7 @@ function apigee_edge_user_delete(UserInterface $account) {
   }
 
   try {
-    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+    /** @var Developer $developer */
     $developer = Developer::load($account->getEmail());
     // Sanity check, the developer may not exist in Apigee Edge.
     if ($developer) {
@@ -1493,7 +1513,7 @@ function apigee_edge_user_delete(UserInterface $account) {
  * Removes field name from the module's configuration after deleting the field.
  */
 function apigee_edge_field_config_delete(EntityInterface $entity) {
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   $user_fields_to_sync = \Drupal::configFactory()
     ->get('apigee_edge.sync')
     ->get('user_fields_to_sync');
@@ -1522,7 +1542,7 @@ function apigee_edge_form_field_ui_field_storage_add_form_alter(array &$form, Fo
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function apigee_edge_field_ui_field_storage_add_form_submit(array &$form, FormStateInterface &$form_state) {
@@ -1543,7 +1563,7 @@ function apigee_edge_field_ui_field_storage_add_form_submit(array &$form, FormSt
  * Implements hook_key_delete().
  */
 function apigee_edge_key_delete(EntityInterface $entity) {
-  /** @var \Drupal\key\KeyInterface $entity */
+  /** @var KeyInterface $entity */
   $active_key = \Drupal::configFactory()
     ->get('apigee_edge.auth')
     ->get('active_key');
@@ -1560,7 +1580,7 @@ function apigee_edge_key_delete(EntityInterface $entity) {
  * Implements hook_cron().
  */
 function apigee_edge_cron() {
-  /** @var \Drupal\apigee_edge\JobExecutor $executor */
+  /** @var JobExecutor $executor */
   $executor = \Drupal::service('apigee_edge.job_executor');
   // Schedules 100 items from the job table.
   // The reason of this is to avoid race conditions.
@@ -1577,7 +1597,7 @@ function apigee_edge_cron() {
 /**
  * Returns the job executor instance.
  *
- * @return \Drupal\apigee_edge\JobExecutor
+ * @return JobExecutor
  *   The job executor instance.
  */
 function apigee_edge_get_executor(): JobExecutor {
@@ -1615,7 +1635,7 @@ function apigee_edge_preprocess_table(&$variables) {
  */
 function apigee_edge_developer_storage_load(array $entities) {
   $developerId_mail_map = [];
-  /** @var \Drupal\apigee_edge\Entity\Developer $entity */
+  /** @var Developer $entity */
   foreach ($entities as $entity) {
     $developerId_mail_map[$entity->getDeveloperId()] = $entity->getEmail();
   }
@@ -1647,16 +1667,16 @@ function apigee_edge_developer_storage_load(array $entities) {
  */
 function apigee_edge_developer_app_storage_load(array $entities) {
   $developer_ids = [];
-  /** @var \Drupal\apigee_edge\Entity\DeveloperApp $entity */
+  /** @var DeveloperApp $entity */
   foreach ($entities as $entity) {
     $developer_ids[] = $entity->getDeveloperId();
   }
   $developer_ids = array_unique($developer_ids);
   $dev_id_mail_map = [];
-  /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface $developer_storage */
+  /** @var DeveloperStorageInterface $developer_storage */
   $developer_storage = \Drupal::entityTypeManager()->getStorage('developer');
   foreach ($developer_storage->loadByProperties(['developerId' => $developer_ids]) as $developer) {
-    /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+    /** @var Developer $developer */
     $dev_id_mail_map[$developer->uuid()] = $developer->getEmail();
   }
 
@@ -1708,13 +1728,13 @@ function apigee_edge_developer_app_storage_load(array $entities) {
  *
  * @param string $product_name
  *   API Product name.
- * @param \Drupal\Core\Session\AccountInterface|null $account
+ * @param AccountInterface|null $account
  *   (optional) The user session for which to check access, or NULL to check
  *   access for the current user. Defaults to NULL.
  * @param bool $return_as_object
  *   (optional) Defaults to FALSE.
  *
- * @return \Drupal\Core\Access\AccessResultInterface|bool
+ * @return AccessResultInterface|bool
  *   The access result. Returns a boolean if $return_as_object is FALSE (this
  *   is the default) and otherwise an AccessResultInterface object.
  *   When a boolean is returned, the result of AccessInterface::isAllowed() is
@@ -1732,13 +1752,13 @@ function _apigee_edge_user_has_an_app_with_product(string $product_name, Account
     $result = AccessResult::neutral('Anonymous user does not have a developer account on Apigee Edge.');
   }
   else {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface|null $app_with_product */
+    /** @var DeveloperAppInterface|null $app_with_product */
     $app_with_product = NULL;
-    /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperAppStorageInterface $developer_app_storage */
+    /** @var DeveloperAppStorageInterface $developer_app_storage */
     $developer_app_storage = \Drupal::entityTypeManager()->getStorage('developer_app');
 
     foreach ($developer_app_storage->loadByDeveloper($account->getEmail()) as $app) {
-      /** @var \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential */
+      /** @var AppCredentialInterface $credential */
       foreach ($app->getCredentials() as $credential) {
         $product_ids = array_map(function (CredentialProduct $product) {
           return $product->getApiproduct();
@@ -1808,7 +1828,7 @@ function apigee_edge_cache_flush() {
 /**
  * Gets the title of app listing page.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   The title of the page.
  */
 function apigee_edge_app_listing_page_title(): TranslatableMarkup {
diff --git a/modules/apigee_edge_actions/apigee_edge_actions.module b/modules/apigee_edge_actions/apigee_edge_actions.module
index 77e9e1e..6360745 100644
--- a/modules/apigee_edge_actions/apigee_edge_actions.module
+++ b/modules/apigee_edge_actions/apigee_edge_actions.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\apigee_edge_teams\Entity\TeamAppInterface;
+use Drupal\apigee_edge\Entity\EdgeEntityInterface;
 /**
  * Copyright 2020 Google Inc.
  *
@@ -57,13 +61,13 @@ function apigee_edge_actions_rules_action_info_alter(&$info) {
 /**
  * Helper to dispatch an entity event.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  * @param string $event_name
  *   The event name.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _apigee_edge_actions_dispatch_entity_event(EntityInterface $entity, string $event_name) {
   if (!Drupal::service('apigee_edge_actions.edge_entity_type_manager')
@@ -93,7 +97,7 @@ function _apigee_edge_actions_dispatch_entity_event(EntityInterface $entity, str
       $user_id = $developer->getEmail();
     }
     else {
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $entity */
+      /** @var TeamAppInterface $entity */
       // For TeamApps, getAppOwner() is a team name, not a developer or email,
       // and we cannot rely on getCreatedBy() as it is deprecated, so we
       // default to the current user for the developer.
@@ -114,7 +118,7 @@ function _apigee_edge_actions_dispatch_entity_event(EntityInterface $entity, str
     $arguments["{$entity->getEntityTypeId()}_unchanged"] = $entity->original;
   }
 
-  /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+  /** @var EdgeEntityInterface $entity */
   Drupal::service('event_dispatcher')
     ->dispatch($dispatched_event_name, new EdgeEntityEventEdge($entity, $arguments));
 }
diff --git a/modules/apigee_edge_actions/apigee_edge_actions.tokens.inc b/modules/apigee_edge_actions/apigee_edge_actions.tokens.inc
index a5e7064..15a9bb0 100644
--- a/modules/apigee_edge_actions/apigee_edge_actions.tokens.inc
+++ b/modules/apigee_edge_actions/apigee_edge_actions.tokens.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Implements tokens for Apigee Edge entities.
@@ -32,7 +34,7 @@ use Drupal\Core\Render\BubbleableMetadata;
  * Implements hook_token_info_alter().
  */
 function apigee_edge_actions_token_info_alter(&$info) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $apigee_entity_types */
+  /** @var EntityTypeInterface[] $apigee_entity_types */
   $apigee_entity_types = Drupal::service('apigee_edge_actions.edge_entity_type_manager')->getEntityTypes();
   $type_info = Drupal::service('plugin.manager.field.field_type')->getDefinitions();
 
@@ -51,7 +53,7 @@ function apigee_edge_actions_token_info_alter(&$info) {
 
       $fields = Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type->id());
       foreach ($fields as $field_name => $field) {
-        /** @var \Drupal\field\FieldStorageConfigInterface $field */
+        /** @var FieldStorageConfigInterface $field */
         $params['@type'] = $type_info[$field->getType()]['label'];
         $description = t('@type field.', $params);
 
diff --git a/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php b/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
index 9365c61..d154c4f 100644
--- a/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
+++ b/modules/apigee_edge_actions/modules/apigee_edge_actions_debug/src/EventSubscriber/ApigeeEdgeActionsDebugEventSubscriber.php
@@ -33,14 +33,14 @@ class ApigeeEdgeActionsDebugEventSubscriber implements EventSubscriberInterface
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * ApigeeEdgeActionsDebugEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(LoggerChannelInterface $logger) {
@@ -50,7 +50,7 @@ class ApigeeEdgeActionsDebugEventSubscriber implements EventSubscriberInterface
   /**
    * Responds to rules events.
    *
-   * @param \Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge $event
+   * @param EdgeEntityEventEdge $event
    *   The event object.
    * @param string $event_name
    *   The event name.
diff --git a/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelper.php b/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelper.php
index a246ac1..c499d75 100644
--- a/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelper.php
+++ b/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelper.php
@@ -32,14 +32,14 @@ class ApigeeActionsEntityTypeHelper implements ApigeeActionsEntityTypeHelperInte
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ApigeeAppEntityTypeManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelperInterface.php b/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelperInterface.php
index c3e36be..eaebaa8 100644
--- a/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelperInterface.php
+++ b/modules/apigee_edge_actions/src/ApigeeActionsEntityTypeHelperInterface.php
@@ -30,7 +30,7 @@ interface ApigeeActionsEntityTypeHelperInterface {
   /**
    * Returns an array of Apigee Edge entity types.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of Apigee Edge entity types.
    */
   public function getEntityTypes(): array;
@@ -38,7 +38,7 @@ interface ApigeeActionsEntityTypeHelperInterface {
   /**
    * Determines if the given entity type is a fieldable Edge entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return bool
diff --git a/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php b/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
index cff4b48..1a5dfcd 100644
--- a/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
+++ b/modules/apigee_edge_actions/src/EventSubscriber/AppCredentialEventSubscriber.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_actions\EventSubscriber;
 
+use Drupal\apigee_edge\Entity\Developer;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent;
@@ -42,41 +44,41 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManger;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * AppCredentialEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, AccountInterface $current_user, LoggerChannelInterface $logger) {
@@ -89,7 +91,7 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
   /**
    * Responds to add product events.
    *
-   * @param \Drupal\apigee_edge\Event\AppCredentialAddApiProductEvent $event
+   * @param AppCredentialAddApiProductEvent $event
    *   The app credential add product event.
    */
   public function onAddProduct(AppCredentialAddApiProductEvent $event) {
@@ -99,7 +101,7 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
   /**
    * Responds to remove product events.
    *
-   * @param \Drupal\apigee_edge\Event\AppCredentialDeleteApiProductEvent $event
+   * @param AppCredentialDeleteApiProductEvent $event
    *   The app credential remove product event.
    */
   public function onRemoveProduct(AppCredentialDeleteApiProductEvent $event) {
@@ -121,7 +123,7 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
    *
    * @param string $rules_event_name
    *   The name of the rules event.
-   * @param \Symfony\Contracts\EventDispatcher\Event $event
+   * @param Event $event
    *   The api credential event.
    * @param array $api_products
    *   An array of api products.
@@ -134,7 +136,7 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
       if ('developer_app' == $app_type) {
         // For developer apps, get the Drupal account from the app owner.
         /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface $developer_storage */
-        /** @var \Drupal\apigee_edge\Entity\Developer $owner */
+        /** @var Developer $owner */
         $developer_storage = $this->entityTypeManger->getStorage($event->getAppType());
         $owner = $developer_storage->load($event->getOwnerId());
         $developer = user_load_by_mail($owner->getEmail());
@@ -146,16 +148,17 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
       }
 
       foreach ($api_products as $product) {
-        /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $api_product */
+        /** @var ApiProductInterface $api_product */
         $api_product = $this->entityTypeManger
           ->getStorage('api_product')
           ->load($product);
-        $this->eventDispatcher->dispatch($rules_event_name, new EdgeEntityEventEdge($app, [
+        $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($app, [
           $app_type => $app,
           'developer' => $developer,
           'api_product_name' => $api_product->getName(),
           'api_product_display_name' => $api_product->getDisplayName(),
-        ]));
+        ]),
+        $rules_event_name);
       }
     }
     catch (PluginException $exception) {
@@ -173,7 +176,7 @@ class AppCredentialEventSubscriber implements EventSubscriberInterface {
    * @param string $app_type
    *   The type of the app.
    *
-   * @return \Drupal\apigee_edge\Entity\AppInterface|null
+   * @return AppInterface|null
    *   The app with the provided name or null.
    */
   protected function getAppByName(string $name, string $owner_id, string $app_type): ?AppInterface {
diff --git a/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverBase.php b/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverBase.php
index b7bc19f..20aae44 100644
--- a/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverBase.php
+++ b/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverBase.php
@@ -38,14 +38,14 @@ abstract class EdgeEntityEventDeriverBase extends DeriverBase implements EdgeEnt
   /**
    * The apigee app entity type manager service.
    *
-   * @var \Drupal\apigee_edge_actions\ApigeeActionsEntityTypeHelperInterface
+   * @var ApigeeActionsEntityTypeHelperInterface
    */
   protected $edgeEntityTypeManager;
 
   /**
    * AppEventDeriver constructor.
    *
-   * @param \Drupal\apigee_edge_actions\ApigeeActionsEntityTypeHelperInterface $edge_entity_type_manager
+   * @param ApigeeActionsEntityTypeHelperInterface $edge_entity_type_manager
    *   The apigee app entity type manager service.
    */
   public function __construct(ApigeeActionsEntityTypeHelperInterface $edge_entity_type_manager) {
diff --git a/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverInterface.php b/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverInterface.php
index 1ea24d9..ac820d8 100644
--- a/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverInterface.php
+++ b/modules/apigee_edge_actions/src/Plugin/RulesEvent/EdgeEntityEventDeriverInterface.php
@@ -31,7 +31,7 @@ interface EdgeEntityEventDeriverInterface extends ContainerDeriverInterface {
   /**
    * Returns the event's label. Example: 'After saving a new App'.
    *
-   * @param \Drupal\apigee_edge\Entity\EdgeEntityTypeInterface $entity_type
+   * @param EdgeEntityTypeInterface $entity_type
    *   The Apigee Edge entity type.
    *
    * @return string
@@ -42,7 +42,7 @@ interface EdgeEntityEventDeriverInterface extends ContainerDeriverInterface {
   /**
    * Returns an array of event context.
    *
-   * @param \Drupal\apigee_edge\Entity\EdgeEntityTypeInterface $entity_type
+   * @param EdgeEntityTypeInterface $entity_type
    *   The Apigee Edge entity type.
    *
    * @return array
diff --git a/modules/apigee_edge_actions/src/TeamMembershipManager.php b/modules/apigee_edge_actions/src/TeamMembershipManager.php
index 03a7ebc..ad0c66e 100644
--- a/modules/apigee_edge_actions/src/TeamMembershipManager.php
+++ b/modules/apigee_edge_actions/src/TeamMembershipManager.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_actions;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\apigee_edge_actions\Event\EdgeEntityEventEdge;
 use Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface;
 use Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface;
@@ -39,77 +41,77 @@ class TeamMembershipManager implements TeamMembershipManagerInterface {
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $inner;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
   /**
    * The company members controller factory service.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface
+   * @var CompanyMembersControllerFactoryInterface
    */
   private $companyMembersControllerFactory;
 
   /**
    * The developer companies cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompaniesCache;
 
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   private $developerController;
 
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   private $cacheTagsInvalidator;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * TeamMembershipManager constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $inner
+   * @param TeamMembershipManagerInterface $inner
    *   The Apigee Edge team manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface $company_members_controller_factory
+   * @param CompanyMembersControllerFactoryInterface $company_members_controller_factory
    *   The company members controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   The developer companies cache.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(TeamMembershipManagerInterface $inner, EntityTypeManagerInterface $entity_type_manager, CompanyMembersControllerFactoryInterface $company_members_controller_factory, DeveloperControllerInterface $developer_controller, DeveloperCompaniesCacheInterface $developer_companies_cache, CacheTagsInvalidatorInterface $cache_tags_invalidator, LoggerInterface $logger, EventDispatcherInterface $event_dispatcher) {
@@ -165,8 +167,8 @@ class TeamMembershipManager implements TeamMembershipManagerInterface {
    * @param array $developers
    *   An array of developers.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function dispatchEvent(string $event, string $team, array $developers) {
     $team = $this->entityTypeManager->getStorage('team')->load($team);
@@ -177,10 +179,11 @@ class TeamMembershipManager implements TeamMembershipManagerInterface {
 
     // Dispatch an event for each developer.
     foreach ($developers as $developer) {
-      $this->eventDispatcher->dispatch($event, new EdgeEntityEventEdge($team, [
+      $this->eventDispatcher->dispatch(new EdgeEntityEventEdge($team, [
         'team' => $team,
         'member' => $users_by_mail[$developer],
-      ]));
+      ]),
+      $event);
     }
   }
 
diff --git a/modules/apigee_edge_apiproduct_rbac/apigee_edge_apiproduct_rbac.module b/modules/apigee_edge_apiproduct_rbac/apigee_edge_apiproduct_rbac.module
index 7896c0e..cf02c46 100644
--- a/modules/apigee_edge_apiproduct_rbac/apigee_edge_apiproduct_rbac.module
+++ b/modules/apigee_edge_apiproduct_rbac/apigee_edge_apiproduct_rbac.module
@@ -1,5 +1,6 @@
 <?php
 
+use Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ -54,7 +55,7 @@ function apigee_edge_apiproduct_rbac_module_implements_alter(&$implementations,
  * @see apigee_edge_api_product_access()
  */
 function apigee_edge_apiproduct_rbac_api_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $entity */
+  /** @var ApiProductInterface $entity */
   if (!in_array($operation, ['view', 'view label', 'assign'])) {
     return AccessResult::neutral(sprintf('%s is not supported by %s.', $operation, __FUNCTION__));
   }
@@ -181,7 +182,7 @@ function apigee_edge_apiproduct_rbac_form_apigee_edge_api_product_access_control
     ];
   }
 
-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface[] $api_products */
+  /** @var ApiProductInterface[] $api_products */
   $api_products = $api_product_storage->loadMultiple();
   // Sort products alphabetically (display name is an attribute so sorting in
   // the query level does not work).
@@ -250,7 +251,7 @@ function apigee_edge_apiproduct_rbac_form_apigee_edge_api_product_access_control
       'grant_access_if_attribute_missing',
     ], FALSE))
     ->save();
-  /** @var \Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface $controller */
+  /** @var ApiProductControllerInterface $controller */
   $rid_product_map = [];
   foreach ($form_state->getValue(['rbac', 'role_names'], []) as $rid => $name) {
     // Do not store roles with by pass permission in the attribute
diff --git a/modules/apigee_edge_apiproduct_rbac/src/RoleBasedAccessSettingsBatch.php b/modules/apigee_edge_apiproduct_rbac/src/RoleBasedAccessSettingsBatch.php
index 967db86..ccf9584 100644
--- a/modules/apigee_edge_apiproduct_rbac/src/RoleBasedAccessSettingsBatch.php
+++ b/modules/apigee_edge_apiproduct_rbac/src/RoleBasedAccessSettingsBatch.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_apiproduct_rbac;
 
+use Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Exception\ApiResponseException;
 use Drupal\Component\Utility\Xss;
@@ -57,7 +58,7 @@ final class RoleBasedAccessSettingsBatch {
     }
 
     // Process API products by groups of 5.
-    /** @var \Apigee\Edge\Api\Management\Controller\ApiProductControllerInterface $controller */
+    /** @var ApiProductControllerInterface $controller */
     $controller = \Drupal::service('apigee_edge.controller.api_product');
 
     foreach (array_slice($product_name_display_name_map, $context['sandbox']['progress'], 5) as $product_name => $product_display_name) {
diff --git a/modules/apigee_edge_debug/src/Annotation/DebugMessageFormatter.php b/modules/apigee_edge_debug/src/Annotation/DebugMessageFormatter.php
index e1c4d2b..82b488a 100644
--- a/modules/apigee_edge_debug/src/Annotation/DebugMessageFormatter.php
+++ b/modules/apigee_edge_debug/src/Annotation/DebugMessageFormatter.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_debug\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -39,7 +40,7 @@ class DebugMessageFormatter extends Plugin {
   /**
    * The name of the formatter plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/apigee_edge_debug/src/DebugMessageFormatterPluginManager.php b/modules/apigee_edge_debug/src/DebugMessageFormatterPluginManager.php
index 3f2fd95..be87056 100644
--- a/modules/apigee_edge_debug/src/DebugMessageFormatterPluginManager.php
+++ b/modules/apigee_edge_debug/src/DebugMessageFormatterPluginManager.php
@@ -37,9 +37,9 @@ class DebugMessageFormatterPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/modules/apigee_edge_debug/src/Form/ConfigForm.php b/modules/apigee_edge_debug/src/Form/ConfigForm.php
index a8d62fa..e3bee03 100644
--- a/modules/apigee_edge_debug/src/Form/ConfigForm.php
+++ b/modules/apigee_edge_debug/src/Form/ConfigForm.php
@@ -34,16 +34,16 @@ class ConfigForm extends ConfigFormBase {
   /**
    * Debug message formatter plugin manager.
    *
-   * @var \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager
+   * @var DebugMessageFormatterPluginManager
    */
   private $pluginManager;
 
   /**
    * ConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager $plugin_manager
+   * @param DebugMessageFormatterPluginManager $plugin_manager
    *   The debug message formatter plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DebugMessageFormatterPluginManager $plugin_manager) {
diff --git a/modules/apigee_edge_debug/src/HttpClientMiddleware/ApiClientProfiler.php b/modules/apigee_edge_debug/src/HttpClientMiddleware/ApiClientProfiler.php
index 1ebfcd9..bebb00f 100644
--- a/modules/apigee_edge_debug/src/HttpClientMiddleware/ApiClientProfiler.php
+++ b/modules/apigee_edge_debug/src/HttpClientMiddleware/ApiClientProfiler.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_debug\HttpClientMiddleware;
 
+use Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface;
 use Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager;
 use Drupal\apigee_edge_debug\SDKConnector;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -37,14 +38,14 @@ class ApiClientProfiler {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * The debug message formatter plugin.
    *
-   * @var \Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface
+   * @var DebugMessageFormatterPluginInterface
    */
   private $formatter;
 
@@ -58,11 +59,11 @@ class ApiClientProfiler {
   /**
    * ApiClientProfiler constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
-   * @param \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager $debug_message_formatter_plugin
+   * @param DebugMessageFormatterPluginManager $debug_message_formatter_plugin
    *   Debug message formatter plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger, DebugMessageFormatterPluginManager $debug_message_formatter_plugin) {
diff --git a/modules/apigee_edge_debug/src/HttpClientMiddleware/DevelKintApiClientProfiler.php b/modules/apigee_edge_debug/src/HttpClientMiddleware/DevelKintApiClientProfiler.php
index 4e6f447..67046fd 100644
--- a/modules/apigee_edge_debug/src/HttpClientMiddleware/DevelKintApiClientProfiler.php
+++ b/modules/apigee_edge_debug/src/HttpClientMiddleware/DevelKintApiClientProfiler.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_debug\HttpClientMiddleware;
 
+use Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface;
 use Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager;
 use Drupal\apigee_edge_debug\SDKConnector;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -39,43 +40,43 @@ final class DevelKintApiClientProfiler {
   /**
    * The currently logged-in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;
 
   /**
    * The debug message formatter plugin.
    *
-   * @var \Drupal\apigee_edge_debug\Plugin\DebugMessageFormatter\DebugMessageFormatterPluginInterface
+   * @var DebugMessageFormatterPluginInterface
    */
   private $formatter;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   private $moduleHandler;
 
   /**
    * DevelKintApiClientProfiler constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\apigee_edge_debug\DebugMessageFormatterPluginManager $debug_message_formatter_plugin
+   * @param DebugMessageFormatterPluginManager $debug_message_formatter_plugin
    *   Debug message formatter plugin manager.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The currently logged-in user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, DebugMessageFormatterPluginManager $debug_message_formatter_plugin, AccountInterface $currentUser, ModuleHandlerInterface $module_handler, MessengerInterface $messenger) {
diff --git a/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php b/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
index d98337f..ce18223 100644
--- a/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
+++ b/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginBase.php
@@ -52,7 +52,7 @@ abstract class DebugMessageFormatterPluginBase extends PluginBase implements Con
   /**
    * DebugMessageFormatterPluginBase constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
    * @param array $configuration
    *   Plugin configuration.
@@ -117,7 +117,7 @@ abstract class DebugMessageFormatterPluginBase extends PluginBase implements Con
   /**
    * Returns the wrapped message formatter.
    *
-   * @return \Http\Message\Formatter
+   * @return Formatter
    *   Message formatter.
    */
   abstract protected function getFormatter(): Formatter;
@@ -168,7 +168,7 @@ abstract class DebugMessageFormatterPluginBase extends PluginBase implements Con
   /**
    * Utility function that collects and formats times from transfer statistic.
    *
-   * @param \GuzzleHttp\TransferStats $stats
+   * @param TransferStats $stats
    *   Transfer statistic.
    * @param int $precision
    *   Precision of rounding applied on times.
diff --git a/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginInterface.php b/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginInterface.php
index 8577759..a3f8962 100644
--- a/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginInterface.php
+++ b/modules/apigee_edge_debug/src/Plugin/DebugMessageFormatter/DebugMessageFormatterPluginInterface.php
@@ -48,7 +48,7 @@ interface DebugMessageFormatterPluginInterface {
   /**
    * Formats a request.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   Request object.
    *
    * @return string
@@ -59,9 +59,9 @@ interface DebugMessageFormatterPluginInterface {
   /**
    * Formats a response.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response object.
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   Request object that triggered the response.
    *
    * @return string
@@ -72,7 +72,7 @@ interface DebugMessageFormatterPluginInterface {
   /**
    * Formats stats object.
    *
-   * @param \GuzzleHttp\TransferStats $stats
+   * @param TransferStats $stats
    *   Transfer statistics.
    *
    * @return string
diff --git a/modules/apigee_edge_debug/src/SDKConnector.php b/modules/apigee_edge_debug/src/SDKConnector.php
index 3f73662..e564c5c 100644
--- a/modules/apigee_edge_debug/src/SDKConnector.php
+++ b/modules/apigee_edge_debug/src/SDKConnector.php
@@ -56,19 +56,19 @@ class SDKConnector extends OriginalSDKConnector implements SDKConnectorInterface
   /**
    * Constructs a new SDKConnector.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $inner_service
+   * @param SDKConnectorInterface $inner_service
    *   The decorated SDK connector service.
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   Http client.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   The key repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   Info file parser service.
    */
   public function __construct(SDKConnectorInterface $inner_service, ClientFactory $client_factory, KeyRepositoryInterface $key_repository, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, InfoParserInterface $info_parser) {
diff --git a/modules/apigee_edge_teams/apigee_edge_teams.api.php b/modules/apigee_edge_teams/apigee_edge_teams.api.php
index 24f1b0d..820d040 100644
--- a/modules/apigee_edge_teams/apigee_edge_teams.api.php
+++ b/modules/apigee_edge_teams/apigee_edge_teams.api.php
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Access\AccessResult;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ -18,7 +24,6 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  * MA 02110-1301, USA.
  */
-
 /**
  * Hooks for apigee_edge_teams module.
  */
@@ -26,37 +31,36 @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alters the title of team listing page and its default menu link item.
  *
- * @param \Drupal\Core\StringTranslation\TranslatableMarkup $title
+ * @param TranslatableMarkup $title
  *   The menu link/page title.
  */
-function hook_apigee_edge_teams_team_listing_page_title_alter(\Drupal\Core\StringTranslation\TranslatableMarkup &$title) {
+function hook_apigee_edge_teams_team_listing_page_title_alter(TranslatableMarkup &$title) {
 }
 
 /**
  * Control API product entity operation access of a team (and its members).
  *
- * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+ * @param ApiProductInterface $api_product
  *   The API Product entity for which to check access.
  * @param string $operation
  *   The entity operation. Usually one of 'view', 'update', 'create',
  *   'delete' or 'assign".
- * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+ * @param TeamInterface $team
  *   The team for which to check access.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The team member for which to check access.
  *
- * @return \Drupal\Core\Access\AccessResultInterface
+ * @return AccessResultInterface
  *   The access result.
  *
  * @see \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandler
  */
-function hook_apigee_edge_teams_team_api_product_access(\Drupal\apigee_edge\Entity\ApiProductInterface $api_product, string $operation, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_team_api_product_access(ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account) {
   // Grant access if API product's name is prefixed with the team's name.
-  return \Drupal\Core\Access\AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
+  return AccessResult::allowedIf(mb_strpos($api_product->id(), $team->id()) === 0);
 }
 
 /**
@@ -70,12 +74,12 @@ function hook_apigee_edge_teams_team_api_product_access(\Drupal\apigee_edge\Enti
  *
  * @param array $permissions
  *   Array of team permissions.
- * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+ * @param TeamInterface $team
  *   The team entity.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The Drupal user of the developer.
  */
-function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, \Drupal\apigee_edge_teams\Entity\TeamInterface $team, \Drupal\Core\Session\AccountInterface $account) {
+function hook_apigee_edge_teams_developer_permissions_by_team_alter(array &$permissions, TeamInterface $team, AccountInterface $account) {
   // @see apigee_edge_teams_test_apigee_edge_teams_developer_permissions_by_team_alter()
 }
 
diff --git a/modules/apigee_edge_teams/apigee_edge_teams.install b/modules/apigee_edge_teams/apigee_edge_teams.install
index 3680b75..5793412 100644
--- a/modules/apigee_edge_teams/apigee_edge_teams.install
+++ b/modules/apigee_edge_teams/apigee_edge_teams.install
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\apigee_edge\SDKConnectorInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
+use Drupal\Core\Config\StorageInterface;
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Copyright 2019 Google Inc.
@@ -35,7 +40,7 @@ function apigee_edge_teams_requirements($phase) {
 
   if ($phase == 'install' || $phase == 'runtime') {
     try {
-      /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+      /** @var SDKConnectorInterface $sdk_connector */
       $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
       $org_controller = \Drupal::service('apigee_edge.controller.organization');
       /* @var \Apigee\Edge\Api\Management\Entity\Organization $organization */
@@ -86,9 +91,9 @@ function apigee_edge_teams_update_8701() {
     'team_app_edit_api_products',
     'team_app_revoke_api_key',
   ];
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface $storage */
+  /** @var TeamRoleStorageInterface $storage */
   $storage = Drupal::entityTypeManager()->getStorage('team_role');
-  /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $admin_role */
+  /** @var TeamRoleInterface $admin_role */
   $admin_role = $storage->load($role);
   $storage->changePermissions($role, array_combine($admin_role->getPermissions(), $admin_role->getPermissions()) + array_combine($api_key_permissions, $api_key_permissions));
 }
@@ -111,7 +116,7 @@ function apigee_edge_teams_update_8702() {
     'team_invitation_email_existing',
     'team_invitation_email_new',
   ];
-  /** @var \Drupal\Core\Config\StorageInterface $config_storage */
+  /** @var StorageInterface $config_storage */
   $config_storage = \Drupal::service('config.storage');
   $module_path = \Drupal::service('extension.list.module')->getPath('apigee_edge_teams');
   $source = new FileStorage("$module_path/config/install");
@@ -163,7 +168,7 @@ function apigee_edge_teams_update_8704() {
  * Set disable_sql_rewrite to false for Team invitations view.
  */
 function apigee_edge_teams_update_8705() {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   if ($view = Views::getView('team_invitations')) {
     $view->setDisplay('user');
     $query = $view->getDisplay()->getOption('query');
diff --git a/modules/apigee_edge_teams/apigee_edge_teams.module b/modules/apigee_edge_teams/apigee_edge_teams.module
index b274567..2a5f356 100644
--- a/modules/apigee_edge_teams/apigee_edge_teams.module
+++ b/modules/apigee_edge_teams/apigee_edge_teams.module
@@ -1,5 +1,14 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
+use Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamStorageInterface;
+use Drupal\apigee_edge\Entity\ApiProductInterface;
+use Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface;
+use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
+use Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface;
 /**
  * @file
  * Copyright 2018 Google Inc.
@@ -58,7 +67,7 @@ function apigee_edge_teams_entity_type_alter(array &$entity_types) {
   // @see devel_entity_type_alter()
   // @see \Drupal\apigee_edge_teams\Routing\TeamAppDevelRouteFixerSubscriber
   if (\Drupal::moduleHandler()->moduleExists('devel')) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = &$entity_types['team_app'];
     if ($entity_type->hasLinkTemplate('canonical')) {
       $canonical_link = $entity_type->getLinkTemplate('canonical');
@@ -74,7 +83,7 @@ function apigee_edge_teams_entity_type_alter(array &$entity_types) {
 /**
  * Gets the title of team listing page.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   The title of the page.
  */
 function apigee_edge_teams_team_listing_page_title(): TranslatableMarkup {
@@ -102,7 +111,7 @@ function apigee_edge_teams_form_entity_form_display_edit_form_alter(&$form, Form
  *
  * @param array $form
  *   Form array.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  */
 function _apigee_edge_teams_team_app_entity_form_display_edit_form_validate(array &$form, FormStateInterface $form_state) {
@@ -122,7 +131,7 @@ function _apigee_edge_teams_team_app_entity_form_display_edit_form_validate(arra
  */
 function apigee_edge_teams_user_delete(EntityInterface $entity) {
   /** @var \Drupal\user\UserInterface $entity */
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+  /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
   $team_member_role_storage = \Drupal::entityTypeManager()->getStorage('team_member_role');
   // When a user gets deleted then its developer account also gets deleted
   // from Apigee Edge which removes its (team) company memberships.
@@ -145,7 +154,7 @@ function apigee_edge_teams_user_delete(EntityInterface $entity) {
  */
 function apigee_edge_teams_developer_delete(EntityInterface $entity) {
   /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
-  /** @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $cache */
+  /** @var CompanyMembershipObjectCacheInterface $cache */
   $cache = \Drupal::service('apigee_edge_teams.cache.company_membership_object');
   // Remove all company membership object cache entries that contained the
   // removed developer.
@@ -157,7 +166,7 @@ function apigee_edge_teams_developer_delete(EntityInterface $entity) {
  */
 function apigee_edge_teams_team_delete(EntityInterface $entity) {
   // Delete all invitations from this team.
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamStorageInterface $storage */
+  /** @var TeamStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage('team_invitation');
   if ($invitations = $storage->loadByProperties(['team' => $entity->id()])) {
     $storage->delete($invitations);
@@ -173,13 +182,13 @@ function apigee_edge_teams_system_breadcrumb_alter(Breadcrumb &$breadcrumb, Rout
     $breadcrumb->addLink(Link::createFromRoute($team_entity_def->getPluralLabel(), 'entity.team.collection'));
   }
   elseif ($route_match->getRouteName() === 'entity.team.add_members') {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $route_match->getParameter('team');
     $breadcrumb->addLink($team->toLink(t('Members'), 'members'));
   }
   elseif ($route_match->getRouteName() === 'entity.team_app.add_form_for_team') {
     $team_app_entity_def = \Drupal::entityTypeManager()->getDefinition('team_app');
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $route_match->getParameter('team');
     $breadcrumb->addLink(Link::createFromRoute($team_app_entity_def->getPluralLabel(), 'entity.team_app.collection_by_team', ['team' => $team->id()]));
   }
@@ -193,7 +202,7 @@ function apigee_edge_teams_preprocess(&$variables, $hook) {
     return;
   }
 
-  /** @var \Drupal\Core\Url $url */
+  /** @var Url $url */
   $url = $variables['link']['#url'];
   if (!in_array($url->getRouteName(), TeamInactiveStatusSubscriber::getDisabledRoutes())) {
     return;
@@ -244,7 +253,7 @@ function apigee_edge_teams_entity_operation_alter(array &$operations, EntityInte
  * teams' API Product access.
  */
 function apigee_edge_teams_api_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $entity */
+  /** @var ApiProductInterface $entity */
   // The "assign" in not in this list, because it is handled by team API Product
   // access manager service directly. Team members should not be able to
   // assign API products to their developer apps just because they have access
@@ -257,9 +266,9 @@ function apigee_edge_teams_api_product_access(EntityInterface $entity, $operatio
     return AccessResult::neutral('Anonymous user can not be member of a team.');
   }
 
-  /** @var \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface $access_checker */
+  /** @var TeamMemberApiProductAccessHandlerInterface $access_checker */
   $access_checker = \Drupal::service('apigee_edge_teams.team_member_api_product_access_handler');
-  /** @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager */
+  /** @var TeamMembershipManagerInterface $team_membership_manager */
   $team_membership_manager = \Drupal::service('apigee_edge_teams.team_membership_manager');
   try {
     $developer_team_ids = $team_membership_manager->getTeams($account->getEmail());
@@ -272,7 +281,7 @@ function apigee_edge_teams_api_product_access(EntityInterface $entity, $operatio
     $result = AccessResult::neutral("{$account->getEmail()} is not member of any team.");
     // If developer's team membership changes access must be re-evaluated.
     // @see \Drupal\apigee_edge_teams\TeamMembershipManager
-    /** @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface $developer_storage */
+    /** @var DeveloperStorageInterface $developer_storage */
     $developer_storage = \Drupal::entityTypeManager()->getStorage('developer');
     $developer = $developer_storage->load($account->getEmail());
     if ($developer) {
@@ -280,9 +289,9 @@ function apigee_edge_teams_api_product_access(EntityInterface $entity, $operatio
     }
   }
   else {
-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamStorageInterface $team_storage */
+    /** @var TeamStorageInterface $team_storage */
     $team_storage = \Drupal::entityTypeManager()->getStorage('team');
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $teams = $team_storage->loadMultiple($developer_team_ids);
     foreach ($teams as $team) {
       $result = $access_checker->access($entity, $operation, $team, $account, TRUE);
@@ -330,7 +339,7 @@ function apigee_edge_teams_mail($key, &$message, $params) {
  * Implements hook_cron().
  */
 function apigee_edge_teams_cron() {
-  /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface $storage */
+  /** @var TeamInvitationStorageInterface $storage */
   $storage = Drupal::entityTypeManager()->getStorage('team_invitation');
   $team_invitations = $storage->getInvitationsToExpire();
   if (!count($team_invitations)) {
diff --git a/modules/apigee_edge_teams/apigee_edge_teams.tokens.inc b/modules/apigee_edge_teams/apigee_edge_teams.tokens.inc
index a3fdf00..98f127e 100644
--- a/modules/apigee_edge_teams/apigee_edge_teams.tokens.inc
+++ b/modules/apigee_edge_teams/apigee_edge_teams.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 /**
  * @file
  * Implements tokens for apigee_edge_teams module.
@@ -67,7 +68,7 @@ function apigee_edge_teams_tokens($type, $tokens, array $data, array $options, B
     return [];
   }
 
-  /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation */
+  /** @var TeamInvitationInterface $team_invitation */
   $team_invitation = $data['team_invitation'];
   $team = $team_invitation->getTeam();
   $replacements = [];
diff --git a/modules/apigee_edge_teams/src/Access/ManageTeamMembersAccess.php b/modules/apigee_edge_teams/src/Access/ManageTeamMembersAccess.php
index 153387e..2fc723e 100644
--- a/modules/apigee_edge_teams/src/Access/ManageTeamMembersAccess.php
+++ b/modules/apigee_edge_teams/src/Access/ManageTeamMembersAccess.php
@@ -20,6 +20,9 @@
 
 namespace Drupal\apigee_edge_teams\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Drupal\apigee_edge_teams\TeamPermissionHandlerInterface;
 use Drupal\Core\Access\AccessResult;
@@ -39,23 +42,23 @@ final class ManageTeamMembersAccess implements AccessInterface {
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;
 
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;
 
   /**
    * ManageTeamMembersAccess constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, TeamPermissionHandlerInterface $team_permission_handler) {
@@ -66,21 +69,21 @@ final class ManageTeamMembersAccess implements AccessInterface {
   /**
    * Grant access to Manage team members pages.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
     if ($account->isAnonymous()) {
       return AccessResult::forbidden('This UI only available to logged in users.');
     }
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $route_match->getParameter('team');
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|null $developer */
+    /** @var DeveloperInterface|null $developer */
     $developer = $route_match->getParameter('developer');
 
     // If the developer parameter is available in the route make sure it is
diff --git a/modules/apigee_edge_teams/src/Access/TeamAppListByTeamAccess.php b/modules/apigee_edge_teams/src/Access/TeamAppListByTeamAccess.php
index 81d1495..2bfb99a 100644
--- a/modules/apigee_edge_teams/src/Access/TeamAppListByTeamAccess.php
+++ b/modules/apigee_edge_teams/src/Access/TeamAppListByTeamAccess.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\apigee_edge_teams\Entity\TeamAppPermissionProvider;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamPermissionHandlerInterface;
@@ -38,23 +39,23 @@ final class TeamAppListByTeamAccess implements AccessInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The team permission handler service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;
 
   /**
    * TeamAppListByTeamAccess constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TeamPermissionHandlerInterface $team_permission_handler) {
@@ -65,12 +66,12 @@ final class TeamAppListByTeamAccess implements AccessInterface {
   /**
    * Grant access to Team app list by team page.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team entity from the route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(TeamInterface $team, AccountInterface $account) {
diff --git a/modules/apigee_edge_teams/src/CompanyMembersController.php b/modules/apigee_edge_teams/src/CompanyMembersController.php
index 032b6d5..11125c7 100644
--- a/modules/apigee_edge_teams/src/CompanyMembersController.php
+++ b/modules/apigee_edge_teams/src/CompanyMembersController.php
@@ -41,14 +41,14 @@ final class CompanyMembersController implements CompanyMembersControllerInterfac
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The company membership object cache.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface
+   * @var CompanyMembershipObjectCacheInterface
    */
   private $companyMembershipObjectCache;
 
@@ -57,9 +57,9 @@ final class CompanyMembersController implements CompanyMembersControllerInterfac
    *
    * @param string $company
    *   The name of the company.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $company_membership_object_cache
+   * @param CompanyMembershipObjectCacheInterface $company_membership_object_cache
    *   The company membership object cache.
    */
   public function __construct(string $company, SDKConnectorInterface $connector, CompanyMembershipObjectCacheInterface $company_membership_object_cache) {
diff --git a/modules/apigee_edge_teams/src/CompanyMembersControllerFactory.php b/modules/apigee_edge_teams/src/CompanyMembersControllerFactory.php
index 61928a1..d37d0c5 100644
--- a/modules/apigee_edge_teams/src/CompanyMembersControllerFactory.php
+++ b/modules/apigee_edge_teams/src/CompanyMembersControllerFactory.php
@@ -32,30 +32,30 @@ final class CompanyMembersControllerFactory implements CompanyMembersControllerF
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembersControllerInterface[]
+   * @var CompanyMembersControllerInterface[]
    */
   private $instances = [];
 
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The company membership object cache.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface
+   * @var CompanyMembershipObjectCacheInterface
    */
   private $companyMembershipObjectCache;
 
   /**
    * CompanyMembersControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $company_membership_object_cache
+   * @param CompanyMembershipObjectCacheInterface $company_membership_object_cache
    *   The company membership object cache.
    */
   public function __construct(SDKConnectorInterface $connector, CompanyMembershipObjectCacheInterface $company_membership_object_cache) {
diff --git a/modules/apigee_edge_teams/src/CompanyMembersControllerFactoryInterface.php b/modules/apigee_edge_teams/src/CompanyMembersControllerFactoryInterface.php
index 6e53702..a0e1c58 100644
--- a/modules/apigee_edge_teams/src/CompanyMembersControllerFactoryInterface.php
+++ b/modules/apigee_edge_teams/src/CompanyMembersControllerFactoryInterface.php
@@ -31,7 +31,7 @@ interface CompanyMembersControllerFactoryInterface {
    * @param string $company
    *   Name of a company.
    *
-   * @return \Drupal\apigee_edge_teams\CompanyMembersControllerInterface
+   * @return CompanyMembersControllerInterface
    *   The preconfigured company members control of the company.
    */
   public function companyMembersController(string $company): CompanyMembersControllerInterface;
diff --git a/modules/apigee_edge_teams/src/CompanyMembershipObjectCache.php b/modules/apigee_edge_teams/src/CompanyMembershipObjectCache.php
index 0fd61c9..d0f67bd 100644
--- a/modules/apigee_edge_teams/src/CompanyMembershipObjectCache.php
+++ b/modules/apigee_edge_teams/src/CompanyMembershipObjectCache.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Apigee\Edge\Api\Management\Structure\CompanyMembership;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;
 use Drupal\Component\Datetime\TimeInterface;
@@ -45,7 +46,7 @@ final class CompanyMembershipObjectCache implements CompanyMembershipObjectCache
   /**
    * Persistent cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   private $persistentCacheBackend;
 
@@ -62,27 +63,27 @@ final class CompanyMembershipObjectCache implements CompanyMembershipObjectCache
   /**
    * Non-persistent cache backend.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   private $memoryCache;
 
   /**
    * The system time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $systemTime;
 
   /**
    * CompanyMembershipObjectCache constructor.
    *
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $cache_factory
+   * @param CacheFactoryInterface $cache_factory
    *   The cache factory.
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The module specific memory cache factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time service.
    */
   public function __construct(CacheFactoryInterface $cache_factory, MemoryCacheFactoryInterface $memory_cache_factory, ConfigFactoryInterface $config, TimeInterface $time) {
diff --git a/modules/apigee_edge_teams/src/CompanyMembershipObjectCacheInterface.php b/modules/apigee_edge_teams/src/CompanyMembershipObjectCacheInterface.php
index 3a91ea7..cdb5576 100644
--- a/modules/apigee_edge_teams/src/CompanyMembershipObjectCacheInterface.php
+++ b/modules/apigee_edge_teams/src/CompanyMembershipObjectCacheInterface.php
@@ -32,7 +32,7 @@ interface CompanyMembershipObjectCacheInterface {
    *
    * @param string $company
    *   Name of a company.
-   * @param \Apigee\Edge\Api\Management\Structure\CompanyMembership $membership
+   * @param CompanyMembership $membership
    *   Membership object with the members.
    */
   public function saveMembership(string $company, CompanyMembership $membership): void;
@@ -59,7 +59,7 @@ interface CompanyMembershipObjectCacheInterface {
    * @param string $company
    *   Name of a company.
    *
-   * @return \Apigee\Edge\Api\Management\Structure\CompanyMembership|null
+   * @return CompanyMembership|null
    *   Membership object with the members or null if no entry found for the
    *   given company in the cache.
    */
diff --git a/modules/apigee_edge_teams/src/Controller/TeamAppKeysController.php b/modules/apigee_edge_teams/src/Controller/TeamAppKeysController.php
index b3545b0..fa38323 100644
--- a/modules/apigee_edge_teams/src/Controller/TeamAppKeysController.php
+++ b/modules/apigee_edge_teams/src/Controller/TeamAppKeysController.php
@@ -30,7 +30,7 @@ class TeamAppKeysController extends DeveloperAppKeysController {
   /**
    * Returns app credentials.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The app credentials.
    */
   public function teamAppKeys($team, $app): JsonResponse {
diff --git a/modules/apigee_edge_teams/src/Controller/TeamMembersList.php b/modules/apigee_edge_teams/src/Controller/TeamMembersList.php
index eb1fc17..ccc1b1a 100644
--- a/modules/apigee_edge_teams/src/Controller/TeamMembersList.php
+++ b/modules/apigee_edge_teams/src/Controller/TeamMembersList.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Controller;
 
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
 use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
@@ -41,7 +42,7 @@ class TeamMembersList extends ControllerBase {
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;
 
@@ -55,18 +56,18 @@ class TeamMembersList extends ControllerBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|null
+   * @var ModuleHandlerInterface|null
    */
   protected $moduleHandler;
 
   /**
    * TeamMembersList constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface|null $module_handler
+   * @param ModuleHandlerInterface|null $module_handler
    *   The module handler.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler = NULL) {
@@ -99,7 +100,7 @@ class TeamMembersList extends ControllerBase {
   /**
    * Returns a list of team members.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team which members gets listed.
    *
    * @return array
@@ -123,7 +124,7 @@ class TeamMembersList extends ControllerBase {
         $carry[$item->getEmail()] = $item;
         return $carry;
       }, []);
-      /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+      /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
       $team_member_role_storage = $this->entityTypeManager()->getStorage('team_member_role');
       $team_member_roles_by_mail = array_reduce($team_member_role_storage->loadByTeam($team), function ($carry, TeamMemberRoleInterface $developer_role) {
         $carry[$developer_role->getDeveloper()->getEmail()] = $developer_role;
@@ -171,9 +172,9 @@ class TeamMembersList extends ControllerBase {
    * @param array $users_by_mail
    *   Associative array of Drupal users keyed by their email addresses. The
    *   list only contains those Drupal users who are member of the team.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $team_member_roles_by_mail
+   * @param TeamMemberRoleInterface[] $team_member_roles_by_mail
    *   Associative array of team member roles keyed by email addresses.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that the member belongs.
    *
    * @return array
@@ -228,7 +229,7 @@ class TeamMembersList extends ControllerBase {
    *
    * @param string $member
    *   The email address of a member (developer).
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that the member belongs.
    *
    * @return array
@@ -246,7 +247,7 @@ class TeamMembersList extends ControllerBase {
    *
    * @param string $member
    *   The email address of a member (developer).
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that the member belongs.
    *
    * @return array
diff --git a/modules/apigee_edge_teams/src/DefaultTeamPermissionsProvider.php b/modules/apigee_edge_teams/src/DefaultTeamPermissionsProvider.php
index e47fb54..8a50de8 100644
--- a/modules/apigee_edge_teams/src/DefaultTeamPermissionsProvider.php
+++ b/modules/apigee_edge_teams/src/DefaultTeamPermissionsProvider.php
@@ -36,7 +36,7 @@ final class DefaultTeamPermissionsProvider implements DynamicTeamPermissionProvi
   /**
    * DefaultTeamPermissionsProvider constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   String translation.
    */
   public function __construct(TranslationInterface $string_translation) {
diff --git a/modules/apigee_edge_teams/src/DynamicTeamPermissionProviderInterface.php b/modules/apigee_edge_teams/src/DynamicTeamPermissionProviderInterface.php
index 84e04d4..48be304 100644
--- a/modules/apigee_edge_teams/src/DynamicTeamPermissionProviderInterface.php
+++ b/modules/apigee_edge_teams/src/DynamicTeamPermissionProviderInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\apigee_edge_teams\Structure\TeamPermission;
 /**
  * Allows modules to provide dynamic team permissions.
  *
@@ -30,7 +31,7 @@ interface DynamicTeamPermissionProviderInterface {
   /**
    * Returns team permissions provided by a module.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Array of team permissions.
    *
    * @see \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
diff --git a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppController.php b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppController.php
index 6fcde50..29fefcb 100644
--- a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppController.php
+++ b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppController.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Controller;
 
+use Apigee\Edge\Api\Management\Controller\CompanyAppControllerInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface as EdgeAppByOwnerControllerInterface;
 use Apigee\Edge\Api\Management\Controller\CompanyAppController as EdgeCompanyAppController;
 use Drupal\apigee_edge\Entity\Controller\AppByOwnerController;
@@ -45,7 +46,7 @@ final class TeamAppController extends AppByOwnerController implements TeamAppCon
    * {@inheritdoc}
    */
   public function getCompanyName(): string {
-    /** @var \Apigee\Edge\Api\Management\Controller\CompanyAppControllerInterface $decorated */
+    /** @var CompanyAppControllerInterface $decorated */
     $decorated = $this->decorated();
     return $decorated->getCompanyName();
   }
diff --git a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactory.php b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactory.php
index dae4a80..43f4bb9 100644
--- a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactory.php
+++ b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactory.php
@@ -34,57 +34,57 @@ final class TeamAppControllerFactory implements TeamAppControllerFactoryInterfac
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerInterface[]
+   * @var TeamAppControllerInterface[]
    */
   private $instances = [];
 
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;
 
   /**
    * The app cache that stores apps by their ids (UUIDs).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;
 
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;
 
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;
 
   /**
    * DeveloperAppControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache that stores apps by their ids (UUIDs).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
+   * @param AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory, AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory) {
diff --git a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactoryInterface.php b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactoryInterface.php
index d155f5d..e318f8f 100644
--- a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactoryInterface.php
+++ b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppControllerFactoryInterface.php
@@ -31,7 +31,7 @@ interface TeamAppControllerFactoryInterface {
    * @param string $team
    *   Name of a team.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerInterface
+   * @return TeamAppControllerInterface
    *   Team app controller.
    */
   public function teamAppController(string $team): TeamAppControllerInterface;
diff --git a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactory.php b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactory.php
index 834c784..ba1e9d7 100644
--- a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactory.php
+++ b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactory.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Controller;
 
+use Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface;
 use Drupal\apigee_edge\SDKConnectorInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
@@ -32,39 +33,39 @@ final class TeamAppCredentialControllerFactory implements TeamAppCredentialContr
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface[]
+   * @var DeveloperAppCredentialControllerInterface[]
    */
   private $instances;
 
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
   /**
    * TeamAppCredentialControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(SDKConnectorInterface $connector, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EventDispatcherInterface $event_dispatcher) {
diff --git a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactoryInterface.php b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactoryInterface.php
index d69bbbe..15c976c 100644
--- a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactoryInterface.php
+++ b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppCredentialControllerFactoryInterface.php
@@ -34,7 +34,7 @@ interface TeamAppCredentialControllerFactoryInterface {
    *   Name of an app. (Not an app id, because app credentials endpoints does
    *   not allow to use them.)
    *
-   * @return \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerInterface
+   * @return TeamAppCredentialControllerInterface
    *   The team app credentials controller.
    */
   public function teamAppCredentialController(string $owner, string $app_name): TeamAppCredentialControllerInterface;
diff --git a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppEdgeEntityControllerProxy.php b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppEdgeEntityControllerProxy.php
index 5675880..0214087 100644
--- a/modules/apigee_edge_teams/src/Entity/Controller/TeamAppEdgeEntityControllerProxy.php
+++ b/modules/apigee_edge_teams/src/Entity/Controller/TeamAppEdgeEntityControllerProxy.php
@@ -38,23 +38,23 @@ final class TeamAppEdgeEntityControllerProxy implements EdgeEntityControllerInte
   /**
    * The team app controller factory service.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface
+   * @var TeamAppControllerFactoryInterface
    */
   private $teamAppControllerFactory;
 
   /**
    * The app controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface
+   * @var AppControllerInterface
    */
   private $appController;
 
   /**
    * TeamAppEdgeEntityControllerProxy constructor.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $team_app_controller_factory
+   * @param TeamAppControllerFactoryInterface $team_app_controller_factory
    *   The team app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(TeamAppControllerFactoryInterface $team_app_controller_factory, AppControllerInterface $app_controller) {
@@ -66,7 +66,7 @@ final class TeamAppEdgeEntityControllerProxy implements EdgeEntityControllerInte
    * {@inheritdoc}
    */
   public function create(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $entity */
+    /** @var CompanyAppInterface $entity */
     if (empty($entity->getCompanyName())) {
       // Sanity check.
       throw new RuntimeException('Company name has to set on the app.');
@@ -86,7 +86,7 @@ final class TeamAppEdgeEntityControllerProxy implements EdgeEntityControllerInte
    * {@inheritdoc}
    */
   public function update(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $entity */
+    /** @var CompanyAppInterface $entity */
     $controller = $this->teamAppControllerFactory->teamAppController($entity->getCompanyName());
     $controller->update($entity);
   }
@@ -103,7 +103,7 @@ final class TeamAppEdgeEntityControllerProxy implements EdgeEntityControllerInte
       // Entity has not found in the entity cache, we have it from Apigee Edge.
       $entity = $this->load($id);
     }
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $entity */
+    /** @var CompanyAppInterface $entity */
     $controller = $this->teamAppControllerFactory->teamAppController($entity->getCompanyName());
     // The id that we got is a UUID, what we need is an app name.
     $controller->delete($entity->getName());
diff --git a/modules/apigee_edge_teams/src/Entity/Controller/TeamController.php b/modules/apigee_edge_teams/src/Entity/Controller/TeamController.php
index 1adc821..f2890dc 100644
--- a/modules/apigee_edge_teams/src/Entity/Controller/TeamController.php
+++ b/modules/apigee_edge_teams/src/Entity/Controller/TeamController.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Controller;
 
+use Apigee\Edge\Api\Management\Entity\CompanyInterface;
+use Apigee\Edge\Api\Management\Entity\CompanyAppInterface;
 use Apigee\Edge\Api\Management\Controller\CompanyController as EdgeCompanyController;
 use Apigee\Edge\Api\Management\Controller\CompanyControllerInterface as EdgeCompanyControllerInterface;
 use Apigee\Edge\Entity\EntityInterface;
@@ -64,77 +66,77 @@ final class TeamController implements TeamControllerInterface {
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;
 
   /**
    * The entity cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   private $entityCache;
 
   /**
    * The entity id cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $entityIdCache;
 
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;
 
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;
 
   /**
    * The company membership object cache.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface
+   * @var CompanyMembershipObjectCacheInterface
    */
   private $companyMembershipObjectCache;
 
   /**
    * The developer companies cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompaniesCache;
 
   /**
    * CompanyController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface $entity_cache
+   * @param EntityCacheInterface $entity_cache
    *   The entity cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The entity id cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
    *   The app name cache by owner factory service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembershipObjectCacheInterface $company_membership_object_cache
+   * @param CompanyMembershipObjectCacheInterface $company_membership_object_cache
    *   The company membership object cache.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   The developer companies cache.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, EntityCacheInterface $entity_cache, EntityIdCacheInterface $entity_id_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner, CompanyMembershipObjectCacheInterface $company_membership_object_cache, DeveloperCompaniesCacheInterface $developer_companies_cache) {
@@ -196,7 +198,7 @@ final class TeamController implements TeamControllerInterface {
    * {@inheritdoc}
    */
   public function delete(string $entity_id): EntityInterface {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyInterface $entity */
+    /** @var CompanyInterface $entity */
     $entity = $this->traitDelete($entity_id);
 
     // Invalidate developer companies cache to force reload
@@ -210,7 +212,7 @@ final class TeamController implements TeamControllerInterface {
     // Invalidate app caches that belongs to this company.
     $app_cache = $this->appCacheByOwnerFactory->getAppCache($entity->id());
     $app_ids = [];
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $app */
+    /** @var CompanyAppInterface $app */
     foreach ($app_cache->getEntities() as $app) {
       $app_ids[] = $app->getAppId();
     }
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateForm.php b/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateForm.php
index 43436d9..6f1797d 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateForm.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateForm.php
@@ -73,10 +73,10 @@ class TeamAppCreateForm extends TeamAppCreateFormBase {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public static function updateApiProductList(array $form, FormStateInterface $form_state) : AjaxResponse {
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormBase.php b/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormBase.php
index dfa3731..deaaa79 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormBase.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormBase.php
@@ -42,20 +42,20 @@ abstract class TeamAppCreateFormBase extends AppCreateForm {
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface
+   * @var TeamAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;
 
   /**
    * Constructs TeamAppCreateFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API Product controller service.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The team app credential controller factory.
-   * @param \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
+   * @param TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
    *   The team API product access handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller, TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory, TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler) {
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormForTeam.php b/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormForTeam.php
index f82e097..fbf1a63 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormForTeam.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamAppCreateFormForTeam.php
@@ -31,7 +31,7 @@ class TeamAppCreateFormForTeam extends TeamAppCreateFormBase {
   /**
    * The team from the route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
 
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamAppEditForm.php b/modules/apigee_edge_teams/src/Entity/Form/TeamAppEditForm.php
index 4a867c2..ea15e0a 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamAppEditForm.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamAppEditForm.php
@@ -41,27 +41,27 @@ class TeamAppEditForm extends AppEditForm {
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface
+   * @var TeamAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;
 
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;
 
   /**
    * Constructs TeamAppEditForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The team app credential controller factory.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, TeamAppCredentialControllerFactoryInterface $app_credential_controller_factory, TeamPermissionHandlerInterface $team_permission_handler = NULL) {
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamAppFormTrait.php b/modules/apigee_edge_teams/src/Entity/Form/TeamAppFormTrait.php
index 40bb3b8..f3d2e0c 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamAppFormTrait.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamAppFormTrait.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Form;
 
+use Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface;
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Exception\ClientErrorException;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
@@ -50,7 +52,7 @@ trait TeamAppFormTrait {
     // query to reduce the number API calls. (Entity query may load all
     // developers to return whether the given team has an app with
     // the provided name already.)
-    /** @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $factory */
+    /** @var TeamAppControllerFactoryInterface $factory */
     $factory = \Drupal::service('apigee_edge_teams.controller.team_app_controller_factory');
     $app = TRUE;
     try {
@@ -101,7 +103,7 @@ trait TeamAppFormTrait {
   /**
    * Allows to access to the injected entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   private function getEntityTypeManager(): EntityTypeManagerInterface {
@@ -115,7 +117,7 @@ trait TeamAppFormTrait {
   /**
    * Allows to access to the injected team member API product access handler.
    *
-   * @return \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface
+   * @return TeamMemberApiProductAccessHandlerInterface
    *   The team member API product access handler.
    */
   private function getTeamMemberApiProductAccessHandler(): TeamMemberApiProductAccessHandlerInterface {
@@ -129,7 +131,7 @@ trait TeamAppFormTrait {
   /**
    * Allows to access to the injected team membership manager.
    *
-   * @return \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @return TeamMembershipManagerInterface
    *   The team membership manager.
    */
   private function getTeamMembershipMananger(): TeamMembershipManagerInterface {
@@ -146,11 +148,11 @@ trait TeamAppFormTrait {
    * @param string $config
    *   Config object name.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The config object.
    */
   private function getConfigObject(string $config): ImmutableConfig {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = \Drupal::service('config.factory');
     if (method_exists($this, 'configFactory') && $this->configFactory() instanceof ConfigFactoryInterface) {
       $config_factory = $this->configFactory();
@@ -167,7 +169,7 @@ trait TeamAppFormTrait {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ -197,7 +199,7 @@ trait TeamAppFormTrait {
    */
   protected function apiProductList(array $form, FormStateInterface $form_state): array {
     $team_name = $this->getTeamName($form, $form_state);
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface|null $team */
+    /** @var TeamInterface|null $team */
     $team = $this->getEntityTypeManager()->getStorage('team')->load($team_name);
     // Sanity check, team should always exists with team name in this context.
     if ($team === NULL) {
@@ -230,7 +232,7 @@ trait TeamAppFormTrait {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return string
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamForm.php b/modules/apigee_edge_teams/src/Entity/Form/TeamForm.php
index 439df3b..badad8e 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamForm.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamForm.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Form;
 
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Entity\Form\EdgeEntityFormInterface;
 use Drupal\apigee_edge\Entity\Form\FieldableEdgeEntityForm;
@@ -45,34 +47,34 @@ class TeamForm extends FieldableEdgeEntityForm implements EdgeEntityFormInterfac
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * TeamForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, AccountProxyInterface $current_user, LoggerChannelInterface $logger) {
@@ -98,7 +100,7 @@ class TeamForm extends FieldableEdgeEntityForm implements EdgeEntityFormInterfac
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = parent::buildEntity($form, $form_state);
 
     // ADMIN_EMAIL_ATTRIBUTE is a required field for monetization.
@@ -115,7 +117,7 @@ class TeamForm extends FieldableEdgeEntityForm implements EdgeEntityFormInterfac
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->entity;
 
     $form['name'] = [
@@ -140,7 +142,7 @@ class TeamForm extends FieldableEdgeEntityForm implements EdgeEntityFormInterfac
    *   Team name.
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return bool
@@ -160,7 +162,7 @@ class TeamForm extends FieldableEdgeEntityForm implements EdgeEntityFormInterfac
    * {@inheritdoc}
    */
   protected function actions(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->entity;
     $label = mb_strtolower($this->entityTypeManager->getDefinition('team')->getSingularLabel());
     $actions = parent::actions($form, $form_state);
@@ -183,7 +185,7 @@ class TeamForm extends FieldableEdgeEntityForm implements EdgeEntityFormInterfac
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->entity;
     $was_new = $team->isNew();
     $result = parent::save($form, $form_state);
@@ -193,7 +195,7 @@ class TeamForm extends FieldableEdgeEntityForm implements EdgeEntityFormInterfac
         $this->teamMembershipManager->addMembers($team->id(), [$this->currentUser->getEmail()]);
 
         try {
-          /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+          /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
           $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
           $team_member_role_storage->addTeamRoles($this->currentUser(), $team, [TeamRoleInterface::TEAM_ADMIN_ROLE]);
         }
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationAcceptForm.php b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationAcceptForm.php
index f53f55f..b764a76 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationAcceptForm.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationAcceptForm.php
@@ -54,7 +54,7 @@ class TeamInvitationAcceptForm extends TeamInvitationFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $invitation */
+    /** @var TeamInvitationInterface $invitation */
     $invitation = $this->entity;
     $invitation->setStatus(TeamInvitationInterface::STATUS_ACCEPTED)->save();
 
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeclineForm.php b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeclineForm.php
index c3d52c1..d29cd7d 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeclineForm.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeclineForm.php
@@ -54,7 +54,7 @@ class TeamInvitationDeclineForm extends TeamInvitationFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $invitation */
+    /** @var TeamInvitationInterface $invitation */
     $invitation = $this->entity;
     $invitation->setStatus(TeamInvitationInterface::STATUS_DECLINED)->save();
 
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeleteForm.php b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeleteForm.php
index 27db281..b01f987 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeleteForm.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationDeleteForm.php
@@ -32,7 +32,7 @@ class TeamInvitationDeleteForm extends ContentEntityDeleteForm {
   /**
    * The team.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
 
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationFormBase.php b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationFormBase.php
index 39b3367..594e82b 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationFormBase.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationFormBase.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Form;
 
+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -32,7 +33,7 @@ abstract class TeamInvitationFormBase extends ContentEntityConfirmFormBase {
   /**
    * The team_invitaion entity.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
+   * @var TeamInvitationInterface
    */
   protected $entity;
 
@@ -46,7 +47,7 @@ abstract class TeamInvitationFormBase extends ContentEntityConfirmFormBase {
   /**
    * The team.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
 
diff --git a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationResendForm.php b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationResendForm.php
index a552482..f687e06 100644
--- a/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationResendForm.php
+++ b/modules/apigee_edge_teams/src/Entity/Form/TeamInvitationResendForm.php
@@ -37,20 +37,20 @@ class TeamInvitationResendForm extends TeamInvitationFormBase {
   /**
    * The team_invitation notifier service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface
+   * @var TeamInvitationNotifierInterface
    */
   protected $teamInvitationNotifier;
 
   /**
    * TeamInvitationResendForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface $team_invitation_notifier
+   * @param TeamInvitationNotifierInterface $team_invitation_notifier
    *   The team_invitation notifier service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, TeamInvitationNotifierInterface $team_invitation_notifier) {
@@ -91,7 +91,7 @@ class TeamInvitationResendForm extends TeamInvitationFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation */
+    /** @var TeamInvitationInterface $team_invitation */
     $team_invitation = $this->entity;
 
     // Reset the status and the expiry date.
diff --git a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListBuilder.php b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListBuilder.php
index 8d70c1a..820d6a4 100644
--- a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListBuilder.php
+++ b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListBuilder.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity\ListBuilder;
 
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Entity\ListBuilder\AppListBuilder;
 
@@ -48,7 +49,7 @@ class TeamAppListBuilder extends AppListBuilder {
    */
   protected function buildInfoRow(AppInterface $app, array &$rows) {
     /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $app */
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface[] $teams */
+    /** @var TeamInterface[] $teams */
     $teams = $this->entityTypeManager->getStorage('team')->loadMultiple();
     $css_id = $this->getCssIdForInfoRow($app);
     $rows[$css_id]['data']['team']['data'] = $teams[$app->getCompanyName()]->access('view') ? $teams[$app->getCompanyName()]->toLink()->toRenderable() : $teams[$app->getCompanyName()]->label();
diff --git a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListByTeam.php b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListByTeam.php
index ae9819f..2448ca1 100644
--- a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListByTeam.php
+++ b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamAppListByTeam.php
@@ -41,26 +41,26 @@ class TeamAppListByTeam extends AppListBuilder implements ContainerInjectionInte
   /**
    * Route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * TeamAppListByTeam constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $render
+   * @param RendererInterface $render
    *   The render.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, RendererInterface $render, RequestStack $request_stack, TimeInterface $time, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory = NULL) {
@@ -125,7 +125,7 @@ class TeamAppListByTeam extends AppListBuilder implements ContainerInjectionInte
   /**
    * Returns the title of the "team app list by team" page.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title of the page.
    */
   public function pageTitle(): TranslatableMarkup {
diff --git a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamInvitationListBuilder.php b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamInvitationListBuilder.php
index fccf951..4562f89 100644
--- a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamInvitationListBuilder.php
+++ b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamInvitationListBuilder.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity\ListBuilder;
 
+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -32,7 +33,7 @@ class TeamInvitationListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $entity */
+    /** @var TeamInvitationInterface $entity */
     $operations = parent::getDefaultOperations($entity);
 
     if ($entity->isPending() && $entity->access('accept') && $entity->hasLinkTemplate('accept-form')) {
@@ -59,7 +60,7 @@ class TeamInvitationListBuilder extends EntityListBuilder {
       ];
     }
 
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $entity */
+    /** @var TeamInvitationInterface $entity */
     if ($entity->access('delete') && $entity->hasLinkTemplate('delete-form')) {
       $operations['delete'] = [
         'title' => $this->t('Revoke'),
diff --git a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamListBuilder.php b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamListBuilder.php
index a1a04e3..ecdd765 100644
--- a/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamListBuilder.php
+++ b/modules/apigee_edge_teams/src/Entity/ListBuilder/TeamListBuilder.php
@@ -101,7 +101,7 @@ class TeamListBuilder extends EdgeEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $entity */
+    /** @var TeamInterface $entity */
     $row['name']['data'] = $entity->toLink()->toRenderable();
     $row['status']['data'] = [
       '#type' => 'status_property',
diff --git a/modules/apigee_edge_teams/src/Entity/Query/TeamAppQuery.php b/modules/apigee_edge_teams/src/Entity/Query/TeamAppQuery.php
index b760925..57f0d87 100644
--- a/modules/apigee_edge_teams/src/Entity/Query/TeamAppQuery.php
+++ b/modules/apigee_edge_teams/src/Entity/Query/TeamAppQuery.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Query;
 
+use Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface;
 use Drupal\apigee_edge\Entity\Query\AppQueryBase;
 
@@ -39,7 +40,7 @@ class TeamAppQuery extends AppQueryBase {
    * {@inheritdoc}
    */
   protected function appByOwnerController(string $owner): AppByOwnerControllerInterface {
-    /** @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $team_app_controller_factory */
+    /** @var TeamAppControllerFactoryInterface $team_app_controller_factory */
     $team_app_controller_factory = \Drupal::service('apigee_edge_teams.controller.team_app_controller_factory');
     return $team_app_controller_factory->teamAppController($owner);
   }
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorage.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorage.php
index 6ab0e8f..f3c030b 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorage.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamAppStorage.php
@@ -40,24 +40,24 @@ class TeamAppStorage extends AppStorage implements TeamAppStorageInterface {
   /**
    * The team app controller factory.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface
+   * @var TeamAppControllerFactoryInterface
    */
   private $teamAppControllerFactory;
 
   /**
    * AppStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamAppControllerFactoryInterface $team_app_controller_factory
+   * @param TeamAppControllerFactoryInterface $team_app_controller_factory
    *   The team app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, TeamAppControllerFactoryInterface $team_app_controller_factory, AppControllerInterface $app_controller) {
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
index 87dbdcc..0c8f2e2 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorage.php
@@ -45,39 +45,39 @@ class TeamInvitationStorage extends SqlContentEntityStorage implements TeamInvit
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * TeamInvitationStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entity_type_manager
+   * @param EntityTypeManagerInterface|null $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, TimeInterface $time) {
@@ -108,21 +108,21 @@ class TeamInvitationStorage extends SqlContentEntityStorage implements TeamInvit
    * {@inheritdoc}
    */
   protected function invokeHook($hook, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $entity */
+    /** @var TeamInvitationInterface $entity */
     parent::invokeHook($hook, $entity);
 
     switch ($hook) {
       case 'insert':
         if ($entity->isAccepted()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::ACCEPTED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::ACCEPTED);
         }
         else {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::CREATED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::CREATED);
         }
         break;
 
       case 'update':
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $original */
+        /** @var TeamInvitationInterface $original */
         $original = $entity->original;
         if (!$original) {
           return;
@@ -133,11 +133,11 @@ class TeamInvitationStorage extends SqlContentEntityStorage implements TeamInvit
         unset($entity->original);
 
         if (!$original->isDeclined() && $entity->isDeclined()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::DECLINED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::DECLINED);
         }
 
         if (!$original->isAccepted() && $entity->isAccepted()) {
-          $this->eventDispatcher->dispatch(TeamInvitationEvents::ACCEPTED, new TeamInvitationEvent($entity));
+          $this->eventDispatcher->dispatch(new TeamInvitationEvent($entity), TeamInvitationEvents::ACCEPTED);
         }
         break;
     }
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorageInterface.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorageInterface.php
index 9089fc6..29ea351 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorageInterface.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamInvitationStorageInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Storage;
 
+use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 
 /**
@@ -35,7 +36,7 @@ interface TeamInvitationStorageInterface extends EntityStorageInterface {
    * @param string|null $team_id
    *   The team id.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface[]
+   * @return TeamInvitationInterface[]
    *   An array of team_invitation entities for this email address.
    */
   public function loadByRecipient(string $email, ?string $team_id = NULL): array;
@@ -43,7 +44,7 @@ interface TeamInvitationStorageInterface extends EntityStorageInterface {
   /**
    * Returns all team_invitation entities set to expire.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface[]
+   * @return TeamInvitationInterface[]
    *   An array of team_invitations entities set to expire.
    */
   public function getInvitationsToExpire(): array;
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorage.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorage.php
index 4d9a71e..7b1c78a 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorage.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorage.php
@@ -49,39 +49,39 @@ class TeamMemberRoleStorage extends SqlContentEntityStorage implements TeamMembe
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * TeamMemberRoleStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend to be used.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, TeamMembershipManagerInterface $team_membership_manager, LoggerInterface $logger, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, EntityTypeManagerInterface $entity_type_manager = NULL) {
@@ -158,7 +158,7 @@ class TeamMemberRoleStorage extends SqlContentEntityStorage implements TeamMembe
     }
     // Indicates whether a new team member role entity had to be created
     // or not.
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $team_member_roles */
+    /** @var TeamMemberRoleInterface $team_member_roles */
     $team_member_roles = $this->loadByDeveloperAndTeam($account, $team);
     if ($team_member_roles === NULL) {
       $team_member_roles = $this->create(['uid' => ['target_id' => $account->id()], 'team' => ['target_id' => $team->id()]]);
@@ -207,7 +207,7 @@ class TeamMemberRoleStorage extends SqlContentEntityStorage implements TeamMembe
     if (!in_array($team->id(), $developer_team_ids)) {
       throw new InvalidArgumentException("{$account->getEmail()} is not member of {$team->id()} team.");
     }
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $team_member_roles */
+    /** @var TeamMemberRoleInterface $team_member_roles */
     $team_member_roles = $this->loadByDeveloperAndTeam($account, $team);
     if ($team_member_roles === NULL) {
       throw new InvalidArgumentException("{$account->getEmail()} does not have team roles in {$team->id()} team.");
@@ -246,7 +246,7 @@ class TeamMemberRoleStorage extends SqlContentEntityStorage implements TeamMembe
    * {@inheritdoc}
    */
   protected function doSave($id, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $entity */
+    /** @var TeamMemberRoleInterface $entity */
     $return = parent::doSave($id, $entity);
 
     if ($return === SAVED_NEW) {
@@ -264,7 +264,7 @@ class TeamMemberRoleStorage extends SqlContentEntityStorage implements TeamMembe
    * {@inheritdoc}
    */
   protected function doDelete($entities) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $entity */
+    /** @var TeamMemberRoleInterface $entity */
     foreach ($entities as $entity) {
       // This sanity check allows uninstalling the module if there is no
       // connection to Apigee Edge.
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorageInterface.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorageInterface.php
index 32aca99..77e7035 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorageInterface.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamMemberRoleStorageInterface.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Storage;
 
+use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
@@ -38,12 +40,12 @@ interface TeamMemberRoleStorageInterface extends ContentEntityStorageInterface {
    * perform this check if needed. Thanks for this approach we can minimize
    * the API calls that are being sent to Apigee Edge.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface|null
+   * @return TeamMemberRoleInterface|null
    *   Team member role object if the developer has team roles within a team,
    *   null otherwise.
    */
@@ -57,10 +59,10 @@ interface TeamMemberRoleStorageInterface extends ContentEntityStorageInterface {
    * perform this check if needed. Thanks for this approach we can minimize
    * the API calls that are being sent to Apigee Edge.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[]
+   * @return TeamMemberRoleInterface[]
    *   Array of team member role objects.
    */
   public function loadByDeveloper(AccountInterface $account): array;
@@ -73,10 +75,10 @@ interface TeamMemberRoleStorageInterface extends ContentEntityStorageInterface {
    * perform this check if needed. Thanks for this approach we can minimize
    * the API calls that are being sent to Apigee Edge.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[]
+   * @return TeamMemberRoleInterface[]
    *   Array of team member role objects related to a team.
    */
   public function loadByTeam(TeamInterface $team): array;
@@ -84,18 +86,18 @@ interface TeamMemberRoleStorageInterface extends ContentEntityStorageInterface {
   /**
    * Adds team roles to a developer in a team.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    * @param string[] $roles
    *   Array of team role entity ids.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface
+   * @return TeamMemberRoleInterface
    *   The updated team member role entity.
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidArgumentException
+   * @throws EntityStorageException
    */
   public function addTeamRoles(AccountInterface $account, TeamInterface $team, array $roles): TeamMemberRoleInterface;
 
@@ -105,14 +107,14 @@ interface TeamMemberRoleStorageInterface extends ContentEntityStorageInterface {
    * If you would like to remove a developer from a team (remove its "member"
    * team role) use the team membership manager service.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User entity object of a developer.
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   Team entity object.
    * @param string[] $roles
    *   Array of team role entity ids.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface
+   * @return TeamMemberRoleInterface
    *   The updated team member role entity.
    */
   public function removeTeamRoles(AccountInterface $account, TeamInterface $team, array $roles): TeamMemberRoleInterface;
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorage.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorage.php
index d71c72e..69252f4 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorage.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamRoleStorage.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Storage;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 
@@ -31,13 +33,13 @@ class TeamRoleStorage extends ConfigEntityStorage implements TeamRoleStorageInte
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   If team role does not exist.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   If changes could not be saved.
    */
   public function changePermissions(string $role_name, array $permissions): void {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $role */
+    /** @var TeamRoleInterface $role */
     $role = $this->load($role_name);
     if ($role === NULL) {
       throw new InvalidArgumentException("Team role with name does not exist: {$role_name}");
diff --git a/modules/apigee_edge_teams/src/Entity/Storage/TeamStorage.php b/modules/apigee_edge_teams/src/Entity/Storage/TeamStorage.php
index 59f02f7..c00b390 100644
--- a/modules/apigee_edge_teams/src/Entity/Storage/TeamStorage.php
+++ b/modules/apigee_edge_teams/src/Entity/Storage/TeamStorage.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity\Storage;
 
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Entity\Controller\CachedManagementApiEdgeEntityControllerProxy;
 use Drupal\apigee_edge\Entity\Controller\EdgeEntityControllerInterface;
@@ -47,42 +49,42 @@ class TeamStorage extends AttributesAwareFieldableEdgeEntityStorageBase implemen
   /**
    * The team controller service.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamControllerInterface
+   * @var TeamControllerInterface
    */
   private $teamController;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * Constructs an DeveloperStorage instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge_teams\Entity\Controller\TeamControllerInterface $team_controller
+   * @param TeamControllerInterface $team_controller
    *   The team controller service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, TeamControllerInterface $team_controller, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config, LoggerInterface $logger) {
@@ -123,7 +125,7 @@ class TeamStorage extends AttributesAwareFieldableEdgeEntityStorageBase implemen
    * {@inheritdoc}
    */
   protected function doSave($id, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $entity */
+    /** @var TeamInterface $entity */
     $team_status = $entity->getStatus();
     $result = parent::doSave($id, $entity);
 
@@ -145,11 +147,11 @@ class TeamStorage extends AttributesAwareFieldableEdgeEntityStorageBase implemen
    * {@inheritdoc}
    */
   protected function doPostSave(EntityInterface $entity, $update) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $entity */
+    /** @var TeamInterface $entity */
     if (!$update) {
-      /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+      /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
       $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $team_roles_by_teams */
+      /** @var TeamMemberRoleInterface[] $team_roles_by_teams */
       $team_roles_by_teams = $team_member_role_storage->loadByTeam($entity);
       if ($team_roles_by_teams) {
         // Teams (Companies) can be deleted outside of Drupal so it could
@@ -188,9 +190,9 @@ class TeamStorage extends AttributesAwareFieldableEdgeEntityStorageBase implemen
    */
   protected function doDelete($entities) {
     parent::doDelete($entities);
-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+    /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
     $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $dev_roles_by_teams */
+    /** @var TeamMemberRoleInterface[] $dev_roles_by_teams */
     $dev_roles_by_teams = $team_member_role_storage->loadByProperties(['team' => array_keys($entities)]);
     // When a team gets deleted all team member roles related to the team
     // should be deleted from the database.
diff --git a/modules/apigee_edge_teams/src/Entity/Team.php b/modules/apigee_edge_teams/src/Entity/Team.php
index d963c31..b6f09f4 100644
--- a/modules/apigee_edge_teams/src/Entity/Team.php
+++ b/modules/apigee_edge_teams/src/Entity/Team.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Entity;
 
+use Drupal\Core\Field\BaseFieldDefinition;
 use Apigee\Edge\Api\Management\Entity\Company;
 use Apigee\Edge\Entity\EntityInterface;
 use Apigee\Edge\Structure\AttributesProperty;
@@ -77,7 +78,7 @@ class Team extends AttributesAwareFieldableEdgeEntityBase implements TeamInterfa
   /**
    * The decorated company entity from the SDK.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\Company
+   * @var Company
    */
   protected $decorated;
 
@@ -89,7 +90,7 @@ class Team extends AttributesAwareFieldableEdgeEntityBase implements TeamInterfa
    * @param null|string $entity_type
    *   Type of the entity. It is optional because constructor sets its default
    *   value.
-   * @param \Apigee\Edge\Entity\EntityInterface|null $decorated
+   * @param EntityInterface|null $decorated
    *   The SDK entity that this Drupal entity decorates.
    */
   public function __construct(array $values, ?string $entity_type, ?EntityInterface $decorated = NULL) {
@@ -270,7 +271,7 @@ class Team extends AttributesAwareFieldableEdgeEntityBase implements TeamInterfa
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);
 
     $team_singular_label = \Drupal::entityTypeManager()
diff --git a/modules/apigee_edge_teams/src/Entity/TeamAccessHandler.php b/modules/apigee_edge_teams/src/Entity/TeamAccessHandler.php
index aa50517..d5d1a40 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamAccessHandler.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamAccessHandler.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity;
 
+use Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface;
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
@@ -37,16 +39,16 @@ final class TeamAccessHandler extends EntityAccessControlHandler implements Enti
   /**
    * The developer storage.
    *
-   * @var \Drupal\apigee_edge\Entity\Storage\DeveloperStorageInterface
+   * @var DeveloperStorageInterface
    */
   private $developerStorage;
 
   /**
    * TeamAccessHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
@@ -68,7 +70,7 @@ final class TeamAccessHandler extends EntityAccessControlHandler implements Enti
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = parent::checkAccess($entity, $operation, $account);
 
     if ($result->isNeutral()) {
@@ -84,7 +86,7 @@ final class TeamAccessHandler extends EntityAccessControlHandler implements Enti
         if ($account->isAuthenticated()) {
           // Grant access to the user if it is a member of the Team.
           // (Reminder, anonymous user can not be member of a team.
-          /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|null $developer */
+          /** @var DeveloperInterface|null $developer */
           $developer = $this->developerStorage->load($account->getEmail());
           if ($developer && in_array($entity->id(), $developer->getCompanies())) {
             $result = AccessResult::allowed();
diff --git a/modules/apigee_edge_teams/src/Entity/TeamApp.php b/modules/apigee_edge_teams/src/Entity/TeamApp.php
index c623e13..9d6b7f3 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamApp.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamApp.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Entity;
 
+use Apigee\Edge\Api\Management\Entity\CompanyAppInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
 use Apigee\Edge\Api\Management\Entity\CompanyApp;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Drupal\apigee_edge\Entity\App;
@@ -87,7 +89,7 @@ class TeamApp extends App implements TeamAppInterface {
   /**
    * The decorated company app entity from the SDK.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\CompanyApp
+   * @var CompanyApp
    */
   protected $decorated;
 
@@ -103,7 +105,7 @@ class TeamApp extends App implements TeamAppInterface {
    *   The SDK entity that this Drupal entity decorates.
    */
   public function __construct(array $values, ?string $entity_type = NULL, ?EdgeEntityInterface $decorated = NULL) {
-    /** @var \Apigee\Edge\Api\Management\Entity\CompanyAppInterface $decorated */
+    /** @var CompanyAppInterface $decorated */
     $entity_type = $entity_type ?? 'team_app';
     parent::__construct($values, $entity_type, $decorated);
   }
@@ -157,7 +159,7 @@ class TeamApp extends App implements TeamAppInterface {
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);
     $team_app_singular_label = \Drupal::entityTypeManager()->getDefinition('team_app')->getSingularLabel();
     $team_app_singular_label = mb_convert_case($team_app_singular_label, MB_CASE_TITLE);
diff --git a/modules/apigee_edge_teams/src/Entity/TeamAppAccessHandler.php b/modules/apigee_edge_teams/src/Entity/TeamAppAccessHandler.php
index 0e75975..24692d5 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamAppAccessHandler.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamAppAccessHandler.php
@@ -40,34 +40,34 @@ final class TeamAppAccessHandler extends EntityAccessControlHandler implements E
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * The team permissions handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;
 
   /**
    * TeamAppAccessHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permissions handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, TeamPermissionHandlerInterface $team_permission_handler, RouteMatchInterface $route_match) {
@@ -93,13 +93,13 @@ final class TeamAppAccessHandler extends EntityAccessControlHandler implements E
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $entity */
+    /** @var TeamAppInterface $entity */
     $result = parent::checkAccess($entity, $operation, $account);
 
     if ($result->isNeutral()) {
       $result = $this->checkAccessByPermissions($account);
       if ($result->isNeutral()) {
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+        /** @var TeamInterface $team */
         $team = $this->entityTypeManager->getStorage('team')->load($entity->getCompanyName());
         if ($team) {
           // The developer is not member of the team.
@@ -145,10 +145,10 @@ final class TeamAppAccessHandler extends EntityAccessControlHandler implements E
   /**
    * Performs access check based on a user's site-wide permissions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   private function checkAccessByPermissions(AccountInterface $account): AccessResultInterface {
@@ -164,15 +164,15 @@ final class TeamAppAccessHandler extends EntityAccessControlHandler implements E
   /**
    * Performs access check based on a user's team-level permissions.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team that owns the app.
    * @param string $operation
    *   The entity operation on a team app: view, create, delete, update
    *   analytics, add_api_key, delete_api_key or revoke_api_key.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   private function checkAccessByTeamMemberPermissions(TeamInterface $team, string $operation, AccountInterface $account): AccessResultInterface {
@@ -207,9 +207,9 @@ final class TeamAppAccessHandler extends EntityAccessControlHandler implements E
    *
    * Adds necessary cache tags to the access result object.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $result
+   * @param AccessResultInterface $result
    *   The access result to be altered if needed.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to access check has happened.
    */
   private function processAccessResult(AccessResultInterface $result, AccountInterface $account) {
diff --git a/modules/apigee_edge_teams/src/Entity/TeamAppRouteProvider.php b/modules/apigee_edge_teams/src/Entity/TeamAppRouteProvider.php
index 1afef6a..2185068 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamAppRouteProvider.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamAppRouteProvider.php
@@ -44,7 +44,7 @@ class TeamAppRouteProvider extends AppRouteProvider {
     $collection = parent::getRoutes($entity_type);
     $entity_type_id = $entity_type->id();
 
-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     foreach ($collection as $route) {
       $this->alterRoutesWithAppName($route);
     }
@@ -100,10 +100,10 @@ class TeamAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the add-form route for team.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRouteForTeam(EntityTypeInterface $entity_type) {
@@ -121,10 +121,10 @@ class TeamAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the collection route for a team.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRouteByTeam(EntityTypeInterface $entity_type) {
@@ -141,10 +141,10 @@ class TeamAppRouteProvider extends AppRouteProvider {
   /**
    * Gets APpi Keys for team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getTeamApiKeysRoute(EntityTypeInterface $entity_type) {
@@ -161,10 +161,10 @@ class TeamAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the add-api-key-form route for a team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddApiKeyRoute(EntityTypeInterface $entity_type) {
@@ -182,10 +182,10 @@ class TeamAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the delete-api-key-form route for a team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteApiKeyRoute(EntityTypeInterface $entity_type) {
@@ -202,10 +202,10 @@ class TeamAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the revoke-api-key-form route for a team app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevokeApiKeyRoute(EntityTypeInterface $entity_type) {
@@ -222,7 +222,7 @@ class TeamAppRouteProvider extends AppRouteProvider {
   /**
    * Alters routers with {app} and not {team_app}.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   Route object.
    */
   private function alterRoutesWithAppName(Route $route): void {
diff --git a/modules/apigee_edge_teams/src/Entity/TeamInvitation.php b/modules/apigee_edge_teams/src/Entity/TeamInvitation.php
index e924b7e..e10f079 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamInvitation.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamInvitation.php
@@ -274,7 +274,7 @@ class TeamInvitation extends ContentEntityBase implements TeamInvitationInterfac
 
     $config = \Drupal::config('apigee_edge_teams.team_settings');
 
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = user_load_by_mail($this->getRecipient());
 
     if ($user && $config->get('team_invitation_auto_approve')) {
diff --git a/modules/apigee_edge_teams/src/Entity/TeamInvitationAccessControlHandler.php b/modules/apigee_edge_teams/src/Entity/TeamInvitationAccessControlHandler.php
index fe7c289..b07b487 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamInvitationAccessControlHandler.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamInvitationAccessControlHandler.php
@@ -37,16 +37,16 @@ final class TeamInvitationAccessControlHandler extends EntityAccessControlHandle
   /**
    * The team permissions handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;
 
   /**
    * TeamInvitationAccessControlHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permissions handler.
    */
   public function __construct(EntityTypeInterface $entity_type, TeamPermissionHandlerInterface $team_permission_handler) {
@@ -68,7 +68,7 @@ final class TeamInvitationAccessControlHandler extends EntityAccessControlHandle
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInvitation $entity */
+    /** @var TeamInvitation $entity */
     $account = $this->prepareUser($account);
 
     // Check if team exists.
diff --git a/modules/apigee_edge_teams/src/Entity/TeamInvitationInterface.php b/modules/apigee_edge_teams/src/Entity/TeamInvitationInterface.php
index fa15e10..59d2817 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamInvitationInterface.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamInvitationInterface.php
@@ -70,7 +70,7 @@ interface TeamInvitationInterface extends ContentEntityInterface, EntityOwnerInt
   /**
    * Returns the team entity.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInterface|null
+   * @return TeamInterface|null
    *   The team entity or null.
    */
   public function getTeam(): ?TeamInterface;
@@ -78,7 +78,7 @@ interface TeamInvitationInterface extends ContentEntityInterface, EntityOwnerInt
   /**
    * Sets the team of the invitation.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team entity.
    *
    * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
@@ -89,7 +89,7 @@ interface TeamInvitationInterface extends ContentEntityInterface, EntityOwnerInt
   /**
    * Returns the team roles.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[]|null
+   * @return TeamRoleInterface[]|null
    *   The team roles or null.
    */
   public function getTeamRoles(): ?array;
@@ -97,7 +97,7 @@ interface TeamInvitationInterface extends ContentEntityInterface, EntityOwnerInt
   /**
    * Sets the team roles of the invitation.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[] $team_roles
+   * @param TeamRoleInterface[] $team_roles
    *   An array of team roles.
    *
    * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
diff --git a/modules/apigee_edge_teams/src/Entity/TeamInvitationRouteProvider.php b/modules/apigee_edge_teams/src/Entity/TeamInvitationRouteProvider.php
index e76bdd0..bbd1042 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamInvitationRouteProvider.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamInvitationRouteProvider.php
@@ -60,10 +60,10 @@ class TeamInvitationRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the delete-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteFormRoute(EntityTypeInterface $entity_type) {
@@ -82,10 +82,10 @@ class TeamInvitationRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the notify-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getResentFormRoute(EntityTypeInterface $entity_type) {
@@ -104,10 +104,10 @@ class TeamInvitationRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the accept-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAcceptFormRoute(EntityTypeInterface $entity_type) {
@@ -126,10 +126,10 @@ class TeamInvitationRouteProvider extends DefaultHtmlRouteProvider {
   /**
    * Gets the decline-form route for team_invitation.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeclineFormRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProviderInterface.php b/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProviderInterface.php
index 2351742..ae1c69e 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProviderInterface.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamInvitationTitleProviderInterface.php
@@ -31,9 +31,9 @@ interface TeamInvitationTitleProviderInterface {
   /**
    * Provides the accept title for a team_invitation.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ -44,9 +44,9 @@ interface TeamInvitationTitleProviderInterface {
   /**
    * Provides the decline title for a team_invitation.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ -57,9 +57,9 @@ interface TeamInvitationTitleProviderInterface {
   /**
    * Provides the resend title for a team_invitation.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
diff --git a/modules/apigee_edge_teams/src/Entity/TeamMemberRole.php b/modules/apigee_edge_teams/src/Entity/TeamMemberRole.php
index b400970..d92197e 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamMemberRole.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamMemberRole.php
@@ -127,7 +127,7 @@ final class TeamMemberRole extends ContentEntityBase implements TeamMemberRoleIn
   public function getTeamRoles(): array {
     $roles = [];
 
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $reference */
+    /** @var TeamMemberRoleInterface $reference */
     foreach ($this->get('roles') as $reference) {
       // The team role has been deleted.
       if ($reference->entity === NULL) {
diff --git a/modules/apigee_edge_teams/src/Entity/TeamMemberRoleInterface.php b/modules/apigee_edge_teams/src/Entity/TeamMemberRoleInterface.php
index c2dcfcf..7641c81 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamMemberRoleInterface.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamMemberRoleInterface.php
@@ -33,7 +33,7 @@ interface TeamMemberRoleInterface extends FieldableEntityInterface, EntityChange
   /**
    * Returns the developer's user entity.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The developer's user entity or null if the entity is new and it has not
    *   been set yet.
    */
@@ -42,7 +42,7 @@ interface TeamMemberRoleInterface extends FieldableEntityInterface, EntityChange
   /**
    * Returns the team entity.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInterface|null
+   * @return TeamInterface|null
    *   The team entity or null if the entity is new and it has not been set
    *   yet.
    */
@@ -51,7 +51,7 @@ interface TeamMemberRoleInterface extends FieldableEntityInterface, EntityChange
   /**
    * Returns the team roles of the developer within the team.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[]
+   * @return TeamRoleInterface[]
    *   Array of team roles or an empty array if the entity is new and it has
    *   not been set yet.
    */
diff --git a/modules/apigee_edge_teams/src/Entity/TeamRoleAccessHandler.php b/modules/apigee_edge_teams/src/Entity/TeamRoleAccessHandler.php
index a02fd26..5c3d424 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamRoleAccessHandler.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamRoleAccessHandler.php
@@ -34,7 +34,7 @@ class TeamRoleAccessHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $entity */
+    /** @var TeamRoleInterface $entity */
     if ($operation === 'delete' && $entity->isLocked()) {
       return AccessResult::forbidden('Team role is locked.')->cachePerUser();
     }
diff --git a/modules/apigee_edge_teams/src/Entity/TeamRouteProvider.php b/modules/apigee_edge_teams/src/Entity/TeamRouteProvider.php
index 6957faa..af1f95a 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamRouteProvider.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamRouteProvider.php
@@ -97,10 +97,10 @@ class TeamRouteProvider extends EdgeEntityRouteProvider {
   /**
    * Gets the list team members route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getListTeamMembersRoute(EntityTypeInterface $entity_type) {
@@ -120,10 +120,10 @@ class TeamRouteProvider extends EdgeEntityRouteProvider {
   /**
    * Gets the add team members route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddTeamMembersRoute(EntityTypeInterface $entity_type) {
@@ -143,10 +143,10 @@ class TeamRouteProvider extends EdgeEntityRouteProvider {
   /**
    * Gets the edit team member route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEditTeamMemberRoute(EntityTypeInterface $entity_type) {
@@ -176,10 +176,10 @@ class TeamRouteProvider extends EdgeEntityRouteProvider {
   /**
    * Gets the remove team member route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRemoveTeamMemberRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/apigee_edge_teams/src/Entity/TeamRoutingHelperTrait.php b/modules/apigee_edge_teams/src/Entity/TeamRoutingHelperTrait.php
index 0fca77d..355545e 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamRoutingHelperTrait.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamRoutingHelperTrait.php
@@ -30,7 +30,7 @@ trait TeamRoutingHelperTrait {
   /**
    * If route contains the {team} parameter add required changes to the route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to be checked and altered if needed.
    */
   private function ensureTeamParameter(Route $route) {
diff --git a/modules/apigee_edge_teams/src/Entity/TeamTitleProvider.php b/modules/apigee_edge_teams/src/Entity/TeamTitleProvider.php
index ad83824..bc4cc8a 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamTitleProvider.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamTitleProvider.php
@@ -32,9 +32,9 @@ class TeamTitleProvider extends EdgeEntityTitleProvider {
   /**
    * Provides a title for the team members listing page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
diff --git a/modules/apigee_edge_teams/src/Entity/TeamViewBuilder.php b/modules/apigee_edge_teams/src/Entity/TeamViewBuilder.php
index 41eaae5..01e92a0 100644
--- a/modules/apigee_edge_teams/src/Entity/TeamViewBuilder.php
+++ b/modules/apigee_edge_teams/src/Entity/TeamViewBuilder.php
@@ -38,24 +38,24 @@ class TeamViewBuilder extends EdgeEntityViewBuilder {
   /**
    * The 'apigee_edge_teams.team_settings' config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * TeamViewBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The 'apigee_edge_teams.team_settings' config.
-   * @param \Drupal\Core\Theme\Registry|null $theme_registry
+   * @param Registry|null $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null $entity_display_repository
+   * @param EntityDisplayRepositoryInterface|null $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Config $config, Registry $theme_registry = NULL, EntityDisplayRepositoryInterface $entity_display_repository = NULL) {
diff --git a/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php b/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
index 1193e69..066fea6 100644
--- a/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
+++ b/modules/apigee_edge_teams/src/Event/TeamInvitationEvent.php
@@ -31,14 +31,14 @@ class TeamInvitationEvent extends Event implements TeamInvitationEventInterface
   /**
    * The team_invitation entity.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
+   * @var TeamInvitationInterface
    */
   protected $teamInvitation;
 
   /**
    * TeamInvitationEvent constructor.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation
+   * @param TeamInvitationInterface $team_invitation
    *   The team invitation.
    */
   public function __construct(TeamInvitationInterface $team_invitation) {
diff --git a/modules/apigee_edge_teams/src/Event/TeamInvitationEventInterface.php b/modules/apigee_edge_teams/src/Event/TeamInvitationEventInterface.php
index ce2c33d..bbf0c5d 100644
--- a/modules/apigee_edge_teams/src/Event/TeamInvitationEventInterface.php
+++ b/modules/apigee_edge_teams/src/Event/TeamInvitationEventInterface.php
@@ -30,7 +30,7 @@ interface TeamInvitationEventInterface {
   /**
    * Returns the team_invitation entity.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface
+   * @return TeamInvitationInterface
    *   The team invitation.
    */
   public function getTeamInvitation(): TeamInvitationInterface;
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamAppFieldConfigListAlterEventSubscriber.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamAppFieldConfigListAlterEventSubscriber.php
index 0e6ec00..8907511 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamAppFieldConfigListAlterEventSubscriber.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamAppFieldConfigListAlterEventSubscriber.php
@@ -33,14 +33,14 @@ final class TeamAppFieldConfigListAlterEventSubscriber implements EventSubscribe
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   private $formBuilder;
 
   /**
    * TeamAppFieldConfigListAlterEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(FormBuilderInterface $form_builder) {
@@ -59,7 +59,7 @@ final class TeamAppFieldConfigListAlterEventSubscriber implements EventSubscribe
   /**
    * Alters the field config UI page.
    *
-   * @param \Drupal\apigee_edge\Event\EdgeEntityFieldConfigListAlterEvent $event
+   * @param EdgeEntityFieldConfigListAlterEvent $event
    *   The field config list alter event.
    */
   public function alterPage(EdgeEntityFieldConfigListAlterEvent $event) {
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
index e0e1c7a..66121aa 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamInactiveStatusSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\EventSubscriber;
 
+use Drupal\Core\Controller\ControllerResolverInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -40,14 +41,14 @@ class TeamInactiveStatusSubscriber implements EventSubscriberInterface {
   /**
    * The class resolver service.
    *
-   * @var \Drupal\Core\Controller\ControllerResolverInterface
+   * @var ControllerResolverInterface
    */
   protected $classResolver;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -61,20 +62,20 @@ class TeamInactiveStatusSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * TeamInactiveStatusSubscriber constructor.
    *
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    * @param array $main_content_renderers
    *   The available main content renderer service IDs.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(ClassResolverInterface $class_resolver, RouteMatchInterface $route_match, array $main_content_renderers, AccountInterface $current_user) {
@@ -87,7 +88,7 @@ class TeamInactiveStatusSubscriber implements EventSubscriberInterface {
   /**
    * Display an error message on inactive team routes.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event) {
@@ -95,7 +96,7 @@ class TeamInactiveStatusSubscriber implements EventSubscriberInterface {
       return;
     }
 
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     $team = $this->routeMatch->getParameter('team');
     if (!$team || $team->getStatus() !== TeamInterface::STATUS_INACTIVE) {
       return;
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationQueryAccessSubscriber.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationQueryAccessSubscriber.php
index 2739ee0..c6721c3 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationQueryAccessSubscriber.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationQueryAccessSubscriber.php
@@ -32,14 +32,14 @@ class TeamInvitationQueryAccessSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * TeamInvitationQueryAccessSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -58,7 +58,7 @@ class TeamInvitationQueryAccessSubscriber implements EventSubscriberInterface {
   /**
    * Modifies the access conditions for team_invitation.
    *
-   * @param \Drupal\entity\QueryAccess\QueryAccessEvent $event
+   * @param QueryAccessEvent $event
    *   The event.
    */
   public function onQueryAccess(QueryAccessEvent $event) {
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationSubscriber.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationSubscriber.php
index c7666e3..0b0bda1 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationSubscriber.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamInvitationSubscriber.php
@@ -20,6 +20,9 @@
 
 namespace Drupal\apigee_edge_teams\EventSubscriber;
 
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
+use Drupal\user\UserInterface;
+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRole;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\Event\TeamInvitationEventInterface;
@@ -39,48 +42,48 @@ class TeamInvitationSubscriber implements EventSubscriberInterface {
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The team membership manager.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The team_member_role storage handler.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface
+   * @var TeamMemberRoleStorageInterface
    */
   protected $teamMemberRoleStorage;
 
   /**
    * The team_invitation notifier service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface
+   * @var TeamInvitationNotifierInterface
    */
   protected $teamInvitationNotifier;
 
   /**
    * TeamInvitationSubscriber constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger channel.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager.
-   * @param \Drupal\apigee_edge_teams\TeamInvitationNotifierInterface $team_invitation_notifier
+   * @param TeamInvitationNotifierInterface $team_invitation_notifier
    *   The team_invitation notifier service.
    */
   public function __construct(LoggerChannelInterface $logger, EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, TeamInvitationNotifierInterface $team_invitation_notifier) {
@@ -103,7 +106,7 @@ class TeamInvitationSubscriber implements EventSubscriberInterface {
   /**
    * Callback for on created event.
    *
-   * @param \Drupal\apigee_edge_teams\Event\TeamInvitationEventInterface $event
+   * @param TeamInvitationEventInterface $event
    *   The event.
    */
   public function onCreated(TeamInvitationEventInterface $event) {
@@ -120,7 +123,7 @@ class TeamInvitationSubscriber implements EventSubscriberInterface {
   /**
    * Callback for on accepted event.
    *
-   * @param \Drupal\apigee_edge_teams\Event\TeamInvitationEventInterface $event
+   * @param TeamInvitationEventInterface $event
    *   The event.
    */
   public function onAccepted(TeamInvitationEventInterface $event) {
@@ -154,7 +157,7 @@ class TeamInvitationSubscriber implements EventSubscriberInterface {
         return $team_member_role->id();
       }, $team_invitation->getTeamRoles());
 
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = user_load_by_mail($team_invitation->getRecipient());
 
       if (!$user) {
@@ -164,7 +167,7 @@ class TeamInvitationSubscriber implements EventSubscriberInterface {
         return;
       }
 
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface $team_member_roles */
+      /** @var TeamMemberRoleInterface $team_member_roles */
       $team_member_roles = $this->teamMemberRoleStorage->loadByDeveloperAndTeam($user, $team);
       if ($team_member_roles !== NULL) {
         // It could happen the a developer got removed from a team (company)
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
index 2226d4e..19d9e32 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamMemberApiProductAccessHandlerCacheReset.php
@@ -37,14 +37,14 @@ final class TeamMemberApiProductAccessHandlerCacheReset implements EventSubscrib
   /**
    * The team member api product access handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface
+   * @var TeamMemberApiProductAccessHandlerInterface
    */
   private $teamMemberApiProductAccessHandler;
 
   /**
    * TeamApiProductAccessCacheReset constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
+   * @param TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler
    *   The team member api product access handler.
    */
   public function __construct(TeamMemberApiProductAccessHandlerInterface $team_member_api_product_access_handler) {
@@ -67,7 +67,7 @@ final class TeamMemberApiProductAccessHandlerCacheReset implements EventSubscrib
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Contracts\EventDispatcher\Event $event
+   * @param Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
diff --git a/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php b/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
index 48936c3..e679cdd 100644
--- a/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
+++ b/modules/apigee_edge_teams/src/EventSubscriber/TeamStatusWarningSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\EventSubscriber;
 
+use Drupal\apigee_edge_teams\Entity\TeamAppInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -42,45 +43,45 @@ class TeamStatusWarningSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * TeamStatusWarningSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translations service.
    */
   public function __construct(AccountInterface $current_user, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, MessengerInterface $messenger, TranslationInterface $string_translation) {
@@ -94,18 +95,18 @@ class TeamStatusWarningSubscriber implements EventSubscriberInterface {
   /**
    * Display's a warning message if team's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event) {
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos($this->routeMatch->getRouteName(), 'entity.team_app.') === 0) {
       // Team is available in most of the team app routes as a route parameter.
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface|NULL $team */
+      /** @var TeamInterface|NULL $team */
       $team = $this->routeMatch->getParameter('team');
 
       if ($team === NULL) {
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamAppInterface $app */
+        /** @var TeamAppInterface $app */
         $app = $this->routeMatch->getParameter('team_app') ?? $this->routeMatch->getParameter('app');
         if ($app) {
           $team = $this->entityTypeManager->getStorage('team')->load($app->getCompanyName());
diff --git a/modules/apigee_edge_teams/src/Form/AddTeamMembersForm.php b/modules/apigee_edge_teams/src/Form/AddTeamMembersForm.php
index 6f2b317..6e6b844 100644
--- a/modules/apigee_edge_teams/src/Form/AddTeamMembersForm.php
+++ b/modules/apigee_edge_teams/src/Form/AddTeamMembersForm.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Form;
 
+use Drupal\user\UserStorageInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
@@ -36,30 +38,30 @@ class AddTeamMembersForm extends TeamMembersFormBase {
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * The team invitation storage.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamInvitationStorageInterface
+   * @var TeamInvitationStorageInterface
    */
   protected $teamInvitationStorage;
 
   /**
    * AddTeamMemberForms constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/apigee_edge_teams/src/Form/EditTeamMemberForm.php b/modules/apigee_edge_teams/src/Form/EditTeamMemberForm.php
index 1f7ed9a..b99c312 100644
--- a/modules/apigee_edge_teams/src/Form/EditTeamMemberForm.php
+++ b/modules/apigee_edge_teams/src/Form/EditTeamMemberForm.php
@@ -34,7 +34,7 @@ class EditTeamMemberForm extends TeamMembersFormBase {
   /**
    * The developer from the route.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   protected $developer;
 
diff --git a/modules/apigee_edge_teams/src/Form/RemoveTeamMemberForm.php b/modules/apigee_edge_teams/src/Form/RemoveTeamMemberForm.php
index c6ac860..7dc06f4 100644
--- a/modules/apigee_edge_teams/src/Form/RemoveTeamMemberForm.php
+++ b/modules/apigee_edge_teams/src/Form/RemoveTeamMemberForm.php
@@ -20,6 +20,9 @@
 
 namespace Drupal\apigee_edge_teams\Form;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\user\UserStorageInterface;
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
@@ -37,44 +40,44 @@ class RemoveTeamMemberForm extends ConfirmFormBase {
   /**
    * The team from the route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
 
   /**
    * The developer from the route.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   protected $developer;
 
   /**
    * The team entity type definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $teamEntityType;
 
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * RemoveTeamMemberForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager) {
@@ -186,7 +189,7 @@ class RemoveTeamMemberForm extends ConfirmFormBase {
     // @see \Drupal\apigee_edge_teams\Controller\TeamMembersList::buildRow()
     $users = $this->userStorage->loadByProperties(['mail' => $this->developer->getEmail()]);
     if (!empty($users)) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = reset($users);
       $developer_label = $user->label();
     }
diff --git a/modules/apigee_edge_teams/src/Form/TeamAppApiKeyAddForm.php b/modules/apigee_edge_teams/src/Form/TeamAppApiKeyAddForm.php
index 8a91ff3..5c6d641 100644
--- a/modules/apigee_edge_teams/src/Form/TeamAppApiKeyAddForm.php
+++ b/modules/apigee_edge_teams/src/Form/TeamAppApiKeyAddForm.php
@@ -36,7 +36,7 @@ class TeamAppApiKeyAddForm extends AppApiKeyAddFormBase {
   /**
    * The team from route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
 
diff --git a/modules/apigee_edge_teams/src/Form/TeamMembersFormBase.php b/modules/apigee_edge_teams/src/Form/TeamMembersFormBase.php
index 21eb2cb..7d4afeb 100644
--- a/modules/apigee_edge_teams/src/Form/TeamMembersFormBase.php
+++ b/modules/apigee_edge_teams/src/Form/TeamMembersFormBase.php
@@ -20,6 +20,9 @@
 
 namespace Drupal\apigee_edge_teams\Form;
 
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorage;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -33,28 +36,28 @@ abstract class TeamMembersFormBase extends FormBase {
   /**
    * The team from the route.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\TeamInterface
+   * @var TeamInterface
    */
   protected $team;
 
   /**
    * Team role storage.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface
+   * @var TeamRoleStorageInterface
    */
   protected $teamRoleStorage;
 
   /**
    * Team member role storage.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorage
+   * @var TeamMemberRoleStorage
    */
   protected $teamMemberRoleStorage;
 
   /**
    * TeamMembersFormBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/apigee_edge_teams/src/Form/TeamPermissionsForm.php b/modules/apigee_edge_teams/src/Form/TeamPermissionsForm.php
index 78cb75a..ae21260 100644
--- a/modules/apigee_edge_teams/src/Form/TeamPermissionsForm.php
+++ b/modules/apigee_edge_teams/src/Form/TeamPermissionsForm.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams\Form;
 
+use Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\TeamPermissionHandlerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -41,23 +43,23 @@ class TeamPermissionsForm extends FormBase {
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * TeamPermissionsForm constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permissions
+   * @param TeamPermissionHandlerInterface $team_permissions
    *   The team permission handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(TeamPermissionHandlerInterface $team_permissions, EntityTypeManagerInterface $entity_type_manager) {
@@ -205,7 +207,7 @@ class TeamPermissionsForm extends FormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->configFactory()->getEditable('apigee_edge_teams.team_settings')->set('non_member_team_apps_visible_api_products', array_keys(array_filter($form_state->getValue('non_member_team_apps_visible_api_products', []))))->save();
 
-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamRoleStorageInterface $storage */
+    /** @var TeamRoleStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('team_role');
     foreach ($form_state->getValue('role_names') as $role_name => $name) {
       $storage->changePermissions($role_name, (array) $form_state->getValue($role_name));
@@ -217,7 +219,7 @@ class TeamPermissionsForm extends FormBase {
   /**
    * Gets the team roles to display in this form.
    *
-   * @return \Drupal\apigee_edge_teams\Entity\TeamRoleInterface[]
+   * @return TeamRoleInterface[]
    *   Array of team roles.
    */
   protected function getTeamRoles(): array {
diff --git a/modules/apigee_edge_teams/src/ParamConverter/TeamAppNameConverter.php b/modules/apigee_edge_teams/src/ParamConverter/TeamAppNameConverter.php
index 73546cb..18efa83 100644
--- a/modules/apigee_edge_teams/src/ParamConverter/TeamAppNameConverter.php
+++ b/modules/apigee_edge_teams/src/ParamConverter/TeamAppNameConverter.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\ParamConverter;
 
+use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge\Entity\Storage\AppStorage;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ -37,23 +38,23 @@ final class TeamAppNameConverter implements ParamConverterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;
 
   /**
    * Constructs a TeamAppNameConverter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger) {
@@ -69,7 +70,7 @@ final class TeamAppNameConverter implements ParamConverterInterface {
       return NULL;
     }
     $entity = NULL;
-    /** @var \Drupal\apigee_edge_teams\Entity\TeamInterface $team */
+    /** @var TeamInterface $team */
     // If {team} parameter is before the {team_app} in the route then
     // entity parameter converter should have already up-casted it to
     // a team object if not then let's try to up-cast it here.
diff --git a/modules/apigee_edge_teams/src/Plugin/Block/TeamContextSwitcherBlock.php b/modules/apigee_edge_teams/src/Plugin/Block/TeamContextSwitcherBlock.php
index 95d3113..b41cfbe 100644
--- a/modules/apigee_edge_teams/src/Plugin/Block/TeamContextSwitcherBlock.php
+++ b/modules/apigee_edge_teams/src/Plugin/Block/TeamContextSwitcherBlock.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Plugin\Block;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\apigee_edge_teams\TeamContextManagerInterface;
 use Drupal\apigee_edge_teams\TeamMembershipManagerInterface;
 use Drupal\Core\Access\AccessResult;
@@ -47,35 +48,35 @@ class TeamContextSwitcherBlock extends BlockBase implements ContainerFactoryPlug
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Apigee team membership manager.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   protected $teamMembershipManager;
 
   /**
    * The Apigee team context manager.
    *
-   * @var \Drupal\apigee_edge_teams\TeamContextManagerInterface
+   * @var TeamContextManagerInterface
    */
   protected $teamContextManager;
 
@@ -88,15 +89,15 @@ class TeamContextSwitcherBlock extends BlockBase implements ContainerFactoryPlug
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The Apigee team membership manager.
-   * @param \Drupal\apigee_edge_teams\TeamContextManagerInterface $team_context_manager
+   * @param TeamContextManagerInterface $team_context_manager
    *   The Apigee team context manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $account, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, TeamMembershipManagerInterface $team_membership_manager, TeamContextManagerInterface $team_context_manager) {
@@ -153,7 +154,7 @@ class TeamContextSwitcherBlock extends BlockBase implements ContainerFactoryPlug
 
     $links = [];
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       // No link if we are on the current context route.
       if ($current_context instanceof EntityInterface && $current_context->getEntityTypeId() === $entity->getEntityTypeId() && $current_context->id() === $entity->id()) {
@@ -206,7 +207,7 @@ class TeamContextSwitcherBlock extends BlockBase implements ContainerFactoryPlug
    * @return array
    *   An array of additional links keyed with the route name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getAdditionalLinks() {
     return [
diff --git a/modules/apigee_edge_teams/src/Plugin/EntityReferenceSelection/TeamMembersSelection.php b/modules/apigee_edge_teams/src/Plugin/EntityReferenceSelection/TeamMembersSelection.php
index 02e8d12..21cb796 100644
--- a/modules/apigee_edge_teams/src/Plugin/EntityReferenceSelection/TeamMembersSelection.php
+++ b/modules/apigee_edge_teams/src/Plugin/EntityReferenceSelection/TeamMembersSelection.php
@@ -52,21 +52,21 @@ class TeamMembersSelection extends UserSelection {
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;
 
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   private $developerController;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
@@ -79,19 +79,19 @@ class TeamMembersSelection extends UserSelection {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, Connection $connection, TeamMembershipManagerInterface $team_membership_manager, DeveloperControllerInterface $developer_controller, LoggerInterface $logger) {
diff --git a/modules/apigee_edge_teams/src/Plugin/Menu/AddAppForTeamLocalAction.php b/modules/apigee_edge_teams/src/Plugin/Menu/AddAppForTeamLocalAction.php
index 4e213a9..83dcb9a 100644
--- a/modules/apigee_edge_teams/src/Plugin/Menu/AddAppForTeamLocalAction.php
+++ b/modules/apigee_edge_teams/src/Plugin/Menu/AddAppForTeamLocalAction.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Plugin\Menu;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Menu\LocalActionDefault;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ -38,7 +39,7 @@ class AddAppForTeamLocalAction extends LocalActionDefault {
   /**
    * The team app entity type definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $teamAppEntity;
 
@@ -51,11 +52,11 @@ class AddAppForTeamLocalAction extends LocalActionDefault {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider to load routes by name.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/modules/apigee_edge_teams/src/Plugin/Menu/TeamAppsLocalTask.php b/modules/apigee_edge_teams/src/Plugin/Menu/TeamAppsLocalTask.php
index e0403a5..1948902 100644
--- a/modules/apigee_edge_teams/src/Plugin/Menu/TeamAppsLocalTask.php
+++ b/modules/apigee_edge_teams/src/Plugin/Menu/TeamAppsLocalTask.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams\Plugin\Menu;
 
+use Drupal\apigee_edge_teams\Entity\Storage\TeamAppStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Menu\LocalTaskDefault;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -34,7 +35,7 @@ final class TeamAppsLocalTask extends LocalTaskDefault implements ContainerFacto
   /**
    * The Team App entity type definition.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Storage\TeamAppStorageInterface|\Drupal\Core\Entity\EntityTypeInterface
+   * @var TeamAppStorageInterface|EntityTypeInterface
    */
   private $teamAppDefinition;
 
@@ -47,7 +48,7 @@ final class TeamAppsLocalTask extends LocalTaskDefault implements ContainerFacto
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $team_app_definition
+   * @param EntityTypeInterface $team_app_definition
    *   The Team App entity definition.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeInterface $team_app_definition) {
diff --git a/modules/apigee_edge_teams/src/Plugin/views/access/TeamPermission.php b/modules/apigee_edge_teams/src/Plugin/views/access/TeamPermission.php
index 5c5938d..da8488b 100644
--- a/modules/apigee_edge_teams/src/Plugin/views/access/TeamPermission.php
+++ b/modules/apigee_edge_teams/src/Plugin/views/access/TeamPermission.php
@@ -47,14 +47,14 @@ class TeamPermission extends AccessPluginBase {
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   protected $teamPermissionHandler;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -67,9 +67,9 @@ class TeamPermission extends AccessPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TeamPermissionHandlerInterface $team_permission_handler, RouteMatchInterface $route_match) {
diff --git a/modules/apigee_edge_teams/src/Routing/TeamAppDevelRouteFixerSubscriber.php b/modules/apigee_edge_teams/src/Routing/TeamAppDevelRouteFixerSubscriber.php
index 0355309..f6be0cf 100644
--- a/modules/apigee_edge_teams/src/Routing/TeamAppDevelRouteFixerSubscriber.php
+++ b/modules/apigee_edge_teams/src/Routing/TeamAppDevelRouteFixerSubscriber.php
@@ -37,14 +37,14 @@ final class TeamAppDevelRouteFixerSubscriber extends RouteSubscriberBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * TeamAppDevelRouteFixerSubscriber constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
diff --git a/modules/apigee_edge_teams/src/Structure/TeamPermission.php b/modules/apigee_edge_teams/src/Structure/TeamPermission.php
index 2b4452d..0b6ad5e 100644
--- a/modules/apigee_edge_teams/src/Structure/TeamPermission.php
+++ b/modules/apigee_edge_teams/src/Structure/TeamPermission.php
@@ -37,21 +37,21 @@ final class TeamPermission {
   /**
    * The human readable name of the team permission.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   private $label;
 
   /**
    * The optional description of the team permission.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @var TranslatableMarkup|null
    */
   private $description;
 
   /**
    * The category of the team permission.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   private $category;
 
@@ -60,14 +60,14 @@ final class TeamPermission {
    *
    * @param string $name
    *   The unique machine name of the team permission.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $label
+   * @param TranslatableMarkup $label
    *   The human-readable name of the team permission, to be shown on the
    *   team permission administration page.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $category
+   * @param TranslatableMarkup $category
    *   The category that the team permission belongs (ex.: "Team Apps", the
    *   name of the provider module, etc.), to be shown on the team permission
    *   administration page.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $description
+   * @param TranslatableMarkup|null $description
    *   A description of what the team permission does, to be shown on the team
    *   permission administration page.
    */
@@ -91,7 +91,7 @@ final class TeamPermission {
   /**
    * Returns the human readable name of the team permission.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The human readable name of the permission.
    */
   public function getLabel(): TranslatableMarkup {
@@ -101,7 +101,7 @@ final class TeamPermission {
   /**
    * Returns the description of the team permission.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   The description of the permission, or NULL.
    */
   public function getDescription(): ?TranslatableMarkup {
@@ -111,7 +111,7 @@ final class TeamPermission {
   /**
    * Returns the category of the team permission.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The category of the team permission.
    */
   public function getCategory(): TranslatableMarkup {
diff --git a/modules/apigee_edge_teams/src/TeamContextManager.php b/modules/apigee_edge_teams/src/TeamContextManager.php
index d2e9f2c..c709e9c 100644
--- a/modules/apigee_edge_teams/src/TeamContextManager.php
+++ b/modules/apigee_edge_teams/src/TeamContextManager.php
@@ -35,14 +35,14 @@ class TeamContextManager implements TeamContextManagerInterface {
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * TeamContextManager constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
diff --git a/modules/apigee_edge_teams/src/TeamContextManagerInterface.php b/modules/apigee_edge_teams/src/TeamContextManagerInterface.php
index ff39b95..767b53b 100644
--- a/modules/apigee_edge_teams/src/TeamContextManagerInterface.php
+++ b/modules/apigee_edge_teams/src/TeamContextManagerInterface.php
@@ -41,7 +41,7 @@ interface TeamContextManagerInterface {
   /**
    * Determines the current context from the route.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The current entity or NULL.
    */
   public function getCurrentContextEntity(): ?EntityInterface;
@@ -49,10 +49,10 @@ interface TeamContextManagerInterface {
   /**
    * Returns the destination url for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The developer or team entity.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The destination URL.
    */
   public function getDestinationUrlForEntity(EntityInterface $entity): ?Url;
@@ -60,7 +60,7 @@ interface TeamContextManagerInterface {
   /**
    * Gets the corresponding route name for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The developer or team entity.
    *
    * @return null|string
diff --git a/modules/apigee_edge_teams/src/TeamInvitationNotifierEmail.php b/modules/apigee_edge_teams/src/TeamInvitationNotifierEmail.php
index d5db4da..5e94d4f 100644
--- a/modules/apigee_edge_teams/src/TeamInvitationNotifierEmail.php
+++ b/modules/apigee_edge_teams/src/TeamInvitationNotifierEmail.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInvitationInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
@@ -32,23 +33,23 @@ class TeamInvitationNotifierEmail implements TeamInvitationNotifierInterface {
   /**
    * The mail service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * TeamInvitationNotifierEmail constructor.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager) {
@@ -68,7 +69,7 @@ class TeamInvitationNotifierEmail implements TeamInvitationNotifierInterface {
       'user' => NULL,
     ];
 
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = user_load_by_mail($email);
     if ($user) {
       $langcode = $user->getPreferredLangcode();
diff --git a/modules/apigee_edge_teams/src/TeamInvitationNotifierInterface.php b/modules/apigee_edge_teams/src/TeamInvitationNotifierInterface.php
index ab37f72..1ab6d12 100644
--- a/modules/apigee_edge_teams/src/TeamInvitationNotifierInterface.php
+++ b/modules/apigee_edge_teams/src/TeamInvitationNotifierInterface.php
@@ -30,7 +30,7 @@ interface TeamInvitationNotifierInterface {
   /**
    * Sends notification for the provided team_invitation.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInvitationInterface $team_invitation
+   * @param TeamInvitationInterface $team_invitation
    *   The team_invitation entity.
    *
    * @return bool
diff --git a/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandler.php b/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandler.php
index 22e2748..c925f8c 100644
--- a/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandler.php
+++ b/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandler.php
@@ -38,7 +38,7 @@ final class TeamMemberApiProductAccessHandler implements TeamMemberApiProductAcc
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
@@ -52,34 +52,34 @@ final class TeamMemberApiProductAccessHandler implements TeamMemberApiProductAcc
   /**
    * The team permission handler.
    *
-   * @var \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface
+   * @var TeamPermissionHandlerInterface
    */
   private $teamPermissionHandler;
 
   /**
    * The currently logged-in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;
 
   /**
    * TeamApiProductAccessHandler constructor.
    *
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\apigee_edge_teams\TeamPermissionHandlerInterface $team_permission_handler
+   * @param TeamPermissionHandlerInterface $team_permission_handler
    *   The team permission handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently logged-in user.
    */
   public function __construct(TeamMembershipManagerInterface $team_membership_manager, TeamPermissionHandlerInterface $team_permission_handler, ModuleHandlerInterface $module_handler, AccountInterface $current_user) {
@@ -143,17 +143,17 @@ final class TeamMemberApiProductAccessHandler implements TeamMemberApiProductAcc
   /**
    * Performs access checks.
    *
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'update', 'create',
    *   'delete' or 'assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The team member for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   private function checkAccess(ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account): AccessResultInterface {
@@ -178,10 +178,10 @@ final class TeamMemberApiProductAccessHandler implements TeamMemberApiProductAcc
    * - No modules say to deny access.
    * - At least one module says to grant access.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface[] $access
+   * @param AccessResultInterface[] $access
    *   An array of access results of the fired access hook.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The combined result of the various access checks' results. All their
    *   cacheability metadata is merged as well.
    *
@@ -193,7 +193,7 @@ final class TeamMemberApiProductAccessHandler implements TeamMemberApiProductAcc
       return AccessResult::neutral();
     }
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = array_shift($access);
     foreach ($access as $other) {
       $result = $result->orIf($other);
@@ -204,17 +204,17 @@ final class TeamMemberApiProductAccessHandler implements TeamMemberApiProductAcc
   /**
    * Tries to retrieve a previously cached access value from the static cache.
    *
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'update', 'create',
    *   'delete' or 'assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The team member for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|null
+   * @return AccessResultInterface|null
    *   The cached AccessResult, or NULL if there is no record for the given
    *   API Product, operation, and team and account in the cache.
    */
@@ -230,16 +230,16 @@ final class TeamMemberApiProductAccessHandler implements TeamMemberApiProductAcc
   /**
    * Statically caches whether the given user has access.
    *
-   * @param \Drupal\Core\Access\AccessResultInterface $access
+   * @param AccessResultInterface $access
    *   The access result.
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The entity operation. Usually one of 'view', 'update', 'create',
    *   'delete' or 'assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The team member for which to check access.
    */
   protected function setCache(AccessResultInterface $access, ApiProductInterface $api_product, string $operation, TeamInterface $team, AccountInterface $account): void {
diff --git a/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandlerInterface.php b/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandlerInterface.php
index c4fc60f..43b96fd 100644
--- a/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandlerInterface.php
+++ b/modules/apigee_edge_teams/src/TeamMemberApiProductAccessHandlerInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -36,20 +37,20 @@ interface TeamMemberApiProductAccessHandlerInterface {
   /**
    * Checks access to an operation on a given API product.
    *
-   * @param \Drupal\apigee_edge\Entity\ApiProductInterface $api_product
+   * @param ApiProductInterface $api_product
    *   The API Product entity for which to check access.
    * @param string $operation
    *   The operation access should be checked for.
    *   Usually one of "view", "view label", "update", "delete" or "assign".
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team for which to check access.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   (optional) The user for which to check access, default is the
    *   current user.
    * @param bool $return_as_object
    *   (optional) Defaults to FALSE.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   The access result. Returns a boolean if $return_as_object is FALSE (this
    *   is the default) and otherwise an AccessResultInterface object.
    *   When a boolean is returned, the result of AccessInterface::isAllowed() is
diff --git a/modules/apigee_edge_teams/src/TeamMembershipManager.php b/modules/apigee_edge_teams/src/TeamMembershipManager.php
index d451536..49c4919 100644
--- a/modules/apigee_edge_teams/src/TeamMembershipManager.php
+++ b/modules/apigee_edge_teams/src/TeamMembershipManager.php
@@ -20,6 +20,9 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface;
+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Apigee\Edge\Api\Management\Structure\CompanyMembership;
 use Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\EntityCacheAwareControllerInterface;
@@ -41,59 +44,59 @@ final class TeamMembershipManager implements TeamMembershipManagerInterface {
   /**
    * The company members controller factory service.
    *
-   * @var \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface
+   * @var CompanyMembersControllerFactoryInterface
    */
   private $companyMembersControllerFactory;
 
   /**
    * The developer companies cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompaniesCache;
 
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   private $developerController;
 
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   private $cacheTagsInvalidator;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * TeamMembershipManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\apigee_edge_teams\CompanyMembersControllerFactoryInterface $company_members_controller_factory
+   * @param CompanyMembersControllerFactoryInterface $company_members_controller_factory
    *   The company members controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   The developer companies cache.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CompanyMembersControllerFactoryInterface $company_members_controller_factory, DeveloperControllerInterface $developer_controller, DeveloperCompaniesCacheInterface $developer_companies_cache, CacheTagsInvalidatorInterface $cache_tags_invalidator, LoggerInterface $logger) {
@@ -131,9 +134,9 @@ final class TeamMembershipManager implements TeamMembershipManagerInterface {
    */
   public function removeMembers(string $team, array $developers): void {
     $controller = $this->companyMembersControllerFactory->companyMembersController($team);
-    /** @var \Drupal\apigee_edge_teams\Entity\Storage\TeamMemberRoleStorageInterface $team_member_role_storage */
+    /** @var TeamMemberRoleStorageInterface $team_member_role_storage */
     $team_member_role_storage = $this->entityTypeManager->getStorage('team_member_role');
-    /** @var \Drupal\user\UserInterface[] $users_by_mail */
+    /** @var UserInterface[] $users_by_mail */
     $users_by_mail = array_reduce($this->entityTypeManager->getStorage('user')->loadByProperties(['mail' => $developers]), function (array $carry, UserInterface $user) {
       $carry[$user->getEmail()] = $user;
       return $carry;
@@ -142,7 +145,7 @@ final class TeamMembershipManager implements TeamMembershipManagerInterface {
       $controller->removeMember($developer);
       // Remove team member's roles from Drupal.
       if (array_key_exists($developer, $users_by_mail)) {
-        /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface[] $team_member_roles_in_teams */
+        /** @var TeamMemberRoleInterface[] $team_member_roles_in_teams */
         $team_member_roles_in_teams = $team_member_role_storage->loadByDeveloper($users_by_mail[$developer]);
         foreach ($team_member_roles_in_teams as $team_member_roles_in_team) {
           try {
@@ -164,7 +167,7 @@ final class TeamMembershipManager implements TeamMembershipManagerInterface {
    * {@inheritdoc}
    */
   public function getTeams(string $developer): array {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $entity = $this->entityTypeManager->getStorage('developer')->load($developer);
     if ($entity === NULL) {
       throw new DeveloperDoesNotExistException($developer);
diff --git a/modules/apigee_edge_teams/src/TeamMembershipManagerInterface.php b/modules/apigee_edge_teams/src/TeamMembershipManagerInterface.php
index c65aa27..227a892 100644
--- a/modules/apigee_edge_teams/src/TeamMembershipManagerInterface.php
+++ b/modules/apigee_edge_teams/src/TeamMembershipManagerInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 /**
  * Base definition of the team membership manager service.
  *
@@ -69,7 +70,7 @@ interface TeamMembershipManagerInterface {
    * @return string[]
    *   Array of team names.
    *
-   * @throws \Drupal\apigee_edge\Exception\DeveloperDoesNotExistException
+   * @throws DeveloperDoesNotExistException
    *   If developer not found with id.
    */
   public function getTeams(string $developer): array;
diff --git a/modules/apigee_edge_teams/src/TeamPermissionHandler.php b/modules/apigee_edge_teams/src/TeamPermissionHandler.php
index cdb6b85..3ab6f4c 100644
--- a/modules/apigee_edge_teams/src/TeamPermissionHandler.php
+++ b/modules/apigee_edge_teams/src/TeamPermissionHandler.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\apigee_edge_teams\Entity\TeamRoleInterface;
 use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
@@ -76,14 +77,14 @@ final class TeamPermissionHandler implements TeamPermissionHandlerInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   private $classResolver;
 
@@ -94,34 +95,34 @@ final class TeamPermissionHandler implements TeamPermissionHandlerInterface {
    *
    * Use getYamlDiscovery() instead.
    *
-   * @var \Drupal\Core\Discovery\YamlDiscovery|null
+   * @var YamlDiscovery|null
    */
   private $yamlDiscovery;
 
   /**
    * The team membership manager service.
    *
-   * @var \Drupal\apigee_edge_teams\TeamMembershipManagerInterface
+   * @var TeamMembershipManagerInterface
    */
   private $teamMembershipManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * TeamPermissionHandler constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\apigee_edge_teams\TeamMembershipManagerInterface $team_membership_manager
+   * @param TeamMembershipManagerInterface $team_membership_manager
    *   The team membership manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ClassResolverInterface $class_resolver, TeamMembershipManagerInterface $team_membership_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -158,10 +159,10 @@ final class TeamPermissionHandler implements TeamPermissionHandlerInterface {
     // Only add team membership based permissions to the list if the developer
     // is still member of the team in Apigee Edge.
     if (in_array($team->id(), $developer_team_ids)) {
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamRoleInterface $member_role */
+      /** @var TeamRoleInterface $member_role */
       $member_role = $this->entityTypeManager->getStorage('team_role')->load(TeamRoleInterface::TEAM_MEMBER_ROLE);
       $permissions += $member_role->getPermissions();
-      /** @var \Drupal\apigee_edge_teams\Entity\TeamMemberRoleInterface|null $dev_team_role */
+      /** @var TeamMemberRoleInterface|null $dev_team_role */
       $dev_team_role = $this->entityTypeManager->getStorage('team_member_role')->loadByDeveloperAndTeam($account, $team);
       if ($dev_team_role) {
         foreach ($dev_team_role->getTeamRoles() as $role) {
@@ -185,7 +186,7 @@ final class TeamPermissionHandler implements TeamPermissionHandlerInterface {
   /**
    * Gets the YAML discovery.
    *
-   * @return \Drupal\Core\Discovery\YamlDiscovery
+   * @return YamlDiscovery
    *   The YAML discovery.
    */
   private function getYamlDiscovery(): YamlDiscovery {
@@ -198,10 +199,10 @@ final class TeamPermissionHandler implements TeamPermissionHandlerInterface {
   /**
    * Builds all team permissions provided by .team_permissions.yml files.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Array of team permissions.
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    *   If permission provider class does not implement
    *   DynamicTeamPermissionProviderInterface.
    * @throws \InvalidArgumentException
@@ -221,7 +222,7 @@ final class TeamPermissionHandler implements TeamPermissionHandlerInterface {
           // resolver.
           $permission_provider = $this->classResolver->getInstanceFromDefinition($fqcn);
           if ($permission_provider instanceof DynamicTeamPermissionProviderInterface) {
-            /** @var \Drupal\apigee_edge_teams\Structure\TeamPermission $dynamic_permission */
+            /** @var TeamPermission $dynamic_permission */
             foreach ($permission_provider->permissions() as $dynamic_permission) {
               $all_dynamic_permissions[$dynamic_permission->getName()] = $dynamic_permission;
             }
@@ -259,7 +260,7 @@ final class TeamPermissionHandler implements TeamPermissionHandlerInterface {
    * @param array $all_permissions
    *   The team permissions to be sorted.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Sorted team permissions.
    */
   protected function sortPermissions(array $all_permissions = []) {
diff --git a/modules/apigee_edge_teams/src/TeamPermissionHandlerInterface.php b/modules/apigee_edge_teams/src/TeamPermissionHandlerInterface.php
index 3383609..c7f7eaf 100644
--- a/modules/apigee_edge_teams/src/TeamPermissionHandlerInterface.php
+++ b/modules/apigee_edge_teams/src/TeamPermissionHandlerInterface.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge_teams;
 
+use Drupal\apigee_edge_teams\Structure\TeamPermission;
+use Drupal\apigee_edge_teams\Exception\InvalidArgumentException;
 use Drupal\apigee_edge_teams\Entity\TeamInterface;
 use Drupal\Core\Session\AccountInterface;
 
@@ -35,7 +37,7 @@ interface TeamPermissionHandlerInterface {
   /**
    * Gets all available team permissions.
    *
-   * @return \Drupal\apigee_edge_teams\Structure\TeamPermission[]
+   * @return TeamPermission[]
    *   Array of team permissions.
    */
   public function getPermissions(): array;
@@ -43,15 +45,15 @@ interface TeamPermissionHandlerInterface {
   /**
    * Returns team permissions of a developer within a team.
    *
-   * @param \Drupal\apigee_edge_teams\Entity\TeamInterface $team
+   * @param TeamInterface $team
    *   The team entity, the developer is not necessarily member of the team.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return array
    *   Array of team permissions names.
    *
-   * @throws \Drupal\apigee_edge_teams\Exception\InvalidArgumentException
+   * @throws InvalidArgumentException
    */
   public function getDeveloperPermissionsByTeam(TeamInterface $team, AccountInterface $account): array;
 
diff --git a/src/Access/AppAccessCheckByAppName.php b/src/Access/AppAccessCheckByAppName.php
index b59ddf2..ab7890f 100644
--- a/src/Access/AppAccessCheckByAppName.php
+++ b/src/Access/AppAccessCheckByAppName.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\apigee_edge\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -44,14 +46,14 @@ final class AppAccessCheckByAppName implements AccessInterface {
    *   _developer_app_access: 'view'
    * @endcode
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    *
    * @see \Drupal\Core\Entity\EntityAccessCheck
@@ -60,7 +62,7 @@ final class AppAccessCheckByAppName implements AccessInterface {
     $operation = $route->getRequirement('_app_access_check_by_app_name');
     // If $entity_type parameter is a valid entity, call its own access check.
     $parameters = $route_match->getParameters();
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $entity = $parameters->get('app');
     if ($entity) {
       return $entity->access($operation, $account, TRUE);
diff --git a/src/Access/AppsPageAccessCheck.php b/src/Access/AppsPageAccessCheck.php
index 139e586..8275782 100644
--- a/src/Access/AppsPageAccessCheck.php
+++ b/src/Access/AppsPageAccessCheck.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\apigee_edge\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -33,16 +35,16 @@ class AppsPageAccessCheck implements AccessInterface {
   /**
    * Grant access to the Apps page if user has any of the required permissions.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $route_match->getParameter('user');
     if ($user === NULL) {
       return AccessResult::forbidden('User is missing from route.');
@@ -56,16 +58,16 @@ class AppsPageAccessCheck implements AccessInterface {
   /**
    * Grant access to the user/[uid]/create-apps page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function createAppAccess(RouteMatchInterface $route_match, AccountInterface $account) {
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $route_match->getParameter('user');
     if ($user === NULL) {
       return AccessResult::forbidden('User is missing from route.');
diff --git a/src/CliService.php b/src/CliService.php
index 8f5f2ad..be80149 100644
--- a/src/CliService.php
+++ b/src/CliService.php
@@ -31,14 +31,14 @@ class CliService implements CliServiceInterface {
   /**
    * The service that makes calls to the Apigee API.
    *
-   * @var \Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliServiceInterface
+   * @var ApigeeEdgeManagementCliServiceInterface
    */
   private $apigeeEdgeManagementCliService;
 
   /**
    * CliService constructor.
    *
-   * @param \Drupal\apigee_edge\Command\Util\ApigeeEdgeManagementCliServiceInterface $apigeeEdgeManagementCliService
+   * @param ApigeeEdgeManagementCliServiceInterface $apigeeEdgeManagementCliService
    *   The ApigeeEdgeManagementCliService to make calls to Apigee Edge.
    */
   public function __construct(ApigeeEdgeManagementCliServiceInterface $apigeeEdgeManagementCliService) {
diff --git a/src/CliServiceInterface.php b/src/CliServiceInterface.php
index f5bee24..6bd4698 100644
--- a/src/CliServiceInterface.php
+++ b/src/CliServiceInterface.php
@@ -29,7 +29,7 @@ interface CliServiceInterface {
   /**
    * Handle the sync interaction.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
@@ -39,7 +39,7 @@ interface CliServiceInterface {
   /**
    * Create an Apigee role for Drupal use.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
diff --git a/src/Command/DrupalConsoleLog.php b/src/Command/DrupalConsoleLog.php
index fac7fbf..340265d 100644
--- a/src/Command/DrupalConsoleLog.php
+++ b/src/Command/DrupalConsoleLog.php
@@ -35,23 +35,23 @@ class DrupalConsoleLog implements LoggerInterface {
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $logMessageParser;
 
   /**
    * The logger that messages will be passed through to.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a DrupalConsoleLog object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $log_message_parser
+   * @param LogMessageParserInterface $log_message_parser
    *   The parser to use when extracting message variables.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger instance.
    */
   public function __construct(LogMessageParserInterface $log_message_parser, LoggerInterface $logger) {
diff --git a/src/Command/Util/ApigeeEdgeManagementCliService.php b/src/Command/Util/ApigeeEdgeManagementCliService.php
index 8a1c5f6..f22e641 100644
--- a/src/Command/Util/ApigeeEdgeManagementCliService.php
+++ b/src/Command/Util/ApigeeEdgeManagementCliService.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Command\Util;
 
+use GuzzleHttp\Client;
 use Drupal\Component\Utility\UrlHelper;
 use GuzzleHttp\ClientInterface;
 use Apigee\Edge\ClientInterface as ApigeeClientInterface;
@@ -34,7 +35,7 @@ class ApigeeEdgeManagementCliService implements ApigeeEdgeManagementCliServiceIn
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
@@ -119,7 +120,7 @@ class ApigeeEdgeManagementCliService implements ApigeeEdgeManagementCliServiceIn
   /**
    * Set default permissions for a role used for Drupal portal connections.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
@@ -202,7 +203,7 @@ class ApigeeEdgeManagementCliService implements ApigeeEdgeManagementCliServiceIn
    * @return bool
    *   Returns true if the role exists, or false if it doesn't.
    *
-   * @throws \GuzzleHttp\Exception\TransferException
+   * @throws TransferException
    */
   public function doesRoleExist(string $org, string $email, string $password, string $base_url, string $role_name) {
     $url = $base_url . '/o/' . $org . '/userroles/' . $role_name;
@@ -234,7 +235,7 @@ class ApigeeEdgeManagementCliService implements ApigeeEdgeManagementCliServiceIn
   /**
    * Validate the Apigee Edge org connection settings.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
@@ -295,9 +296,9 @@ class ApigeeEdgeManagementCliService implements ApigeeEdgeManagementCliServiceIn
   /**
    * Print out helpful information to user running command when error happens.
    *
-   * @param \GuzzleHttp\Exception\TransferException $exception
+   * @param TransferException $exception
    *   The exception thrown.
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
diff --git a/src/Command/Util/ApigeeEdgeManagementCliServiceInterface.php b/src/Command/Util/ApigeeEdgeManagementCliServiceInterface.php
index 4194b1b..722e98f 100644
--- a/src/Command/Util/ApigeeEdgeManagementCliServiceInterface.php
+++ b/src/Command/Util/ApigeeEdgeManagementCliServiceInterface.php
@@ -32,7 +32,7 @@ interface ApigeeEdgeManagementCliServiceInterface {
   /**
    * Create role in Apigee Edge for Drupal to use for Edge connection.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The IO interface of the CLI tool calling the method.
    * @param callable $t
    *   The translation function akin to t().
diff --git a/src/Commands/ApigeeEdgeCommands.php b/src/Commands/ApigeeEdgeCommands.php
index fc49d16..c2d37e3 100644
--- a/src/Commands/ApigeeEdgeCommands.php
+++ b/src/Commands/ApigeeEdgeCommands.php
@@ -31,14 +31,14 @@ class ApigeeEdgeCommands extends DrushCommands {
   /**
    * The interoperability cli service.
    *
-   * @var \Drupal\apigee_edge\CliServiceInterface
+   * @var CliServiceInterface
    */
   protected $cliService;
 
   /**
    * ApigeeEdgeCommands constructor.
    *
-   * @param \Drupal\apigee_edge\CliServiceInterface $cli_service
+   * @param CliServiceInterface $cli_service
    *   The CLI service which allows interoperability.
    */
   public function __construct(CliServiceInterface $cli_service = NULL) {
diff --git a/src/Connector/GceServiceAccountAuthentication.php b/src/Connector/GceServiceAccountAuthentication.php
index e905114..1231028 100644
--- a/src/Connector/GceServiceAccountAuthentication.php
+++ b/src/Connector/GceServiceAccountAuthentication.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Connector;
 
+use Drupal\apigee_edge\SDKConnectorInterface;
 use Apigee\Edge\ClientInterface;
 use Apigee\Edge\HttpClient\Plugin\Authentication\GceServiceAccount;
 
@@ -32,7 +33,7 @@ class GceServiceAccountAuthentication extends GceServiceAccount {
    * {@inheritdoc}
    */
   protected function authClient(): ClientInterface {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     return $sdk_connector->buildClient($this->getAuthHeader(), $this->getAuthServer());
   }
diff --git a/src/Connector/HybridAuthentication.php b/src/Connector/HybridAuthentication.php
index 8ea4586..9514c54 100644
--- a/src/Connector/HybridAuthentication.php
+++ b/src/Connector/HybridAuthentication.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Connector;
 
+use Drupal\apigee_edge\SDKConnectorInterface;
 use Apigee\Edge\ClientInterface;
 use Apigee\Edge\HttpClient\Plugin\Authentication\ApigeeOnGcpOauth2;
 use Apigee\Edge\HttpClient\Plugin\Authentication\NullAuthentication;
@@ -33,7 +34,7 @@ class HybridAuthentication extends ApigeeOnGcpOauth2 {
    * {@inheritdoc}
    */
   protected function authClient(): ClientInterface {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     return $sdk_connector->buildClient(new NullAuthentication(), $this->getAuthServer());
   }
diff --git a/src/Connector/HybridCredentials.php b/src/Connector/HybridCredentials.php
index 2317368..1d2eaf1 100644
--- a/src/Connector/HybridCredentials.php
+++ b/src/Connector/HybridCredentials.php
@@ -32,7 +32,7 @@ class HybridCredentials extends Credentials {
   /**
    * HybridCredentials constructor.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
    * @throws \InvalidArgumentException
diff --git a/src/Controller/DeveloperAppKeysController.php b/src/Controller/DeveloperAppKeysController.php
index 7c46e1a..0555ade 100644
--- a/src/Controller/DeveloperAppKeysController.php
+++ b/src/Controller/DeveloperAppKeysController.php
@@ -32,14 +32,14 @@ class DeveloperAppKeysController extends ControllerBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * DeveloperAppKeysController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -58,7 +58,7 @@ class DeveloperAppKeysController extends ControllerBase {
   /**
    * Returns app credentials.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The app credentials.
    */
   public function developerAppKeys($user, $app): JsonResponse {
diff --git a/src/Controller/DeveloperAppViewControllerForDeveloper.php b/src/Controller/DeveloperAppViewControllerForDeveloper.php
index 78f0d3f..a03603b 100644
--- a/src/Controller/DeveloperAppViewControllerForDeveloper.php
+++ b/src/Controller/DeveloperAppViewControllerForDeveloper.php
@@ -32,14 +32,14 @@ class DeveloperAppViewControllerForDeveloper extends ControllerBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * DeveloperAppViewControllerForDeveloper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Controller/DeveloperSyncController.php b/src/Controller/DeveloperSyncController.php
index fa01e2b..2a5aa84 100644
--- a/src/Controller/DeveloperSyncController.php
+++ b/src/Controller/DeveloperSyncController.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Controller;
 
+use Drupal\apigee_edge\JobExecutor;
 use Drupal\apigee_edge\Job\DeveloperSync;
 use Drupal\apigee_edge\Job\Job;
 use Drupal\apigee_edge\JobExecutorInterface;
@@ -36,23 +37,23 @@ class DeveloperSyncController extends ControllerBase {
   /**
    * Job executor.
    *
-   * @var \Drupal\apigee_edge\JobExecutor
+   * @var JobExecutor
    */
   protected $executor;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * DeveloperSyncController constructor.
    *
-   * @param \Drupal\apigee_edge\JobExecutorInterface $executor
+   * @param JobExecutorInterface $executor
    *   The job executor service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(JobExecutorInterface $executor, MessengerInterface $messenger) {
@@ -98,10 +99,10 @@ class DeveloperSyncController extends ControllerBase {
    *
    * Runs a developer sync in the background.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   HTTP response doing a redirect.
    */
   public function schedule(Request $request): RedirectResponse {
@@ -121,10 +122,10 @@ class DeveloperSyncController extends ControllerBase {
    *
    * Starts the developer sync batch process.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   HTTP response doing a redirect.
    */
   public function run(Request $request): RedirectResponse {
diff --git a/src/Controller/EdgeEntityFieldConfigListController.php b/src/Controller/EdgeEntityFieldConfigListController.php
index 0a05823..dacba18 100644
--- a/src/Controller/EdgeEntityFieldConfigListController.php
+++ b/src/Controller/EdgeEntityFieldConfigListController.php
@@ -34,14 +34,14 @@ class EdgeEntityFieldConfigListController extends FieldConfigListController {
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
   /**
    * EdgeEntityFieldConfigListController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -63,7 +63,7 @@ class EdgeEntityFieldConfigListController extends FieldConfigListController {
   public function listing($entity_type_id = NULL, $bundle = NULL, RouteMatchInterface $route_match = NULL) {
     $page = parent::listing($entity_type_id, $bundle, $route_match);
     $event = new EdgeEntityFieldConfigListAlterEvent($entity_type_id, $page);
-    $this->eventDispatcher->dispatch(EdgeEntityFieldConfigListAlterEvent::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EdgeEntityFieldConfigListAlterEvent::EVENT_NAME);
     return $event->getPage();
   }
 
diff --git a/src/Controller/ErrorPageController.php b/src/Controller/ErrorPageController.php
index df46e56..84cfb3d 100644
--- a/src/Controller/ErrorPageController.php
+++ b/src/Controller/ErrorPageController.php
@@ -31,7 +31,7 @@ class ErrorPageController extends ControllerBase {
   /**
    * ErrorPageController constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory object.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/Controller/ExportAnalyticsController.php b/src/Controller/ExportAnalyticsController.php
index a254df2..1af2358 100644
--- a/src/Controller/ExportAnalyticsController.php
+++ b/src/Controller/ExportAnalyticsController.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Controller;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -37,7 +38,7 @@ class ExportAnalyticsController extends ControllerBase {
   /**
    * The PrivateTempStore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $store;
 
@@ -63,7 +64,7 @@ class ExportAnalyticsController extends ControllerBase {
    * @param int $data_id
    *   The ID of the stored analytics data.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access($data_id): AccessResultInterface {
@@ -76,7 +77,7 @@ class ExportAnalyticsController extends ControllerBase {
    * @param int $data_id
    *   The ID of the stored analytics data.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    */
   public function exportAsCsv($data_id): Response {
diff --git a/src/Credentials.php b/src/Credentials.php
index ee21aca..aedffb0 100644
--- a/src/Credentials.php
+++ b/src/Credentials.php
@@ -33,21 +33,21 @@ class Credentials implements CredentialsInterface {
   /**
    * The key entity which stores the API credentials.
    *
-   * @var \Drupal\key\KeyInterface
+   * @var KeyInterface
    */
   protected $key;
 
   /**
    * The key type of the key entity.
    *
-   * @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface
+   * @var EdgeKeyTypeInterface
    */
   protected $keyType;
 
   /**
    * Credentials constructor.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
    * @throws \InvalidArgumentException
diff --git a/src/CredentialsInterface.php b/src/CredentialsInterface.php
index 160b586..2c74aba 100644
--- a/src/CredentialsInterface.php
+++ b/src/CredentialsInterface.php
@@ -33,7 +33,7 @@ interface CredentialsInterface {
   /**
    * Gets the authentication object which instantiated by the key type.
    *
-   * @return \Http\Message\Authentication
+   * @return Authentication
    *   The authentication object.
    */
   public function getAuthentication(): Authentication;
@@ -41,7 +41,7 @@ interface CredentialsInterface {
   /**
    * Gets the key entity which stores the API credentials.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   The key entity which stores the API credentials.
    */
   public function getKey(): KeyInterface;
@@ -49,7 +49,7 @@ interface CredentialsInterface {
   /**
    * Gets the key type of the key entity.
    *
-   * @return \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface
+   * @return EdgeKeyTypeInterface
    *   The key type of the key entity.
    */
   public function getKeyType(): EdgeKeyTypeInterface;
diff --git a/src/Element/ApigeeEntityListElement.php b/src/Element/ApigeeEntityListElement.php
index 14c476b..cf12cdf 100644
--- a/src/Element/ApigeeEntityListElement.php
+++ b/src/Element/ApigeeEntityListElement.php
@@ -35,7 +35,7 @@ class ApigeeEntityListElement extends RenderElement implements ContainerFactoryP
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -48,7 +48,7 @@ class ApigeeEntityListElement extends RenderElement implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Entity/App.php b/src/Entity/App.php
index 508b212..4251769 100644
--- a/src/Entity/App.php
+++ b/src/Entity/App.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface;
+use Drupal\apigee_edge\Entity\Controller\AppControllerInterface;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Structure\AttributesProperty;
@@ -129,12 +131,12 @@ abstract class App extends AttributesAwareFieldableEdgeEntityBase implements App
       return [];
     }
     // Get app credentials from the shared app cache if available.
-    /** @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache */
+    /** @var AppCacheInterface $app_cache */
     $app_cache = \Drupal::service('apigee_edge.controller.cache.apps');
     $app = $app_cache->getEntity($this->getAppId());
     if ($app === NULL) {
       // App has not found in cache, we have to load it from Apigee Edge.
-      /** @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller */
+      /** @var AppControllerInterface $app_controller */
       $app_controller = \Drupal::service('apigee_edge.controller.app');
       try {
         $app = $app_controller->loadApp($this->getAppId());
@@ -278,7 +280,7 @@ abstract class App extends AttributesAwareFieldableEdgeEntityBase implements App
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);
 
     $definitions['name']->setRequired(TRUE);
diff --git a/src/Entity/AppRouteProvider.php b/src/Entity/AppRouteProvider.php
index 380cd42..b9b1ac2 100644
--- a/src/Entity/AppRouteProvider.php
+++ b/src/Entity/AppRouteProvider.php
@@ -45,10 +45,10 @@ class AppRouteProvider extends EdgeEntityRouteProvider {
   /**
    * Gets the analytics route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAnalyticsRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Entity/AppTitleProvider.php b/src/Entity/AppTitleProvider.php
index 3696c58..eb6947c 100644
--- a/src/Entity/AppTitleProvider.php
+++ b/src/Entity/AppTitleProvider.php
@@ -31,9 +31,9 @@ class AppTitleProvider extends EdgeEntityTitleProvider {
   /**
    * Provides a title for the app analytics page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
diff --git a/src/Entity/AppViewBuilder.php b/src/Entity/AppViewBuilder.php
index 3436d19..bdc4e38 100644
--- a/src/Entity/AppViewBuilder.php
+++ b/src/Entity/AppViewBuilder.php
@@ -34,7 +34,7 @@ class AppViewBuilder extends EdgeEntityViewBuilder {
   public function buildMultiple(array $build_list) {
     $results = parent::buildMultiple($build_list);
     foreach (Element::children($results) as $key) {
-      /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+      /** @var AppInterface $app */
       $app = $results[$key]["#{$this->entityTypeId}"];
       // If the callback field is visible, display an error message if the
       // callback url field value does not contain a valid URI.
diff --git a/src/Entity/AppWarningsChecker.php b/src/Entity/AppWarningsChecker.php
index 7fb4f60..59d7189 100644
--- a/src/Entity/AppWarningsChecker.php
+++ b/src/Entity/AppWarningsChecker.php
@@ -36,23 +36,23 @@ class AppWarningsChecker implements AppWarningsCheckerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * AppWarningsChecker constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TimeInterface $time) {
@@ -92,7 +92,7 @@ class AppWarningsChecker implements AppWarningsCheckerInterface {
             ->getSingularLabel();
           $args['@status'] = $cred_product->getStatus() == CredentialProduct::STATUS_REVOKED ? $this->t('revoked') : $this->t('pending');
           if (count($app->getCredentials()) === 1) {
-            /** @var \Drupal\apigee_edge\Entity\ApiProductInterface $apiProduct */
+            /** @var ApiProductInterface $apiProduct */
             $api_product = $this->entityTypeManager->getStorage('api_product')
               ->load($cred_product->getApiproduct());
             $args['%name'] = $api_product->label();
diff --git a/src/Entity/AppWarningsCheckerInterface.php b/src/Entity/AppWarningsCheckerInterface.php
index 97a1876..8528093 100644
--- a/src/Entity/AppWarningsCheckerInterface.php
+++ b/src/Entity/AppWarningsCheckerInterface.php
@@ -28,7 +28,7 @@ interface AppWarningsCheckerInterface {
   /**
    * Checks credentials of an app and returns warnings about them.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity to be checked.
    *
    * @return array
diff --git a/src/Entity/AttributesAwareFieldableEdgeEntityBase.php b/src/Entity/AttributesAwareFieldableEdgeEntityBase.php
index b121779..d3f82c9 100644
--- a/src/Entity/AttributesAwareFieldableEdgeEntityBase.php
+++ b/src/Entity/AttributesAwareFieldableEdgeEntityBase.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Apigee\Edge\Entity\EntityInterface;
 use Apigee\Edge\Entity\Property\AttributesPropertyInterface;
 use Drupal\apigee_edge\Exception\InvalidArgumentException;
@@ -34,7 +36,7 @@ abstract class AttributesAwareFieldableEdgeEntityBase extends FieldableEdgeEntit
   /**
    * The decorated SDK entity.
    *
-   * @var \Apigee\Edge\Entity\EntityInterface|\Apigee\Edge\Entity\Property\AttributesPropertyInterface
+   * @var EntityInterface|AttributesPropertyInterface
    */
   protected $decorated;
 
@@ -46,7 +48,7 @@ abstract class AttributesAwareFieldableEdgeEntityBase extends FieldableEdgeEntit
    * @param null|string $entity_type
    *   Type of the entity. It is optional because constructor sets its default
    *   value.
-   * @param \Apigee\Edge\Entity\EntityInterface|null $decorated
+   * @param EntityInterface|null $decorated
    *   The SDK entity that this Drupal entity decorates.
    */
   public function __construct(array $values, string $entity_type, ?EntityInterface $decorated = NULL) {
@@ -59,7 +61,7 @@ abstract class AttributesAwareFieldableEdgeEntityBase extends FieldableEdgeEntit
   /**
    * Returns the field-attribute converter service.
    *
-   * @return \Drupal\apigee_edge\FieldAttributeConverterInterface
+   * @return FieldAttributeConverterInterface
    *   Field attribute convert service.
    */
   protected function fieldAttributeConverter(): FieldAttributeConverterInterface {
@@ -81,12 +83,12 @@ abstract class AttributesAwareFieldableEdgeEntityBase extends FieldableEdgeEntit
       return parent::get($field_name);
     }
     if (!isset($this->fields[$field_name])) {
-      /** @var \Drupal\field\Entity\FieldConfig $definition */
+      /** @var FieldConfig $definition */
       // Otherwise let's try to get the value of a field from an attribute
       // on the decorated entity.
       $value = $this->fieldAttributeConverter()->getFieldValueFromAttribute($this->entityTypeId, $field_name, $this->decorated->getAttributes());
       // Based on \Drupal\Core\Entity\ContentEntityBase::getTranslatedField().
-      /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $manager */
+      /** @var FieldTypePluginManagerInterface $manager */
       $manager = \Drupal::service('plugin.manager.field.field_type');
       $this->fields[$field_name] = $manager->createFieldItemList($this, $field_name, $value);
     }
diff --git a/src/Entity/Controller/ApiProductController.php b/src/Entity/Controller/ApiProductController.php
index 43b47a7..25dae1c 100644
--- a/src/Entity/Controller/ApiProductController.php
+++ b/src/Entity/Controller/ApiProductController.php
@@ -52,41 +52,41 @@ final class ApiProductController implements ApiProductControllerInterface, Entit
   /**
    * The SDK connector.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The entity cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   private $entityCache;
 
   /**
    * The entity id cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $entityIdCache;
 
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;
 
   /**
    * ApiProductController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface $entity_cache
+   * @param EntityCacheInterface $entity_cache
    *   The entity cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The entity id cache used by this controller.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, EntityCacheInterface $entity_cache, EntityIdCacheInterface $entity_id_cache) {
diff --git a/src/Entity/Controller/AppByOwnerController.php b/src/Entity/Controller/AppByOwnerController.php
index 2b8993f..d9c519c 100644
--- a/src/Entity/Controller/AppByOwnerController.php
+++ b/src/Entity/Controller/AppByOwnerController.php
@@ -60,14 +60,14 @@ abstract class AppByOwnerController extends AppControllerBase implements AppByOw
   /**
    * App owner's dedicated app cache that uses app names as cache ids.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   protected $appCacheByOwner;
 
   /**
    * App owner's dedicated app name cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   protected $appNameCacheByOwner;
 
@@ -76,15 +76,15 @@ abstract class AppByOwnerController extends AppControllerBase implements AppByOw
    *
    * @param string $owner
    *   A developer's email address, uuid or a company's company name.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(string $owner, SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory) {
diff --git a/src/Entity/Controller/AppController.php b/src/Entity/Controller/AppController.php
index 3a1ad76..168fc5b 100644
--- a/src/Entity/Controller/AppController.php
+++ b/src/Entity/Controller/AppController.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface;
 use Apigee\Edge\Api\Management\Controller\AppController as EdgeAppController;
 use Apigee\Edge\Api\Management\Controller\AppControllerInterface as EdgeAppControllerInterface;
 use Apigee\Edge\Api\Management\Entity\AppInterface;
@@ -52,29 +53,29 @@ final class AppController extends AppControllerBase implements AppControllerInte
   /**
    * The (general) app by owner cache factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appByOwnerAppCacheFactory;
 
   /**
    * The app id cache service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appIdCache;
 
   /**
    * AppController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache that stores apps by their ids (UUIDs).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppIdCache $app_id_cache
+   * @param AppIdCache $app_id_cache
    *   The app id cache that stores app UUIDs.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The (general) app cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppIdCache $app_id_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory) {
@@ -212,7 +213,7 @@ final class AppController extends AppControllerBase implements AppControllerInte
    *
    * @param string $status
    *   App status.
-   * @param \Apigee\Edge\Structure\PagerInterface|null $pager
+   * @param PagerInterface|null $pager
    *   Pager.
    *
    * @return array|null
diff --git a/src/Entity/Controller/AppControllerBase.php b/src/Entity/Controller/AppControllerBase.php
index 00871e6..97f02f1 100644
--- a/src/Entity/Controller/AppControllerBase.php
+++ b/src/Entity/Controller/AppControllerBase.php
@@ -34,32 +34,32 @@ abstract class AppControllerBase implements EntityCacheAwareControllerInterface
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   protected $organizationController;
 
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $connector;
 
   /**
    * The app cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   protected $appCache;
 
   /**
    * AppControllerBase constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache) {
diff --git a/src/Entity/Controller/AppCredentialControllerBase.php b/src/Entity/Controller/AppCredentialControllerBase.php
index d93743d..9de5bd6 100644
--- a/src/Entity/Controller/AppCredentialControllerBase.php
+++ b/src/Entity/Controller/AppCredentialControllerBase.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface;
 use Apigee\Edge\Api\Management\Controller\AppCredentialController as EdgeAppCredentialController;
 use Apigee\Edge\Api\Management\Entity\AppCredentialInterface;
 use Apigee\Edge\Structure\AttributesProperty;
@@ -71,21 +72,21 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $connector;
 
   /**
    * App owner's dedicated app cache that uses app names as cache ids.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface
+   * @var AppCacheByOwnerInterface
    */
   protected $appCacheByOwner;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
@@ -97,11 +98,11 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    * @param string $app_name
    *   Name of an app. (Not an app id, because app credentials endpoints does
    *   not allow to use them.)
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(string $owner, string $app_name, SDKConnectorInterface $connector, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EventDispatcherInterface $event_dispatcher) {
@@ -117,7 +118,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function addProducts(string $consumer_key, array $api_products): AppCredentialInterface {
     $credential = $this->decorated()->addProducts($consumer_key, $api_products);
-    $this->eventDispatcher->dispatch(AppCredentialAddApiProductEvent::EVENT_NAME, new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products));
+    $this->eventDispatcher->dispatch(new AppCredentialAddApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_products), AppCredentialAddApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -128,7 +129,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function create(string $consumer_key, string $consumer_secret): AppCredentialInterface {
     $credential = $this->decorated()->create($consumer_key, $consumer_secret);
-    $this->eventDispatcher->dispatch(AppCredentialCreateEvent::EVENT_NAME, new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialCreateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialCreateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -147,7 +148,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function delete(string $consumer_key): AppCredentialInterface {
     $credential = $this->decorated()->delete($consumer_key);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteEvent::EVENT_NAME, new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialDeleteEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -158,7 +159,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function deleteApiProduct(string $consumer_key, string $api_product): AppCredentialInterface {
     $credential = $this->decorated()->deleteApiProduct($consumer_key, $api_product);
-    $this->eventDispatcher->dispatch(AppCredentialDeleteApiProductEvent::EVENT_NAME, new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product));
+    $this->eventDispatcher->dispatch(new AppCredentialDeleteApiProductEvent($this->getAppType(), $this->owner, $this->appName, $credential, $api_product), AppCredentialDeleteApiProductEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
@@ -178,7 +179,7 @@ abstract class AppCredentialControllerBase implements AppCredentialControllerInt
    */
   public function generate(array $api_products, AttributesProperty $app_attributes, string $callback_url, array $scopes = [], string $key_expires_in = '-1'): AppCredentialInterface {
     $credential = $this->decorated()->generate($api_products, $app_attributes, $callback_url, $scopes, $key_expires_in);
-    $this->eventDispatcher->dispatch(AppCredentialGenerateEvent::EVENT_NAME, new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential));
+    $this->eventDispatcher->dispatch(new AppCredentialGenerateEvent($this->getAppType(), $this->owner, $this->appName, $credential), AppCredentialGenerateEvent::EVENT_NAME);
     // By removing app from cache we force reload the credentials as well.
     $this->appCacheByOwner->removeEntities([$this->appName]);
     return $credential;
diff --git a/src/Entity/Controller/Cache/AppCache.php b/src/Entity/Controller/Cache/AppCache.php
index fa9fc2c..d2a103f 100644
--- a/src/Entity/Controller/Cache/AppCache.php
+++ b/src/Entity/Controller/Cache/AppCache.php
@@ -57,7 +57,7 @@ final class AppCache extends EntityCache implements AppCacheInterface {
    * {@inheritdoc}
    */
   protected function prepareCacheItem(EntityInterface $entity): array {
-    /** @var \Apigee\Edge\Api\Management\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $owner = $this->getAppOwner($entity);
     $item = [
       // We have to cache apps by their app ids here, $entity->id() returns
diff --git a/src/Entity/Controller/Cache/AppCacheByOwner.php b/src/Entity/Controller/Cache/AppCacheByOwner.php
index 47f2da3..f19a05d 100644
--- a/src/Entity/Controller/Cache/AppCacheByOwner.php
+++ b/src/Entity/Controller/Cache/AppCacheByOwner.php
@@ -48,7 +48,7 @@ final class AppCacheByOwner implements AppCacheByOwnerInterface {
   /**
    * The app cache service that stores app by their app id (UUID).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;
 
@@ -58,7 +58,7 @@ final class AppCacheByOwner implements AppCacheByOwnerInterface {
    * This cache is used by the getEntityIds() method on developer- and company
    * app controllers.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $appNameCache;
 
@@ -74,9 +74,9 @@ final class AppCacheByOwner implements AppCacheByOwnerInterface {
    *
    * @param string $owner
    *   Developer id (UUID), email address or a company's company name.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache service that stores app by their app id (UUID).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
    *   Dedicated cache instance that stores a specific owner app names.
    */
   public function __construct(string $owner, AppCacheInterface $app_cache, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner) {
@@ -164,7 +164,7 @@ final class AppCacheByOwner implements AppCacheByOwnerInterface {
    * @param array $names
    *   Array of app names.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\AppInterface[]
+   * @return AppInterface[]
    *   Array of apps.
    */
   private function getAppsByAppNames(array $names) : array {
diff --git a/src/Entity/Controller/Cache/AppCacheByOwnerFactory.php b/src/Entity/Controller/Cache/AppCacheByOwnerFactory.php
index 8db3d11..323f9fb 100644
--- a/src/Entity/Controller/Cache/AppCacheByOwnerFactory.php
+++ b/src/Entity/Controller/Cache/AppCacheByOwnerFactory.php
@@ -30,30 +30,30 @@ final class AppCacheByOwnerFactory implements AppCacheByOwnerFactoryInterface {
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface[]
+   * @var AppCacheByOwnerInterface[]
    */
   private $instances = [];
 
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;
 
   /**
    * The app cache service that stores app by their app id (UUID).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;
 
   /**
    * AppCacheByAppOwnerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache service that stores app by their app id (UUID).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(AppCacheInterface $app_cache, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory) {
diff --git a/src/Entity/Controller/Cache/AppCacheByOwnerFactoryInterface.php b/src/Entity/Controller/Cache/AppCacheByOwnerFactoryInterface.php
index 7a2f21d..659305a 100644
--- a/src/Entity/Controller/Cache/AppCacheByOwnerFactoryInterface.php
+++ b/src/Entity/Controller/Cache/AppCacheByOwnerFactoryInterface.php
@@ -31,7 +31,7 @@ interface AppCacheByOwnerFactoryInterface {
    * @param string $owner
    *   Developer id (UUID), email address or a company's company name.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface
+   * @return AppCacheByOwnerInterface
    *   The app name cache instance that belongs to the owner.
    */
   public function getAppCache(string $owner): AppCacheByOwnerInterface;
diff --git a/src/Entity/Controller/Cache/AppCacheInterface.php b/src/Entity/Controller/Cache/AppCacheInterface.php
index 48432e4..9b7af27 100644
--- a/src/Entity/Controller/Cache/AppCacheInterface.php
+++ b/src/Entity/Controller/Cache/AppCacheInterface.php
@@ -38,7 +38,7 @@ interface AppCacheInterface extends EntityCacheInterface {
    * @param string $owner
    *   Developer id (UUID) or company name.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\AppInterface[]
+   * @return AppInterface[]
    *   Array of apps that belongs to this owner in cache or null if no entry
    *   found in cache for this owner.
    */
@@ -58,7 +58,7 @@ interface AppCacheInterface extends EntityCacheInterface {
   /**
    * Returns the owner of an app.
    *
-   * @param \Apigee\Edge\Api\Management\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return string
diff --git a/src/Entity/Controller/Cache/AppIdCache.php b/src/Entity/Controller/Cache/AppIdCache.php
index 445bc46..6b3a4af 100644
--- a/src/Entity/Controller/Cache/AppIdCache.php
+++ b/src/Entity/Controller/Cache/AppIdCache.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller\Cache;
 
+use Apigee\Edge\Api\Management\Entity\AppInterface;
 use Apigee\Edge\Entity\EntityInterface;
 
 /**
@@ -38,7 +39,7 @@ final class AppIdCache extends EntityIdCache implements EntityIdCacheInterface {
    * {@inheritdoc}
    */
   protected function getEntityId(EntityInterface $entity): string {
-    /** @var \Apigee\Edge\Api\Management\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     return $entity->getAppId();
   }
 
diff --git a/src/Entity/Controller/Cache/AppNameCacheByOwnerFactory.php b/src/Entity/Controller/Cache/AppNameCacheByOwnerFactory.php
index aed423a..ef472ae 100644
--- a/src/Entity/Controller/Cache/AppNameCacheByOwnerFactory.php
+++ b/src/Entity/Controller/Cache/AppNameCacheByOwnerFactory.php
@@ -28,7 +28,7 @@ final class AppNameCacheByOwnerFactory implements AppNameCacheByOwnerFactoryInte
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface[]
+   * @var EntityIdCacheInterface[]
    */
   private $instances = [];
 
diff --git a/src/Entity/Controller/Cache/AppNameCacheByOwnerFactoryInterface.php b/src/Entity/Controller/Cache/AppNameCacheByOwnerFactoryInterface.php
index 2910737..1bbde65 100644
--- a/src/Entity/Controller/Cache/AppNameCacheByOwnerFactoryInterface.php
+++ b/src/Entity/Controller/Cache/AppNameCacheByOwnerFactoryInterface.php
@@ -34,7 +34,7 @@ interface AppNameCacheByOwnerFactoryInterface {
    * @param string $owner
    *   Developer id (UUID), email address or a company's company name.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @return EntityIdCacheInterface
    *   The app name cache instance that belongs to the owner.
    */
   public function getAppNameCache(string $owner): EntityIdCacheInterface;
diff --git a/src/Entity/Controller/Cache/DeveloperAppCacheFactory.php b/src/Entity/Controller/Cache/DeveloperAppCacheFactory.php
index 5a4ee1c..2d72599 100644
--- a/src/Entity/Controller/Cache/DeveloperAppCacheFactory.php
+++ b/src/Entity/Controller/Cache/DeveloperAppCacheFactory.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller\Cache;
 
+use Drupal\apigee_edge\Entity\Developer;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -36,32 +37,32 @@ final class DeveloperAppCacheFactory implements AppCacheByOwnerFactoryInterface
   /**
    * The (general) app cache by owner factory.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;
 
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * DeveloperAppCacheFactory constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The (general) app cache by owner factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
    */
   public function __construct(AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator) {
@@ -78,12 +79,12 @@ final class DeveloperAppCacheFactory implements AppCacheByOwnerFactoryInterface
    * @param string $owner
    *   Developer id (UUID) or email.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerInterface
+   * @return AppCacheByOwnerInterface
    *   The developer app cache that belongs to this owner.
    */
   public function getAppCache(string $owner): AppCacheByOwnerInterface {
     if ($this->emailValidator->isValid($owner)) {
-      /** @var \Drupal\apigee_edge\Entity\Developer|null $developer */
+      /** @var Developer|null $developer */
       $developer = $this->entityTypeManager->getStorage('developer')->load($owner);
       if ($developer === NULL) {
         throw new DeveloperDoesNotExistException($owner);
diff --git a/src/Entity/Controller/Cache/DeveloperAppNameCacheFactory.php b/src/Entity/Controller/Cache/DeveloperAppNameCacheFactory.php
index 7f52ae9..84ba0fa 100644
--- a/src/Entity/Controller/Cache/DeveloperAppNameCacheFactory.php
+++ b/src/Entity/Controller/Cache/DeveloperAppNameCacheFactory.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller\Cache;
 
+use Drupal\apigee_edge\Entity\Developer;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -36,32 +37,32 @@ final class DeveloperAppNameCacheFactory implements AppNameCacheByOwnerFactoryIn
   /**
    * The (general) app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;
 
   /**
    * DeveloperAppNameCacheFactory constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory
    *   The (general) app name cache by app owner factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
    */
   public function __construct(AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner_factory, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator) {
@@ -75,7 +76,7 @@ final class DeveloperAppNameCacheFactory implements AppNameCacheByOwnerFactoryIn
    */
   public function getAppNameCache(string $owner): EntityIdCacheInterface {
     if ($this->emailValidator->isValid($owner)) {
-      /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+      /** @var Developer $developer */
       $developer = $this->entityTypeManager->getStorage('developer')->load($owner);
       if ($developer === NULL) {
         throw new DeveloperDoesNotExistException($owner);
diff --git a/src/Entity/Controller/Cache/DeveloperCache.php b/src/Entity/Controller/Cache/DeveloperCache.php
index 981b3b7..bdd8f55 100644
--- a/src/Entity/Controller/Cache/DeveloperCache.php
+++ b/src/Entity/Controller/Cache/DeveloperCache.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller\Cache;
 
+use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
 use Apigee\Edge\Entity\EntityInterface;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;
 
@@ -44,9 +45,9 @@ final class DeveloperCache extends EntityCache implements EntityCacheInterface {
   /**
    * DeveloperCache constructor.
    *
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The memory cache factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The developer entity id cache.
    */
   public function __construct(MemoryCacheFactoryInterface $memory_cache_factory, EntityIdCacheInterface $entity_id_cache) {
@@ -57,7 +58,7 @@ final class DeveloperCache extends EntityCache implements EntityCacheInterface {
    * {@inheritdoc}
    */
   protected function prepareCacheItem(EntityInterface $entity): array {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $item = parent::prepareCacheItem($entity);
     // Add developer's email as tag to generated cache items by the parent
     // class.
diff --git a/src/Entity/Controller/Cache/DeveloperIdCache.php b/src/Entity/Controller/Cache/DeveloperIdCache.php
index 8c19def..88c39a3 100644
--- a/src/Entity/Controller/Cache/DeveloperIdCache.php
+++ b/src/Entity/Controller/Cache/DeveloperIdCache.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller\Cache;
 
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Apigee\Edge\Entity\EntityInterface;
 
 /**
@@ -36,7 +37,7 @@ class DeveloperIdCache extends EntityIdCache implements EntityIdCacheInterface {
    * {@inheritdoc}
    */
   protected function getEntityId(EntityInterface $entity): string {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     return $entity->getEmail();
   }
 
diff --git a/src/Entity/Controller/Cache/EntityCache.php b/src/Entity/Controller/Cache/EntityCache.php
index 2e1025c..c39a2e8 100644
--- a/src/Entity/Controller/Cache/EntityCache.php
+++ b/src/Entity/Controller/Cache/EntityCache.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller\Cache;
 
+use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Apigee\Edge\Entity\EntityInterface;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;
 
@@ -52,23 +53,23 @@ class EntityCache implements EntityCacheInterface {
    * It is easier to invalidate cache entries in a cache backend that supports
    * tags.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   protected $cacheBackend;
 
   /**
    * The entity id cache related to this entity type.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   protected $entityIdCache;
 
   /**
    * EntityCache constructor.
    *
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The memory cache factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The related entity id cache.
    * @param string $entity_type
    *   The entity type.
@@ -98,7 +99,7 @@ class EntityCache implements EntityCacheInterface {
   /**
    * Allows to perform additional tasks after entities got saved to cache.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of entities.
    */
   protected function doSaveEntities(array $entities): void {}
@@ -173,7 +174,7 @@ class EntityCache implements EntityCacheInterface {
    *
    * The cache id returned here must be always unique!
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object that gets cached.
    *
    * @return array
diff --git a/src/Entity/Controller/Cache/EntityCacheInterface.php b/src/Entity/Controller/Cache/EntityCacheInterface.php
index 304d135..9f0badb 100644
--- a/src/Entity/Controller/Cache/EntityCacheInterface.php
+++ b/src/Entity/Controller/Cache/EntityCacheInterface.php
@@ -32,7 +32,7 @@ interface EntityCacheInterface {
   /**
    * Saves entities to the cache.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of entities.
    */
   public function saveEntities(array $entities): void;
@@ -52,7 +52,7 @@ interface EntityCacheInterface {
    *   Array of entity ids.
    *   If an empty array is passed all currently stored gets returned.
    *
-   * @return \Apigee\Edge\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities.
    */
   public function getEntities(array $ids = []): array;
@@ -63,7 +63,7 @@ interface EntityCacheInterface {
    * @param string $id
    *   Entity id.
    *
-   * @return \Apigee\Edge\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity if it is in the cache, null otherwise.
    */
   public function getEntity(string $id): ?EntityInterface;
diff --git a/src/Entity/Controller/Cache/EntityIdCache.php b/src/Entity/Controller/Cache/EntityIdCache.php
index dd15a5e..de4057d 100644
--- a/src/Entity/Controller/Cache/EntityIdCache.php
+++ b/src/Entity/Controller/Cache/EntityIdCache.php
@@ -123,7 +123,7 @@ class EntityIdCache implements EntityIdCacheInterface {
   /**
    * Returns the unique id of an entity that getEntityIds() returns as well.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
    * @return string
diff --git a/src/Entity/Controller/Cache/EntityIdCacheInterface.php b/src/Entity/Controller/Cache/EntityIdCacheInterface.php
index ccf5dfe..62d7e31 100644
--- a/src/Entity/Controller/Cache/EntityIdCacheInterface.php
+++ b/src/Entity/Controller/Cache/EntityIdCacheInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller\Cache;
 
+use Apigee\Edge\Entity\EntityInterface;
 /**
  * Stores entity ids that getEntityIds() methods returns in controllers.
  *
@@ -52,7 +53,7 @@ interface EntityIdCacheInterface {
   /**
    * Adds entities to the cache.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of entities.
    */
   public function saveEntities(array $entities): void;
diff --git a/src/Entity/Controller/CachedAttributesAwareEntityControllerTrait.php b/src/Entity/Controller/CachedAttributesAwareEntityControllerTrait.php
index c28ce8b..2cd3103 100644
--- a/src/Entity/Controller/CachedAttributesAwareEntityControllerTrait.php
+++ b/src/Entity/Controller/CachedAttributesAwareEntityControllerTrait.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Api\Management\Controller\AttributesAwareEntityControllerInterface;
+use Apigee\Edge\Entity\Property\AttributesPropertyInterface;
 use Apigee\Edge\Structure\AttributesProperty;
 
 /**
@@ -40,7 +42,7 @@ trait CachedAttributesAwareEntityControllerTrait {
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Api\Management\Controller\AttributesAwareEntityControllerInterface
+   * @return AttributesAwareEntityControllerInterface
    *   An entity controller that extends this interface.
    */
   abstract protected function decorated();
@@ -50,7 +52,7 @@ trait CachedAttributesAwareEntityControllerTrait {
    */
   public function getAttributes(string $entity_id): AttributesProperty {
     $entity = $this->entityCache()->getEntity($entity_id);
-    /** @var \Apigee\Edge\Entity\Property\AttributesPropertyInterface $entity */
+    /** @var AttributesPropertyInterface $entity */
     if ($entity) {
       return $entity->getAttributes();
     }
@@ -63,7 +65,7 @@ trait CachedAttributesAwareEntityControllerTrait {
    */
   public function getAttribute(string $entity_id, string $name): string {
     $entity = $this->entityCache()->getEntity($entity_id);
-    /** @var \Apigee\Edge\Entity\Property\AttributesPropertyInterface $entity */
+    /** @var AttributesPropertyInterface $entity */
     if ($entity) {
       return $entity->getAttributeValue($name);
     }
diff --git a/src/Entity/Controller/CachedEntityCrudOperationsControllerTrait.php b/src/Entity/Controller/CachedEntityCrudOperationsControllerTrait.php
index d223bd9..e59cae7 100644
--- a/src/Entity/Controller/CachedEntityCrudOperationsControllerTrait.php
+++ b/src/Entity/Controller/CachedEntityCrudOperationsControllerTrait.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Controller\EntityCrudOperationsControllerInterface;
 use Apigee\Edge\Entity\EntityInterface;
 
 /**
@@ -40,7 +41,7 @@ trait CachedEntityCrudOperationsControllerTrait {
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\EntityCrudOperationsControllerInterface
+   * @return EntityCrudOperationsControllerInterface
    *   An entity controller that extends this interface.
    */
   abstract protected function decorated();
diff --git a/src/Entity/Controller/CachedManagementApiEdgeEntityControllerProxy.php b/src/Entity/Controller/CachedManagementApiEdgeEntityControllerProxy.php
index 49e4f98..786c84d 100644
--- a/src/Entity/Controller/CachedManagementApiEdgeEntityControllerProxy.php
+++ b/src/Entity/Controller/CachedManagementApiEdgeEntityControllerProxy.php
@@ -34,21 +34,21 @@ final class CachedManagementApiEdgeEntityControllerProxy implements EdgeEntityCo
   /**
    * The original cached entity controller.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\EntityCacheAwareControllerInterface
+   * @var EntityCacheAwareControllerInterface
    */
   private $originalController;
 
   /**
    * The MGMT API proxy controller created from the original controller.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\ManagementApiEdgeEntityControllerProxy
+   * @var ManagementApiEdgeEntityControllerProxy
    */
   private $proxiedController;
 
   /**
    * CachedManagementApiEdgeEntityControllerProxy constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\EntityCacheAwareControllerInterface $controller
+   * @param EntityCacheAwareControllerInterface $controller
    *   The entity controller that uses cache.
    */
   public function __construct(EntityCacheAwareControllerInterface $controller) {
diff --git a/src/Entity/Controller/CachedPaginatedControllerHelperTrait.php b/src/Entity/Controller/CachedPaginatedControllerHelperTrait.php
index 59d6dfc..f38f89e 100644
--- a/src/Entity/Controller/CachedPaginatedControllerHelperTrait.php
+++ b/src/Entity/Controller/CachedPaginatedControllerHelperTrait.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface;
+use Apigee\Edge\Controller\PaginatedEntityListingControllerInterface;
 use Apigee\Edge\Structure\PagerInterface;
 
 /**
@@ -33,7 +35,7 @@ trait CachedPaginatedControllerHelperTrait {
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface|\Apigee\Edge\Controller\PaginatedEntityListingControllerInterface
+   * @return PaginatedEntityIdListingControllerInterface|PaginatedEntityListingControllerInterface
    *   An entity controller that extends these interfaces.
    */
   abstract protected function decorated();
diff --git a/src/Entity/Controller/CachedPaginatedEntityIdListingControllerTrait.php b/src/Entity/Controller/CachedPaginatedEntityIdListingControllerTrait.php
index 8d12c72..6b643c7 100644
--- a/src/Entity/Controller/CachedPaginatedEntityIdListingControllerTrait.php
+++ b/src/Entity/Controller/CachedPaginatedEntityIdListingControllerTrait.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface;
 use Apigee\Edge\Structure\PagerInterface;
 use Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface;
 
@@ -36,7 +37,7 @@ trait CachedPaginatedEntityIdListingControllerTrait {
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\PaginatedEntityIdListingControllerInterface
+   * @return PaginatedEntityIdListingControllerInterface
    *   An entity controller that extends these interfaces.
    */
   abstract protected function decorated();
@@ -44,7 +45,7 @@ trait CachedPaginatedEntityIdListingControllerTrait {
   /**
    * Entity id cache used by the entity controller.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @return EntityIdCacheInterface
    *   The entity id cache.
    */
   abstract protected function entityIdCache(): EntityIdCacheInterface;
diff --git a/src/Entity/Controller/CachedPaginatedEntityListingControllerTrait.php b/src/Entity/Controller/CachedPaginatedEntityListingControllerTrait.php
index 190d519..f9d3de6 100644
--- a/src/Entity/Controller/CachedPaginatedEntityListingControllerTrait.php
+++ b/src/Entity/Controller/CachedPaginatedEntityListingControllerTrait.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Controller\PaginatedEntityListingControllerInterface;
 use Apigee\Edge\Structure\PagerInterface;
 
 /**
@@ -37,7 +38,7 @@ trait CachedPaginatedEntityListingControllerTrait {
    * We did not added a return type because this way all entity controller's
    * decorated() method becomes compatible with this declaration.
    *
-   * @return \Apigee\Edge\Controller\PaginatedEntityListingControllerInterface
+   * @return PaginatedEntityListingControllerInterface
    *   An entity controller that extends these interfaces.
    */
   abstract protected function decorated();
diff --git a/src/Entity/Controller/DeveloperAppControllerFactory.php b/src/Entity/Controller/DeveloperAppControllerFactory.php
index e9821a6..1136e0d 100644
--- a/src/Entity/Controller/DeveloperAppControllerFactory.php
+++ b/src/Entity/Controller/DeveloperAppControllerFactory.php
@@ -33,57 +33,57 @@ final class DeveloperAppControllerFactory implements DeveloperAppControllerFacto
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerInterface[]
+   * @var DeveloperAppControllerInterface[]
    */
   private $instances = [];
 
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;
 
   /**
    * The app cache that stores apps by their ids (UUIDs).
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface
+   * @var AppCacheInterface
    */
   private $appCache;
 
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;
 
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;
 
   /**
    * DeveloperAppControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheInterface $app_cache
+   * @param AppCacheInterface $app_cache
    *   The app cache that stores apps by their ids (UUIDs).
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
+   * @param AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
+   * @param AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory
    *   The app name cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, AppCacheInterface $app_cache, AppCacheByOwnerFactoryInterface $app_by_owner_app_cache_factory, AppNameCacheByOwnerFactoryInterface $app_by_owner_app_id_cache_factory) {
diff --git a/src/Entity/Controller/DeveloperAppControllerFactoryInterface.php b/src/Entity/Controller/DeveloperAppControllerFactoryInterface.php
index 0be3253..be1dadd 100644
--- a/src/Entity/Controller/DeveloperAppControllerFactoryInterface.php
+++ b/src/Entity/Controller/DeveloperAppControllerFactoryInterface.php
@@ -31,7 +31,7 @@ interface DeveloperAppControllerFactoryInterface {
    * @param string $developer
    *   Email address or id (UUID) of a developer.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerInterface
+   * @return DeveloperAppControllerInterface
    *   Developer app controller.
    */
   public function developerAppController(string $developer): DeveloperAppControllerInterface;
diff --git a/src/Entity/Controller/DeveloperAppCredentialControllerFactory.php b/src/Entity/Controller/DeveloperAppCredentialControllerFactory.php
index d318854..587f0a5 100644
--- a/src/Entity/Controller/DeveloperAppCredentialControllerFactory.php
+++ b/src/Entity/Controller/DeveloperAppCredentialControllerFactory.php
@@ -32,39 +32,39 @@ final class DeveloperAppCredentialControllerFactory implements DeveloperAppCrede
   /**
    * Internal cache for created instances.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface[]
+   * @var DeveloperAppCredentialControllerInterface[]
    */
   private $instances;
 
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   private $eventDispatcher;
 
   /**
    * DeveloperAppCredentialControllerFactory constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(SDKConnectorInterface $connector, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, EventDispatcherInterface $event_dispatcher) {
diff --git a/src/Entity/Controller/DeveloperAppCredentialControllerFactoryInterface.php b/src/Entity/Controller/DeveloperAppCredentialControllerFactoryInterface.php
index 4dedab2..828aea4 100644
--- a/src/Entity/Controller/DeveloperAppCredentialControllerFactoryInterface.php
+++ b/src/Entity/Controller/DeveloperAppCredentialControllerFactoryInterface.php
@@ -34,7 +34,7 @@ interface DeveloperAppCredentialControllerFactoryInterface {
    *   Name of an app. (Not an app id, because app credentials endpoints does
    *   not allow to use them.)
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerInterface
+   * @return DeveloperAppCredentialControllerInterface
    *   The developer app credentials controller.
    */
   public function developerAppCredentialController(string $owner, string $app_name): DeveloperAppCredentialControllerInterface;
diff --git a/src/Entity/Controller/DeveloperAppEdgeEntityControllerProxy.php b/src/Entity/Controller/DeveloperAppEdgeEntityControllerProxy.php
index e9d533a..3067336 100644
--- a/src/Entity/Controller/DeveloperAppEdgeEntityControllerProxy.php
+++ b/src/Entity/Controller/DeveloperAppEdgeEntityControllerProxy.php
@@ -36,23 +36,23 @@ final class DeveloperAppEdgeEntityControllerProxy implements EdgeEntityControlle
   /**
    * The developer app controller factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface
+   * @var DeveloperAppControllerFactoryInterface
    */
   private $devAppControllerFactory;
 
   /**
    * The app controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface
+   * @var AppControllerInterface
    */
   private $appController;
 
   /**
    * DeveloperAppEntityControllerProxy constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $developer_app_controller_factory
+   * @param DeveloperAppControllerFactoryInterface $developer_app_controller_factory
    *   The developer app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(DeveloperAppControllerFactoryInterface $developer_app_controller_factory, AppControllerInterface $app_controller) {
@@ -64,7 +64,7 @@ final class DeveloperAppEdgeEntityControllerProxy implements EdgeEntityControlle
    * {@inheritdoc}
    */
   public function create(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $entity */
+    /** @var DeveloperAppInterface $entity */
     if (empty($entity->getDeveloperId())) {
       // Sanity check.
       throw new RuntimeException('Developer id has to set on the app.');
@@ -84,7 +84,7 @@ final class DeveloperAppEdgeEntityControllerProxy implements EdgeEntityControlle
    * {@inheritdoc}
    */
   public function update(EntityInterface $entity): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $entity */
+    /** @var DeveloperAppInterface $entity */
     $controller = $this->devAppControllerFactory->developerAppController($entity->getDeveloperId());
     $controller->update($entity);
   }
@@ -101,7 +101,7 @@ final class DeveloperAppEdgeEntityControllerProxy implements EdgeEntityControlle
       // Entity has not found in the entity cache, we have it from Apigee Edge.
       $entity = $this->load($id);
     }
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $entity */
+    /** @var DeveloperAppInterface $entity */
     $controller = $this->devAppControllerFactory->developerAppController($entity->getDeveloperId());
     // The id that we got is a UUID, what we need is an app name.
     $controller->delete($entity->getName());
diff --git a/src/Entity/Controller/DeveloperController.php b/src/Entity/Controller/DeveloperController.php
index 0cb3d52..aab2073 100644
--- a/src/Entity/Controller/DeveloperController.php
+++ b/src/Entity/Controller/DeveloperController.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Api\Management\Entity\DeveloperAppInterface;
 use Apigee\Edge\Api\Management\Controller\DeveloperController as EdgeDeveloperController;
 use Apigee\Edge\Api\Management\Controller\DeveloperControllerInterface as EdgeDeveloperControllerInterface;
 use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
@@ -58,59 +59,59 @@ final class DeveloperController implements DeveloperControllerInterface, EntityC
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The organization controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface
+   * @var OrganizationControllerInterface
    */
   private $orgController;
 
   /**
    * The entity cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @var EntityCacheInterface
    */
   private $entityCache;
 
   /**
    * The entity id cache.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface
+   * @var EntityIdCacheInterface
    */
   private $entityIdCache;
 
   /**
    * The app cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface
+   * @var AppCacheByOwnerFactoryInterface
    */
   private $appCacheByOwnerFactory;
 
   /**
    * The app name cache by owner factory service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface
+   * @var AppNameCacheByOwnerFactoryInterface
    */
   private $appNameCacheByOwnerFactory;
 
   /**
    * DeveloperController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\Entity\Controller\OrganizationControllerInterface $org_controller
+   * @param OrganizationControllerInterface $org_controller
    *   The organization controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface $entity_cache
+   * @param EntityCacheInterface $entity_cache
    *   The entity cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\EntityIdCacheInterface $entity_id_cache
+   * @param EntityIdCacheInterface $entity_id_cache
    *   The entity id cache used by this controller.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
+   * @param AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory
    *   The app cache by owner factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\Cache\AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
+   * @param AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner
    *   The app name cache by owner factory service.
    */
   public function __construct(SDKConnectorInterface $connector, OrganizationControllerInterface $org_controller, EntityCacheInterface $entity_cache, EntityIdCacheInterface $entity_id_cache, AppCacheByOwnerFactoryInterface $app_cache_by_owner_factory, AppNameCacheByOwnerFactoryInterface $app_name_cache_by_owner) {
@@ -182,7 +183,7 @@ final class DeveloperController implements DeveloperControllerInterface, EntityC
    * {@inheritdoc}
    */
   public function delete(string $entity_id): EntityInterface {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $entity = $this->traitDelete($entity_id);
     // Invalidate app caches that belongs to this developer.
     // This is implementation probably overcomplicated,
@@ -190,7 +191,7 @@ final class DeveloperController implements DeveloperControllerInterface, EntityC
     foreach ([$entity->getEmail(), $entity->getDeveloperId()] as $owner) {
       $app_cache = $this->appCacheByOwnerFactory->getAppCache($owner);
       $app_names = [];
-      /** @var \Apigee\Edge\Api\Management\Entity\DeveloperAppInterface $app */
+      /** @var DeveloperAppInterface $app */
       foreach ($app_cache->getEntities() as $app) {
         $app_names[] = $app->getAppId();
       }
diff --git a/src/Entity/Controller/EdgeEntityControllerInterface.php b/src/Entity/Controller/EdgeEntityControllerInterface.php
index 0d8c95e..b947d2f 100644
--- a/src/Entity/Controller/EdgeEntityControllerInterface.php
+++ b/src/Entity/Controller/EdgeEntityControllerInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Entity\EntityInterface;
 
 /**
@@ -40,7 +41,7 @@ interface EdgeEntityControllerInterface {
    *
    * Applies incoming values from Apigee Edge in $entity.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The created entity.
    */
   public function create(EntityInterface $entity): void;
@@ -52,10 +53,10 @@ interface EdgeEntityControllerInterface {
    *   One of an entity's unique ids. (Some entities has more than one unique
    *   id at a moment, ex.: developer's email address and id (UUID).)
    *
-   * @return \Apigee\Edge\Entity\EntityInterface
+   * @return EntityInterface
    *   The load entity from Apigee Edge.
    *
-   * @throws \Apigee\Edge\Exception\ApiException
+   * @throws ApiException
    *   If entity does not exist with id.
    */
   public function load(string $id): EntityInterface;
@@ -65,7 +66,7 @@ interface EdgeEntityControllerInterface {
    *
    * Applies incoming values from Apigee Edge in $entity.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The update entity.
    */
   public function update(EntityInterface $entity): void;
@@ -85,7 +86,7 @@ interface EdgeEntityControllerInterface {
    * All entities, even on pagination enabled endpoints, this method must
    * return all entities even it requires multiple API calls.
    *
-   * @return \Apigee\Edge\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of entities.
    */
   public function loadAll(): array;
diff --git a/src/Entity/Controller/EntityCacheAwareControllerInterface.php b/src/Entity/Controller/EntityCacheAwareControllerInterface.php
index 95d3826..8723413 100644
--- a/src/Entity/Controller/EntityCacheAwareControllerInterface.php
+++ b/src/Entity/Controller/EntityCacheAwareControllerInterface.php
@@ -30,7 +30,7 @@ interface EntityCacheAwareControllerInterface {
   /**
    * Returns the entity cache used by the controller.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @return EntityCacheInterface
    *   The entity cache.
    */
   public function entityCache(): EntityCacheInterface;
diff --git a/src/Entity/Controller/EntityCacheAwareControllerTrait.php b/src/Entity/Controller/EntityCacheAwareControllerTrait.php
index 1e4c470..9d614c9 100644
--- a/src/Entity/Controller/EntityCacheAwareControllerTrait.php
+++ b/src/Entity/Controller/EntityCacheAwareControllerTrait.php
@@ -35,7 +35,7 @@ trait EntityCacheAwareControllerTrait {
   /**
    * Returns the entity cache used by the controller.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\Cache\EntityCacheInterface
+   * @return EntityCacheInterface
    *   The entity cache.
    */
   abstract public function entityCache(): EntityCacheInterface;
diff --git a/src/Entity/Controller/ManagementApiEdgeEntityControllerProxy.php b/src/Entity/Controller/ManagementApiEdgeEntityControllerProxy.php
index c748a65..7ef62ec 100644
--- a/src/Entity/Controller/ManagementApiEdgeEntityControllerProxy.php
+++ b/src/Entity/Controller/ManagementApiEdgeEntityControllerProxy.php
@@ -34,7 +34,7 @@ final class ManagementApiEdgeEntityControllerProxy implements EdgeEntityControll
   /**
    * The decorated controller from the SDK.
    *
-   * @var \Apigee\Edge\Controller\EntityCrudOperationsControllerInterface|\Apigee\Edge\Controller\NonPaginatedEntityListingControllerInterface|\Apigee\Edge\Controller\PaginatedEntityListingControllerInterface
+   * @var EntityCrudOperationsControllerInterface|NonPaginatedEntityListingControllerInterface|PaginatedEntityListingControllerInterface
    */
   private $controller;
 
diff --git a/src/Entity/Controller/OrganizationController.php b/src/Entity/Controller/OrganizationController.php
index d98d1d7..f788cfd 100644
--- a/src/Entity/Controller/OrganizationController.php
+++ b/src/Entity/Controller/OrganizationController.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Controller;
 
+use Apigee\Edge\Api\Management\Entity\OrganizationInterface;
 use Apigee\Edge\Api\Management\Controller\OrganizationController as EdgeOrganizationController;
 use Apigee\Edge\Api\Management\Controller\OrganizationControllerInterface as EdgeOrganizationControllerInterface;
 use Apigee\Edge\Entity\EntityInterface;
@@ -46,7 +47,7 @@ final class OrganizationController implements OrganizationControllerInterface {
   /**
    * The internal entity cache.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\OrganizationInterface[]
+   * @var OrganizationInterface[]
    */
   private $cache = [];
 
@@ -62,14 +63,14 @@ final class OrganizationController implements OrganizationControllerInterface {
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * OrganizationController constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
    */
   public function __construct(SDKConnectorInterface $connector) {
diff --git a/src/Entity/Developer.php b/src/Entity/Developer.php
index 9d7cb9f..c0021c9 100644
--- a/src/Entity/Developer.php
+++ b/src/Entity/Developer.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface;
 use Apigee\Edge\Api\Management\Entity\Developer as EdgeDeveloper;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Apigee\Edge\Exception\ApiException;
@@ -101,7 +102,7 @@ class Developer extends EdgeEntityBase implements DeveloperInterface {
    * This does not get saved to the persistent entity cache because it gets
    * calculated only when it is necessary, when getCompanies() gets called.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    *
    * @see getCompanies()
    */
@@ -277,7 +278,7 @@ class Developer extends EdgeEntityBase implements DeveloperInterface {
     // companies.
     // @see https://apidocs.apigee.com/management/apis/get/organizations/%7Borg_name%7D/developers
     if ($this->companiesCache->getCompanies($this->getDeveloperId()) === NULL) {
-      /** @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $controller */
+      /** @var DeveloperControllerInterface $controller */
       $controller = \Drupal::service('apigee_edge.controller.developer');
       // If controller has an internal cache let's check whether this
       // developer in it and it has a non-empty company list.
@@ -426,7 +427,7 @@ class Developer extends EdgeEntityBase implements DeveloperInterface {
   public function getOwnerId() {
     if ($this->drupalUserId === NULL) {
       if ($this->getEmail()) {
-        /** @var \Drupal\user\UserInterface $account */
+        /** @var UserInterface $account */
         $account = user_load_by_mail($this->getEmail());
         if ($account) {
           $this->drupalUserId = $account->id();
@@ -503,7 +504,7 @@ class Developer extends EdgeEntityBase implements DeveloperInterface {
    */
   public static function postDelete(EntityStorageInterface $storage, array $entities) {
     parent::postDelete($storage, $entities);
-    /** @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $cache */
+    /** @var DeveloperCompaniesCacheInterface $cache */
     $cache = \Drupal::service('apigee_edge.controller.cache.developer_companies');
     $developer_mail_id_map = array_map(function (Developer $entity) {
       return $entity->getDeveloperId();
diff --git a/src/Entity/DeveloperApp.php b/src/Entity/DeveloperApp.php
index 30eafc2..81ba1b2 100644
--- a/src/Entity/DeveloperApp.php
+++ b/src/Entity/DeveloperApp.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Drupal\Core\Field\BaseFieldDefinition;
 use Apigee\Edge\Api\Management\Entity\DeveloperApp as EdgeDeveloperApp;
 use Apigee\Edge\Entity\EntityInterface as EdgeEntityInterface;
 use Drupal\apigee_edge\Exception\InvalidArgumentException;
@@ -167,7 +168,7 @@ class DeveloperApp extends App implements DeveloperAppInterface {
       if ($this->getDeveloperId()) {
         $developer = Developer::load($this->getDeveloperId());
         if ($developer) {
-          /** @var \Drupal\user\UserInterface $account */
+          /** @var UserInterface $account */
           $account = user_load_by_mail($developer->getEmail());
           if ($account) {
             $this->drupalUserId = $account->id();
@@ -247,7 +248,7 @@ class DeveloperApp extends App implements DeveloperAppInterface {
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $definitions */
+    /** @var BaseFieldDefinition[] $definitions */
     $definitions = parent::baseFieldDefinitions($entity_type);
     $developer_app_singular_label = \Drupal::entityTypeManager()->getDefinition('developer_app')->getSingularLabel();
     $developer_app_singular_label = mb_convert_case($developer_app_singular_label, MB_CASE_TITLE);
diff --git a/src/Entity/DeveloperAppRouteProvider.php b/src/Entity/DeveloperAppRouteProvider.php
index 8df0bf5..1deffe5 100644
--- a/src/Entity/DeveloperAppRouteProvider.php
+++ b/src/Entity/DeveloperAppRouteProvider.php
@@ -117,10 +117,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the add-form route for developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ -138,10 +138,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the edit-form route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEditFormRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ -162,10 +162,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the delete-form route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteFormRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ -183,10 +183,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the canonical route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCanonicalRouteByDeveloper(EntityTypeInterface $entity_type) {
@@ -204,10 +204,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the collection route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRouteByDeveloper(EntityTypeInterface $entity_type) {
@@ -225,10 +225,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the app analytics route for a developer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAnalyticsRouteForDeveloper(EntityTypeInterface $entity_type) {
@@ -246,10 +246,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the add-api-key-form route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddApiKeyRoute(EntityTypeInterface $entity_type) {
@@ -267,10 +267,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the delete-api-key-form route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDeleteApiKeyRoute(EntityTypeInterface $entity_type) {
@@ -287,10 +287,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the revoke-api-key-form route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevokeApiKeyRoute(EntityTypeInterface $entity_type) {
@@ -307,7 +307,7 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * If route contains the {user} parameter add required changes to the route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to be checked and altered if needed.
    */
   private function ensureUserParameter(Route $route) {
@@ -324,10 +324,10 @@ class DeveloperAppRouteProvider extends AppRouteProvider {
   /**
    * Gets the api key route for a developer app.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getApiKeyRouteDeveloperApp(EntityTypeInterface $entity_type) {
diff --git a/src/Entity/DeveloperCompaniesCache.php b/src/Entity/DeveloperCompaniesCache.php
index 1e550e5..b0f758b 100644
--- a/src/Entity/DeveloperCompaniesCache.php
+++ b/src/Entity/DeveloperCompaniesCache.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
+use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
 use Drupal\apigee_edge\MemoryCacheFactoryInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 
@@ -31,14 +33,14 @@ final class DeveloperCompaniesCache implements DeveloperCompaniesCacheInterface
   /**
    * The memory cache backend.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   private $backend;
 
   /**
    * DeveloperCompaniesCache constructor.
    *
-   * @param \Drupal\apigee_edge\MemoryCacheFactoryInterface $memory_cache_factory
+   * @param MemoryCacheFactoryInterface $memory_cache_factory
    *   The memory cache factory service.
    */
   public function __construct(MemoryCacheFactoryInterface $memory_cache_factory) {
@@ -57,7 +59,7 @@ final class DeveloperCompaniesCache implements DeveloperCompaniesCacheInterface
    * {@inheritdoc}
    */
   public function saveCompanies(array $developers): void {
-    /** @var \Apigee\Edge\Api\Management\Entity\DeveloperInterface $developer */
+    /** @var DeveloperInterface $developer */
     foreach ($developers as $developer) {
       $tags = array_merge([
         "developer:{$developer->getDeveloperId()}",
diff --git a/src/Entity/DeveloperCompaniesCacheInterface.php b/src/Entity/DeveloperCompaniesCacheInterface.php
index c6d3bc7..53a45fb 100644
--- a/src/Entity/DeveloperCompaniesCacheInterface.php
+++ b/src/Entity/DeveloperCompaniesCacheInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Apigee\Edge\Api\Management\Entity\DeveloperInterface;
 /**
  * Definition of the developer company membership cache.
  *
@@ -44,7 +45,7 @@ interface DeveloperCompaniesCacheInterface {
   /**
    * Saves developers' companies to cache.
    *
-   * @param \Apigee\Edge\Api\Management\Entity\DeveloperInterface[] $developers
+   * @param DeveloperInterface[] $developers
    *   Developer entities.
    */
   public function saveCompanies(array $developers): void;
diff --git a/src/Entity/EdgeEntityBase.php b/src/Entity/EdgeEntityBase.php
index b6f5499..9d3577f 100644
--- a/src/Entity/EdgeEntityBase.php
+++ b/src/Entity/EdgeEntityBase.php
@@ -33,7 +33,7 @@ abstract class EdgeEntityBase extends EntityBase implements EdgeEntityInterface
   /**
    * The decorated SDK entity.
    *
-   * @var \Apigee\Edge\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $decorated;
 
@@ -44,7 +44,7 @@ abstract class EdgeEntityBase extends EntityBase implements EdgeEntityInterface
    *   An array of values to set, keyed by property name.
    * @param null|string $entity_type
    *   Type of the entity.
-   * @param \Apigee\Edge\Entity\EntityInterface|null $decorated
+   * @param EntityInterface|null $decorated
    *   The SDK entity that this Drupal entity decorates.
    *
    * @throws \ReflectionException
@@ -120,10 +120,10 @@ abstract class EdgeEntityBase extends EntityBase implements EdgeEntityInterface
   /**
    * Creates a Drupal entity from an SDK Entity.
    *
-   * @param \Apigee\Edge\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An SDK entity.
    *
-   * @return \Drupal\apigee_edge\Entity\EdgeEntityInterface
+   * @return EdgeEntityInterface
    *   The Drupal entity that decorates the SDK entity.
    */
   public static function createFrom(EntityInterface $entity): EdgeEntityInterface {
diff --git a/src/Entity/EdgeEntityType.php b/src/Entity/EdgeEntityType.php
index 2d0cd61..ab99d05 100644
--- a/src/Entity/EdgeEntityType.php
+++ b/src/Entity/EdgeEntityType.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Drupal\Core\Entity\Exception\EntityTypeIdLengthException;
 use Drupal\apigee_edge\Entity\ListBuilder\EdgeEntityListBuilder;
 use Drupal\apigee_edge\Exception\RuntimeException;
 use Drupal\Core\Config\ImmutableConfig;
@@ -51,7 +52,7 @@ class EdgeEntityType extends EntityType implements EdgeEntityTypeInterface {
    * @param array $definition
    *   An array of values from the annotation.
    *
-   * @throws \Drupal\Core\Entity\Exception\EntityTypeIdLengthException
+   * @throws EntityTypeIdLengthException
    *   Thrown when attempting to instantiate an entity type with too long ID.
    */
   public function __construct(array $definition) {
@@ -112,10 +113,10 @@ class EdgeEntityType extends EntityType implements EdgeEntityTypeInterface {
    *   - entity_label_singular
    *   - entity_label_plural.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig|null
+   * @return ImmutableConfig|null
    *   Config object.
    *
-   * @throws \Drupal\apigee_edge\Exception\RuntimeException
+   * @throws RuntimeException
    *   If the provided config object does not exists.
    */
   private function getConfigWithEntityLabels(): ?ImmutableConfig {
diff --git a/src/Entity/FieldableEdgeEntityBase.php b/src/Entity/FieldableEdgeEntityBase.php
index 431391d..b2d7921 100644
--- a/src/Entity/FieldableEdgeEntityBase.php
+++ b/src/Entity/FieldableEdgeEntityBase.php
@@ -20,6 +20,9 @@
 
 namespace Drupal\apigee_edge\Entity;
 
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\apigee_edge\Exception\InvalidArgumentException;
 use Drupal\Core\Entity\EntityConstraintViolationList;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -62,7 +65,7 @@ abstract class FieldableEdgeEntityBase extends EdgeEntityBase implements Fieldab
   /**
    * Local cache for for fields.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface[]
+   * @var FieldItemListInterface[]
    *
    * @see \Drupal\apigee_edge\Entity\FieldableEdgeEntityBase::get()
    */
@@ -218,7 +221,7 @@ abstract class FieldableEdgeEntityBase extends EdgeEntityBase implements Fieldab
    * @param string $type
    *   Type of the property.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition|null
+   * @return BaseFieldDefinition|null
    *   Base field definition if found, null otherwise.
    */
   protected static function getBaseFieldDefinition(string $name, string $type): ?BaseFieldDefinition {
@@ -267,7 +270,7 @@ abstract class FieldableEdgeEntityBase extends EdgeEntityBase implements Fieldab
       }
 
       // Based on \Drupal\Core\Entity\ContentEntityBase::getTranslatedField().
-      /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $manager */
+      /** @var FieldTypePluginManagerInterface $manager */
       $manager = \Drupal::service('plugin.manager.field.field_type');
       $this->fields[$field_name] = $manager->createFieldItemList($this, $field_name, $value);
     }
@@ -404,7 +407,7 @@ abstract class FieldableEdgeEntityBase extends EdgeEntityBase implements Fieldab
    *   Value of a property.
    */
   protected function convertFieldValueToPropertyValue(string $field_name) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
+    /** @var FieldDefinitionInterface $definition */
     $definition = $this->getFieldDefinition($field_name);
     if ($definition->getFieldStorageDefinition()->getCardinality() === 1) {
       $value = $this->get($field_name)->value;
diff --git a/src/Entity/Form/AppCreateForm.php b/src/Entity/Form/AppCreateForm.php
index b67d1fd..fc71c5c 100644
--- a/src/Entity/Form/AppCreateForm.php
+++ b/src/Entity/Form/AppCreateForm.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity\Form;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Apigee\Edge\Api\Management\Entity\AppCredential;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface;
@@ -41,16 +43,16 @@ abstract class AppCreateForm extends AppForm {
   /**
    * The API product controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface
+   * @var ApiProductControllerInterface
    */
   protected $apiProductController;
 
   /**
    * AppCreateForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller) {
@@ -84,7 +86,7 @@ abstract class AppCreateForm extends AppForm {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function alterFormBeforeApiProductElement(array &$form, FormStateInterface $form_state): void {}
@@ -94,7 +96,7 @@ abstract class AppCreateForm extends AppForm {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   protected function alterFormWithApiProductElement(array &$form, FormStateInterface $form_state): void {}
@@ -107,13 +109,13 @@ abstract class AppCreateForm extends AppForm {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
    *   The API product render element
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @see apiProductList()
    */
@@ -164,7 +166,7 @@ abstract class AppCreateForm extends AppForm {
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   The complete form.
@@ -204,9 +206,9 @@ abstract class AppCreateForm extends AppForm {
     $app_credential_controller = $this->appCredentialController($app->getAppOwner(), $app->getName());
     $logger = $this->logger('apigee_edge');
 
-    /** @var \Apigee\Edge\Api\Management\Entity\AppCredential[] $credentials */
+    /** @var AppCredential[] $credentials */
     $credentials = $app->getCredentials();
-    /** @var \Apigee\Edge\Api\Management\Entity\AppCredential $credential */
+    /** @var AppCredential $credential */
     $credential = reset($credentials);
     $selected_products = array_values(array_filter((array) $form_state->getValue('api_products')));
 
diff --git a/src/Entity/Form/AppDeleteForm.php b/src/Entity/Form/AppDeleteForm.php
index 4e3dc1b..7b6da8c 100644
--- a/src/Entity/Form/AppDeleteForm.php
+++ b/src/Entity/Form/AppDeleteForm.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Form;
 
+use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 
@@ -41,7 +42,7 @@ class AppDeleteForm extends EdgeEntityDeleteForm {
    * {@inheritdoc}
    */
   protected function verificationCode() {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->getEntity();
     // Request the name of the app instead of the app id (UUID).
     return $app->getName();
diff --git a/src/Entity/Form/AppEditForm.php b/src/Entity/Form/AppEditForm.php
index d184e9c..03da6fe 100644
--- a/src/Entity/Form/AppEditForm.php
+++ b/src/Entity/Form/AppEditForm.php
@@ -40,16 +40,16 @@ abstract class AppEditForm extends AppForm {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $render;
 
   /**
    * AppEditForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $render
+   * @param RendererInterface $render
    *   The renderer service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $render) {
@@ -74,7 +74,7 @@ abstract class AppEditForm extends AppForm {
     $form = parent::form($form, $form_state);
     $form['#cache']['contexts'][] = 'user.permissions';
 
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;
 
     $app_settings = $this->config('apigee_edge.common_app_settings');
diff --git a/src/Entity/Form/AppForm.php b/src/Entity/Form/AppForm.php
index 63aa517..503619b 100644
--- a/src/Entity/Form/AppForm.php
+++ b/src/Entity/Form/AppForm.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Form;
 
+use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface;
 use Drupal\apigee_edge\Entity\Storage\EdgeEntityStorageBase;
@@ -40,7 +41,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
   /**
    * Constructs AppCreationForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -55,7 +56,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
     $form = parent::form($form, $form_state);
     $form['#tree'] = TRUE;
 
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;
 
     // By default we render this as a simple text field, sub-classes can change
@@ -100,7 +101,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
   /**
    * Returns the list of API product that the user can see on the form.
    *
-   * @return \Drupal\apigee_edge\Entity\ApiProductInterface[]
+   * @return ApiProductInterface[]
    *   Array of API product entities.
    */
   abstract protected function apiProductList(array $form, FormStateInterface $form_state): array;
@@ -108,7 +109,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
   /**
    * Returns the label of the Save button on the form.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translatable label.
    */
   protected function saveButtonLabel() : TranslatableMarkup {
@@ -119,7 +120,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $entity = parent::buildEntity($form, $form_state);
     // Set the owner of the app. Without this an app can not be saved.
     // @see \Drupal\apigee_edge\Entity\Controller\DeveloperAppEdgeEntityControllerProxy::create()
@@ -131,7 +132,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;
     $was_new = $app->isNew();
     $context = [
@@ -184,7 +185,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
    *   SAVED_NEW, SAVED_UPDATED or SAVED_UNKNOWN.
    */
   protected function saveApp(): int {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $app */
+    /** @var AppInterface $app */
     $app = $this->entity;
     $was_new = $app->isNew();
     try {
@@ -212,9 +213,9 @@ abstract class AppForm extends FieldableEdgeEntityForm {
    * It should log failures but it should not display messages to users.
    * This is handled in save().
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity which credentials gets updated.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object with the credential related changes.
    *
    * @return bool|null
@@ -226,7 +227,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
   /**
    * Returns the URL where the user should be redirected after form submission.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect URL.
    */
   protected function getRedirectUrl(): Url {
@@ -249,7 +250,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
    * @param string $app_name
    *   The name of an app.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface
+   * @return AppCredentialControllerInterface
    *   The app credential controller.
    */
   abstract protected function appCredentialController(string $owner, string $app_name) : AppCredentialControllerInterface;
@@ -261,7 +262,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
    *   The app name.
    * @param array $element
    *   Form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return bool
@@ -281,7 +282,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
   /**
    * Returns the developer/team (company) app entity definition.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The app entity definition.
    */
   abstract protected function appEntityDefinition(): EntityTypeInterface;
@@ -289,7 +290,7 @@ abstract class AppForm extends FieldableEdgeEntityForm {
   /**
    * Returns the app owner (developer or team (company)) entity definition.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The app owner entity definition.
    */
   abstract protected function appOwnerEntityDefinition(): EntityTypeInterface;
diff --git a/src/Entity/Form/DeveloperAppCreateForm.php b/src/Entity/Form/DeveloperAppCreateForm.php
index 5df5626..e0f1dc6 100644
--- a/src/Entity/Form/DeveloperAppCreateForm.php
+++ b/src/Entity/Form/DeveloperAppCreateForm.php
@@ -39,29 +39,29 @@ class DeveloperAppCreateForm extends DeveloperAppCreateFormBase {
   /**
    * The developer controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface
+   * @var DeveloperControllerInterface
    */
   protected $developerController;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs DeveloperAppCreateForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The developer app credential controller factory.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller, DeveloperControllerInterface $developer_controller, DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory, RendererInterface $renderer) {
@@ -132,10 +132,10 @@ class DeveloperAppCreateForm extends DeveloperAppCreateFormBase {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public function updateApiProductList(array $form, FormStateInterface $form_state) : AjaxResponse {
diff --git a/src/Entity/Form/DeveloperAppCreateFormBase.php b/src/Entity/Form/DeveloperAppCreateFormBase.php
index fd34207..7b47dc1 100644
--- a/src/Entity/Form/DeveloperAppCreateFormBase.php
+++ b/src/Entity/Form/DeveloperAppCreateFormBase.php
@@ -36,18 +36,18 @@ abstract class DeveloperAppCreateFormBase extends AppCreateForm {
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface
+   * @var DeveloperAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;
 
   /**
    * DeveloperAppCreateFormBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The developer app credential controller factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ApiProductControllerInterface $api_product_controller, DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory) {
diff --git a/src/Entity/Form/DeveloperAppCreateFormForDeveloper.php b/src/Entity/Form/DeveloperAppCreateFormForDeveloper.php
index 9cd88ba..0b5d46a 100644
--- a/src/Entity/Form/DeveloperAppCreateFormForDeveloper.php
+++ b/src/Entity/Form/DeveloperAppCreateFormForDeveloper.php
@@ -31,7 +31,7 @@ class DeveloperAppCreateFormForDeveloper extends DeveloperAppCreateFormBase {
   /**
    * The user from the route, captured in buildForm().
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
diff --git a/src/Entity/Form/DeveloperAppEditForm.php b/src/Entity/Form/DeveloperAppEditForm.php
index baf7877..adcb719 100644
--- a/src/Entity/Form/DeveloperAppEditForm.php
+++ b/src/Entity/Form/DeveloperAppEditForm.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Form;
 
+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface;
@@ -38,18 +39,18 @@ class DeveloperAppEditForm extends AppEditForm {
   /**
    * The app credential controller factory.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface
+   * @var DeveloperAppCredentialControllerFactoryInterface
    */
   protected $appCredentialControllerFactory;
 
   /**
    * Constructs DeveloperAppEditForm.
    *
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
+   * @param DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory
    *   The developer app credential controller factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(DeveloperAppCredentialControllerFactoryInterface $app_credential_controller_factory, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
@@ -79,7 +80,7 @@ class DeveloperAppEditForm extends AppEditForm {
    * {@inheritdoc}
    */
   protected function apiProductList(array $form, FormStateInterface $form_state): array {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface $app */
+    /** @var DeveloperAppInterface $app */
     $app = $this->entity;
 
     // Sanity check, it could happen that the app owner (developer) does not
diff --git a/src/Entity/Form/DeveloperAppFormTrait.php b/src/Entity/Form/DeveloperAppFormTrait.php
index 7792556..53601e3 100644
--- a/src/Entity/Form/DeveloperAppFormTrait.php
+++ b/src/Entity/Form/DeveloperAppFormTrait.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity\Form;
 
+use Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface;
+use Drupal\user\UserInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Exception\ClientErrorException;
 use Drupal\apigee_edge\Entity\ApiProductInterface;
@@ -59,7 +61,7 @@ trait DeveloperAppFormTrait {
     // query to reduce the number API calls. (Entity query may load all
     // developers to return whether the given developer has an app with
     // the provided name already.)
-    /** @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $factory */
+    /** @var DeveloperAppControllerFactoryInterface $factory */
     $factory = \Drupal::service('apigee_edge.controller.developer_app_controller_factory');
     $app = TRUE;
     try {
@@ -110,7 +112,7 @@ trait DeveloperAppFormTrait {
   /**
    * Allows to access to the injected entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   private function getEntityTypeManager(): EntityTypeManagerInterface {
@@ -126,7 +128,7 @@ trait DeveloperAppFormTrait {
    */
   protected function apiProductList(array $form, FormStateInterface $form_state): array {
     $email = $form_state->getValue('owner') ?? $form['owner']['#value'] ?? $form['owner']['#default_value'];
-    /** @var \Drupal\user\UserInterface|null $account */
+    /** @var UserInterface|null $account */
     $account = user_load_by_mail($email);
 
     return array_filter(\Drupal::entityTypeManager()->getStorage('api_product')->loadMultiple(), function (ApiProductInterface $product) use ($account) {
diff --git a/src/Entity/Form/EdgeEntityDeleteForm.php b/src/Entity/Form/EdgeEntityDeleteForm.php
index ac3ce2f..5890e72 100644
--- a/src/Entity/Form/EdgeEntityDeleteForm.php
+++ b/src/Entity/Form/EdgeEntityDeleteForm.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Form;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityDeleteForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -35,7 +36,7 @@ class EdgeEntityDeleteForm extends EntityDeleteForm {
   /**
    * EdgeEntityDeleteForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -76,7 +77,7 @@ class EdgeEntityDeleteForm extends EntityDeleteForm {
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   The complete form.
@@ -101,7 +102,7 @@ class EdgeEntityDeleteForm extends EntityDeleteForm {
   /**
    * The error message that the user should see when verification fails.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The error message to be displayed to the user.
    */
   protected function verificationCodeErrorMessage() {
diff --git a/src/Entity/Form/FieldableEdgeEntityForm.php b/src/Entity/Form/FieldableEdgeEntityForm.php
index e57332e..7f964b0 100644
--- a/src/Entity/Form/FieldableEdgeEntityForm.php
+++ b/src/Entity/Form/FieldableEdgeEntityForm.php
@@ -19,6 +19,9 @@
 
 namespace Drupal\apigee_edge\Entity\Form;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface;
+use Symfony\Component\Validator\ConstraintViolationInterface;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ -38,7 +41,7 @@ abstract class FieldableEdgeEntityForm extends EntityForm implements FieldableEd
   /**
    * The fieldable entity being used by this form.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   protected $entity;
 
@@ -69,7 +72,7 @@ abstract class FieldableEdgeEntityForm extends EntityForm implements FieldableEd
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
-    /** @var \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity */
+    /** @var FieldableEdgeEntityInterface $entity */
     $entity = $this->buildEntity($form, $form_state);
 
     $violations = $entity->validate();
@@ -114,7 +117,7 @@ abstract class FieldableEdgeEntityForm extends EntityForm implements FieldableEd
    * using the form display), it needs to add its fields here and override
    * flagViolations() for displaying the violations.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return string[]
@@ -140,11 +143,11 @@ abstract class FieldableEdgeEntityForm extends EntityForm implements FieldableEd
    * parent::flagViolations($violations, $form, $form_state);
    * @endcode
    *
-   * @param \Drupal\Core\Entity\EntityConstraintViolationListInterface $violations
+   * @param EntityConstraintViolationListInterface $violations
    *   The violations to flag.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @todo Add missing return type-hint in 2.x.
@@ -152,7 +155,7 @@ abstract class FieldableEdgeEntityForm extends EntityForm implements FieldableEd
   protected function flagViolations(EntityConstraintViolationListInterface $violations, array $form, FormStateInterface $form_state) {
     // Flag entity level violations.
     foreach ($violations->getEntityViolations() as $violation) {
-      /** @var \Symfony\Component\Validator\ConstraintViolationInterface $violation */
+      /** @var ConstraintViolationInterface $violation */
       $form_state->setErrorByName(str_replace('.', '][', $violation->getPropertyPath()), $violation->getMessage());
     }
     // Let the form display flag violations of its fields.
@@ -163,7 +166,7 @@ abstract class FieldableEdgeEntityForm extends EntityForm implements FieldableEd
    * {@inheritdoc}
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity */
+    /** @var FieldableEdgeEntityInterface $entity */
     // First, extract values from widgets.
     $extracted = $this->getFormDisplay($form_state)->extractFormValues($entity, $form, $form_state);
 
diff --git a/src/Entity/Form/FieldableEdgeEntityFormInterface.php b/src/Entity/Form/FieldableEdgeEntityFormInterface.php
index e4dcc32..59ea035 100644
--- a/src/Entity/Form/FieldableEdgeEntityFormInterface.php
+++ b/src/Entity/Form/FieldableEdgeEntityFormInterface.php
@@ -35,10 +35,10 @@ interface FieldableEdgeEntityFormInterface extends EdgeEntityFormInterface {
   /**
    * Gets the form display.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   The current form display.
    */
   public function getFormDisplay(FormStateInterface $form_state);
@@ -49,9 +49,9 @@ interface FieldableEdgeEntityFormInterface extends EdgeEntityFormInterface {
    * Sets the form display which will be used for populating form element
    * defaults.
    *
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display
+   * @param EntityFormDisplayInterface $form_display
    *   The form display that the current form operates with.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return $this
diff --git a/src/Entity/ListBuilder/AppListBuilder.php b/src/Entity/ListBuilder/AppListBuilder.php
index 274c3ac..6d8c3c2 100644
--- a/src/Entity/ListBuilder/AppListBuilder.php
+++ b/src/Entity/ListBuilder/AppListBuilder.php
@@ -43,55 +43,55 @@ class AppListBuilder extends EdgeEntityListBuilder {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The app warnings checker.
    *
-   * @var \Drupal\apigee_edge\Entity\AppWarningsCheckerInterface
+   * @var AppWarningsCheckerInterface
    */
   protected $appWarningsChecker;
 
   /**
    * AppListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *   The time service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface|null $config_factory
+   * @param ConfigFactoryInterface|null $config_factory
    *   The config factory.
-   * @param \Drupal\apigee_edge\Entity\AppWarningsCheckerInterface $app_warnings_checker
+   * @param AppWarningsCheckerInterface $app_warnings_checker
    *   The app warnings checker service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, RequestStack $request_stack, TimeInterface $time, ConfigFactoryInterface $config_factory = NULL, AppWarningsCheckerInterface $app_warnings_checker = NULL) {
@@ -179,7 +179,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
    * The info row contains the app's name (link to the details page),
    * status and entity operations.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    * @param array $rows
    *   The info row in the table for app.
@@ -243,7 +243,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
    *
    * The warning row contains the warning messages if there is any.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    * @param array $rows
    *   The warning row in the table for app.
@@ -322,7 +322,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
   /**
    * Renders the name of an app for the entity list.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return array
@@ -338,7 +338,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
   /**
    * Renders the status of an app for the entity list.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return array
@@ -353,7 +353,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
   /**
    * Checks credentials of an app and returns warnings about them.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity to be checked.
    *
    * @return array
@@ -367,7 +367,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
   /**
    * Generates a unique CSS id for an app.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   App entity.
    *
    * @return string
@@ -381,7 +381,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
   /**
    * Returns the CSS ID of the app info row.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return string
@@ -394,7 +394,7 @@ class AppListBuilder extends EdgeEntityListBuilder {
   /**
    * Returns the CSS ID of the app warning row.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return string
diff --git a/src/Entity/ListBuilder/DeveloperAppListBuilderForDeveloper.php b/src/Entity/ListBuilder/DeveloperAppListBuilderForDeveloper.php
index 956c9b9..01a0adb 100644
--- a/src/Entity/ListBuilder/DeveloperAppListBuilderForDeveloper.php
+++ b/src/Entity/ListBuilder/DeveloperAppListBuilderForDeveloper.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\ListBuilder;
 
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Component\Datetime\TimeInterface;
@@ -48,14 +49,14 @@ class DeveloperAppListBuilderForDeveloper extends AppListBuilder implements Cont
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -69,21 +70,21 @@ class DeveloperAppListBuilderForDeveloper extends AppListBuilder implements Cont
   /**
    * DeveloperAppListBuilderForDeveloper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $render
+   * @param RendererInterface $render
    *   The render.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Currently logged-in user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, RendererInterface $render, RequestStack $request_stack, TimeInterface $time, AccountInterface $current_user, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory = NULL) {
@@ -186,7 +187,7 @@ class DeveloperAppListBuilderForDeveloper extends AppListBuilder implements Cont
    * This is enforced for the 'apigee_edge.user.apps' route with the
    * '_user_is_logged_in' requirement.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Returns a redirect to the Apps of the currently logged in user.
    */
   public function appsPage(): RedirectResponse {
@@ -198,11 +199,11 @@ class DeveloperAppListBuilderForDeveloper extends AppListBuilder implements Cont
   /**
    * Returns the title of the "developer app list by user" page.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title of the page.
    */
   public function pageTitle(): TranslatableMarkup {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->routeMatch->getParameter('user');
     if ($account && $account->id() != $this->currentUser->id()) {
       $args['@user'] = Markup::create($account->label());
diff --git a/src/Entity/ListBuilder/EdgeEntityListBuilder.php b/src/Entity/ListBuilder/EdgeEntityListBuilder.php
index aefbed1..44a692c 100644
--- a/src/Entity/ListBuilder/EdgeEntityListBuilder.php
+++ b/src/Entity/ListBuilder/EdgeEntityListBuilder.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity\ListBuilder;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -45,29 +47,29 @@ class EdgeEntityListBuilder extends EntityListBuilder {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * EdgeEntityListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory = NULL) {
     parent::__construct($entity_type, $entity_type_manager->getStorage($entity_type->id()));
@@ -104,7 +106,7 @@ class EdgeEntityListBuilder extends EntityListBuilder {
   /**
    * Builds an entity query used by entity listing.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The entity query.
    */
   protected function buildEntityIdQuery(): QueryInterface {
diff --git a/src/Entity/Query/AppQueryBase.php b/src/Entity/Query/AppQueryBase.php
index c1357a6..608124f 100644
--- a/src/Entity/Query/AppQueryBase.php
+++ b/src/Entity/Query/AppQueryBase.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity\Query;
 
+use Drupal\apigee_edge\Entity\Storage\AppStorage;
+use Apigee\Edge\Api\Management\Entity\AppInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\Core\Entity\EntityStorageException;
@@ -43,7 +45,7 @@ abstract class AppQueryBase extends Query {
    * @param string $owner
    *   The owner an of an app.
    *
-   * @return \Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface
+   * @return AppByOwnerControllerInterface
    *   The app by owner controller instance for the owner.
    */
   abstract protected function appByOwnerController(string $owner) : AppByOwnerControllerInterface;
@@ -52,7 +54,7 @@ abstract class AppQueryBase extends Query {
    * {@inheritdoc}
    */
   protected function getFromStorage(): array {
-    /** @var \Drupal\apigee_edge\Entity\Storage\AppStorage $storage */
+    /** @var AppStorage $storage */
     $storage = $this->entityTypeManager->getStorage($this->entityTypeId);
     $ids = NULL;
     $app_owner_in_conditions = NULL;
@@ -148,7 +150,7 @@ abstract class AppQueryBase extends Query {
         }
 
         try {
-          /** @var \Apigee\Edge\Api\Management\Entity\AppInterface $entity */
+          /** @var AppInterface $entity */
           $entity = $this->appByOwnerController($app_owner_in_conditions)->load($app_name);
           // We have to use the storage because it ensures that next time the
           // app can be found in the cache (and various other things as well).
diff --git a/src/Entity/Query/DeveloperAppQuery.php b/src/Entity/Query/DeveloperAppQuery.php
index 29f6654..7a16bed 100644
--- a/src/Entity/Query/DeveloperAppQuery.php
+++ b/src/Entity/Query/DeveloperAppQuery.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Query;
 
+use Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface;
 use Apigee\Edge\Api\Management\Controller\AppByOwnerControllerInterface;
 
 /**
@@ -38,7 +39,7 @@ class DeveloperAppQuery extends AppQueryBase {
    * {@inheritdoc}
    */
   protected function appByOwnerController(string $owner): AppByOwnerControllerInterface {
-    /** @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $dev_app_controller_factory */
+    /** @var DeveloperAppControllerFactoryInterface $dev_app_controller_factory */
     $dev_app_controller_factory = \Drupal::service('apigee_edge.controller.developer_app_controller_factory');
     return $dev_app_controller_factory->developerAppController($owner);
   }
diff --git a/src/Entity/Query/Query.php b/src/Entity/Query/Query.php
index d8ac26a..71cc54b 100644
--- a/src/Entity/Query/Query.php
+++ b/src/Entity/Query/Query.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\apigee_edge\Entity\Query;
 
+use Drupal\apigee_edge\Entity\EdgeEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -50,21 +52,21 @@ class Query extends QueryBase implements QueryInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a Query object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
    *   - OR: at least one of the conditions on the query need to match.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, string $conjunction, array $namespaces, EntityTypeManagerInterface $entity_type_manager) {
@@ -135,7 +137,7 @@ class Query extends QueryBase implements QueryInterface {
    */
   protected function getEntityIdProperties(): array {
     $storage = $this->entityTypeManager->getStorage($this->entityTypeId);
-    /** @var \Drupal\apigee_edge\Entity\EdgeEntityInterface $entity */
+    /** @var EdgeEntityInterface $entity */
     $entity = $storage->create();
     return $entity::uniqueIdProperties();
   }
@@ -143,10 +145,10 @@ class Query extends QueryBase implements QueryInterface {
   /**
    * Loads entities from the entity storage for querying.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of matching entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getFromStorage(): array {
     $storage = $this->entityTypeManager->getStorage($this->entityTypeId);
diff --git a/src/Entity/Query/QueryFactory.php b/src/Entity/Query/QueryFactory.php
index b3f032e..da7071a 100644
--- a/src/Entity/Query/QueryFactory.php
+++ b/src/Entity/Query/QueryFactory.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Entity\Query;
 
+use Drupal\apigee_edge\Entity\EdgeEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryBase;
@@ -40,14 +41,14 @@ class QueryFactory implements QueryFactoryInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a QueryFactory object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -59,7 +60,7 @@ class QueryFactory implements QueryFactoryInterface {
    * {@inheritdoc}
    */
   public function get(EntityTypeInterface $entity_type, $conjunction) {
-    /** @var \Drupal\apigee_edge\Entity\EdgeEntityTypeInterface $entity_type */
+    /** @var EdgeEntityTypeInterface $entity_type */
     $rc = new \ReflectionClass($entity_type->getQueryClass());
     return $rc->newInstance($entity_type, $conjunction, $this->namespaces, $this->entityTypeManager);
   }
diff --git a/src/Entity/Storage/ApiProductStorage.php b/src/Entity/Storage/ApiProductStorage.php
index c579bd6..36e776c 100644
--- a/src/Entity/Storage/ApiProductStorage.php
+++ b/src/Entity/Storage/ApiProductStorage.php
@@ -39,24 +39,24 @@ class ApiProductStorage extends EdgeEntityStorageBase implements ApiProductStora
   /**
    * The API product controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface
+   * @var ApiProductControllerInterface
    */
   private $apiProductController;
 
   /**
    * Constructs an APIProductStorage instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge\Entity\Controller\ApiProductControllerInterface $api_product_controller
+   * @param ApiProductControllerInterface $api_product_controller
    *   The API product controller service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, ApiProductControllerInterface $api_product_controller, ConfigFactoryInterface $config) {
diff --git a/src/Entity/Storage/AppStorage.php b/src/Entity/Storage/AppStorage.php
index f16d5d8..faefa5e 100644
--- a/src/Entity/Storage/AppStorage.php
+++ b/src/Entity/Storage/AppStorage.php
@@ -42,22 +42,22 @@ abstract class AppStorage extends AttributesAwareFieldableEdgeEntityStorageBase
   /**
    * The app controller service.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\AppControllerInterface
+   * @var AppControllerInterface
    */
   protected $appController;
 
   /**
    * AppStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, AppControllerInterface $app_controller) {
@@ -103,7 +103,7 @@ abstract class AppStorage extends AttributesAwareFieldableEdgeEntityStorageBase
    * @param string $uuid
    *   App UUID.
    *
-   * @return \Drupal\apigee_edge\Entity\AppInterface|null
+   * @return AppInterface|null
    *   The unchanged entity, or NULL if the entity cannot be loaded.
    *
    * @TODO: this method should be also available in the AppStorageInterface, but
@@ -161,7 +161,7 @@ abstract class AppStorage extends AttributesAwareFieldableEdgeEntityStorageBase
    * {@inheritdoc}
    */
   final protected function getPersistentCacheTags(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $cache_tags = parent::getPersistentCacheTags($entity);
     return array_merge($cache_tags, $this->getCacheTagsByOwner($entity));
   }
@@ -169,14 +169,14 @@ abstract class AppStorage extends AttributesAwareFieldableEdgeEntityStorageBase
   /**
    * Generates cache tags for an app.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   App entity.
    *
    * @return array
    *   Array of cache tags.
    */
   private function getPersistentCacheTagsForAppName(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     $cache_tags = array_merge([
       "{$this->entityTypeId}",
       "{$this->entityTypeId}:app_names",
@@ -194,7 +194,7 @@ abstract class AppStorage extends AttributesAwareFieldableEdgeEntityStorageBase
    * when app's owner gets deleted the related app cache entries gets
    * invalidated as well.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return array
@@ -244,7 +244,7 @@ abstract class AppStorage extends AttributesAwareFieldableEdgeEntityStorageBase
       return;
     }
 
-    /** @var \Drupal\apigee_edge\Entity\AppInterface $entity */
+    /** @var AppInterface $entity */
     foreach ($entities as $entity) {
       // Create an additional cache entry for each app that stores the app id
       // for each developerId or company (team) name + app name combinations.
diff --git a/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageBase.php b/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageBase.php
index 3497d18..e74ebde 100644
--- a/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageBase.php
+++ b/src/Entity/Storage/AttributesAwareFieldableEdgeEntityStorageBase.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Entity\Storage;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Apigee\Edge\Entity\Property\AttributesPropertyInterface;
 /**
  * Storage for fieldable Edge entities that supports attributes.
  */
@@ -29,9 +31,9 @@ abstract class AttributesAwareFieldableEdgeEntityStorageBase extends FieldableEd
    * {@inheritdoc}
    */
   public function countFieldData($storage_definition, $as_bool = FALSE) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $storage_definition */
+    /** @var FieldStorageDefinitionInterface $storage_definition */
     $count = 0;
-    /** @var \Apigee\Edge\Entity\Property\AttributesPropertyInterface[] $entities */
+    /** @var AttributesPropertyInterface[] $entities */
     $entities = $this->loadMultiple();
     foreach ($entities as $entity) {
       if ($entity->getAttributeValue($storage_definition->getName()) !== NULL) {
diff --git a/src/Entity/Storage/DeveloperAppStorage.php b/src/Entity/Storage/DeveloperAppStorage.php
index f101f2c..b7513de 100644
--- a/src/Entity/Storage/DeveloperAppStorage.php
+++ b/src/Entity/Storage/DeveloperAppStorage.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Entity\Storage;
 
+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
 use Drupal\apigee_edge\Entity\Controller\AppControllerInterface;
 use Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface;
@@ -41,35 +42,35 @@ class DeveloperAppStorage extends AppStorage implements DeveloperAppStorageInter
   /**
    * The app entity controller for unified CRUDL operations.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\EdgeEntityControllerInterface
+   * @var EdgeEntityControllerInterface
    */
   private $appEntityController;
 
   /**
    * The email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;
 
   /**
    * DeveloperAppStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Drupal\apigee_edge\Entity\Controller\DeveloperAppControllerFactoryInterface $developer_app_controller_factory
+   * @param DeveloperAppControllerFactoryInterface $developer_app_controller_factory
    *   The developer app controller factory service.
-   * @param \Drupal\apigee_edge\Entity\Controller\AppControllerInterface $app_controller
+   * @param AppControllerInterface $app_controller
    *   The app controller service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, DeveloperAppControllerFactoryInterface $developer_app_controller_factory, AppControllerInterface $app_controller, ConfigFactoryInterface $config, EmailValidatorInterface $email_validator) {
@@ -127,7 +128,7 @@ class DeveloperAppStorage extends AppStorage implements DeveloperAppStorageInter
     // gets deleted then _all_ its cached developer app data gets purged along
     // with it.
     $cache_tags = ["developer:{$app->getAppOwner()}"];
-    /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface $app */
+    /** @var DeveloperAppInterface $app */
     // Add the owner of the app (Drupal user id) to ensure when the Drupal user
     // gets deleted then _all_ its cached developer app data gets purged along
     // with it. (The additional cache tag by developer id should be enough
diff --git a/src/Entity/Storage/DeveloperAppStorageInterface.php b/src/Entity/Storage/DeveloperAppStorageInterface.php
index d3cc8dd..63c94b2 100644
--- a/src/Entity/Storage/DeveloperAppStorageInterface.php
+++ b/src/Entity/Storage/DeveloperAppStorageInterface.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Entity\Storage;
 
+use Drupal\apigee_edge\Entity\DeveloperApp;
 /**
  * Defines an interface for developer app entity storage classes.
  */
@@ -30,7 +31,7 @@ interface DeveloperAppStorageInterface extends AttributesAwareFieldableEdgeEntit
    * @param string $developer_id
    *   Developer id (UUID) or email address of a developer.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperApp[]
+   * @return DeveloperApp[]
    *   The array of the developer apps of the given developer.
    */
   public function loadByDeveloper(string $developer_id): array;
diff --git a/src/Entity/Storage/DeveloperStorage.php b/src/Entity/Storage/DeveloperStorage.php
index 0955b33..cefdc30 100644
--- a/src/Entity/Storage/DeveloperStorage.php
+++ b/src/Entity/Storage/DeveloperStorage.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\apigee_edge\Entity\Storage;
 
+use Drupal\apigee_edge\Entity\DeveloperInterface;
+use Drupal\apigee_edge\Entity\Developer;
 use Apigee\Edge\Api\Management\Controller\DeveloperControllerInterface;
 use Apigee\Edge\Exception\ApiException;
 use Drupal\apigee_edge\Entity\Controller\CachedManagementApiEdgeEntityControllerProxy;
@@ -51,26 +53,26 @@ class DeveloperStorage extends EdgeEntityStorageBase implements DeveloperStorage
   /**
    * Developer company membership cache.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface
+   * @var DeveloperCompaniesCacheInterface
    */
   private $developerCompanies;
 
   /**
    * Constructs an DeveloperStorage instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
-   * @param \Apigee\Edge\Api\Management\Controller\DeveloperControllerInterface $developer_controller
+   * @param DeveloperControllerInterface $developer_controller
    *   The developer controller service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Configuration factory.
-   * @param \Drupal\apigee_edge\Entity\DeveloperCompaniesCacheInterface $developer_companies_cache
+   * @param DeveloperCompaniesCacheInterface $developer_companies_cache
    *   Developer company membership cache.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time, DeveloperControllerInterface $developer_controller, ConfigFactoryInterface $config, DeveloperCompaniesCacheInterface $developer_companies_cache) {
@@ -123,7 +125,7 @@ class DeveloperStorage extends EdgeEntityStorageBase implements DeveloperStorage
         // It could be an integer if developer UUID has been used as as an id
         // instead of the email address.
         if (is_object($item)) {
-          /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $item */
+          /** @var DeveloperInterface $item */
           $carry[$item->getDeveloperId()] = $item;
         }
         return $carry;
@@ -146,7 +148,7 @@ class DeveloperStorage extends EdgeEntityStorageBase implements DeveloperStorage
    * {@inheritdoc}
    */
   protected function doSave($id, EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $entity */
+    /** @var DeveloperInterface $entity */
     $developer_status = $entity->getStatus();
     $result = parent::doSave($id, $entity);
 
@@ -173,7 +175,7 @@ class DeveloperStorage extends EdgeEntityStorageBase implements DeveloperStorage
    * {@inheritdoc}
    */
   protected function getPersistentCacheTags(EntityInterface $entity) {
-    /** @var \Drupal\apigee_edge\Entity\Developer $entity */
+    /** @var Developer $entity */
     $cache_tags = parent::getPersistentCacheTags($entity);
     $cache_tags = $this->sanitizeCacheTags($entity->id(), $cache_tags);
     // Create tags by developerId (besides email address).
@@ -240,7 +242,7 @@ class DeveloperStorage extends EdgeEntityStorageBase implements DeveloperStorage
     // instead of the email address. This way we can load a developer from
     // cache by using both ids.
     foreach ($entities as $entity) {
-      /** @var \Drupal\apigee_edge\Entity\Developer $entity */
+      /** @var Developer $entity */
       $this->cacheBackend->set($this->buildCacheId($entity->getDeveloperId()), $entity, $this->getPersistentCacheExpiration(), $this->getPersistentCacheTags($entity));
     }
   }
diff --git a/src/Entity/Storage/EdgeEntityStorageBase.php b/src/Entity/Storage/EdgeEntityStorageBase.php
index 58e42f5..585abf0 100644
--- a/src/Entity/Storage/EdgeEntityStorageBase.php
+++ b/src/Entity/Storage/EdgeEntityStorageBase.php
@@ -53,7 +53,7 @@ abstract class EdgeEntityStorageBase extends DrupalEntityStorageBase implements
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
@@ -70,20 +70,20 @@ abstract class EdgeEntityStorageBase extends DrupalEntityStorageBase implements
   /**
    * The system time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $systemTime;
 
   /**
    * Constructs an EdgeEntityStorageBase instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Component\Datetime\TimeInterface $system_time
+   * @param TimeInterface $system_time
    *   The system time.
    */
   public function __construct(EntityTypeInterface $entity_type, CacheBackendInterface $cache_backend, MemoryCacheInterface $memory_cache, TimeInterface $system_time) {
@@ -195,7 +195,7 @@ abstract class EdgeEntityStorageBase extends DrupalEntityStorageBase implements
   /**
    * Returns the wrapped controller instance used by this storage.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\EdgeEntityControllerInterface
+   * @return EdgeEntityControllerInterface
    *   The entity controller interface with CRUDL capabilities.
    */
   abstract protected function entityController(): EdgeEntityControllerInterface;
@@ -209,7 +209,7 @@ abstract class EdgeEntityStorageBase extends DrupalEntityStorageBase implements
    * @param callable $action
    *   Communication to perform.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   The converted exception.
    */
   protected function withController(callable $action) {
@@ -246,7 +246,7 @@ abstract class EdgeEntityStorageBase extends DrupalEntityStorageBase implements
    * @return \Drupal\Core\Entity\EntityInterface[]
    *   Array of entities from the storage.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function getFromStorage(array $ids = NULL) {
     $entities = [];
@@ -298,7 +298,7 @@ abstract class EdgeEntityStorageBase extends DrupalEntityStorageBase implements
    * @return array
    *   Array of Drupal entities.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   If Drupal entity ids could not be resolved.
    */
   final protected function processLoadedEntities(?array $ids, array $sdk_entities): array {
diff --git a/src/Entity/Storage/FieldableEdgeEntityStorageBase.php b/src/Entity/Storage/FieldableEdgeEntityStorageBase.php
index cfac289..409c238 100644
--- a/src/Entity/Storage/FieldableEdgeEntityStorageBase.php
+++ b/src/Entity/Storage/FieldableEdgeEntityStorageBase.php
@@ -162,7 +162,7 @@ abstract class FieldableEdgeEntityStorageBase extends EdgeEntityStorageBase impl
    * @see \Drupal\Core\Entity\ContentEntityStorageBase::doCreate()
    */
   protected function doCreate(array $values) {
-    /** @var \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity */
+    /** @var FieldableEdgeEntityInterface $entity */
     $entity = parent::doCreate($values);
     $this->initFieldValues($entity, $values);
     return $entity;
@@ -171,7 +171,7 @@ abstract class FieldableEdgeEntityStorageBase extends EdgeEntityStorageBase impl
   /**
    * Initializes field values.
    *
-   * @param \Drupal\apigee_edge\Entity\FieldableEdgeEntityInterface $entity
+   * @param FieldableEdgeEntityInterface $entity
    *   An entity object.
    * @param array $values
    *   (optional) An associative array of initial field values keyed by field
diff --git a/src/Event/AbstractAppCredentialEvent.php b/src/Event/AbstractAppCredentialEvent.php
index 79492b5..ef14284 100644
--- a/src/Event/AbstractAppCredentialEvent.php
+++ b/src/Event/AbstractAppCredentialEvent.php
@@ -66,7 +66,7 @@ abstract class AbstractAppCredentialEvent extends Event {
   /**
    * App credential.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\AppCredentialInterface
+   * @var AppCredentialInterface
    */
   private $credential;
 
@@ -79,7 +79,7 @@ abstract class AbstractAppCredentialEvent extends Event {
    *   Company name or developer id (UUID by default) depending on the appType.
    * @param string $app_name
    *   Name of the app.
-   * @param \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential
+   * @param AppCredentialInterface $credential
    *   The app credential that has been created.
    */
   public function __construct(string $app_type, string $owner_id, string $app_name, AppCredentialInterface $credential) {
@@ -125,7 +125,7 @@ abstract class AbstractAppCredentialEvent extends Event {
   /**
    * Returns the app credential.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\AppCredentialInterface
+   * @return AppCredentialInterface
    *   The app credential.
    */
   public function getCredential(): AppCredentialInterface {
diff --git a/src/Event/AppCredentialAddApiProductEvent.php b/src/Event/AppCredentialAddApiProductEvent.php
index af09d28..90f7424 100644
--- a/src/Event/AppCredentialAddApiProductEvent.php
+++ b/src/Event/AppCredentialAddApiProductEvent.php
@@ -50,7 +50,7 @@ class AppCredentialAddApiProductEvent extends AbstractAppCredentialEvent {
    *   Company name or developer id (email) depending on the appType.
    * @param string $app_name
    *   Name of the app.
-   * @param \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential
+   * @param AppCredentialInterface $credential
    *   The app credential that has been created.
    * @param array $new_products
    *   Array of API product names that has just been added to the key.
diff --git a/src/Event/AppCredentialDeleteApiProductEvent.php b/src/Event/AppCredentialDeleteApiProductEvent.php
index 31a4d38..46ad911 100644
--- a/src/Event/AppCredentialDeleteApiProductEvent.php
+++ b/src/Event/AppCredentialDeleteApiProductEvent.php
@@ -50,7 +50,7 @@ class AppCredentialDeleteApiProductEvent extends AbstractAppCredentialEvent {
    *   Company name or developer id (email) depending on the appType.
    * @param string $app_name
    *   Name of the app.
-   * @param \Apigee\Edge\Api\Management\Entity\AppCredentialInterface $credential
+   * @param AppCredentialInterface $credential
    *   The app credential that has been created.
    * @param string $api_product
    *   Name of the API product that has been removed.
diff --git a/src/EventSubscriber/ApiProductEntityAccessCacheReset.php b/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
index f5216ac..86d448c 100644
--- a/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
+++ b/src/EventSubscriber/ApiProductEntityAccessCacheReset.php
@@ -37,14 +37,14 @@ final class ApiProductEntityAccessCacheReset implements EventSubscriberInterface
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * ApiProductEntityAccessCacheReset constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -71,7 +71,7 @@ final class ApiProductEntityAccessCacheReset implements EventSubscriberInterface
   /**
    * Clears API product entity access cache.
    *
-   * @param \Symfony\Contracts\EventDispatcher\Event $event
+   * @param Event $event
    *   Event that triggered this subscriber.
    */
   public function clearApiProductCache(Event $event): void {
diff --git a/src/EventSubscriber/DeveloperAppFieldConfigListAlterEventSubscriber.php b/src/EventSubscriber/DeveloperAppFieldConfigListAlterEventSubscriber.php
index 7ab1e68..5b5a36b 100644
--- a/src/EventSubscriber/DeveloperAppFieldConfigListAlterEventSubscriber.php
+++ b/src/EventSubscriber/DeveloperAppFieldConfigListAlterEventSubscriber.php
@@ -33,14 +33,14 @@ final class DeveloperAppFieldConfigListAlterEventSubscriber implements EventSubs
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   private $formBuilder;
 
   /**
    * DeveloperAppFieldConfigListAlterEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(FormBuilderInterface $form_builder) {
@@ -59,7 +59,7 @@ final class DeveloperAppFieldConfigListAlterEventSubscriber implements EventSubs
   /**
    * Alters the field config UI page.
    *
-   * @param \Drupal\apigee_edge\Event\EdgeEntityFieldConfigListAlterEvent $event
+   * @param EdgeEntityFieldConfigListAlterEvent $event
    *   The field config list alter event.
    */
   public function alterPage(EdgeEntityFieldConfigListAlterEvent $event) {
diff --git a/src/EventSubscriber/DeveloperStatusWarningSubscriber.php b/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
index 3af0c09..1aeebc6 100644
--- a/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
+++ b/src/EventSubscriber/DeveloperStatusWarningSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\EventSubscriber;
 
+use Drupal\apigee_edge\Entity\DeveloperAppInterface;
 use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -42,43 +43,43 @@ final class DeveloperStatusWarningSubscriber implements EventSubscriberInterface
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private $messenger;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * DeveloperStatusWarningSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translations service.
    */
   public function __construct(AccountInterface $current_user, RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, TranslationInterface $string_translation) {
@@ -92,27 +93,27 @@ final class DeveloperStatusWarningSubscriber implements EventSubscriberInterface
   /**
    * Display's a warning message if developer's status is inactive.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event) {
     // Anonymous user's does not have access to these routes.
     if ($this->currentUser->isAuthenticated() && strpos(($this->routeMatch->getRouteName() ?? ''), 'entity.developer_app.') === 0) {
       $developer_storage = $this->entityTypeManager->getStorage('developer');
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|NULL $developer */
+      /** @var DeveloperInterface|NULL $developer */
       $developer = NULL;
-      /** @var \Drupal\Core\Session\AccountInterface|NULL $account */
+      /** @var AccountInterface|NULL $account */
       $account = NULL;
-      /** @var \Drupal\apigee_edge\Entity\DeveloperAppInterface $app */
+      /** @var DeveloperAppInterface $app */
       $app = $this->routeMatch->getParameter('developer_app') ?? $this->routeMatch->getParameter('app');
       if ($app) {
-        /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+        /** @var DeveloperInterface $developer */
         $developer = $developer_storage->load($app->getDeveloperId());
         $account = $developer->getOwner();
       }
       // Taking special care of the "Apps" page.
       elseif ($this->routeMatch->getRouteName() === 'entity.developer_app.collection_by_developer') {
-        /** @var \Drupal\Core\Session\AccountInterface $account */
+        /** @var AccountInterface $account */
         $account = $this->routeMatch->getParameter('user');
         $developer = $developer_storage->load($account->getEmail());
       }
diff --git a/src/EventSubscriber/EdgeConfigTranslationChangeSubscriber.php b/src/EventSubscriber/EdgeConfigTranslationChangeSubscriber.php
index e716f11..454436f 100644
--- a/src/EventSubscriber/EdgeConfigTranslationChangeSubscriber.php
+++ b/src/EventSubscriber/EdgeConfigTranslationChangeSubscriber.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\EventSubscriber;
 
+use Drupal\language\Config\LanguageConfigOverride;
 use Drupal\language\Config\LanguageConfigOverrideCrudEvent;
 use Drupal\language\Config\LanguageConfigOverrideEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -48,11 +49,11 @@ final class EdgeConfigTranslationChangeSubscriber implements EventSubscriberInte
   /**
    * Clears caches when an Edge entity type's config translation gets updated.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   The event object.
    */
   public function clearCache(LanguageConfigOverrideCrudEvent $event) {
-    /** @var \Drupal\language\Config\LanguageConfigOverride $override */
+    /** @var LanguageConfigOverride $override */
     $override = $event->getLanguageConfigOverride();
     if (preg_match('/^apigee_edge/', $override->getName())) {
       // It is easier to do that rather than just trying to figure our all
diff --git a/src/EventSubscriber/EdgeExceptionSubscriber.php b/src/EventSubscriber/EdgeExceptionSubscriber.php
index a1f309b..f1560f4 100644
--- a/src/EventSubscriber/EdgeExceptionSubscriber.php
+++ b/src/EventSubscriber/EdgeExceptionSubscriber.php
@@ -44,35 +44,35 @@ final class EdgeExceptionSubscriber implements EventSubscriberInterface {
   /**
    * The logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Class Resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -86,15 +86,15 @@ final class EdgeExceptionSubscriber implements EventSubscriberInterface {
   /**
    * EdgeExceptionSubscriber constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    * @param array $main_content_renderers
    *   The available main content renderer service IDs, keyed by format.
@@ -118,7 +118,7 @@ final class EdgeExceptionSubscriber implements EventSubscriberInterface {
   /**
    * Displays the Edge connection error page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception event.
    */
   public function onException(ExceptionEvent $event) {
diff --git a/src/Exception/DeveloperToUserConversationInvalidValueException.php b/src/Exception/DeveloperToUserConversationInvalidValueException.php
index d92c902..73290ab 100644
--- a/src/Exception/DeveloperToUserConversationInvalidValueException.php
+++ b/src/Exception/DeveloperToUserConversationInvalidValueException.php
@@ -46,7 +46,7 @@ class DeveloperToUserConversationInvalidValueException extends DeveloperToUserCo
   /**
    * Constraint violation.
    *
-   * @var \Symfony\Component\Validator\ConstraintViolationInterface
+   * @var ConstraintViolationInterface
    */
   protected $violation;
 
@@ -57,9 +57,9 @@ class DeveloperToUserConversationInvalidValueException extends DeveloperToUserCo
    *   The source property on the developer.
    * @param string $target
    *   Name of the destination field on the user.
-   * @param \Symfony\Component\Validator\ConstraintViolationInterface $violation
+   * @param ConstraintViolationInterface $violation
    *   Constraint violation.
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer entity.
    * @param string $message
    *   Exception message.
@@ -104,7 +104,7 @@ class DeveloperToUserConversationInvalidValueException extends DeveloperToUserCo
   /**
    * Constraint violation.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationInterface
+   * @return ConstraintViolationInterface
    *   Constraint violation.
    */
   public function getViolation(): ConstraintViolationInterface {
diff --git a/src/Exception/DeveloperToUserConversionAttributeDoesNotExistException.php b/src/Exception/DeveloperToUserConversionAttributeDoesNotExistException.php
index 9768769..ec773a2 100644
--- a/src/Exception/DeveloperToUserConversionAttributeDoesNotExistException.php
+++ b/src/Exception/DeveloperToUserConversionAttributeDoesNotExistException.php
@@ -39,7 +39,7 @@ class DeveloperToUserConversionAttributeDoesNotExistException extends DeveloperT
    *
    * @param string $attribute_name
    *   Name of the attribute.
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer object.
    * @param string $message
    *   The Exception message.
diff --git a/src/Exception/DeveloperToUserConversionException.php b/src/Exception/DeveloperToUserConversionException.php
index 031d484..48e3c22 100644
--- a/src/Exception/DeveloperToUserConversionException.php
+++ b/src/Exception/DeveloperToUserConversionException.php
@@ -30,14 +30,14 @@ class DeveloperToUserConversionException extends UserDeveloperConversionExceptio
   /**
    * Developer object.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   protected $developer;
 
   /**
    * DeveloperToUserConversionException constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer object.
    * @param string $message
    *   The Exception message.
@@ -55,7 +55,7 @@ class DeveloperToUserConversionException extends UserDeveloperConversionExceptio
   /**
    * Returns the problematic developer.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @return DeveloperInterface
    *   Developer object.
    */
   public function getDeveloper(): DeveloperInterface {
diff --git a/src/Exception/DeveloperToUserConversionUserNameAlreadyTakenException.php b/src/Exception/DeveloperToUserConversionUserNameAlreadyTakenException.php
index 4f38965..29be395 100644
--- a/src/Exception/DeveloperToUserConversionUserNameAlreadyTakenException.php
+++ b/src/Exception/DeveloperToUserConversionUserNameAlreadyTakenException.php
@@ -31,9 +31,9 @@ class DeveloperToUserConversionUserNameAlreadyTakenException extends DeveloperTo
   /**
    * DeveloperToUserConversionUserNameAlreadyTakenException constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   Developer entity.
-   * @param \Symfony\Component\Validator\ConstraintViolationInterface $violation
+   * @param ConstraintViolationInterface $violation
    *   Constraint violation.
    * @param string $message
    *   Exception message.
diff --git a/src/Exception/KeyProviderRequirementsException.php b/src/Exception/KeyProviderRequirementsException.php
index 50ccb46..5ea6d3b 100644
--- a/src/Exception/KeyProviderRequirementsException.php
+++ b/src/Exception/KeyProviderRequirementsException.php
@@ -30,7 +30,7 @@ class KeyProviderRequirementsException extends RuntimeException {
   /**
    * The TranslatableMarkup object containing a message to render on the UI.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $translatableMarkupMessage;
 
@@ -39,7 +39,7 @@ class KeyProviderRequirementsException extends RuntimeException {
    *
    * @param string $message
    *   The Exception message.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $translatable_markup_message
+   * @param TranslatableMarkup $translatable_markup_message
    *   The translatable markup object of the exception to display on the pages
    *   where the exception is caught.
    * @param int|null $code
@@ -55,7 +55,7 @@ class KeyProviderRequirementsException extends RuntimeException {
   /**
    * Gets the translatable markup object.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translatable markup object.
    */
   public function getTranslatableMarkupMessage(): TranslatableMarkup {
diff --git a/src/Exception/UserDeveloperConversionNoStorageFormatterFoundException.php b/src/Exception/UserDeveloperConversionNoStorageFormatterFoundException.php
index 365f06b..cf678cc 100644
--- a/src/Exception/UserDeveloperConversionNoStorageFormatterFoundException.php
+++ b/src/Exception/UserDeveloperConversionNoStorageFormatterFoundException.php
@@ -30,14 +30,14 @@ class UserDeveloperConversionNoStorageFormatterFoundException extends UserDevelo
   /**
    * Type of field with no formatter available.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $fieldDefinition;
 
   /**
    * UserDeveloperConversionNoStorageFormatterFoundException constructor.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    * @param string $message
    *   Exception message.
@@ -55,7 +55,7 @@ class UserDeveloperConversionNoStorageFormatterFoundException extends UserDevelo
   /**
    * Returns the definition of the problematic field.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   Defition of the field.
    */
   public function getFieldDefinition(): FieldDefinitionInterface {
diff --git a/src/Exception/UserToDeveloperConversionException.php b/src/Exception/UserToDeveloperConversionException.php
index 851b2cd..de20f82 100644
--- a/src/Exception/UserToDeveloperConversionException.php
+++ b/src/Exception/UserToDeveloperConversionException.php
@@ -30,14 +30,14 @@ class UserToDeveloperConversionException extends UserDeveloperConversionExceptio
   /**
    * User object.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * UserToDeveloperConversionException constructor.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User object.
    * @param string $message
    *   The Exception message, available replacements: @user (email).
@@ -56,7 +56,7 @@ class UserToDeveloperConversionException extends UserDeveloperConversionExceptio
   /**
    * Returns the problematic user object.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   User object.
    */
   public function getUser(): UserInterface {
diff --git a/src/FieldAttributeConverter.php b/src/FieldAttributeConverter.php
index ff65cc0..17dd129 100644
--- a/src/FieldAttributeConverter.php
+++ b/src/FieldAttributeConverter.php
@@ -34,21 +34,21 @@ final class FieldAttributeConverter implements FieldAttributeConverterInterface
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $config;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * The field formatter service.
    *
-   * @var \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface
+   * @var FieldStorageFormatManagerInterface
    */
   private $formatManager;
 
@@ -62,11 +62,11 @@ final class FieldAttributeConverter implements FieldAttributeConverterInterface
   /**
    * FieldNameToAttributeNameConverter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface $format_manager
+   * @param FieldStorageFormatManagerInterface $format_manager
    *   The field formatter service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, FieldStorageFormatManagerInterface $format_manager, ConfigFactoryInterface $config) {
@@ -138,7 +138,7 @@ final class FieldAttributeConverter implements FieldAttributeConverterInterface
    * @param string $field_name
    *   Name of the field to look up the plugin for.
    *
-   * @return \Drupal\apigee_edge\Plugin\FieldStorageFormatInterface|null
+   * @return FieldStorageFormatInterface|null
    *   Null if not found.
    */
   protected function findFieldStorageFormatter(string $entity_type, string $field_name): ?FieldStorageFormatInterface {
diff --git a/src/FieldAttributeConverterInterface.php b/src/FieldAttributeConverterInterface.php
index 994637d..d67842a 100644
--- a/src/FieldAttributeConverterInterface.php
+++ b/src/FieldAttributeConverterInterface.php
@@ -56,7 +56,7 @@ interface FieldAttributeConverterInterface {
    *   The entity type.
    * @param string $field_name
    *   Name of a field in Drupal.
-   * @param \Apigee\Edge\Structure\AttributesProperty $attributes
+   * @param AttributesProperty $attributes
    *   Attribute property that contains the attributes on an entity.
    *
    * @return mixed|null
diff --git a/src/Form/ApiProductAccessControlForm.php b/src/Form/ApiProductAccessControlForm.php
index 9d278e9..e30a387 100644
--- a/src/Form/ApiProductAccessControlForm.php
+++ b/src/Form/ApiProductAccessControlForm.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Form;
 
+use Drupal\user\RoleInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -34,16 +35,16 @@ class ApiProductAccessControlForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ProductAccessControlForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ -91,7 +92,7 @@ class ApiProductAccessControlForm extends ConfigFormBase {
       '#tree' => TRUE,
     ];
 
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     foreach ($role_storage->loadMultiple() as $role_name => $role) {
       // Retrieve role names for columns.
       $role_names[$role_name] = $role->label();
diff --git a/src/Form/AppAnalyticsFormBase.php b/src/Form/AppAnalyticsFormBase.php
index 7b55686..6c23f02 100644
--- a/src/Form/AppAnalyticsFormBase.php
+++ b/src/Form/AppAnalyticsFormBase.php
@@ -20,6 +20,8 @@
 
 namespace Drupal\apigee_edge\Form;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Api\Management\Controller\StatsController;
 use Apigee\Edge\Api\Management\Query\StatsQuery;
 use Drupal\apigee_edge\Entity\AppInterface;
@@ -44,41 +46,41 @@ abstract class AppAnalyticsFormBase extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $connector;
 
   /**
    * The PrivateTempStore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $store;
 
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructs a new AppAnalyticsFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector
+   * @param SDKConnectorInterface $sdk_connector
    *   The SDK connector service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempstore_private
+   * @param PrivateTempStoreFactory $tempstore_private
    *   The private temp store factory.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SDKConnectorInterface $sdk_connector, PrivateTempStoreFactory $tempstore_private, UrlGeneratorInterface $url_generator) {
@@ -354,7 +356,7 @@ abstract class AppAnalyticsFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity that analytics data gets displayed.
    * @param string $metric
    *   The filter parameter.
@@ -478,7 +480,7 @@ abstract class AppAnalyticsFormBase extends FormBase {
   /**
    * Retrieves the app analytics for the given criteria.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity that analytics data gets displayed.
    * @param string $metric
    *   The filter parameter.
@@ -492,9 +494,9 @@ abstract class AppAnalyticsFormBase extends FormBase {
    * @return array
    *   The raw analytics API response for the given criteria.
    *
-   * @throws \Moment\MomentException
+   * @throws MomentException
    *   If provided date values are invalid.
-   * @throws \Apigee\Edge\Exception\ApiException
+   * @throws ApiException
    *   If analytics query fails.
    */
   final protected function getAnalytics(AppInterface $app, string $metric, string $since, string $until, string $environment): array {
@@ -509,7 +511,7 @@ abstract class AppAnalyticsFormBase extends FormBase {
   /**
    * Returns the analytics filter criteria that limits the result by app owner.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
    * @return string
diff --git a/src/Form/AppAnalyticsSettingsForm.php b/src/Form/AppAnalyticsSettingsForm.php
index f2ca94f..3b02ed1 100644
--- a/src/Form/AppAnalyticsSettingsForm.php
+++ b/src/Form/AppAnalyticsSettingsForm.php
@@ -34,16 +34,16 @@ class AppAnalyticsSettingsForm extends ConfigFormBase {
   /**
    * Environment controller object.
    *
-   * @var \Apigee\Edge\Api\Management\Controller\EnvironmentController
+   * @var EnvironmentController
    */
   protected $environmentController;
 
   /**
    * Constructs a new DeveloperAppAnalyticsSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector
+   * @param SDKConnectorInterface $sdk_connector
    *   The SDK connector service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SDKConnectorInterface $sdk_connector) {
diff --git a/src/Form/AppApiKeyAddFormBase.php b/src/Form/AppApiKeyAddFormBase.php
index b913498..0f667a0 100644
--- a/src/Form/AppApiKeyAddFormBase.php
+++ b/src/Form/AppApiKeyAddFormBase.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Form;
 
+use Drupal\apigee_edge\Entity\ApiProductInterface;
 use Apigee\Edge\Api\Management\Entity\AppCredentialInterface;
 use Apigee\Edge\Structure\CredentialProductInterface;
 use Drupal\apigee_edge\Entity\AppInterface;
@@ -36,7 +37,7 @@ abstract class AppApiKeyAddFormBase extends FormBase {
   /**
    * The app entity.
    *
-   * @var \Drupal\apigee_edge\Entity\AppInterface
+   * @var AppInterface
    */
   protected $app;
 
@@ -55,7 +56,7 @@ abstract class AppApiKeyAddFormBase extends FormBase {
    * @param string $app_name
    *   The name of an app.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface
+   * @return AppCredentialControllerInterface
    *   The app api-key controller.
    */
   abstract protected function appCredentialController(string $owner, string $app_name) : AppCredentialControllerInterface;
@@ -63,7 +64,7 @@ abstract class AppApiKeyAddFormBase extends FormBase {
   /**
    * Returns the redirect url for the app.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The redirect url.
    */
   abstract protected function getRedirectUrl(): Url;
@@ -71,7 +72,7 @@ abstract class AppApiKeyAddFormBase extends FormBase {
   /**
    * Returns the list of API product that the user can see on the form.
    *
-   * @return \Drupal\apigee_edge\Entity\ApiProductInterface[]
+   * @return ApiProductInterface[]
    *   Array of API product entities.
    */
   abstract protected function apiProductList(array $form, FormStateInterface $form_state): array;
@@ -196,10 +197,10 @@ abstract class AppApiKeyAddFormBase extends FormBase {
   /**
    * Helper to find API products based on the recently active API key.
    *
-   * @param \Drupal\apigee_edge\Entity\AppInterface $app
+   * @param AppInterface $app
    *   The app entity.
    *
-   * @return \Apigee\Edge\Structure\CredentialProductInterface[]|array
+   * @return CredentialProductInterface[]|array
    *   An array of API products.
    */
   protected function getApiProductsForApp(AppInterface $app): array {
diff --git a/src/Form/AppApiKeyConfirmFormBase.php b/src/Form/AppApiKeyConfirmFormBase.php
index f827025..20ad75a 100644
--- a/src/Form/AppApiKeyConfirmFormBase.php
+++ b/src/Form/AppApiKeyConfirmFormBase.php
@@ -34,7 +34,7 @@ abstract class AppApiKeyConfirmFormBase extends ConfirmFormBase {
   /**
    * The app entity.
    *
-   * @var \Drupal\apigee_edge\Entity\AppInterface
+   * @var AppInterface
    */
   protected $app;
 
@@ -53,7 +53,7 @@ abstract class AppApiKeyConfirmFormBase extends ConfirmFormBase {
    * @param string $app_name
    *   The name of an app.
    *
-   * @return \Drupal\apigee_edge\Entity\Controller\AppCredentialControllerInterface
+   * @return AppCredentialControllerInterface
    *   The app credential controller.
    */
   abstract protected function appCredentialController(string $owner, string $app_name) : AppCredentialControllerInterface;
diff --git a/src/Form/AppSettingsForm.php b/src/Form/AppSettingsForm.php
index 7a09491..e1d8794 100644
--- a/src/Form/AppSettingsForm.php
+++ b/src/Form/AppSettingsForm.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Form;
 
+use Drupal\apigee_edge\Entity\ApiProduct;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -38,25 +39,25 @@ class AppSettingsForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * AppSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
@@ -108,7 +109,7 @@ class AppSettingsForm extends ConfigFormBase {
     $product_list = [];
 
     try {
-      /** @var \Drupal\apigee_edge\Entity\ApiProduct $product */
+      /** @var ApiProduct $product */
       foreach ($this->entityTypeManager->getStorage('api_product')->loadMultiple() as $product) {
         $product_list[$product->id()] = $product->label();
       }
@@ -186,10 +187,10 @@ class AppSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The Ajax response.
    *
    * @see https://www.drupal.org/project/drupal/issues/2855139
diff --git a/src/Form/AuthenticationForm.php b/src/Form/AuthenticationForm.php
index 32af8ca..94fde0c 100644
--- a/src/Form/AuthenticationForm.php
+++ b/src/Form/AuthenticationForm.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Form;
 
+use Drupal\key\KeyInterface;
 use Drupal\apigee_edge\Exception\KeyProviderRequirementsException;
 use Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -51,11 +52,11 @@ class AuthenticationForm extends KeyEditForm {
   /**
    * AuthenticationForm constructor.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $key_storage
+   * @param ConfigEntityStorageInterface $key_storage
    *   The key storage.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigEntityStorageInterface $key_storage, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
@@ -70,7 +71,7 @@ class AuthenticationForm extends KeyEditForm {
     // Loads to the key entity that belongs to the active key or creates a
     // new one _without_ saving it.
     if (!($active_key_id = $config->get('active_key')) || !($active_key = $key_storage->load($active_key_id))) {
-      /** @var \Drupal\key\KeyInterface $active_key */
+      /** @var KeyInterface $active_key */
       $active_key = $key_storage->create([
         'id' => static::DEFAULT_KEY_ENTITY_ID,
         'label' => $this->t('Apigee Edge connection'),
@@ -145,7 +146,7 @@ class AuthenticationForm extends KeyEditForm {
     // Provider selection should be closed by default unless the form rebuild
     // trigger by the provider selector or there is an error with the
     // key provider.
-    /** @var \Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface $key_provider */
+    /** @var KeyProviderRequirementsInterface $key_provider */
     $key_provider = $this->entity->getKeyProvider();
     $key_provider_requirements_error = FALSE;
 
diff --git a/src/Form/BaseFieldConfigFromBase.php b/src/Form/BaseFieldConfigFromBase.php
index 52f6ab5..7e2f73c 100644
--- a/src/Form/BaseFieldConfigFromBase.php
+++ b/src/Form/BaseFieldConfigFromBase.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Form;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -34,23 +35,23 @@ abstract class BaseFieldConfigFromBase extends FormBase {
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * BaseFieldConfigFromBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -120,7 +121,7 @@ abstract class BaseFieldConfigFromBase extends FormBase {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+    /** @var EntityFormDisplayInterface $display */
     $display = $this->entityTypeManager->getStorage('entity_form_display')->load("{$this->entityType()}.{$this->entityType()}.default");
     if ($display) {
       foreach ($form_state->getValue('table') as $name => $data) {
diff --git a/src/Form/DeveloperAppApiKeyAddForm.php b/src/Form/DeveloperAppApiKeyAddForm.php
index dfdac43..91c73de 100644
--- a/src/Form/DeveloperAppApiKeyAddForm.php
+++ b/src/Form/DeveloperAppApiKeyAddForm.php
@@ -35,7 +35,7 @@ class DeveloperAppApiKeyAddForm extends AppApiKeyAddFormBase {
   /**
    * The user from route.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
diff --git a/src/Form/DeveloperAttributesSettingsForm.php b/src/Form/DeveloperAttributesSettingsForm.php
index 947edf4..466ddd7 100644
--- a/src/Form/DeveloperAttributesSettingsForm.php
+++ b/src/Form/DeveloperAttributesSettingsForm.php
@@ -38,34 +38,34 @@ class DeveloperAttributesSettingsForm extends ConfigFormBase {
   /**
    * Field-attribute converter service.
    *
-   * @var \Drupal\apigee_edge\FieldAttributeConverter
+   * @var FieldAttributeConverter
    */
   private $fieldAttributeConverter;
 
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * Field storage formatter service.
    *
-   * @var \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface
+   * @var FieldStorageFormatManagerInterface
    */
   private $fieldStorageFormatManager;
 
   /**
    * DeveloperAttributesSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface $field_storage_format_manager
+   * @param FieldStorageFormatManagerInterface $field_storage_format_manager
    *   Field storage format manager service.
-   * @param \Drupal\apigee_edge\FieldAttributeConverter $field_attribute_converter
+   * @param FieldAttributeConverter $field_attribute_converter
    *   Field name to attribute name converted service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager, FieldStorageFormatManagerInterface $field_storage_format_manager, FieldAttributeConverter $field_attribute_converter) {
@@ -124,7 +124,7 @@ class DeveloperAttributesSettingsForm extends ConfigFormBase {
     uasort($fields, [FieldConfig::class, 'sort']);
 
     $options = $default_values = [];
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     foreach ($fields as $field) {
       $options[$field->getName()] = [
         'field_label' => $field->getLabel(),
diff --git a/src/Form/DeveloperSyncForm.php b/src/Form/DeveloperSyncForm.php
index 6544591..f669f35 100644
--- a/src/Form/DeveloperSyncForm.php
+++ b/src/Form/DeveloperSyncForm.php
@@ -33,14 +33,14 @@ class DeveloperSyncForm extends FormBase {
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $sdkConnector;
 
   /**
    * Constructs a new DeveloperSyncForm.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector
+   * @param SDKConnectorInterface $sdk_connector
    *   SDK connector service.
    */
   public function __construct(SDKConnectorInterface $sdk_connector) {
@@ -143,7 +143,7 @@ class DeveloperSyncForm extends FormBase {
    * @param string $route_name
    *   The name of the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to redirect to.
    */
   protected function buildUrl(string $route_name): Url {
diff --git a/src/Form/EdgeEntityCacheConfigFormBase.php b/src/Form/EdgeEntityCacheConfigFormBase.php
index 495e031..2ecaaa7 100644
--- a/src/Form/EdgeEntityCacheConfigFormBase.php
+++ b/src/Form/EdgeEntityCacheConfigFormBase.php
@@ -74,7 +74,7 @@ abstract class EdgeEntityCacheConfigFormBase extends ConfigFormBase {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function invalidateCache(array $form, FormStateInterface $form_state) {
diff --git a/src/Form/EdgeEntityDisplaySettingsForm.php b/src/Form/EdgeEntityDisplaySettingsForm.php
index 1a3ef27..eaebcdd 100644
--- a/src/Form/EdgeEntityDisplaySettingsForm.php
+++ b/src/Form/EdgeEntityDisplaySettingsForm.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Form;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\apigee_edge\Entity\ListBuilder\EdgeEntityListBuilder;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
@@ -40,21 +41,21 @@ class EdgeEntityDisplaySettingsForm extends ConfigFormBase implements BaseFormId
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -68,22 +69,22 @@ class EdgeEntityDisplaySettingsForm extends ConfigFormBase implements BaseFormId
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * AppDisplaySettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, ModuleHandlerInterface $module_handler, RouteMatchInterface $route_match) {
@@ -137,7 +138,7 @@ class EdgeEntityDisplaySettingsForm extends ConfigFormBase implements BaseFormId
   public function buildForm(array $form, FormStateInterface $form_state, $entity_type_id = NULL) {
     $this->entityTypeId = $entity_type_id;
 
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->entityTypeManager->getDefinition($entity_type_id);
     $config = $this->configFactory()->get("apigee_edge.display_settings.{$entity_type_id}");
 
diff --git a/src/Job/DeveloperCreateUpdate.php b/src/Job/DeveloperCreateUpdate.php
index b366032..e2cb9c3 100644
--- a/src/Job/DeveloperCreateUpdate.php
+++ b/src/Job/DeveloperCreateUpdate.php
@@ -58,7 +58,7 @@ abstract class DeveloperCreateUpdate extends EdgeJob {
    */
   protected function executeRequest() {
     try {
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = user_load_by_mail($this->email);
       if (!$account) {
         throw new UserDoesNotExistWithEmail($this->email);
@@ -92,9 +92,9 @@ abstract class DeveloperCreateUpdate extends EdgeJob {
   /**
    * Execute actions before the developer gets saved.
    *
-   * @param \Drupal\apigee_edge\Structure\UserToDeveloperConversionResult $result
+   * @param UserToDeveloperConversionResult $result
    *   The result of the entity conversion.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The converted user entity.
    *
    * @throws \Exception
@@ -112,9 +112,9 @@ abstract class DeveloperCreateUpdate extends EdgeJob {
    *
    * Actions here always gets executed even if the developer save has failed.
    *
-   * @param \Drupal\apigee_edge\Structure\UserToDeveloperConversionResult $result
+   * @param UserToDeveloperConversionResult $result
    *   The result of the entity conversion.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The converted user entity.
    */
   protected function afterDeveloperSave(UserToDeveloperConversionResult $result, UserInterface $user) : void {}
diff --git a/src/Job/DeveloperSync.php b/src/Job/DeveloperSync.php
index 5ce6eb7..1fda1e0 100644
--- a/src/Job/DeveloperSync.php
+++ b/src/Job/DeveloperSync.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\apigee_edge\Job;
 
+use Drupal\apigee_edge\Entity\DeveloperInterface;
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\user\Entity\User;
 
@@ -34,7 +36,7 @@ class DeveloperSync extends EdgeJob {
    *
    * Format: mb_strtolower(email) => Developer.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface[]
+   * @var DeveloperInterface[]
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
    */
@@ -45,7 +47,7 @@ class DeveloperSync extends EdgeJob {
    *
    * Format: mb_strtolower(mail) => User.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
    */
@@ -72,14 +74,14 @@ class DeveloperSync extends EdgeJob {
   /**
    * Loads all Drupal users indexed my their emails.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   Format: mb_strtolower(mail) => User
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
    */
   protected function loadUsers(): array {
     $users = [];
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     foreach (User::loadMultiple() as $user) {
       $email = $user->getEmail();
       if (isset($email)) {
@@ -98,7 +100,7 @@ class DeveloperSync extends EdgeJob {
   /**
    * Loads all Apigee Edge developers indexed my their emails.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperInterface[]
+   * @return DeveloperInterface[]
    *   Format: mb_strtolower(email) => Developer
    *
    * @see https://www.drupal.org/project/drupal/issues/2490294
@@ -108,7 +110,7 @@ class DeveloperSync extends EdgeJob {
     // Edge.
     \Drupal::entityTypeManager()->getStorage('developer')->resetCache();
     $developers = [];
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+    /** @var DeveloperInterface $developer */
     foreach (Developer::loadMultiple() as $developer) {
       $email = $developer->getEmail();
       if ($this->filter && !preg_match($this->filter, $email)) {
@@ -139,9 +141,9 @@ class DeveloperSync extends EdgeJob {
     // Update Apigee Edge developers and Drupal users if needed.
     $identical_entities = array_intersect_key($this->edgeDevelopers, $this->drupalUsers);
     foreach ($identical_entities as $clean_email => $entity) {
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+      /** @var DeveloperInterface $developer */
       $developer = $this->edgeDevelopers[$clean_email];
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $this->drupalUsers[$clean_email];
 
       $last_modified_delta = $developer->getLastModifiedAt()->getTimestamp() - $user->getChangedTime();
diff --git a/src/Job/EdgeJob.php b/src/Job/EdgeJob.php
index f9bb221..1012076 100644
--- a/src/Job/EdgeJob.php
+++ b/src/Job/EdgeJob.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Job;
 
+use Drupal\apigee_edge\SDKConnector;
 use Drupal\apigee_edge\SDKConnectorInterface;
 
 /**
@@ -76,7 +77,7 @@ abstract class EdgeJob extends Job {
    * The reason why this is not injected, because this class will be serialized,
    * and the service class contains elements that can't be serialized.
    *
-   * @return \Drupal\apigee_edge\SDKConnector
+   * @return SDKConnector
    *   The SDK connector service.
    */
   protected function getConnector(): SDKConnectorInterface {
diff --git a/src/Job/Job.php b/src/Job/Job.php
index 41605c2..abbb04d 100644
--- a/src/Job/Job.php
+++ b/src/Job/Job.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Job;
 
+use Drupal\Component\Uuid\UuidInterface;
 /**
  * Defines the Job class.
  */
@@ -127,7 +128,7 @@ abstract class Job {
    * Job constructor.
    */
   public function __construct() {
-    /** @var \Drupal\Component\Uuid\UuidInterface $uuid_service */
+    /** @var UuidInterface $uuid_service */
     $uuid_service = \Drupal::service('uuid');
     $this->id = $uuid_service->generate();
   }
diff --git a/src/Job/JobCreatorTrait.php b/src/Job/JobCreatorTrait.php
index d102d4e..ce911d9 100644
--- a/src/Job/JobCreatorTrait.php
+++ b/src/Job/JobCreatorTrait.php
@@ -29,7 +29,7 @@ trait JobCreatorTrait {
   /**
    * Returns the job executor service.
    *
-   * @return \Drupal\apigee_edge\JobExecutor
+   * @return JobExecutor
    *   The job executor service.
    */
   protected function getExecutor(): JobExecutor {
@@ -39,7 +39,7 @@ trait JobCreatorTrait {
   /**
    * Schedules a job for execution.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   The job shluld be schedules.
    */
   protected function scheduleJob(Job $job) {
@@ -49,7 +49,7 @@ trait JobCreatorTrait {
   /**
    * Schedules multiple jobs for execution.
    *
-   * @param \Drupal\apigee_edge\Job\Job[] $jobs
+   * @param Job[] $jobs
    *   The array of the jobs should be scheduled.
    */
   protected function scheduleJobs(array $jobs) {
diff --git a/src/Job/UserCreateUpdate.php b/src/Job/UserCreateUpdate.php
index 2e33a98..723f9fb 100644
--- a/src/Job/UserCreateUpdate.php
+++ b/src/Job/UserCreateUpdate.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Job;
 
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\apigee_edge\Exception\DeveloperToUserConversationInvalidValueException;
@@ -61,7 +62,7 @@ abstract class UserCreateUpdate extends EdgeJob {
    */
   protected function executeRequest() {
     try {
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+      /** @var DeveloperInterface $developer */
       $developer = Developer::load($this->email);
       if ($developer === NULL) {
         throw new DeveloperDoesNotExistException($this->email);
@@ -99,7 +100,7 @@ abstract class UserCreateUpdate extends EdgeJob {
   /**
    * Execute actions before the user gets saved.
    *
-   * @param \Drupal\apigee_edge\Structure\DeveloperToUserConversionResult $result
+   * @param DeveloperToUserConversionResult $result
    *   Result of the entity conversion.
    *
    * @throws \Exception
@@ -127,7 +128,7 @@ abstract class UserCreateUpdate extends EdgeJob {
    *
    * Actions here always gets executed even if the user save has failed.
    *
-   * @param \Drupal\apigee_edge\Structure\DeveloperToUserConversionResult $result
+   * @param DeveloperToUserConversionResult $result
    *   Result of the entity conversion.
    */
   protected function afterUserSave(DeveloperToUserConversionResult $result) : void {}
diff --git a/src/Job/UserDeveloperSyncJobTrait.php b/src/Job/UserDeveloperSyncJobTrait.php
index c6447ed..2b49740 100644
--- a/src/Job/UserDeveloperSyncJobTrait.php
+++ b/src/Job/UserDeveloperSyncJobTrait.php
@@ -33,7 +33,7 @@ trait UserDeveloperSyncJobTrait {
   /**
    * Logger interface.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   Logger interface.
    */
   protected function logger() : LoggerChannelInterface {
@@ -43,7 +43,7 @@ trait UserDeveloperSyncJobTrait {
   /**
    * Field-attribute converter service.
    *
-   * @return \Drupal\apigee_edge\FieldAttributeConverterInterface
+   * @return FieldAttributeConverterInterface
    *   Field-attribute converter service.
    */
   protected function fieldAttributeConverter(): FieldAttributeConverterInterface {
@@ -53,7 +53,7 @@ trait UserDeveloperSyncJobTrait {
   /**
    * User-developer converter service.
    *
-   * @return \Drupal\apigee_edge\UserDeveloperConverterInterface
+   * @return UserDeveloperConverterInterface
    *   User-developer converter service.
    */
   protected function userDeveloperConverter() : UserDeveloperConverterInterface {
@@ -63,7 +63,7 @@ trait UserDeveloperSyncJobTrait {
   /**
    * Logs all entity conversion problems encountered meanwhile syncing.
    *
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   List of encountered entity conversion problems.
    * @param array $context
    *   Additional context for log messages.
@@ -80,7 +80,7 @@ trait UserDeveloperSyncJobTrait {
    * TODO Consider to add a translatable operation to message logged by
    * recordMessage() if we actually start using that method something.
    *
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException $problem
+   * @param UserDeveloperConversionException $problem
    *   Entity conversion problem.
    * @param array $context
    *   Additional problem for log messages.
diff --git a/src/Job/UserUpdate.php b/src/Job/UserUpdate.php
index 7f6008c..0d4748a 100644
--- a/src/Job/UserUpdate.php
+++ b/src/Job/UserUpdate.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Job;
 
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Exception\DeveloperToUserConversationInvalidValueException;
 use Drupal\apigee_edge\Structure\DeveloperToUserConversionResult;
 
@@ -33,7 +34,7 @@ class UserUpdate extends UserCreateUpdate {
   protected function beforeUserSave(DeveloperToUserConversionResult $result): void {
     parent::beforeUserSave($result);
 
-    /** @var \Drupal\user\UserInterface $original_user */
+    /** @var UserInterface $original_user */
     $original_user = \Drupal::entityTypeManager()->getStorage('user')->loadUnchanged($result->getUser()->id());
     // Even if the developer has been blocked in Apigee Edge we should not block
     // its Drupal user automatically when syncing.
@@ -49,7 +50,7 @@ class UserUpdate extends UserCreateUpdate {
     // Rollback a synchronised field's value if the related attribute's value
     // contained an incorrect field value.
     if (count($result->getProblems()) > 0) {
-      /** @var \Drupal\user\UserInterface $original_user */
+      /** @var UserInterface $original_user */
       foreach ($result->getProblems() as $problem) {
         // Do not apply rollback on base fields.
         if ($problem instanceof DeveloperToUserConversationInvalidValueException && !in_array($problem->getTarget(), $this->userDeveloperConverter()::DEVELOPER_PROP_USER_BASE_FIELD_MAP, TRUE)) {
diff --git a/src/JobExecutor.php b/src/JobExecutor.php
index 1c362a1..51b16a0 100644
--- a/src/JobExecutor.php
+++ b/src/JobExecutor.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge;
 
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\apigee_edge\Job\Job;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
@@ -32,32 +33,32 @@ class JobExecutor implements JobExecutorInterface {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The 'apigee_edge_job' queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
   /**
    * JobExecutor constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time interface.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   Queue factory.
    */
   public function __construct(Connection $connection, TimeInterface $time, QueueFactory $queue_factory) {
@@ -69,7 +70,7 @@ class JobExecutor implements JobExecutorInterface {
   /**
    * Ensures that a job exists with a given status.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   Job object.
    * @param int $status
    *   Job status.
@@ -131,7 +132,7 @@ class JobExecutor implements JobExecutorInterface {
     $jobdata = $query->execute()->fetchField();
 
     if ($jobdata) {
-      /** @var \Drupal\apigee_edge\Job\Job $job */
+      /** @var Job $job */
       $job = unserialize($jobdata);
       $this->ensure($job, Job::SELECTED);
 
diff --git a/src/JobExecutorInterface.php b/src/JobExecutorInterface.php
index e5c27f2..7f2a873 100644
--- a/src/JobExecutorInterface.php
+++ b/src/JobExecutorInterface.php
@@ -30,7 +30,7 @@ interface JobExecutorInterface {
   /**
    * Saves a job.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   Job object.
    *
    * @throws \Exception
@@ -43,7 +43,7 @@ interface JobExecutorInterface {
    * @param string $id
    *   Job id.
    *
-   * @return \Drupal\apigee_edge\Job\Job|null
+   * @return Job|null
    *   Loaded job object or null if it does not exit.
    */
   public function load(string $id): ?Job;
@@ -54,7 +54,7 @@ interface JobExecutorInterface {
    * @param null|string $tag
    *   Optional tag to filter with.
    *
-   * @return \Drupal\apigee_edge\Job\Job|null
+   * @return Job|null
    *   Job object or null if there is no available.
    */
   public function select(?string $tag = NULL): ?Job;
@@ -62,7 +62,7 @@ interface JobExecutorInterface {
   /**
    * Executes a job synchronously.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   Job to run.
    * @param bool $update
    *   Whether to save the job into the database after it ran.
@@ -79,7 +79,7 @@ interface JobExecutorInterface {
    *
    * This puts the job into the "apigee_edge_job" cron queue.
    *
-   * @param \Drupal\apigee_edge\Job\Job $job
+   * @param Job $job
    *   The job to execute later.
    *
    * @throws \Exception
diff --git a/src/KeyEntityFormEnhancer.php b/src/KeyEntityFormEnhancer.php
index 6928a3e..4693d05 100644
--- a/src/KeyEntityFormEnhancer.php
+++ b/src/KeyEntityFormEnhancer.php
@@ -66,50 +66,50 @@ final class KeyEntityFormEnhancer {
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   private $connector;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The OAuth token storage.
    *
-   * @var \Drupal\apigee_edge\OauthTokenStorageInterface
+   * @var OauthTokenStorageInterface
    */
   private $oauthTokenStorage;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   private $emailValidator;
 
   /**
    * KeyEntityFormEnhancer constructor.
    *
-   * @param \Drupal\apigee_edge\SDKConnectorInterface $connector
+   * @param SDKConnectorInterface $connector
    *   The SDK connector service.
-   * @param \Drupal\apigee_edge\OauthTokenStorageInterface $oauth_token_storage
+   * @param OauthTokenStorageInterface $oauth_token_storage
    *   The OAuth token storage.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager serivce.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(SDKConnectorInterface $connector, OauthTokenStorageInterface $oauth_token_storage, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EmailValidatorInterface $email_validator) {
@@ -125,7 +125,7 @@ final class KeyEntityFormEnhancer {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function alterForm(array &$form, FormStateInterface $form_state): void {
@@ -134,7 +134,7 @@ final class KeyEntityFormEnhancer {
       return;
     }
 
-    /** @var \Drupal\key\KeyInterface $key */
+    /** @var KeyInterface $key */
     $key = $form_state->getFormObject()->getEntity();
 
     // Do not alter the confirmation step of the key edit form.
@@ -153,7 +153,7 @@ final class KeyEntityFormEnhancer {
     // Add enhancements to Apigee Edge Authentication keys.
     if ($this->isApigeeKeyTypeAuthForm($form_state)) {
 
-      /** @var \Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface $key_provider */
+      /** @var KeyProviderRequirementsInterface $key_provider */
       $key_provider = $key->getKeyProvider();
 
       // Warn user about key provider pre-requirement issues before form
@@ -269,7 +269,7 @@ final class KeyEntityFormEnhancer {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state): void {
@@ -289,7 +289,7 @@ final class KeyEntityFormEnhancer {
       return;
     }
 
-    /** @var \Drupal\key\KeyInterface $key */
+    /** @var KeyInterface $key */
     $key = $form_state->getFormObject()->getEntity();
 
     // Check whether or not we know how to write to this key.
@@ -316,7 +316,7 @@ final class KeyEntityFormEnhancer {
 
       // Create a temp key for testing without saving it.
       $random = new Random();
-      /** @var \Drupal\key\KeyInterface $test_key */
+      /** @var KeyInterface $test_key */
       $test_key = $this->entityTypeManager->getStorage('key')->create([
         'id' => strtolower($random->name(16)),
         'key_type' => $key->getKeyType()->getPluginID(),
@@ -331,7 +331,7 @@ final class KeyEntityFormEnhancer {
       $test_key = clone $key;
     }
 
-    /** @var \Drupal\apigee_edge\Plugin\KeyType\ApigeeAuthKeyType $test_key_type */
+    /** @var ApigeeAuthKeyType $test_key_type */
     $test_key_type = $test_key->getKeyType();
     $test_auth_type = $test_key_type->getAuthenticationType($test_key);
     try {
@@ -395,7 +395,7 @@ final class KeyEntityFormEnhancer {
   /**
    * Checks whether a key form is an Apigee Edge authentication form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return bool
@@ -406,7 +406,7 @@ final class KeyEntityFormEnhancer {
     if (!$form_state->getFormObject() instanceof KeyFormBase) {
       FALSE;
     }
-    /** @var \Drupal\key\KeyInterface $key */
+    /** @var KeyInterface $key */
     $key = $form_state->getFormObject()->getEntity();
     // When Ajax reloads the form - for example when Key provider changes -
     // the type of the entity falls back to the default "Authentication" type
@@ -421,7 +421,7 @@ final class KeyEntityFormEnhancer {
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ -439,7 +439,7 @@ final class KeyEntityFormEnhancer {
   /**
    * Checks whether we know how to write to a key.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key to test.
    *
    * @return bool
@@ -454,10 +454,10 @@ final class KeyEntityFormEnhancer {
    *
    * @param \Exception $exception
    *   The thrown exception during form validation.
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The used key during form validation.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The suggestion text to be displayed.
    */
   private function createSuggestion(\Exception $exception, KeyInterface $key): MarkupInterface {
@@ -466,7 +466,7 @@ final class KeyEntityFormEnhancer {
     $suggestion = $this->t('@fail_text', [
       '@fail_text' => $fail_text,
     ]);
-    /** @var \Drupal\apigee_edge\Plugin\KeyType\ApigeeAuthKeyType $key_type */
+    /** @var ApigeeAuthKeyType $key_type */
     $key_type = $key->getKeyType();
 
     if ($exception instanceof AuthenticationKeyException) {
@@ -518,7 +518,7 @@ final class KeyEntityFormEnhancer {
       // Failed request.
       elseif ($exception->getCode() === 0) {
         if ($exception->getPrevious() instanceof ApiRequestException && $exception->getPrevious()->getPrevious() instanceof NetworkException && $exception->getPrevious()->getPrevious()->getPrevious() instanceof ConnectException) {
-          /** @var \GuzzleHttp\Exception\ConnectException $curl_exception */
+          /** @var ConnectException $curl_exception */
           $curl_exception = $exception->getPrevious()->getPrevious()->getPrevious();
           // Resolving timed out.
           if ($curl_exception->getHandlerContext()['errno'] === CURLE_OPERATION_TIMEDOUT) {
@@ -571,7 +571,7 @@ final class KeyEntityFormEnhancer {
       // Failed request.
       elseif ($exception->getCode() === 0) {
         if ($exception->getPrevious() instanceof NetworkException && $exception->getPrevious()->getPrevious() instanceof ConnectException) {
-          /** @var \GuzzleHttp\Exception\ConnectException $curl_exception */
+          /** @var ConnectException $curl_exception */
           $curl_exception = $exception->getPrevious()->getPrevious();
           // Resolving timed out.
           if ($curl_exception->getHandlerContext()['errno'] === CURLE_OPERATION_TIMEDOUT) {
@@ -609,7 +609,7 @@ final class KeyEntityFormEnhancer {
    *
    * @param \Exception $exception
    *   The thrown exception during form validation.
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The used key during form validation.
    *
    * @return string
diff --git a/src/MemoryCacheFactory.php b/src/MemoryCacheFactory.php
index bd20b85..321b7bb 100644
--- a/src/MemoryCacheFactory.php
+++ b/src/MemoryCacheFactory.php
@@ -45,7 +45,7 @@ final class MemoryCacheFactory implements MemoryCacheFactoryInterface {
   /**
    * Instantiated memory cache bins.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   private $bins;
 
diff --git a/src/MemoryCacheFactoryInterface.php b/src/MemoryCacheFactoryInterface.php
index dcfb966..56f2384 100644
--- a/src/MemoryCacheFactoryInterface.php
+++ b/src/MemoryCacheFactoryInterface.php
@@ -33,7 +33,7 @@ interface MemoryCacheFactoryInterface {
    * @param string $bin
    *   The cache bin for which a cache backend object should be returned.
    *
-   * @return \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @return MemoryCacheInterface
    *   The memory cache backend object associated with the specified bin.
    */
   public function get($bin): MemoryCacheInterface;
diff --git a/src/OauthAuthentication.php b/src/OauthAuthentication.php
index 48a833c..f8ad453 100644
--- a/src/OauthAuthentication.php
+++ b/src/OauthAuthentication.php
@@ -35,7 +35,7 @@ class OauthAuthentication extends Oauth {
    * {@inheritdoc}
    */
   protected function authClient(): ClientInterface {
-    /** @var \Drupal\apigee_edge\SDKConnectorInterface $sdk_connector */
+    /** @var SDKConnectorInterface $sdk_connector */
     $sdk_connector = \Drupal::service('apigee_edge.sdk_connector');
     return $sdk_connector->buildClient(new BasicAuth($this->clientId, $this->clientSecret), $this->getAuthServer());
   }
diff --git a/src/OauthCredentials.php b/src/OauthCredentials.php
index 5d1b8ad..4d95aba 100644
--- a/src/OauthCredentials.php
+++ b/src/OauthCredentials.php
@@ -34,7 +34,7 @@ class OauthCredentials extends Credentials {
   /**
    * OauthCredentials constructor.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
    * @throws \InvalidArgumentException
diff --git a/src/OauthTokenFileStorage.php b/src/OauthTokenFileStorage.php
index db808e1..6459d53 100644
--- a/src/OauthTokenFileStorage.php
+++ b/src/OauthTokenFileStorage.php
@@ -69,25 +69,25 @@ final class OauthTokenFileStorage implements OauthTokenStorageInterface {
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;
 
   /**
    * OauthTokenFileStorage constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger service.
    */
   public function __construct(ConfigFactoryInterface $config, FileSystemInterface $file_system, LoggerChannelInterface $logger) {
diff --git a/src/OauthTokenStorageInterface.php b/src/OauthTokenStorageInterface.php
index 682adee..7b9ada7 100644
--- a/src/OauthTokenStorageInterface.php
+++ b/src/OauthTokenStorageInterface.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge;
 
+use Drupal\apigee_edge\Exception\OauthTokenStorageException;
 use Apigee\Edge\HttpClient\Plugin\Authentication\OauthTokenStorageInterface as EdgeOauthTokenStorageInterface;
 
 /**
@@ -34,7 +35,7 @@ interface OauthTokenStorageInterface extends EdgeOauthTokenStorageInterface {
    *
    * If a requirement does not fulfilled it throws an exception.
    *
-   * @throws \Drupal\apigee_edge\Exception\OauthTokenStorageException
+   * @throws OauthTokenStorageException
    *   Exception with the unfulfilled requirement.
    */
   public function checkRequirements(): void;
diff --git a/src/ParamConverter/ApigeeEdgeLoadUnchangedEntity.php b/src/ParamConverter/ApigeeEdgeLoadUnchangedEntity.php
index 6fcc5bf..cbaba51 100644
--- a/src/ParamConverter/ApigeeEdgeLoadUnchangedEntity.php
+++ b/src/ParamConverter/ApigeeEdgeLoadUnchangedEntity.php
@@ -41,14 +41,14 @@ class ApigeeEdgeLoadUnchangedEntity implements ParamConverterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * DeveloperAppNameParameterConverter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/ParamConverter/DeveloperAppNameConverter.php b/src/ParamConverter/DeveloperAppNameConverter.php
index aad6268..d618a17 100644
--- a/src/ParamConverter/DeveloperAppNameConverter.php
+++ b/src/ParamConverter/DeveloperAppNameConverter.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\ParamConverter;
 
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\Storage\AppStorage;
 use Drupal\apigee_edge\Exception\DeveloperDoesNotExistException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -38,23 +39,23 @@ final class DeveloperAppNameConverter implements ParamConverterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;
 
   /**
    * Constructs a DeveloperAppNameParameterConverter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger) {
@@ -70,7 +71,7 @@ final class DeveloperAppNameConverter implements ParamConverterInterface {
       return NULL;
     }
     $entity = NULL;
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     // If {user} parameter is before the {app} in the route then
     // entity parameter converter should have already up-casted it to
     // a user object if not then let's try to up-cast it here.
diff --git a/src/ParamConverter/DeveloperWithUser.php b/src/ParamConverter/DeveloperWithUser.php
index 65e5801..0a6b72e 100644
--- a/src/ParamConverter/DeveloperWithUser.php
+++ b/src/ParamConverter/DeveloperWithUser.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\ParamConverter;
 
+use Drupal\apigee_edge\Entity\DeveloperInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\ParamConverter\ParamConverterInterface;
 use Symfony\Component\Routing\Route;
@@ -36,14 +37,14 @@ final class DeveloperWithUser implements ParamConverterInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * DeveloperWithUser constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -54,7 +55,7 @@ final class DeveloperWithUser implements ParamConverterInterface {
    * {@inheritdoc}
    */
   public function convert($value, $definition, $name, array $defaults) {
-    /** @var \Drupal\apigee_edge\Entity\DeveloperInterface|null $developer */
+    /** @var DeveloperInterface|null $developer */
     $developer = $this->entityTypeManager->getStorage('developer')->load($value);
 
     if ($developer) {
diff --git a/src/Plugin/Derivative/DynamicAddEntityLocalActions.php b/src/Plugin/Derivative/DynamicAddEntityLocalActions.php
index 310273e..ec6f426 100644
--- a/src/Plugin/Derivative/DynamicAddEntityLocalActions.php
+++ b/src/Plugin/Derivative/DynamicAddEntityLocalActions.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Plugin\Derivative;
 
+use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\apigee_edge\Entity\EdgeEntityTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -45,14 +46,14 @@ class DynamicAddEntityLocalActions extends DeriverBase implements ContainerDeriv
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;
 
@@ -61,9 +62,9 @@ class DynamicAddEntityLocalActions extends DeriverBase implements ContainerDeriv
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/EdgeKeyTypeInterface.php b/src/Plugin/EdgeKeyTypeInterface.php
index fc3aa05..83b81d0 100644
--- a/src/Plugin/EdgeKeyTypeInterface.php
+++ b/src/Plugin/EdgeKeyTypeInterface.php
@@ -73,7 +73,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the authentication type.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -84,7 +84,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the API endpoint.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -95,7 +95,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the instance type (public, private or hybrid).
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -106,7 +106,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the API organization.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -117,7 +117,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the API username.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -128,7 +128,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the API password.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -139,7 +139,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the authorization server.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -150,7 +150,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the client ID.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -161,7 +161,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Gets the client secret.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -172,7 +172,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
   /**
    * Return the JSON account key decoded as an array.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return array
@@ -185,7 +185,7 @@ interface EdgeKeyTypeInterface extends KeyTypeMultivalueInterface, KeyTypeAuthen
    *
    * This applies to portals hosted on Google Compute Engine.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return bool
diff --git a/src/Plugin/Field/FieldType/ApigeeEdgeDeveloperIdFieldItem.php b/src/Plugin/Field/FieldType/ApigeeEdgeDeveloperIdFieldItem.php
index a44f8f8..0b57b92 100644
--- a/src/Plugin/Field/FieldType/ApigeeEdgeDeveloperIdFieldItem.php
+++ b/src/Plugin/Field/FieldType/ApigeeEdgeDeveloperIdFieldItem.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Plugin\Field\FieldType;
 
+use Drupal\user\UserInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\TypedData\ComputedItemListTrait;
@@ -35,7 +36,7 @@ class ApigeeEdgeDeveloperIdFieldItem extends FieldItemList {
    * Computes the values for an item list.
    */
   protected function computeValue() {
-    /** @var \Drupal\user\UserInterface $entity */
+    /** @var UserInterface $entity */
     $entity = $this->getEntity();
 
     // Make sure an email address is set.
@@ -45,7 +46,7 @@ class ApigeeEdgeDeveloperIdFieldItem extends FieldItemList {
     }
 
     try {
-      /** @var \Drupal\apigee_edge\Entity\Developer $developer */
+      /** @var Developer $developer */
       $developer = Developer::load($entity->getEmail());
       $value = $developer ? $developer->getDeveloperId() : NULL;
 
diff --git a/src/Plugin/FieldStorageFormatManager.php b/src/Plugin/FieldStorageFormatManager.php
index fa3e858..4626d7d 100644
--- a/src/Plugin/FieldStorageFormatManager.php
+++ b/src/Plugin/FieldStorageFormatManager.php
@@ -66,7 +66,7 @@ class FieldStorageFormatManager extends DefaultPluginManager implements FieldSto
       $fields = $definition['fields'] ?? [];
 
       if (in_array($field_type, $fields) || in_array('*', $fields)) {
-        /** @var \Drupal\apigee_edge\Plugin\FieldStorageFormatInterface $instance */
+        /** @var FieldStorageFormatInterface $instance */
         $instance = $this->createInstance($name);
         return $instance;
       }
diff --git a/src/Plugin/FieldStorageFormatManagerInterface.php b/src/Plugin/FieldStorageFormatManagerInterface.php
index bfae7e3..da397c4 100644
--- a/src/Plugin/FieldStorageFormatManagerInterface.php
+++ b/src/Plugin/FieldStorageFormatManagerInterface.php
@@ -34,7 +34,7 @@ interface FieldStorageFormatManagerInterface extends PluginManagerInterface, Cac
    * @param string $field_type
    *   Field type.
    *
-   * @return \Drupal\apigee_edge\Plugin\FieldStorageFormatInterface|null
+   * @return FieldStorageFormatInterface|null
    *   Storage formatter if found. NULL if not.
    */
   public function lookupPluginForFieldType(string $field_type): ?FieldStorageFormatInterface;
diff --git a/src/Plugin/KeyProvider/EnvironmentVariablesKeyProvider.php b/src/Plugin/KeyProvider/EnvironmentVariablesKeyProvider.php
index ffd2394..13bb9e9 100644
--- a/src/Plugin/KeyProvider/EnvironmentVariablesKeyProvider.php
+++ b/src/Plugin/KeyProvider/EnvironmentVariablesKeyProvider.php
@@ -102,7 +102,7 @@ class EnvironmentVariablesKeyProvider extends KeyProviderRequirementsBase implem
   /**
    * Returns an array containing the environment variables by key type.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    * @param bool $required
    *   Returns only the required environment variables.
diff --git a/src/Plugin/KeyProvider/KeyProviderRequirementsBase.php b/src/Plugin/KeyProvider/KeyProviderRequirementsBase.php
index 96440f1..296c2ab 100644
--- a/src/Plugin/KeyProvider/KeyProviderRequirementsBase.php
+++ b/src/Plugin/KeyProvider/KeyProviderRequirementsBase.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Plugin\KeyProvider;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\apigee_edge\Exception\KeyProviderRequirementsException;
 use Drupal\apigee_edge\Plugin\KeyProviderRequirementsInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -37,7 +38,7 @@ abstract class KeyProviderRequirementsBase extends KeyProviderBase implements Ke
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;
 
@@ -50,7 +51,7 @@ abstract class KeyProviderRequirementsBase extends KeyProviderBase implements Ke
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger) {
@@ -107,7 +108,7 @@ abstract class KeyProviderRequirementsBase extends KeyProviderBase implements Ke
   /**
    * The method that returns a key's value after pre-requirements got validated.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   A key entity.
    */
   abstract protected function realGetKeyValue(KeyInterface $key);
@@ -115,7 +116,7 @@ abstract class KeyProviderRequirementsBase extends KeyProviderBase implements Ke
   /**
    * Gets the logger service.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger service.
    */
   protected function getLogger(): LoggerInterface {
diff --git a/src/Plugin/KeyProvider/PrivateFileKeyProvider.php b/src/Plugin/KeyProvider/PrivateFileKeyProvider.php
index 95c0be2..e22a5ff 100644
--- a/src/Plugin/KeyProvider/PrivateFileKeyProvider.php
+++ b/src/Plugin/KeyProvider/PrivateFileKeyProvider.php
@@ -49,7 +49,7 @@ class PrivateFileKeyProvider extends KeyProviderRequirementsBase implements KeyP
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;
 
@@ -62,9 +62,9 @@ class PrivateFileKeyProvider extends KeyProviderRequirementsBase implements KeyP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerInterface $logger, FileSystemInterface $file_system) {
@@ -187,7 +187,7 @@ class PrivateFileKeyProvider extends KeyProviderRequirementsBase implements KeyP
   /**
    * Gets the URI of the file that contains the key value.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
    * @return string
@@ -200,7 +200,7 @@ class PrivateFileKeyProvider extends KeyProviderRequirementsBase implements KeyP
   /**
    * Gets the file system service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   The file system service.
    */
   protected function getFileSystem(): FileSystemInterface {
diff --git a/src/Plugin/KeyProviderRequirementsInterface.php b/src/Plugin/KeyProviderRequirementsInterface.php
index 365689b..50459b1 100644
--- a/src/Plugin/KeyProviderRequirementsInterface.php
+++ b/src/Plugin/KeyProviderRequirementsInterface.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge\Plugin;
 
+use Drupal\apigee_edge\Exception\KeyProviderRequirementsException;
 use Drupal\key\KeyInterface;
 
 /**
@@ -29,10 +30,10 @@ interface KeyProviderRequirementsInterface {
   /**
    * Checks the requirements of the key provider.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
-   * @throws \Drupal\apigee_edge\Exception\KeyProviderRequirementsException
+   * @throws KeyProviderRequirementsException
    *   Exception thrown when the requirements of the key provider are not
    *   fulfilled.
    */
diff --git a/src/Plugin/KeyTypeAuthenticationMethodInterface.php b/src/Plugin/KeyTypeAuthenticationMethodInterface.php
index e91cc7b..0d2372e 100644
--- a/src/Plugin/KeyTypeAuthenticationMethodInterface.php
+++ b/src/Plugin/KeyTypeAuthenticationMethodInterface.php
@@ -30,10 +30,10 @@ interface KeyTypeAuthenticationMethodInterface {
   /**
    * Gets the authentication method object.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity.
    *
-   * @return \Http\Message\Authentication
+   * @return Authentication
    *   The authentication object.
    */
   public function getAuthenticationMethod(KeyInterface $key): Authentication;
diff --git a/src/Plugin/Menu/AddAppForDeveloperLocalAction.php b/src/Plugin/Menu/AddAppForDeveloperLocalAction.php
index 87be60e..de99807 100644
--- a/src/Plugin/Menu/AddAppForDeveloperLocalAction.php
+++ b/src/Plugin/Menu/AddAppForDeveloperLocalAction.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Plugin\Menu;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Menu\LocalActionDefault;
 use Drupal\Core\Routing\RouteProviderInterface;
@@ -38,7 +39,7 @@ class AddAppForDeveloperLocalAction extends LocalActionDefault {
   /**
    * The developer app entity type definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $developerAppEntity;
 
@@ -51,11 +52,11 @@ class AddAppForDeveloperLocalAction extends LocalActionDefault {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider to load routes by name.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/QueueWorker/JobQueueWorker.php b/src/Plugin/QueueWorker/JobQueueWorker.php
index 6f911d2..2588cbd 100644
--- a/src/Plugin/QueueWorker/JobQueueWorker.php
+++ b/src/Plugin/QueueWorker/JobQueueWorker.php
@@ -19,6 +19,8 @@
 
 namespace Drupal\apigee_edge\Plugin\QueueWorker;
 
+use Drupal\apigee_edge\JobExecutor;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\apigee_edge\Job\Job;
 use Drupal\apigee_edge\JobExecutorInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -39,14 +41,14 @@ class JobQueueWorker extends QueueWorkerBase implements ContainerFactoryPluginIn
   /**
    * The job executor service.
    *
-   * @var \Drupal\apigee_edge\JobExecutor
+   * @var JobExecutor
    */
   protected $executor;
 
   /**
    * The queue object.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
@@ -63,9 +65,9 @@ class JobQueueWorker extends QueueWorkerBase implements ContainerFactoryPluginIn
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\apigee_edge\JobExecutor $executor */
+    /** @var JobExecutor $executor */
     $executor = $container->get('apigee_edge.job_executor');
-    /** @var \Drupal\Core\Queue\QueueFactory $queueFactory */
+    /** @var QueueFactory $queueFactory */
     $queue_factory = $container->get('queue');
     return new static($configuration, $plugin_id, $plugin_definition, $executor, $queue_factory);
   }
diff --git a/src/Plugin/Validation/Constraint/DeveloperEmailUniqueValidator.php b/src/Plugin/Validation/Constraint/DeveloperEmailUniqueValidator.php
index 537105b..bafe67f 100644
--- a/src/Plugin/Validation/Constraint/DeveloperEmailUniqueValidator.php
+++ b/src/Plugin/Validation/Constraint/DeveloperEmailUniqueValidator.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\apigee_edge\Entity\Developer;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -35,7 +36,7 @@ class DeveloperEmailUniqueValidator extends ConstraintValidator implements Conta
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
@@ -49,7 +50,7 @@ class DeveloperEmailUniqueValidator extends ConstraintValidator implements Conta
   /**
    * DeveloperEmailUniqueValidator constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -63,7 +64,7 @@ class DeveloperEmailUniqueValidator extends ConstraintValidator implements Conta
     if (empty($items->value) || in_array($items->value, static::$whitelist)) {
       return;
     }
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $items->getEntity();
     // If field's value has not changed do not validate it.
     if (!$entity->isNew()) {
diff --git a/src/Routing/EdgeEntityFieldConfigListRouteSubscriber.php b/src/Routing/EdgeEntityFieldConfigListRouteSubscriber.php
index 652d297..63c4dea 100644
--- a/src/Routing/EdgeEntityFieldConfigListRouteSubscriber.php
+++ b/src/Routing/EdgeEntityFieldConfigListRouteSubscriber.php
@@ -35,14 +35,14 @@ final class EdgeEntityFieldConfigListRouteSubscriber implements EventSubscriberI
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * AppFieldConfigListUiRouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -61,7 +61,7 @@ final class EdgeEntityFieldConfigListRouteSubscriber implements EventSubscriberI
   /**
    * Alters Apigee Edge entity related field config listing UI routes.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The route build event.
    */
   public function alterRoutes(RouteBuildEvent $event) {
diff --git a/src/SDKConnector.php b/src/SDKConnector.php
index df8282c..bd6a68f 100644
--- a/src/SDKConnector.php
+++ b/src/SDKConnector.php
@@ -19,6 +19,7 @@
 
 namespace Drupal\apigee_edge;
 
+use Http\Client\HttpClient;
 use Apigee\Edge\Api\Management\Controller\OrganizationController;
 use Apigee\Edge\Client;
 use Apigee\Edge\ClientInterface;
@@ -46,14 +47,14 @@ class SDKConnector implements SDKConnectorInterface {
   /**
    * The client object.
    *
-   * @var null|\Http\Client\HttpClient
+   * @var null|HttpClient
    */
   private static $client = NULL;
 
   /**
    * The currently used credentials object.
    *
-   * @var null|\Drupal\apigee_edge\CredentialsInterface
+   * @var null|CredentialsInterface
    */
   private static $credentials = NULL;
 
@@ -67,59 +68,59 @@ class SDKConnector implements SDKConnectorInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The key repository.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The info parser.
    *
-   * @var \Drupal\Core\Extension\InfoParserInterface
+   * @var InfoParserInterface
    */
   protected $infoParser;
 
   /**
    * The HTTP client factory.
    *
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   private $clientFactory;
 
   /**
    * Constructs a new SDKConnector.
    *
-   * @param \Drupal\Core\Http\ClientFactory $client_factory
+   * @param ClientFactory $client_factory
    *   Http client.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   The key repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   Info file parser service.
    */
   public function __construct(ClientFactory $client_factory, KeyRepositoryInterface $key_repository, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, InfoParserInterface $info_parser) {
@@ -165,7 +166,7 @@ class SDKConnector implements SDKConnectorInterface {
     if ($authentication === NULL) {
       if (self::$client === NULL) {
         $credentials = $this->getCredentials();
-        /** @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface $key_type */
+        /** @var EdgeKeyTypeInterface $key_type */
         self::$client = $this->buildClient($credentials->getAuthentication(), $credentials->getKeyType()->getEndpoint($credentials->getKey()));
       }
 
@@ -190,7 +191,7 @@ class SDKConnector implements SDKConnectorInterface {
   /**
    * Returns the credentials object used by the API client.
    *
-   * @return \Drupal\apigee_edge\CredentialsInterface
+   * @return CredentialsInterface
    *   The key entity.
    */
   private function getCredentials(): CredentialsInterface {
@@ -211,7 +212,7 @@ class SDKConnector implements SDKConnectorInterface {
   /**
    * Changes credentials used by the API client.
    *
-   * @param \Drupal\apigee_edge\CredentialsInterface $credentials
+   * @param CredentialsInterface $credentials
    *   The new credentials object.
    */
   private function setCredentials(CredentialsInterface $credentials) {
@@ -223,14 +224,14 @@ class SDKConnector implements SDKConnectorInterface {
   /**
    * Builds credentials, which depends on the KeyType of the key entity.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity which stores the API credentials.
    *
-   * @return \Drupal\apigee_edge\CredentialsInterface
+   * @return CredentialsInterface
    *   The credentials.
    */
   private function buildCredentials(KeyInterface $key): CredentialsInterface {
-    /** @var \Drupal\apigee_edge\Plugin\EdgeKeyTypeInterface $key */
+    /** @var EdgeKeyTypeInterface $key */
     if ($key->getKeyType() instanceof EdgeKeyTypeInterface) {
       if ($key->getKeyType()->getInstanceType($key) === EdgeKeyTypeInterface::INSTANCE_TYPE_HYBRID) {
         return new HybridCredentials($key);
diff --git a/src/SDKConnectorInterface.php b/src/SDKConnectorInterface.php
index 61e2fad..595523d 100644
--- a/src/SDKConnectorInterface.php
+++ b/src/SDKConnectorInterface.php
@@ -39,7 +39,7 @@ interface SDKConnectorInterface {
   /**
    * Returns the http client.
    *
-   * @return \Apigee\Edge\ClientInterface
+   * @return ClientInterface
    *   The http client.
    */
   public function getClient(): ClientInterface;
@@ -47,7 +47,7 @@ interface SDKConnectorInterface {
   /**
    * Test connection with the Edge Management Server.
    *
-   * @param \Drupal\key\KeyInterface|null $key
+   * @param KeyInterface|null $key
    *   Key entity to check connection with Edge,
    *   if NULL, then use the stored key.
    *
@@ -58,14 +58,14 @@ interface SDKConnectorInterface {
   /**
    * Returns a pre-configured API client with the provided credentials.
    *
-   * @param \Http\Message\Authentication $authentication
+   * @param Authentication $authentication
    *   Authentication.
    * @param null|string $endpoint
    *   API endpoint, default is https://api.enterprise.apigee.com/v1.
    * @param array $options
    *   Client configuration option.
    *
-   * @return \Apigee\Edge\ClientInterface
+   * @return ClientInterface
    *   Configured API client.
    */
   public function buildClient(Authentication $authentication, ?string $endpoint = NULL, array $options = []): ClientInterface;
diff --git a/src/Structure/DeveloperToUserConversionResult.php b/src/Structure/DeveloperToUserConversionResult.php
index 33e0e58..a1e3b4e 100644
--- a/src/Structure/DeveloperToUserConversionResult.php
+++ b/src/Structure/DeveloperToUserConversionResult.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Structure;
 
+use Drupal\apigee_edge\Exception\UserDeveloperConversionException;
 use Drupal\user\UserInterface;
 
 /**
@@ -30,20 +31,20 @@ final class DeveloperToUserConversionResult extends UserDeveloperConversionResul
   /**
    * The result of the conversion.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $user;
 
   /**
    * DeveloperToUserConversionResult constructor.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The result of the conversion.
    * @param int $successfully_appliedchanges
    *   Number of successfully applied _necessary_ changes.
    *   (It should not contains redundant changes, ex.: when the property value
    *   has not changed.)
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   Problems occurred meanwhile the conversion (ex.: field validation errors,
    *   etc.)
    */
@@ -55,7 +56,7 @@ final class DeveloperToUserConversionResult extends UserDeveloperConversionResul
   /**
    * The created Drupal user from a developer.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   User object.
    */
   public function getUser(): UserInterface {
diff --git a/src/Structure/UserDeveloperConversionResult.php b/src/Structure/UserDeveloperConversionResult.php
index b07e14b..3e91621 100644
--- a/src/Structure/UserDeveloperConversionResult.php
+++ b/src/Structure/UserDeveloperConversionResult.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Structure;
 
+use Drupal\apigee_edge\Exception\UserDeveloperConversionException;
 /**
  * Base class for user-developer conversion results.
  *
@@ -37,7 +38,7 @@ class UserDeveloperConversionResult {
   /**
    * Problems occurred meanwhile the conversion.
    *
-   * @var \Drupal\apigee_edge\Exception\UserDeveloperConversionException[]
+   * @var UserDeveloperConversionException[]
    */
   protected $problems;
 
@@ -48,7 +49,7 @@ class UserDeveloperConversionResult {
    *   Number of successfully applied _necessary_ changes.
    *   (It should not contains redundant changes, ex.: when the property value
    *   has not changed.)
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   Problems occurred meanwhile the conversion (ex.: field validation errors,
    *   etc.)
    */
@@ -70,7 +71,7 @@ class UserDeveloperConversionResult {
   /**
    * Problems occurred meanwhile the conversion.
    *
-   * @return \Drupal\apigee_edge\Exception\UserDeveloperConversionException[]
+   * @return UserDeveloperConversionException[]
    *   Array of problems.
    */
   public function getProblems(): array {
diff --git a/src/Structure/UserToDeveloperConversionResult.php b/src/Structure/UserToDeveloperConversionResult.php
index 2d998ad..4498a8c 100644
--- a/src/Structure/UserToDeveloperConversionResult.php
+++ b/src/Structure/UserToDeveloperConversionResult.php
@@ -20,6 +20,7 @@
 
 namespace Drupal\apigee_edge\Structure;
 
+use Drupal\apigee_edge\Exception\UserDeveloperConversionException;
 use Drupal\apigee_edge\Entity\DeveloperInterface;
 
 /**
@@ -30,20 +31,20 @@ final class UserToDeveloperConversionResult extends UserDeveloperConversionResul
   /**
    * The result of the conversion.
    *
-   * @var \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @var DeveloperInterface
    */
   private $developer;
 
   /**
    * UserToDeveloperResult constructor.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   The result of the conversion.
    * @param int $successfully_appliedchanges
    *   Number of successfully applied _necessary_ changes.
    *   (It should not contains redundant changes, ex.: when the property value
    *   has not changed.)
-   * @param \Drupal\apigee_edge\Exception\UserDeveloperConversionException[] $problems
+   * @param UserDeveloperConversionException[] $problems
    *   Problems occurred meanwhile the conversion (ex.: field validation errors,
    *   etc.)
    */
@@ -55,7 +56,7 @@ final class UserToDeveloperConversionResult extends UserDeveloperConversionResul
   /**
    * The created developer from a user.
    *
-   * @return \Drupal\apigee_edge\Entity\DeveloperInterface
+   * @return DeveloperInterface
    *   Developer object.
    */
   public function getDeveloper(): DeveloperInterface {
diff --git a/src/UserDeveloperConverter.php b/src/UserDeveloperConverter.php
index 8f316c3..8bfa019 100644
--- a/src/UserDeveloperConverter.php
+++ b/src/UserDeveloperConverter.php
@@ -41,41 +41,41 @@ class UserDeveloperConverter implements UserDeveloperConverterInterface {
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * Field storage formatter service.
    *
-   * @var \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface
+   * @var FieldStorageFormatManagerInterface
    */
   protected $fieldStorageFormatManager;
 
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Field-attribute converter service.
    *
-   * @var \Drupal\apigee_edge\FieldAttributeConverterInterface
+   * @var FieldAttributeConverterInterface
    */
   protected $fieldAttributeConverter;
 
   /**
    * UserToDeveloper constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\apigee_edge\Plugin\FieldStorageFormatManagerInterface $field_storage_manager
+   * @param FieldStorageFormatManagerInterface $field_storage_manager
    *   Field storage manager service.
-   * @param \Drupal\apigee_edge\FieldAttributeConverterInterface $field_attribute_converter
+   * @param FieldAttributeConverterInterface $field_attribute_converter
    *   Field name to attribute name converter service.
    */
   public function __construct(ConfigFactory $config_factory, EntityTypeManagerInterface $entity_type_manager, FieldStorageFormatManagerInterface $field_storage_manager, FieldAttributeConverterInterface $field_attribute_converter) {
@@ -97,7 +97,7 @@ class UserDeveloperConverter implements UserDeveloperConverterInterface {
       $developer = $this->entityTypeManager->getStorage('developer')->load($email);
     }
     if (!$developer) {
-      /** @var \Drupal\apigee_edge\Entity\DeveloperInterface $developer */
+      /** @var DeveloperInterface $developer */
       $developer = $this->entityTypeManager->getStorage('developer')->create([]);
       $developer->setOwnerId($user->id());
     }
@@ -176,7 +176,7 @@ class UserDeveloperConverter implements UserDeveloperConverterInterface {
     $users = $user_storage->loadByProperties(['mail' => $developer->id()]);
     $user = $users ? reset($users) : FALSE;
 
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     if (!$user) {
       // Initialize new user object with minimum data.
       $user = $user_storage->create([
diff --git a/src/UserDeveloperConverterInterface.php b/src/UserDeveloperConverterInterface.php
index c480124..2d7af19 100644
--- a/src/UserDeveloperConverterInterface.php
+++ b/src/UserDeveloperConverterInterface.php
@@ -50,10 +50,10 @@ interface UserDeveloperConverterInterface {
    *
    * It modifies only those properties that changed.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The Drupal user entity.
    *
-   * @return \Drupal\apigee_edge\Structure\UserToDeveloperConversionResult
+   * @return UserToDeveloperConversionResult
    *   The result of the conversion.
    */
   public function convertUser(UserInterface $user): UserToDeveloperConversionResult;
@@ -66,10 +66,10 @@ interface UserDeveloperConverterInterface {
    *
    * It modifies only those properties that changed.
    *
-   * @param \Drupal\apigee_edge\Entity\DeveloperInterface $developer
+   * @param DeveloperInterface $developer
    *   The developer entity.
    *
-   * @return \Drupal\apigee_edge\Structure\DeveloperToUserConversionResult
+   * @return DeveloperToUserConversionResult
    *   The result of the conversion.
    */
   public function convertDeveloper(DeveloperInterface $developer): DeveloperToUserConversionResult;
