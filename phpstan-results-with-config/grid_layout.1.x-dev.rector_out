modules/contrib/grid_layout/grid_layout.module
modules/contrib/grid_layout/src/Event/GridLayoutBuildEvent.php
modules/contrib/grid_layout/src/Event/GridLayoutDefaultConfigEvent.php
modules/contrib/grid_layout/src/Event/GridLayoutFormBuildEvent.php
modules/contrib/grid_layout/src/Event/GridLayoutFormEvent.php
modules/contrib/grid_layout/src/Event/GridLayoutFormSubmitEvent.php
modules/contrib/grid_layout/src/Event/GridLayoutFormValidateEvent.php
modules/contrib/grid_layout/src/Event/GridLayoutRegionsAlterEvent.php
modules/contrib/grid_layout/src/EventSubscriber/GridLayoutBuildSubscriber.php
modules/contrib/grid_layout/src/EventSubscriber/GridLayoutFormSubscriber.php
modules/contrib/grid_layout/src/GridLayoutEvents.php
modules/contrib/grid_layout/src/Plugin/Layout/GridLayout.php

7 files with changes
====================

1) modules/contrib/grid_layout/src/Plugin/Layout/GridLayout.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
    *   The plugin id.
    * @param $plugin_definition
    *   The plugin definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $dispatcher) {
@@ @@
       'columns' => [],
     ];
     $event = new GridLayoutDefaultConfigEvent($this, $default_config);
-    $this->dispatcher->dispatch(GridLayoutEvents::DEFAULT_CONFIG, $event);
+    $this->dispatcher->dispatch($event, GridLayoutEvents::DEFAULT_CONFIG);
     return $event->getDefaultConfig();
   }

@@ @@
    */
   public function build(array $regions) {
     $event = new GridLayoutRegionsAlterEvent($this, $regions);
-    $this->dispatcher->dispatch(GridLayoutEvents::REGIONS_ALTER, $event);
+    $this->dispatcher->dispatch($event, GridLayoutEvents::REGIONS_ALTER);
     $regions = $event->getRegions();

     $build = parent::build($regions);

     $event = new GridLayoutBuildEvent($this, $build, $regions);
-    $this->dispatcher->dispatch(GridLayoutEvents::BUILD_LAYOUT, $event);
+    $this->dispatcher->dispatch($event, GridLayoutEvents::BUILD_LAYOUT);
     return $event->getBuild();
   }

@@ @@
     $form = parent::buildConfigurationForm($form, $form_state);

     $event = new GridLayoutFormBuildEvent($this, $form, $form_state);
-    $this->dispatcher->dispatch(GridLayoutEvents::FORM_BUILD, $event);
+    $this->dispatcher->dispatch($event, GridLayoutEvents::FORM_BUILD);
     return $event->getForm();
   }

@@ @@
     parent::validateConfigurationForm($form, $form_state);

     $event = new GridLayoutFormValidateEvent($this, $form, $form_state);
-    $this->dispatcher->dispatch(GridLayoutEvents::FORM_VALIDATE, $event);
+    $this->dispatcher->dispatch($event, GridLayoutEvents::FORM_VALIDATE);
     $form = $event->getForm();
     $form_state = $event->getFormState();
   }
@@ @@
     parent::submitConfigurationForm($form, $form_state);

     $event = new GridLayoutFormSubmitEvent($this, $form, $form_state);
-    $this->dispatcher->dispatch(GridLayoutEvents::FORM_SUBMIT, $event);
+    $this->dispatcher->dispatch($event, GridLayoutEvents::FORM_SUBMIT);
     $form = $event->getForm();
     $form_state = $event->getFormState();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/grid_layout/src/EventSubscriber/GridLayoutFormSubscriber.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The library discovery.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The uuid generator.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * GridLayoutFormSubscriber constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The Drupal file system
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $libraryDiscovery
+   * @param LibraryDiscoveryInterface $libraryDiscovery
    *   The library discovery.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The uuid generator.
    */
   public function __construct(FileSystemInterface $fileSystem, LibraryDiscoveryInterface $libraryDiscovery, UuidInterface $uuid) {
@@ @@
   }

   /**
-   * @param \Drupal\grid_layout\Event\GridLayoutFormBuildEvent $event
+   * @param GridLayoutFormBuildEvent $event
    */
   public function onFormBuild(GridLayoutFormBuildEvent $event) {
     $layout = $event->getLayout();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/grid_layout/src/Event/GridLayoutRegionsAlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\grid_layout\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\grid_layout\Plugin\Layout\GridLayout;
-use Symfony\Component\EventDispatcher\Event;

 class GridLayoutRegionsAlterEvent extends Event {

   /**
-   * @var \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @var GridLayout
    */
   protected $layout;

@@ @@
   /**
    * GridLayoutPreBuildEvent constructor.
    *
-   * @param \Drupal\grid_layout\Plugin\Layout\GridLayout $layout
+   * @param GridLayout $layout
    * @param array $regions
    */
   public function __construct(GridLayout $layout, array $regions) {
@@ @@
   }

   /**
-   * @return \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @return GridLayout
    */
-  public function getLayout(): \Drupal\grid_layout\Plugin\Layout\GridLayout {
+  public function getLayout(): GridLayout {
     return $this->layout;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/grid_layout/src/Event/GridLayoutFormEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\grid_layout\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\grid_layout\Plugin\Layout\GridLayout;
-use Symfony\Component\EventDispatcher\Event;

 abstract class GridLayoutFormEvent extends Event {

@@ @@
   /**
    * The grid layout plugin.
    *
-   * @var \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @var GridLayout
    */
   protected $layout;

@@ @@
   /**
    * The FormState object.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
   /**
    * GridLayoutFormBuildEvent constructor.
    *
-   * @param \Drupal\grid_layout\Plugin\Layout\GridLayout $layout
+   * @param GridLayout $layout
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function __construct(GridLayout $layout, array $form, FormStateInterface $form_state) {
     $this->layout = $layout;
@@ @@
   /**
    * Get the grid layout plugin.
    *
-   * @return \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @return GridLayout
    */
   public function getLayout(): GridLayout {
     return $this->layout;
@@ @@
   /**
    * Get the FormState object.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    */
   public function getFormState(): FormStateInterface {
     return $this->formState;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/grid_layout/src/Event/GridLayoutDefaultConfigEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\grid_layout\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\grid_layout\Plugin\Layout\GridLayout;
-use Symfony\Component\EventDispatcher\Event;

 class GridLayoutDefaultConfigEvent extends Event {

@@ @@
   /**
    * The grid layout plugin.
    *
-   * @var \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @var GridLayout
    */
   protected $layout;

@@ @@
   /**
    * GridLayoutDefaultConfigEvent constructor.
    *
-   * @param \Drupal\grid_layout\Plugin\Layout\GridLayout $layout
+   * @param GridLayout $layout
    */
   public function __construct(GridLayout $layout, array $default_config) {
     $this->layout = $layout;
@@ @@
   /**
    * Get the current grid layout.
    *
-   * @return \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @return GridLayout
    */
   public function getLayout() : GridLayout {
     return $this->layout;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/grid_layout/src/Event/GridLayoutBuildEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\grid_layout\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\grid_layout\Plugin\Layout\GridLayout;
-use Symfony\Component\EventDispatcher\Event;

 class GridLayoutBuildEvent extends Event {

@@ @@
   /**
    * The grid layout plugin.
    *
-   * @var \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @var GridLayout
    */
   protected $layout;

@@ @@
   /**
    * GridLayoutBuildEvent constructor.
    *
-   * @param \Drupal\grid_layout\Plugin\Layout\GridLayout $layout
+   * @param GridLayout $layout
    * @param array $build
    * @param array $regions
    */
@@ @@
   /**
    * Get the current grid layout.
    *
-   * @return \Drupal\grid_layout\Plugin\Layout\GridLayout
+   * @return GridLayout
    */
   public function getLayout(): GridLayout {
     return $this->layout;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/grid_layout/grid_layout.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\File\FileSystemInterface;
 /**
  * Implements hook_library_info_build().
  */
 function grid_layout_library_info_build() {
   $libraries = [];
-  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+  /** @var FileSystemInterface $file_system */
   $file_system = \Drupal::service('file_system');
   $files = $file_system->scanDirectory('public://grid_layout', '/.*/');
   foreach ($files as $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 4 nodes were removed                                                 

 [OK] 7 files have been changed by Rector                                       

