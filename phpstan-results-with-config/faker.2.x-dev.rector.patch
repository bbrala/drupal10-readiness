diff --git a/faker.info.yml b/faker.info.yml
index 93c1daf..a288bdd 100644
--- a/faker.info.yml
+++ b/faker.info.yml
@@ -2,5 +2,4 @@ name: Faker
 type: module
 description: Use the PHP Faker library to generate more meaningful sample content.
 package: Development
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
diff --git a/src/Annotation/FakerDataSampler.php b/src/Annotation/FakerDataSampler.php
index 9a20237..de70db4 100644
--- a/src/Annotation/FakerDataSampler.php
+++ b/src/Annotation/FakerDataSampler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\faker\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class FakerDataSampler extends Plugin {
   /**
    * The plugin label.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/FakerDataSamplerInterface.php b/src/FakerDataSamplerInterface.php
index 5c50e57..8577083 100644
--- a/src/FakerDataSamplerInterface.php
+++ b/src/FakerDataSamplerInterface.php
@@ -19,7 +19,7 @@ interface FakerDataSamplerInterface {
   /**
    * Generate sample data with Faker.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    * @param string $faker_locale
    *   The locale to use if specified.
diff --git a/src/FakerDataSamplerManager.php b/src/FakerDataSamplerManager.php
index be30f28..7cce191 100644
--- a/src/FakerDataSamplerManager.php
+++ b/src/FakerDataSamplerManager.php
@@ -20,9 +20,9 @@ class FakerDataSamplerManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FakerDevelGenerateTrait.php b/src/FakerDevelGenerateTrait.php
index 80f9eb9..02558b9 100644
--- a/src/FakerDevelGenerateTrait.php
+++ b/src/FakerDevelGenerateTrait.php
@@ -29,7 +29,7 @@ trait FakerDevelGenerateTrait {
    *
    * @param array $form
    *   The settings form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return mixed
@@ -76,7 +76,7 @@ trait FakerDevelGenerateTrait {
       ],
     ];
 
-    /** @var \Drupal\faker\FakerDataSamplerInterface $faker_sampler */
+    /** @var FakerDataSamplerInterface $faker_sampler */
     $faker_sampler_definitions = \Drupal::service('plugin.manager.faker_data_sampler')->getDefinitions();
     foreach ($faker_sampler_definitions as $faker_sampler_id => $faker_sampler_definition) {
       if (in_array('string', $faker_sampler_definition['field_type_ids'], TRUE)) {
@@ -100,9 +100,9 @@ trait FakerDevelGenerateTrait {
   /**
    * Sets entity specific field values.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to apply the changes to.
-   * @param \Drupal\faker\FakerDataSamplerInterface $faker_sampler
+   * @param FakerDataSamplerInterface $faker_sampler
    *   The sampler to use for data population.
    */
   public static function setEntityFields(EntityInterface $entity, FakerDataSamplerInterface $faker_sampler) {}
diff --git a/src/FakerHelper.php b/src/FakerHelper.php
index 944697b..6fb0ff5 100644
--- a/src/FakerHelper.php
+++ b/src/FakerHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\faker;
 
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 
@@ -100,7 +101,7 @@ class FakerHelper {
   /**
    * Helps handling entity pre save hooks.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be enriched with sample field values.
    * @param string|null $decorator
    *   The entity decorator class.
@@ -119,7 +120,7 @@ class FakerHelper {
         }
         // Re-set entity specific base fields using Faker if required.
         if (isset($entity->devel_generate[FakerConstants::ENTITY_TITLE]) && $entity->devel_generate[FakerConstants::ENTITY_TITLE] !== FakerConstants::OPTION_NONE) {
-          /** @var \Drupal\faker\FakerDataSamplerInterface $faker_sampler */
+          /** @var FakerDataSamplerInterface $faker_sampler */
           $faker_sampler = \Drupal::service('plugin.manager.faker_data_sampler')->createInstance($entity->devel_generate[FakerConstants::ENTITY_TITLE]);
           $decorator::setEntityFields($entity, $faker_sampler);
         }
@@ -141,7 +142,7 @@ class FakerHelper {
   /**
    * Populate the fields on a given entity with sample values.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be enriched with sample field values.
    * @param string $faker_profile_id
    *   The profile to use.
@@ -156,7 +157,7 @@ class FakerHelper {
     $faker_profile = \Drupal::entityTypeManager()->getStorage('faker_profile')->load($faker_profile_id);
     $faker_profile_data_samplers = $faker_profile->getDataSamplers();
 
-    /** @var \Drupal\field\FieldConfigInterface[] $instances */
+    /** @var FieldConfigInterface[] $instances */
     $instances = \Drupal::entityTypeManager()
       ->getStorage('field_config')
       ->loadByProperties([
@@ -180,7 +181,7 @@ class FakerHelper {
       // Match field type id with sampler.
       if (isset($faker_profile_data_samplers[$field_definition_type])) {
         $faker_sampler_id = $faker_profile_data_samplers[$field_definition_type];
-        /** @var \Drupal\faker\FakerDataSamplerInterface $faker_sampler */
+        /** @var FakerDataSamplerInterface $faker_sampler */
         $faker_sampler = \Drupal::service('plugin.manager.faker_data_sampler')->createInstance($faker_sampler_id);
         $values = [];
         for ($delta = 0; $delta < $max; $delta++) {
diff --git a/src/Plugin/FakerDataSampler/ImageFakerDataSampler.php b/src/Plugin/FakerDataSampler/ImageFakerDataSampler.php
index 88ebdfe..1ea760e 100644
--- a/src/Plugin/FakerDataSampler/ImageFakerDataSampler.php
+++ b/src/Plugin/FakerDataSampler/ImageFakerDataSampler.php
@@ -37,7 +37,7 @@ class ImageFakerDataSampler extends FakerDataSamplerBase {
     $extension = array_rand(array_combine($extensions, $extensions));
 
     // Generate a max of 5 different images.
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $tmp_file = $file_system->tempnam('temporary://', 'generateImage_');
     $destination = $tmp_file . '.' . $extension;
@@ -57,7 +57,7 @@ class ImageFakerDataSampler extends FakerDataSamplerBase {
       $destination_dir = static::doGetUploadLocation($settings);
       $file_system->prepareDirectory($destination_dir, FileSystemInterface::CREATE_DIRECTORY);
       $destination = $destination_dir . '/' . basename($path);
-      $file = file_move($image, $destination);
+      $file = \Drupal::service('file.repository')->move($image, $destination);
       $images[$extension][$min_resolution][$max_resolution][$file->id()] = $file;
     }
     else {
