diff --git a/modules/sms_blast/src/SmsBlastForm.php b/modules/sms_blast/src/SmsBlastForm.php
index dd0e3a8..1970394 100644
--- a/modules/sms_blast/src/SmsBlastForm.php
+++ b/modules/sms_blast/src/SmsBlastForm.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\sms_blast;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\sms\Entity\PhoneNumberVerificationInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -20,25 +22,25 @@ class SmsBlastForm extends FormBase {
   /**
    * Storage for Phone Number Verification entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $phoneNumberVerificationStorage;
 
   /**
    * Phone number provider.
    *
-   * @var \Drupal\sms\Provider\PhoneNumberProviderInterface
+   * @var PhoneNumberProviderInterface
    */
   protected $phoneNumberProvider;
 
   /**
    * Constructs a new SmsBlastForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\sms\Provider\PhoneNumberProviderInterface $phone_number_provider
+   * @param PhoneNumberProviderInterface $phone_number_provider
    *   The phone number provider.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, PhoneNumberProviderInterface $phone_number_provider, MessengerInterface $messenger) {
@@ -100,7 +102,7 @@ class SmsBlastForm extends FormBase {
     $success = 0;
     $failure = 0;
     $entity_ids = [];
-    /** @var \Drupal\sms\Entity\PhoneNumberVerificationInterface $verification */
+    /** @var PhoneNumberVerificationInterface $verification */
     foreach ($this->phoneNumberVerificationStorage->loadMultiple($ids) as $verification) {
       // Ensure entity exists and one message is sent to each entity.
       if (($entity = $verification->getEntity()) && !in_array($entity->id(), $entity_ids)) {
diff --git a/modules/sms_blast/tests/src/Functional/SmsBlastBrowserTest.php b/modules/sms_blast/tests/src/Functional/SmsBlastBrowserTest.php
index 8b59d31..730fbed 100644
--- a/modules/sms_blast/tests/src/Functional/SmsBlastBrowserTest.php
+++ b/modules/sms_blast/tests/src/Functional/SmsBlastBrowserTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\sms_blast\Functional;
 
+use Drupal\sms\Entity\PhoneNumberSettingsInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\sms\Functional\SmsFrameworkBrowserTestBase;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;
@@ -29,14 +31,14 @@ class SmsBlastBrowserTest extends SmsFrameworkBrowserTestBase {
   /**
    * Phone number settings of user entity type.
    *
-   * @var \Drupal\sms\Entity\PhoneNumberSettingsInterface
+   * @var PhoneNumberSettingsInterface
    */
   protected $phoneNumberSettings;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser(['Send SMS Blast']));
 
@@ -74,7 +76,7 @@ class SmsBlastBrowserTest extends SmsFrameworkBrowserTestBase {
     $phone_numbers = $this->randomPhoneNumbers();
     $entities = [];
     for ($i = 0; $i < 6; $i++) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $this->createEntityWithPhoneNumber($this->phoneNumberSettings, $phone_numbers);
       // Need to activate so when DER does entity validation it is included by
       // the UserSelection plugin.
@@ -94,12 +96,16 @@ class SmsBlastBrowserTest extends SmsFrameworkBrowserTestBase {
     $this->resetTestMessages();
 
     $edit['message'] = $this->randomString();
-    $this->drupalPostForm('sms_blast', $edit, t('Send'));
-    $this->assertResponse(200);
-    $this->assertText('Message sent to 3 users.');
+    $this->drupalGet('sms_blast');
+    $this->submitForm($edit, t('Send'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Message sent to 3 users.');
 
     // Get the resulting message that was sent and confirm.
-    $this->assertEqual(3, count($this->getTestMessages($this->gateway)), 'Sent three messages.');
+    $this->assertEquals(3, count($this->getTestMessages($this->gateway)), 'Sent three messages.');
   }
 
 }
diff --git a/modules/sms_devel/src/Form/SmsDevelMessageForm.php b/modules/sms_devel/src/Form/SmsDevelMessageForm.php
index 5d36f14..586ecc8 100644
--- a/modules/sms_devel/src/Form/SmsDevelMessageForm.php
+++ b/modules/sms_devel/src/Form/SmsDevelMessageForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\sms_devel\Form;
 
+use Drupal\sms\Entity\SmsMessageInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\sms\Entity\SmsGateway;
@@ -26,23 +27,23 @@ class SmsDevelMessageForm extends FormBase {
   /**
    * The SMS Provider.
    *
-   * @var \Drupal\sms\Provider\SmsProviderInterface
+   * @var SmsProviderInterface
    */
   protected $smsProvider;
 
   /**
    * The message.
    *
-   * @var \Drupal\sms\Entity\SmsMessageInterface
+   * @var SmsMessageInterface
    */
   protected $message;
 
   /**
    * Creates an new SendForm object.
    *
-   * @param \Drupal\sms\Provider\SmsProviderInterface $sms_provider
+   * @param SmsProviderInterface $sms_provider
    *   The SMS service provider.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(SmsProviderInterface $sms_provider, MessengerInterface $messenger) {
@@ -187,7 +188,7 @@ class SmsDevelMessageForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitReceive(array &$form, FormStateInterface $form_state) {
@@ -222,7 +223,7 @@ class SmsDevelMessageForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitSend(array &$form, FormStateInterface $form_state) {
@@ -262,7 +263,7 @@ class SmsDevelMessageForm extends FormBase {
   /**
    * Output a status message for a result object.
    *
-   * @param \Drupal\sms\Message\SmsMessageResultInterface $result
+   * @param SmsMessageResultInterface $result
    *   An SMS result object.
    */
   protected function resultMessage(SmsMessageResultInterface $result) {
@@ -286,7 +287,7 @@ class SmsDevelMessageForm extends FormBase {
   /**
    * Render message results as a HTML table.
    *
-   * @param \Drupal\sms\Message\SmsMessageResultInterface[] $results
+   * @param SmsMessageResultInterface[] $results
    *   Results.
    *
    * @return array
