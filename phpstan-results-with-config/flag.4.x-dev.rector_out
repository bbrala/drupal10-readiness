modules/contrib/flag/flag.api.php
modules/contrib/flag/flag.install
modules/contrib/flag/flag.module
modules/contrib/flag/flag.post_update.php
modules/contrib/flag/flag.tokens.inc
modules/contrib/flag/flag.views.inc
modules/contrib/flag/flag.views_execution.inc
modules/contrib/flag/modules/flag_bookmark/flag_bookmark.module
modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php
modules/contrib/flag/modules/flag_bookmark/tests/src/Kernel/FlagBookmarkInstallUninstallTest.php
modules/contrib/flag/modules/flag_count/flag_count.module
modules/contrib/flag/modules/flag_count/src/Plugin/ActionLink/CountLink.php
modules/contrib/flag/modules/flag_follower/flag_follower.module
modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php
modules/contrib/flag/modules/flag_follower/tests/src/Kernel/FlagFollowerInstallUninstallTest.php
modules/contrib/flag/src/Access/CsrfAccessCheck.php
modules/contrib/flag/src/Access/FlagAccessCheck.php
modules/contrib/flag/src/Access/UnFlagAccessCheck.php
modules/contrib/flag/src/ActionLink/ActionLinkPluginManager.php
modules/contrib/flag/src/ActionLink/ActionLinkTypeBase.php
modules/contrib/flag/src/ActionLink/ActionLinkTypePluginInterface.php
modules/contrib/flag/src/Ajax/ActionLinkFlashCommand.php
modules/contrib/flag/src/Annotation/ActionLinkType.php
modules/contrib/flag/src/Annotation/FlagType.php
modules/contrib/flag/src/Controller/ActionLinkController.php
modules/contrib/flag/src/Controller/ActionLinkNoJsController.php
modules/contrib/flag/src/Controller/FieldEntryFormController.php
modules/contrib/flag/src/Controller/FlagListBuilder.php
modules/contrib/flag/src/Entity/Flag.php
modules/contrib/flag/src/Entity/Flagging.php
modules/contrib/flag/src/Entity/Storage/FlaggingStorage.php
modules/contrib/flag/src/Entity/Storage/FlaggingStorageInterface.php
modules/contrib/flag/src/Entity/Storage/FlaggingStorageSchema.php
modules/contrib/flag/src/Event/FlagEventBase.php
modules/contrib/flag/src/Event/FlagEvents.php
modules/contrib/flag/src/Event/FlaggingEvent.php
modules/contrib/flag/src/Event/UnflaggingEvent.php
modules/contrib/flag/src/FlagCountManager.php
modules/contrib/flag/src/FlagCountManagerInterface.php
modules/contrib/flag/src/FlagInterface.php
modules/contrib/flag/src/FlagLinkBuilder.php
modules/contrib/flag/src/FlagLinkBuilderInterface.php
modules/contrib/flag/src/FlagService.php
modules/contrib/flag/src/FlagServiceInterface.php
modules/contrib/flag/src/FlagServiceProvider.php
modules/contrib/flag/src/FlagType/FlagTypeBase.php
modules/contrib/flag/src/FlagType/FlagTypePluginInterface.php
modules/contrib/flag/src/FlagType/FlagTypePluginManager.php
modules/contrib/flag/src/FlaggingInterface.php
modules/contrib/flag/src/FlaggingViewsData.php
modules/contrib/flag/src/Form/FlagAddForm.php
modules/contrib/flag/src/Form/FlagAddPageForm.php
modules/contrib/flag/src/Form/FlagConfirmForm.php
modules/contrib/flag/src/Form/FlagConfirmFormBase.php
modules/contrib/flag/src/Form/FlagDisableConfirmForm.php
modules/contrib/flag/src/Form/FlagEditForm.php
modules/contrib/flag/src/Form/FlagFormBase.php
modules/contrib/flag/src/Form/FlagResetForm.php
modules/contrib/flag/src/Form/FlaggingForm.php
modules/contrib/flag/src/Form/UnflagConfirmForm.php
modules/contrib/flag/src/Form/UnflaggingForm.php
modules/contrib/flag/src/Permissions/FlagPermissions.php
modules/contrib/flag/src/Plugin/Action/DeleteFlaggingAction.php
modules/contrib/flag/src/Plugin/Action/FlagAction.php
modules/contrib/flag/src/Plugin/ActionLink/AJAXactionLink.php
modules/contrib/flag/src/Plugin/ActionLink/ConfirmForm.php
modules/contrib/flag/src/Plugin/ActionLink/FieldEntry.php
modules/contrib/flag/src/Plugin/ActionLink/FormEntryInterface.php
modules/contrib/flag/src/Plugin/ActionLink/FormEntryTypeBase.php
modules/contrib/flag/src/Plugin/ActionLink/Reload.php
modules/contrib/flag/src/Plugin/Derivative/EntityFlagActionDeriver.php
modules/contrib/flag/src/Plugin/Derivative/EntityFlagTypeDeriver.php
modules/contrib/flag/src/Plugin/Field/FlaggedEntityFieldItemList.php
modules/contrib/flag/src/Plugin/Flag/CommentFlagType.php
modules/contrib/flag/src/Plugin/Flag/EntityFlagType.php
modules/contrib/flag/src/Plugin/Flag/UserFlagType.php
modules/contrib/flag/src/Plugin/views/field/FlagViewsFlaggedField.php
modules/contrib/flag/src/Plugin/views/field/FlagViewsLinkField.php
modules/contrib/flag/src/Plugin/views/filter/FlagViewsFilter.php
modules/contrib/flag/src/Plugin/views/relationship/FlagViewsRelationship.php
modules/contrib/flag/src/Plugin/views/sort/FlagViewsSortFlagged.php
modules/contrib/flag/src/TwigExtension/FlagCount.php
modules/contrib/flag/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php
modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessDenied.php
modules/contrib/flag/tests/modules/flag_test_plugins/src/Plugin/Flag/AccessGranted.php
modules/contrib/flag/tests/src/Functional/AdminUITest.php
modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php
modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php
modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php
modules/contrib/flag/tests/src/Functional/FlagTestBase.php
modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php
modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php
modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php
modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php
modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php
modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php
modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php
modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php
modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php
modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php
modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php
modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php
modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php
modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php
modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php
modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeConfirmFormTest.php
modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php
modules/contrib/flag/tests/src/Kernel/AccessTest.php
modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php
modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php
modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php
modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php
modules/contrib/flag/tests/src/Traits/FlagCreateTrait.php
modules/contrib/flag/tests/src/Traits/FlagPermissionsTrait.php
modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php
modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php

81 files with changes
=====================

1) modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Unit\Plugin\Action;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
  */
 class FlagActionTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Mock flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $flag = $this->prophesize(FlagInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/flag/tests/src/Unit/Ajax/ActionLinkFlashCommandTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Unit\Ajax;

+use Drupal\Component\Utility\Random;
 use Drupal\flag\Ajax\ActionLinkFlashCommand;
 use Drupal\Tests\UnitTestCase;

@@ @@
   /**
    * The Random Utility.
    *
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $random;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->random = $this->getRandomGenerator();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/flag/tests/src/Traits/FlagPermissionsTrait.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Grants flag and unflag permission to the given flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag on which to grant permissions.
    * @param array|string $role_id
    *   (optional) The ID of the role to grant permissions. If omitted, the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/flag/tests/src/Traits/FlagCreateTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Traits;

+use Drupal\flag\FlagInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Xss;
 use Drupal\flag\Entity\Flag;
@@ @@
    * @param string|null $link_type
    *   (optional) The ID of the link type to use. If omitted, assumes 'reload'.
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   A new flag entity with the given criteria.
    */
   protected function createFlag($entity_type = 'node', array $bundles = [], $link_type = 'reload') {
@@ @@
    * @param string|null $link_type
    *   (optional) The ID of the link type to use. If omitted, assumes 'reload'.
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   A new flag entity with the given criteria.
    */
   protected function createGlobalFlag($entity_type = 'node', array $bundles = [], $link_type = 'reload') {
@@ @@
    * @param array $edit
    *   The edit array to pass to Flag::create().
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   A new flag entity with the given criteria.
    */
   protected function createFlagFromArray(array $edit) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/flag/tests/src/Kernel/FlaggingStorageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\flag\FlagInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;

@@ @@
   /**
    * User to test with.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;

@@ @@
   /**
    * Test flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->account = $this->createUser();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/flag/tests/src/Kernel/FlagServiceTest.php:32

    ---------- begin diff ----------
@@ @@
     // Search for flag.
     $user_with_access = $this->createUser(['flag ' . $flag->id()]);
     $result = $this->flagService->getAllFlags('node', 'article');
-    $this->assertIdentical(count($result), 1, 'Found flag type');
+    $this->assertSame(count($result), 1, 'Found flag type');
     $this->assertEquals([$flag->id()], array_keys($result));
   }

   /**
    * Test exceptions are thrown when flagging and unflagging.
+   * @doesNotPerformAssertions
    */
   public function testFlagServiceFlagExceptions() {
     $not_article = NodeType::create(['type' => 'not_article']);
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }

     // Try flagging a node of the wrong bundle.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }

     // Flag the node, then try to flag it again.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when the flaggable entity is already flagged by the user with the flag.");
     }

     try {
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The flag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }

     // Test unflagging.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the entity type of the flaggable entity.");
     }

     // Try unflagging a node of the wrong bundle.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flag does not apply to the bundle of the flaggable entity.");
     }

     // Create a new node that's not flagged, and try to unflag it.
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when the flaggable entity is not flagged by the user with the flag.");
     }

     try {
@@ @@
       $this->fail("The exception was not thrown.");
     }
     catch (\LogicException $e) {
-      $this->pass("The unflag() method throws an exception when a non-global flag is associated with a poorly specified anonymous user.");
     }

     // Demonstrate a valid combination can be unflagged without throwing an
@@ @@
     // exception.
     try {
       $this->flagService->unflag($flag, $flaggable_node, $account, $session_id);
-      $this->pass('The unflag() method throws no exception when the flaggable entity and user is correct');
     }
     catch (\LogicException $e) {
       $this->fail('The unfag() method threw an exception where processing a valid unflag request.');
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * PassRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/flag/tests/src/Kernel/FlagKernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Kernel;

+use Drupal\flag\FlagServiceInterface;
+use Drupal\flag\FlaggingInterface;
 use Drupal\flag\FlagInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
@@ @@
   /**
    * Get all flaggings for the given flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
-   * @return \Drupal\flag\FlaggingInterface[]
+   * @return FlaggingInterface[]
    *   An array of flaggings.
    */
   protected function getFlagFlaggings(FlagInterface $flag) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/flag/tests/src/Kernel/FlagCountsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Kernel;

+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagCountManagerInterface;
 use Drupal\flag\Entity\Flag;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The other flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $otherFlag;

@@ @@
   /**
    * The node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * The other node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $otherNode;

@@ @@
   /**
    * The flag count service.
    *
-   * @var \Drupal\flag\FlagCountManagerInterface
+   * @var FlagCountManagerInterface
    */
   protected $flagCountService;

@@ @@
   /**
    * User object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $adminUser;

@@ @@
   /**
    * User object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $otherAdminUser;

@@ @@
   /**
    * Anonymous user object.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $anonymousUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('user', 'users_data');
@@ @@
     // Get the count of flaggings for the flag. The other flag also has
     // flaggings, which should not be included in the count.
     $flag_get_entity_flag_counts = $this->flagCountService->getFlagFlaggingCount($this->flag);
-    $this->assertEqual($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");
+    $this->assertEquals($flag_get_entity_flag_counts, 3, "getFlagFlaggingCount() returns the expected count.");

     // Get the counts of all flaggings on the entity. The other node is also
     // flagged, but should not be included in the count.
     $flag_get_counts = $this->flagCountService->getEntityFlagCounts($this->node);
-    $this->assertEqual($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
-    $this->assertEqual($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->flag->id()], 2, "getEntityFlagCounts() returns the expected count.");
+    $this->assertEquals($flag_get_counts[$this->otherFlag->id()], 1, "getEntityFlagCounts() returns the expected count.");

     // Get the number of entities for the flag. Two users have flagged one node
     // with the flag, but that should count only once.
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 2, "getFlagEntityCount() returns the expected count.");

     // Unflag everything with the main flag.
     $this->flagService->unflagAllByFlag($this->flag);
     $flag_get_flag_counts = $this->flagCountService->getFlagEntityCount($this->flag);
-    $this->assertEqual($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
+    $this->assertEquals($flag_get_flag_counts, 0, "getFlagEntityCount() on reset flag returns the expected count.");
   }

   /**
@@ @@
     // For non-global flags anonymous users can uniquely identified by
     // session_id.
     $anon1_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
+    $this->assertEquals($anon1_count, 1, "getUserFlagFlaggingCount() counts only the first user.");
     $anon2_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon2_session_id);
-    $this->assertEqual($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");
+    $this->assertEquals($anon2_count, 1, "getUserFlagFlaggingCount() counts only the second user.");

     // Switch to a global flag, the accounting rules.
     $this->flag->setGlobal(TRUE);
@@ @@
     // Despite being a global flag, queries about specific anonymous users can
     // still be made.
     $rejected_count = $this->flagCountService->getUserFlagFlaggingCount($this->flag, $this->anonymousUser, $anon1_session_id);
-    $this->assertEqual($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
+    $this->assertEquals($rejected_count, 1, "getUserFlagFlaggingCount() ignores the session id.");
   }

   /**
@@ @@

     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');

     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');

     // Delete the flag.
     $this->flag->delete();
@@ @@

     // Confirm the counts have been incremented.
     $article1_count_before = $this->flagCountService->getEntityFlagCounts($article1);
-    $this->assertEqual($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
+    $this->assertEquals($article1_count_before[$this->flag->id()], 1, 'The article1 has been flagged.');
     $article2_count_before = $this->flagCountService->getEntityFlagCounts($article2);
-    $this->assertEqual($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');
+    $this->assertEquals($article2_count_before[$this->flag->id()], 1, 'The article2 has been flagged.');

     // Confirm the flagging have been created.
     $flaggings_before = $this->getFlagFlaggings($this->flag);
-    $this->assertEqual(count($flaggings_before), 2, 'There are two flaggings associated with the flag');
+    $this->assertEquals(count($flaggings_before), 2, 'There are two flaggings associated with the flag');

     // Delete the entities.
     $article1->delete();
@@ @@

     // The list of all flaggings MUST now be empty.
     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The flaggings were removed, when the flag was deleted');

     // Confirm the counts have been removed.
     $article1_count_after = $this->flagCountService->getEntityFlagCounts($article1);
@@ @@
     $this->flagService->flag($this->flag, $article, $auth_user);

     $user_before_count = $this->flagCountService->getEntityFlagCounts($auth_user);
-    $this->assertEqual($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');
+    $this->assertEquals($user_before_count[$user_flag->id()], 1, 'The user has been flagged.');

     $article_count_before = $this->flagCountService->getEntityFlagCounts($article);
-    $this->assertEqual($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');
+    $this->assertEquals($article_count_before[$this->flag->id()], 1, 'The article has been flagged by the user.');

     $auth_user->delete();

@@ @@
     $this->assertEmpty($flaggings_after, 'The user flaggings were removed when the user was deleted.');

     $flaggings_after = $this->getFlagFlaggings($this->flag);
-    $this->assert(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
+    $this->assertTrue(empty($flaggings_after), 'The node flaggings were removed when the user was deleted');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/flag/tests/src/Kernel/FlagActionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\flag\FlagInterface;
+use Drupal\system\ActionConfigEntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\flag\Entity\Flag;
 use Drupal\flag\Plugin\Action\DeleteFlaggingAction;
@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;

@@ @@
   /**
    * Test admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test');
@@ @@
     // Fake a logged in user (non-admin).
     $this->admin = $this->createUser();
     $this->account = $this->createUser();
-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $switcher */
+    /** @var AccountSwitcherInterface $switcher */
     $switcher = $this->container->get('account_switcher');
     $switcher->switchTo($this->account);
   }
@@ @@
    * Tests direct use of the action plugins.
    */
   public function testFlagActions() {
-    /** @var \Drupal\flag\FlagInterface $entity_flag */
+    /** @var FlagInterface $entity_flag */
     $entity_flag = Flag::create([
       'id' => strtolower($this->randomMachineName()),
       'label' => $this->randomString(),
@@ @@

     $test_entity = EntityTest::create();
     $test_entity->save();
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     $action = $this->container->get('entity_type.manager')->getStorage('action')->load('flag_action.' . $entity_flag->id() . '_flag');
     $plugin = $action->getPlugin();
     $plugin->execute($test_entity);
@@ @@
    */
   public function testFlaggingDeleteAction() {
     // Action should be available upon install.
-    /** @var \Drupal\system\ActionConfigEntityInterface $action */
+    /** @var ActionConfigEntityInterface $action */
     $action = $this->container->get('entity_type.manager')->getStorage('action')->load('flag_delete_flagging');
     $plugin = $action->getPlugin();
     $this->assertInstanceOf(DeleteFlaggingAction::class, $plugin);

-    /** @var \Drupal\flag\FlagInterface $entity_flag */
+    /** @var FlagInterface $entity_flag */
     $entity_flag = Flag::create([
       'id' => strtolower($this->randomMachineName()),
       'label' => $this->randomString(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/flag/tests/src/Kernel/AccessTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('user', 'users_data', 'flag');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/flag/tests/src/FunctionalJavascript/ModalFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\FunctionalJavascript;

+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagServiceInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
@@ @@
   /**
    * Flag to test with.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * Normal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // A test flag.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/flag/tests/src/FunctionalJavascript/LinkTypeAjaxTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\FunctionalJavascript;

+use Drupal\flag\FlagServiceInterface;
+use Drupal\user\UserInterface;
+use Drupal\flag\FlagInterface;
+use Drupal\node\NodeInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * A user with Flag admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The flag under test.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The node to be flagged and unflagged.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/flag/tests/src/FunctionalJavascript/FlagJsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\FunctionalJavascript;

+use Drupal\flag\FlagServiceInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/flag/tests/src/FunctionalJavascript/FlagCountExtensionTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
     // Set the linkTypePlugin of the flag to count_link for running the tests.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/flag/tests/src/FunctionalJavascript/FlagContextualLinksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\FunctionalJavascript;

+use Drupal\flag\Flaginterface;
+use Drupal\user\Entity\User;
+use Drupal\flag\FlagServiceInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\flag\Entity\Flag;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * The flag.
    *
-   * @var \Drupal\flag\Flaginterface
+   * @var Flaginterface
    */
   protected $flag;

@@ @@
   /**
    * An authenticated user to test flagging.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $alice;

@@ @@
    *
    * Used to test cache contexts.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $bob;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/flag/tests/src/FunctionalJavascript/AjaxLinkTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\FunctionalJavascript;

+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagServiceInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
@@ @@
   /**
    * Flag to test with.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * Normal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // A article to test with.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/flag/tests/src/Functional/UserFlagTypeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\FlagInterface;
 /**
  * Tests user flag type integrations.
  *
@@ @@
   /**
    * The flag to be added.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
       'flag_entity_type' => 'entity:user',
     ], $this->t('Continue'));

-    $this->assertText($this->t('Permissions for users to flag themselves.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Permissions for users to flag themselves.'));

-    $this->assertText($this->t('Display link on user profile page'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Display link on user profile page'));
   }

   /**
@@ @@

     // Check the state of the extra permssions checkbox.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxChecked('edit-extra-permissions-owner');

     // Assert flag appears on the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertLink($flag->getShortText('flag'));
+    $this->assertSession()->linkExists($flag->getShortText('flag'));

     // Uncheck extra permssions.
     $edit = [
@@ @@

     // Confirm extra permissions is unchecked.
     $this->drupalGet('admin/structure/flags/manage/' . $flag->id());
-    $this->assertNoFieldChecked('edit-extra-permissions-owner');
+    $this->assertSession()->checkboxNotChecked('edit-extra-permissions-owner');

     // Assert the flag disapears from the profile page.
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoLink($flag->getShortText('flag'));
+    $this->assertSession()->linkNotExists($flag->getShortText('flag'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertLinkRector
 * AssertNoFieldCheckedRector
 * AssertNoLinkRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/flag/tests/src/Functional/ShowOnEntityFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A user with Flag admin rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create content type.
@@ @@

     // Go back to the node edit page and check if the flag checkbox is updated.
     $this->drupalGet($node_edit_path);
-    $this->assertNoFieldChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');
+    $this->assertSession()->checkboxNotChecked($flag_checkbox_id, 'The flag checkbox is unchecked on the entity form.');

     // Verify link is on the add form.
     $this->drupalGet('node/add/' . $this->nodeType);
@@ @@

     // Form element should not appear on the delete form.
     $this->drupalGet($node->toUrl('delete-form'));
-    $this->assertNoField($flag_checkbox_id);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists($flag_checkbox_id);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoFieldCheckedRector
 * AssertNoFieldRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/flag/tests/src/Functional/OutputLocationEntityFormAccessTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The node whose edit form is shown.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * A flag that grants access.
    *
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag_granted;

@@ @@
   /**
    * A flag that denies access.
    *
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag_denied;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/flag/tests/src/Functional/LinkTypeReloadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\FlagInterface;
 /**
  * Tests the reload link type.
  *
@@ @@
   /**
    * The flag object.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
     // We (probably) can't obtain the URL from the route rather than hardcoding
     // it, as that would probably give us the token too.
     $this->drupalGet("flag/flag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the flag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the flag reload link is denied when no token is supplied.");

     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
@@ @@

     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));

     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");

     // Attempt to load the reload link URL without the token.
     $this->drupalGet("flag/unflag/$flag_id/$node_id");
-    $this->assertResponse(403, "Access to the unflag reload link is denied when no token is supplied.");
+    $this->assertSession()->statusCodeEquals(403, "Access to the unflag reload link is denied when no token is supplied.");

     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ @@

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));

     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/flag/tests/src/Functional/LinkTypeFieldEntryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\FlagInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\field_ui\Traits\FieldUiTestTrait;

@@ @@
   /**
    * The flag object.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // The breadcrumb block is needed for FieldUiTestTrait's tests.
@@ @@
     $this->drupalPostAjaxForm(NULL, $edit, 'link_type');

     // Check confirm form field entry.
-    $this->assertText(t('Flag confirmation message'));
-    $this->assertText(t('Enter flagging details message'));
-    $this->assertText(t('Unflag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag confirmation message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enter flagging details message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Unflag confirmation message'));
   }

   /**
@@ @@

     // Check the Field UI tabs appear on the flag edit page.
     $this->drupalGet('admin/structure/flags/manage/' . $flag_id);
-    $this->assertText(t("Manage fields"), "The Field UI tabs appear on the flag edit form page.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t("Manage fields"));

     $this->fieldUIAddNewField('admin/structure/flags/manage/' . $flag_id, $this->flagFieldId, $this->flagFieldLabel, 'text');
   }
@@ @@
     $this->clickLink($this->flag->getShortText('flag'));

     // Check if we have the confirm form message displayed.
-    $this->assertText($this->flagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagConfirmMessage);

     // Enter the field value and submit it.
     $this->flagFieldValue = $this->randomString();
@@ @@
     $this->submitForm($edit, $this->createButtonText);

     // Check that the node is flagged.
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));
   }

   /**
@@ @@
     $this->clickLink($this->flag->getShortText('unflag'));

     $node_url = Url::fromRoute('entity.node.canonical', ['node' => $this->nodeId]);
-    $this->assertUrl('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
+    $this->assertSession()->addressEquals('flag/details/edit/' . $flag_id . '/' . $this->nodeId, [
       'query' => [
         'destination' => $node_url->toString(),
       ],
@@ @@
     ]);

     // See if the details message is displayed.
-    $this->assertText($this->flagDetailsMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagDetailsMessage);

     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);

     // Update the field value.
     $this->flagFieldValue = $this->randomString();
@@ @@
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $this->nodeId);

     // See if the field value was preserved.
-    $this->assertFieldByName('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
+    $this->assertSession()->fieldValueEquals('field_' . $this->flagFieldId . '[0][value]', $this->flagFieldValue);
   }

   /**
@@ @@

     // Test a good flag ID param, but a bad flaggable ID param.
     $this->drupalGet('flag/details/edit/' . $flag_id . '/-9999');
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, bad entity.');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, bad entity.');

     // Test a bad flag ID param, but a good flaggable ID param.
     $this->drupalGet('flag/details/edit/jibberish/' . $this->nodeId);
-    $this->assertResponse('404', 'Editing an invalid flagging path: bad flag, good entity');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: bad flag, good entity');

     // Test editing a unflagged entity.
     $unlinked_node = $this->drupalCreateNode(['type' => $this->nodeType]);
     $this->drupalGet('flag/details/edit/' . $flag_id . '/' . $unlinked_node->id());
-    $this->assertResponse('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
+    $this->assertSession()->statusCodeEquals('404', 'Editing an invalid flagging path: good flag, good entity, but not flagged');
   }

   /**
@@ @@
     $this->clickLink($this->deleteButtonText);

     // Check if we have the confirm form message displayed.
-    $this->assertText($this->unflagConfirmMessage);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->unflagConfirmMessage);

     // Submit the confirm form.
     $this->submitForm([], $this->deleteButtonText);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertLinkRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/flag/tests/src/Functional/LinkTypeConfirmFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\FlagInterface;
 /**
  * Tests the confirm form link type.
  *
@@ @@
   /**
    * The flag object.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@

     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));

     // Check the flag count was incremented.
     $flag_count_flagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");
+    $this->assertEquals($flag_count_flagged, $flag_count_pre + 1, "The flag count was incremented.");

     // Unflag the node.
     $this->clickLink($this->flag->getShortText('unflag'));
@@ @@

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));

     // Check the flag count was decremented.
     $flag_count_unflagged = \Drupal::database()->query('SELECT count FROM {flag_counts}
@@ @@
       ':entity_type' => 'node',
       ':entity_id' => $node_id,
     ])->fetchField();
-    $this->assertEqual($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
+    $this->assertEquals($flag_count_unflagged, $flag_count_flagged - 1, "The flag count was decremented.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/flag/tests/src/Functional/LinkTypeAjaxTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\FlagInterface;
+use Drupal\node\NodeInterface;
 /**
  * Tests the AJAX link type.
  *
@@ @@
   /**
    * The flag under test.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The node to be flagged and unflagged.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a node to flag.
@@ @@
     $this->drupalGet($node_url);

     // Confirm the flag link exists.
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));

     // Click the flag link. This ensures that the non-JS fallback works we are
     // redirected to back to the page and the node is flagged.
     $this->clickLink($this->flag->getShortText('flag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('unflag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('unflag'));

     // Click the unflag link, repeat the check.
     $this->clickLink($this->flag->getShortText('unflag'));
-    $this->assertUrl($node_url);
-    $this->assertLink($this->flag->getShortText('flag'));
+    $this->assertSession()->addressEquals($node_url);
+    $this->assertSession()->linkExists($this->flag->getShortText('flag'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/flag/tests/src/Functional/LinkOwnershipAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\Core\Entity\EntityInterface;
 /**
  * Tests the current user sees links for their own flaggings, or global ones.
  *
@@ @@
   /**
    * The flaggable entity to test.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));

     // Switch to user 2. They should see the link to flag.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('flag'), 0, "A flag link is found on the page for user 2.");

   }

@@ @@
     // Flag the node with user 1.
     $this->drupalGet($this->node->toUrl());
     $this->clickLink($flag->getShortText('flag'));
-    $this->assertResponse(200);
-    $this->assertLink($flag->getShortText('unflag'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkExists($flag->getShortText('unflag'));

     // Switch to user 2. They should see the unflag link too.
     $user_2 = $this->drupalCreateUser();
     $this->drupalLogin($user_2);
     $this->drupalGet($this->node->toUrl());
-    $this->assertLink($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
+    $this->assertSession()->linkExists($flag->getShortText('unflag'), 0, "The unflag link is found on the page for user 2.");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkRector
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/flag/tests/src/Functional/LinkOutputLocationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Template\Attribute;
 use Drupal\node\Entity\Node;
 use Drupal\flag\FlagInterface;
@@ @@
   /**
    * The flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a flag.
@@ @@
     $this->drupalGet('admin/structure/types/manage/article/display/teaser');
     $this->submitForm($edit, 'Save');
     // Check the form was saved successfully.
-    $this->assertText('Your settings have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved.');

     // Check the full node still shows the flag link as a field.
     $this->drupalGet('node/' . $this->node->id());
@@ @@
     // TODO: check no entity field link.

     $this->drupalGet('node/' . $this->node->id() . '/edit');
-    $this->assertNoField('flag[' . $this->flag->id() . ']');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists('flag[' . $this->flag->id() . ']');
     $this->assertNoContextualLinkPlaceholder($contextual_links_id);
   }

@@ @@
   /**
    * Pass if the flag link is shown as a field on the page.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to look for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity the flag is on.
    * @param string $message
    *   (Optional) Message to display.
@@ @@
   /**
    * Pass if the flag link is not shown as a field on the page.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to look for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity the flag is on.
    * @param string $message
    *   (Optional) Message to display.
@@ @@
    *
    * It is not recommended to call this function directly.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to look for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity the flag is on.
    * @param string $message
    *   Message to display.
@@ @@
     $xpath = $this->xpath("//*[contains(@class, 'node__content')]//div[contains(@class, :id)]", [
       ':id' => 'flag-' . $flag->id() . '-' . $entity->id(),
     ]);
-    $this->assert(count($xpath) == ($exists ? 1 : 0), $message);
+    $this->assertTrue(count($xpath) == ($exists ? 1 : 0), $message);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoFieldRector
 * AssertRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/flag/tests/src/Functional/LinkHtmlTest.php:66

    ---------- begin diff ----------
@@ @@
     // Click the flag link.
     $this->drupalGet('node/' . $node_id);
     // Find the marked-up flag short text in the raw HTML.
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
     // Xss::filter() is used to strip all HTML tags from the short text
     // because clickLink() looks for text as it appears in the brower, and that
     // does not include the unescaped HTML tags. Note that the stripped tags
@@ @@

     // Check that the node is flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('unflag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('unflag')));

     // Unflag the node.
     $this->drupalGet('node/' . $node_id);
@@ @@

     // Check that the node is no longer flagged.
     $this->drupalGet('node/' . $node_id);
-    $this->assertRaw(Xss::filterAdmin($this->flag->getShortText('flag')));
+    $this->assertSession()->responseContains(Xss::filterAdmin($this->flag->getShortText('flag')));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/flag/tests/src/Functional/FlagTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\FlagServiceInterface;
+use Drupal\flag\FlagInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\flag\Entity\Flag;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the Flag Service.
@@ @@
    *   (optional) A string containing the link type ID. Is omitted, assumes
    *   'reload'.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The created flag entity.
    */
   protected function createFlagWithForm($entity_type = 'node', $edit = [], $link_type = 'reload') {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/flag/tests/src/Functional/FlagPermissionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\Entity\Flag;
+use Drupal\node\Entity\Node;
+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;

@@ @@
   /**
    * The flag under test.
    *
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag;

@@ @@
   /**
    * The node to flag.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * A user who can flag and unflag.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $fullFlagUser;

@@ @@
   /**
    * A user who can only flag.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $flagOnlyUser;

@@ @@
   /**
    * A user with no flag permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $authUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create content type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/flag/tests/src/Functional/AnonymousFlagTest.php:26

    ---------- begin diff ----------
@@ @@
   public static $modules = ['system', 'user', 'node', 'flag'];

   /**
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

   /**
-   * @var \Drupal\flag\Entity\Flag
+   * @var Flag
    */
   protected $flag;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     NodeType::create(['type' => 'page', 'name' => 'page'])->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/flag/tests/src/Functional/AjaxLinkNoJsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\flag\FlagInterface;
+use Drupal\flag\FlagServiceInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\flag\Traits\FlagCreateTrait;
 use Drupal\Tests\flag\Traits\FlagPermissionsTrait;
@@ @@
   /**
    * Flag to test with.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * Normal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // A article to test with.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/flag/tests/src/Functional/AdminUITest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag\Functional;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\flag\FlagInterface;
+use Drupal\node\Entity\Node;
 /**
  * Tests the Flag admin UI.
  *
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The flag used for the test.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The node for test flagging.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
     $this->drupalGet('admin/structure/flags/add');
     $this->submitForm([], 'Continue');
     // Check for fieldset titles.
-    $this->assertText(t('Messages'));
-    $this->assertText(t('Flag access'));
-    $this->assertText(t('Display options'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Messages'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag access'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Display options'));

     $edit = [
       'label' => $this->label,
@@ @@
     ];
     $this->submitForm($edit, 'Create Flag');

-    $this->assertText(t('Flag @this_label has been added.', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Flag @this_label has been added.', ['@this_label' => $this->label]));

     $this->flag = $this->flagService->getFlagById($this->flagId);

@@ @@
    */
   public function doFlagDisable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));

     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/disable');
     $this->submitForm([], 'Disable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));

     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertNoText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->flagShortText);
   }

   /**
@@ @@
    */
   public function doFlagEnable() {
     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Disabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Disabled'));

     $this->drupalGet('admin/structure/flags/manage/' . $this->flagId . '/enable');
     $this->submitForm([], 'Enable');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet('admin/structure/flags');
-    $this->assertText(t('Enabled'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Enabled'));

     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->flagShortText);
   }

   /**
@@ @@
       ->condition('entity_id', $this->node->id());
     $ids_before = $query_before->execute();

-    $this->assertEqual(count($ids_before), 1, "The flag has one flagging.");
+    $this->assertEquals(count($ids_before), 1, "The flag has one flagging.");

     // Go to the reset form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/reset');

-    $this->assertText($this->t('Are you sure you want to reset the Flag'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reset the Flag'));

     $this->submitForm([], 'Reset');

@@ @@
       ->condition('entity_id', $this->node->id());
     $ids_after = $query_after->execute();

-    $this->assertEqual(count($ids_after), 0, "The flag has no flaggings after being reset.");
+    $this->assertEquals(count($ids_after), 0, "The flag has no flaggings after being reset.");
   }

   /**
@@ @@

     // Check that the weights for each flag are saved in the database correctly.
     foreach ($all_flags as $id => $flag) {
-      $this->assertEqual($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
+      $this->assertEquals($all_flags[$id]->get('weight'), $flag_weights_to_set[$id], 'The flag weight was changed.');
     }
   }

@@ @@
   public function doFlagDelete() {
     // Flag node.
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertLink($this->flagShortText);
+    $this->assertSession()->linkExists($this->flagShortText);
     // Go to the delete form for the flag.
     $this->drupalGet('admin/structure/flags/manage/' . $this->flag->id() . '/delete');

-    $this->assertText($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to delete the flag @this_label?', ['@this_label' => $this->label]));

     $this->submitForm([], 'Delete');

@@ @@

     $this->assertNull($result, 'The flag was deleted.');
     $this->drupalGet('node/' . $this->nodeId);
-    $this->assertText($this->node->label());
-    $this->assertNoLink($this->flagShortText);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->node->label());
+    $this->assertSession()->linkNotExists($this->flagShortText);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkRector
 * AssertNoLinkRector
 * AssertNoTextRector
 * AssertResponseRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/flag/tests/modules/flag_event_test/src/EventSubscriber/FlagEvents.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(FlagServiceInterface $flag_service, StateInterface $state) {
@@ @@
   /**
    * React to flagging event.
    *
-   * @param \Drupal\flag\Event\FlaggingEvent $event
+   * @param FlaggingEvent $event
    *   The flagging event.
    */
   public function onFlag(FlaggingEvent $event) {
@@ @@
   /**
    * React to unflagging event.
    *
-   * @param \Drupal\flag\Event\UnflaggingEvent $event
+   * @param UnflaggingEvent $event
    *   The unflagging event.
    */
   public function onUnflag(UnflaggingEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


33) modules/contrib/flag/src/TwigExtension/FlagCount.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The flag count.
    *
-   * @var \Drupal\flag\FlagCountManagerInterface
+   * @var FlagCountManagerInterface
    */
   protected $flagCount;

@@ @@
   /**
    * Constructs \Drupal\flag\TwigExtension\FlagCount.
    *
-   * @param \Drupal\flag\FlagCountManagerInterface $flag_count
+   * @param FlagCountManagerInterface $flag_count
    *   The flag count service.
    */
   public function __construct($flag_count) {
@@ @@
   /**
    * Gets the number of flaggings for the given flag and flaggable.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $flaggable
+   * @param EntityInterface $flaggable
    *   The flaggable entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/flag/src/Plugin/views/relationship/FlagViewsRelationship.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Plugin\views\relationship;

+use Drupal\flag\FlagInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    * The Page Cache Kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $pageCacheKillSwitch;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $page_cache_kill_switch
+   * @param KillSwitch $page_cache_kill_switch
    *   The kill switch.
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, KillSwitch $page_cache_kill_switch, FlagServiceInterface $flag_service, AccountProxyInterface $current_user) {
@@ @@
   /**
    * Get the flag of the relationship.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flag being selected by in the view.
    */
   public function getFlag() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/flag/src/Plugin/views/field/FlagViewsLinkField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Plugin\views\field;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\flag\FlagInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\flag\FlaggingInterface;
 use Drupal\flag\FlagLinkBuilderInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The flag for this row.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The builder for flag links.
    *
-   * @var \Drupal\flag\FlagLinkBuilderInterface
+   * @var FlagLinkBuilderInterface
    */
   protected $flagLinkBuilder;

@@ @@
   /**
    * A helper method to retrieve the flag entity from the views relationship.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flag selected by the views relationship.
    */
   public function getFlag() {
@@ @@
    * @param ResultRow $values
    *   The current result row.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The parent entity.
    */
   protected function getParentRelationshipEntity(ResultRow $values) {
@@ @@
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/flag/src/Plugin/Flag/EntityFlagType.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Defines permissions for the 'owner' set of additional action permissions.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/flag/src/Plugin/Derivative/EntityFlagActionDeriver.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Constructs the flag action deriver.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/flag/src/Plugin/ActionLink/AJAXactionLink.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
    *   The ID with which to initialize this plugin.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request from the request stack.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, AccountInterface $current_user, Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/flag/src/Plugin/Action/FlagAction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Plugin\Action;

+use Drupal\flag\FlagInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Entity\DependencyTrait;
@@ @@
   /**
    * The flag.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FlagServiceInterface $flag_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/flag/src/Plugin/Action/DeleteFlaggingAction.php:20

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\flag\FlaggingInterface $object */
+    /** @var FlaggingInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/flag/src/Permissions/FlagPermissions.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/flag/src/Form/UnflaggingForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Form;

+use Drupal\flag\FlaggingInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\flag\FlagInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\flag\Plugin\ActionLink\FormEntryInterface;

@@ @@
   /**
    * The flagging entity.
    *
-   * @var \Drupal\flag\FlaggingInterface
+   * @var FlaggingInterface
    */
   protected $flagging;

@@ @@
   /**
    * The flaggable entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The flag entity.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/flag/src/Form/FlaggingForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Form;

+use Drupal\flag\FlaggingInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    */
   public function actions(array $form, FormStateInterface $form_state) {
     $actions = parent::actions($form, $form_state);
-    /** @var \Drupal\flag\FlaggingInterface $flagging */
+    /** @var FlaggingInterface $flagging */
     $flagging = $this->getEntity();
     $flag = $flagging->getFlag();
     $action_link = $flag->getLinkTypePlugin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/flag/src/Form/FlagResetForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Flag Service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The flag to reset.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The Flag Service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/flag/src/Form/FlagFormBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The action link plugin manager.
    *
-   * @var Drupal\flag\ActionLink\ActionLinkPluginManager
+   * @var ActionLinkPluginManager
    */
   protected $actionLinkManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;

@@ @@
   /**
    * Constructs a new form.
    *
-   * @param \Drupal\flag\ActionLink\ActionLinkPluginManager $action_link_manager
+   * @param ActionLinkPluginManager $action_link_manager
    *   The link type plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The bundle info service.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator service.
    */
   public function __construct(ActionLinkPluginManager $action_link_manager, EntityTypeBundleInfoInterface $bundle_info_service, LinkGeneratorInterface $link_generator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/flag/src/Form/FlagDisableConfirmForm.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The flag to be enabled or disabled.
    *
-   * @var Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/flag/src/Form/FlagConfirmFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Form;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\flag\FlagInterface;
@@ @@
   /**
    * The flaggable entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The flag entity.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/flag/src/Form/FlagAddPageForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The flag type plugin manager.
    *
-   * @var Drupal\flag\FlagType\FlagTypePluginManager
+   * @var FlagTypePluginManager
    */
   protected $flagTypeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new form.
    *
-   * @param \Drupal\flag\FlagType\FlagTypePluginManager $flag_type_manager
+   * @param FlagTypePluginManager $flag_type_manager
    *   The link type plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(FlagTypePluginManager $flag_type_manager, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/flag/src/FlaggingInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;

@@ @@
   /**
    * Returns the parent flag entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\flag\FlagInterface
+   * @return EntityInterface|FlagInterface
    *   The flag related to this flagging.
    */
   public function getFlag();
@@ @@
   /**
    * Returns the flaggable entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity object.
    */
   public function getFlaggable();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


50) modules/contrib/flag/src/FlagType/FlagTypePluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/flag/src/FlagType/FlagTypePluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\FlagType;

+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Returns the permissions available to this flag type.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag object.
    *
    * @return array
@@ @@
    *
    * @param string $action
    *   The action for which to check permissions, either 'flag' or 'unflag'.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag object.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   An AccountInterface object.
-   * @param \Drupal\Core\Entity\EntityInterface $flaggable
+   * @param EntityInterface $flaggable
    *   (optional) The flaggable entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An AccessResult object.
    */
   public function actionAccess($action, FlagInterface $flag, AccountInterface $account, EntityInterface $flaggable = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/flag/src/FlagType/FlagTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\FlagType;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Component\Plugin\PluginBase;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
     // Add default access check.
     $results[] = AccessResult::allowedIfHasPermission($account, $action . ' ' . $flag->id());

-    /** @var \Drupal\Core\Access\AccessResultInterface $return */
+    /** @var AccessResultInterface $return */
     $return = array_shift($results);
     foreach ($results as $next) {
       $return = $return->orIf($next);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/flag/src/FlagServiceInterface.php:28

    ---------- begin diff ----------
@@ @@
    * @param string $bundle
    *   (optional) The bundle for which to load the flags.
    *
-   * @return \Drupal\flag\FlagInterface[]
+   * @return FlagInterface[]
    *   An array of flag entities, keyed by the entity IDs.
    */
   public function getAllFlags($entity_type = NULL, $bundle = NULL);
@@ @@
    *   $flagging = \Drupal::service('flag')->getFlagging($flag, $node);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the flagging user. If omitted, the flagging for
    *   the current user will be returned.
    * @param string $session_id
@@ @@
    *    the current session id will be used to uniquely identify the anonymous
    *    user.
    *
-   * @return \Drupal\flag\FlaggingInterface|null
+   * @return FlaggingInterface|null
    *   The flagging or NULL if the flagging is not found.
    *
    * @throws \LogicException
@@ @@
    *   }
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the flagging user. If NULL, flaggings for any
    *   user will be returned.
    * @param string $session_id
@@ @@
   /**
    * Get all flaggings for the given entity, and optionally, user.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the flagging user. If NULL, flaggings for any
    *   user will be returned.
    * @param string $session_id
@@ @@
    * @param string $flag_id
    *   The identifier of the flag to load.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flag entity.
    */
   public function getFlagById($flag_id);
@@ @@
    *   $flaggable = \Drupal::service('flag')->getFlaggableById($flag, $entity_id);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The ID of the flaggable entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The flaggable entity object.
    */
   public function getFlaggableById(FlagInterface $flag, $entity_id);
@@ @@
    *   }
    * @endcode
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   (optional) The flag entity to which to restrict results.
    *
    * @return array
@@ @@
    *   $flag_service->flag($flag, $node);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to flag.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the user flagging the entity. If not given,
    *   the current user is used.
    * @param string $session_id
@@ @@
    *   anonymous, then this can also be omitted to use the current session.
    *   to identify an anonymous user.
    *
-   * @return \Drupal\flag\FlagInterface|null
+   * @return FlagInterface|null
    *   The flagging.
    *
    * @throws \LogicException
@@ @@
    *   $flag_service->unflag($flag, $node);
    * @endcode
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag being unflagged.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to unflag.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account of the user that created the flagging. Defaults
    *   to the current user.
    * @param string $session_id
@@ @@
   /**
    * Remove all flaggings from an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   public function unflagAllByEntity(EntityInterface $entity);
@@ @@
   /**
    * Remove all of a user's flaggings.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user object.
    * @param string $session_id
    *   (optional) The session ID. This must be specified if $account is the
@@ @@
    *   All flags by the user.
    *   All flaggings of the user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account of the user being cancelled or deleted.
    */
   public function userFlagRemoval(UserInterface $account);
@@ @@
    *   \Drupal::service('flag')->populateFlaggerDefaults($account, $session_id);
    * @endcode
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user account, or a variable set to NULL (rather than the constant NULL)
    *   to get the current user assigned to it.
    * @param string $session_id
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


54) modules/contrib/flag/src/FlagService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag;

+use Symfony\Component\HttpFoundation\Session\SessionInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The current user injected into the service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
    *   The current user.
    * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Te request stack.
    */
   public function __construct(AccountInterface $current_user,
@@ @@
     // @todo when https://www.drupal.org/node/2865991 is resolved,
     // use force start session API.
     if (!$request->hasSession()) {
-      /** @var \Symfony\Component\HttpFoundation\Session\SessionInterface $session */
+      /** @var SessionInterface $session */
       $session = \Drupal::service('session');
       $request->setSession($session);
       $session->start();
@@ @@
    * @param int[] $ids
    *   The flag IDs.
    *
-   * @return \Drupal\flag\FlagInterface[]
+   * @return FlagInterface[]
    *   An array of flags.
    */
   protected function getFlagsByIds(array $ids) {
@@ @@
    * @param int[] $ids
    *   The flagging IDs.
    *
-   * @return \Drupal\flag\FlaggingInterface[]
+   * @return FlaggingInterface[]
    *   An array of flaggings.
    */
   protected function getFlaggingsByIds(array $ids) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


55) modules/contrib/flag/src/FlagLinkBuilder.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FlagServiceInterface $flag_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


56) modules/contrib/flag/src/FlagInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag;

+use Drupal\flag\FlagType\FlagTypePluginInterface;
+use Drupal\flag\ActionLink\ActionLinkTypePluginInterface;
+use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ @@
   /**
    * Get the flag type plugin.
    *
-   * @return \Drupal\flag\FlagType\FlagTypePluginInterface
+   * @return FlagTypePluginInterface
    *   The flag type plugin for the flag.
    */
   public function getFlagTypePlugin();
@@ @@
   /**
    * Get the link type plugin for this flag.
    *
-   * @return \Drupal\flag\ActionLink\ActionLinkTypePluginInterface
+   * @return ActionLinkTypePluginInterface
    *   The link type plugin for the flag.
    */
   public function getLinkTypePlugin();
@@ @@
    *   The action for which to check permissions, either 'flag' or 'unflag'.
    * @param AccountInterface $account
    *   (optional) An AccountInterface object.
-   * @param \Drupal\Core\Entity\EntityInterface $flaggable
+   * @param EntityInterface $flaggable
    *   (optional) The flaggable entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An AccessResult object.
    */
   public function actionAccess($action, AccountInterface $account = NULL, EntityInterface $flaggable = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


57) modules/contrib/flag/src/FlagCountManagerInterface.php:23

    ---------- begin diff ----------
@@ @@
    * );
    * @endcode
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ @@
    * many endorsements have been made, rather than how many things have been
    * endorsed.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
    *
    * @return int
@@ @@
    * words, an entity that has been reported multiple times will only be counted
    * once.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag for which to retrieve a flag count.
    *
    * @return int
@@ @@
    * For example, with a 'bookmarks' flag, this returns the number of bookmarks
    * a user has created.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The account.
    * @param string $session_id
    *   (optional) The session ID used to specify a unique anonymous user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


58) modules/contrib/flag/src/FlagCountManager.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $dateTime;

@@ @@
   /**
    * Increments count of flagged entities.
    *
-   * @param \Drupal\flag\Event\FlaggingEvent $event
+   * @param FlaggingEvent $event
    *   The flagging event.
    */
   public function incrementFlagCounts(FlaggingEvent $event) {
@@ @@
   /**
    * Decrements count of flagged entities.
    *
-   * @param \Drupal\flag\Event\UnflaggingEvent $event
+   * @param UnflaggingEvent $event
    *   The unflagging event.
    */
   public function decrementFlagCounts(UnflaggingEvent $event) {
@@ @@
   /**
    * Resets loaded flag counts.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flagged entity.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag.
    */
   protected function resetLoadedCounts(EntityInterface $entity, FlagInterface $flag) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


59) modules/contrib/flag/src/Event/UnflaggingEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Event;

-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\flag\FlaggingInterface;
 /**
  * Event for when a flagging is deleted.
  */
@@ @@
   /**
    * An array of flaggings.
    *
-   * @var \Drupal\flag\FlaggingInterface[]
+   * @var FlaggingInterface[]
    */
   protected $flaggings = [];

@@ @@
   /**
    * Builds a new UnflaggingEvent.
    *
-   * @param \Drupal\flag\FlaggingInterface[] $flaggings
+   * @param FlaggingInterface[] $flaggings
    *   The flaggings.
    */
   public function __construct(array $flaggings) {
@@ @@
   /**
    * Returns the flagging associated with the Event.
    *
-   * @return \Drupal\flag\FlaggingInterface[]
+   * @return FlaggingInterface[]
    *   The flaggings.
    */
   public function getFlaggings() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/flag/src/Event/FlaggingEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\flag\FlaggingInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event for when a flagging is created.
@@ @@
   /**
    * The flagging in question.
    *
-   * @var \Drupal\flag\FlaggingInterface
+   * @var FlaggingInterface
    */
   protected $flagging;

@@ @@
   /**
    * Builds a new FlaggingEvent.
    *
-   * @param \Drupal\flag\FlaggingInterface $flagging
+   * @param FlaggingInterface $flagging
    *   The flaging.
    */
   public function __construct(FlaggingInterface $flagging) {
@@ @@
   /**
    * Returns the flagging associated with the Event.
    *
-   * @return \Drupal\flag\FlaggingInterface
+   * @return FlaggingInterface
    *   The flagging.
    */
   public function getFlagging() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/flag/src/Event/FlagEventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\flag\FlagInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Base Event from which other flag event are defined.
@@ @@
   /**
    * The Flag in question.
    *
-   * @var \Drupal\flag\FlagInterface
+   * @var FlagInterface
    */
   protected $flag;

@@ @@
   /**
    * Build the flag event class.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag to be acted upon.
    */
   public function __construct(FlagInterface $flag) {
@@ @@
   /**
    * Get the flag entity related to the event.
    *
-   * @return \Drupal\flag\FlagInterface
+   * @return FlagInterface
    *   The flag related to the event.
    */
   public function getFlag() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/flag/src/Entity/Storage/FlaggingStorageInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Loads a list of flags the entity is flagged with for the given account.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check for.
    * @param string $session_id
    *   (optional) The session ID. This must be supplied if $account is the
@@ @@
   /**
    * Loads a list of flags the entities are flagged with for the given account.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities to check. All entities must be of the same type.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account to check for.
    * @param string $session_id
    *   (optional) The session ID. This must be supplied if $account is the
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


63) modules/contrib/flag/src/Entity/Storage/FlaggingStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Entity\Storage;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Session\AccountInterface;
@@ @@

     parent::doDelete($entities);

-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $entities */
+    /** @var ContentEntityInterface[] $entities */
     foreach ($entities as $entity) {
       // After deleting a flagging, remove it from the cached flagging by entity if already in static cache.
       if ($entity->get('global')->value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/flag/src/Entity/Flag.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Entity;

+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * A collection to store the FlagType plugin.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $flagTypeCollection;

@@ @@
   /**
    * A collection to store the ActionLink plugin.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $linkTypeCollection;

@@ @@
     if (empty($bundles)) {
       // If the setting is empty, return all bundle names for the flag's entity
       // type.
-      /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service */
+      /** @var EntityTypeBundleInfoInterface $bundle_info_service */
       $bundle_info_service = \Drupal::service('entity_type.bundle.info');
       $bundle_info = $bundle_info_service->getBundleInfo($this->entity_type);
       $bundles = array_keys($bundle_info);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/flag/src/Controller/FlagListBuilder.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Creates a render array of roles that may use the flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return array
@@ @@
   /**
    * Gets the flag type label for the given flag.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return array
@@ @@
   /**
    * Generates a render array of the applicable bundles for the flag..
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/flag/src/Controller/FieldEntryFormController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\Flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The session manager.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
+   * @param SessionManagerInterface $session_manager
    *   The session manager.
-   * @param \Drupal\Flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(SessionManagerInterface $session_manager, FlagServiceInterface $flag_service) {
@@ @@
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable ID.
@@ @@
   /**
    * Return the flagging edit form.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param mixed $entity_id
    *   The entity ID.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown if the flagging could not be found.
    *
    * @return array
@@ @@
   /**
    * Performs an unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The entity ID to unflag.
@@ @@
    *
    * @see \Drupal\flag\Plugin\ActionLink\AJAXactionLink
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown if the flagging could not be found.
    */
   public function unflag(FlagInterface $flag, $entity_id) {
@@ @@
   /**
    * Title callback when creating a new flagging.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The entity ID to unflag.
@@ @@
   /**
    * Title callback when editing an existing flagging.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The entity ID to unflag.
@@ @@
   /**
    * Get the flag's field entry form.
    *
-   * @param \Drupal\flag\FlaggingInterface $flagging
+   * @param FlaggingInterface $flagging
    *   The flagging from which to get the form.
    * @param string|null $operation
    *   (optional) The operation identifying the form variant to return.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/flag/src/Controller/ActionLinkNoJsController.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(FlagServiceInterface $flag, MessengerInterface $messenger) {
@@ @@
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ @@
   /**
    * Performs a unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ @@
   /**
    * Generates a response after the flag has been updated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $message
    *   The message to display.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response object.
    */
   private function generateResponse(EntityInterface $entity, $message) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


68) modules/contrib/flag/src/Controller/ActionLinkController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag
+   * @param FlagServiceInterface $flag
    *   The flag service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(FlagServiceInterface $flag, RendererInterface $renderer) {
@@ @@
   /**
    * Performs a flagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|null
+   * @return AjaxResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ @@
   /**
    * Performs a unflagging when called via a route.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    * @param int $entity_id
    *   The flaggable entity ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|null
+   * @return AjaxResponse|null
    *   The response object, only if successful.
    *
    * @see \Drupal\flag\Plugin\Reload
@@ @@
   /**
    * Generates a response after the flag has been updated.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $message
    *   (optional) The message to flash.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   private function generateResponse(FlagInterface $flag, EntityInterface $entity, $message) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


69) modules/contrib/flag/src/Annotation/FlagType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


70) modules/contrib/flag/src/Annotation/ActionLinkType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


71) modules/contrib/flag/src/ActionLink/ActionLinkTypePluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\ActionLink;

+use Drupal\Core\Link;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\flag\FlagInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ @@
   /**
    * Get the action link formatted for use in entity links.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
    *
    * @return array
@@ @@
   /**
    * Get the action link as a Link object.
    *
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
    *
-   * @return \Drupal\Core\Link
+   * @return Link
    *   The action Link.
    */
   public function getAsLink(FlagInterface $flag, EntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


72) modules/contrib/flag/src/ActionLink/ActionLinkTypeBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The ID with which to initialize this plugin.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, AccountInterface $current_user) {
@@ @@
    *
    * @param string $action
    *   The action, flag or unflag.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The flaggable entity.
    *
    * @return Url
@@ @@
    *
    * @param string $action
    *   The action, flag or unflag.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
    *
    * @return string
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/flag/src/Access/UnFlagAccessCheck.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ @@
   /**
    * Checks access to the 'unflag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


74) modules/contrib/flag/src/Access/FlagAccessCheck.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ @@
   /**
    * Checks access to the 'flag' action.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\flag\FlagInterface $flag
+   * @param FlagInterface $flag
    *   The flag entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


75) modules/contrib/flag/src/Access/CsrfAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flag\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\CsrfAccessCheck as OrignalCsrfAccessCheck;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   protected $original;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Checks access based on a CSRF token for the request for auth users.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result, always allowed for anonymous users.
    */
   public function access(Route $route, Request $request, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


76) modules/contrib/flag/modules/flag_follower/tests/src/Functional/FlagFollowerUITest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flag_follower\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;
 /**
  * UI Test for flag_follower.
@@ @@
   /**
    * Administrator user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * User A.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $userA;

@@ @@
   /**
    * User B.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $userB;

@@ @@
   /**
    * User C.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $userC;

@@ @@
   /**
    * Node A created by User A.
    *
-   * @var \Drupal\Node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeA;

@@ @@
   /**
    * Node B created by User B.
    *
-   * @var \Drupal\Node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeB;

@@ @@
   /**
    * Node C created by User C.
    *
-   * @var \Drupal\Node\NodeInterface
+   * @var NodeInterface
    */
   protected $nodeC;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
@@ @@
   public function doFollowerView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userB->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'A sees C has two followers.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');

     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers');
-    $this->assertText($this->userA->getAccountName());
-    $this->assertText($this->userC->getAccountName());
-    $this->assertText('2', 'B sees C has two followers.');
-    $this->assertText('1', 'B sees A has one follower.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->userC->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1');

     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers');
-    $this->assertNoText($this->userA->getAccountName());
-    $this->assertNoText($this->userB->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userA->getAccountName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->userB->getAccountName());
   }

   /**
@@ @@
   public function doContentView() {
     $this->drupalLogin($this->userA);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeC->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());

     $this->drupalLogin($this->userB);
     $this->drupalGet('flag-followers/content');
-    $this->assertText($this->nodeA->label());
-    $this->assertText($this->nodeC->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->nodeC->label());

     $this->drupalLogin($this->userC);
     $this->drupalGet('flag-followers/content');
-    $this->assertNoText($this->nodeA->label());
-    $this->assertNoText($this->nodeB->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeA->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->nodeB->label());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/flag/modules/flag_bookmark/tests/src/FunctionalJavascript/FlagBookmarkUITest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/flag/flag.post_update.php:36

    ---------- begin diff ----------
@@ @@
  * Update the flag and unflag actions for existing flags.
  */
 function flag_post_update_flag_actions() {
-  /** @var \Drupal\system\Entity\Action[] $actions */
+  /** @var Action[] $actions */
   $flags = \Drupal::entityTypeManager()->getStorage('flag')->loadMultiple();
   $action_names = [];
   foreach ($flags as $flag) {
@@ @@
     $action_names[] = 'flag_action.' . $flag->id() . '.flag';
     $action_names[] = 'flag_action.' . $flag->id() . '.unflag';
   }
-  $actions = Drupal\system\Entity\Action::loadMultiple($action_names);
+  $actions = Action::loadMultiple($action_names);
   foreach ($actions as $old_id => $action) {
     if (preg_match('/\.(un)?flag$/', $old_id)) {
       // Update the plugin ID and the action ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


79) modules/contrib/flag/flag.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\flag\FlagService;
+use Drupal\Core\Action\ActionManager;
 /**
  * @file
  * The Flag module.
@@ @@
 /**
  * Performs flagging/unflagging for the entity edit form.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity being saved.
  * @param $values
  *   The flag entity form values.
@@ @@
  * Implements hook_entity_build_defaults_alter().
  */
 function flag_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode = 'full', $langcode = NULL) {
-  /** @var \Drupal\flag\FlagService $flag_service */
+  /** @var FlagService $flag_service */
   $flag_service = \Drupal::service('flag');

   // Get all possible flags for this entity type.
@@ @@
 function flag_entity_view_alter(&$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
   $entity_type = $entity->getEntityTypeId();
   if (isset($build['#contextual_links'][$entity_type])) {
-    /** @var \Drupal\flag\FlagService $flag_service */
+    /** @var FlagService $flag_service */
     $flag_service = \Drupal::service('flag');

     // Get all possible flags for this entity type.
@@ @@
   $flags = $flag_service->getAllFlags($entity->getEntityTypeID(), $entity->bundle());

   foreach ($flags as $flag) {
-    /** @var \Drupal\flag\FlagInterface $flag */
+    /** @var FlagInterface $flag */
     // Do not display the flag if disabled.
     if (!$flag->status()){
       continue;
     }

-    /** @var \Drupal\flag\Plugin\Flag\EntityFlagType $flag_type_plugin */
+    /** @var EntityFlagType $flag_type_plugin */
     $flag_type_plugin = $flag->getFlagTypePlugin();

     // Make sure we're dealing with an entity flag type.
@@ @@
 /**
  * Implements hook_entity_operation().
  */
-function flag_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+function flag_entity_operation(EntityInterface $entity) {
   $operations = [];

-  if ($entity instanceof \Drupal\flag\FlagInterface) {
+  if ($entity instanceof FlagInterface) {
     if (!$entity->status()) {
       $operations['enable'] = [
         'title' => t('Enable'),
@@ @@
     return;
   }
   // The action plugin cache needs to detect the new flag.
-  /** @var \Drupal\Core\Action\ActionManager $action_manager */
+  /** @var ActionManager $action_manager */
   $action_manager = \Drupal::service('plugin.manager.action');
   $action_manager->clearCachedDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


80) modules/contrib/flag/flag.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Database\Schema;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Flag module install/schema/update hooks.
@@ @@
   $bundle_schema = [
     'description' => 'The Flag ID.',
     'type' => 'varchar_ascii',
-    'length' => \Drupal\Core\Entity\EntityTypeInterface::BUNDLE_MAX_LENGTH,
+    'length' => EntityTypeInterface::BUNDLE_MAX_LENGTH,
     // 'binary' => FALSE,
     'not null' => TRUE,
   ];

-  /** @var \Drupal\Core\Database\Schema $schema */
+  /** @var Schema $schema */
   $schema = \Drupal::database()->schema();
   $schema->changeField('flagging', 'flag_id', 'flag_id', $bundle_schema);
   $schema->dropIndex('flagging', 'flag_id');
@@ @@
   $schema->addIndex('flagging', 'flagging_field__flag_id__target_id', ['flag_id'], ['fields' => ['flag_id' => $bundle_schema]]);

   // Update the field storage repository.
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+  /** @var EntityFieldManagerInterface $efm */
   $efm = \Drupal::service('entity_field.manager');
-  /** @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface $kv */
+  /** @var KeyValueStoreInterface $kv */
   $kv = \Drupal::service('keyvalue');
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $repo */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $repo */
   $repo = \Drupal::service('entity.last_installed_schema.repository');

   $efm->clearCachedFieldDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


81) modules/contrib/flag/flag.api.php:38

    ---------- begin diff ----------
@@ @@
  * @param array $options
  *   The array of default options for the flag type, with the options for the
  *   flag's link type merged in.
- * @param \Drupal\flag\FlagInterface $flag
+ * @param FlagInterface $flag
  *   The flag object.
  */
 function hook_flag_options_alter(array &$options, FlagInterface $flag) {
@@ @@
  *
  * @param string $action
  *   The action about to be carried out. Either 'flag' or 'unflag'.
- * @param \Drupal\flag\FlagInterface $flag
+ * @param FlagInterface $flag
  *   The flag object.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The user account performing the action.
- * @param \Drupal\Core\Entity\EntityInterface $flaggable
+ * @param EntityInterface $flaggable
  *   The flaggable entity.
  *
- * @return \Drupal\Core\Access\AccessResult
+ * @return AccessResult
  *   An AccessResult object.
  */
 function hook_flag_action_access($action, FlagInterface $flag, AccountInterface $account, EntityInterface $flaggable = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 3 nodes were removed                                                 

 [OK] 81 files have been changed by Rector                                      

