diff --git a/gutenberg.module b/gutenberg.module
index 69e7d45..fc4d72b 100644
--- a/gutenberg.module
+++ b/gutenberg.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Entity\ContentEntityForm;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Provides integration with the Gutenberg editor.
@@ -228,7 +231,7 @@ function gutenberg_form_alter(&$form, FormStateInterface $form_state, $form_id)
  *
  * @param array $form
  *   The form definition array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _gutenberg_node_type_form_submit(array $form, FormStateInterface $form_state) {
@@ -482,7 +485,7 @@ function gutenberg_form_node_form_alter(&$form, FormStateInterface $form_state)
 
   $form['#attached']['drupalSettings']['gutenberg']['metaboxes'][] = 'edit-metabox-fields';
 
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+  /** @var ModuleHandlerInterface $module_handler */
   $module_handler = \Drupal::service('module_handler');
   $form['#attached']['drupalSettings']['gutenberg']['media-enabled'] = $module_handler->moduleExists('media');
   if ($form['#attached']['drupalSettings']['gutenberg']['media-library-enabled'] = $module_handler->moduleExists('media_library')) {
@@ -833,7 +836,7 @@ function _gutenberg_get_default_theme_settings() {
 
   if (!isset($settings)) {
     $theme_name = \Drupal::config('system.theme')->get('default');
-    $theme_path = drupal_get_path('theme', $theme_name);
+    $theme_path = \Drupal::service('extension.list.theme')->getPath($theme_name);
 
     $file_path = DRUPAL_ROOT . '/' . $theme_path . '/' . $theme_name . '.gutenberg.yml';
     if (file_exists($file_path)) {
@@ -986,7 +989,7 @@ function gutenberg_element_info_alter(array &$info) {
  *
  * @param array $element
  *   Render Element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  * @param array $complete_form
  *   Complete form array.
@@ -1000,7 +1003,7 @@ function _gutenberg_text_format_processor(array $element, FormStateInterface $fo
   if (!empty($element['format']) && isset($element['format']['format']['#options']['gutenberg'])) {
     // By default let's assume that gutenberg format is not allowed.
     $gutenberg_allowed = FALSE;
-    /** @var \Drupal\Core\Entity\ContentEntityForm $form */
+    /** @var ContentEntityForm $form */
     $form = $form_state->getFormObject();
     // Check whether the form that contains the element is an EntityForm.
     if ($form instanceof EntityFormInterface) {
@@ -1011,7 +1014,7 @@ function _gutenberg_text_format_processor(array $element, FormStateInterface $fo
       if ($entity instanceof NodeInterface) {
         // Get the node type to get the Gutenberg experience setting.
         $node_type = $entity->bundle();
-        /** @var \Drupal\Core\Config\Config $config */
+        /** @var Config $config */
         $config = \Drupal::service('config.factory')
           ->getEditable('gutenberg.settings');
         $gutenberg_enabled = $config->get($node_type . '_enable_full');
diff --git a/modules/gutenberg_cloud/src/CloudBlockManager.php b/modules/gutenberg_cloud/src/CloudBlockManager.php
index 4242884..2e2119c 100644
--- a/modules/gutenberg_cloud/src/CloudBlockManager.php
+++ b/modules/gutenberg_cloud/src/CloudBlockManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg_cloud;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use GuzzleHttp\ClientInterface;
 
@@ -23,14 +24,14 @@ class CloudBlockManager {
   /**
    * The http client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
@@ -44,9 +45,9 @@ class CloudBlockManager {
   /**
    * CloudBlockManager constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory service.
    */
   public function __construct(ClientInterface $http_client, ConfigFactoryInterface $config) {
@@ -57,7 +58,7 @@ class CloudBlockManager {
   /**
    * Getter for Gutenberg Cloud Blocks config.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Config.
    */
   public function getConfig() {
@@ -122,7 +123,7 @@ class CloudBlockManager {
    * @param \Drupal\gutenberg_cloud\string $name
    *   Block name.
    *
-   * @return \Drupal\gutenberg_cloud\CloudBlock|null
+   * @return CloudBlock|null
    *   Instance of Cloud Block or null.
    */
   public function loadRemote(string $name) {
@@ -151,7 +152,7 @@ class CloudBlockManager {
   /**
    * Check if the block is enabled locally.
    *
-   * @param \Drupal\gutenberg_cloud\CloudBlock $block
+   * @param CloudBlock $block
    *   CloudBlock instance.
    *
    * @return bool
@@ -166,7 +167,7 @@ class CloudBlockManager {
   /**
    * Compare remote and local version of block.
    *
-   * @param \Drupal\gutenberg_cloud\CloudBlock $block
+   * @param CloudBlock $block
    *   CloudBlock instance.
    *
    * @return bool
diff --git a/modules/gutenberg_cloud/src/Form/BlockManagerForm.php b/modules/gutenberg_cloud/src/Form/BlockManagerForm.php
index 08602b8..ec739a0 100644
--- a/modules/gutenberg_cloud/src/Form/BlockManagerForm.php
+++ b/modules/gutenberg_cloud/src/Form/BlockManagerForm.php
@@ -30,32 +30,32 @@ class BlockManagerForm extends ConfigFormBase {
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Cloud Block Manager service.
    *
-   * @var \Drupal\gutenberg_cloud\CloudBlockManager
+   * @var CloudBlockManager
    */
   protected $blockManager;
 
   /**
    * Library Discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
    * BlockManagerForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messanger service.
-   * @param \Drupal\gutenberg_cloud\CloudBlockManager $block_manager
+   * @param CloudBlockManager $block_manager
    *   Cloud Block Manager service.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   Library Discovery service.
    */
   public function __construct(MessengerInterface $messenger, CloudBlockManager $block_manager, LibraryDiscoveryInterface $library_discovery) {
@@ -238,10 +238,10 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Modal dialog.
    */
   public function viewDetails(array &$form, FormStateInterface $form_state) {
@@ -275,7 +275,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ -292,7 +292,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ -309,7 +309,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ -331,7 +331,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param string $type
    *   Action to perform.
diff --git a/src/Annotation/GutenbergPlugin.php b/src/Annotation/GutenbergPlugin.php
index 788ca28..47b0ba9 100644
--- a/src/Annotation/GutenbergPlugin.php
+++ b/src/Annotation/GutenbergPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -30,7 +31,7 @@ class GutenbergPlugin extends Plugin {
   /**
    * The human-readable name of the Gutenberg plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/AssertMediaTrait.php b/src/AssertMediaTrait.php
index 56ce132..813c5b2 100644
--- a/src/AssertMediaTrait.php
+++ b/src/AssertMediaTrait.php
@@ -16,7 +16,7 @@ trait AssertMediaTrait {
   /**
    * Assert if provided entity is type of FileInterface.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to check.
    *
    * @throws \Exception
@@ -30,7 +30,7 @@ trait AssertMediaTrait {
   /**
    * Assert if provided entity is type of MediaInterface.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to check.
    *
    * @throws \Exception
diff --git a/src/BlocksRendererHelper.php b/src/BlocksRendererHelper.php
index be9ea95..5951271 100644
--- a/src/BlocksRendererHelper.php
+++ b/src/BlocksRendererHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Block\BlockPluginInterface;
@@ -18,32 +19,32 @@ class BlocksRendererHelper {
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Drupal\Core\Block\BlockManagerInterface instance.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Drupal\Core\Session\AccountProxyInterface instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * BlocksRendererHelper constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current user service.
    */
   public function __construct(
@@ -78,10 +79,10 @@ class BlocksRendererHelper {
   /**
    * Return render array for given block plugin.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $plugin_block
+   * @param BlockPluginInterface $plugin_block
    *   Block Plugin instance.
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface
+   * @return array|MarkupInterface
    *   Array containing render array, or empty.
    */
   public function getRenderFromBlockPlugin(BlockPluginInterface $plugin_block) {
@@ -109,7 +110,7 @@ class BlocksRendererHelper {
   /**
    * Check if the access for current user is forbidden.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $plugin_block
+   * @param BlockPluginInterface $plugin_block
    *   Block Plugin instance.
    *
    * @return bool
diff --git a/src/Controller/BlocksController.php b/src/Controller/BlocksController.php
index 52d6ace..e9900aa 100644
--- a/src/Controller/BlocksController.php
+++ b/src/Controller/BlocksController.php
@@ -18,32 +18,32 @@ class BlocksController extends ControllerBase {
   /**
    * Drupal\Core\Block\BlockManagerInterface instance.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface instance.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\gutenberg\BlocksRendererHelper instance.
    *
-   * @var \Drupal\gutenberg\BlocksRendererHelper
+   * @var BlocksRendererHelper
    */
   protected $blocksRenderer;
 
   /**
    * BlocksController constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\gutenberg\BlocksRendererHelper $blocks_renderer
+   * @param BlocksRendererHelper $blocks_renderer
    *   Blocks renderer helper service.
    */
   public function __construct(
@@ -69,12 +69,12 @@ class BlocksController extends ControllerBase {
   /**
    * Returns JSON representing the loaded blocks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $content_type
    *   The content type to fetch settings from.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function loadByType(Request $request, $content_type) {
@@ -103,7 +103,7 @@ class BlocksController extends ControllerBase {
    * @param string $plugin_id
    *   Plugin ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function loadById($plugin_id) {
diff --git a/src/Controller/MediaController.php b/src/Controller/MediaController.php
index b4567de..59a602a 100644
--- a/src/Controller/MediaController.php
+++ b/src/Controller/MediaController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\gutenberg\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\file\Entity\File;
 use Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface;
@@ -23,23 +25,23 @@ class MediaController extends ControllerBase {
   /**
    * The media service.
    *
-   * @var \Drupal\gutenberg\Service\MediaService
+   * @var MediaService
    */
   protected $mediaService;
 
   /**
    * The media selection processor manager.
    *
-   * @var \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface
+   * @var MediaSelectionProcessorManagerInterface
    */
   protected $mediaSelectionProcessorManager;
 
   /**
    * MediaController constructor.
    *
-   * @param \Drupal\gutenberg\Service\MediaService $media_service
+   * @param MediaService $media_service
    *   The media service.
-   * @param \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface $media_selection_processor_manager
+   * @param MediaSelectionProcessorManagerInterface $media_selection_processor_manager
    *   The media selection processor manager.
    */
   public function __construct(MediaService $media_service, MediaSelectionProcessorManagerInterface $media_selection_processor_manager) {
@@ -60,10 +62,10 @@ class MediaController extends ControllerBase {
   /**
    * Render Drupal's media library dialog.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ -82,16 +84,16 @@ class MediaController extends ControllerBase {
   /**
    * Load media data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string $media
    *   Media data (numeric or stringified JSON for media data processing).
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadMedia(Request $request, string $media) {
     $media_entities = $this->mediaSelectionProcessorManager->processData($media);
@@ -114,7 +116,7 @@ class MediaController extends ControllerBase {
    * @param string $media
    *   Media data (numeric or stringified JSON for media data processing).
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function render(string $media) {
@@ -143,12 +145,12 @@ class MediaController extends ControllerBase {
   /**
    * Upload files, save as file and media entity if possible.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\editor\Entity\Editor|null $editor
+   * @param Editor|null $editor
    *   Editor entity instance.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ -172,12 +174,12 @@ class MediaController extends ControllerBase {
   /**
    * Get data of the media entity required for Gutenberg editor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\file\Entity\File|null $file
+   * @param File|null $file
    *   Loaded found file entity instance.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ -198,14 +200,14 @@ class MediaController extends ControllerBase {
   /**
    * Searches for files.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $type
    *   The MIME type search string.
    * @param string $search
    *   The filename search string.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function search(Request $request, string $type = '', string $search = '') {
@@ -217,12 +219,12 @@ class MediaController extends ControllerBase {
   /**
    * Updates file data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string|int $fid
    *   File id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ -247,10 +249,10 @@ class MediaController extends ControllerBase {
   /**
    * Get data for autocomplete.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function autocomplete(Request $request) {
diff --git a/src/Controller/OEmbedProxyUrlController.php b/src/Controller/OEmbedProxyUrlController.php
index 25ba7f2..15caaec 100644
--- a/src/Controller/OEmbedProxyUrlController.php
+++ b/src/Controller/OEmbedProxyUrlController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Controller;
 
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Controller\ControllerBase;
 use GuzzleHttp\Exception\RequestException;
@@ -19,10 +20,10 @@ class OEmbedProxyUrlController extends ControllerBase {
   /**
    * HTTP request.
    *
-   * @return bool|\Symfony\Component\HttpFoundation\JsonResponse
+   * @return bool|JsonResponse
    *   The JSON response.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function request() {
     if (empty($_GET['url']) || !UrlHelper::isValid($_GET['url'], TRUE)) {
diff --git a/src/Controller/ReusableBlocksController.php b/src/Controller/ReusableBlocksController.php
index 7d0907e..7be1042 100644
--- a/src/Controller/ReusableBlocksController.php
+++ b/src/Controller/ReusableBlocksController.php
@@ -17,12 +17,12 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Returns JSON representing the loaded blocks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function load(Request $request, $block_id = NULL) {
@@ -72,12 +72,12 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Saves reusable block.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function save(Request $request, $block_id = NULL) {
@@ -124,12 +124,12 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Delete reusable block.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function delete(Request $request, $block_id = NULL) {
@@ -144,12 +144,12 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Controller routes access callback.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
    * @param string $block_id
    *   Block id from route parameter.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Allowed access result if all conditions are met.
    */
   public function access(AccountInterface $account, $block_id) {
diff --git a/src/Controller/SearchController.php b/src/Controller/SearchController.php
index 77937ca..df4eec9 100644
--- a/src/Controller/SearchController.php
+++ b/src/Controller/SearchController.php
@@ -15,10 +15,10 @@ class SearchController extends ControllerBase {
   /**
    * Search content.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function search(Request $request) {
diff --git a/src/DataProvider/BaseDataProvider.php b/src/DataProvider/BaseDataProvider.php
index 39a481b..af7029d 100644
--- a/src/DataProvider/BaseDataProvider.php
+++ b/src/DataProvider/BaseDataProvider.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\gutenberg\DataProvider;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Image\ImageFactory;
@@ -16,32 +19,32 @@ abstract class BaseDataProvider implements DataProviderInterface {
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Image factory instance.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * BaseDataProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $connection, ImageFactory $image_factory) {
@@ -78,8 +81,8 @@ abstract class BaseDataProvider implements DataProviderInterface {
    * @return array
    *   The sizes of the image styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSizes(string $source_url, string $uri) {
     $styles = $this->entityTypeManager->getStorage('image_style')->loadMultiple();
@@ -90,9 +93,9 @@ abstract class BaseDataProvider implements DataProviderInterface {
     ];
 
     foreach ($styles as $style) {
-      /** @var \Drupal\image\Entity\ImageStyle $style */
+      /** @var ImageStyle $style */
       $sizes[$style->getName()] = [
-        'source_url' => file_url_transform_relative($style->buildUrl($uri)),
+        'source_url' => \Drupal::service('file_url_generator')->transformRelative($style->buildUrl($uri)),
       ];
     }
 
diff --git a/src/DataProvider/DataProviderInterface.php b/src/DataProvider/DataProviderInterface.php
index 02df4e3..f0ff819 100644
--- a/src/DataProvider/DataProviderInterface.php
+++ b/src/DataProvider/DataProviderInterface.php
@@ -14,7 +14,7 @@ interface DataProviderInterface {
   /**
    * Returns array data.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to process.
    * @param array $data
    *   Array of additional data to process.
diff --git a/src/DataProvider/EntityDataProviderManagerInterface.php b/src/DataProvider/EntityDataProviderManagerInterface.php
index 379ddca..98b2f8c 100644
--- a/src/DataProvider/EntityDataProviderManagerInterface.php
+++ b/src/DataProvider/EntityDataProviderManagerInterface.php
@@ -14,7 +14,7 @@ interface EntityDataProviderManagerInterface {
   /**
    * Register entity type data provider.
    *
-   * @param \Drupal\gutenberg\DataProvider\DataProviderInterface $data_provider
+   * @param DataProviderInterface $data_provider
    *   Data provider to register.
    * @param string $entity_type
    *   Entity type machine name.
@@ -28,7 +28,7 @@ interface EntityDataProviderManagerInterface {
    *
    * @param string $entity_type
    *   Entity type machine name.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
    * @param array $data
    *   (optional) Additional data to process.
diff --git a/src/DataProvider/FileEntityDataProvider.php b/src/DataProvider/FileEntityDataProvider.php
index 429eac0..d573ef2 100644
--- a/src/DataProvider/FileEntityDataProvider.php
+++ b/src/DataProvider/FileEntityDataProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\DataProvider;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\gutenberg\AssertMediaTrait;
 
@@ -20,9 +21,9 @@ class FileEntityDataProvider extends BaseDataProvider {
   public function getData(ContentEntityInterface $entity, array $data = []) {
     $this->assertIsFileEntity($entity);
 
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $uri = $entity->getFileUri();
-    $source_url = file_url_transform_relative(file_create_url($uri));
+    $source_url = \Drupal::service('file_url_generator')->generateString($uri);
     $image = $this->imageFactory->get($uri);
     $file_data = $this->getFileData($entity->id());
 
diff --git a/src/DataProvider/MediaEntityDataProvider.php b/src/DataProvider/MediaEntityDataProvider.php
index 6336d4a..c8c7984 100644
--- a/src/DataProvider/MediaEntityDataProvider.php
+++ b/src/DataProvider/MediaEntityDataProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\DataProvider;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\gutenberg\AssertMediaTrait;
 
@@ -20,9 +21,9 @@ class MediaEntityDataProvider extends BaseDataProvider {
   public function getData(ContentEntityInterface $entity, array $data = []) {
     $this->assertIsFileEntity($entity);
 
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $uri = $entity->getFileUri();
-    $source_url = file_url_transform_relative(file_create_url($uri));
+    $source_url = \Drupal::service('file_url_generator')->generateString($uri);
     $file_data = $this->getFileData($entity->id());
 
     $result = [
diff --git a/src/GutenbergPluginConfigurableInterface.php b/src/GutenbergPluginConfigurableInterface.php
index 891c855..a6ee089 100644
--- a/src/GutenbergPluginConfigurableInterface.php
+++ b/src/GutenbergPluginConfigurableInterface.php
@@ -24,9 +24,9 @@ interface GutenbergPluginConfigurableInterface extends GutenbergPluginInterface
    *
    * @param array $form
    *   An empty form array to be populated with a configuration form, if any.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the entire filter administration form.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
diff --git a/src/GutenbergPluginInterface.php b/src/GutenbergPluginInterface.php
index 41075cd..ab43030 100644
--- a/src/GutenbergPluginInterface.php
+++ b/src/GutenbergPluginInterface.php
@@ -16,7 +16,7 @@ interface GutenbergPluginInterface extends PluginInspectionInterface {
    * These libraries will be attached to the text_format element on which the
    * editor is being loaded.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
@@ -49,7 +49,7 @@ interface GutenbergPluginInterface extends PluginInspectionInterface {
    * $plugin_specific_settings = $settings['plugins'][$plugin_id];
    * @endcode
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
diff --git a/src/GutenbergPluginManager.php b/src/GutenbergPluginManager.php
index 53f0cfd..d6df49a 100644
--- a/src/GutenbergPluginManager.php
+++ b/src/GutenbergPluginManager.php
@@ -19,9 +19,9 @@ class GutenbergPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -35,9 +35,9 @@ class GutenbergPluginManager extends DefaultPluginManager {
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    */
   public function injectPluginSettingsForm(array &$form, FormStateInterface $form_state, Editor $editor) {
diff --git a/src/MediaEntityRenderer.php b/src/MediaEntityRenderer.php
index aa694ee..7164d25 100644
--- a/src/MediaEntityRenderer.php
+++ b/src/MediaEntityRenderer.php
@@ -17,23 +17,23 @@ class MediaEntityRenderer implements MediaEntityRendererInterface {
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MediaEntityRenderer constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RendererInterface $renderer, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/MediaEntityRendererInterface.php b/src/MediaEntityRendererInterface.php
index b55b17a..846a4e9 100644
--- a/src/MediaEntityRendererInterface.php
+++ b/src/MediaEntityRendererInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\media\Entity\Media;
 /**
  * Renders media entities.
  *
@@ -12,7 +13,7 @@ interface MediaEntityRendererInterface {
   /**
    * Render media entities.
    *
-   * @param \Drupal\media\Entity\Media|string $media_entity
+   * @param Media|string $media_entity
    *   Media entity ID or loaded media entity instance.
    * @param string $view_mode
    *   (optional) View mode of media entity, 'full' is default.
diff --git a/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php b/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php
index 869aa89..53ebfa2 100644
--- a/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php
+++ b/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php
@@ -14,14 +14,14 @@ class DefaultMediaSelectionProcessor implements MediaSelectionProcessorInterface
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * DefaultMediaSelectionProcessor constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php b/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php
index 39e8c47..f95fce2 100644
--- a/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php
+++ b/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\MediaSelectionProcessor;
 
+use Drupal\media\MediaInterface;
 /**
  * Interface MediaSelectionProcessorInterface.
  *
@@ -15,7 +16,7 @@ interface MediaSelectionProcessorInterface {
    * @param array $data
    *   Array of data to process.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   The list of media entities.
    */
   public function process(array $data);
diff --git a/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php b/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php
index c3b9211..ceeedae 100644
--- a/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php
+++ b/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\MediaSelectionProcessor;
 
+use Drupal\media\MediaInterface;
 /**
  * Provides contract for media selection processor manager.
  *
@@ -12,7 +13,7 @@ interface MediaSelectionProcessorManagerInterface {
   /**
    * Register media selection processor.
    *
-   * @param \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorInterface $processor
+   * @param MediaSelectionProcessorInterface $processor
    *   Media selection processor instance.
    * @param \Drupal\gutenberg\MediaSelectionProcessor\string $processor_name
    *   Processor name.
@@ -40,7 +41,7 @@ interface MediaSelectionProcessorManagerInterface {
    * @param string $data
    *   Serialized data to process.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   List of media entities.
    */
   public function processData(string $data);
diff --git a/src/MediaTypeGuesser.php b/src/MediaTypeGuesser.php
index 5cc9d73..dcc4d69 100644
--- a/src/MediaTypeGuesser.php
+++ b/src/MediaTypeGuesser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\media\Entity\MediaType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
 /**
@@ -27,23 +28,23 @@ class MediaTypeGuesser implements MediaTypeGuesserInterface {
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The file extension guesser.
    *
-   * @var \Drupal\gutenberg\FileExtensionGuesserInterface
+   * @var FileExtensionGuesserInterface
    */
   protected $fileExtensionGuesser;
 
   /**
    * MediaTypeGuesser constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\gutenberg\FileExtensionGuesserInterface $file_extension_guesser
+   * @param FileExtensionGuesserInterface $file_extension_guesser
    *   The file extension guesser.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileExtensionGuesserInterface $file_extension_guesser) {
@@ -59,7 +60,7 @@ class MediaTypeGuesser implements MediaTypeGuesserInterface {
     $media_type_entities = $this->entityTypeManager->getStorage('media_type')->loadMultiple();
     $media_types = [];
 
-    /** @var \Drupal\media\Entity\MediaType $media_type_entity */
+    /** @var MediaType $media_type_entity */
     foreach ($media_type_entities as $media_type_entity) {
       $field_config = $media_type_entity->getSource()->getSourceFieldDefinition($media_type_entity);
       $media_type_file_extensions = explode(' ', $field_config->getSetting('file_extensions'));
diff --git a/src/MediaUploader.php b/src/MediaUploader.php
index f7566ce..34ed3fc 100644
--- a/src/MediaUploader.php
+++ b/src/MediaUploader.php
@@ -17,14 +17,14 @@ class MediaUploader implements MediaUploaderInterface {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * MediaUploader constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(FileSystemInterface $file_system) {
@@ -45,7 +45,7 @@ class MediaUploader implements MediaUploaderInterface {
     // @todo: find better solution for saving file itself.
     $data = file_get_contents($uploaded_file->getPathname());
     $file_name = $this->getRandomFileName($uploaded_file->getClientOriginalExtension() ?: '');
-    $file = file_save_data($data, "{$directory}/{$file_name}", FileSystemInterface::EXISTS_RENAME);
+    $file = \Drupal::service('file.repository')->writeData($data, "{$directory}/{$file_name}", FileSystemInterface::EXISTS_RENAME);
     $file->setTemporary();
     $file->setFilename($uploaded_file->getClientOriginalName());
 
diff --git a/src/MediaUploaderInterface.php b/src/MediaUploaderInterface.php
index df15d4c..2ea5e71 100644
--- a/src/MediaUploaderInterface.php
+++ b/src/MediaUploaderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\file\Entity\File;
 use Drupal\editor\Entity\Editor;
 use Symfony\Component\HttpFoundation\File\UploadedFile;
 
@@ -15,12 +16,12 @@ interface MediaUploaderInterface {
   /**
    * Upload media to the filesystem.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   Uploaded file instance.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   Editor entity.
    *
-   * @return \Drupal\file\Entity\File|null
+   * @return File|null
    *   File entity or null on failure.
    */
   public function upload(UploadedFile $uploaded_file, Editor $editor);
diff --git a/src/Persistence/MediaTypePersistenceManager.php b/src/Persistence/MediaTypePersistenceManager.php
index 5c719e8..2e8b3ec 100644
--- a/src/Persistence/MediaTypePersistenceManager.php
+++ b/src/Persistence/MediaTypePersistenceManager.php
@@ -17,23 +17,23 @@ class MediaTypePersistenceManager implements MediaTypePersistenceManagerInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * MediaTypePersistenceManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $account) {
diff --git a/src/Persistence/MediaTypePersistenceManagerInterface.php b/src/Persistence/MediaTypePersistenceManagerInterface.php
index 8bf56f9..a58acdf 100644
--- a/src/Persistence/MediaTypePersistenceManagerInterface.php
+++ b/src/Persistence/MediaTypePersistenceManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Persistence;
 
+use Drupal\media\Entity\Media;
 use Drupal\file\Entity\File;
 
 /**
@@ -16,10 +17,10 @@ interface MediaTypePersistenceManagerInterface {
    *
    * @param string $media_type
    *   Media type machine name.
-   * @param \Drupal\file\Entity\File $file_entity
+   * @param File $file_entity
    *   File entity instance.
    *
-   * @return \Drupal\media\Entity\Media|null
+   * @return Media|null
    *   Created media type or null if failed.
    *
    * @throws \Exception
diff --git a/src/Plugin/Action/ReusableBlockDelete.php b/src/Plugin/Action/ReusableBlockDelete.php
index 5bcd4d4..73d350f 100644
--- a/src/Plugin/Action/ReusableBlockDelete.php
+++ b/src/Plugin/Action/ReusableBlockDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Plugin\Action;
 
+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;
 
@@ -20,7 +21,7 @@ class ReusableBlockDelete extends ActionBase {
    * {@inheritdoc}
    */
   public function execute($entity = NULL) {
-    /** @var \Drupal\block_content\BlockContentInterface $entity */
+    /** @var BlockContentInterface $entity */
     $entity->delete();
   }
 
@@ -28,7 +29,7 @@ class ReusableBlockDelete extends ActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\block_content\BlockContentInterface $object */
+    /** @var BlockContentInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }
 
diff --git a/src/Plugin/Editor/Gutenberg.php b/src/Plugin/Editor/Gutenberg.php
index 07d0c7b..b1563ef 100644
--- a/src/Plugin/Editor/Gutenberg.php
+++ b/src/Plugin/Editor/Gutenberg.php
@@ -33,28 +33,28 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * The module handler to invoke hooks on.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Gutenberg plugin manager.
    *
-   * @var \Drupal\gutenberg\GutenbergPluginManager
+   * @var GutenbergPluginManager
    */
   protected $gutenbergPluginManager;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -67,13 +67,13 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\gutenberg\GutenbergPluginManager $gutenberg_plugin_manager
+   * @param GutenbergPluginManager $gutenberg_plugin_manager
    *   The Gutenberg plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke hooks on.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GutenbergPluginManager $gutenberg_plugin_manager, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager, RendererInterface $renderer) {
@@ -142,7 +142,7 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * Get javascript settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    */
   public function getJsSettings(Editor $editor) {
@@ -191,7 +191,7 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * Builds the "toolbar" configuration part of the CKEditor JS settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
@@ -208,7 +208,7 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * Builds the "contentsCss" configuration part of the CKEditor JS settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
diff --git a/src/Plugin/Filter/BlockFilter.php b/src/Plugin/Filter/BlockFilter.php
index e6f368a..c5be102 100644
--- a/src/Plugin/Filter/BlockFilter.php
+++ b/src/Plugin/Filter/BlockFilter.php
@@ -26,14 +26,14 @@ class BlockFilter extends FilterBase implements ContainerFactoryPluginInterface
   /**
    * Drupal\gutenberg\BlocksRendererHelper instance.
    *
-   * @var \Drupal\gutenberg\BlocksRendererHelper
+   * @var BlocksRendererHelper
    */
   protected $blocksRenderer;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
diff --git a/src/Plugin/Filter/FieldMappingFilter.php b/src/Plugin/Filter/FieldMappingFilter.php
index 5699fe2..51f5987 100644
--- a/src/Plugin/Filter/FieldMappingFilter.php
+++ b/src/Plugin/Filter/FieldMappingFilter.php
@@ -26,7 +26,7 @@ class FieldMappingFilter extends FilterBase implements ContainerFactoryPluginInt
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
diff --git a/src/Plugin/Filter/MappingFieldsFilter.php b/src/Plugin/Filter/MappingFieldsFilter.php
index f1ca13a..0f18bac 100644
--- a/src/Plugin/Filter/MappingFieldsFilter.php
+++ b/src/Plugin/Filter/MappingFieldsFilter.php
@@ -25,7 +25,7 @@ class MappingFieldsFilter extends FilterBase implements ContainerFactoryPluginIn
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
diff --git a/src/Plugin/Filter/MediaEntityBlockFilter.php b/src/Plugin/Filter/MediaEntityBlockFilter.php
index 22dbf6c..1fbb687 100644
--- a/src/Plugin/Filter/MediaEntityBlockFilter.php
+++ b/src/Plugin/Filter/MediaEntityBlockFilter.php
@@ -25,7 +25,7 @@ class MediaEntityBlockFilter extends FilterBase implements ContainerFactoryPlugi
   /**
    * The media entity renderer.
    *
-   * @var \Drupal\gutenberg\MediaEntityRendererInterface
+   * @var MediaEntityRendererInterface
    */
   protected $mediaEntityRenderer;
 
diff --git a/src/Service/MediaService.php b/src/Service/MediaService.php
index 34d24b2..eed4769 100644
--- a/src/Service/MediaService.php
+++ b/src/Service/MediaService.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\gutenberg\Service;
 
+use Drupal\media_library\MediaLibraryUiBuilder;
+use Drupal\media\Entity\Media;
+use Drupal\file\Entity\File;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -28,111 +33,111 @@ class MediaService {
   /**
    * The media type guesser.
    *
-   * @var \Drupal\gutenberg\MediaTypeGuesserInterface
+   * @var MediaTypeGuesserInterface
    */
   protected $mediaTypeGuesser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The media type persistence manager.
    *
-   * @var \Drupal\gutenberg\Persistence\MediaTypePersistenceManager
+   * @var MediaTypePersistenceManager
    */
   protected $mediaTypePersisterManager;
 
   /**
    * The entity data provider manager.
    *
-   * @var \Drupal\gutenberg\DataProvider\EntityDataProviderManager
+   * @var EntityDataProviderManager
    */
   protected $entityDataProviderManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The media uploader.
    *
-   * @var \Drupal\gutenberg\MediaUploaderInterface
+   * @var MediaUploaderInterface
    */
   protected $mediaUploader;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The media entity renderer.
    *
-   * @var \Drupal\gutenberg\MediaEntityRendererInterface
+   * @var MediaEntityRendererInterface
    */
   protected $mediaEntityRenderer;
 
   /**
    * The media library UI builder.
    *
-   * @var \Drupal\media_library\MediaLibraryUiBuilder|null
+   * @var MediaLibraryUiBuilder|null
    */
   protected $builder;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * MediaController constructor.
    *
-   * @param \Drupal\gutenberg\MediaTypeGuesserInterface $media_type_guesser
+   * @param MediaTypeGuesserInterface $media_type_guesser
    *   The media type guesser.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\gutenberg\Persistence\MediaTypePersistenceManager $media_type_persistence_manager
+   * @param MediaTypePersistenceManager $media_type_persistence_manager
    *   The media type persistence manager.
-   * @param \Drupal\gutenberg\DataProvider\EntityDataProviderManager $entity_data_provider_manager
+   * @param EntityDataProviderManager $entity_data_provider_manager
    *   The entity data provider manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\gutenberg\MediaUploaderInterface $media_uploader
+   * @param MediaUploaderInterface $media_uploader
    *   The media uploader.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\gutenberg\MediaEntityRendererInterface $media_entity_renderer
+   * @param MediaEntityRendererInterface $media_entity_renderer
    *   The media entity renderer.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
@@ -174,7 +179,7 @@ class MediaService {
    * @return string
    *   The rendered element.
    *
-   * @throws \Drupal\gutenberg\Service\MediaTypeNotFoundException
+   * @throws MediaTypeNotFoundException
    */
   public function renderDialog(array $media_types) {
     $media_types = array_filter($media_types)
@@ -200,7 +205,7 @@ class MediaService {
   /**
    * Render media entities.
    *
-   * @param \Drupal\media\MediaInterface $media_entity
+   * @param MediaInterface $media_entity
    *   Media entity instance.
    *
    * @return array
@@ -210,7 +215,7 @@ class MediaService {
     $rendered_view_modes = [];
 
     try {
-      /** @var \Drupal\media\Entity\Media $media_entity */
+      /** @var Media $media_entity */
       $view_modes = $this->entityDisplayRepository->getViewModeOptionsByBundle('media', $media_entity->bundle());
 
       foreach ($view_modes as $view_mode => $view_mode_name) {
@@ -231,20 +236,20 @@ class MediaService {
   /**
    * Save uploaded file, create file and media entity if possible.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   Uploaded file instance.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   Editor entity instance.
    *
    * @return mixed
    *   The media entity data.
    *
-   * @throws \Drupal\gutenberg\Service\FileEntityNotSavedException
-   * @throws \Drupal\gutenberg\Service\MediaEntityNotSavedException
-   * @throws \Drupal\gutenberg\Service\MediaEntityNotMatchedException
+   * @throws FileEntityNotSavedException
+   * @throws MediaEntityNotSavedException
+   * @throws MediaEntityNotMatchedException
    */
   public function processMediaEntityUpload(UploadedFile $uploaded_file, Editor $editor) {
-    /** @var \Drupal\file\Entity\File $file_entity */
+    /** @var File $file_entity */
     if (!$file_entity = $this->mediaUploader->upload($uploaded_file, $editor)) {
       throw new FileEntityNotSavedException();
     }
@@ -271,7 +276,7 @@ class MediaService {
   /**
    * Load file entity data.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File entity instance.
    *
    * @return mixed
@@ -286,14 +291,14 @@ class MediaService {
   /**
    * Load media entity data.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media entity instance.
    *
    * @return mixed
    *   The file entity data for the specified media.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadMediaData(MediaInterface $media) {
     $file_entity_id = $media->getSource()->getSourceFieldValue($media);
@@ -304,7 +309,7 @@ class MediaService {
   /**
    * Search for file entities.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string $type
    *   Mime type of searched files.
@@ -314,8 +319,8 @@ class MediaService {
    * @return array
    *   The found file entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function search(Request $request, string $type = '', string $search = '') {
     $query = $this->entityTypeManager->getStorage('file')->getQuery();
