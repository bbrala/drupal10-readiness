diff --git a/src/Controller/NotificationController.php b/src/Controller/NotificationController.php
index 3e750c2..274dffa 100644
--- a/src/Controller/NotificationController.php
+++ b/src/Controller/NotificationController.php
@@ -26,14 +26,14 @@ class NotificationController implements ContainerInjectionInterface {
   /**
    * The system logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The dispatcher used to fire events.
    *
-   * @var \Drupal\amazon_sns\Event\MessageEventDispatcher
+   * @var MessageEventDispatcher
    */
   protected $messageEventDispatcher;
 
@@ -52,9 +52,9 @@ class NotificationController implements ContainerInjectionInterface {
   /**
    * Construct a new NotificationController.
    *
-   * @param \Drupal\amazon_sns\Event\MessageEventDispatcher $messageEventDispatcher
+   * @param MessageEventDispatcher $messageEventDispatcher
    *   The event dispatcher.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The system logger.
    */
   public function __construct(MessageEventDispatcher $messageEventDispatcher, LoggerInterface $logger) {
@@ -65,10 +65,10 @@ class NotificationController implements ContainerInjectionInterface {
   /**
    * Controller callback for inbound SNS notifications.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The full HTTP request with the SNS notification.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response indicating to Amazon SNS if the notification was successful or
    *   if it needs to be resent at a later time.
    */
@@ -133,7 +133,7 @@ class NotificationController implements ContainerInjectionInterface {
    * @param \Exception $e
    *   The exception that indicated a client error.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A 4XX response, containing the escaped exception message.
    */
   private function badRequestResponse(\Exception $e) {
diff --git a/src/Event/MessageEventDispatcher.php b/src/Event/MessageEventDispatcher.php
index 194b665..e004a81 100644
--- a/src/Event/MessageEventDispatcher.php
+++ b/src/Event/MessageEventDispatcher.php
@@ -15,7 +15,7 @@ class MessageEventDispatcher implements ContainerInjectionInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -33,7 +33,7 @@ class MessageEventDispatcher implements ContainerInjectionInterface {
   /**
    * Construct a new Amazon SNS event dispatcher.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The Symfony event dispatcher used to send events.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher) {
@@ -43,7 +43,7 @@ class MessageEventDispatcher implements ContainerInjectionInterface {
   /**
    * Dispatch a message depending on the SNS message type.
    *
-   * @param \Aws\Sns\Message $message
+   * @param Message $message
    *   The validated message from SNS.
    *
    * @throws \InvalidArgumentException
@@ -53,15 +53,15 @@ class MessageEventDispatcher implements ContainerInjectionInterface {
     $event = new SnsMessageEvent($message);
     switch ($message['Type']) {
       case 'SubscriptionConfirmation':
-        $this->eventDispatcher->dispatch(SnsEvents::SUBSCRIPTION_CONFIRMATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::SUBSCRIPTION_CONFIRMATION);
         break;
 
       case 'Notification':
-        $this->eventDispatcher->dispatch(SnsEvents::NOTIFICATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::NOTIFICATION);
         break;
 
       case 'UnsubscribeConfirmation':
-        $this->eventDispatcher->dispatch(SnsEvents::UNSUBSCRIBE_CONFIRMATION, $event);
+        $this->eventDispatcher->dispatch($event, SnsEvents::UNSUBSCRIBE_CONFIRMATION);
         break;
 
       default:
diff --git a/src/Event/SnsMessageEvent.php b/src/Event/SnsMessageEvent.php
index df6c4d5..1cb1bcf 100644
--- a/src/Event/SnsMessageEvent.php
+++ b/src/Event/SnsMessageEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\amazon_sns\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Aws\Sns\Message;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event class wrapping an SNS message.
@@ -16,14 +16,14 @@ class SnsMessageEvent extends Event {
   /**
    * The notification from SNS.
    *
-   * @var \Aws\Sns\Message
+   * @var Message
    */
   protected $message;
 
   /**
    * Construct a new SnsMessageEvent.
    *
-   * @param \Aws\Sns\Message $message
+   * @param Message $message
    *   The notification from SNS.
    */
   public function __construct(Message $message) {
@@ -33,7 +33,7 @@ class SnsMessageEvent extends Event {
   /**
    * Return the SNS message.
    *
-   * @return \Aws\Sns\Message
+   * @return Message
    *   The notification from SNS.
    */
   public function getMessage() {
diff --git a/src/Event/SnsNotificationSubscriber.php b/src/Event/SnsNotificationSubscriber.php
index b3d5f1f..f502502 100644
--- a/src/Event/SnsNotificationSubscriber.php
+++ b/src/Event/SnsNotificationSubscriber.php
@@ -21,14 +21,14 @@ class SnsNotificationSubscriber implements ContainerInjectionInterface, EventSub
   /**
    * Logger interface.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Config factory interface.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
@@ -47,7 +47,7 @@ class SnsNotificationSubscriber implements ContainerInjectionInterface, EventSub
    * @codeCoverageIgnore
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Psr\Log\LoggerInterface $logger */
+    /** @var LoggerInterface $logger */
     $logger = $container->get('logger.channel.amazon_sns');
     return new static(
       $logger,
@@ -58,9 +58,9 @@ class SnsNotificationSubscriber implements ContainerInjectionInterface, EventSub
   /**
    * SnsNotificationSubscriber constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory.
    */
   public function __construct(LoggerInterface $logger, ConfigFactoryInterface $config_factory) {
@@ -74,7 +74,7 @@ class SnsNotificationSubscriber implements ContainerInjectionInterface, EventSub
    * This will log any notifications received from SNS, regardless of type.  The
    * intention here is to help with tracking down SNS problems.
    *
-   * @param \Drupal\amazon_sns\Event\SnsMessageEvent $event
+   * @param SnsMessageEvent $event
    *   Publish message received from Amazon SNS.
    */
   public function logNotification(SnsMessageEvent $event) {
diff --git a/src/Event/SnsSubscriptionConfirmationSubscriber.php b/src/Event/SnsSubscriptionConfirmationSubscriber.php
index 484b511..f651c7c 100644
--- a/src/Event/SnsSubscriptionConfirmationSubscriber.php
+++ b/src/Event/SnsSubscriptionConfirmationSubscriber.php
@@ -18,14 +18,14 @@ class SnsSubscriptionConfirmationSubscriber implements ContainerInjectionInterfa
   /**
    * The HTTP client used to confirm the subscription with Amazon.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;
 
   /**
    * The system logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -53,9 +53,9 @@ class SnsSubscriptionConfirmationSubscriber implements ContainerInjectionInterfa
   /**
    * Construct a new subscriber for SNS confirmations.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The HTTP client used to confirm the subscription.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The system logger.
    */
   public function __construct(ClientInterface $client, LoggerInterface $logger) {
@@ -66,7 +66,7 @@ class SnsSubscriptionConfirmationSubscriber implements ContainerInjectionInterfa
   /**
    * Confirm a new subscription.
    *
-   * @param \Drupal\amazon_sns\Event\SnsMessageEvent $event
+   * @param SnsMessageEvent $event
    *   The subscription request message.
    */
   public function confirm(SnsMessageEvent $event) {
diff --git a/src/Form/SnsSettingsForm.php b/src/Form/SnsSettingsForm.php
index 0324539..b9a473b 100644
--- a/src/Form/SnsSettingsForm.php
+++ b/src/Form/SnsSettingsForm.php
@@ -34,7 +34,7 @@ class SnsSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form base.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of given form.
    *
    * @return array
diff --git a/src/RequestMessageValidator.php b/src/RequestMessageValidator.php
index 28f869a..ddd6d3d 100644
--- a/src/RequestMessageValidator.php
+++ b/src/RequestMessageValidator.php
@@ -24,13 +24,13 @@ class RequestMessageValidator {
    * \Aws\Sns\Exception\InvalidSnsMessageException and cast them to an HTTP 4XX
    * class response.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request containing the SNS message.
    *
    * @throws \InvalidArgumentException
    *   Thrown when the request does not contain the SNS message type header.
    *
-   * @return \Aws\Sns\Message
+   * @return Message
    *   The authenticated and validated SNS message.
    */
   public static function getMessageFromRequest(Request $request) {
diff --git a/tests/src/Functional/SnsSettingsFormTest.php b/tests/src/Functional/SnsSettingsFormTest.php
index b82e5d7..4272b5a 100644
--- a/tests/src/Functional/SnsSettingsFormTest.php
+++ b/tests/src/Functional/SnsSettingsFormTest.php
@@ -26,7 +26,7 @@ class SnsSettingsFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
   }
diff --git a/tests/src/Unit/NotificationControllerTest.php b/tests/src/Unit/NotificationControllerTest.php
index 00deb9d..ede91e4 100644
--- a/tests/src/Unit/NotificationControllerTest.php
+++ b/tests/src/Unit/NotificationControllerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\amazon_sns\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\amazon_sns\Controller\NotificationController;
 use Drupal\amazon_sns\Event\MessageEventDispatcher;
 use Drupal\Tests\UnitTestCase;
@@ -21,16 +22,12 @@ class NotificationControllerTest extends UnitTestCase {
    */
   public function testReceive() {
     $this->mockGuzzleCertRequest();
-    /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|MessageEventDispatcher $dispatcher */
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->once())->method('dispatch');
 
-    /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|LoggerInterface $logger */
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->never())->method($this->anything());
 
     $controller = new NotificationController($dispatcher, $logger);
@@ -44,16 +41,12 @@ class NotificationControllerTest extends UnitTestCase {
    * Test error handling when a required header is missing.
    */
   public function testMissingRequiredHeaders() {
-    /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|MessageEventDispatcher $dispatcher */
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->never())->method('dispatch');
 
-    /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|LoggerInterface $logger */
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('log');
 
     $controller = new NotificationController($dispatcher, $logger);
@@ -72,16 +65,12 @@ class NotificationControllerTest extends UnitTestCase {
   public function testInvalidSignature() {
     $this->mockGuzzleCertRequest();
 
-    /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\amazon_sns\Event\MessageEventDispatcher $dispatcher */
-    $dispatcher = $this->getMockBuilder(MessageEventDispatcher::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|MessageEventDispatcher $dispatcher */
+    $dispatcher = $this->createMock(MessageEventDispatcher::class);
     $dispatcher->expects($this->never())->method('dispatch');
 
-    /** @var \PHPUnit\Framework\MockObject\MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|LoggerInterface $logger */
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('log');
 
     $controller = new NotificationController($dispatcher, $logger);
diff --git a/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php b/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php
index 708b564..4662f69 100644
--- a/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php
+++ b/tests/src/Unit/SnsSubscriptionConfirmationSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\amazon_sns\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Aws\Sns\Message;
 use Drupal\amazon_sns\Event\SnsMessageEvent;
 use Drupal\amazon_sns\Event\SnsSubscriptionConfirmationSubscriber;
@@ -36,17 +37,13 @@ class SnsSubscriptionConfirmationSubscriberTest extends UnitTestCase {
     ];
 
     $message = new Message($data);
-    /** @var \PHPUnit_Framework_MockObject_MockObject|\GuzzleHttp\Client $client */
-    $client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|Client $client */
+    $client = $this->createMock(Client::class);
     $client->expects($this->once())->method('request')
       ->with('GET', $message['SubscribeURL']);
 
-    /** @var \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface $logger */
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MockObject|LoggerInterface $logger */
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())->method('info');
 
     $subscriber = new SnsSubscriptionConfirmationSubscriber($client, $logger);
