diff --git a/src/Annotation/XBBCodeTag.php b/src/Annotation/XBBCodeTag.php
index 6eaa329..b0f0dc2 100644
--- a/src/Annotation/XBBCodeTag.php
+++ b/src/Annotation/XBBCodeTag.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -19,7 +20,7 @@ class XBBCodeTag extends Plugin {
   /**
    * The human-readable name of the tag.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -45,7 +46,7 @@ class XBBCodeTag extends Plugin {
   /**
    * Additional administrative information about the filter's behavior.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -54,7 +55,7 @@ class XBBCodeTag extends Plugin {
   /**
    * A sample tag for the filter tips.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Entity/Tag.php b/src/Entity/Tag.php
index 68a666f..deb5bb7 100644
--- a/src/Entity/Tag.php
+++ b/src/Entity/Tag.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode\Entity;
 
+use Drupal\filter\FilterFormatInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\Cache;
@@ -210,7 +211,7 @@ class Tag extends ConfigEntityBase implements TagInterface {
   /**
    * Get all formats that use this tag.
    *
-   * @return \Drupal\filter\FilterFormatInterface[]
+   * @return FilterFormatInterface[]
    *   An array of filter formats using a tag set where this tag is active.
    */
   protected function getFormats(): array {
@@ -223,14 +224,14 @@ class Tag extends ConfigEntityBase implements TagInterface {
         ->condition('filters.xbbcode.status', TRUE)
         ->execute();
 
-      /** @var \Drupal\filter\FilterFormatInterface $format */
+      /** @var FilterFormatInterface $format */
       foreach ($storage->loadMultiple($ids) as $id => $format) {
         $config = $format->filters('xbbcode')->getConfiguration();
         $tag_set_id = $config['settings']['tags'];
 
         // If it references an existing tag set without this tag, skip.
         if ($tag_set_id) {
-          /** @var \Drupal\xbbcode\Entity\TagSetInterface $tag_set */
+          /** @var TagSetInterface $tag_set */
           $tag_set = TagSet::load($tag_set_id);
           if ($tag_set !== NULL && !$tag_set->hasTag($this->id())) {
             continue;
diff --git a/src/Entity/TagSet.php b/src/Entity/TagSet.php
index 1b9bee8..bba0520 100644
--- a/src/Entity/TagSet.php
+++ b/src/Entity/TagSet.php
@@ -54,7 +54,7 @@ class TagSet extends ConfigEntityBase implements TagSetInterface {
   /**
    * The tag plugin collection.
    *
-   * @var \Drupal\xbbcode\TagPluginCollection
+   * @var TagPluginCollection
    */
   protected $pluginCollection;
 
diff --git a/src/Entity/TagSetInterface.php b/src/Entity/TagSetInterface.php
index 3d90b5b..f44d767 100644
--- a/src/Entity/TagSetInterface.php
+++ b/src/Entity/TagSetInterface.php
@@ -46,7 +46,7 @@ interface TagSetInterface extends ConfigEntityInterface, EntityWithPluginCollect
   /**
    * Get the plugin collection.
    *
-   * @return \Drupal\xbbcode\TagPluginCollection
+   * @return TagPluginCollection
    *   The plugin collection.
    */
   public function getPluginCollection(): TagPluginCollection;
diff --git a/src/Form/LabeledFormTrait.php b/src/Form/LabeledFormTrait.php
index 3395546..f3b09f4 100644
--- a/src/Form/LabeledFormTrait.php
+++ b/src/Form/LabeledFormTrait.php
@@ -21,7 +21,7 @@ trait LabeledFormTrait {
    *
    * Redeclared here because PHP traits cannot implement interfaces.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The current form entity.
    *
    * @see \Drupal\Core\Entity\EntityFormInterface::getEntity()
diff --git a/src/Form/TagForm.php b/src/Form/TagForm.php
index e3e61bc..9df73c4 100644
--- a/src/Form/TagForm.php
+++ b/src/Form/TagForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\xbbcode\Form;
 
+use Drupal\xbbcode\Entity\TagInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,25 +24,25 @@ class TagForm extends TagFormBase {
   /**
    * The tag storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\xbbcode\TagPluginManager
+   * @var TagPluginManager
    */
   protected $manager;
 
   /**
    * Constructs a new TagForm.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The twig service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The tag storage.
-   * @param \Drupal\xbbcode\TagPluginManager $manager
+   * @param TagPluginManager $manager
    *   The tag plugin manager.
    */
   public function __construct(TwigEnvironment $twig, EntityStorageInterface $storage, TagPluginManager $manager) {
@@ -105,7 +108,7 @@ class TagForm extends TagFormBase {
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state): void {
     parent::copyFormValuesToEntity($entity, $form, $form_state);
-    /** @var \Drupal\xbbcode\Entity\TagInterface $entity */
+    /** @var TagInterface $entity */
     $name = $entity->getName();
 
     // Ensure the input is safe for regex patterns, as it is not yet validated.
@@ -126,7 +129,7 @@ class TagForm extends TagFormBase {
   public function validateForm(array &$form, FormStateInterface $form_state): void {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\xbbcode\Entity\TagInterface $tag */
+    /** @var TagInterface $tag */
     $tag = $this->entity;
 
     // Set up a mock parser and do a practice run with this tag.
@@ -179,8 +182,8 @@ class TagForm extends TagFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    */
   public function save(array $form, FormStateInterface $form_state): int {
     $result = parent::save($form, $form_state);
diff --git a/src/Form/TagFormBase.php b/src/Form/TagFormBase.php
index 95d6054..b103e01 100644
--- a/src/Form/TagFormBase.php
+++ b/src/Form/TagFormBase.php
@@ -28,14 +28,14 @@ class TagFormBase extends EntityForm {
   /**
    * The twig service.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;
 
   /**
    * TagFormBase constructor.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The twig service.
    */
   public function __construct(TwigEnvironment $twig) {
@@ -48,7 +48,7 @@ class TagFormBase extends EntityForm {
   public function form(array $form, FormStateInterface $form_state): array {
     $form = $this->addLabelFields($form);
 
-    /** @var \Drupal\xbbcode\Entity\TagInterface $tag */
+    /** @var TagInterface $tag */
     $tag = $this->entity;
     $sample = str_replace('{{ name }}', $tag->getName(), $tag->getSample());
 
diff --git a/src/Form/TagFormCopy.php b/src/Form/TagFormCopy.php
index 8b69d13..2b12925 100644
--- a/src/Form/TagFormCopy.php
+++ b/src/Form/TagFormCopy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -22,7 +23,7 @@ class TagFormCopy extends TagForm {
       $number = 1;
     }
 
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $copy */
+    /** @var ConfigEntityInterface $copy */
     $copy = $entity->createDuplicate();
     $copy->set('label', $label . ' ' . ($number + 1));
 
diff --git a/src/Form/TagFormView.php b/src/Form/TagFormView.php
index e5ef608..2a3802e 100644
--- a/src/Form/TagFormView.php
+++ b/src/Form/TagFormView.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\xbbcode\Form;
 
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,8 +16,8 @@ class TagFormView extends TagFormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
+   * @throws ServiceCircularReferenceException
+   * @throws ServiceNotFoundException
    */
   public static function create(ContainerInterface $container): self {
     return new static(
diff --git a/src/Form/TagSetForm.php b/src/Form/TagSetForm.php
index ce40fbd..d42b5f8 100644
--- a/src/Form/TagSetForm.php
+++ b/src/Form/TagSetForm.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\xbbcode\Form;
 
+use Drupal\xbbcode\Entity\TagSetInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\filter\FilterFormatInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
@@ -24,32 +30,32 @@ class TagSetForm extends EntityForm {
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $tagStorage;
 
   /**
    * The format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $formatStorage;
 
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\xbbcode\TagPluginManager
+   * @var TagPluginManager
    */
   protected $pluginManager;
 
   /**
    * Constructs a new FilterFormatFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $tagStorage
+   * @param EntityStorageInterface $tagStorage
    *   The entity storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $formatStorage
+   * @param EntityStorageInterface $formatStorage
    *   The format storage.
-   * @param \Drupal\xbbcode\TagPluginManager $pluginManager
+   * @param TagPluginManager $pluginManager
    *   The tag plugin manager.
    */
   public function __construct(EntityStorageInterface $tagStorage,
@@ -92,7 +98,7 @@ class TagSetForm extends EntityForm {
       '#empty'      => $this->t('No custom tags or plugins are available.'),
     ];
 
-    /** @var \Drupal\xbbcode\Entity\TagSetInterface $tagSet */
+    /** @var TagSetInterface $tagSet */
     $tagSet = $this->entity;
     $plugins = new TagPluginCollection($this->pluginManager,
                                        $tagSet->getTags());
@@ -103,7 +109,7 @@ class TagSetForm extends EntityForm {
     // Add the fields for the activated plugins, keyed by current tag name.
     // (This is because the same plugin might be active with multiple names.)
     foreach ($plugins as $name => $plugin) {
-      /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $plugin */
+      /** @var TagPluginInterface $plugin */
       $settings["enabled:$name"] = $this->buildRow($plugin, TRUE);
       $form['_tags']['#default_value']["enabled:$name"] = TRUE;
 
@@ -114,7 +120,7 @@ class TagSetForm extends EntityForm {
     // Add the fields for the available plugins, keyed by plugin ID.
     // (This is because multiple plugins might use the same default tag name.)
     foreach ($available as $plugin_id) {
-      /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $plugin */
+      /** @var TagPluginInterface $plugin */
       try {
         $plugin = $this->pluginManager->createInstance($plugin_id);
         $settings["available:$plugin_id"] = $this->buildRow($plugin, FALSE);
@@ -190,7 +196,7 @@ class TagSetForm extends EntityForm {
   /**
    * Build a table row for a single plugin.
    *
-   * @param \Drupal\xbbcode\Plugin\TagPluginInterface $plugin
+   * @param TagPluginInterface $plugin
    *   The plugin instance.
    * @param bool $enabled
    *   Whether or not the plugin is currently enabled.
@@ -278,7 +284,7 @@ class TagSetForm extends EntityForm {
       $tags[$row['name']] = $this->buildPluginConfiguration($row);
     }
 
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity->set('tags', $tags);
   }
 
@@ -298,9 +304,9 @@ class TagSetForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state): int {
     $result = parent::save($form, $form_state);
@@ -314,7 +320,7 @@ class TagSetForm extends EntityForm {
     ];
 
     foreach ($update as $tag_set => $formats) {
-      /** @var \Drupal\filter\FilterFormatInterface $format */
+      /** @var FilterFormatInterface $format */
       foreach ($this->formatStorage->loadMultiple($formats) as $format) {
         $filter = $format->filters('xbbcode');
         $config = $filter->getConfiguration();
diff --git a/src/Parser/ParserInterface.php b/src/Parser/ParserInterface.php
index 1f6dfab..ab8c676 100644
--- a/src/Parser/ParserInterface.php
+++ b/src/Parser/ParserInterface.php
@@ -15,7 +15,7 @@ interface ParserInterface {
    * @param string $text
    *   The source text.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @return NodeElementInterface
    *   The element representing the root of the tree.
    */
   public function parse(string $text): NodeElementInterface;
diff --git a/src/Parser/Processor/TagProcessorBase.php b/src/Parser/Processor/TagProcessorBase.php
index c6fc529..93974dc 100644
--- a/src/Parser/Processor/TagProcessorBase.php
+++ b/src/Parser/Processor/TagProcessorBase.php
@@ -27,7 +27,7 @@ abstract class TagProcessorBase implements TagProcessorInterface {
   /**
    * Override this function to return any printable value.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   Tag element in the parse tree.
    *
    * @return mixed
diff --git a/src/Parser/Processor/TagProcessorInterface.php b/src/Parser/Processor/TagProcessorInterface.php
index 043cd21..c76c75a 100644
--- a/src/Parser/Processor/TagProcessorInterface.php
+++ b/src/Parser/Processor/TagProcessorInterface.php
@@ -13,10 +13,10 @@ interface TagProcessorInterface {
   /**
    * Process a tag match.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag to be rendered.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\OutputElementInterface
+   * @return OutputElementInterface
    *   The rendered output.
    */
   public function process(TagElementInterface $tag): OutputElementInterface;
diff --git a/src/Parser/Tree/ElementInterface.php b/src/Parser/Tree/ElementInterface.php
index 03d6921..137b694 100644
--- a/src/Parser/Tree/ElementInterface.php
+++ b/src/Parser/Tree/ElementInterface.php
@@ -10,7 +10,7 @@ interface ElementInterface {
   /**
    * Render this element to a string.
    *
-   * @return string|\Drupal\xbbcode\Parser\Tree\OutputElementInterface
+   * @return string|OutputElementInterface
    *   The rendered output.
    */
   public function render();
diff --git a/src/Parser/Tree/NodeElement.php b/src/Parser/Tree/NodeElement.php
index e96cb75..11499b2 100644
--- a/src/Parser/Tree/NodeElement.php
+++ b/src/Parser/Tree/NodeElement.php
@@ -10,14 +10,14 @@ abstract class NodeElement implements NodeElementInterface {
   /**
    * The children of this node.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\ElementInterface[]
+   * @var ElementInterface[]
    */
   protected $children = [];
 
   /**
    * The rendered children of this node.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\OutputElementInterface[]
+   * @var OutputElementInterface[]
    */
   protected $output;
 
diff --git a/src/Parser/Tree/NodeElementInterface.php b/src/Parser/Tree/NodeElementInterface.php
index 1f8fb1a..f9d3bcd 100644
--- a/src/Parser/Tree/NodeElementInterface.php
+++ b/src/Parser/Tree/NodeElementInterface.php
@@ -10,7 +10,7 @@ interface NodeElementInterface extends ElementInterface {
   /**
    * Append an element to the children of this element.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\ElementInterface $element
+   * @param ElementInterface $element
    *   The new element.
    */
   public function append(ElementInterface $element): void;
@@ -18,7 +18,7 @@ interface NodeElementInterface extends ElementInterface {
   /**
    * Get all children of the element.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\ElementInterface[]
+   * @return ElementInterface[]
    *   The children.
    */
   public function getChildren(): array;
@@ -38,7 +38,7 @@ interface NodeElementInterface extends ElementInterface {
    *   (Optional) Set to FALSE to only return output that is already rendered.
    *   By default, this method renders it implicitly.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\OutputElementInterface[]
+   * @return OutputElementInterface[]
    *   The sequence of rendered outputs.
    */
   public function getRenderedChildren(bool $force_render = TRUE): array;
@@ -46,7 +46,7 @@ interface NodeElementInterface extends ElementInterface {
   /**
    * Retrieve the descendants of the node.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\ElementInterface[]|\iterable
+   * @return ElementInterface[]|\iterable
    *   Every descendant of the node.
    */
   public function getDescendants();
diff --git a/src/Parser/Tree/TagElement.php b/src/Parser/Tree/TagElement.php
index ae44e0d..c6e052c 100644
--- a/src/Parser/Tree/TagElement.php
+++ b/src/Parser/Tree/TagElement.php
@@ -13,7 +13,7 @@ class TagElement extends NodeElement implements TagElementInterface {
   /**
    * The processor handling this element.
    *
-   * @var \Drupal\xbbcode\Parser\Processor\TagProcessorInterface
+   * @var TagProcessorInterface
    */
   private $processor;
 
@@ -55,7 +55,7 @@ class TagElement extends NodeElement implements TagElementInterface {
   /**
    * The tag's parent element.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @var NodeElementInterface
    */
   private $parent;
 
diff --git a/src/Parser/Tree/TagElementInterface.php b/src/Parser/Tree/TagElementInterface.php
index 6d15e77..2ff3cfe 100644
--- a/src/Parser/Tree/TagElementInterface.php
+++ b/src/Parser/Tree/TagElementInterface.php
@@ -152,7 +152,7 @@ interface TagElementInterface extends NodeElementInterface {
    * Note that the parent's rendered content will obviously be incomplete
    * during rendering, and should not be accessed.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @return NodeElementInterface
    *   Parent node.
    */
   public function getParent(): NodeElementInterface;
@@ -160,7 +160,7 @@ interface TagElementInterface extends NodeElementInterface {
   /**
    * Set the parent of the current tag.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $parent
+   * @param NodeElementInterface $parent
    *   Parent node.
    */
   public function setParent(NodeElementInterface $parent): void;
@@ -168,7 +168,7 @@ interface TagElementInterface extends NodeElementInterface {
   /**
    * Get the assigned processor.
    *
-   * @return \Drupal\xbbcode\Parser\Processor\TagProcessorInterface
+   * @return TagProcessorInterface
    *   Tag processor.
    */
   public function getProcessor(): TagProcessorInterface;
@@ -176,7 +176,7 @@ interface TagElementInterface extends NodeElementInterface {
   /**
    * Assign a processor to this tag element.
    *
-   * @param \Drupal\xbbcode\Parser\Processor\TagProcessorInterface $processor
+   * @param TagProcessorInterface $processor
    *   A tag processor.
    */
   public function setProcessor(TagProcessorInterface $processor): void;
diff --git a/src/Parser/XBBCodeParser.php b/src/Parser/XBBCodeParser.php
index 558c026..7e5d761 100644
--- a/src/Parser/XBBCodeParser.php
+++ b/src/Parser/XBBCodeParser.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\xbbcode\Parser;
 
+use Drupal\xbbcode\Parser\Processor\TagProcessorInterface;
+use Drupal\xbbcode\Parser\Tree\NodeElement;
 use Drupal\xbbcode\Parser\Tree\NodeElementInterface;
 use Drupal\xbbcode\Parser\Tree\RootElement;
 use Drupal\xbbcode\Parser\Tree\TagElement;
@@ -17,7 +19,7 @@ class XBBCodeParser implements ParserInterface {
   /**
    * The plugins for rendering.
    *
-   * @var \Drupal\xbbcode\Parser\Processor\TagProcessorInterface[]
+   * @var TagProcessorInterface[]
    */
   protected $processors;
 
@@ -231,11 +233,11 @@ class XBBCodeParser implements ParserInterface {
    * @param array[] $tokens
    *   The tokens.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @return NodeElementInterface
    *   The element representing the tree.
    */
   public static function buildTree(string $text, array $tokens): NodeElementInterface {
-    /** @var \Drupal\xbbcode\Parser\Tree\NodeElement[] $stack */
+    /** @var NodeElement[] $stack */
     $stack = [new RootElement()];
 
     // Tracks the current position in the text.
@@ -260,7 +262,7 @@ class XBBCodeParser implements ParserInterface {
       }
       else {
         // Pop the closed element.
-        /** @var \Drupal\xbbcode\Parser\Tree\TagElementInterface $element */
+        /** @var TagElementInterface $element */
         $element = array_pop($stack);
         $element->setClosingName($token['name']);
         end($stack)->append($element);
@@ -278,9 +280,9 @@ class XBBCodeParser implements ParserInterface {
   /**
    * Assign processors to the tag elements of a tree.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $node
+   * @param NodeElementInterface $node
    *   The tree to decorate.
-   * @param \Drupal\xbbcode\Parser\Processor\TagProcessorInterface[]|\ArrayAccess $processors
+   * @param TagProcessorInterface[]|\ArrayAccess $processors
    *   The processors, keyed by name.
    */
   public static function decorateTree(NodeElementInterface $node, $processors): void {
diff --git a/src/Plugin/Derivative/TagPluginDeriver.php b/src/Plugin/Derivative/TagPluginDeriver.php
index 735bef2..882b103 100644
--- a/src/Plugin/Derivative/TagPluginDeriver.php
+++ b/src/Plugin/Derivative/TagPluginDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode\Plugin\Derivative;
 
+use Drupal\xbbcode\Entity\TagInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -15,14 +16,14 @@ class TagPluginDeriver extends DeriverBase implements ContainerDeriverInterface
   /**
    * Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * Constructs a Deriver.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
    */
   public function __construct(EntityStorageInterface $storage) {
@@ -44,7 +45,7 @@ class TagPluginDeriver extends DeriverBase implements ContainerDeriverInterface
   public function getDerivativeDefinitions($base_plugin_definition): array {
     $xbbcode_tags = $this->storage->loadMultiple();
     foreach ($xbbcode_tags as $id => $tag) {
-      /** @var \Drupal\xbbcode\Entity\TagInterface $tag */
+      /** @var TagInterface $tag */
       $this->derivatives[$id] = [
         'id' => 'xbbcode_tag' . TagPluginBase::DERIVATIVE_SEPARATOR . $id,
         'label' => $tag->label(),
diff --git a/src/Plugin/Filter/XBBCodeFilter.php b/src/Plugin/Filter/XBBCodeFilter.php
index a89bac1..d1a5b3f 100644
--- a/src/Plugin/Filter/XBBCodeFilter.php
+++ b/src/Plugin/Filter/XBBCodeFilter.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\xbbcode\Plugin\Filter;
 
+use Drupal\xbbcode\TagPluginCollection;
+use Drupal\xbbcode\Entity\TagSetInterface;
+use Drupal\xbbcode\Parser\ParserInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -41,35 +44,35 @@ class XBBCodeFilter extends FilterBase implements ContainerFactoryPluginInterfac
   /**
    * The tag set storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\xbbcode\TagPluginManager
+   * @var TagPluginManager
    */
   protected $manager;
 
   /**
    * The tag plugins.
    *
-   * @var \Drupal\xbbcode\TagPluginCollection
+   * @var TagPluginCollection
    */
   protected $tags;
 
   /**
    * The tag set (optional).
    *
-   * @var \Drupal\xbbcode\Entity\TagSetInterface
+   * @var TagSetInterface
    */
   protected $tagSet;
 
   /**
    * The parser.
    *
-   * @var \Drupal\xbbcode\Parser\ParserInterface
+   * @var ParserInterface
    */
   protected $parser;
 
@@ -89,9 +92,9 @@ class XBBCodeFilter extends FilterBase implements ContainerFactoryPluginInterfac
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The tag set storage.
-   * @param \Drupal\xbbcode\TagPluginManager $manager
+   * @param TagPluginManager $manager
    *   The tag plugin manager.
    */
   public function __construct(array $configuration,
@@ -253,7 +256,7 @@ class XBBCodeFilter extends FilterBase implements ContainerFactoryPluginInterfac
   /**
    * Recursively apply source transformations to each tag element.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\ElementInterface $node
+   * @param ElementInterface $node
    *   The parse tree.
    *
    * @return string
@@ -285,7 +288,7 @@ class XBBCodeFilter extends FilterBase implements ContainerFactoryPluginInterfac
    * The "option" and "attribute" values are provided to plugins as raw input
    * (and will be filtered by them before printing).
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $tree
+   * @param NodeElementInterface $tree
    *   The parse tree.
    */
   public static function decodeHtml(NodeElementInterface $tree): void {
@@ -313,7 +316,7 @@ class XBBCodeFilter extends FilterBase implements ContainerFactoryPluginInterfac
    * on its own (without HTML restrictors) while still maintaining
    * markup safety.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $tree
+   * @param NodeElementInterface $tree
    *   The parse tree.
    */
   public static function filterXss(NodeElementInterface $tree): void {
@@ -330,7 +333,7 @@ class XBBCodeFilter extends FilterBase implements ContainerFactoryPluginInterfac
   /**
    * Add linebreaks inside text elements.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $tree
+   * @param NodeElementInterface $tree
    *   The parse tree.
    */
   public static function addLinebreaks(NodeElementInterface $tree): void {
diff --git a/src/Plugin/RenderTagPlugin.php b/src/Plugin/RenderTagPlugin.php
index ac5b5bd..e71b141 100644
--- a/src/Plugin/RenderTagPlugin.php
+++ b/src/Plugin/RenderTagPlugin.php
@@ -16,7 +16,7 @@ abstract class RenderTagPlugin extends TagPluginBase implements ContainerFactory
   /**
    * The Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -29,7 +29,7 @@ abstract class RenderTagPlugin extends TagPluginBase implements ContainerFactory
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Drupal renderer service.
    */
   public function __construct(array $configuration,
@@ -70,7 +70,7 @@ abstract class RenderTagPlugin extends TagPluginBase implements ContainerFactory
   /**
    * Build a render array from the tag.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag element in the parse tree.
    *
    * @return array
diff --git a/src/Plugin/TagPluginBase.php b/src/Plugin/TagPluginBase.php
index 7dd4aee..f61dd78 100644
--- a/src/Plugin/TagPluginBase.php
+++ b/src/Plugin/TagPluginBase.php
@@ -181,10 +181,10 @@ abstract class TagPluginBase extends PluginBase implements TagPluginInterface {
    * Tag plugins should override this function rather than ::process(),
    * in order to let the metadata from sub-tags bubble up.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   Tag element in the parse tree.
    *
-   * @return \Drupal\xbbcode\TagProcessResult
+   * @return TagProcessResult
    *   Tag process result.
    */
   abstract public function doProcess(TagElementInterface $tag): TagProcessResult;
diff --git a/src/Plugin/TagPluginInterface.php b/src/Plugin/TagPluginInterface.php
index e58c6f3..8d0b0e4 100644
--- a/src/Plugin/TagPluginInterface.php
+++ b/src/Plugin/TagPluginInterface.php
@@ -79,10 +79,10 @@ interface TagPluginInterface extends TagProcessorInterface, PluginInspectionInte
   /**
    * Generate output from a tag element.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag element to process.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\OutputElementInterface
+   * @return OutputElementInterface
    *   Actually a TagProcessResult, but PHP does not support covariant types.
    *
    * @todo Add covariant type hints after PHP 7.4 is required.
@@ -101,7 +101,7 @@ interface TagPluginInterface extends TagProcessorInterface, PluginInspectionInte
    *
    * @param string $content
    *   The content, after applying inner transformations.
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The original tag element.
    *
    * @return string
diff --git a/src/Plugin/TemplateTagPlugin.php b/src/Plugin/TemplateTagPlugin.php
index 36d81ba..e6d2d19 100644
--- a/src/Plugin/TemplateTagPlugin.php
+++ b/src/Plugin/TemplateTagPlugin.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\xbbcode\Plugin;
 
+use Twig\Error\LoaderError;
+use Twig\Error\RuntimeError;
+use Twig\Error\SyntaxError;
 use Drupal\xbbcode\Parser\Tree\TagElementInterface;
 use Drupal\xbbcode\TagProcessResult;
 use Twig\Environment as TwigEnvironment;
@@ -68,9 +71,9 @@ class TemplateTagPlugin extends TagPluginBase {
    * @return \Twig_TemplateWrapper
    *   The compiled template that should render this tag.
    *
-   * @throws \Twig\Error\LoaderError
-   * @throws \Twig\Error\RuntimeError
-   * @throws \Twig\Error\SyntaxError
+   * @throws LoaderError
+   * @throws RuntimeError
+   * @throws SyntaxError
    */
   protected function getTemplate(): TwigTemplateWrapper {
     if (!$this->templateWrapper) {
@@ -82,9 +85,9 @@ class TemplateTagPlugin extends TagPluginBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Twig\Error\LoaderError
-   * @throws \Twig\Error\RuntimeError
-   * @throws \Twig\Error\SyntaxError
+   * @throws LoaderError
+   * @throws RuntimeError
+   * @throws SyntaxError
    */
   public function doProcess(TagElementInterface $tag): TagProcessResult {
     return new TagProcessResult($this->getTemplate()->render([
diff --git a/src/Plugin/XBBCode/EntityTagPlugin.php b/src/Plugin/XBBCode/EntityTagPlugin.php
index b26593f..bb45448 100644
--- a/src/Plugin/XBBCode/EntityTagPlugin.php
+++ b/src/Plugin/XBBCode/EntityTagPlugin.php
@@ -35,7 +35,7 @@ class EntityTagPlugin extends TemplateTagPlugin implements ContainerFactoryPlugi
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
@@ -44,7 +44,7 @@ class EntityTagPlugin extends TemplateTagPlugin implements ContainerFactoryPlugi
    *
    * (Not serialized for performance reasons.)
    *
-   * @var \Drupal\xbbcode\Entity\TagInterface
+   * @var TagInterface
    */
   private $entity;
 
@@ -59,7 +59,7 @@ class EntityTagPlugin extends TemplateTagPlugin implements ContainerFactoryPlugi
    *   The plugin implementation definition.
    * @param \Twig\Environment $twig
    *   The twig template loader.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The tag storage.
    */
   public function __construct(array $configuration,
@@ -115,7 +115,7 @@ class EntityTagPlugin extends TemplateTagPlugin implements ContainerFactoryPlugi
   /**
    * Loads the custom tag entity of the plugin.
    *
-   * @return \Drupal\xbbcode\Entity\TagInterface
+   * @return TagInterface
    *   The custom tag entity.
    */
   protected function getEntity(): TagInterface {
diff --git a/src/PluginCollectionArrayAdapter.php b/src/PluginCollectionArrayAdapter.php
index 8b14fa4..14a04ee 100644
--- a/src/PluginCollectionArrayAdapter.php
+++ b/src/PluginCollectionArrayAdapter.php
@@ -13,7 +13,7 @@ trait PluginCollectionArrayAdapter {
    * {@inheritdoc}
    */
   public function offsetExists($offset): bool {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     return $this->has($offset);
   }
 
@@ -21,7 +21,7 @@ trait PluginCollectionArrayAdapter {
    * {@inheritdoc}
    */
   public function offsetGet($offset) {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     return $this->get($offset);
   }
 
@@ -29,7 +29,7 @@ trait PluginCollectionArrayAdapter {
    * {@inheritdoc}
    */
   public function offsetSet($offset, $value): void {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     $this->set($offset, $value);
   }
 
@@ -37,7 +37,7 @@ trait PluginCollectionArrayAdapter {
    * {@inheritdoc}
    */
   public function offsetUnset($offset): void {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     $this->remove($offset);
   }
 
diff --git a/src/PreparedTagElement.php b/src/PreparedTagElement.php
index 07de742..0e1298c 100644
--- a/src/PreparedTagElement.php
+++ b/src/PreparedTagElement.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\xbbcode\Parser\Processor\TagProcessorInterface;
 use Drupal\xbbcode\Parser\Tree\ElementInterface;
@@ -25,21 +26,21 @@ class PreparedTagElement implements TagElementInterface {
   /**
    * The wrapped tag element.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\TagElementInterface
+   * @var TagElementInterface
    */
   protected $tag;
 
   /**
    * The outer source.
    *
-   * @var \Drupal\Component\Render\MarkupInterface
+   * @var MarkupInterface
    */
   protected $outerSource;
 
   /**
    * PreparedTagElement constructor.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag to be wrapped.
    */
   public function __construct(TagElementInterface $tag) {
diff --git a/src/TagAccessHandler.php b/src/TagAccessHandler.php
index a805ba4..6c41b5b 100644
--- a/src/TagAccessHandler.php
+++ b/src/TagAccessHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode;
 
+use Drupal\xbbcode\Entity\TagInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -16,7 +17,7 @@ class TagAccessHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\xbbcode\Entity\TagInterface $entity */
+    /** @var TagInterface $entity */
     if (($operation === 'update' || $operation === 'delete') && !$entity->isEditable()) {
       return AccessResult::forbidden();
     }
diff --git a/src/TagListBuilder.php b/src/TagListBuilder.php
index 03bfa3a..26bc22d 100644
--- a/src/TagListBuilder.php
+++ b/src/TagListBuilder.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\xbbcode;
 
+use Drupal\xbbcode\Entity\TagInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -24,7 +27,7 @@ class TagListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\xbbcode\Entity\TagInterface $entity */
+    /** @var TagInterface $entity */
     $row['tag'] = $entity->label();
     $row['description'] = $entity->getDescription();
     $row['sample'] = [
@@ -37,8 +40,8 @@ class TagListBuilder extends EntityListBuilder {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    */
   protected function getDefaultOperations(EntityInterface $entity): array {
     $operations = parent::getDefaultOperations($entity);
diff --git a/src/TagPluginCollection.php b/src/TagPluginCollection.php
index 6d1a2ea..31319d2 100644
--- a/src/TagPluginCollection.php
+++ b/src/TagPluginCollection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode;
 
+use Drupal\xbbcode\Plugin\TagPluginInterface;
 use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\Markup;
@@ -30,7 +31,7 @@ class TagPluginCollection extends DefaultLazyPluginCollection implements PluginC
   /**
    * Create a plugin collection directly from an array of tag plugins.
    *
-   * @param \Drupal\xbbcode\Plugin\TagPluginInterface[] $tags
+   * @param TagPluginInterface[] $tags
    *   The tag plugins.
    *
    * @return static
@@ -124,7 +125,7 @@ class TagPluginCollection extends DefaultLazyPluginCollection implements PluginC
     ];
 
     foreach ($this as $name => $tag) {
-      /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $tag */
+      /** @var TagPluginInterface $tag */
       $parser = new XBBCodeParser(static::createFromTags([$name => $tag]));
       $tree = $parser->parse($tag->getSample());
       $sample = $tree->render();
diff --git a/src/TagPluginManager.php b/src/TagPluginManager.php
index 660b85c..2b45d33 100644
--- a/src/TagPluginManager.php
+++ b/src/TagPluginManager.php
@@ -30,7 +30,7 @@ class TagPluginManager extends DefaultPluginManager implements FallbackPluginMan
   /**
    * The default collection.
    *
-   * @var \Drupal\xbbcode\TagPluginCollection
+   * @var TagPluginCollection
    */
   protected $defaultCollection;
 
@@ -54,9 +54,9 @@ class TagPluginManager extends DefaultPluginManager implements FallbackPluginMan
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -107,7 +107,7 @@ class TagPluginManager extends DefaultPluginManager implements FallbackPluginMan
    *
    * If multiple plugins use the same default name, the last one will be used.
    *
-   * @return \Drupal\xbbcode\TagPluginCollection
+   * @return TagPluginCollection
    *   The plugin collection.
    */
   public function getDefaultCollection(): TagPluginCollection {
@@ -133,7 +133,7 @@ class TagPluginManager extends DefaultPluginManager implements FallbackPluginMan
       $this->defaultNameCollisions = [];
 
       foreach ($this->getDefinedIds() as $plugin_id) {
-        /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $plugin */
+        /** @var TagPluginInterface $plugin */
         try {
           $plugin = $this->createInstance($plugin_id);
           $name = $plugin->getName();
diff --git a/src/TagSetListBuilder.php b/src/TagSetListBuilder.php
index 2760c10..06fe5f8 100644
--- a/src/TagSetListBuilder.php
+++ b/src/TagSetListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\xbbcode;
 
+use Drupal\xbbcode\Entity\TagSetInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -24,7 +25,7 @@ class TagSetListBuilder extends EntityListBuilder {
    */
   public function buildRow(EntityInterface $entity): array {
     $row['label'] = $entity->label();
-    /** @var \Drupal\xbbcode\Entity\TagSetInterface $entity */
+    /** @var TagSetInterface $entity */
     $row['tags']['data'] = $entity->getPluginCollection()->getSummary();
     return $row + parent::buildRow($entity);
   }
diff --git a/standard/src/Plugin/XBBCode/ListTagPlugin.php b/standard/src/Plugin/XBBCode/ListTagPlugin.php
index 3caadf6..2b8b195 100644
--- a/standard/src/Plugin/XBBCode/ListTagPlugin.php
+++ b/standard/src/Plugin/XBBCode/ListTagPlugin.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\xbbcode_standard\Plugin\XBBCode;
 
+use Drupal\xbbcode\Parser\Tree\ElementInterface;
+use Drupal\xbbcode\Parser\Tree\NodeElementInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Render\Markup;
 use Drupal\xbbcode\Parser\Tree\TagElementInterface;
@@ -130,10 +132,10 @@ class ListTagPlugin extends RenderTagPlugin {
    *
    * Any instance of [*] in the top-level text will be used as a delimiter.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\ElementInterface[] $children
+   * @param ElementInterface[] $children
    *   The tag's child elements in the parse tree.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface[]
+   * @return NodeElementInterface[]
    *   A sequence of nodes, each containing a part of the parse tree.
    */
   protected static function splitContent(array $children): array {
diff --git a/standard/src/Plugin/XBBCode/TableTagPlugin.php b/standard/src/Plugin/XBBCode/TableTagPlugin.php
index 81d5c79..5c4b8d2 100644
--- a/standard/src/Plugin/XBBCode/TableTagPlugin.php
+++ b/standard/src/Plugin/XBBCode/TableTagPlugin.php
@@ -104,7 +104,7 @@ One,Two,Three,"Four, Five"
    * @param array $children
    *   The parse tree under the table tag.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\TagElementInterface[][]
+   * @return TagElementInterface[][]
    *   Array of rows, each row an array of cells, each cell a node element.
    */
   private static function tabulateTree(array $children): array {
diff --git a/standard/src/TreeEncodeTrait.php b/standard/src/TreeEncodeTrait.php
index 3db7c91..31bddf1 100644
--- a/standard/src/TreeEncodeTrait.php
+++ b/standard/src/TreeEncodeTrait.php
@@ -70,7 +70,7 @@ trait TreeEncodeTrait {
    * @param string $token
    *   The token used as a placeholder.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\TagElement
+   * @return TagElement
    *   A pseudo-tag element (empty name) containing the part of the tree
    *   represented by $cell.
    */
diff --git a/standard/tests/src/Kernel/XBBCodeStandardTest.php b/standard/tests/src/Kernel/XBBCodeStandardTest.php
index 5437cc7..fa00fa5 100644
--- a/standard/tests/src/Kernel/XBBCodeStandardTest.php
+++ b/standard/tests/src/Kernel/XBBCodeStandardTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\xbbcode_standard\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\Html;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\KernelTests\KernelTestBase;
@@ -27,7 +28,7 @@ class XBBCodeStandardTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
diff --git a/tests/src/Functional/XBBCodeAdminTest.php b/tests/src/Functional/XBBCodeAdminTest.php
index f9d37d4..d011c04 100644
--- a/tests/src/Functional/XBBCodeAdminTest.php
+++ b/tests/src/Functional/XBBCodeAdminTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\xbbcode\Functional;
 
+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Tests\BrowserTestBase;
 
@@ -33,14 +37,14 @@ class XBBCodeAdminTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * User who can create pages.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $webUser;
 
@@ -54,8 +58,8 @@ class XBBCodeAdminTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -88,7 +92,7 @@ class XBBCodeAdminTest extends BrowserTestBase {
    * @return array
    *   Information about the created tag.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   private function createCustomTag(bool $save = TRUE): array {
     $name = mb_strtolower($this->randomMachineName());
@@ -113,7 +117,7 @@ class XBBCodeAdminTest extends BrowserTestBase {
   /**
    * Test the custom tag page.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testCustomTags(): void {
     $this->drupalGet('admin/config/content/xbbcode/tags');
@@ -146,23 +150,19 @@ EOD;
     $this->assertSession()->fieldValueEquals('template_code', rtrim($template));
 
     // The read-only form has no save button.
-    $fields = $this->xpath($this->assertSession()->buildXPathQuery(
-      '//input[@name=:name][@value=:value]', [
-        ':name' => 'op',
-        ':value' => 'Save',
-      ]
-    ));
+    $fields = $this->xpath($this->assertSession()->buildXPathQuery('//input[@name=:name][@value=:value]', [
+      ':name' => 'op',
+      ':value' => 'Save',
+    ]));
     static::assertEmpty($fields);
 
     $this->clickLink('Copy');
     $this->assertSession()->addressEquals('admin/config/content/xbbcode/tags/manage/test_tag_external/copy');
     $this->assertSession()->fieldValueEquals('label', 'Test External Template 2');
-    static::assertNotEmpty($this->xpath($this->assertSession()->buildXPathQuery(
-      '//input[@name=:name][@value=:value]', [
-        ':name' => 'op',
-        ':value' => 'Save',
-      ]
-    )));
+    static::assertNotEmpty($this->xpath($this->assertSession()->buildXPathQuery('//input[@name=:name][@value=:value]', [
+      ':name' => 'op',
+      ':value' => 'Save',
+    ])));
     // No copy button on a new tag.
     $this->assertSession()->linkNotExists('Copy');
 
@@ -238,8 +238,8 @@ EOD;
   /**
    * Test the global default plugins.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ResponseTextException
+   * @throws ExpectationException
    */
   public function testGlobalPlugins(): void {
     // By default, we have the tags from the test module.
@@ -267,8 +267,8 @@ EOD;
   /**
    * Create and edit a tag set.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ResponseTextException
+   * @throws ExpectationException
    */
   public function testTagSet(): void {
     $tag = $this->createCustomTag();
diff --git a/tests/src/Kernel/XBBCodeDefaultConfigTest.php b/tests/src/Kernel/XBBCodeDefaultConfigTest.php
index cc8ebdf..4aa06bb 100644
--- a/tests/src/Kernel/XBBCodeDefaultConfigTest.php
+++ b/tests/src/Kernel/XBBCodeDefaultConfigTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\xbbcode\Kernel;
 
+use Drupal\filter\FilterFormatInterface;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\RoleInterface;
@@ -32,7 +33,7 @@ class XBBCodeDefaultConfigTest extends KernelTestBase {
    */
   public function testInstallation(): void {
     // Verify that the format was installed correctly.
-    /** @var \Drupal\filter\FilterFormatInterface $format */
+    /** @var FilterFormatInterface $format */
     $format = FilterFormat::load('xbbcode');
 
     // Use part of the FilterDefaultConfigTest, but only those parts not
diff --git a/tests/src/Kernel/XBBCodeFilterTest.php b/tests/src/Kernel/XBBCodeFilterTest.php
index aece039..43e9845 100644
--- a/tests/src/Kernel/XBBCodeFilterTest.php
+++ b/tests/src/Kernel/XBBCodeFilterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\xbbcode\Kernel;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\KernelTests\KernelTestBase;
@@ -29,7 +30,7 @@ class XBBCodeFilterTest extends KernelTestBase {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private $renderer;
 
diff --git a/xbbcode.install b/xbbcode.install
index 35a4ed2..df61908 100644
--- a/xbbcode.install
+++ b/xbbcode.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\filter\FilterFormatInterface;
 /**
  * @file
  * Update functions for the xbbcode module.
@@ -10,14 +11,14 @@ use Drupal\Core\Utility\UpdateException;
 /**
  * Add an "xss" key to the filter settings.
  *
- * @throws \Drupal\Core\Utility\UpdateException
+ * @throws UpdateException
  *   If the update fails.
  */
 function xbbcode_update_8300() {
   try {
     $storage = Drupal::entityTypeManager()->getStorage('filter_format');
 
-    /** @var \Drupal\filter\FilterFormatInterface[] $formats */
+    /** @var FilterFormatInterface[] $formats */
     $formats = $storage->loadByProperties(['status' => TRUE]);
     foreach ($formats as $format) {
       $filters = $format->filters();
