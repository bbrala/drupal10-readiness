diff --git a/extra_field.module b/extra_field.module
index d0140d7..fff47eb 100644
--- a/extra_field.module
+++ b/extra_field.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Hook implementations for Extra Field module.
@@ -21,6 +22,6 @@ function extra_field_entity_extra_field_info() {
  */
 function extra_field_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
 
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   \Drupal::service('plugin.manager.extra_field_display')->entityView($build, $entity, $display, $view_mode);
 }
diff --git a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php
index fd10793..178ed75 100644
--- a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php
+++ b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleMultilingualField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field_example\Plugin\ExtraField\Display;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\extra_field\Plugin\ExtraFieldDisplayFormattedBase;
@@ -33,7 +34,7 @@ class ExampleMultilingualField extends ExtraFieldDisplayFormattedBase {
       // Build the field output as a concatenated string of tags.
       $tags = [];
       foreach ($tagsField as $item) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $tag */
+        /** @var ContentEntityInterface $tag */
         $tag = $item->entity;
         $tags[] = $tag->label();
         $cache->addCacheableDependency($tag);
@@ -97,7 +98,7 @@ class ExampleMultilingualField extends ExtraFieldDisplayFormattedBase {
   /**
    * Returns the Tags field this plugin uses.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The taxonomy terms this field references.
    */
   protected function getTagsField() {
diff --git a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php
index f7331c5..3ca43f3 100644
--- a/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php
+++ b/modules/extra_field_example/src/Plugin/ExtraField/Display/ExampleWithDependencyInjection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field_example\Plugin\ExtraField\Display;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -27,7 +28,7 @@ class ExampleWithDependencyInjection extends ExtraFieldDisplayBase implements Co
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
@@ -40,7 +41,7 @@ class ExampleWithDependencyInjection extends ExtraFieldDisplayBase implements Co
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack) {
diff --git a/src/Annotation/ExtraFieldDisplay.php b/src/Annotation/ExtraFieldDisplay.php
index bd1b8de..ca89685 100644
--- a/src/Annotation/ExtraFieldDisplay.php
+++ b/src/Annotation/ExtraFieldDisplay.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class ExtraFieldDisplay extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Plugin/ExtraFieldDisplayBase.php b/src/Plugin/ExtraFieldDisplayBase.php
index 57cfd9f..9a193a8 100644
--- a/src/Plugin/ExtraFieldDisplayBase.php
+++ b/src/Plugin/ExtraFieldDisplayBase.php
@@ -14,7 +14,7 @@ abstract class ExtraFieldDisplayBase extends PluginBase implements ExtraFieldDis
   /**
    * The field's parent entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -30,7 +30,7 @@ abstract class ExtraFieldDisplayBase extends PluginBase implements ExtraFieldDis
    *
    * Contains the display options configured for the entity components.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $entityViewDisplay;
 
diff --git a/src/Plugin/ExtraFieldDisplayFormattedBase.php b/src/Plugin/ExtraFieldDisplayFormattedBase.php
index de89646..5c27f23 100644
--- a/src/Plugin/ExtraFieldDisplayFormattedBase.php
+++ b/src/Plugin/ExtraFieldDisplayFormattedBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Plugin;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Render\Element;
@@ -35,7 +36,7 @@ abstract class ExtraFieldDisplayFormattedBase extends ExtraFieldDisplayBase impl
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
diff --git a/src/Plugin/ExtraFieldDisplayFormattedInterface.php b/src/Plugin/ExtraFieldDisplayFormattedInterface.php
index 870a50b..aeab28c 100644
--- a/src/Plugin/ExtraFieldDisplayFormattedInterface.php
+++ b/src/Plugin/ExtraFieldDisplayFormattedInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\extra_field\Plugin;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -12,7 +13,7 @@ interface ExtraFieldDisplayFormattedInterface extends ExtraFieldDisplayInterface
   /**
    * Returns the renderable array of the field item(s).
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The field's host entity.
    *
    * @return array
@@ -27,7 +28,7 @@ interface ExtraFieldDisplayFormattedInterface extends ExtraFieldDisplayInterface
    *
    * If applicable, the code has to take care of the translatability.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The field label.
    */
   public function getLabel();
diff --git a/src/Plugin/ExtraFieldDisplayInterface.php b/src/Plugin/ExtraFieldDisplayInterface.php
index 53b544e..b83de16 100644
--- a/src/Plugin/ExtraFieldDisplayInterface.php
+++ b/src/Plugin/ExtraFieldDisplayInterface.php
@@ -14,7 +14,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Builds a renderable array for the field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The field's host entity.
    *
    * @return array
@@ -25,7 +25,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Stores the field's parent entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that hosts the field.
    */
   public function setEntity(ContentEntityInterface $entity);
@@ -33,7 +33,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Returns the field's parent entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity that hosts the field.
    */
   public function getEntity();
@@ -41,7 +41,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Stores the entity view display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display holding the display options configured for the
    *   entity components. As provided by hook_entity_view()
    */
@@ -50,7 +50,7 @@ interface ExtraFieldDisplayInterface extends PluginInspectionInterface {
   /**
    * Returns the entity view display object of the field's host entity.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @return EntityViewDisplayInterface
    *   The entity view display object.
    */
   public function getEntityViewDisplay();
diff --git a/src/Plugin/ExtraFieldDisplayManager.php b/src/Plugin/ExtraFieldDisplayManager.php
index c8920ab..dc09d26 100644
--- a/src/Plugin/ExtraFieldDisplayManager.php
+++ b/src/Plugin/ExtraFieldDisplayManager.php
@@ -26,7 +26,7 @@ class ExtraFieldDisplayManager extends DefaultPluginManager implements ExtraFiel
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -36,11 +36,11 @@ class ExtraFieldDisplayManager extends DefaultPluginManager implements ExtraFiel
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/ExtraFieldDisplayManagerInterface.php b/src/Plugin/ExtraFieldDisplayManagerInterface.php
index 37e6cb3..526aaa1 100644
--- a/src/Plugin/ExtraFieldDisplayManagerInterface.php
+++ b/src/Plugin/ExtraFieldDisplayManagerInterface.php
@@ -28,9 +28,9 @@ interface ExtraFieldDisplayManagerInterface {
    *   A renderable array representing the entity content. The module may add
    *   elements to $build prior to rendering. The structure of $build is a
    *   renderable array as expected by drupal_render().
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display holding the display options configured for the
    *   entity components.
    * @param string $viewMode
diff --git a/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php b/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php
index 9af646a..8512e0d 100644
--- a/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php
+++ b/tests/extra_field_test/src/Plugin/ExtraField/Display/MultipleItemsFieldWithCacheDependencyTest.php
@@ -29,14 +29,14 @@ class MultipleItemsFieldWithCacheDependencyTest extends ExtraFieldDisplayFormatt
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -49,9 +49,9 @@ class MultipleItemsFieldWithCacheDependencyTest extends ExtraFieldDisplayFormatt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
diff --git a/tests/src/Functional/ExtraFieldBrowserTestBase.php b/tests/src/Functional/ExtraFieldBrowserTestBase.php
index 6cd69e9..c849b20 100644
--- a/tests/src/Functional/ExtraFieldBrowserTestBase.php
+++ b/tests/src/Functional/ExtraFieldBrowserTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Tests\BrowserTestBase;
@@ -50,13 +51,13 @@ abstract class ExtraFieldBrowserTestBase extends BrowserTestBase {
    * @param string $contentType
    *   Content type of the node.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The new node.
    */
   public function createContent($contentType) {
 
     $this->createContentType(['type' => $contentType]);
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $node */
+    /** @var ContentEntityInterface $node */
     $node = \Drupal::entityTypeManager()->getStorage('node')->create([
       'type' => $contentType,
       'title' => $this->randomMachineName(),
diff --git a/tests/src/Functional/ExtraFieldDisplayFieldTest.php b/tests/src/Functional/ExtraFieldDisplayFieldTest.php
index add0996..fc9c44a 100644
--- a/tests/src/Functional/ExtraFieldDisplayFieldTest.php
+++ b/tests/src/Functional/ExtraFieldDisplayFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\node\Entity\Node;
 /**
  * Tests the extra_field Display with field wrapper.
  *
@@ -20,21 +21,21 @@ class ExtraFieldDisplayFieldTest extends ExtraFieldBrowserTestBase {
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $firstNode;
 
   /**
    * A second node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $secondNode;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->firstNode = $this->createContent('first_node_type');
@@ -62,7 +63,7 @@ class ExtraFieldDisplayFieldTest extends ExtraFieldBrowserTestBase {
     // Test the output of field with cacheable dependency.
     $this->assertSession()->pageTextContains('Related pages');
     $this->assertSession()->pageTextContains($this->secondNode->label());
-    $this->assertCacheTag('node:' . $this->secondNode->id());
+    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'node:' . $this->secondNode->id());
 
     // Test the output of the empty field.
     $this->assertSession()->pageTextNotContains('Empty field');
diff --git a/tests/src/Functional/ExtraFieldDisplayUITest.php b/tests/src/Functional/ExtraFieldDisplayUITest.php
index bd0cb5f..1d5d642 100644
--- a/tests/src/Functional/ExtraFieldDisplayUITest.php
+++ b/tests/src/Functional/ExtraFieldDisplayUITest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * Tests the extra field Display on entity UI pages.
  *
@@ -21,7 +22,7 @@ class ExtraFieldDisplayUITest extends ExtraFieldBrowserTestBase {
   /**
    * Entity display for each content type.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[]
+   * @var EntityViewDisplayInterface[]
    */
   protected $entityDisplay;
 
@@ -35,7 +36,7 @@ class ExtraFieldDisplayUITest extends ExtraFieldBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
     $adminUser = $this->drupalCreateUser(['administer node display']);
diff --git a/tests/src/Functional/ExtraFieldDisplayViewTest.php b/tests/src/Functional/ExtraFieldDisplayViewTest.php
index 1a8f1fd..baffc35 100644
--- a/tests/src/Functional/ExtraFieldDisplayViewTest.php
+++ b/tests/src/Functional/ExtraFieldDisplayViewTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\extra_field\Functional;
 
+use Drupal\node\Entity\Node;
 /**
  * Tests the view of extra field Displays.
  *
@@ -20,14 +21,14 @@ class ExtraFieldDisplayViewTest extends ExtraFieldBrowserTestBase {
   /**
    * A node that contains the extra fields.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $content;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->content = $this->createContent('first_node_type');
diff --git a/tests/src/Kernel/ExtraFieldDisplayManagerTest.php b/tests/src/Kernel/ExtraFieldDisplayManagerTest.php
index 078a2d0..7dd0958 100644
--- a/tests/src/Kernel/ExtraFieldDisplayManagerTest.php
+++ b/tests/src/Kernel/ExtraFieldDisplayManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\extra_field\Kernel;
 
+use Drupal\extra_field\Plugin\ExtraFieldDisplayManager;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -21,14 +23,14 @@ class ExtraFieldDisplayManagerTest extends KernelTestBase {
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var ExtraFieldDisplayManager|MockObject
    */
   protected $displayManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
 
     parent::setUp();
 
