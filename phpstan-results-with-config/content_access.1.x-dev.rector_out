modules/contrib/content_access/content_access.install
modules/contrib/content_access/content_access.module
modules/contrib/content_access/src/Access/ContentAccessAdminSettingsAccessCheck.php
modules/contrib/content_access/src/Access/ContentAccessNodePageAccessCheck.php
modules/contrib/content_access/src/ContentAccessInterface.php
modules/contrib/content_access/src/Controller/ContentAccessController.php
modules/contrib/content_access/src/Form/ContentAccessAdminSettingsForm.php
modules/contrib/content_access/src/Form/ContentAccessPageForm.php
modules/contrib/content_access/src/Form/ContentAccessRoleBasedFormTrait.php
modules/contrib/content_access/src/Plugin/RulesAction/ActionCommonTrait.php
modules/contrib/content_access/src/Plugin/RulesAction/ActionGrantNodePermissions.php
modules/contrib/content_access/src/Plugin/RulesAction/ActionResetNodePermissions.php
modules/contrib/content_access/src/Plugin/RulesAction/ActionRevokeNodePermissions.php
modules/contrib/content_access/src/Plugin/RulesAction/ActionUserGrant.php
modules/contrib/content_access/src/Plugin/RulesAction/ActionUserRevoke.php
modules/contrib/content_access/src/Plugin/RulesAction/ContentAccessUserRulesActionBase.php
modules/contrib/content_access/tests/src/Functional/ContentAccessAclTest.php
modules/contrib/content_access/tests/src/Functional/ContentAccessModuleTest.php
modules/contrib/content_access/tests/src/Functional/ContentAccessTestHelperTrait.php
modules/contrib/content_access/tests/src/Functional/ContentAccessTinyTest.php

8 files with changes
====================

1) modules/contrib/content_access/tests/src/Functional/ContentAccessTinyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\content_access\Functional;

+use Drupal\user\Entity\User;
+use Drupal\node\Entity\NodeType;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to non administer.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $testUser;

@@ @@
   /**
    * A user with permission to administer.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * Content type for test.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $contentType;

@@ @@
   /**
    * Node object to perform test.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node1;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     if (!\Drupal::moduleHandler()->moduleExists('acl')) {
-      $this->pass('No ACL module present, skipping test');
       return;
     }

@@ @@
   public function testViewAccess() {
     // Exit test if ACL module could not be enabled.
     if (!\Drupal::moduleHandler()->moduleExists('acl')) {
-      $this->pass('No ACL module present, skipping test');
       return;
     }
    ----------- end diff -----------

Applied rules:
 * PassRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/content_access/tests/src/Functional/ContentAccessModuleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\content_access\Functional;

+use Drupal\user\Entity\User;
+use Drupal\node\Entity\NodeType;
+use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user with permission to non administer.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $testUser;

@@ @@
   /**
    * A user with permission to administer.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * Content type for test.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $contentType;

@@ @@
   /**
    * Node object to perform test.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node1;

@@ @@
   /**
    * Node object to perform test.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create test user with separate role.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/content_access/tests/src/Functional/ContentAccessAclTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\content_access\Functional;

+use Drupal\user\Entity\User;
+use Drupal\node\Entity\NodeType;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to non administer.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $testUser;

@@ @@
   /**
    * A user with permission to administer.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * Content type for test.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $contentType;

@@ @@
   /**
    * Node object to perform test.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node1;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     if (!\Drupal::moduleHandler()->moduleExists('acl')) {
-      $this->pass('No ACL module present, skipping test');
       return;
     }

@@ @@
   public function testViewAccess() {
     // Exit test if ACL module could not be enabled.
     if (!\Drupal::moduleHandler()->moduleExists('acl')) {
-      $this->pass('No ACL module present, skipping test');
       return;
     }

@@ @@
   public function testEditAccess() {
     // Exit test if ACL module could not be enabled.
     if (!\Drupal::moduleHandler()->moduleExists('acl')) {
-      $this->pass('No ACL module present, skipping test');
       return;
     }

@@ @@
   public function testDeleteAccess() {
     // Exit test if ACL module could not be enabled.
     if (!\Drupal::moduleHandler()->moduleExists('acl')) {
-      $this->pass('No ACL module present, skipping test');
       return;
     }
    ----------- end diff -----------

Applied rules:
 * PassRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/content_access/src/Form/ContentAccessPageForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *   The entity type manager.
    */
   protected $entityTypeManager;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The node grant storage.
    *
-   * @var \Drupal\node\NodeGrantDatabaseStorageInterface
+   * @var NodeGrantDatabaseStorageInterface
    */
   protected $grantStorage;

@@ @@
   /**
    * ContentAccessPageForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\node\NodeGrantDatabaseStorageInterface $grant_storage
+   * @param NodeGrantDatabaseStorageInterface $grant_storage
    *   The node grant storage.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, NodeGrantDatabaseStorageInterface $grant_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/content_access/src/Form/ContentAccessAdminSettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new ContentAccessAdminSettingsForm.
    *
-   * @param \Drupal\user\PermissionHandlerInterface $permission_handler
+   * @param PermissionHandlerInterface $permission_handler
    *   The permission handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(PermissionHandlerInterface $permission_handler, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/content_access/src/Controller/ContentAccessController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a ContentAccessController object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/content_access/src/Access/ContentAccessAdminSettingsAccessCheck.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a ContentAccessAdminSettingsAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/content_access/content_access.module:428

    ---------- begin diff ----------
@@ @@
  *
  * @param string $op
  *   One of the supported operations.
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node object.
  */
 function content_access_get_rids_per_node_op($op, NodeInterface $node) {
@@ @@
  *
  * @param string $op
  *   One of the supported operations.
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node object.
  * @param array $settings
  *   Optional array used to update the settings cache with the given settings.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/content_access/src/Plugin/RulesAction/ContentAccessUserR
         ulesActionBase.php" file, due to:                                      
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/content_access/src/Plugin/RulesAction/ActionUserRevoke.p
         hp" file, due to:                                                      
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/content_access/src/Plugin/RulesAction/ActionUserGrant.ph
         p" file, due to:                                                       
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/content_access/src/Plugin/RulesAction/ActionRevokeNodePe
         rmissions.php" file, due to:                                           
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/content_access/src/Plugin/RulesAction/ActionResetNodePer
         missions.php" file, due to:                                            
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/content_access/src/Plugin/RulesAction/ActionGrantNodePer
         missions.php" file, due to:                                            
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

