modules/contrib/collection/collection.install
modules/contrib/collection/collection.module
modules/contrib/collection/collection.page.inc
modules/contrib/collection/collection.post_update.php
modules/contrib/collection/collection.views.inc
modules/contrib/collection/modules/collection_listings/src/Plugin/paragraphs/Behavior/ParagraphsCollectionListing.php
modules/contrib/collection/modules/collection_pathauto/collection_pathauto.api.php
modules/contrib/collection/modules/collection_pathauto/collection_pathauto.module
modules/contrib/collection/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php
modules/contrib/collection/src/Access/CollectionItemCollectionCheck.php
modules/contrib/collection/src/Access/CollectionItemsAccessCheck.php
modules/contrib/collection/src/Access/CollectionOwnerTrait.php
modules/contrib/collection/src/BulkFormEntityListBuilder.php
modules/contrib/collection/src/CollectionAccessControlHandler.php
modules/contrib/collection/src/CollectionContentEntityFormAlter.php
modules/contrib/collection/src/CollectionContentManager.php
modules/contrib/collection/src/CollectionItemListBuilder.php
modules/contrib/collection/src/CollectionItemRouteProvider.php
modules/contrib/collection/src/CollectionItemTypeListBuilder.php
modules/contrib/collection/src/CollectionListBuilder.php
modules/contrib/collection/src/CollectionPermissions.php
modules/contrib/collection/src/CollectionRouteProvider.php
modules/contrib/collection/src/CollectionTranslationHandler.php
modules/contrib/collection/src/CollectionTypeListBuilder.php
modules/contrib/collection/src/ContentEntityCollectionListBuilder.php
modules/contrib/collection/src/ContextProvider/CollectionRouteContext.php
modules/contrib/collection/src/Controller/CollectionItemController.php
modules/contrib/collection/src/Controller/ContentEntityCollectionsController.php
modules/contrib/collection/src/Entity/Collection.php
modules/contrib/collection/src/Entity/CollectionInterface.php
modules/contrib/collection/src/Entity/CollectionItem.php
modules/contrib/collection/src/Entity/CollectionItemInterface.php
modules/contrib/collection/src/Entity/CollectionItemType.php
modules/contrib/collection/src/Entity/CollectionItemTypeInterface.php
modules/contrib/collection/src/Entity/CollectionType.php
modules/contrib/collection/src/Entity/CollectionTypeInterface.php
modules/contrib/collection/src/Entity/CollectionViewsData.php
modules/contrib/collection/src/Entity/Handler/CollectionModerationHandler.php
modules/contrib/collection/src/Event/CollectionCreateEvent.php
modules/contrib/collection/src/Event/CollectionEvents.php
modules/contrib/collection/src/Event/CollectionItemCreateEvent.php
modules/contrib/collection/src/Event/CollectionItemDeleteEvent.php
modules/contrib/collection/src/Event/CollectionItemFormSaveEvent.php
modules/contrib/collection/src/Event/CollectionItemUpdateEvent.php
modules/contrib/collection/src/Event/CollectionUpdateEvent.php
modules/contrib/collection/src/Form/CollectionDeleteForm.php
modules/contrib/collection/src/Form/CollectionForm.php
modules/contrib/collection/src/Form/CollectionItemDeleteForm.php
modules/contrib/collection/src/Form/CollectionItemDeleteMultipleForm.php
modules/contrib/collection/src/Form/CollectionItemForm.php
modules/contrib/collection/src/Form/CollectionItemTypeDeleteForm.php
modules/contrib/collection/src/Form/CollectionItemTypeForm.php
modules/contrib/collection/src/Form/CollectionNewNodeForm.php
modules/contrib/collection/src/Form/CollectionTypeDeleteForm.php
modules/contrib/collection/src/Form/CollectionTypeForm.php
modules/contrib/collection/src/Plugin/Block/UserCollectionsBlock.php
modules/contrib/collection/src/Plugin/Derivative/CollectionLocalTasks.php
modules/contrib/collection/src/Plugin/Derivative/DynamicLocalActions.php
modules/contrib/collection/src/Plugin/Validation/Constraint/PreventSelf.php
modules/contrib/collection/src/Plugin/Validation/Constraint/PreventSelfValidator.php
modules/contrib/collection/src/Plugin/Validation/Constraint/SingleCanonicalItem.php
modules/contrib/collection/src/Plugin/Validation/Constraint/SingleCanonicalItemValidator.php
modules/contrib/collection/src/Plugin/Validation/Constraint/UniqueItem.php
modules/contrib/collection/src/Plugin/Validation/Constraint/UniqueItemValidator.php
modules/contrib/collection/src/Plugin/views/access/CollectionItemsAccess.php
modules/contrib/collection/src/Plugin/views/argument_default/Collection.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemEntityTypeLabel.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemLatestVersionLink.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemState.php
modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemStatus.php
modules/contrib/collection/src/Routing/CollectionDynamicRoutes.php
modules/contrib/collection/src/Routing/CollectionRouteSubscriber.php
modules/contrib/collection/tests/src/Functional/LoadTest.php

39 files with changes
=====================

1) modules/contrib/collection/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\collection\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/collection/src/Routing/CollectionDynamicRoutes.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new CollectionDynamicRoutes object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Plugin\views\field;

+use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The id of the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       return '';
     }

-    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
+    /** @var ModerationInformationInterface $moderation_info */
     $moderation_info = \Drupal::service('content_moderation.moderation_information');

     $collection_item = $this->getEntity($row);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/collection/src/Plugin/views/field/CollectionItemCollectedItemLatestVersionLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Plugin\views\field;

+use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\views\Plugin\views\field\LinkBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\ResultRow;
@@ @@
       return $entity->toUrl();
     }

-    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
+    /** @var ModerationInformationInterface $moderation_info */
     $moderation_info = \Drupal::service('content_moderation.moderation_information');

     $template = $moderation_info->hasPendingRevision($entity) ? 'latest-version' : 'canonical';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/collection/src/Plugin/views/argument_default/Collection.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/collection/src/Plugin/Validation/Constraint/UniqueItemValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Plugin\Validation\Constraint;

+use Drupal\collection\Entity\CollectionItemInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;

@@ @@
    * {@inheritdoc}
    */
   public function validate($collection_item, Constraint $constraint) {
-    /** @var Drupal\collection\Entity\CollectionItemInterface $collection_item */
+    /** @var CollectionItemInterface $collection_item */
     $collection = $collection_item->collection->entity;

-    /** @var Drupal\Core\Entity\EntityInterface $item_entity */
+    /** @var EntityInterface $item_entity */
     $item_entity = $collection_item->item->entity;

     if ($collection_item->isNew() && $collection->getItem($item_entity)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/collection/src/Plugin/Validation/Constraint/SingleCanonicalItemValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Core\Entity\EntityInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
 class SingleCanonicalItemValidator extends ConstraintValidator implements ContainerInjectionInterface {

   /**
-   * @var Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $collectionItemStorage;

@@ @@
       return;
     }

-    /** @var Drupal\Core\Entity\EntityInterface $item_entity */
+    /** @var EntityInterface $item_entity */
     $item_entity = $collection_item->item->entity;

     $canonical_collection_item_query = $this->collectionItemStorage->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/collection/src/Plugin/Derivative/DynamicLocalActions.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The route_provider service.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;

@@ @@
   /**
    * Constructs a new DynamicLocalActions.
    *
-   * @param Drupal\Core\Routing\RouteProvider $route_provider
+   * @param RouteProvider $route_provider
    *   The route_provider service.
    */
   public function __construct($route_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/collection/src/Plugin/Derivative/CollectionLocalTasks.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The route_provider service.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new CollectionLocalTasks.
    *
-   * @param Drupal\Core\Routing\RouteProvider $route_provider
+   * @param RouteProvider $route_provider
    *   The route_provider service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(RouteProvider $route_provider, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/collection/src/Plugin/Block/UserCollectionsBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Plugin\Block;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityManagerInterface definition.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $route_match;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/collection/src/Form/CollectionTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Form;

+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\collection\Entity\CollectionTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type bundle info manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $setEntityTypeBundleInfoManager;

@@ @@
    * {@inheritdoc}
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\collection\Entity\CollectionTypeInterface $entity */
+    /** @var CollectionTypeInterface $entity */
     $values = $form_state->getValues();
     $entity->set('label', $values['label']);
     $entity->set('id', $values['id']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/collection/src/Form/CollectionNewNodeForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new CollectionNewNodeForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@

       // Dispatch the CollectionItemFormSaveEvent.
       $event = new CollectionItemFormSaveEvent($collection_item, SAVED_NEW);
-      $this->eventDispatcher->dispatch(CollectionEvents::COLLECTION_ITEM_FORM_SAVE, $event);
+      $this->eventDispatcher->dispatch($event, CollectionEvents::COLLECTION_ITEM_FORM_SAVE);
     }
   }

@@ @@
   /**
    * Provides an add title callback for add node to collection form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/collection/src/Form/CollectionItemTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Form;

+use Drupal\collection\Entity\CollectionItemTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
    * {@inheritdoc}
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\collection\Entity\CollectionItemTypeInterface $entity */
+    /** @var CollectionItemTypeInterface $entity */
     $values = $form_state->getValues();
     $entity->set('label', $values['label']);
     $entity->set('id', $values['id']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/collection/src/Form/CollectionItemForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new CollectionItemForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface;
    *   The symfony event dispatcher.
@@ @@
     }

     $event = new CollectionItemFormSaveEvent($entity, $status);
-    $this->eventDispatcher->dispatch(CollectionEvents::COLLECTION_ITEM_FORM_SAVE, $event);
+    $this->eventDispatcher->dispatch($event, CollectionEvents::COLLECTION_ITEM_FORM_SAVE);

     $form_state->setRedirect('entity.collection_item.collection', ['collection' => $entity->collection->target_id]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/collection/src/Form/CollectionForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * Constructs a new CollectionForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, AccountProxyInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/collection/src/Event/CollectionUpdateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionInterface;

 /**
@@ @@
   /**
    * The collection.
    *
-   * @var \Drupal\collection\Entity\CollectionInterface
+   * @var CollectionInterface
    */
   public $collection;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\collection\Entity\CollectionInterface $collection
+   * @param CollectionInterface $collection
    *   The collection being created.
    */
   public function __construct(CollectionInterface $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/collection/src/Event/CollectionItemUpdateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
@@ @@
   /**
    * The collection item.
    *
-   * @var \Drupal\collection\Entity\CollectionItemInterface
+   * @var CollectionItemInterface
    */
   public $collectionItem;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\collection\Entity\CollectionItemInterface $collection_item
+   * @param CollectionItemInterface $collection_item
    *   The collection_item being updated.
    */
   public function __construct(CollectionItemInterface $collection_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/collection/src/Event/CollectionItemFormSaveEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
@@ @@
   /**
    * The collection item being created.
    *
-   * @var \Drupal\collection\Entity\CollectionItemInterface
+   * @var CollectionItemInterface
    */
   public $collectionItem;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\collection\Entity\CollectionItemInterface $collection_item
+   * @param CollectionItemInterface $collection_item
    *   The collection item being inserted or updated.
    *
    * @param string $operation
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/collection/src/Event/CollectionItemDeleteEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
@@ @@
   /**
    * The collection item.
    *
-   * @var \Drupal\collection\Entity\CollectionItemInterface
+   * @var CollectionItemInterface
    */
   public $collectionItem;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\collection\Entity\CollectionItemInterface $collection_item
+   * @param CollectionItemInterface $collection_item
    *   The collection_item being deleted.
    */
   public function __construct(CollectionItemInterface $collection_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/collection/src/Event/CollectionItemCreateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionItemInterface;

 /**
@@ @@
   /**
    * The collection item.
    *
-   * @var \Drupal\collection\Entity\CollectionItemInterface
+   * @var CollectionItemInterface
    */
   public $collectionItem;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\collection\Entity\CollectionItemInterface $collection_item
+   * @param CollectionItemInterface $collection_item
    *   The collection_item being created.
    */
   public function __construct(CollectionItemInterface $collection_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/collection/src/Event/CollectionCreateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\collection\Entity\CollectionInterface;

 /**
@@ @@
   /**
    * The collection.
    *
-   * @var \Drupal\collection\Entity\CollectionInterface
+   * @var CollectionInterface
    */
   public $collection;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\collection\Entity\CollectionInterface $collection
+   * @param CollectionInterface $collection
    *   The collection being created.
    */
   public function __construct(CollectionInterface $collection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/collection/src/Entity/CollectionItemInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Entity;

+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\user\EntityOwnerInterface;
@@ @@
    * @param string $key
    *   The key of the attribute to return.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface|FALSE
+   * @return TypedDataInterface|FALSE
    *   The key-value attribute if it exists, FALSE if not.
    */
   public function getAttribute(string $key);
@@ @@
    * @param string $value
    *   The attribute value.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The new or updated attribute.
    */
   public function setAttribute(string $key, string $value);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/collection/src/Entity/CollectionInterface.php:75

    ---------- begin diff ----------
@@ @@
   /**
    * Get the collection item for a given entity in this collection.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   A content or config entity.
    *
-   * @return \Drupal\collection\Entity\CollectionItemInterface|FALSE
+   * @return CollectionItemInterface|FALSE
    *   A collection item if this collection has one for the entity or false if
    *   not.
    */
@@ @@
   /**
    * Add any entity as an item to this collection.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   A content or config entity.
    *
-   * @return \Drupal\collection\Entity\CollectionItemInterface|FALSE
+   * @return CollectionItemInterface|FALSE
    *   The collection item if it was created successfully.
    */
   public function addItem(EntityInterface $entity);
@@ @@
   /**
    * Remove an entity from this collection.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   A content or config entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/collection/src/Controller/ContentEntityCollectionsController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection\Controller;

+use Drupal\collection\ContentEntityCollectionListBuilder;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatchInterface;
 // use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * The collection content manager service.
    *
-   * @var \Drupal\collection\CollectionContentManager
+   * @var CollectionContentManager
    */
   protected $collectionContentManager;

@@ @@
   /**
    * Constructs a ContentEntityCollectionsController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\collection\CollectionContentManager $collection_content_manager
+   * @param CollectionContentManager $collection_content_manager
    *   The collection content manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, CollectionContentManager $collection_content_manager) {
@@ @@
     $entity = $request->get($entity_type);
     $collection_item_definition = $this->entityTypeManager->getDefinition('collection_item');
     $entity_collection_items = $this->collectionContentManager->getCollectionItemsForEntity($entity, 'view');
-    $list_builder = new \Drupal\collection\ContentEntityCollectionListBuilder($entity_collection_items, $collection_item_definition);
+    $list_builder = new ContentEntityCollectionListBuilder($entity_collection_items, $collection_item_definition);

     $build = [
       '#theme' => 'container__content_entity_collections',
@@ @@
   /**
    * Provides an add title callback for ...
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/collection/src/Controller/CollectionItemController.php:23

    ---------- begin diff ----------
@@ @@
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|array
+   * @return RedirectResponse|array
    *   If there's only one available bundle, a redirect response.
    *   Otherwise, a render array with the add links for each bundle.
    */
@@ @@
   /**
    * Provides a collection item list title callback.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ @@
   /**
    * Provides an add title callback for collection items with bundles.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    * @param string $entity_type_id
    *   The entity type ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/collection/src/ContextProvider/CollectionRouteContext.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a new collectionRouteContext.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    */
   public function __construct(RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/collection/src/ContentEntityCollectionListBuilder.php:19

    ---------- begin diff ----------
@@ @@
    *
    * @param array $collection_items
    *   An array of collection item entities.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    */
   public function __construct(array $collection_items, EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/collection/src/CollectionPermissions.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * CollectionPermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Returns a list of collection permissions for a given collection type.
    *
-   * @param \Drupal\collection\Entity\CollectionTypeInterface $type
+   * @param CollectionTypeInterface $type
    *   The collection type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/collection/src/CollectionListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection;

+use Drupal\collection\Entity\Collection;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The Moderation Information service, if available.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface|NULL
+   * @var ModerationInformationInterface|NULL
    */
   protected $moderationInfo;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\collection\Entity\Collection $entity */
+    /** @var Collection $entity */
     $row['name'] = $entity->toLink();
     $row['type'] = $entity->bundle();
     if ($this->moderationInfo && $workflow = $this->moderationInfo->getWorkflowForEntity($entity)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/collection/src/CollectionItemListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection;

+use Drupal\collection\Entity\CollectionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@

   /** The parent collection.
    *
-   * @var \Drupal\collection\Entity\CollectionInterface
+   * @var CollectionInterface
    */
   protected $collection;

@@ @@
   /**
    * Constructs a new CollectionItemListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $action_storage
+   * @param EntityStorageInterface $action_storage
    *   The action storage.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityStorageInterface $action_storage, FormBuilderInterface $form_builder, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/collection/src/CollectionContentManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   private $entityTypeManager;

@@ @@
   /**
    * CollectionContentManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManager $entity_type_manager) {
@@ @@
   /**
    * Get collection(s) to which this entity belongs.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string|boolean $access
    *   The access level to check, or false to return all items.
@@ @@
   /**
    * Get collection items which collect this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string|boolean $access
    *   The access level to check, or false to return all items.
@@ @@
    * collection type configuration. This is used, for example, by the
    * collection_request submodule.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string|boolean $access
    *   The access level to check, or false to return all items.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/collection/src/CollectionContentEntityFormAlter.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   private $entityTypeManager;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   private $account;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   private $moduleHandler;

@@ @@
   /**
    * CollectionContentEntityFormAlter constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
    */
   public function __construct(EntityTypeManager $entity_type_manager, AccountProxy $current_user, ModuleHandler $module_handler) {
@@ @@
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. The arguments that
    *   \Drupal::formBuilder()->getForm() was originally called with are
    *   available in the array $form_state->getBuildInfo()['args'].
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for this ContentEntityForm.
    */
   public function embedCollectionItems(array &$form, FormStateInterface $form_state, EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/collection/src/BulkFormEntityListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\system\Entity\Action;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entities being listed.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities = [];

@@ @@
    * @todo Change the typehint to ActionConfigEntityInterface when
    *   https://www.drupal.org/project/drupal/issues/3017214 is in.
    *
-   * @var \Drupal\system\Entity\Action[]
+   * @var Action[]
    */
   protected $actions;

@@ @@
   /**
    * The action storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $actionStorage;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Constructs a new BulkFormEntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $action_storage
+   * @param EntityStorageInterface $action_storage
    *   The action storage.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $entity_storage, EntityStorageInterface $action_storage, FormBuilderInterface $form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/collection/src/Access/CollectionOwnerTrait.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Determine if an account is the owner of a collection.
    *
-   * @param \Drupal\collection\Entity\CollectionInterface $collection
+   * @param CollectionInterface $collection
    *   The collection entity.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/collection/src/Access/CollectionItemsAccessCheck.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\collection\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * Collection item listing access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @param Drupal\Core\Routing\RouteMatch $route_match
+   * @param RouteMatch $route_match
    *   The current route match. This is used to find the collection for the
    *   route being checked. This means that this access check will only work
    *   for routes with a collection parameter.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, RouteMatch $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/collection/src/Access/CollectionItemCollectionCheck.php:0

    ---------- begin diff ----------
@@ @@
 <?php
 namespace Drupal\collection\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The access check.
    *
-   * @param Drupal\Core\Routing\RouteMatch $route_match
+   * @param RouteMatch $route_match
    *   The current route match.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatch $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/collection/modules/collection_pathauto/src/EventSubscriber/CollectionPathautoSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\collection_pathauto\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\pathauto\PathautoGeneratorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\collection\Event\CollectionEvents;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\pathauto\PathautoFieldItemList;

@@ @@
   /**
    * Process the COLLECTION_ITEM_ENTITY_CREATE, _UPDATE, and _DELETE events.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function collectionItemCrud(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/collection/collection.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 use Drupal\Core\Field\BaseFieldDefinition;

 /**
@@ @@
   $keys['langcode'] = 'langcode';
   $entity_type->set('entity_keys', $keys);

-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('collection_item');
   $field_storage_definitions['name']->setTranslatable(TRUE);
@@ @@
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   $entity_type = $definition_update_manager->getEntityType('collection');

-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('collection');
   $field_storage_definitions['name']->setTranslatable(TRUE);
@@ @@
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
   $entity_type = $definition_update_manager->getEntityType('collection');

-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('collection');
   $field_storage_definitions['user_id']->setTranslatable(FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


39) modules/contrib/collection/collection.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Contains collection.module.
@@ @@
  */
 function collection_entity_operation(EntityInterface $entity) {
   if ($entity->getEntityTypeId() == 'collection_item' && $entity->item->entity->access('update')) {
-    $item_entity_type = ($entity->item->entity instanceof \Drupal\Core\Entity\ContentEntityInterface) ? 'content' : 'configuration';
+    $item_entity_type = ($entity->item->entity instanceof ContentEntityInterface) ? 'content' : 'configuration';
     $operations = [];
     $operations['edit_item'] = [
       'title' => t('Edit @entity_type', ['@entity_type' => $item_entity_type]),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/collection/modules/collection_listings/src/Plugin/paragr
         aphs/Behavior/ParagraphsCollectionListing.php" file, due to:           
         "Analyze error: "Class Drupal\paragraphs\ParagraphsBehaviorBase not    
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 7 nodes were removed                                                 

