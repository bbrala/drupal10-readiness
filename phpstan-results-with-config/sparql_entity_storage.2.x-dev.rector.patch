diff --git a/sparql_entity_storage.api.php b/sparql_entity_storage.api.php
index 2a42854..0238f67 100644
--- a/sparql_entity_storage.api.php
+++ b/sparql_entity_storage.api.php
@@ -7,16 +7,18 @@
 
 declare(strict_types = 1);
 
+use Drupal\field\Entity\FieldStorageConfig;
+
 /**
  * Alters the field configuration for fields of entities with SPARQL storage.
  *
- * @param \Drupal\field\Entity\FieldStorageConfig $storage
+ * @param FieldStorageConfig $storage
  *   The field configuration storage entity.
  * @param array &$values
  *   An associative array of field values. This array include any additional
  *   data a field formatter includes.
  */
-function hook_sparql_apply_default_fields_alter(\Drupal\field\Entity\FieldStorageConfig $storage, array &$values) {
+function hook_sparql_apply_default_fields_alter(FieldStorageConfig $storage, array &$values) {
   if ($storage->getType() == 'text_long') {
     // Handle multiple values in a field.
     foreach ($values as &$value) {
diff --git a/sparql_entity_storage.module b/sparql_entity_storage.module
index 3933322..205bae2 100644
--- a/sparql_entity_storage.module
+++ b/sparql_entity_storage.module
@@ -6,6 +6,9 @@
  */
 
 declare(strict_types = 1);
+use Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginManager;
+use Drupal\sparql_entity_storage\SparqlMappingInterface;
+use Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface;
 
 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -55,7 +58,7 @@ function sparql_entity_storage_form_field_storage_config_edit_form_alter(&$form,
   }
 
   $form_obj = $form_state->getFormObject();
-  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
+  /** @var FieldStorageConfig $entity */
   $entity = $form_obj->getEntity();
   $schema = $entity->getSchema();
   $form['sparql_mapping'] = [
@@ -107,7 +110,7 @@ function sparql_entity_storage_form_field_storage_config_edit_form_alter(&$form,
  *
  * @param array $form
  *   Form definition.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  */
 function sparql_entity_storage_field_storage_form_validate(array &$form, FormStateInterface $form_state) {
@@ -136,7 +139,7 @@ function sparql_entity_storage_field_storage_form_validate(array &$form, FormSta
 /**
  * Retrieve nested third party settings from object.
  *
- * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $object
+ * @param ConfigEntityInterface $object
  *   The object may be either a bundle entity or a field storage config entity.
  * @param string $property
  *   The property for which to retrieve the mapping.
@@ -193,7 +196,7 @@ function sparql_entity_storage_form_alter(&$form, FormStateInterface $form_state
   if (!$form_object instanceof BundleEntityFormBase) {
     return;
   }
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityBundleBase $bundle_entity */
+  /** @var ConfigEntityBundleBase $bundle_entity */
   $bundle_entity = $form_object->getEntity();
   if (!$bundle_entity instanceof ConfigEntityBundleBase) {
     return;
@@ -201,7 +204,7 @@ function sparql_entity_storage_form_alter(&$form, FormStateInterface $form_state
   $entity_type_id = $bundle_entity->getEntityType()->getBundleOf();
   $form_state->set('entity_type_id', $entity_type_id);
 
-  /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+  /** @var SparqlEntityStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
   if (!$storage instanceof SparqlEntityStorageInterface) {
     return;
@@ -239,7 +242,7 @@ function sparql_entity_storage_form_alter(&$form, FormStateInterface $form_state
     '#default_value' => $mapping ? $mapping->getRdfType() : NULL,
   ];
 
-  /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginManager $id_plugin_manager */
+  /** @var SparqlEntityStorageEntityIdPluginManager $id_plugin_manager */
   $id_plugin_manager = \Drupal::service('plugin.manager.sparql_entity_id');
   $plugins = array_map(function (array $definition) {
     return $definition['name'];
@@ -278,7 +281,7 @@ function sparql_entity_storage_form_alter(&$form, FormStateInterface $form_state
     '#description' => t('This entity type uses a SPARQL backend. Please map the bundle base fields to their corresponding RDF properties.'),
   ];
 
-  /** @var \Drupal\Core\Field\BaseFieldDefinition $base_field */
+  /** @var BaseFieldDefinition $base_field */
   foreach ($base_fields as $field_name => $base_field) {
     // The entity id doesn't need a mapping as it's the subject of the triple.
     if ($field_name === $id_key) {
@@ -332,7 +335,7 @@ function sparql_entity_storage_form_alter(&$form, FormStateInterface $form_state
  *
  * @param array $form
  *   The form API form render array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state object.
  *
  * @throws \Exception
@@ -342,10 +345,10 @@ function sparql_entity_storage_form_alter(&$form, FormStateInterface $form_state
  */
 function sparql_entity_storage_type_mapping_submit(array &$form, FormStateInterface $form_state): void {
   $values = $form_state->getValue('sparql_entity_storage');
-  /** @var \Drupal\sparql_entity_storage\SparqlMappingInterface $mapping */
+  /** @var SparqlMappingInterface $mapping */
   $mapping = $form_state->get('sparql_mapping');
   if (!$mapping) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity */
+    /** @var ConfigEntityInterface $bundle_entity */
     $bundle_entity = $form_state->getFormObject()->getEntity();
     $mapping = SparqlMapping::create([
       'entity_type_id' => $bundle_entity->getEntityType()->getBundleOf(),
@@ -381,7 +384,7 @@ function sparql_entity_storage_virtuoso_version_requirements() {
     ],
   ];
 
-  /** @var \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = Database::getConnection('default', 'sparql_default');
   $client = Http::getDefaultHttpClient();
   $client->resetParameters(TRUE);
@@ -432,7 +435,7 @@ function sparql_entity_storage_virtuoso_permission_requirements() {
     CLEAR GRAPH <{$uri}>
 QUERY;
 
-  /** @var \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = Database::getConnection('default', 'sparql_default');
   $requirements = [
     'sparql_virtuoso_query' => [
diff --git a/src/Controller/SparqlGraphToggle.php b/src/Controller/SparqlGraphToggle.php
index b3d2188..dc73989 100644
--- a/src/Controller/SparqlGraphToggle.php
+++ b/src/Controller/SparqlGraphToggle.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -17,12 +19,12 @@ class SparqlGraphToggle extends ControllerBase {
   /**
    * Checks if the current user is able to toggle the SPARQL graph status.
    *
-   * @param \Drupal\sparql_entity_storage\SparqlGraphInterface $sparql_graph
+   * @param SparqlGraphInterface $sparql_graph
    *   The $sparql_graph entity.
    * @param string $toggle_operation
    *   The operation: 'enable', 'disable'.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result object.
    */
   public function access(SparqlGraphInterface $sparql_graph, string $toggle_operation): AccessResultInterface {
@@ -40,15 +42,15 @@ class SparqlGraphToggle extends ControllerBase {
   /**
    * Toggles the SPARQL graph status.
    *
-   * @param \Drupal\sparql_entity_storage\SparqlGraphInterface $sparql_graph
+   * @param SparqlGraphInterface $sparql_graph
    *   The $sparql_graph entity.
    * @param string $toggle_operation
    *   The operation: 'enable', 'disable'.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   In case of failures on entity save.
    */
   public function toggle(SparqlGraphInterface $sparql_graph, string $toggle_operation) {
diff --git a/src/Driver/Database/sparql/Connection.php b/src/Driver/Database/sparql/Connection.php
index a832fdd..0e1fd8e 100644
--- a/src/Driver/Database/sparql/Connection.php
+++ b/src/Driver/Database/sparql/Connection.php
@@ -63,7 +63,7 @@ class Connection implements ConnectionInterface {
   /**
    * Constructs a new connection instance.
    *
-   * @param \EasyRdf\Sparql\Client $easy_rdf_client
+   * @param Client $easy_rdf_client
    *   Object of \EasyRdf\Sparql\Client which is a database connection.
    * @param array $connection_options
    *   An associative array of connection options. See the "Database settings"
@@ -106,13 +106,13 @@ class Connection implements ConnectionInterface {
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Sparql\Result|\EasyRdf\Graph
+   * @return Result|Graph
    *   The query result.
    *
    * @throws \InvalidArgumentException
    *   If $args value is passed but arguments replacement is not yet
    *   supported. To be removed in #55.
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   Exception during query execution, e.g. timeout.
    *
    * @see https://github.com/ec-europa/sparql_entity_storage/issues/1
@@ -289,7 +289,7 @@ class Connection implements ConnectionInterface {
    * requirement. We use a statement stub that only stores the connection and
    * the query to be used when logging the event.
    *
-   * @return \Drupal\sparql_entity_storage\Driver\Database\sparql\StatementStub
+   * @return StatementStub
    *   A faked statement object.
    *
    * @see \Drupal\Core\Database\Database::startLog()
diff --git a/src/Driver/Database/sparql/ConnectionInterface.php b/src/Driver/Database/sparql/ConnectionInterface.php
index 630dc65..f4804c9 100644
--- a/src/Driver/Database/sparql/ConnectionInterface.php
+++ b/src/Driver/Database/sparql/ConnectionInterface.php
@@ -17,7 +17,7 @@ interface ConnectionInterface {
   /**
    * Returns the SPARQL client object.
    *
-   * @return \EasyRdf\Sparql\Client
+   * @return Client
    *   The SPARQL client instantiated with the default connection info.
    */
   public function getSparqlClient(): Client;
@@ -32,7 +32,7 @@ interface ConnectionInterface {
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Sparql\Result
+   * @return Result
    *   The query result.
    *
    * @throws \InvalidArgumentException
@@ -53,7 +53,7 @@ interface ConnectionInterface {
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Graph
+   * @return Graph
    *   The set of triples.
    *
    * @throws \InvalidArgumentException
@@ -74,7 +74,7 @@ interface ConnectionInterface {
    * @param array $options
    *   An associative array of options to control how the query is run.
    *
-   * @return \EasyRdf\Sparql\Result
+   * @return Result
    *   The result object.
    *
    * @throws \InvalidArgumentException
@@ -96,7 +96,7 @@ interface ConnectionInterface {
   /**
    * Associates a logging object with this connection.
    *
-   * @param \Drupal\Core\Database\Log $logger
+   * @param Log $logger
    *   The logging object we want to use.
    */
   public function setLogger(Log $logger): void;
@@ -104,7 +104,7 @@ interface ConnectionInterface {
   /**
    * Gets the current logging object for this connection.
    *
-   * @return \Drupal\Core\Database\Log|null
+   * @return Log|null
    *   The current logging object for this connection. If there isn't one,
    *   NULL is returned.
    */
@@ -116,7 +116,7 @@ interface ConnectionInterface {
    * @param array $connection_options
    *   The connection options as defined in settings.php.
    *
-   * @return \EasyRdf\Sparql\Client
+   * @return Client
    *   The EasyRdf client instance.
    */
   public static function open(array &$connection_options = []): Client;
diff --git a/src/Driver/Database/sparql/StatementStub.php b/src/Driver/Database/sparql/StatementStub.php
index c36dfc6..cfc2d1c 100644
--- a/src/Driver/Database/sparql/StatementStub.php
+++ b/src/Driver/Database/sparql/StatementStub.php
@@ -65,7 +65,7 @@ class StatementStub implements \Iterator, StatementInterface {
   /**
    * Sets the database connection.
    *
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   The SPARQL connection.
    *
    * @return $this
diff --git a/src/Encoder/SparqlEncoder.php b/src/Encoder/SparqlEncoder.php
index 1d2f83f..94fa514 100644
--- a/src/Encoder/SparqlEncoder.php
+++ b/src/Encoder/SparqlEncoder.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage\Encoder;
 
+use EasyRdf\Serialiser;
 use Drupal\sparql_entity_storage\SparqlEncoderInterface;
 use EasyRdf\Format;
 
@@ -15,7 +16,7 @@ class SparqlEncoder implements SparqlEncoderInterface {
   /**
    * Memory cache for supported formats.
    *
-   * @var \EasyRdf\Serialiser[]
+   * @var Serialiser[]
    */
   protected static array $supportedFormats;
 
diff --git a/src/Entity/Query/Sparql/Query.php b/src/Entity/Query/Sparql/Query.php
index a3f0504..868d546 100644
--- a/src/Entity/Query/Sparql/Query.php
+++ b/src/Entity/Query/Sparql/Query.php
@@ -95,24 +95,24 @@ class Query extends QueryBase implements SparqlQueryInterface {
   /**
    * Constructs a query object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
    *   - OR: at least one of the conditions on the query need to match.
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   The database connection to run the query against.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service object.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The SPARQL graph handler service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping handler service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, $conjunction, ConnectionInterface $connection, array $namespaces, EntityTypeManagerInterface $entity_type_manager, SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler, SparqlEntityStorageFieldHandlerInterface $sparql_field_handler, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
diff --git a/src/Entity/Query/Sparql/QueryFactory.php b/src/Entity/Query/Sparql/QueryFactory.php
index 83fade7..54de20a 100644
--- a/src/Entity/Query/Sparql/QueryFactory.php
+++ b/src/Entity/Query/Sparql/QueryFactory.php
@@ -60,17 +60,17 @@ class QueryFactory implements QueryFactoryInterface {
   /**
    * Constructs a new query factory service instance.
    *
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   The connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The SPARQL graph helper service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(ConnectionInterface $connection, EntityTypeManagerInterface $entity_type_manager, SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler, SparqlEntityStorageFieldHandlerInterface $sparql_field_handler, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager) {
diff --git a/src/Entity/Query/Sparql/SparqlCondition.php b/src/Entity/Query/Sparql/SparqlCondition.php
index 9f25fb8..926365a 100644
--- a/src/Entity/Query/Sparql/SparqlCondition.php
+++ b/src/Entity/Query/Sparql/SparqlCondition.php
@@ -168,13 +168,13 @@ class SparqlCondition extends ConditionFundamentals implements SparqlConditionIn
    *
    * @param string $conjunction
    *   The operator to use to combine conditions: 'AND' or 'OR'.
-   * @param \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface $query
+   * @param SparqlQueryInterface $query
    *   The entity query this condition belongs to.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this condition.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping handler service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct($conjunction, SparqlQueryInterface $query, array $namespaces, SparqlEntityStorageFieldHandlerInterface $sparql_field_handler, LanguageManagerInterface $language_manager) {
diff --git a/src/Entity/Query/Sparql/SparqlConditionInterface.php b/src/Entity/Query/Sparql/SparqlConditionInterface.php
index 2522145..a462e52 100644
--- a/src/Entity/Query/Sparql/SparqlConditionInterface.php
+++ b/src/Entity/Query/Sparql/SparqlConditionInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage\Entity\Query\Sparql;
 
+use Drupal\sparql_entity_storage\Exception\UnmappedFieldException;
 use Drupal\Core\Entity\Query\ConditionInterface;
 
 /**
@@ -32,7 +33,7 @@ interface SparqlConditionInterface extends ConditionInterface {
    * @param string|null $column
    *   (optional) The field column. If empty, the main property will be used.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\UnmappedFieldException
+   * @throws UnmappedFieldException
    *   If the field is unmapped.
    */
   public function addFieldMappingRequirement(string $entity_type_id, string $field, ?string $column = NULL): void;
diff --git a/src/Entity/Query/Sparql/SparqlQueryInterface.php b/src/Entity/Query/Sparql/SparqlQueryInterface.php
index 248cb19..f56c104 100644
--- a/src/Entity/Query/Sparql/SparqlQueryInterface.php
+++ b/src/Entity/Query/Sparql/SparqlQueryInterface.php
@@ -33,7 +33,7 @@ interface SparqlQueryInterface extends QueryInterface {
   /**
    * Returns the entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type object.
    */
   public function getEntityType(): EntityTypeInterface;
@@ -41,7 +41,7 @@ interface SparqlQueryInterface extends QueryInterface {
   /**
    * Returns the entity type storage.
    *
-   * @return \Drupal\sparql_entity_storage\SparqlEntityStorageInterface
+   * @return SparqlEntityStorageInterface
    *   The entity type storage.
    */
   public function getEntityStorage(): SparqlEntityStorageInterface;
diff --git a/src/Entity/SparqlMapping.php b/src/Entity/SparqlMapping.php
index 70a9122..d4b70c8 100644
--- a/src/Entity/SparqlMapping.php
+++ b/src/Entity/SparqlMapping.php
@@ -276,7 +276,7 @@ class SparqlMapping extends ConfigEntityBase implements SparqlMappingInterface {
   public function calculateDependencies() {
     parent::calculateDependencies();
 
-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $graph */
+    /** @var SparqlGraphInterface $graph */
     foreach (SparqlGraph::loadMultiple(array_keys($this->getGraphs())) as $graph) {
       // Add dependency to each graph.
       $this->addDependency($graph->getConfigDependencyKey(), $graph->getConfigDependencyName());
@@ -301,7 +301,7 @@ class SparqlMapping extends ConfigEntityBase implements SparqlMappingInterface {
   public function onDependencyRemoval(array $dependencies) {
     $changed = parent::onDependencyRemoval($dependencies);
 
-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $graph */
+    /** @var SparqlGraphInterface $graph */
     foreach ($dependencies['config'] as $graph) {
       if ($graph->getEntityTypeId() === 'sparql_graph') {
         // Normally we shouldn't be notified about 'default' graph deletion
@@ -337,7 +337,7 @@ class SparqlMapping extends ConfigEntityBase implements SparqlMappingInterface {
     parent::postDelete($storage, $entities);
     \Drupal::service('sparql.graph_handler')->clearCache();
     \Drupal::service('sparql.field_handler')->clearCache();
-    /** @var \Drupal\sparql_entity_storage\SparqlMappingInterface $sparql_mapping */
+    /** @var SparqlMappingInterface $sparql_mapping */
     if ($sparql_mapping = reset($entities)) {
       \Drupal::entityTypeManager()->getStorage($sparql_mapping->getTargetEntityTypeId())->resetCache();
     }
diff --git a/src/EventSubscriber/InboundValueDateTimeSubscriber.php b/src/EventSubscriber/InboundValueDateTimeSubscriber.php
index 6619eee..644be60 100644
--- a/src/EventSubscriber/InboundValueDateTimeSubscriber.php
+++ b/src/EventSubscriber/InboundValueDateTimeSubscriber.php
@@ -31,7 +31,7 @@ class InboundValueDateTimeSubscriber implements EventSubscriberInterface {
    * Converts field properties with a "timestamp" data type that have been
    * mapped to date formats (xsd:date or xsd:dateTime).
    *
-   * @param \Drupal\sparql_entity_storage\Event\InboundValueEvent $event
+   * @param InboundValueEvent $event
    *   The inbound value event.
    */
   public function massageInboundValue(InboundValueEvent $event) {
diff --git a/src/EventSubscriber/InboundValueTranslatableLiteralSubscriber.php b/src/EventSubscriber/InboundValueTranslatableLiteralSubscriber.php
index 5ee28a0..0d1766c 100644
--- a/src/EventSubscriber/InboundValueTranslatableLiteralSubscriber.php
+++ b/src/EventSubscriber/InboundValueTranslatableLiteralSubscriber.php
@@ -24,7 +24,7 @@ class InboundValueTranslatableLiteralSubscriber implements EventSubscriberInterf
   /**
    * Constructs a new event subscriber.
    *
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed-data manager.
    */
   public function __construct(TypedDataManagerInterface $typed_data_manager) {
@@ -43,7 +43,7 @@ class InboundValueTranslatableLiteralSubscriber implements EventSubscriberInterf
   /**
    * Massages inbound translatable literal value value.
    *
-   * @param \Drupal\sparql_entity_storage\Event\InboundValueEvent $event
+   * @param InboundValueEvent $event
    *   The inbound value event.
    */
   public function castTranslatableLiteralValue(InboundValueEvent $event) {
diff --git a/src/EventSubscriber/OutboundValueDateTimeSubscriber.php b/src/EventSubscriber/OutboundValueDateTimeSubscriber.php
index 916753b..c7b1d65 100644
--- a/src/EventSubscriber/OutboundValueDateTimeSubscriber.php
+++ b/src/EventSubscriber/OutboundValueDateTimeSubscriber.php
@@ -31,7 +31,7 @@ class OutboundValueDateTimeSubscriber implements EventSubscriberInterface {
    * Converts field properties with a "timestamp" data type that have been
    * mapped to date formats (xsd:date or xsd:dateTime).
    *
-   * @param \Drupal\sparql_entity_storage\Event\OutboundValueEvent $event
+   * @param OutboundValueEvent $event
    *   The outbound value event.
    */
   public function massageOutboundValue(OutboundValueEvent $event) {
diff --git a/src/EventSubscriber/SparqlContentTypesSubscriber.php b/src/EventSubscriber/SparqlContentTypesSubscriber.php
index e2f6002..3824050 100644
--- a/src/EventSubscriber/SparqlContentTypesSubscriber.php
+++ b/src/EventSubscriber/SparqlContentTypesSubscriber.php
@@ -4,9 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use EasyRdf\Format;
 use Drupal\sparql_entity_storage\Encoder\SparqlEncoder;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -17,11 +18,11 @@ class SparqlContentTypesSubscriber implements EventSubscriberInterface {
   /**
    * Register content type formats on the request object.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
-    /** @var \EasyRdf\Format $format */
+  public function onKernelRequest(RequestEvent $event) {
+    /** @var Format $format */
     foreach (SparqlEncoder::getSupportedFormats() as $format) {
       $mime = array_keys($format->getMimeTypes());
       $event->getRequest()->setFormat($format->getName(), $mime);
diff --git a/src/Form/SparqlGraphForm.php b/src/Form/SparqlGraphForm.php
index 9b91e4a..5a88014 100644
--- a/src/Form/SparqlGraphForm.php
+++ b/src/Form/SparqlGraphForm.php
@@ -23,7 +23,7 @@ class SparqlGraphForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state): array {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $graph */
+    /** @var SparqlGraphInterface $graph */
     $graph = $this->getEntity();
 
     $form['name'] = [
diff --git a/src/Normalizer/SparqlEntityNormalizer.php b/src/Normalizer/SparqlEntityNormalizer.php
index 27be0f6..6088c6d 100644
--- a/src/Normalizer/SparqlEntityNormalizer.php
+++ b/src/Normalizer/SparqlEntityNormalizer.php
@@ -28,9 +28,9 @@ class SparqlEntityNormalizer extends NormalizerBase {
   /**
    * Constructs an RdfEntityNormalizer object.
    *
-   * @param \Drupal\sparql_entity_storage\SparqlSerializer $rdf_serializer
+   * @param SparqlSerializer $rdf_serializer
    *   RDF Serializer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(SparqlSerializer $rdf_serializer, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/ParamConverter/SparqlEntityStorageConverter.php b/src/ParamConverter/SparqlEntityStorageConverter.php
index 568df26..9d14349 100644
--- a/src/ParamConverter/SparqlEntityStorageConverter.php
+++ b/src/ParamConverter/SparqlEntityStorageConverter.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage\ParamConverter;
 
+use Drupal\sparql_entity_storage\SparqlEntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -33,11 +34,11 @@ class SparqlEntityStorageConverter extends EntityConverter {
   /**
    * Constructs a new param converter service instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, EventDispatcherInterface $event_dispatcher) {
@@ -76,7 +77,7 @@ class SparqlEntityStorageConverter extends EntityConverter {
       $value = UriEncoder::decodeUrl($value);
     }
     $entity_type_id = $this->getEntityTypeFromDefaults($definition, $name, $defaults);
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorageInterface $storage */
+    /** @var SparqlEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity_type_id);
     $event = new ActiveGraphEvent($name, $value, $entity_type_id, $definition, $defaults);
     // Determine the graph by dispatching an event.
diff --git a/src/Plugin/sparql_entity_storage/Id/DefaultSparqlEntityStorageEntityIdGenerator.php b/src/Plugin/sparql_entity_storage/Id/DefaultSparqlEntityStorageEntityIdGenerator.php
index b20ceac..6a0c7cf 100644
--- a/src/Plugin/sparql_entity_storage/Id/DefaultSparqlEntityStorageEntityIdGenerator.php
+++ b/src/Plugin/sparql_entity_storage/Id/DefaultSparqlEntityStorageEntityIdGenerator.php
@@ -33,9 +33,9 @@ class DefaultSparqlEntityStorageEntityIdGenerator extends SparqlEntityStorageEnt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The UUID service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, UuidInterface $uuid) {
diff --git a/src/RouteProcessor/SparqlEntityStorageRouteProcessor.php b/src/RouteProcessor/SparqlEntityStorageRouteProcessor.php
index f2c68a6..ccdd472 100644
--- a/src/RouteProcessor/SparqlEntityStorageRouteProcessor.php
+++ b/src/RouteProcessor/SparqlEntityStorageRouteProcessor.php
@@ -27,7 +27,7 @@ class SparqlEntityStorageRouteProcessor implements OutboundRouteProcessorInterfa
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
diff --git a/src/SparqlEncoderInterface.php b/src/SparqlEncoderInterface.php
index 6ac3e46..614ecb9 100644
--- a/src/SparqlEncoderInterface.php
+++ b/src/SparqlEncoderInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage;
 
+use EasyRdf\Serialiser;
 use Symfony\Component\Serializer\Encoder\EncoderInterface;
 
 /**
@@ -14,7 +15,7 @@ interface SparqlEncoderInterface extends EncoderInterface {
   /**
    * Builds a list of supported formats.
    *
-   * @return \EasyRdf\Serialiser[]
+   * @return Serialiser[]
    *   List of supported formats.
    */
   public static function getSupportedFormats(): array;
diff --git a/src/SparqlEntityStorage.php b/src/SparqlEntityStorage.php
index f304452..4ffde09 100644
--- a/src/SparqlEntityStorage.php
+++ b/src/SparqlEntityStorage.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage;
 
+use Drupal\sparql_entity_storage\Exception\SparqlQueryException;
+use Drupal\Core\Entity\ContentEntityBase;
+use Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
@@ -87,29 +90,29 @@ class SparqlEntityStorage extends ContentEntityStorageBase implements SparqlEnti
   /**
    * Initialize the storage backend.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type this storage is about.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $sparql
+   * @param ConnectionInterface $sparql
    *   The connection object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $sparql_graph_handler
    *   The sPARQL graph helper service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
+   * @param SparqlEntityStorageFieldHandlerInterface $sparql_field_handler
    *   The SPARQL field mapping service.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginManager $entity_id_plugin_manager
+   * @param SparqlEntityStorageEntityIdPluginManager $entity_id_plugin_manager
    *   The entity ID generator plugin manager.
    */
   public function __construct(
@@ -162,7 +165,7 @@ class SparqlEntityStorage extends ContentEntityStorageBase implements SparqlEnti
    * @param string $graph_uri
    *   The URI of the graph.
    *
-   * @return \EasyRdf\Graph
+   * @return Graph
    *   The EasyRdf graph object.
    */
   protected static function getGraph($graph_uri): Graph {
@@ -173,7 +176,7 @@ class SparqlEntityStorage extends ContentEntityStorageBase implements SparqlEnti
    * {@inheritdoc}
    */
   public function create(array $values = []): ContentEntityInterface {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = parent::create($values);
     // Ensure the default graph if no explicit graph has been set.
     if ($entity->get('graph')->isEmpty()) {
@@ -225,10 +228,10 @@ class SparqlEntityStorage extends ContentEntityStorageBase implements SparqlEnti
    * @param array $graph_ids
    *   A list of graph IDs.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Array of entities from the storage.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ -281,7 +284,7 @@ class SparqlEntityStorage extends ContentEntityStorageBase implements SparqlEnti
    *   The entity values indexed by the field mapping ID or NULL in there are no
    *   results.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ -331,7 +334,7 @@ QUERY;
    * If the graph parameter can be used to restrict the available graphs to load
    * from.
    *
-   * @param \EasyRdf\Sparql\Result|\EasyRdf\Graph $results
+   * @param Result|Graph $results
    *   A set of query results indexed per graph and entity id.
    * @param string[] $graph_ids
    *   Graph IDs.
@@ -432,7 +435,7 @@ QUERY;
    *      ];
    * @code
    *
-   * @param \EasyRdf\Sparql\Result $results
+   * @param Result $results
    *   A set of query results indexed per graph and entity id.
    *
    * @return array
@@ -550,7 +553,7 @@ QUERY;
     // methods in order to be able to pass an additional list of graphs
     // parameter to ::loadUnchanged() method.
     // START forking from ContentEntityStorageBase::doPreSave().
-    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+    /** @var ContentEntityBase $entity */
     $entity->updateOriginalValues();
     if ($entity->getEntityType()->isRevisionable() && !$entity->isNew() && empty($entity->getLoadedRevisionId())) {
       $entity->updateLoadedRevisionId();
@@ -671,7 +674,7 @@ QUERY;
   public function loadByProperties(array $values = [], ?array $graph_ids = NULL): array {
     $this->checkGraphs($graph_ids);
 
-    /** @var \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface $query */
+    /** @var SparqlQueryInterface $query */
     $query = $this->getQuery()
       ->graphs($graph_ids)
       ->accessCheck(FALSE);
@@ -707,7 +710,7 @@ QUERY;
     }
 
     $entities_by_graph = [];
-    /** @var \Drupal\Core\Entity\EntityInterface $keyed_entity */
+    /** @var EntityInterface $keyed_entity */
     foreach ($keyed_entities as $keyed_entity) {
       // Determine all possible graphs for the entity.
       $graphs_by_bundle = $this->getGraphHandler()->getEntityTypeGraphUris($this->getEntityTypeId());
@@ -737,7 +740,7 @@ QUERY;
   protected function doDelete($entities) {
     $entities_by_graph = [];
     /** @var string $id */
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($entities as $id => $entity) {
       $graph_uri = $this->getGraphHandler()->getBundleGraphUri($entity->getEntityTypeId(), $entity->bundle(), (string) $entity->get('graph')->target_id);
       $entities_by_graph[$graph_uri][$id] = $entity;
@@ -920,7 +923,7 @@ QUERY;
    *
    * Only t_literal fields should be translatable.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to convert to an array of values.
    *
    * @return array
@@ -1027,9 +1030,9 @@ QUERY;
    * Implementations are able to change, delete or add items to the graph before
    * this is saved to SPARQL backend.
    *
-   * @param \EasyRdf\Graph $graph
+   * @param Graph $graph
    *   The graph to be altered.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being saved.
    */
   protected function alterGraph(Graph &$graph, EntityInterface $entity): void {}
@@ -1037,15 +1040,15 @@ QUERY;
   /**
    * Insert a graph of triples.
    *
-   * @param \EasyRdf\Graph $graph
+   * @param Graph $graph
    *   The graph to insert.
    * @param string $graph_uri
    *   Graph to save to.
    *
-   * @return \EasyRdf\Sparql\Result
+   * @return Result
    *   Response.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ -1242,7 +1245,7 @@ QUERY;
    * @param string $graph_uri
    *   The graph uri.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no specific reason.
@@ -1323,7 +1326,7 @@ QUERY;
   /**
    * Keep track of the originating graph of an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    */
   protected function trackOriginalGraph(EntityInterface $entity): void {
diff --git a/src/SparqlEntityStorageEntityIdPluginBase.php b/src/SparqlEntityStorageEntityIdPluginBase.php
index 60015d3..a6b69b1 100644
--- a/src/SparqlEntityStorageEntityIdPluginBase.php
+++ b/src/SparqlEntityStorageEntityIdPluginBase.php
@@ -34,7 +34,7 @@ abstract class SparqlEntityStorageEntityIdPluginBase extends PluginBase implemen
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/SparqlEntityStorageEntityIdPluginInterface.php b/src/SparqlEntityStorageEntityIdPluginInterface.php
index bffc12e..0366535 100644
--- a/src/SparqlEntityStorageEntityIdPluginInterface.php
+++ b/src/SparqlEntityStorageEntityIdPluginInterface.php
@@ -22,7 +22,7 @@ interface SparqlEntityStorageEntityIdPluginInterface {
   /**
    * Sets the entity for which the ID is being generated.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return $this
@@ -32,7 +32,7 @@ interface SparqlEntityStorageEntityIdPluginInterface {
   /**
    * Gets the entity for which the ID is being generated.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function getEntity();
diff --git a/src/SparqlEntityStorageEntityIdPluginManager.php b/src/SparqlEntityStorageEntityIdPluginManager.php
index 50f2b39..d881f8a 100644
--- a/src/SparqlEntityStorageEntityIdPluginManager.php
+++ b/src/SparqlEntityStorageEntityIdPluginManager.php
@@ -21,7 +21,7 @@ class SparqlEntityStorageEntityIdPluginManager extends DefaultPluginManager impl
   /**
    * Cached plugin instances.
    *
-   * @var \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginInterface[][]
+   * @var SparqlEntityStorageEntityIdPluginInterface[][]
    */
   protected array $instances = [];
 
@@ -36,11 +36,11 @@ class SparqlEntityStorageEntityIdPluginManager extends DefaultPluginManager impl
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
@@ -60,10 +60,10 @@ class SparqlEntityStorageEntityIdPluginManager extends DefaultPluginManager impl
   /**
    * Initializes the proper plugin given an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\sparql_entity_storage\SparqlEntityStorageEntityIdPluginInterface
+   * @return SparqlEntityStorageEntityIdPluginInterface
    *   The plugin.
    */
   public function getPlugin(ContentEntityInterface $entity) {
diff --git a/src/SparqlEntityStorageFieldHandler.php b/src/SparqlEntityStorageFieldHandler.php
index 0d9d2cd..8a805db 100644
--- a/src/SparqlEntityStorageFieldHandler.php
+++ b/src/SparqlEntityStorageFieldHandler.php
@@ -121,13 +121,13 @@ class SparqlEntityStorageFieldHandler implements SparqlEntityStorageFieldHandler
   /**
    * Constructs a QueryFactory object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, EventDispatcherInterface $event_dispatcher, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/SparqlEntityStorageFieldHandlerInterface.php b/src/SparqlEntityStorageFieldHandlerInterface.php
index 87c98f6..06b1a90 100644
--- a/src/SparqlEntityStorageFieldHandlerInterface.php
+++ b/src/SparqlEntityStorageFieldHandlerInterface.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage;
 
+use Drupal\sparql_entity_storage\Exception\UnmappedFieldException;
+use Drupal\Component\Render\MarkupInterface;
 /**
  * Provides a contract for the SPARQL entity field handler service.
  */
@@ -56,7 +58,7 @@ interface SparqlEntityStorageFieldHandlerInterface {
    * @return string[]
    *   An array of predicates.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\UnmappedFieldException
+   * @throws UnmappedFieldException
    *    Thrown when a unmapped field is requested.
    */
   public function getFieldPredicates(string $entity_type_id, string $field_name, ?string $column_name = NULL, ?string $bundle = NULL): array;
@@ -213,7 +215,7 @@ interface SparqlEntityStorageFieldHandlerInterface {
   /**
    * Returns an array of available data types.
    *
-   * @return \Drupal\Component\Render\MarkupInterface[]
+   * @return MarkupInterface[]
    *   An array of data types.
    */
   public static function getSupportedDataTypes(): array;
diff --git a/src/SparqlEntityStorageGraphHandler.php b/src/SparqlEntityStorageGraphHandler.php
index 6311ccc..d46c7ec 100644
--- a/src/SparqlEntityStorageGraphHandler.php
+++ b/src/SparqlEntityStorageGraphHandler.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -48,11 +49,11 @@ class SparqlEntityStorageGraphHandler implements SparqlEntityStorageGraphHandler
   /**
    * Constructs a SPARQL graph handler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -111,7 +112,7 @@ class SparqlEntityStorageGraphHandler implements SparqlEntityStorageGraphHandler
   public function getEntityTypeDefaultGraphIds(string $entity_type_id): array {
     if (!isset($this->cache['default_graphs'][$entity_type_id])) {
       $entity_graph_ids = $this->getEntityTypeGraphIds($entity_type_id);
-      /** @var \Drupal\sparql_entity_storage\Event\DefaultGraphsEvent $event */
+      /** @var DefaultGraphsEvent $event */
       $event = $this->eventDispatcher->dispatch(
         new DefaultGraphsEvent($entity_type_id, $entity_graph_ids),
         SparqlEntityStorageEvents::DEFAULT_GRAPHS
@@ -209,10 +210,10 @@ class SparqlEntityStorageGraphHandler implements SparqlEntityStorageGraphHandler
   /**
    * Returns the SPARQL graph config entity storage service.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The SPARQL graph config entity storage service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   If the entity type is not found.
    */
   protected function getSparqlGraphStorage(): ConfigEntityStorageInterface {
diff --git a/src/SparqlEntityStorageInterface.php b/src/SparqlEntityStorageInterface.php
index 92347cb..0e5d332 100644
--- a/src/SparqlEntityStorageInterface.php
+++ b/src/SparqlEntityStorageInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\sparql_entity_storage;
 
+use Drupal\sparql_entity_storage\Exception\SparqlQueryException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -29,7 +30,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Returns the graph handler object.
    *
-   * @return \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface
+   * @return SparqlEntityStorageGraphHandlerInterface
    *   The graph handler service.
    */
   public function getGraphHandler(): SparqlEntityStorageGraphHandlerInterface;
@@ -54,7 +55,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
    * @return bool
    *   TRUE if this entity ID already exists, FALSE otherwise.
    *
-   * @throws \Drupal\sparql_entity_storage\Exception\SparqlQueryException
+   * @throws SparqlQueryException
    *   If the SPARQL query fails.
    * @throws \Exception
    *   The query fails with no reason.
@@ -64,7 +65,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Checks if an entity has a specific graph.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    * @param string $graph_id
    *   The graph to be checked ('draft', etc).
@@ -80,7 +81,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Deletes the version of the entities stored in a given graph.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   An array of entity objects to delete.
    * @param string $graph_id
    *   The ID of the graph from where to delete the entity.
@@ -100,7 +101,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An entity object. NULL if no matching entity is found.
    */
   public function load($id, ?array $graph_ids = NULL): ?ContentEntityInterface;
@@ -113,7 +114,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects indexed by their IDs. Returns an empty array
    *   if no matching entities are found.
    */
@@ -127,7 +128,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The unchanged entity, or NULL if the entity cannot be loaded.
    */
   public function loadUnchanged($id, ?array $graph_ids = NULL): ?ContentEntityInterface;
@@ -141,7 +142,7 @@ interface SparqlEntityStorageInterface extends ContentEntityStorageInterface {
    * @param string[]|null $graph_ids
    *   An ordered list of candidate graph IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects indexed by their ids.
    */
   public function loadByProperties(array $values = [], ?array $graph_ids = NULL): array;
diff --git a/src/SparqlGraphListBuilder.php b/src/SparqlGraphListBuilder.php
index 2fa615c..cd9c04e 100644
--- a/src/SparqlGraphListBuilder.php
+++ b/src/SparqlGraphListBuilder.php
@@ -31,13 +31,13 @@ class SparqlGraphListBuilder extends DraggableListBuilder {
   /**
    * Constructs a new entity list builder instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager service.
-   * @param \Drupal\Core\Entity\EntityTypeRepositoryInterface $entity_type_repository
+   * @param EntityTypeRepositoryInterface $entity_type_repository
    *   The entity type repository service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, AccessManagerInterface $access_manager, EntityTypeRepositoryInterface $entity_type_repository) {
@@ -83,7 +83,7 @@ class SparqlGraphListBuilder extends DraggableListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $sparql_graph) {
-    /** @var \Drupal\sparql_entity_storage\SparqlGraphInterface $sparql_graph */
+    /** @var SparqlGraphInterface $sparql_graph */
     $row['label'] = $sparql_graph->label();
     $row['description'] = ['#markup' => $sparql_graph->getDescription()];
 
diff --git a/src/SparqlGraphStoreTrait.php b/src/SparqlGraphStoreTrait.php
index 7f19cd7..40b61a2 100644
--- a/src/SparqlGraphStoreTrait.php
+++ b/src/SparqlGraphStoreTrait.php
@@ -15,7 +15,7 @@ trait SparqlGraphStoreTrait {
   /**
    * Creates a new Graph Store object using the SPARQL connection.
    *
-   * @return \EasyRdf\GraphStore
+   * @return GraphStore
    *   The new graph store object.
    */
   public static function createGraphStore(): GraphStore {
diff --git a/src/SparqlMappingInterface.php b/src/SparqlMappingInterface.php
index 0e27aa9..8c5661a 100644
--- a/src/SparqlMappingInterface.php
+++ b/src/SparqlMappingInterface.php
@@ -23,7 +23,7 @@ interface SparqlMappingInterface extends ConfigEntityInterface {
   /**
    * Gets the referred entity type.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface|null
+   * @return ContentEntityTypeInterface|null
    *   The target entity type.
    */
   public function getTargetEntityType(): ?ContentEntityTypeInterface;
diff --git a/src/SparqlSerializer.php b/src/SparqlSerializer.php
index d5d0b34..38e5af2 100644
--- a/src/SparqlSerializer.php
+++ b/src/SparqlSerializer.php
@@ -26,9 +26,9 @@ class SparqlSerializer implements SparqlSerializerInterface {
   /**
    * Instantiates a new serializer instance.
    *
-   * @param \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $sparqlEndpoint
+   * @param ConnectionInterface $sparqlEndpoint
    *   The SPARQL connection object.
-   * @param \Drupal\sparql_entity_storage\SparqlEntityStorageGraphHandlerInterface $graph_handler
+   * @param SparqlEntityStorageGraphHandlerInterface $graph_handler
    *   The SPARQL graph handler service.
    */
   public function __construct(ConnectionInterface $sparqlEndpoint, SparqlEntityStorageGraphHandlerInterface $graph_handler) {
diff --git a/src/SparqlSerializerInterface.php b/src/SparqlSerializerInterface.php
index c3e790e..5d24ee9 100644
--- a/src/SparqlSerializerInterface.php
+++ b/src/SparqlSerializerInterface.php
@@ -14,7 +14,7 @@ interface SparqlSerializerInterface {
   /**
    * Exports a single entity to a serialised string.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to export.
    * @param string $format
    *   The serialisation format. Defaults to 'turtle'.
diff --git a/tests/modules/sparql_graph_test/src/DefaultGraphsSubscriber.php b/tests/modules/sparql_graph_test/src/DefaultGraphsSubscriber.php
index d9fd7c7..972f0b0 100644
--- a/tests/modules/sparql_graph_test/src/DefaultGraphsSubscriber.php
+++ b/tests/modules/sparql_graph_test/src/DefaultGraphsSubscriber.php
@@ -25,7 +25,7 @@ class DefaultGraphsSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to default graph list building event.
    *
-   * @param \Drupal\sparql_entity_storage\Event\DefaultGraphsEvent $event
+   * @param DefaultGraphsEvent $event
    *   The event.
    */
   public function limitGraphs(DefaultGraphsEvent $event) {
diff --git a/tests/src/Kernel/EntityCreationTest.php b/tests/src/Kernel/EntityCreationTest.php
index f7963a1..89992f5 100644
--- a/tests/src/Kernel/EntityCreationTest.php
+++ b/tests/src/Kernel/EntityCreationTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\sparql_entity_storage\Kernel;
 
+use Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface;
 use Drupal\sparql_entity_storage\Entity\SparqlGraph;
 use Drupal\sparql_entity_storage\Exception\DuplicatedIdException;
 use Drupal\sparql_test\Entity\SparqlTest;
@@ -82,7 +83,7 @@ class EntityCreationTest extends SparqlKernelTestBase {
    * Tests entity without bundles creation.
    */
   public function testEntityTypeWithoutBundles(): void {
-    /** @var \Drupal\sparql_entity_storage\Driver\Database\sparql\ConnectionInterface $sparql */
+    /** @var ConnectionInterface $sparql */
     $sparql = \Drupal::service('sparql.endpoint');
 
     SparqlWithoutBundlesTest::create([
diff --git a/tests/src/Kernel/EntityLanguageTest.php b/tests/src/Kernel/EntityLanguageTest.php
index 506b087..2f855fa 100644
--- a/tests/src/Kernel/EntityLanguageTest.php
+++ b/tests/src/Kernel/EntityLanguageTest.php
@@ -27,7 +27,7 @@ class EntityLanguageTest extends SparqlKernelTestBase {
       ConfigurableLanguage::createFromLangcode($langcode)->save();
     }
 
-    /** @var \Drupal\sparql_test\Entity\SparqlTest $entity */
+    /** @var SparqlTest $entity */
     $entity = SparqlTest::create([
       'id' => 'http://example.com/apple',
       'type' => 'fruit',
diff --git a/tests/src/Kernel/SparqlEntityInsertTest.php b/tests/src/Kernel/SparqlEntityInsertTest.php
index 3046389..b4177b0 100644
--- a/tests/src/Kernel/SparqlEntityInsertTest.php
+++ b/tests/src/Kernel/SparqlEntityInsertTest.php
@@ -133,7 +133,7 @@ class SparqlEntityInsertTest extends SparqlKernelTestBase {
    * Since SPARQL does not support deltas yet, this method will sort the values
    * so that they can be comparable.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
    * @param string $field_name
    *   The field name.
diff --git a/tests/src/Kernel/SparqlEntityQueryTest.php b/tests/src/Kernel/SparqlEntityQueryTest.php
index bc36c6e..4de3cd9 100644
--- a/tests/src/Kernel/SparqlEntityQueryTest.php
+++ b/tests/src/Kernel/SparqlEntityQueryTest.php
@@ -34,7 +34,7 @@ class SparqlEntityQueryTest extends SparqlKernelTestBase {
   /**
    * Dummy reference entities.
    *
-   * @var \Drupal\sparql_test\Entity\SparqlTest[]|null
+   * @var SparqlTest[]|null
    */
   protected ?array $entities;
 
@@ -640,7 +640,7 @@ class SparqlEntityQueryTest extends SparqlKernelTestBase {
    * @param string $operator
    *   (optional) The logic operator ('AND' or 'OR'). Defaults to 'AND'.
    *
-   * @return \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface
+   * @return SparqlQueryInterface
    *   The SPARQL entity query.
    */
   protected function getQuery(string $operator = 'AND'): SparqlQueryInterface {
diff --git a/tests/src/Kernel/SparqlGraphTest.php b/tests/src/Kernel/SparqlGraphTest.php
index 925f8da..c0f6b55 100644
--- a/tests/src/Kernel/SparqlGraphTest.php
+++ b/tests/src/Kernel/SparqlGraphTest.php
@@ -4,6 +4,10 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\sparql_entity_storage\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\sparql_entity_storage\SparqlEntityStorage;
+use Drupal\sparql_test\Entity\SparqlTest;
+use Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface;
 use Drupal\sparql_entity_storage\Entity\SparqlGraph;
 use Drupal\sparql_entity_storage\Entity\SparqlMapping;
 
@@ -23,16 +27,16 @@ class SparqlGraphTest extends SparqlKernelTestBase {
    * Tests graphs.
    */
   public function testSparqlGraphs(): void {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $manager */
+    /** @var EntityTypeManagerInterface $manager */
     $manager = $this->container->get('entity_type.manager');
-    /** @var \Drupal\sparql_entity_storage\SparqlEntityStorage $storage */
+    /** @var SparqlEntityStorage $storage */
     $storage = $manager->getStorage('sparql_test');
 
     // Create a 2nd graph.
     $this->createGraph('foo', 10);
 
     $id = 'http://example.com/apple';
-    /** @var \Drupal\sparql_test\Entity\SparqlTest $apple */
+    /** @var SparqlTest $apple */
     $apple = $storage->create([
       'id' => $id,
       'type' => 'fruit',
@@ -156,7 +160,7 @@ class SparqlGraphTest extends SparqlKernelTestBase {
   /**
    * Returns the entity query.
    *
-   * @return \Drupal\sparql_entity_storage\Entity\Query\Sparql\SparqlQueryInterface
+   * @return SparqlQueryInterface
    *   The SPARQL entity query.
    */
   protected function getQuery() {
diff --git a/tests/src/Kernel/SparqlSerializerTest.php b/tests/src/Kernel/SparqlSerializerTest.php
index 700e561..3515e8d 100644
--- a/tests/src/Kernel/SparqlSerializerTest.php
+++ b/tests/src/Kernel/SparqlSerializerTest.php
@@ -67,7 +67,7 @@ class SparqlSerializerTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     SimpleSparqlTest::load('http://example.com/apple')->delete();
     parent::tearDown();
   }
