modules/contrib/layout_options/layout_options.module
modules/contrib/layout_options/modules/layout_options_ui/layout_options_ui.module
modules/contrib/layout_options/modules/layout_options_ui/src/Form/Settings.php
modules/contrib/layout_options/src/Annotation/LayoutOption.php
modules/contrib/layout_options/src/LayoutOptionPluginManager.php
modules/contrib/layout_options/src/OptionBase.php
modules/contrib/layout_options/src/OptionInterface.php
modules/contrib/layout_options/src/Plugin/Layout/LayoutOptions.php
modules/contrib/layout_options/src/Plugin/LayoutOption/ClassAttributeCheckboxes.php
modules/contrib/layout_options/src/Plugin/LayoutOption/ClassAttributeRadios.php
modules/contrib/layout_options/src/Plugin/LayoutOption/ClassAttributeSelect.php
modules/contrib/layout_options/src/Plugin/LayoutOption/ClassAttributeString.php
modules/contrib/layout_options/src/Plugin/LayoutOption/IdAttributeOption.php
modules/contrib/layout_options/tests/src/Kernel/LayoutOptionsTest.php

7 files with changes
====================

1) modules/contrib/layout_options/tests/src/Kernel/LayoutOptionsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\layout_options\Kernel;

+use Drupal\Core\Layout\LayoutPluginManagerInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Layout\LayoutDefinition;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   * @var LayoutPluginManagerInterface
    */
   protected $layoutPluginManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->layoutPluginManager = $this->container->get('plugin.manager.core.layout');
@@ @@
    *   The layout id to use.
    * @param array $configuration
    *   The configuration used by the plugin.
-   * @param \Drupal\Core\Layout\LayoutDefinition $definition
+   * @param LayoutDefinition $definition
    *   The layout Definition.
    *
-   * @return \Drupal\layout_options\Plugin\Layout\LayoutOptions
+   * @return LayoutOptions
    *   A new initialized LayoutOptions object.
    */
   protected function getLayoutOptionsPlugin(string $layoutId = "test_50_50", array $configuration = [], LayoutDefinition $definition = NULL) {
@@ @@
     $this->assertArrayHasKey('layout_id_theme', $results, "Has theme defined option");
     $this->assertArrayHasKey('layout_id', $results, "Has module defined option");
     $this->assertArrayHasKey('layout_bg_color', $results, "Has layout bg color option");
-    $this->assertEqual($results['layout_bg_color']['title'], 'Theme Background color', "Theme override worked");
+    $this->assertEquals($results['layout_bg_color']['title'], 'Theme Background color', "Theme override worked");
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/layout_options/src/Plugin/Layout/LayoutOptions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_options\Plugin\Layout;

+use Drupal\layout_options\OptionInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Discovery\YamlDiscovery;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The LayoutOptionPlugin service.
    *
-   * @var \Drupal\layout_options\LayoutOptionPluginManager
+   * @var LayoutOptionPluginManager
    */
   protected $layoutOptionManager;

@@ @@
   /**
    * The YAML discovery class to find all .layout_options.yml files.
    *
-   * @var \Drupal\Core\Discovery\YamlDiscovery
+   * @var YamlDiscovery
    */
   protected $yamlDiscovery;

@@ @@
   /**
    * The option plug local cache.
    *
-   * @var \Drupal\layout_options\OptionInterface[]
+   * @var OptionInterface[]
    */
   protected $optionPlugins = [];

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler object.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The theme handler object.
-   * @param \Drupal\layout_options\LayoutOptionPluginManager $layoutOptionManager
+   * @param LayoutOptionPluginManager $layoutOptionManager
    *   The theme handler object.
    */
   public function __construct(
@@ @@
   /**
    * Handle plugin injection.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    * @param array $configuration
    *   The configuration array.
@@ @@
    *
    * @param array $form
    *   The Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current state of the form.
    */
   public function processConfigurationForm(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Gets the YAML discovery object used to load the layout_options yaml files..
    *
-   * @return \Drupal\Core\Discovery\YamlDiscovery
+   * @return YamlDiscovery
    *   The YAML discovery object.
    */
   public function getYamlDiscovery() {
@@ @@
    * @param bool $bypassCache
    *   Option to allow bypassing cached plugin info.
    *
-   * @return \Drupal\layout_options\OptionInterface|null
+   * @return OptionInterface|null
    *   The plugin or NULL in not found.
    */
   public function getOptionPlugin(string $optionId, array $optionDefinition, bool $bypassCache = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/layout_options/src/OptionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_options;

+use Drupal\Core\Layout\LayoutDefault;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Return the Layout Plugin using this Option.
    *
-   * @return \Drupal\Core\Layout\LayoutDefault
+   * @return LayoutDefault
    *   The layout plugin or NULL if it has not been set.
    */
   public function getLayoutPlugin();
@@ @@
    *   The regions being configured (layout = overall)
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    */
   public function validateFormOption(array &$form, FormStateInterface $formState);
@@ @@
    *   The layout plugin configuration.
    * @param array $form
    *   The configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    *
    * @return string[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/layout_options/src/OptionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_options;

+use Drupal\Core\Layout\LayoutDefinition;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
@@ @@
    *   The region being processed.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    * @param mixed $default
    *   The default value to use.
@@ @@
    *   The region to create this form.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    * @param mixed $default
    *   The default value to use.
@@ @@
    *   The region to create this form.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    * @param mixed $default
    *   The default value to use.
@@ @@
    *   The region to create this form.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    * @param mixed $default
    *   The default value to use.
@@ @@
    *   The region to create this form.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    * @param mixed $default
    *   The default value to use.
@@ @@
   /**
    * Get the Layout plugin using this option plug's definition.
    *
-   * @return \Drupal\Core\Layout\LayoutDefinition
+   * @return LayoutDefinition
    *   Layout definition object.
    */
   public function getLayoutDefinition() {
@@ @@
    *
    * @param array $form
    *   The form Array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    * @param bool $multi
    *   Flag to indicate that multiple space separated values can be specified.
@@ @@
   /**
    * Handle getting config value from either a ERL form or Layout Builder form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state object.
    * @param string $region
    *   The region to use.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/layout_options/src/LayoutOptionPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations,.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/layout_options/src/Annotation/LayoutOption.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_options\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the option type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short description of the option.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


7) modules/contrib/layout_options/modules/layout_options_ui/src/Form/Settings.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;

@@ @@
   /**
    * The plugin cache clear object.
    *
-   * @var \Drupal\Core\ProxyClass\Plugin\CachedDiscoveryClearer
+   * @var CachedDiscoveryClearer
    */
   protected $pluginCacheClearer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

