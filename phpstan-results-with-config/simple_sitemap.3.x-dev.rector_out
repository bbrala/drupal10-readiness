modules/contrib/simple_sitemap/modules/simple_sitemap_engines/simple_sitemap_engines.install
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/simple_sitemap_engines.module
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Controller/SearchEngineListBuilder.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Entity/SearchEngine.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmitter.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/simple_sitemap_views.install
modules/contrib/simple_sitemap/modules/simple_sitemap_views/simple_sitemap_views.module
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/SimpleSitemapViews.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTest.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php
modules/contrib/simple_sitemap/simple_sitemap.api.php
modules/contrib/simple_sitemap/simple_sitemap.drush.inc
modules/contrib/simple_sitemap/simple_sitemap.install
modules/contrib/simple_sitemap/simple_sitemap.module
modules/contrib/simple_sitemap/src/Annotation/SitemapGenerator.php
modules/contrib/simple_sitemap/src/Annotation/SitemapType.php
modules/contrib/simple_sitemap/src/Annotation/UrlGenerator.php
modules/contrib/simple_sitemap/src/Commands/SimplesitemapCommands.php
modules/contrib/simple_sitemap/src/Controller/SimplesitemapController.php
modules/contrib/simple_sitemap/src/EntityHelper.php
modules/contrib/simple_sitemap/src/Form/FormHelper.php
modules/contrib/simple_sitemap/src/Form/SimplesitemapCustomLinksForm.php
modules/contrib/simple_sitemap/src/Form/SimplesitemapEntitiesForm.php
modules/contrib/simple_sitemap/src/Form/SimplesitemapFormBase.php
modules/contrib/simple_sitemap/src/Form/SimplesitemapSettingsForm.php
modules/contrib/simple_sitemap/src/Form/SimplesitemapSitemapsForm.php
modules/contrib/simple_sitemap/src/Form/SimplesitemapVariantsForm.php
modules/contrib/simple_sitemap/src/Logger.php
modules/contrib/simple_sitemap/src/PathProcessor/PathProcessorSitemapVariantIn.php
modules/contrib/simple_sitemap/src/PathProcessor/PathProcessorSitemapVariantOut.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SimplesitemapPluginBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/DefaultSitemapGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorInterface.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapType/DefaultHreflangSitemapType.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapType/SitemapTypeBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapType/SitemapTypeInterface.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapType/SitemapTypeManager.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorInterface.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php
modules/contrib/simple_sitemap/src/Queue/BatchTrait.php
modules/contrib/simple_sitemap/src/Queue/QueueWorker.php
modules/contrib/simple_sitemap/src/Queue/SimplesitemapQueue.php
modules/contrib/simple_sitemap/src/Simplesitemap.php
modules/contrib/simple_sitemap/src/SimplesitemapManager.php
modules/contrib/simple_sitemap/src/SimplesitemapSettings.php
modules/contrib/simple_sitemap/tests/scripts/performance_test.php
modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTest.php
modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTestBase.php

46 files with changes
=====================

1) modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_sitemap\Functional;

+use Drupal\simple_sitemap\Simplesitemap;
+use Drupal\Core\Database\Connection;
+use Drupal\user\Entity\User;
+use Drupal\node\Entity\Node;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * Simple sitemap generator.
    *
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

@@ @@
   /**
    * Database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * A user with all the permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $privilegedUser;

@@ @@
   /**
    * A node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * A node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->generator = $this->container->get('simple_sitemap.generator');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_sitemap\Functional;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * Verify sitemap.xml has the link to the front page after first generation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testInitialGeneration() {
     $this->generator->generateSitemap(QueueWorker::GENERATE_TYPE_BACKEND);
@@ @@
   /**
    * Test custom link.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testAddCustomLink() {
     $this->generator->addCustomLink(
@@ @@
   /**
    * Test default settings of custom links.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testAddCustomLinkDefaults() {
     $this->generator->removeCustomLinks()
@@ @@
   /**
    * Test removing custom paths from the sitemap settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testRemoveCustomLinks() {

@@ @@
   /**
    * Tests setting bundle settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo Add form tests
    */
@@ @@
   /**
    * Test default settings of bundles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testSetBundleSettingsDefaults() {
     $this->generator->setBundleSettings('node', 'page')
@@ @@
   /**
    * Test link count.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testLinkCount() {
     $this->generator->setBundleSettings('node', 'page')
@@ @@
   /**
    * Test the lastmod parameter in different scenarios.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testLastmod() {
     // Entity links should have 'lastmod'.
@@ @@
   /**
    * Tests the duplicate setting.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testRemoveDuplicatesSetting() {
     $this->generator->setBundleSettings('node', 'page')
@@ @@
   /**
    * Test max links setting and the sitemap index.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testMaxLinksSetting() {
     $this->generator->setBundleSettings('node', 'page')
@@ @@
   /**
    * @todo testGenerateDurationSetting
    */
-
   /**
    * Test setting the base URL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testBaseUrlSetting() {
     $this->generator->setBundleSettings('node', 'page')
@@ @@
   /**
    * Test overriding of bundle settings for a single entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo: Use form testing instead of responseContains().
    */
@@ @@

   /**
    * Tests that a page does not break if an entity has its id set.
+   * @doesNotPerformAssertions
    */
   public function testNewEntityWithIdSet() {
     $new_node = Node::create([
@@ @@
   /**
    * @todo Test indexing menu.
    */
-
   /**
    * @todo Test deleting a bundle.
    */
-
   /**
    * Test disabling sitemap support for an entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testDisableEntityType() {
     $this->generator->setBundleSettings('node', 'page')
@@ @@
   /**
    * Test enabling sitemap support for an entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo Test admin/config/search/simplesitemap/entities form.
    */
@@ @@
   /**
    * @todo testSitemapLanguages
    */
-
   /**
    * Test adding and removing sitemap variants.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ExpectationException
+   * @throws PluginException
    */
   public function testSitemapVariants() {

@@ @@
   }

   /**
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @dataProvider generationResumeProvider
    */
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_sitemap/tests/scripts/performance_test.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Database\Database;
@@ @@
 include_once 'core/tests/Drupal/Tests/RandomGeneratorTrait.php';

 $module_handler = \Drupal::moduleHandler();
-/** @var \Psr\Log\LoggerInterface $logger */
+/** @var LoggerInterface $logger */
 $logger = Drush::service('logger');
 if (!(\Drupal::moduleHandler()->moduleExists('simple_sitemap'))) {
   $logger->error("In order to use this script, simple_sitemap must be installed.");
@@ @@
   private $timerKey = 0;

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * @param bool $count_queries
    * @param $context
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function doBatchGenerateSitemap($count_queries = FALSE, &$context) {
     if ($count_queries) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/simple_sitemap/src/SimplesitemapSettings.php:10

    ---------- begin diff ----------
@@ @@
 class SimplesitemapSettings {

   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@

   /**
    * SimplesitemapSettings constructor.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    */
   public function __construct(ConfigFactory $config_factory) {
     $this->configFactory = $config_factory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/simple_sitemap/src/SimplesitemapManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Database\Connection;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeBase;
@@ @@
   const DEFAULT_SITEMAP_TYPE = 'default_hreflang';

   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;

   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeManager
+   * @var SitemapTypeManager
    */
   protected $sitemapTypeManager;

   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager
+   * @var UrlGeneratorManager
    */
   protected $urlGeneratorManager;

   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorManager
+   * @var SitemapGeneratorManager
    */
   protected $sitemapGeneratorManager;

   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapSettings
+   * @var SimplesitemapSettings
    */
   protected $settings;

@@ @@

   /**
    * SimplesitemapManager constructor.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeManager $sitemap_type_manager
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager $url_generator_manager
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorManager $sitemap_generator_manager
-   * @param \Drupal\simple_sitemap\SimplesitemapSettings $settings
+   * @param ConfigFactory $config_factory
+   * @param Connection $database
+   * @param SitemapTypeManager $sitemap_type_manager
+   * @param UrlGeneratorManager $url_generator_manager
+   * @param SitemapGeneratorManager $sitemap_generator_manager
+   * @param SimplesitemapSettings $settings
    */
   public function __construct(
     ConfigFactory $config_factory,
@@ @@

   /**
    * @param string $sitemap_generator_id
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return SitemapGeneratorBase
+   * @throws PluginException
    */
   public function getSitemapGenerator($sitemap_generator_id) {
     if (!isset($this->sitemapGenerators[$sitemap_generator_id])) {
@@ @@

   /**
    * @param string $url_generator_id
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorBase
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return UrlGeneratorBase
+   * @throws PluginException
    */
   public function getUrlGenerator($url_generator_id) {
     if (!isset($this->urlGenerators[$url_generator_id])) {
@@ @@
   }

   /**
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapType\SitemapTypeBase[]
+   * @return SitemapTypeBase[]
    */
   public function getSitemapTypes() {
     if (empty($this->sitemapTypes)) {
@@ @@
    * @param string $name
    * @param array $definition
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function addSitemapVariant($name, $definition = []) {
     $all_variants = $this->getSitemapVariants();
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function removeSitemap($variant_names = NULL) {
     if (NULL === $variant_names || !empty((array) $variant_names)) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function removeSitemapVariants($variant_names = NULL) {
     if (NULL === $variant_names || !empty((array) $variant_names)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/simple_sitemap/src/Simplesitemap.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Lock\LockBackendInterface;
@@ @@
 class Simplesitemap {

   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapSettings
+   * @var SimplesitemapSettings
    */
   protected $settings;

   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $manager;

   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

   /**
-   * @var \Drupal\simple_sitemap\Queue\QueueWorker
+   * @var QueueWorker
    */
   protected $queueWorker;

@@ @@
   protected $variants;

   /**
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

   /**
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

@@ @@

   /**
    * Simplesitemap constructor.
-   * @param \Drupal\simple_sitemap\EntityHelper $entity_helper
-   * @param \Drupal\simple_sitemap\SimplesitemapSettings $settings
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $manager
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Path\PathValidator $path_validator
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
-   * @param \Drupal\Component\Datetime\Time $time
-   * @param \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param EntityHelper $entity_helper
+   * @param SimplesitemapSettings $settings
+   * @param SimplesitemapManager $manager
+   * @param ConfigFactory $config_factory
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param PathValidator $path_validator
+   * @param DateFormatter $date_formatter
+   * @param Time $time
+   * @param QueueWorker $queue_worker
+   * @param LockBackendInterface $lock
+   * @param Logger $logger
    */
   public function __construct(
     EntityHelper $entity_helper,
@@ @@
   }

   /**
-   * @return \Drupal\simple_sitemap\Queue\QueueWorker
+   * @return QueueWorker
    */
   public function getQueueWorker() {
     return $this->queueWorker;
@@ @@
   }

   /**
-   * @return \Drupal\simple_sitemap\SimplesitemapManager
+   * @return SimplesitemapManager
    */
   public function getSitemapManager() {
     return $this->manager;
@@ @@
    * Removes sitemap instances for the currently set variants.
    *
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function removeSitemap() {
     $this->manager->removeSitemap($this->getVariants(FALSE));
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function generateSitemap($from = QueueWorker::GENERATE_TYPE_FORM) {
     if (!$this->lock->lockMayBeAvailable(QueueWorker::LOCK_ID)) {
@@ @@
    * Queues links from currently set variants.
    *
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function queue() {
     $this->queueWorker->queue($this->getVariants());
@@ @@
    * Deletes the queue and queues links from currently set variants.
    *
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue() {
     if (!$this->lock->lockMayBeAvailable(QueueWorker::LOCK_ID)) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @todo multiple variants
    */
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function removeBundleSettings($entity_type_id = NULL, $bundle_name = NULL) {
     if (empty($variants = $this->getVariants(FALSE))) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function setEntityInstanceSettings($entity_type_id, $id, $settings) {
     if (empty($variants = $this->getVariants(FALSE))) {
@@ @@
    *  Array of entity instance settings or the settings of its bundle. False if
    *  entity type or variant does not exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @todo multiple variants
    * @todo: May want to use Simplesitemap::supplementDefaultSettings('entity', $settings) inside here instead of calling it everywhere this method is called.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/simple_sitemap/src/Queue/SimplesitemapQueue.php:12

    ---------- begin diff ----------
@@ @@
 class SimplesitemapQueue extends DatabaseQueue {

   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * SimplesitemapQueue constructor.
    * @param $name
-   * @param \Drupal\Core\Database\Connection $connection
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Connection $connection
+   * @param Time $time
    */
   public function __construct($name, Connection $connection, Time $time) {
     parent::__construct($name, $connection);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/simple_sitemap/src/Queue/QueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Queue;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Lock\LockBackendInterface;
@@ @@
   const GENERATE_LOCK_TIMEOUT = 3600;

   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapSettings
+   * @var SimplesitemapSettings
    */
   protected $settings;

   /**
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $manager;

   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

   /**
-   * @var \Drupal\simple_sitemap\Queue\SimplesitemapQueue
+   * @var SimplesitemapQueue
    */
   protected $queue;

   /**
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@

   /**
    * QueueWorker constructor.
-   * @param \Drupal\simple_sitemap\SimplesitemapSettings $settings
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $manager
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\simple_sitemap\Queue\SimplesitemapQueue $element_queue
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param SimplesitemapSettings $settings
+   * @param SimplesitemapManager $manager
+   * @param StateInterface $state
+   * @param SimplesitemapQueue $element_queue
+   * @param Logger $logger
+   * @param ModuleHandlerInterface $module_handler
+   * @param LockBackendInterface $lock
    */
   public function __construct(SimplesitemapSettings $settings,
                               SimplesitemapManager $manager,
@@ @@
   /**
    * @param string[]|string|null $variants
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function queue($variants = NULL) {
     $type_definitions = $this->manager->getSitemapTypes();
@@ @@
   /**
    * @param string[]|string|null $variants
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue($variants = NULL) {
     if (!$this->lock->acquire(static::LOCK_ID)) {
@@ @@
   /**
    * @param string $from
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function generateSitemap($from = self::GENERATE_TYPE_FORM) {

@@ @@

   /**
    * @param $element
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function generateResultsFromElement($element) {
     $results = $this->manager->getUrlGenerator($element->data['url_generator'])
@@ @@

   /**
    * @param bool $complete
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function generateVariantChunksFromResults($complete = FALSE) {
     if (!empty($this->results)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/simple_sitemap/src/Queue/BatchTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Queue;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

 trait BatchTrait {
@@ @@

   /**
    * @param $context
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Variants into generateSitemap().
    */
   public static function doBatchGenerateSitemap(&$context) {

-    /** @var \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker */
+    /** @var QueueWorker $queue_worker */
     $queue_worker = \Drupal::service('simple_sitemap.queue_worker');

     $queue_worker->generateSitemap();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * UrlGeneratorManager constructor.
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     \Traversable $namespaces,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php:13

    ---------- begin diff ----------
@@ @@
 abstract class UrlGeneratorBase extends SimplesitemapPluginBase implements UrlGeneratorInterface {

   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

   /**
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Simplesitemap $generator
+   * @param Logger $logger
    */
   public function __construct(
     array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator;

+use Drupal\Core\Language\LanguageInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
 abstract class EntityUrlGeneratorBase extends UrlGeneratorBase {

   /**
-   * @var \Drupal\Core\Language\LanguageInterface[]
+   * @var LanguageInterface[]
    */
   protected $languages;

@@ @@
   protected $defaultLanguageId;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $anonUser;

   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
+   * @param Simplesitemap $generator
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param Logger $logger
+   * @param EntityHelper $entityHelper
    */
   public function __construct(
     array $configuration,
@@ @@

   /**
    * @param array $path_data
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getUrlVariants(array $path_data, Url $url_object) {
     $url_variants = [];
@@ @@
   }

   /**
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    * @return array
    */
   protected function getAlternateUrlsForDefaultLanguage(Url $url_object) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
-   * @param \Drupal\Core\Url $url_object
+   * @param ContentEntityInterface $entity
+   * @param Url $url_object
    * @return array
    */
   protected function getAlternateUrlsForTranslatedLanguages(ContentEntityInterface $entity, Url $url_object) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    * @return array
    */
   protected function getAlternateUrlsForAllLanguages(Url $url_object) {
@@ @@
   /**
    * @param mixed $data_set
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function generate($data_set) {
     $path_data = $this->processDataSet($data_set);
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php:23

    ---------- begin diff ----------
@@ @@
 class EntityUrlGenerator extends EntityUrlGeneratorBase {

   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager
+   * @var UrlGeneratorManager
    */
   protected $urlGeneratorManager;

@@ @@
   protected $entitiesPerDataset;

   /**
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   protected $entityMemoryCache;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager $url_generator_manager
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityHelper $entityHelper
+   * @param UrlGeneratorManager $url_generator_manager
+   * @param MemoryCacheInterface $memory_cache
    */
   public function __construct(
     array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator;

+use Drupal\Core\Menu\MenuLinkTree;
 use Drupal\simple_sitemap\EntityHelper;
 use Drupal\simple_sitemap\Logger;
 use Drupal\simple_sitemap\Simplesitemap;
@@ @@
 class EntityMenuLinkContentUrlGenerator extends EntityUrlGeneratorBase {

   /**
-   * @var \Drupal\Core\Menu\MenuLinkTree
+   * @var MenuLinkTree
    */
   protected $menuLinkTree;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityHelper $entityHelper
+   * @param MenuLinkTreeInterface $menu_link_tree
    */
   public function __construct(
     array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php:28

    ---------- begin diff ----------
@@ @@


   /**
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\Core\Path\PathValidator $path_validator
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param LanguageManagerInterface $language_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityHelper $entityHelper
+   * @param PathValidator $path_validator
    */
   public function __construct(
     array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php:25

    ---------- begin diff ----------
@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Logger $logger
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param Simplesitemap $generator
+   * @param Logger $logger
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapType/SitemapTypeManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * SitemapTypeManager constructor.
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     \Traversable $namespaces,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator;

+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Core\Routing\RouteProviderInterface;

 /**
@@ @@
   const ENCODING = 'UTF-8';

   /**
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * SitemapGeneratorManager constructor.
    * @param \Traversable $namespaces
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param CacheBackendInterface $cache_backend
+   * @param ModuleHandlerInterface $module_handler
    */
   public function __construct(
     \Traversable $namespaces,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator;

+use Drupal\Core\GeneratedUrl;
+use Drupal\language\LanguageNegotiatorInterface;
 use Drupal\Core\Url;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SimplesitemapPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   const XMLNS = 'http://www.sitemaps.org/schemas/sitemap/0.9';

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;

   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   protected $settings;

   /**
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapWriter
+   * @var SitemapWriter
    */
   protected $writer;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
-   * @param \Drupal\Component\Datetime\Time $time
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapWriter $sitemap_writer
+   * @param Connection $database
+   * @param ModuleHandlerInterface $module_handler
+   * @param LanguageManagerInterface $language_manager
+   * @param Time $time
+   * @param SitemapWriter $sitemap_writer
    */
   public function __construct(
     array $configuration,
@@ @@

   /**
    * @param null $delta
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    */
   public function getSitemapUrl($delta = NULL) {
     $parameters = NULL !== $delta ? ['page' => $delta] : [];
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\language\LanguageNegotiatorInterface $language_negotiator */
+    /** @var LanguageNegotiatorInterface $language_negotiator */
     $language_negotiator = \Drupal::service('language_negotiator');

     $url_negotiation_method_enabled = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SimplesitemapPluginBase.php:23

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/simple_sitemap/src/Logger.php:25

    ---------- begin diff ----------
@@ @@
   const DISPLAY_MESSAGE_TYPE_DEFAULT = 'status';

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@

   /**
    * Logger constructor.
-   * @param \Psr\Log\LoggerInterface $logger
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param LoggerInterface $logger
+   * @param MessengerInterface $messenger
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(
     LoggerInterface $logger,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/simple_sitemap/src/Form/SimplesitemapSitemapsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Datetime\DateFormatter;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class SimplesitemapSitemapsForm extends SimplesitemapFormBase {

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;

   /**
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

   /**
    * SimplesitemapSitemapsForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param Connection $database
+   * @param DateFormatter $date_formatter
    */
   public function __construct(
     Simplesitemap $generator,
@@ @@
         '#percent' => $percent,
         '#message' => $this->t('@indexed out of @total queue items have been processed.<br>Each sitemap variant is published after all of its items have been processed.', ['@indexed' => $indexed_count, '@total' => $total_count]),
       ];
-      $form['simple_sitemap_settings']['status']['progress']['bar']['#markup'] = render($index_progress);
+      $form['simple_sitemap_settings']['status']['progress']['bar']['#markup'] = \Drupal::service('renderer')->render($index_progress);
     }
     else {
       $form['simple_sitemap_settings']['status']['progress']['bar']['#markup'] = '<div class="description">' . $this->t('There are no items to be indexed.') . '</div>';
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @param FormStateInterface $form_state
+   * @throws PluginException
    */
   public function generateSitemap(array &$form, FormStateInterface $form_state) {
     $this->generator->generateSitemap();
@@ @@

   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @param FormStateInterface $form_state
+   * @throws PluginException
    */
   public function rebuildQueue(array &$form, FormStateInterface $form_state) {
     $this->generator->rebuildQueue();
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/simple_sitemap/src/Form/SimplesitemapSettingsForm.php:14

    ---------- begin diff ----------
@@ @@
 class SimplesitemapSettingsForm extends SimplesitemapFormBase {

   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

   /**
    * SimplesitemapSettingsForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param LanguageManagerInterface $language_manager
    */
   public function __construct(
     Simplesitemap $generator,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/simple_sitemap/src/Form/SimplesitemapFormBase.php:12

    ---------- begin diff ----------
@@ @@
 abstract class SimplesitemapFormBase extends ConfigFormBase {

   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

   /**
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;

   /**
    * SimplesitemapFormBase constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
    */
   public function __construct(
     Simplesitemap $generator,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/simple_sitemap/src/Form/SimplesitemapEntitiesForm.php:13

    ---------- begin diff ----------
@@ @@
 class SimplesitemapEntitiesForm extends SimplesitemapFormBase {

   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

   /**
    * SimplesitemapEntitiesForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\simple_sitemap\EntityHelper $entity_helper
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param EntityHelper $entity_helper
    */
   public function __construct(
     Simplesitemap $generator,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/simple_sitemap/src/Form/SimplesitemapCustomLinksForm.php:13

    ---------- begin diff ----------
@@ @@
 class SimplesitemapCustomLinksForm extends SimplesitemapFormBase {

   /**
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;

   /**
    * SimplesitemapCustomLinksForm constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
-   * @param \Drupal\Core\Path\PathValidator $path_validator
+   * @param Simplesitemap $generator
+   * @param FormHelper $form_helper
+   * @param PathValidator $path_validator
    */
   public function __construct(
     Simplesitemap $generator,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/simple_sitemap/src/Form/FormHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Form;

+use Drupal\Core\Form\FormState;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityType;
+use Drupal\Core\Entity\EntityBase;
+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\simple_sitemap\EntityHelper;
@@ @@
   const PRIORITY_DIVIDER = 10;

   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

   /**
-   * @var \Drupal\simple_sitemap\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

   /**
-   * @var \Drupal\Core\Form\FormState
+   * @var FormState
    */
   protected $formState;

@@ @@

   /**
    * FormHelper constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
-   * @param \Drupal\simple_sitemap\EntityHelper $entityHelper
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param Simplesitemap $generator
+   * @param EntityHelper $entityHelper
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(
     Simplesitemap $generator,
@@ @@
   }

   /**
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   *
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function processForm(FormStateInterface $form_state) {
     $this->formState = $form_state;
@@ @@

   /**
    * @return $this
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function negotiateSettings() {

@@ @@
       $this->setEntityCategory('instance');
     }
     else {
-      /** @var \Drupal\Core\Entity\EntityType $sitemap_entity_type */
+      /** @var EntityType $sitemap_entity_type */
       foreach ($sitemap_entity_types as $sitemap_entity_type) {
         if ($sitemap_entity_type->getBundleEntityType() === $entity_type_id) {
           $this->setEntityCategory('bundle');
@@ @@
   /**
    * Gets the object entity of the form if available.
    *
-   * @return \Drupal\Core\Entity\EntityBase|false
+   * @return EntityBase|false
    *   Entity or FALSE if non-existent or if form operation is
    *   'delete'.
    */
@@ @@
    * @return array
    */
   public static function getCronIntervalOptions() {
-    /** @var \Drupal\Core\Datetime\DateFormatter $formatter */
+    /** @var DateFormatter $formatter */
     $formatter = \Drupal::service('date.formatter');
     $intervals = array_flip(self::$cronIntervals);
     foreach ($intervals as $interval => &$label) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/simple_sitemap/src/EntityHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
    * EntityHelper constructor.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param ConfigFactoryInterface $configFactory
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ConfigFactoryInterface $configFactory) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   /**
    * Gets an entity's bundle name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the bundle name for.
    *
    * @return string
@@ @@
   /**
    * Gets the entity type id for a bundle.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get an entity type id for a bundle.
    *
    * @return null|string
@@ @@
   /**
    * Determines if an entity type is supported or not.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    * @return bool
    *   TRUE if entity type supported by Simple Sitemap, FALSE if not.
    */
@@ @@
   /**
    * Gets the entity from URL object.
    *
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    *   The URL object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An entity object. NULL if no matching entity is found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityFromUrlObject(Url $url_object) {
     if ($url_object->isRouted()) {
@@ @@
    * @return array
    *   An array of entity IDs
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityInstanceIds($entity_type_id, $bundle_name = NULL) {
     $sitemap_entity_types = $this->getSupportedEntityTypes();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/simple_sitemap/src/Controller/SimplesitemapController.php:16

    ---------- begin diff ----------
@@ @@
 class SimplesitemapController extends ControllerBase {

   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

   /**
    * SimplesitemapController constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    */
   public function __construct(Simplesitemap $generator) {
     $this->generator = $generator;
@@ @@
    * or its sitemap index file.
    * Caches the response in case of expected output, prevents caching otherwise.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *  The request object.
    *
    * @param string $variant
@@ @@
    *
    * @throws NotFoundHttpException
    *
-   * @return \Symfony\Component\HttpFoundation\Response|false
+   * @return Response|false
    *  Returns an XML response.
    */
   public function getSitemap(Request $request, $variant = NULL) {
@@ @@
   /**
    * Returns the XML stylesheet for the sitemap.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function getSitemapXsl() {

     // Read the XSL content from the file.
-    $module_path = drupal_get_path('module', 'simple_sitemap');
+    $module_path = \Drupal::service('extension.list.module')->getPath('simple_sitemap');
     $xsl_content = file_get_contents($module_path . '/xsl/simple_sitemap.xsl');

     // Replace custom tokens in the XSL content with appropriate values.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/simple_sitemap/src/Commands/SimplesitemapCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Commands;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\simple_sitemap\Queue\QueueWorker;
 use Drupal\simple_sitemap\Simplesitemap;
 use Drush\Commands\DrushCommands;
@@ @@
 class SimplesitemapCommands extends DrushCommands {

   /**
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

   /**
    * SimplesitemapCommands constructor.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    */
   public function __construct(Simplesitemap $generator) {
     $this->generator = $generator;
@@ @@
    *
    * @param array $options
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue(array $options = ['variants' => '']) {
     $variants = array_keys($this->generator->getSitemapManager()->getSitemapVariants(NULL, FALSE));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/simple_sitemap/src/Annotation/UrlGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;

@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


33) modules/contrib/simple_sitemap/src/Annotation/SitemapType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;

@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


34) modules/contrib/simple_sitemap/src/Annotation/SitemapGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;

@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


35) modules/contrib/simple_sitemap/simple_sitemap.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\simple_sitemap\Form\FormHelper;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\simple_sitemap\Simplesitemap;
+use Drupal\simple_sitemap\EntityHelper;
 /**
  * @file
  * Main module file containing hooks.
@@ @@
  * Implements hook_help().
  *
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
- * @return \Drupal\Component\Render\MarkupInterface|null
+ * @param RouteMatchInterface $route_match
+ * @return MarkupInterface|null
  */
 function simple_sitemap_help($route_name, RouteMatchInterface $route_match) {
   return $route_name === 'help.page.simple_sitemap'
@@ @@
  * Adds sitemap settings to entity types that are supported via plugins.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $form_id
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_form_alter(&$form, FormStateInterface $form_state, $form_id) {

-  /** @var Drupal\simple_sitemap\Form\FormHelper $f */
+  /** @var FormHelper $f */
   $f = \Drupal::service('simple_sitemap.form_helper');
   if (!$f->processForm($form_state)) {
     return;
@@ @@
  * Form submission handler called in hook_form_alter.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @param FormStateInterface $form_state
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_entity_form_submit($form, FormStateInterface &$form_state) {

-  /** @var Drupal\simple_sitemap\Form\FormHelper $f */
+  /** @var FormHelper $f */
   $f = \Drupal::service('simple_sitemap.form_helper');
   if (!$f->processForm($form_state)) {
     return;
@@ @@

   if ($f->valuesChanged($form, $values)) {

-    /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+    /** @var Simplesitemap $generator */
     $generator = \Drupal::service('simple_sitemap.generator');

     foreach ($generator->getSitemapManager()->getSitemapVariants(NULL, FALSE) as $variant => $definition) {
@@ @@
  */
 function simple_sitemap_cron() {

-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');

   if ($generator->getSetting('cron_generate')) {
@@ @@
  */
 function simple_sitemap_configurable_language_delete(ConfigurableLanguageInterface $language) {

-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');

   $excluded_languages = $generator->getSetting('excluded_languages');
@@ @@
  *
  * Removes settings of the removed entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  */
 function simple_sitemap_entity_delete(EntityInterface $entity) {

-  /** @var \Drupal\simple_sitemap\EntityHelper $entity_helper */
+  /** @var EntityHelper $entity_helper */
   $entity_helper = \Drupal::service('simple_sitemap.entity_helper');
   if ($entity_helper->supports($entity->getEntityType())) {

-    /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+    /** @var Simplesitemap $generator */
     $generator = \Drupal::service('simple_sitemap.generator');
     $generator->setVariants(TRUE)->removeEntityInstanceSettings(
       $entity->getEntityTypeId(), $entity->id()
@@ @@
  *
  * @param string $entity_type_id
  * @param string $bundle
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_entity_bundle_delete($entity_type_id, $bundle) {

-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->setVariants(TRUE)->removeBundleSettings($entity_type_id, $bundle);
 }
@@ @@
  *
  * Removes settings for the removed menu.
  *
- * @param \Drupal\system\MenuInterface $menu
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @param MenuInterface $menu
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_menu_delete(MenuInterface $menu) {

-  /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+  /** @var Simplesitemap $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->setVariants(TRUE)->removeBundleSettings('menu_link_content', $menu->id());
 }
@@ @@
 function simple_sitemap_page_attachments_alter(array &$attachments) {
   if (!empty($attachments['#attached']['html_head_link'])) {

-    /** @var \Drupal\simple_sitemap\Simplesitemap $generator */
+    /** @var Simplesitemap $generator */
     $generator = \Drupal::service('simple_sitemap.generator');

     if ($generator->getSetting('disable_language_hreflang')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


36) modules/contrib/simple_sitemap/simple_sitemap.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap\SimplesitemapManager;
 /**
  * @file
  * Module install and update procedures.
@@ @@
       ->save();
   }

-  /** @var \Drupal\simple_sitemap\SimplesitemapManager $manager */
+  /** @var SimplesitemapManager $manager */
   $manager = \Drupal::service('simple_sitemap.manager');
   $variants = $manager->getSitemapVariants();
   if (!isset($variants[$default_variant])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


37) modules/contrib/simple_sitemap/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_sitemap_views\Functional;

+use Drupal\Core\CronInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Tests\simple_sitemap\Functional\SimplesitemapTestBase;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
 use Drupal\views\Views;
@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * The cron service.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;

@@ @@
   /**
    * Test view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $testView;

@@ @@
   /**
    * Test view 2.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $testView2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->sitemapViews = $this->container->get('simple_sitemap.views');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/SimpleSitemapViews.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\simple_sitemap_views\Plugin\views\display_extender\SimpleSitemapDisplayExtender;
 use Drupal\simple_sitemap\SimplesitemapManager;
 use Drupal\Core\Database\Query\ConditionInterface;
@@ @@
   /**
    * Simple XML Sitemap manager.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $sitemapManager;

@@ @@
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The current active database's master connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * SimpleSitemapViews constructor.
    *
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager
+   * @param SimplesitemapManager $sitemap_manager
    *   Simple XML Sitemap manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The current active database's master connection.
    */
   public function __construct(
@@ @@
   /**
    * Gets the display extender.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string|null $display_id
    *   The display id. If empty uses the current display.
    *
-   * @return \Drupal\simple_sitemap_views\Plugin\views\display_extender\SimpleSitemapDisplayExtender|null
+   * @return SimpleSitemapDisplayExtender|null
    *   The display extender.
    */
   public function getDisplayExtender(ViewExecutable $view, $display_id = NULL) {
@@ @@
   /**
    * Gets the sitemap settings for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The name of the sitemap variant.
@@ @@
   /**
    * Gets the indexable arguments for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The name of the sitemap variant.
@@ @@
   /**
    * Adds view arguments to the index.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param array $args
    *   Array of arguments to add to the index.
@@ @@
   /**
    * Adds view arguments to the index by the sitemap variant.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The name of the sitemap variant.
@@ @@
   /**
    * Get arguments from index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    * @param int|null $limit
    *   The number of records to return from the result set. If NULL, returns
@@ @@
   /**
    * Get the number of rows in the index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    *
    * @return int
@@ @@
    *
    * @param int $position
    *   Position of the record.
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    *
    * @return int|bool
@@ @@
   /**
    * Remove arguments from index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    */
   public function removeArgumentsFromIndex(ConditionInterface $condition = NULL) {
@@ @@
   /**
    * Returns an array of view displays that use the route.
    *
-   * @param \Drupal\views\ViewEntityInterface $view_entity
+   * @param ViewEntityInterface $view_entity
    *   The config entity in which the view is stored.
    *
    * @return array
@@ @@
   /**
    * Returns an array of executable views whose current display is indexable.
    *
-   * @return \Drupal\views\ViewExecutable[]
+   * @return ViewExecutable[]
    *   An array of ViewExecutable instances.
    */
   public function getIndexableViews() {
@@ @@
     }

     $indexable_views = [];
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     foreach ($this->viewStorage->loadMultiple($view_ids) as $view_entity) {
       foreach ($this->getRouterDisplayIds($view_entity) as $display_id) {
         $view = Views::executableFactory()->get($view_entity);
@@ @@
   /**
    * Returns an array of indexable sitemap variants for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string|null $display_id
    *   The display id. If empty uses the current display.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


39) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views\Plugin\views\display_extender;

+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\views\Plugin\views\display_extender\DisplayExtenderPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\views\Plugin\views\display\DisplayRouterInterface;
@@ @@
   /**
    * Simple XML Sitemap form helper.
    *
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;

@@ @@
   /**
    * Simple XML Sitemap manager.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $sitemapManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Simple XML Sitemap form helper.
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager
+   * @param SimplesitemapManager $sitemap_manager
    *   Simple XML Sitemap manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormHelper $form_helper, SimplesitemapManager $sitemap_manager) {
@@ @@
     $arguments = $this->displayHandler->getHandlers('argument');
     $arguments_options = [];

-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $id => $argument) {
       $arguments_options[$id] = $argument->adminLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   The simple_sitemap.generator service.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   The simple_sitemap.logger service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   The simple_sitemap.entity_helper service.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(
@@ @@
   /**
    * Clears the URL from parameters that are not present in the arguments.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL object.
    * @param array $args
    *   Array of arguments.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views\Plugin\QueueWorker;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\views\ViewEntityInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
@@ @@
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, SimpleSitemapViews $sitemap_views) {
@@ @@
    */
   public function processItem($data) {
     $view_id = $data['view_id'];
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     $view_entity = $this->viewStorage->load($view_id);
     $display_ids = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views\EventSubscriber;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Drupal\views\ViewEntityInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ @@
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * ArgumentCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The currently active route match object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SimpleSitemapViews $sitemap_views, RouteMatchInterface $route_match) {
@@ @@
   /**
    * Collect information about views arguments.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   Object of event after a response was sent.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     // Only successful requests are interesting.
     // Collect information about arguments only if views support is enabled.
     if (!$event->getResponse()->isSuccessful() || !$this->sitemapViews->isEnabled()) {
@@ @@
     }

     $view_id = $this->routeMatch->getParameter('view_id');
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     if ($view_id && $view_entity = $this->viewStorage->load($view_id)) {
       $display_id = $this->routeMatch->getParameter('display_id');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * SimpleSitemapViewsController constructor.
    *
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
    */
   public function __construct(SimpleSitemapViews $sitemap_views) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmitter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_engines\Plugin\QueueWorker;

+use Drupal\simple_sitemap_engines\Entity\SearchEngine;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * The EntityStorage service.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $engineStorage;

@@ @@
   /**
    * The HTTP Client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The sitemap generator service.
    *
-   * @var \Drupal\simple_sitemap\Simplesitemap
+   * @var Simplesitemap
    */
   protected $generator;

@@ @@
   /**
    * The Drupal logger service.
    *
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *   The plugin id.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $engine_storage
+   * @param EntityStorageInterface $engine_storage
    *   The EntityStorageInterface.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The client used to submit to engines.
-   * @param \Drupal\simple_sitemap\Simplesitemap $generator
+   * @param Simplesitemap $generator
    *   The generator service.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Standard logger.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   Drupal state service for last submitted.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(array $configuration,
@@ @@
    * {@inheritdoc}
    */
   public function processItem($engine_id) {
-    /** @var \Drupal\simple_sitemap_engines\Entity\SearchEngine $engine */
+    /** @var SearchEngine $engine */
     if ($engine = $this->engineStorage->load($engine_id)) {

       $sitemap_urls = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The sitemap manager service.
    *
-   * @var \Drupal\simple_sitemap\SimplesitemapManager
+   * @var SimplesitemapManager
    */
   protected $sitemapManager;

@@ @@
   /**
    * SimplesitemapEnginesForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\simple_sitemap\SimplesitemapManager $sitemap_manager
+   * @param SimplesitemapManager $sitemap_manager
    *   The sitemap manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, DateFormatter $date_formatter, SimplesitemapManager $sitemap_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Controller/SearchEngineListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_engines\Controller;

+use Drupal\simple_sitemap_engines\Entity\SearchEngine;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * SearchEngineListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(EntityTypeInterface $entity_type,
@@ @@
   public function buildRow(EntityInterface $entity) {
     $last_submitted = $this->state->get("simple_sitemap_engines.simple_sitemap_engine.{$entity->id()}.last_submitted", -1);

-    /** @var \Drupal\simple_sitemap_engines\Entity\SearchEngine $entity */
+    /** @var SearchEngine $entity */
     $row['label'] = $entity->label();
     $row['url'] = $entity->url;
     $row['variants'] = implode(', ', $entity->sitemap_variants);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 46 files have been changed by Rector                                      

