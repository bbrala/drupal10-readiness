modules/contrib/library_manager/library_manager.drush.inc
modules/contrib/library_manager/library_manager.module
modules/contrib/library_manager/src/Commands/LibraryManagerCommands.php
modules/contrib/library_manager/src/Controller/LibraryCollectionController.php
modules/contrib/library_manager/src/Controller/LibraryDefinitionListBuilder.php
modules/contrib/library_manager/src/Controller/LibraryDetailsController.php
modules/contrib/library_manager/src/Entity/LibraryDefinition.php
modules/contrib/library_manager/src/Form/AssetsCheckForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionBuildForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionCssDeleteForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionCssForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionDeleteForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionDuplicateForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionJsDeleteForm.php
modules/contrib/library_manager/src/Form/LibraryDefinitionJsForm.php
modules/contrib/library_manager/src/Form/SettingsForm.php
modules/contrib/library_manager/src/LibraryDefinitionInterface.php
modules/contrib/library_manager/src/LibraryDiscovery.php
modules/contrib/library_manager/src/LibraryDiscoveryInterface.php
modules/contrib/library_manager/tests/src/Functional/AccessTest.php
modules/contrib/library_manager/tests/src/Functional/AssetsCheckFormTest.php
modules/contrib/library_manager/tests/src/Functional/CodeMirrorAssetsTest.php
modules/contrib/library_manager/tests/src/Functional/LibraryAutoLoadTest.php
modules/contrib/library_manager/tests/src/Functional/LibraryDefinitionAssetsTest.php
modules/contrib/library_manager/tests/src/Functional/LibraryDefinitionBuildFormTest.php
modules/contrib/library_manager/tests/src/Functional/LibraryDefinitionTest.php
modules/contrib/library_manager/tests/src/Functional/LibraryInformationTest.php
modules/contrib/library_manager/tests/src/Functional/LibraryOverrideTest.php
modules/contrib/library_manager/tests/src/Functional/SettingsFormTest.php
modules/contrib/library_manager/tests/src/Functional/TestBase.php
modules/contrib/library_manager/tests/src/FunctionalJavascript/LibraryFilterTest.php
modules/contrib/library_manager/tests/src/Kernel/LibraryDiscoveryTest.php
modules/contrib/library_manager/tests/src/Unit/LocalTasksTest.php

19 files with changes
=====================

1) modules/contrib/library_manager/tests/src/FunctionalJavascript/LibraryFilterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\library_manager\FunctionalJavascript;

+use Behat\Mink\Element\NodeElement;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
     $page = $this->getSession()->getPage();
     $rows = $page->findAll('css', '[data-drupal-selector = "library-list"] tbody tr:not(.empty-row)');
     $rows = array_filter($rows, function ($row) {
-      /** @var \Behat\Mink\Element\NodeElement $row */
+      /** @var NodeElement $row */
       return $row->isVisible();
     });
     return count($rows);
@@ @@
    */
   protected function assertEmptyRow($visible) {
     $page = $this->getSession()->getPage();
-    /** @var \Behat\Mink\Element\NodeElement $empty_row */
+    /** @var NodeElement $empty_row */
     $empty_row = $page->findAll('css', '.empty-row')[0];
     $visible ?
       $this->assertTrue($empty_row->isVisible()) :
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/library_manager/src/LibraryDiscovery.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler service.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs the controller object.
    *
-   * @param \Drupal\Core\Cache\CacheCollectorInterface $library_discovery_collector
+   * @param CacheCollectorInterface $library_discovery_collector
    *   The library discovery cache collector.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
    * @param string $root
    *   The app root.
@@ @@
    * {@inheritdoc}
    */
   public function getExtensionPath($extension) {
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
     $path = $extension == 'core' ?
       'core' :
-      drupal_get_path($this->moduleHandler->moduleExists($extension) ? 'module' : 'theme', $extension);
+      \Drupal::service('extension.path.resolver')->getPath($this->moduleHandler->moduleExists($extension) ? 'module' : 'theme', $extension);

     return $path . '/';
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/library_manager/src/LibraryDefinitionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager;

+use Drupal\Core\Condition\ConditionInterface;
+use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Gets conditions for this block.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   An array or collection of configured condition plugins.
    */
   public function getVisibilityConditions();
@@ @@
    * @param string $instance_id
    *   The condition plugin instance ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   A condition plugin.
    */
   public function getVisibilityCondition($instance_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/library_manager/src/Form/SettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\library_manager\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * Constructs the form object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\library_manager\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The discovery service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LibraryDiscoveryInterface $library_discovery) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/library_manager/src/Form/LibraryDefinitionJsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Form;

+use Drupal\library_manager\LibraryDefinitionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
 /**
  * Library definition js form.
  *
- * @property \Drupal\library_manager\LibraryDefinitionInterface $entity
+ * @property LibraryDefinitionInterface $entity
  */
 class LibraryDefinitionJsForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/library_manager/src/Form/LibraryDefinitionJsDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Form;

+use Drupal\library_manager\LibraryDefinitionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
 /**
  * Library definition JS form.
  *
- * @property \Drupal\library_manager\LibraryDefinitionInterface $entity
+ * @property LibraryDefinitionInterface $entity
  */
 class LibraryDefinitionJsDeleteForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/library_manager/src/Form/LibraryDefinitionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Form;

+use Drupal\library_manager\LibraryDefinitionInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 /**
  * Library definition form.
  *
- * @property \Drupal\library_manager\LibraryDefinitionInterface $entity
+ * @property LibraryDefinitionInterface $entity
  */
 class LibraryDefinitionForm extends EntityForm {

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * Constructs the form object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   Condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConditionManager $condition_manager) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@

     foreach ($this->conditionManager->getDefinitions() as $condition_id => $definition) {

-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $this->conditionManager->createInstance($condition_id, isset($visibility[$condition_id]) ? $visibility[$condition_id] : []);
       $form_state->set(['conditions', $condition_id], $condition);
       $condition_form = $condition->buildConfigurationForm([], $form_state);
@@ @@
    *
    * @param array $form
    *   A nested array form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function validateVisibility(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/library_manager/src/Form/LibraryDefinitionDuplicateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Form;

+use Drupal\library_manager\LibraryDefinitionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\library_manager\Entity\LibraryDefinition;
@@ @@
 /**
  * Form controller for the Views duplicate form.
  *
- * @property \Drupal\library_manager\LibraryDefinitionInterface $entity
+ * @property LibraryDefinitionInterface $entity
  */
 class LibraryDefinitionDuplicateForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/library_manager/src/Form/LibraryDefinitionCssForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Form;

+use Drupal\library_manager\LibraryDefinitionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
 /**
  * Library definition CSS form.
  *
- * @property \Drupal\library_manager\LibraryDefinitionInterface $entity
+ * @property LibraryDefinitionInterface $entity
  */
 class LibraryDefinitionCssForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/library_manager/src/Form/LibraryDefinitionCssDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Form;

+use Drupal\library_manager\LibraryDefinitionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
 /**
  * Library definition CSS form.
  *
- * @property \Drupal\library_manager\LibraryDefinitionInterface $entity
+ * @property LibraryDefinitionInterface $entity
  */
 class LibraryDefinitionCssDeleteForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/library_manager/src/Form/LibraryDefinitionBuildForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Form;

+use Drupal\library_manager\LibraryDefinitionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
 /**
  * Builds the form to create a library definition from existing library.
  *
- * @property \Drupal\library_manager\LibraryDefinitionInterface $entity
+ * @property LibraryDefinitionInterface $entity
  */
 class LibraryDefinitionBuildForm extends EntityForm {

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\library_manager\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * Constructs the form object.
    *
-   * @param \Drupal\library_manager\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The discovery service.
    */
   public function __construct(LibraryDiscoveryInterface $library_discovery) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/library_manager/src/Form/AssetsCheckForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\library_manager\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a AssetsReportForm object.
    *
-   * @param \Drupal\library_manager\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The discovery service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The formatter service.
    */
   public function __construct(LibraryDiscoveryInterface $library_discovery, StateInterface $state, DateFormatterInterface $date_formatter) {
@@ @@
       foreach (['css', 'js'] as $asset_type) {
         foreach ($library_info[$asset_type] as $file) {
           if ($file['type'] == 'file') {
-            $operations[] = [$processCallback, [file_create_url($file['data'])]];
+            $operations[] = [$processCallback, [\Drupal::service('file_url_generator')->generateAbsoluteString($file['data'])]];
           }
           elseif ($file['type'] == 'external') {
             $operations[] = [$processCallback, [$file['data']]];
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/library_manager/src/Entity/LibraryDefinition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Entity;

+use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * Gets the condition plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface
+   * @return ExecutableManagerInterface
    *   The condition plugin manager.
    */
   protected function conditionPluginManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/library_manager/src/Controller/LibraryDetailsController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\library_manager\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The serialization service.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $serializer;

@@ @@
   /**
    * Constructs the controller object.
    *
-   * @param \Drupal\library_manager\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The discovery service.
-   * @param \Drupal\Component\Serialization\SerializationInterface $serializer
+   * @param SerializationInterface $serializer
    *   The serialization service.
    */
   public function __construct(LibraryDiscoveryInterface $library_discovery, SerializationInterface $serializer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/library_manager/src/Controller/LibraryDefinitionListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Controller;

+use Drupal\library_manager\LibraryDefinitionInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\library_manager\LibraryDefinitionInterface $entity */
+    /** @var LibraryDefinitionInterface $entity */
     $row['id'] = $entity->id();
     $row['version'] = $entity->get('version');
     $row['load'] = $entity->get('load') ? $this->t('Yes') : $this->t('No');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/library_manager/src/Controller/LibraryCollectionController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\library_manager\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * Constructs the controller object.
    *
-   * @param \Drupal\library_manager\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The discovery service.
    */
   public function __construct(LibraryDiscoveryInterface $library_discovery) {
@@ @@
   /**
    * Builds autocomplete response for the library ID.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed keys.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched library ID as a JSON response.
    */
   public function buildAutocomplete(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/library_manager/src/Commands/LibraryManagerCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\library_manager\Commands;

+use Drush\Log\Logger;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\State\StateInterface;
@@ @@
 /**
  * Drush integration for Library manager module.
  *
- * @property \Drush\Log\Logger $logger
+ * @property Logger $logger
  */
 class LibraryManagerCommands extends DrushCommands {

@@ @@
   /**
    * Library discovery.
    *
-   * @var \Drupal\library_manager\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * YAML serialization service.
    *
-   * @var \Drupal\Component\Serialization\Yaml
+   * @var Yaml
    */
   protected $serializer;

@@ @@
   /**
    * The HTTP client to fetch the feed data with.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The state backend.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * LibraryManagerCommands constructor.
    *
-   * @param \Drupal\library_manager\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   Library discovery.
-   * @param \Drupal\Component\Serialization\Yaml $serializer
+   * @param Yaml $serializer
    *   YAML serializer.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The Guzzle HTTP client.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state store.
    */
   public function __construct(LibraryDiscoveryInterface $library_discovery, Yaml $serializer, Client $http_client, StateInterface $state) {
@@ @@
    *   license: License
    * @default-fields name,version
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   List of libraries.
    */
   public function libraryList() {
@@ @@
         foreach ($library_info[$asset_type] as $file) {

           if ($file['type'] == 'file') {
-            $url = file_create_url($file['data']);
+            $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file['data']);
           }
           elseif ($file['type'] == 'external') {
             $url = $file['data'];
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/library_manager/library_manager.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\library_manager\LibraryDefinitionInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 /**
  * @file
  * Primary module hooks for Library manager module.
@@ @@

     $libraries_path = \Drupal::config('library_manager.settings')->get('libraries_path');

-    /** @var Drupal\library_manager\LibraryDefinitionInterface[] $definitions */
+    /** @var LibraryDefinitionInterface[] $definitions */
     $definitions = \Drupal::service('entity_type.manager')
       ->getStorage('library_definition')
       ->loadMultiple();
@@ @@
  * Implements hook_page_attachments().
  */
 function library_manager_page_attachments(array &$attachments) {
-  /** @var Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
+  /** @var ConfigEntityStorageInterface $storage */
   $storage = \Drupal::service('entity_type.manager')->getStorage('library_definition');

-  /** @var Drupal\library_manager\LibraryDefinitionInterface[] $definitions */
+  /** @var LibraryDefinitionInterface[] $definitions */
   $definitions = $storage->loadByProperties(['load' => TRUE]);
   $context_repository = \Drupal::service('context.repository');
   $context_handler = \Drupal::service('context.handler');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/library_manager/library_manager.drush.inc:101

    ---------- begin diff ----------
@@ @@
       foreach ($library_info[$asset_type] as $file) {

         if ($file['type'] == 'file') {
-          $url = file_create_url($file['data']);
+          $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file['data']);
         }
         elseif ($file['type'] == 'external') {
           $url = $file['data'];
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/TestBase.php" file,
         due to:                                                                
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/SettingsFormTest.ph
         p" file, due to:                                                       
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/LibraryOverrideTest
         .php" file, due to:                                                    
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/LibraryInformationT
         est.php" file, due to:                                                 
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/LibraryDefinitionTe
         st.php" file, due to:                                                  
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/LibraryDefinitionBu
         ildFormTest.php" file, due to:                                         
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/LibraryDefinitionAs
         setsTest.php" file, due to:                                            
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/LibraryAutoLoadTest
         .php" file, due to:                                                    
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/CodeMirrorAssetsTes
         t.php" file, due to:                                                   
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/AssetsCheckFormTest
         .php" file, due to:                                                    
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/library_manager/tests/src/Functional/AccessTest.php"  
         file, due to:                                                          
         "Analyze error: "Class TestBase\BrowserTestBase not found.". Include your
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

