modules/contrib/block_field/block_field.install
modules/contrib/block_field/src/Annotation/BlockFieldSelection.php
modules/contrib/block_field/src/BlockFieldItemInterface.php
modules/contrib/block_field/src/BlockFieldManager.php
modules/contrib/block_field/src/BlockFieldManagerInterface.php
modules/contrib/block_field/src/BlockFieldSelectionBase.php
modules/contrib/block_field/src/BlockFieldSelectionInterface.php
modules/contrib/block_field/src/BlockFieldSelectionManager.php
modules/contrib/block_field/src/Plugin/Field/FieldFormatter/BlockFieldFormatter.php
modules/contrib/block_field/src/Plugin/Field/FieldFormatter/BlockFieldLabelFormatter.php
modules/contrib/block_field/src/Plugin/Field/FieldType/BlockFieldItem.php
modules/contrib/block_field/src/Plugin/Field/FieldWidget/BlockFieldWidget.php
modules/contrib/block_field/src/Plugin/block_field/BlockFieldSelection/Blocks.php
modules/contrib/block_field/src/Plugin/block_field/BlockFieldSelection/Categories.php
modules/contrib/block_field/tests/modules/block_field_test/src/Plugin/Block/BlockFieldAccessTestBlock.php
modules/contrib/block_field/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestAuthenticatedBlock.php
modules/contrib/block_field/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestContentBlock.php
modules/contrib/block_field/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestTimeBlock.php
modules/contrib/block_field/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestValidationBlock.php
modules/contrib/block_field/tests/src/Functional/BlockFieldTest.php
modules/contrib/block_field/tests/src/Functional/WidgetTest.php
modules/contrib/block_field/tests/src/Kernel/BlockFieldFormatterTest.php
modules/contrib/block_field/tests/src/Kernel/BlockFieldSelectionTest.php
modules/contrib/block_field/tests/src/Traits/BlockFieldTestTrait.php

13 files with changes
=====================

1) modules/contrib/block_field/tests/src/Kernel/BlockFieldSelectionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_field\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\block_field\BlockFieldSelectionInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Core\StringTranslation\TranslationInterface;

@@ @@
  * @group block_field
  */
 class BlockFieldSelectionTest extends KernelTestBase {
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
    * @param array $settings
    *   A configuration settings array.
    *
-   * @return \Drupal\block_field\BlockFieldSelectionInterface
+   * @return BlockFieldSelectionInterface
    *   Returns an instance of the plugin with passed settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function setUpSelectionInstance($plugin_id = 'blocks', array $settings = []) {
     return $this->container->get('plugin.manager.block_field_selection')->createInstance($plugin_id, $settings);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/block_field/tests/src/Functional/WidgetTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\block_field\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The test block node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $blockNode;

@@ @@
    * @param int $numberOfNodes
    *   The number of nodes to create.
    *
-   * @return \Drupal\node\NodeInterface[]
+   * @return NodeInterface[]
    *   And array of created nodes.
    */
   private function createDummyNodes($bundle, $numberOfNodes) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/block_field/tests/modules/block_field_test/src/Plugin/Block/BlockFieldTestAuthenticatedBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field_test\Plugin\Block;

+use Drupal\Core\Session\AccountProxy;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/block_field/src/Plugin/block_field/BlockFieldSelection/Categories.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field\Plugin\block_field\BlockFieldSelection;

+use Drupal\block_field\BlockFieldManagerInterface;
 use Drupal\block_field\BlockFieldSelectionBase;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
-    /** @var \Drupal\block_field\BlockFieldManagerInterface $block_field_manager */
+    /** @var BlockFieldManagerInterface $block_field_manager */
     $block_field_manager = \Drupal::service('block_field.manager');
     $categories = $block_field_manager->getBlockCategories();
     $options = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/block_field/src/Plugin/block_field/BlockFieldSelection/Blocks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field\Plugin\block_field\BlockFieldSelection;

+use Drupal\block_field\BlockFieldManagerInterface;
 use Drupal\block_field\BlockFieldSelectionBase;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
-    /** @var \Drupal\block_field\BlockFieldManagerInterface $block_field_manager */
+    /** @var BlockFieldManagerInterface $block_field_manager */
     $block_field_manager = \Drupal::service('block_field.manager');
     $definitions = $block_field_manager->getBlockDefinitions();
     foreach ($definitions as $plugin_id => $definition) {
@@ @@
    *
    * @param array $element
    *   A form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The $form_state from complete form.
    * @param array $complete_form
    *   Complete parent form.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/block_field/src/Plugin/Field/FieldWidget/BlockFieldWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field\Plugin\Field\FieldWidget;

+use Drupal\block_field\BlockFieldItemInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\block_field\BlockFieldSelectionManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockManagerInterface;
@@ @@
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The block field selection manager.
    *
-   * @var \Drupal\block_field\BlockFieldSelectionManager
+   * @var BlockFieldSelectionManager
    */
   protected $blockFieldSelectionManager;

@@ @@
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\block_field\BlockFieldItemInterface $item */
+    /** @var BlockFieldItemInterface $item */
     $item =& $items[$delta];

     $field_name = $this->fieldDefinition->getName();
@@ @@

     // Set the label #value to the default block instance's label.
     $plugin_id = $trigger_element['#value'];
-    /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+    /** @var BlockPluginInterface $block_instance */
     if ($block_instance = $this->blockManager->createInstance($plugin_id)) {
       $settings_element['label']['#value'] = $block_instance->label();
     }
@@ @@
    * Form element validation handler.
    */
   public static function validate($element, FormStateInterface $form_state, $form) {
-    /** @var \Drupal\Core\Block\BlockManagerInterface $block_manager */
+    /** @var BlockManagerInterface $block_manager */
     $block_manager = \Drupal::service('plugin.manager.block');

     $values = $form_state->getValues();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/block_field/src/Plugin/Field/FieldType/BlockFieldItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field\Plugin\Field\FieldType;

+use Drupal\block_field\BlockFieldSelectionManager;
+use Drupal\Core\Block\BlockManagerInterface;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\block_field\BlockFieldItemInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldItemBase;
@@ @@
   public function fieldSettingsForm(array $form, FormStateInterface $form_state) {
     $field = $form_state->getFormObject()->getEntity();

-    /** @var \Drupal\block_field\BlockFieldSelectionManager $block_field_selection_manager */
+    /** @var BlockFieldSelectionManager $block_field_selection_manager */
     $block_field_selection_manager = \Drupal::service('plugin.manager.block_field_selection');
     $options = $block_field_selection_manager->getOptions();
     $form = [
@@ @@
       return NULL;
     }

-    /** @var \Drupal\Core\Block\BlockManagerInterface $block_manager */
+    /** @var BlockManagerInterface $block_manager */
     $block_manager = \Drupal::service('plugin.manager.block');

-    /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+    /** @var BlockPluginInterface $block_instance */
     $block_instance = $block_manager->createInstance($this->plugin_id, $this->settings);

     $plugin_definition = $block_instance->getPluginDefinition();
@@ @@
    *
    * @param array $form
    *   The form where the settings form is being included in.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    */
   public static function fieldSettingsFormValidate(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/block_field/src/Plugin/Field/FieldFormatter/BlockFieldLabelFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field\Plugin\Field\FieldFormatter;

+use Drupal\block_field\BlockFieldItemInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\block_field\BlockFieldItemInterface $item */
+      /** @var BlockFieldItemInterface $item */
       $block_instance = $item->getBlock();
       // Make sure the block exists and is accessible.
       if (!$block_instance) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/block_field/src/Plugin/Field/FieldFormatter/BlockFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field\Plugin\Field\FieldFormatter;

+use Drupal\Core\Session\AccountProxy;
+use Drupal\block_field\BlockFieldItemInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Block\TitleBlockPluginInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The context repository service.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $contextHandler
+   * @param ContextHandlerInterface $contextHandler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
    *   A request stack symfony instance.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Current Route Matcher.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, ContextRepositoryInterface $contextRepository, ContextHandlerInterface $contextHandler, AccountProxyInterface $current_user, ModuleHandlerInterface $module_handler, RequestStack $request_stack, TitleResolverInterface $title_resolver, RouteMatchInterface $route_match) {
@@ @@
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\block_field\BlockFieldItemInterface $item */
+      /** @var BlockFieldItemInterface $item */
       $block_instance = $item->getBlock();

       // Inject runtime contexts.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/block_field/src/BlockFieldSelectionManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Returns an instance of BlockFieldSelectionInterface from $field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The 'block_field' field definition.
    *
-   * @return \Drupal\block_field\BlockFieldSelectionInterface
+   * @return BlockFieldSelectionInterface
    *   The BlockFieldSelectionInterface instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getSelectionHandler(FieldDefinitionInterface $field) {
     $settings = $field->getSetting('selection_settings') ? $field->getSetting('selection_settings') : [];
@@ @@
   /**
    * Returns an key => value array based on allowed referenceable blocks.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The 'block_field' field definition.
    *
    * @return array
    *   Array of options from definitions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getWidgetOptions(FieldDefinitionInterface $field) {
     $handler = $this->getSelectionHandler($field);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/block_field/src/BlockFieldManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Constructs a new BlockFieldManager.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block plugin manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository.
    */
   public function __construct(BlockManagerInterface $block_manager, ContextRepositoryInterface $context_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/block_field/src/BlockFieldItemInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field;

+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Field\FieldItemInterface;

 /**
@@ @@
   /**
    * Get block instance.
    *
-   * @return null|\Drupal\Core\Block\BlockPluginInterface
+   * @return null|BlockPluginInterface
    *   Return the block instance or NULL if the block does not exist.
    */
   public function getBlock();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/block_field/src/Annotation/BlockFieldSelection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_field\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 13 files have been changed by Rector                                      

