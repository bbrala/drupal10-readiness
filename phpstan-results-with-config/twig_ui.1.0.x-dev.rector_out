modules/contrib/twig_ui/src/Controller/TemplateLoadAjaxController.php
modules/contrib/twig_ui/src/Entity/TwigTemplate.php
modules/contrib/twig_ui/src/Entity/TwigTemplateForm.php
modules/contrib/twig_ui/src/Form/SettingsForm.php
modules/contrib/twig_ui/src/Form/TemplatesDirectoryPrepareForm.php
modules/contrib/twig_ui/src/Form/TwigTemplateListForm.php
modules/contrib/twig_ui/src/TemplateManager.php
modules/contrib/twig_ui/src/TemplateManagerInterface.php
modules/contrib/twig_ui/src/Theme/ImmutableRegistry.php
modules/contrib/twig_ui/src/Theme/RegistryDecorator.php
modules/contrib/twig_ui/src/TwigUiServiceProvider.php
modules/contrib/twig_ui/tests/src/Functional/RenderTest.php
modules/contrib/twig_ui/tests/src/Functional/SettingsTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplateFormTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplateLoadAjaxControllerTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplateManagerTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplatesDirectoryPrepareFormTest.php
modules/contrib/twig_ui/tests/src/Functional/TwigTemplateListFormTest.php
modules/contrib/twig_ui/tests/src/FunctionalJavascript/SettingsFormTest.php
modules/contrib/twig_ui/tests/src/FunctionalJavascript/TemplateFormTest.php
modules/contrib/twig_ui/tests/src/Kernel/ImmutableRegistryTest.php
modules/contrib/twig_ui/tests/src/Kernel/InstallTest.php
modules/contrib/twig_ui/tests/src/Kernel/RegistryTest.php
modules/contrib/twig_ui/tests/src/Kernel/RequirementsTest.php
modules/contrib/twig_ui/tests/src/Traits/HtaccessTestTrait.php
modules/contrib/twig_ui/twig_ui.install
modules/contrib/twig_ui/twig_ui.module
modules/contrib/twig_ui/twig_ui.post_update.php

19 files with changes
=====================

1) modules/contrib/twig_ui/twig_ui.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * This module provides install, uninstall, and update functions.
@@ @@
  * Add 'enabled' status to existing Twig UI templates.
  */
 function twig_ui_update_8101() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface */
+  /** @var ConfigFactoryInterface */
   $config_factory = \Drupal::service('config.factory');

   $templates = \Drupal::service('twig_ui.template_manager')->getTemplates();
   foreach ($templates as $template) {
-    /** @var \Drupal\Core\Config\Config */
+    /** @var Config */
     $config = $config_factory->getEditable('twig_ui.template.' . $template->id());
     $data = $config->get();
     $data['status'] = TRUE;
@@ @@
  * Set default config values for new config options.
  */
 function twig_ui_update_8102() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface */
+  /** @var ConfigFactoryInterface */
   $config_factory = \Drupal::service('config.factory');
   $config = $config_factory->getEditable('twig_ui.settings');
   $data = $config->get();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/twig_ui/tests/src/Traits/HtaccessTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Traits;

+use Drupal\twig_ui\TemplateManager;
 /**
  * Helper methods for htaccess-related tests.
  */
@@ @@
   /**
    * Helper method to return template manager service.
    *
-   * @return \Drupal\twig_ui\TemplateManager
+   * @return TemplateManager
    *   The template manager.
    */
   protected function htaccessTestTraitTemplateManager() {
@@ @@
   /**
    * Helper method to return file system service.
    *
-   * @return \Drupal\twig_ui\TemplateManager
+   * @return TemplateManager
    *   The template manager.
    */
   protected function htaccessTestTraitFileSystem() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/twig_ui/tests/src/Kernel/RequirementsTest.php:35

    ---------- begin diff ----------
@@ @@

     // Check requirements after install.
     $requirements = twig_ui_requirements('runtime');
-    $this->assertEqual($requirements['twig_ui_templates']['severity'], REQUIREMENT_OK);
-    $this->assertEqual($requirements['twig_ui_templates']['value'], 'Twig UI templates directory exists and is protected.');
+    $this->assertEquals($requirements['twig_ui_templates']['severity'], REQUIREMENT_OK);
+    $this->assertEquals($requirements['twig_ui_templates']['value'], 'Twig UI templates directory exists and is protected.');

     // Remove the templates directory and verify requirements error.
     $this->deleteTemplatesDirectory();

     $requirements = twig_ui_requirements('runtime');
-    $this->assertEqual($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
-    $this->assertEqual($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory does not exist: ' . $template_manager::DIRECTORY_PATH . '.');
+    $this->assertEquals($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
+    $this->assertEquals($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory does not exist: ' . $template_manager::DIRECTORY_PATH . '.');

     // Add back templates directory but remove .htaccess and verify
     // requirements error.
@@ @@
     $this->deleteHtaccessFile();

     $requirements = twig_ui_requirements('runtime');
-    $this->assertEqual($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
-    $this->assertEqual($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory is unprotected: ' . $template_manager::DIRECTORY_PATH . '.');
+    $this->assertEquals($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
+    $this->assertEquals($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory is unprotected: ' . $template_manager::DIRECTORY_PATH . '.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/twig_ui/tests/src/Kernel/InstallTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Kernel;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\twig_ui\Entity\TwigTemplate;
 use Drupal\twig_ui\TemplateManager;
@@ @@
     $query->condition('w.message', 'Preparation of the Twig UI templates directory resulted in the following error: @message', '=');
     $results = $query->execute()->fetchAll();

-    $this->assertEqual($results[0]->message, 'Preparation of the Twig UI templates directory resulted in the following error: @message');
+    $this->assertEquals($results[0]->message, 'Preparation of the Twig UI templates directory resulted in the following error: @message');
   }

   /**
@@ @@
         'twig_ui',
       ]);

-    $this->assertDirectoryNotExists($directory);
+    $this->assertDirectoryDoesNotExist($directory);
   }

   /**
@@ @@
         'twig_ui',
       ]);

-    /** @var \Drupal\Core\Config\ConfigFactoryInterface */
+    /** @var ConfigFactoryInterface */
     $config_factory = \Drupal::service('config.factory');
     $config = $config_factory->getEditable('twig_ui.settings');
     $data = $config->get();
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/twig_ui/tests/src/FunctionalJavascript/TemplateFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test template editor user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $templateEditorUser;

@@ @@
     $assert_session->assertWaitOnAjaxRequest();

     // Test loading of the block template file for the Grant theme.
-    $block_module_path = drupal_get_path('module', 'block');
+    $block_module_path = \Drupal::service('extension.list.module')->getPath('block');
     $template_path = $block_module_path . '/templates/block.html.twig';

     // Verify the file path.
@@ @@
     // Verify default configuration in data-codemirror attribute.
     $element = $page->find('xpath', '//textarea[@name="template_code"]');
     $data_codemirror = $element->getAttribute('data-codemirror');
-    $this->assertEqual($data_codemirror, '{"mode":"text\/x-twig","lineNumbers":true}');
+    $this->assertEquals($data_codemirror, '{"mode":"text\/x-twig","lineNumbers":true}');

     // Verify selected default behavior.
     $assert_session->elementExists('css', '.form-item-template-code .cme-toolbar');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/twig_ui/tests/src/FunctionalJavascript/SettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/twig_ui/tests/src/Functional/TwigTemplateListFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\twig_ui\Entity\TwigTemplate;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test non-administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $nonAdminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/twig_ui/tests/src/Functional/TemplatesDirectoryPrepareFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\twig_ui\Traits\HtaccessTestTrait;
 use Drupal\twig_ui\TemplateManager;
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test non-administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $nonAdminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/twig_ui/tests/src/Functional/TemplateManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Functional;

+use Drupal\twig_ui\TemplateManager;
 use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\twig_ui\Entity\TwigTemplate;
@@ @@
   /**
    * The Twig UI Template Manager service.
    *
-   * @var \Drupal\twig_ui\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   public function testGetTemplate() {
     $this->createTemplates();
     $template = $this->templateManager->getTemplate('node');
-    $this->assertEqual($template->label(), 'Node');
+    $this->assertEquals($template->label(), 'Node');
     $template = $this->templateManager->getTemplate('node_page');
-    $this->assertEqual($template->label(), 'Node - Page');
+    $this->assertEquals($template->label(), 'Node - Page');
     $template = $this->templateManager->getTemplate('invalid');
     $this->assertNull($template);
   }
@@ @@
    */
   public function testTemplateExists() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->templateExists('node', 'stark'), 'node');
-    $this->assertEqual($this->templateManager->templateExists('node', 'grant'), 'node');
+    $this->assertEquals($this->templateManager->templateExists('node', 'stark'), 'node');
+    $this->assertEquals($this->templateManager->templateExists('node', 'grant'), 'node');
     $this->assertFalse($this->templateManager->templateExists('node', 'perkins'));
-    $this->assertEqual($this->templateManager->templateExists('node__page', 'grant'), 'node_page');
+    $this->assertEquals($this->templateManager->templateExists('node__page', 'grant'), 'node_page');
     $this->assertFalse($this->templateManager->templateExists('node__page', 'stark'));
     $this->assertFalse($this->templateManager->templateExists('node__page', 'perkins'));
     $this->assertFalse($this->templateManager->templateExists('node__event', 'grant'));
@@ @@
     $this->assertStringEqualsFile('public://twig_ui/grant/node--news.html.twig', '{{ content }}' . PHP_EOL . 'Test template 1');
     $this->assertFileExists('public://twig_ui/perkins/node--news.html.twig');
     $this->assertStringEqualsFile('public://twig_ui/perkins/node--news.html.twig', '{{ content }}' . PHP_EOL . 'Test template 1');
-    $this->assertFileNotExists('public://twig_ui/stark/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--news.html.twig');

     // Test contents of files written to file system.
     $template2 = TwigTemplate::create([
@@ @@
     $this->templateManager->syncTemplateFiles($template);

     $this->assertFileExists('public://twig_ui/stark/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--news-page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--news-page.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--news-page.html.twig');
     $this->assertFileExists('public://twig_ui/perkins/node--news-page.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--event.html.twig');

     // Test change in selected themes.
     $template->set('original', clone $template);
@@ @@
     $this->templateManager->syncTemplateFiles($template);

     $this->assertFileExists('public://twig_ui/stark/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--news-page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--news-page.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--news-page.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--news-page.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--news-page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--event.html.twig');

     // Test change in template code.
     $template->set('original', clone $template);
@@ @@
     $this->template3->enable();
     $this->template3->save();

-    $this->assertFileNotExists('public://twig_ui/stark/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--event.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--event.html.twig');

     $this->assertStringEqualsFile('public://twig_ui/grant/node--event.html.twig', '{{ content }}' . PHP_EOL . 'Test template 3 (originally disabled)');
   }
@@ @@

     $this->templateManager->deleteTemplateFiles($this->template);

-    $this->assertFileNotExists('public://twig_ui/stark/node.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--page.html.twig');

     $this->templateManager->deleteTemplateFiles($this->template2);

-    $this->assertFileNotExists('public://twig_ui/stark/node.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--page.html.twig');
   }

   /**
@@ @@
    */
   public function testGetDirectoryPathByTheme() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('grant'), 'public://twig_ui/grant');
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('grant', FALSE), PublicStream::basePath() . '/twig_ui/grant');
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('perkins'), 'public://twig_ui/perkins');
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('perkins', FALSE), PublicStream::basePath() . '/twig_ui/perkins');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('grant'), 'public://twig_ui/grant');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('grant', FALSE), PublicStream::basePath() . '/twig_ui/grant');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('perkins'), 'public://twig_ui/perkins');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('perkins', FALSE), PublicStream::basePath() . '/twig_ui/perkins');
   }

   /**
@@ @@
    */
   public function testGetTemplatePath() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->getTemplatePath($this->template2, 'grant'), 'public://twig_ui/grant/node--page.html.twig');
+    $this->assertEquals($this->templateManager->getTemplatePath($this->template2, 'grant'), 'public://twig_ui/grant/node--page.html.twig');
   }

   /**
@@ @@
    */
   public function testGetTemplateFileName() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->getTemplateFileName($this->template2), 'node--page.html.twig');
+    $this->assertEquals($this->templateManager->getTemplateFileName($this->template2), 'node--page.html.twig');
   }

   /**
@@ @@

     // Execute ::prepareTemplatesDirectory().
     $return = $this->templateManager->prepareTemplatesDirectory();
-    $this->assertEqual($return, TRUE);
+    $this->assertEquals($return, TRUE);
     $this->assertFileExists('public://twig_ui/.htaccess');

     // Attempt to create templates directory when public:// is unwritable.
     $this->deleteTemplatesDirectory();
     $this->makeUnwritable('public://');
-    $this->assertDirectoryNotIsWritable('public://');
+    $this->assertDirectoryIsNotWritable('public://');

     $return = $this->templateManager->prepareTemplatesDirectory();
-    $this->assertEqual($return, 'Unable to create templates directory');
+    $this->assertEquals($return, 'Unable to create templates directory');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/twig_ui/tests/src/Functional/TemplateLoadAjaxControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test non-administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $nonAdminUser;

@@ @@
     $this->assertJson($controller_return);
     $controller_return = json_decode($controller_return);

-    $block_module_path = drupal_get_path('module', 'block');
+    $block_module_path = \Drupal::service('extension.list.module')->getPath('block');
     $template_path = $block_module_path . '/templates/block.html.twig';
     $abs_template_path = \Drupal::service('file_system')->realpath($template_path);
     $template_code = file_get_contents($abs_template_path);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/twig_ui/tests/src/Functional/TemplateFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\twig_ui\Entity\TwigTemplate;

@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test non-administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $nonAdminUser;

@@ @@
     $element = $page
       ->findField('label')
       ->getValue();
-    $this->assertEqual($element, 'Clone of Node');
+    $this->assertEquals($element, 'Clone of Node');
     $element = $page
       ->findField('id')
       ->getValue();
-    $this->assertEqual($element, 'clone_node');
+    $this->assertEquals($element, 'clone_node');
     $this->assertTrue($page->hasUncheckedField('themes[grant]'));

     // Change theme suggestion and select a theme so clone can be saved.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/twig_ui/tests/src/Functional/SettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\twig_ui\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The test administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * The test non-administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $nonAdminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/twig_ui/src/TemplateManagerInterface.php:78

    ---------- begin diff ----------
@@ @@
   /**
    * Syncs Twig UI template entities with template files in the file system.
    *
-   * @param \Drupal\twig_ui\Entity\TwigTemplate $template
+   * @param TwigTemplate $template
    *   A Twig UI template.
    */
   public function syncTemplateFiles(TwigTemplate $template);
@@ @@
   /**
    * Deletes all Twig UI template files.
    *
-   * @param \Drupal\twig_ui\Entity\TwigTemplate $template
+   * @param TwigTemplate $template
    *   A Twig UI template.
    */
   public function deleteTemplateFiles(TwigTemplate $template);
@@ @@
   /**
    * Writes a template file to the filesystem.
    *
-   * @param \Drupal\twig_ui\Entity\TwigTemplate $template
+   * @param TwigTemplate $template
    *   A Twig UI template.
    * @param string $theme
    *   The machine name of a theme.
@@ @@
   /**
    * Deletes a template file from the filesystem.
    *
-   * @param \Drupal\twig_ui\Entity\TwigTemplate $template
+   * @param TwigTemplate $template
    *   A Twig UI template.
    * @param string $theme
    *   The machine name of a theme.
@@ @@
   /**
    * Generates the template file's path.
    *
-   * @param Drupal\twig_ui\Entity\TwigTemplate $template
+   * @param TwigTemplate $template
    *   A Twig UI template.
    * @param string $theme
    *   The machine name of a theme.
@@ @@
   /**
    * Generates the template file's name.
    *
-   * @param Drupal\twig_ui\Entity\TwigTemplate $template
+   * @param TwigTemplate $template
    *   A Twig UI template.
    * @param bool $extension
    *   Whether or not the file extension (.html.twig) be included.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/twig_ui/src/TemplateManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * An interface for helpers that operate on files and stream wrappers.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a TemplateManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entityTypeManager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   An interface for helpers that operate on files and stream wrappers.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ThemeHandlerInterface $theme_handler, FileSystemInterface $file_system, StreamWrapperManagerInterface $stream_wrapper_manager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/twig_ui/src/Form/TwigTemplateListForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\twig_ui\Form;

+use Drupal\twig_ui\TemplateManager;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpFoundation\ParameterBag;
+use Drupal\Core\Config\Entity\Query\Query;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Template Manager.
    *
-   * @var \Drupal\twig_ui\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   /**
    * The entityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $twigUiTemplateStorage;

@@ @@
   /**
    * Class constructor.
    *
-   * @param Drupal\twig_ui\TemplateManagerInterface $template_manager
+   * @param TemplateManagerInterface $template_manager
    *   The Template Manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entityTypeManager.
    */
   public function __construct(TemplateManagerInterface $template_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Symfony\Component\HttpFoundation\ParameterBag */
+    /** @var ParameterBag */
     $parameters = $this->getRequest()->query;

     $form = [];
@@ @@
       ],
     ];

-    /** @var \Drupal\Core\Config\Entity\Query\Query */
+    /** @var Query */
     $entity_query = $this->twigUiTemplateStorage->getQuery();
     $entity_query->pager(25);
     $entity_query->tableSort($header);
@@ @@

     // If 'Apply' submit, then retain query string parameters.
     if ($triggering_element == 'apply') {
-      /** @var \Symfony\Component\HttpFoundation\ParameterBag */
+      /** @var ParameterBag */
       $parameters = $this->getRequest()->query;

       $values = $form_state->getValues();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/twig_ui/src/Form/TemplatesDirectoryPrepareForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Template Manager.
    *
-   * @var \Drupal\twig_ui\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\twig_ui\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    *   The Template Manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(TemplateManager $template_manager, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/twig_ui/src/Form/SettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The Twig UI Template Manager service.
    *
-   * @var \Drupal\twig_ui\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a SettingsForm object.
    *
-   * @param \Drupal\twig_ui\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    *   The Twig UI Template Manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(TemplateManager $template_manager, MessengerInterface $messenger, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/twig_ui/src/Entity/TwigTemplateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\twig_ui\Entity;

+use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The Twig UI Template Manager service.
    *
-   * @var \Drupal\twig_ui\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   /**
    * The entityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a TwigTemplate Form object.
    *
-   * @param \Drupal\twig_ui\TemplateManager $template_manager
+   * @param TemplateManager $template_manager
    *   The Twig UI Template Manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(TemplateManager $template_manager, EntityTypeManagerInterface $entityTypeManager, ModuleHandlerInterface $module_handler, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, AccountProxyInterface $current_user) {
@@ @@
    *
    * @param array $form
    *   A nested array form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/twig_ui/src/Controller/TemplateLoadAjaxController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Twig UI's immutable registry.
    *
-   * @var \Drupal\Core\DestructableInterface
+   * @var DestructableInterface
    */
   protected $theme;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\DestructableInterface $immutable_registry
+   * @param DestructableInterface $immutable_registry
    *   Twig UI's immutable registry.
    */
   public function __construct(DestructableInterface $immutable_registry) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 19 files have been changed by Rector                                      

