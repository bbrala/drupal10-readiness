modules/contrib/paragraphs_summary_token/paragraphs_summary_token.tokens.inc
modules/contrib/paragraphs_summary_token/src/Service/ImageBuilder.php
modules/contrib/paragraphs_summary_token/src/Service/ImageBuilderInterface.php
modules/contrib/paragraphs_summary_token/src/Service/SummaryBuilder.php
modules/contrib/paragraphs_summary_token/src/Service/TextSummaryBuilder.php
modules/contrib/paragraphs_summary_token/src/Service/TextSummaryBuilderInterface.php
modules/contrib/paragraphs_summary_token/src/Traits/ParagraphsSummaryTokenTrait.php
modules/contrib/paragraphs_summary_token/tests/modules/paragraphs_summary_token_test/src/ParagraphsSummaryTokenTestLanguageManager.php
modules/contrib/paragraphs_summary_token/tests/modules/paragraphs_summary_token_test/src/ParagraphsSummaryTokenTestServiceProvider.php
modules/contrib/paragraphs_summary_token/tests/src/Kernel/ImageBuilderTest.php
modules/contrib/paragraphs_summary_token/tests/src/Kernel/ImageBuilderTokenTest.php
modules/contrib/paragraphs_summary_token/tests/src/Kernel/TextSummaryBuilderTest.php
modules/contrib/paragraphs_summary_token/tests/src/Kernel/TextSummaryTokenTest.php
modules/contrib/paragraphs_summary_token/tests/src/Traits/ParagraphsSummaryTokenTestTrait.php

11 files with changes
=====================

1) modules/contrib/paragraphs_summary_token/tests/src/Traits/ParagraphsSummaryTokenTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_summary_token\Traits;

+use Drupal\media\MediaTypeInterface;
 use Drupal\file\FileInterface;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
@@ @@
   /**
    * The image media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $imageMediaType;

@@ @@
   /**
    * The file media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $fileMediaType;

@@ @@
   /**
    * Generates an image file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   An image file.
    */
   protected function createImageFile(): FileInterface {
@@ @@
   /**
    * Generates a text file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   A text file.
    */
   protected function createTextFile(): FileInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/paragraphs_summary_token/tests/src/Kernel/TextSummaryTokenTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_summary_token\Kernel;

+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $bundleInfo;

@@ @@
   /**
    * The content translation manager.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslationManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_summary_token/tests/src/Kernel/TextSummaryBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_summary_token\Kernel;

+use Drupal\paragraphs_summary_token\Service\SummaryBuilder;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\paragraphs\Entity\Paragraph;
@@ @@
   /**
    * The text summary builder.
    *
-   * @var \Drupal\paragraphs_summary_token\Service\SummaryBuilder
+   * @var SummaryBuilder
    */
   protected $textSummaryBuilder;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/paragraphs_summary_token/tests/src/Kernel/ImageBuilderTokenTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The image style.
    *
-   * @var Drupal\image\Entity\ImageStyle
+   * @var ImageStyle
    */
   protected $imageStyle;

@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image_1->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image_1->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image_1->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image_1->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media_1->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media_1->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media_1->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
@@ @@
       'node-field_paragraphs' => $node->get('field_paragraphs'),
     ];
     $tokens = [
-      'image' => file_create_url($image_media->get('field_media_image')->entity->getFileUri()),
+      'image' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_media->get('field_media_image')->entity->getFileUri()),
       'image:test' => $this->imageStyle->buildUrl($image_media->get('field_media_image')->entity->getFileUri()),
     ];
     $this->assertTokens('node:field_paragraphs', $data, $tokens);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/paragraphs_summary_token/tests/src/Kernel/ImageBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_summary_token\Kernel;

+use Drupal\paragraphs_summary_token\Service\ImageBuilderInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\paragraphs\Entity\Paragraph;
@@ @@
   /**
    * The image builder.
    *
-   * @var \Drupal\paragraphs_summary_token\Service\ImageBuilderInterface
+   * @var ImageBuilderInterface
    */
   protected $imageBuilder;

@@ @@
   /**
    * The image style.
    *
-   * @var Drupal\image\Entity\ImageStyle
+   * @var ImageStyle
    */
   protected $imageStyle;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/paragraphs_summary_token/tests/modules/paragraphs_summary_token_test/src/ParagraphsSummaryTokenTestLanguageManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Sets current language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   Language interface.
    * @param string $type
    *   Type interface.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/paragraphs_summary_token/src/Traits/ParagraphsSummaryTokenTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_summary_token\Traits;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;

@@ @@
   /**
    * The field storage config storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $fieldStorageConfigStorage;

@@ @@
   /**
    * Get all fields for the given entity type of the given field type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to search on.
    * @param string $field_type
    *   The field type to search on.
@@ @@
   protected function getFieldsByEntityTypeAndFieldType(EntityTypeInterface $entity_type, string $field_type): array {
     if (empty($this->fields[$entity_type->id()][$field_type])) {
       $fields = [];
-      /** @var \Drupal\field\FieldStorageConfigInterface[] $paragraph_text_fields_config */
+      /** @var FieldStorageConfigInterface[] $paragraph_text_fields_config */
       $field_configs = $this->getFieldStorageConfigStorage()->loadByProperties([
         'entity_type' => $entity_type->id(),
         'type' => $field_type,
@@ @@
   /**
    * Get all ER or ERR fields for the given entity type and target type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to search on.
    * @param string $target_type
    *   The target type to search on.
@@ @@

     if (empty($this->entityReferenceFields[$entity_type->id()][$field_type][$target_type])) {
       $fields = [];
-      /** @var \Drupal\field\FieldStorageConfigInterface[] $paragraph_text_fields_config */
+      /** @var FieldStorageConfigInterface[] $paragraph_text_fields_config */
       $field_configs = $this->getFieldStorageConfigStorage()->loadByProperties([
         'entity_type' => $entity_type->id(),
         'type' => $field_type,
@@ @@
   /**
    * Gets the field storage config storage.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @return ConfigEntityStorageInterface
    *   The field storage config storage.
    */
   protected function getFieldStorageConfigStorage(): ConfigEntityStorageInterface {
@@ @@
   /**
    * Sets the field storage config storage to use.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $field_storage_config_storage
+   * @param ConfigEntityStorageInterface $field_storage_config_storage
    *   The field storage config storage.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/paragraphs_summary_token/src/Service/TextSummaryBuilderInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a paragraph summary.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field entity.
    * @param int|null $trim
    *   The length of the text.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/paragraphs_summary_token/src/Service/TextSummaryBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_summary_token\Service;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * SummaryBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager) {
     $this->setFieldStorageConfigStorage($entityTypeManager->getStorage('field_storage_config'));
@@ @@
   /**
    * Build the summary for the given content entity based on paragraph fields.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field entity.
    *
    * @return string
    *   The summary.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   private function buildSummary(EntityReferenceRevisionsFieldItemList $paragraphs_field): string {
     $summary = '';
@@ @@

     if (!$paragraphs_field->isEmpty()) {
       $language = $this->languageManager->getCurrentLanguage()->getId();
-      /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
+      /** @var ParagraphInterface $paragraph */
       foreach ($paragraphs_field->referencedEntities() as $paragraph) {
         // First, loop over all text_long fields and check if one of those
         // fields contain content.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/paragraphs_summary_token/src/Service/ImageBuilderInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieves the first image for the given paragraphs field.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field entity.
-   * @param \Drupal\image\ImageStyleInterface|null $image_style
+   * @param ImageStyleInterface|null $image_style
    *   The image style.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/paragraphs_summary_token/src/Service/ImageBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_summary_token\Service;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The file storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * SummaryBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $streamWrapperManager
+   * @param StreamWrapperManagerInterface $streamWrapperManager
    *   The stream wrapper manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, StreamWrapperManagerInterface $streamWrapperManager) {
     $this->setFieldStorageConfigStorage($entityTypeManager->getStorage('field_storage_config'));
@@ @@
       return $image_style->buildUrl($image_url);
     }

-    return file_create_url($image_url);
+    return \Drupal::service('file_url_generator')->generateAbsoluteString($image_url);
   }

   /**
    * Get the image URL from the given paragraphs field.
    *
-   * @param \Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList $paragraphs_field
+   * @param EntityReferenceRevisionsFieldItemList $paragraphs_field
    *   The paragraphs field.
    *
    * @return string
@@ @@

     if (!$paragraphs_field->isEmpty()) {
       $language = $this->languageManager->getCurrentLanguage()->getId();
-      /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
+      /** @var ParagraphInterface $paragraph */
       foreach ($paragraphs_field->referencedEntities() as $paragraph) {
         // First, loop over all text_long fields and check if one of those
         // fields contain content.
@@ @@
   /**
    * Retrieve the image URL from the given field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field that contains an image.
    *
    * @return string
@@ @@
   /**
    * Retrieve the file entity from the given media entity.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   The file when found, else NULL.
    */
   private function retrieveFileFromMediaEntity(MediaInterface $media): ?FileInterface {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 11 files have been changed by Rector                                      

