diff --git a/api_proxy.info.yml b/api_proxy.info.yml
index a7999ed..eb253e3 100644
--- a/api_proxy.info.yml
+++ b/api_proxy.info.yml
@@ -1,5 +1,4 @@
 name: API Proxy
 description: Puts Drupal between the front-end and the 3rd party API.
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 type: module
diff --git a/src/Annotation/HttpApi.php b/src/Annotation/HttpApi.php
index f6a3560..d2516a1 100644
--- a/src/Annotation/HttpApi.php
+++ b/src/Annotation/HttpApi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\api_proxy\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ final class HttpApi extends Plugin {
   /**
    * The human-readable name of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ final class HttpApi extends Plugin {
   /**
    * A short description of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/ApiProxyPermissions.php b/src/ApiProxyPermissions.php
index 111da55..5a703af 100644
--- a/src/ApiProxyPermissions.php
+++ b/src/ApiProxyPermissions.php
@@ -15,25 +15,26 @@ final class ApiProxyPermissions implements ContainerInjectionInterface {
   /**
    * The API Proxy resource plugin manager.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $proxyPluginManager;
 
   /**
    * Constructs a new ApiProxyPermissions instance.
    *
-   * @param \Drupal\api_proxy\Plugin\HttpApiPluginManager $proxy_plugin_manager
+   * @param HttpApiPluginManager $proxy_plugin_manager
    *   The HTTP API proxy plugin manager.
    */
-  public function __construct(HttpApiPluginManager $proxy_plugin_manager) {
+  public function __construct(HttpApiPluginManager $proxy_plugin_manager, HttpApiPluginManager $proxyPluginManager) {
     $this->proxyPluginManager = $proxy_plugin_manager;
+    $this->proxyPluginManager = $proxyPluginManager;
   }
 
   /**
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    return new static($container->get(HttpApiPluginManager::class));
+    return new static($this->proxyPluginManager);
   }
 
   /**
diff --git a/src/Controller/Forwarder.php b/src/Controller/Forwarder.php
index 4be6dd4..a9b278c 100644
--- a/src/Controller/Forwarder.php
+++ b/src/Controller/Forwarder.php
@@ -44,12 +44,12 @@ final class Forwarder extends ControllerBase {
   /**
    * Forwards incoming requests to the connected API.
    *
-   * @param \Drupal\api_proxy\Plugin\HttpApiInterface $api_proxy
+   * @param HttpApiInterface $api_proxy
    *   The API proxy plugin.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    */
   public function forward(HttpApiInterface $api_proxy, Request $request): Response {
diff --git a/src/EventSubscriber/OptionsRequestSubscriber.php b/src/EventSubscriber/OptionsRequestSubscriber.php
index 16a1361..1bb0d64 100644
--- a/src/EventSubscriber/OptionsRequestSubscriber.php
+++ b/src/EventSubscriber/OptionsRequestSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\api_proxy\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\api_proxy\Controller\Forwarder;
 use Drupal\api_proxy\Plugin\HttpApiPluginBase;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -9,7 +10,6 @@ use Drupal\Core\Cache\CacheableResponse;
 use Drupal\Core\Config\ImmutableConfig;
 use Symfony\Cmf\Component\Routing\RouteProviderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -22,14 +22,14 @@ class OptionsRequestSubscriber implements EventSubscriberInterface {
   /**
    * The route provider.
    *
-   * @var \Symfony\Cmf\Component\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;
 
   /**
    * The decorated service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventSubscriberInterface
+   * @var EventSubscriberInterface
    */
   protected $subject;
 
@@ -43,7 +43,7 @@ class OptionsRequestSubscriber implements EventSubscriberInterface {
   /**
    * Creates a new OptionsRequestSubscriber instance.
    *
-   * @param \Symfony\Cmf\Component\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    * @param \Symfony\Component\EventDispatcher\EventSubscriberInterface
    *   The decorated service.
@@ -59,10 +59,10 @@ class OptionsRequestSubscriber implements EventSubscriberInterface {
   /**
    * Tries to handle the options request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     $routes = $this->routeProvider->getRouteCollectionForRequest($event->getRequest());
     if ($request->getMethod() !== 'OPTIONS') {
@@ -114,7 +114,7 @@ class OptionsRequestSubscriber implements EventSubscriberInterface {
    * @param string $config_id
    *   The config ID.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The immutable configuration object.
    *
    * @todo: use dependency injection to pass the configFactory.
diff --git a/src/Form/ApiProxyForm.php b/src/Form/ApiProxyForm.php
index a05f238..487897d 100644
--- a/src/Form/ApiProxyForm.php
+++ b/src/Form/ApiProxyForm.php
@@ -15,9 +15,13 @@ final class ApiProxyForm extends FormBase {
   /**
    * The HTTP API proxy plugin manager.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $apiProxyManager;
+  public function __construct(HttpApiPluginManager $apiProxyManager)
+  {
+      $this->apiProxyManager = $apiProxyManager;
+  }
 
   /**
    * {@inheritdoc}
@@ -25,7 +29,7 @@ final class ApiProxyForm extends FormBase {
   public static function create(ContainerInterface $container): self {
     /** @var \Drupal\api_proxy\Form\ApiProxyForm $form_object */
     $form_object = parent::create($container);
-    $form_object->setApiProxyManager($container->get(HttpApiPluginManager::class));
+    $form_object->setApiProxyManager($this->apiProxyManager);
 
     return $form_object;
   }
@@ -33,7 +37,7 @@ final class ApiProxyForm extends FormBase {
   /**
    * Set the HTTP API proxy manager.
    *
-   * @param \Drupal\api_proxy\Plugin\HttpApiPluginManager $api_proxy_manager
+   * @param HttpApiPluginManager $api_proxy_manager
    *   The plugin manager.
    */
   public function setApiProxyManager(HttpApiPluginManager $api_proxy_manager): void {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index aa3cbc0..c034697 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -20,16 +20,17 @@ final class SettingsForm extends ConfigFormBase {
   /**
    * The plugin manager for the HTTP API proxies.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $apiProxyManager;
 
   /**
    * {@inheritdoc}
    */
-  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager) {
+  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager, HttpApiPluginManager $apiProxyManager) {
     $this->setConfigFactory($config_factory);
     $this->apiProxyManager = $api_proxy_manager;
+    $this->apiProxyManager = $apiProxyManager;
   }
 
   /**
@@ -38,7 +39,7 @@ final class SettingsForm extends ConfigFormBase {
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('config.factory'),
-      $container->get(HttpApiPluginManager::class)
+      $this->apiProxyManager
     );
   }
 
diff --git a/src/ParamConverter/HttpApiProxyConverter.php b/src/ParamConverter/HttpApiProxyConverter.php
index c9d11c9..5a651dc 100644
--- a/src/ParamConverter/HttpApiProxyConverter.php
+++ b/src/ParamConverter/HttpApiProxyConverter.php
@@ -20,7 +20,7 @@ final class HttpApiProxyConverter implements ParamConverterInterface {
   /**
    * The plugin manager.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $pluginManager;
 
diff --git a/src/Plugin/HttpApiInterface.php b/src/Plugin/HttpApiInterface.php
index f48d936..6f31065 100644
--- a/src/Plugin/HttpApiInterface.php
+++ b/src/Plugin/HttpApiInterface.php
@@ -28,7 +28,7 @@ interface HttpApiInterface extends PluginInspectionInterface {
    *
    * @param array $form
    *   The configuration form to alter for the this plugin settings.
-   * @param \Drupal\Core\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state for the plugin settings.
    *
    * @return array
diff --git a/src/Plugin/HttpApiPluginBase.php b/src/Plugin/HttpApiPluginBase.php
index 9de12b7..2fbfdf1 100644
--- a/src/Plugin/HttpApiPluginBase.php
+++ b/src/Plugin/HttpApiPluginBase.php
@@ -39,14 +39,14 @@ abstract class HttpApiPluginBase extends PluginBase implements ContainerFactoryP
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   private $client;
 
   /**
    * Translates between Symfony and PRS objects.
    *
-   * @var \Symfony\Bridge\PsrHttpMessage\HttpFoundationFactoryInterface
+   * @var HttpFoundationFactoryInterface
    */
   private $foundationFactory;
 
diff --git a/src/Plugin/HttpApiPluginManager.php b/src/Plugin/HttpApiPluginManager.php
index 3e907c7..d51fa6c 100644
--- a/src/Plugin/HttpApiPluginManager.php
+++ b/src/Plugin/HttpApiPluginManager.php
@@ -19,9 +19,9 @@ final class HttpApiPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -33,7 +33,7 @@ final class HttpApiPluginManager extends DefaultPluginManager {
   /**
    * Instantiates all the HTTP API plugins.
    *
-   * @return \Drupal\api_proxy\Plugin\HttpApiPluginBase[]
+   * @return HttpApiPluginBase[]
    *   The plugin instances.
    */
   public function getHttpApis($plugin_ids = NULL): array {
