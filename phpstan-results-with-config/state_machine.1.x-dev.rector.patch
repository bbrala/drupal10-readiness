diff --git a/src/Access/StateTransitionAccessCheck.php b/src/Access/StateTransitionAccessCheck.php
index e55637e..028ccfe 100644
--- a/src/Access/StateTransitionAccessCheck.php
+++ b/src/Access/StateTransitionAccessCheck.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\state_machine\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -15,12 +18,12 @@ class StateTransitionAccessCheck implements AccessInterface {
   /**
    * Checks access to the state transition confirmation form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(RouteMatchInterface $route_match, AccountInterface $account) {
@@ -37,7 +40,7 @@ class StateTransitionAccessCheck implements AccessInterface {
       }
     }
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $route_match->getParameter($entity_type);
     $field_name = $route_match->getParameter('field_name');
     // Ensures the passed entity has a state field matching the field name
@@ -46,7 +49,7 @@ class StateTransitionAccessCheck implements AccessInterface {
       return AccessResult::forbidden();
     }
 
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $entity->get($field_name)->first();
     $allowed_transitions = array_keys($state_item->getTransitions());
     // Now check if the requested transition is allowed.
diff --git a/src/Event/WorkflowTransitionEvent.php b/src/Event/WorkflowTransitionEvent.php
index e13cd82..b43139b 100644
--- a/src/Event/WorkflowTransitionEvent.php
+++ b/src/Event/WorkflowTransitionEvent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\state_machine\Event;
 
+use Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface;
+use Drupal\state_machine\Plugin\Workflow\WorkflowState;
 use Drupal\Component\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\state_machine\Plugin\Workflow\WorkflowInterface;
@@ -15,21 +17,21 @@ class WorkflowTransitionEvent extends Event {
   /**
    * The transition.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowTransition
+   * @var WorkflowTransition
    */
   protected $transition;
 
   /**
    * The workflow.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;
 
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -43,11 +45,11 @@ class WorkflowTransitionEvent extends Event {
   /**
    * Constructs a new WorkflowTransitionEvent object.
    *
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowTransition $transition
+   * @param WorkflowTransition $transition
    *   The transition.
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The state field name.
@@ -62,7 +64,7 @@ class WorkflowTransitionEvent extends Event {
   /**
    * Gets the transition.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowTransition
+   * @return WorkflowTransition
    *   The transition.
    */
   public function getTransition() {
@@ -72,7 +74,7 @@ class WorkflowTransitionEvent extends Event {
   /**
    * Gets the workflow.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowInterface
+   * @return WorkflowInterface
    *   The workflow.
    */
   public function getWorkflow() {
@@ -82,7 +84,7 @@ class WorkflowTransitionEvent extends Event {
   /**
    * Gets the entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -102,11 +104,11 @@ class WorkflowTransitionEvent extends Event {
   /**
    * Gets the state field.
    *
-   * @return \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface
+   * @return StateItemInterface
    *   The state field.
    */
   public function getField() {
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $field */
+    /** @var StateItemInterface $field */
     $field = $this->entity->get($this->fieldName)->first();
     return $field;
   }
@@ -118,7 +120,7 @@ class WorkflowTransitionEvent extends Event {
    *   Use $this->getField()->getOriginalId() instead.
    * @see https://www.drupal.org/node/2982709
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowState
+   * @return WorkflowState
    *   The "from" state.
    */
   public function getFromState() {
@@ -133,7 +135,7 @@ class WorkflowTransitionEvent extends Event {
    *   Use $this->getTransition->getToState() instead.
    * @see https://www.drupal.org/node/2982709
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowState
+   * @return WorkflowState
    *   The "to" state.
    */
   public function getToState() {
diff --git a/src/Form/StateTransitionConfirmForm.php b/src/Form/StateTransitionConfirmForm.php
index dd446cf..e576041 100644
--- a/src/Form/StateTransitionConfirmForm.php
+++ b/src/Form/StateTransitionConfirmForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\state_machine\Form;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\state_machine\Plugin\Workflow\WorkflowTransition;
+use Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +17,7 @@ class StateTransitionConfirmForm extends ContentEntityConfirmFormBase {
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -28,7 +31,7 @@ class StateTransitionConfirmForm extends ContentEntityConfirmFormBase {
   /**
    * The transition.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowTransition
+   * @var WorkflowTransition
    */
   protected $transition;
 
@@ -52,7 +55,7 @@ class StateTransitionConfirmForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, $field_name = '', $transition_id = '') {
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $this->entity->get($field_name)->first();
     $transition = $state_item->getWorkflow()->getTransition($transition_id);
     $this->fieldName = $field_name;
@@ -64,7 +67,7 @@ class StateTransitionConfirmForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $this->entity->get($this->fieldName)->first();
     $items = [
       $this->t('<b>Transition</b>: @transition_label', ['@transition_label' => $this->transition->getLabel()]),
@@ -106,7 +109,7 @@ class StateTransitionConfirmForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $this->entity->get($this->fieldName)->first();
     if ($state_item->isTransitionAllowed($this->transition->getId())) {
       $state_item->applyTransition($this->transition);
diff --git a/src/Form/StateTransitionForm.php b/src/Form/StateTransitionForm.php
index 6ebbb54..f7aaf83 100644
--- a/src/Form/StateTransitionForm.php
+++ b/src/Form/StateTransitionForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\state_machine\Form;
 
+use Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface;
+use Drupal\state_machine\Plugin\Workflow\WorkflowTransition;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -12,7 +14,7 @@ class StateTransitionForm extends FormBase implements StateTransitionFormInterfa
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -80,7 +82,7 @@ class StateTransitionForm extends FormBase implements StateTransitionFormInterfa
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $this->entity->get($this->fieldName)->first();
 
     $form['actions'] = [
@@ -132,9 +134,9 @@ class StateTransitionForm extends FormBase implements StateTransitionFormInterfa
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $triggering_element = $form_state->getTriggeringElement();
-    /** @var \Drupal\state_machine\Plugin\Workflow\WorkflowTransition $transition */
+    /** @var WorkflowTransition $transition */
     $transition = $triggering_element['#transition'];
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $this->entity->get($this->fieldName)->first();
 
     // Ensure the transition is still allowed before applying it.
diff --git a/src/Form/StateTransitionFormInterface.php b/src/Form/StateTransitionFormInterface.php
index ff7d3f7..fbf581b 100644
--- a/src/Form/StateTransitionFormInterface.php
+++ b/src/Form/StateTransitionFormInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\state_machine\Form;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\BaseFormIdInterface;
 
@@ -15,7 +16,7 @@ interface StateTransitionFormInterface extends BaseFormIdInterface {
   /**
    * Gets the form entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The form entity.
    */
   public function getEntity();
@@ -26,7 +27,7 @@ interface StateTransitionFormInterface extends BaseFormIdInterface {
    * When the form is submitted, a transition will be applied to the entity,
    * and the entity will be saved.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The form entity.
    *
    * @return $this
diff --git a/src/Guard/GuardFactory.php b/src/Guard/GuardFactory.php
index d632dd0..9d2dbab 100644
--- a/src/Guard/GuardFactory.php
+++ b/src/Guard/GuardFactory.php
@@ -12,7 +12,7 @@ class GuardFactory implements GuardFactoryInterface {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
@@ -26,7 +26,7 @@ class GuardFactory implements GuardFactoryInterface {
   /**
    * Constructs a new GuardFactory object.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    * @param string[] $guard_service_ids
    *   The guard service IDs, grouped by workflow group ID.
diff --git a/src/Guard/GuardFactoryInterface.php b/src/Guard/GuardFactoryInterface.php
index b7ee419..f39d000 100644
--- a/src/Guard/GuardFactoryInterface.php
+++ b/src/Guard/GuardFactoryInterface.php
@@ -13,7 +13,7 @@ interface GuardFactoryInterface {
    * @param string $group_id
    *   The group ID.
    *
-   * @return \Drupal\state_machine\Guard\GuardInterface[]
+   * @return GuardInterface[]
    *   The instantiated guards.
    */
   public function get($group_id);
diff --git a/src/Guard/GuardInterface.php b/src/Guard/GuardInterface.php
index 01a2175..d91e2a2 100644
--- a/src/Guard/GuardInterface.php
+++ b/src/Guard/GuardInterface.php
@@ -20,11 +20,11 @@ interface GuardInterface {
   /**
    * Checks whether the given transition is allowed.
    *
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowTransition $transition
+   * @param WorkflowTransition $transition
    *   The transition.
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    *
    * @return bool
diff --git a/src/Plugin/Field/FieldFormatter/StateTransitionFormFormatter.php b/src/Plugin/Field/FieldFormatter/StateTransitionFormFormatter.php
index a036dc0..31b8fb2 100644
--- a/src/Plugin/Field/FieldFormatter/StateTransitionFormFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/StateTransitionFormFormatter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\state_machine\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\state_machine\Form\StateTransitionFormInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -30,21 +32,21 @@ class StateTransitionFormFormatter extends FormatterBase implements ContainerFac
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -55,7 +57,7 @@ class StateTransitionFormFormatter extends FormatterBase implements ContainerFac
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -65,11 +67,11 @@ class StateTransitionFormFormatter extends FormatterBase implements ContainerFac
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, ClassResolverInterface $class_resolver, FormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_type_manager) {
@@ -102,13 +104,13 @@ class StateTransitionFormFormatter extends FormatterBase implements ContainerFac
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $entity = $items->getEntity();
     // Do not show the form if the user isn't allowed to modify the entity.
     if (!$entity->access('update')) {
       return [];
     }
-    /** @var \Drupal\state_machine\Form\StateTransitionFormInterface $form_object */
+    /** @var StateTransitionFormInterface $form_object */
     $form_object = $this->classResolver->getInstanceFromDefinition(StateTransitionForm::class);
     $form_object->setEntity($entity);
     $form_object->setFieldName($items->getFieldDefinition()->getName());
diff --git a/src/Plugin/Field/FieldType/StateItem.php b/src/Plugin/Field/FieldType/StateItem.php
index d73f633..7891cd3 100644
--- a/src/Plugin/Field/FieldType/StateItem.php
+++ b/src/Plugin/Field/FieldType/StateItem.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\state_machine\Plugin\Field\FieldType;
 
+use Drupal\state_machine\Plugin\Workflow\WorkflowInterface;
+use Drupal\state_machine\WorkflowManagerInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ -38,7 +40,7 @@ class StateItem extends FieldItemBase implements StateItemInterface, OptionsProv
   /**
    * The transition to apply.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowTransition
+   * @var WorkflowTransition
    */
   protected $transitionToApply;
 
@@ -212,7 +214,7 @@ class StateItem extends FieldItemBase implements StateItemInterface, OptionsProv
    * @param string $value
    *   The field value, representing the state ID.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowState[]
+   * @return WorkflowState[]
    *   The allowed states.
    */
   protected function getAllowedStates($value) {
@@ -378,7 +380,7 @@ class StateItem extends FieldItemBase implements StateItemInterface, OptionsProv
    *   The phase: pre_transition OR post_transition.
    */
   protected function dispatchTransitionEvent($phase) {
-    /** @var \Drupal\state_machine\Plugin\Workflow\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $this->getWorkflow();
     $transition = $this->transitionToApply ?? $workflow->findTransition($this->originalValue, $this->value);
     if ($transition) {
@@ -438,9 +440,9 @@ class StateItem extends FieldItemBase implements StateItemInterface, OptionsProv
       return [];
     }
 
-    /** @var \Drupal\state_machine\WorkflowManagerInterface $workflow_manager */
+    /** @var WorkflowManagerInterface $workflow_manager */
     $workflow_manager = \Drupal::service('plugin.manager.workflow');
-    /** @var \Drupal\state_machine\Plugin\Workflow\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = $workflow_manager->createInstance($workflow_id);
 
     // Select states that allow at least one transition.
diff --git a/src/Plugin/Field/FieldType/StateItemInterface.php b/src/Plugin/Field/FieldType/StateItemInterface.php
index 9a917f8..3f433d6 100644
--- a/src/Plugin/Field/FieldType/StateItemInterface.php
+++ b/src/Plugin/Field/FieldType/StateItemInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\state_machine\Plugin\Field\FieldType;
 
+use Drupal\state_machine\Plugin\Workflow\WorkflowInterface;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\state_machine\Plugin\Workflow\WorkflowTransition;
 
@@ -13,7 +14,7 @@ interface StateItemInterface extends FieldItemInterface {
   /**
    * Gets the workflow used by the field.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowInterface|false
+   * @return WorkflowInterface|false
    *   The workflow, or FALSE if unknown at this time.
    */
   public function getWorkflow();
@@ -58,7 +59,7 @@ interface StateItemInterface extends FieldItemInterface {
   /**
    * Gets the allowed transitions for the current state.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowTransition[]
+   * @return WorkflowTransition[]
    *   The allowed transitions, keyed by transition ID.
    */
   public function getTransitions();
@@ -77,7 +78,7 @@ interface StateItemInterface extends FieldItemInterface {
   /**
    * Applies the given transition, changing the current state.
    *
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowTransition $transition
+   * @param WorkflowTransition $transition
    *   The transition to apply.
    *
    * @throws \InvalidArgumentException
diff --git a/src/Plugin/Workflow/Workflow.php b/src/Plugin/Workflow/Workflow.php
index f482462..a0d87fa 100644
--- a/src/Plugin/Workflow/Workflow.php
+++ b/src/Plugin/Workflow/Workflow.php
@@ -16,21 +16,21 @@ class Workflow extends PluginBase implements WorkflowInterface, ContainerFactory
   /**
    * The guard factory.
    *
-   * @var \Drupal\state_machine\Guard\GuardFactoryInterface
+   * @var GuardFactoryInterface
    */
   protected $guardFactory;
 
   /**
    * The initialized states.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowState[]
+   * @var WorkflowState[]
    */
   protected $states = [];
 
   /**
    * The initialized transitions.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowTransition[]
+   * @var WorkflowTransition[]
    */
   protected $transitions = [];
 
@@ -43,7 +43,7 @@ class Workflow extends PluginBase implements WorkflowInterface, ContainerFactory
    *   The workflow plugin_id.
    * @param mixed $plugin_definition
    *   The workflow plugin implementation definition.
-   * @param \Drupal\state_machine\Guard\GuardFactoryInterface $guard_factory
+   * @param GuardFactoryInterface $guard_factory
    *   The guard factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GuardFactoryInterface $guard_factory) {
@@ -173,9 +173,9 @@ class Workflow extends PluginBase implements WorkflowInterface, ContainerFactory
   /**
    * Gets whether the given transition is allowed.
    *
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowTransition $transition
+   * @param WorkflowTransition $transition
    *   The transition.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    *
    * @return bool
diff --git a/src/Plugin/Workflow/WorkflowInterface.php b/src/Plugin/Workflow/WorkflowInterface.php
index d61efd8..f27c2e9 100644
--- a/src/Plugin/Workflow/WorkflowInterface.php
+++ b/src/Plugin/Workflow/WorkflowInterface.php
@@ -36,7 +36,7 @@ interface WorkflowInterface {
   /**
    * Gets the workflow states.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowState[]
+   * @return WorkflowState[]
    *   The states, keyed by state ID.
    */
   public function getStates();
@@ -47,7 +47,7 @@ interface WorkflowInterface {
    * @param string $id
    *   The state ID.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowState|null
+   * @return WorkflowState|null
    *   The requested state, or NULL if not found.
    */
   public function getState($id);
@@ -55,7 +55,7 @@ interface WorkflowInterface {
   /**
    * Gets the workflow transitions.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowTransition[]
+   * @return WorkflowTransition[]
    *   The transitions, keyed by transition ID.
    */
   public function getTransitions();
@@ -66,7 +66,7 @@ interface WorkflowInterface {
    * @param string $id
    *   The transition ID.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowTransition|null
+   * @return WorkflowTransition|null
    *   The requested transition, or NULL if not found.
    */
   public function getTransition($id);
@@ -80,7 +80,7 @@ interface WorkflowInterface {
    * @param string $state_id
    *   The state ID.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowTransition[]
+   * @return WorkflowTransition[]
    *   The possible transitions, keyed by transition ID.
    */
   public function getPossibleTransitions($state_id);
@@ -90,10 +90,10 @@ interface WorkflowInterface {
    *
    * @param string $state_id
    *   The state ID.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent entity.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowTransition[]
+   * @return WorkflowTransition[]
    *   The allowed transitions, keyed by transition ID.
    */
   public function getAllowedTransitions($state_id, EntityInterface $entity);
@@ -106,7 +106,7 @@ interface WorkflowInterface {
    * @param string $to_state_id
    *   The ID of the "to" state.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowTransition|null
+   * @return WorkflowTransition|null
    *   The transition, or NULL if not found.
    */
   public function findTransition($from_state_id, $to_state_id);
diff --git a/src/Plugin/Workflow/WorkflowTransition.php b/src/Plugin/Workflow/WorkflowTransition.php
index c391723..bcad6a7 100644
--- a/src/Plugin/Workflow/WorkflowTransition.php
+++ b/src/Plugin/Workflow/WorkflowTransition.php
@@ -28,14 +28,14 @@ class WorkflowTransition {
   /**
    * The "from" states.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowState[]
+   * @var WorkflowState[]
    */
   protected $fromStates;
 
   /**
    * The "to" state.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowState
+   * @var WorkflowState
    */
   protected $toState;
 
@@ -46,9 +46,9 @@ class WorkflowTransition {
    *   The transition ID.
    * @param string $label
    *   The transition label.
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowState[] $from_states
+   * @param WorkflowState[] $from_states
    *   The "from" states.
-   * @param \Drupal\state_machine\Plugin\Workflow\WorkflowState $to_state
+   * @param WorkflowState $to_state
    *   The "to" state.
    */
   public function __construct($id, $label, array $from_states, WorkflowState $to_state) {
@@ -81,7 +81,7 @@ class WorkflowTransition {
   /**
    * Gets the "from" states.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowState[]
+   * @return WorkflowState[]
    *   The "from" states.
    */
   public function getFromStates() {
@@ -91,7 +91,7 @@ class WorkflowTransition {
   /**
    * Gets the "to" state.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowState
+   * @return WorkflowState
    *   The "to" state.
    */
   public function getToState() {
diff --git a/src/Plugin/views/filter/State.php b/src/Plugin/views/filter/State.php
index c734031..ab0899b 100644
--- a/src/Plugin/views/filter/State.php
+++ b/src/Plugin/views/filter/State.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\state_machine\Plugin\views\filter;
 
+use Drupal\state_machine\Plugin\Workflow\WorkflowInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -21,14 +23,14 @@ class State extends InOperator {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -41,9 +43,9 @@ class State extends InOperator {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -120,12 +122,12 @@ class State extends InOperator {
   /**
    * Gets the workflows used the current entity field.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The current entity type.
    * @param string $field_name
    *   The current field name.
    *
-   * @return \Drupal\state_machine\Plugin\Workflow\WorkflowInterface[]
+   * @return WorkflowInterface[]
    *   The workflows.
    */
   protected function getWorkflows(EntityTypeInterface $entity_type, $field_name) {
@@ -139,7 +141,7 @@ class State extends InOperator {
       if ($bundle_key = $entity_type->getKey('bundle')) {
         $values[$bundle_key] = $bundle;
       }
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $storage->create($values);
       if ($entity->hasField($field_name)) {
         $workflow = $entity->get($field_name)->first()->getWorkflow();
@@ -156,7 +158,7 @@ class State extends InOperator {
    * If the view has a non-exposed bundle filter, the bundles are taken from
    * there. Otherwise, the field's bundles are used.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The current entity type.
    * @param string $field_name
    *   The current field name.
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 8eec937..58d7f3d 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -15,14 +15,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/src/WorkflowGroupManager.php b/src/WorkflowGroupManager.php
index b11e4b5..d088bd7 100644
--- a/src/WorkflowGroupManager.php
+++ b/src/WorkflowGroupManager.php
@@ -36,9 +36,9 @@ class WorkflowGroupManager extends DefaultPluginManager implements WorkflowGroup
   /**
    * Constructs a new WorkflowGroupManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
    */
   public function __construct(ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend) {
diff --git a/src/WorkflowManager.php b/src/WorkflowManager.php
index a5601d0..f801ee5 100644
--- a/src/WorkflowManager.php
+++ b/src/WorkflowManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\state_machine;
 
+use Drupal\state_machine\Plugin\Workflow\WorkflowInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -21,14 +22,14 @@ class WorkflowManager extends DefaultPluginManager implements WorkflowManagerInt
   /**
    * The workflow group manager.
    *
-   * @var \Drupal\state_machine\WorkflowGroupManagerInterface
+   * @var WorkflowGroupManagerInterface
    */
   protected $groupManager;
 
   /**
    * A cache of loaded workflows, keyed by workflow ID.
    *
-   * @var \Drupal\state_machine\Plugin\Workflow\WorkflowInterface[]
+   * @var WorkflowInterface[]
    */
   protected $plugins;
 
@@ -48,11 +49,11 @@ class WorkflowManager extends DefaultPluginManager implements WorkflowManagerInt
   /**
    * Constructs a new WorkflowManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\state_machine\WorkflowGroupManagerInterface $group_manager
+   * @param WorkflowGroupManagerInterface $group_manager
    *   The workflow group manager.
    */
   public function __construct(ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend, WorkflowGroupManagerInterface $group_manager) {
diff --git a/state_machine.module b/state_machine.module
index 87b210e..db1d449 100644
--- a/state_machine.module
+++ b/state_machine.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Provides workflow functionality.
@@ -25,7 +26,7 @@ function state_machine_field_formatter_info_alter(array &$info) {
  * Implements hook_entity_type_alter().
  */
 function state_machine_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   foreach ($entity_types as $entity_type) {
     // Sets a default state-transition-confirm form class for all entity types
     // defining a "state-transition-form" link template.
diff --git a/tests/modules/state_machine_test/src/EventSubscriber/WorkflowTransitionEventSubscriber.php b/tests/modules/state_machine_test/src/EventSubscriber/WorkflowTransitionEventSubscriber.php
index fa1c9aa..02135b8 100644
--- a/tests/modules/state_machine_test/src/EventSubscriber/WorkflowTransitionEventSubscriber.php
+++ b/tests/modules/state_machine_test/src/EventSubscriber/WorkflowTransitionEventSubscriber.php
@@ -12,14 +12,14 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new WorkflowTransitionEventSubscriber object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(MessengerInterface $messenger) {
@@ -44,7 +44,7 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to the 'entity_test_with_bundle.create.pre_transition' event.
    *
-   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   * @param WorkflowTransitionEvent $event
    *   The transition event.
    */
   public function onPreTransition(WorkflowTransitionEvent $event) {
@@ -54,7 +54,7 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to the 'entity_test_with_bundle.create.post_transition' event.
    *
-   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   * @param WorkflowTransitionEvent $event
    *   The transition event.
    */
   public function onPostTransition(WorkflowTransitionEvent $event) {
@@ -64,7 +64,7 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to the 'entity_test_with_bundle.pre_transition' event.
    *
-   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   * @param WorkflowTransitionEvent $event
    *   The transition event.
    */
   public function onGroupPreTransition(WorkflowTransitionEvent $event) {
@@ -74,7 +74,7 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to the 'entity_test_with_bundle.post_transition' event.
    *
-   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   * @param WorkflowTransitionEvent $event
    *   The transition event.
    */
   public function onGroupPostTransition(WorkflowTransitionEvent $event) {
@@ -84,7 +84,7 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to the 'state_machine.pre_transition' event.
    *
-   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   * @param WorkflowTransitionEvent $event
    *   The transition event.
    */
   public function onGenericPreTransition(WorkflowTransitionEvent $event) {
@@ -94,7 +94,7 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to the 'state_machine.post_transition' event.
    *
-   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   * @param WorkflowTransitionEvent $event
    *   The transition event.
    */
   public function onGenericPostTransition(WorkflowTransitionEvent $event) {
@@ -104,7 +104,7 @@ class WorkflowTransitionEventSubscriber implements EventSubscriberInterface {
   /**
    * Sets a message with event information for test purposes.
    *
-   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   * @param WorkflowTransitionEvent $event
    *   The transition event.
    * @param string $phase
    *   The phase during which the event occurred.
diff --git a/tests/modules/state_machine_test/src/Guard/GenericGuard.php b/tests/modules/state_machine_test/src/Guard/GenericGuard.php
index 70850c9..d95e467 100644
--- a/tests/modules/state_machine_test/src/Guard/GenericGuard.php
+++ b/tests/modules/state_machine_test/src/Guard/GenericGuard.php
@@ -13,14 +13,14 @@ class GenericGuard implements GuardInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a new GenericGuard object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(AccountInterface $current_user) {
diff --git a/tests/src/Kernel/StateItemTest.php b/tests/src/Kernel/StateItemTest.php
index 5e1c53a..d344ae0 100644
--- a/tests/src/Kernel/StateItemTest.php
+++ b/tests/src/Kernel/StateItemTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\state_machine\Kernel;
 
+use Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface;
 use Drupal\entity_test\Entity\EntityTestWithBundle;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
 
@@ -38,7 +39,7 @@ class StateItemTest extends FieldKernelTestBase {
    */
   public function testInvalidTransitionApply() {
     $entity = EntityTestWithBundle::create(['type' => 'first']);
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $entity->get('field_state')->first();
     $this->expectException(\InvalidArgumentException::class);
     $state_item->applyTransitionById('INVALID');
@@ -54,7 +55,7 @@ class StateItemTest extends FieldKernelTestBase {
     ]);
     $this->assertEquals($initial_state, $entity->get('field_state')->value);
 
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $entity->get('field_state')->first();
     // Confirm that the transitions are correct.
     $transitions = $state_item->getTransitions();
@@ -153,7 +154,7 @@ class StateItemTest extends FieldKernelTestBase {
       'type' => 'first',
     ]);
     $entity->field_state->generateSampleItems();
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $entity->get('field_state')->first();
     $this->assertEquals('default', $state_item->getWorkflow()->getId());
     $this->assertNotEmpty($state_item->getId());
@@ -164,7 +165,7 @@ class StateItemTest extends FieldKernelTestBase {
       'type' => 'second',
     ]);
     $entity->field_state->generateSampleItems();
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $entity->get('field_state')->first();
     $this->assertNotEmpty($state_item->getId());
     $this->assertTrue(in_array($state_item->getId(), array_keys($state_item->getWorkflow()->getStates())));
@@ -174,7 +175,7 @@ class StateItemTest extends FieldKernelTestBase {
       'type' => 'third',
     ]);
     $entity->field_state->generateSampleItems();
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $entity->get('field_state')->first();
     $this->assertEquals('two_transitions', $state_item->getWorkflow()->getId());
     $this->assertNotEmpty($state_item->getId());
diff --git a/tests/src/Unit/Plugin/Workflow/WorkflowTest.php b/tests/src/Unit/Plugin/Workflow/WorkflowTest.php
index 915734c..836bae1 100644
--- a/tests/src/Unit/Plugin/Workflow/WorkflowTest.php
+++ b/tests/src/Unit/Plugin/Workflow/WorkflowTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\state_machine\Unit\Plugin\Workflow;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -17,6 +18,7 @@ use Prophecy\Argument;
  */
 class WorkflowTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::getId
    */
diff --git a/tests/src/Unit/Plugin/WorkflowGroup/WorkflowGroupTest.php b/tests/src/Unit/Plugin/WorkflowGroup/WorkflowGroupTest.php
index aef843b..48d8ef9 100644
--- a/tests/src/Unit/Plugin/WorkflowGroup/WorkflowGroupTest.php
+++ b/tests/src/Unit/Plugin/WorkflowGroup/WorkflowGroupTest.php
@@ -15,7 +15,7 @@ class WorkflowGroupTest extends UnitTestCase {
   /**
    * The workflow group.
    *
-   * @var \Drupal\state_machine\Plugin\WorkflowGroup\WorkflowGroup
+   * @var WorkflowGroup
    */
   protected $workflowGroup;
 
diff --git a/tests/src/Unit/WorkflowManagerCacheTest.php b/tests/src/Unit/WorkflowManagerCacheTest.php
index c2e91eb..cf3f894 100644
--- a/tests/src/Unit/WorkflowManagerCacheTest.php
+++ b/tests/src/Unit/WorkflowManagerCacheTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\state_machine\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -20,38 +22,39 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  */
 class WorkflowManagerCacheTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * An instance of the WorkflowManager. This is the system under test.
    *
-   * @var \Drupal\state_machine\WorkflowManager
+   * @var WorkflowManager
    */
   protected $workflowManager;
 
   /**
    * A mocked instance of the dependency injection container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ContainerInterface|ObjectProphecy
    */
   protected $container;
 
   /**
    * A mocked instance of the module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ModuleHandlerInterface|ObjectProphecy
    */
   protected $moduleHandler;
 
   /**
    * A mocked instance of a cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var CacheBackendInterface|ObjectProphecy
    */
   protected $cacheBackend;
 
   /**
    * A mocked instance of the workflow group manager.
    *
-   * @var \Drupal\state_machine\WorkflowGroupManagerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var WorkflowGroupManagerInterface|ObjectProphecy
    */
   protected $workflowGroupManager;
 
