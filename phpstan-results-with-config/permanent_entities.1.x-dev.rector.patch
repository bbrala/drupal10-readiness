diff --git a/src/Controller/PermanentEntityController.php b/src/Controller/PermanentEntityController.php
index 5339f54..37ea353 100644
--- a/src/Controller/PermanentEntityController.php
+++ b/src/Controller/PermanentEntityController.php
@@ -49,7 +49,7 @@ class PermanentEntityController extends ControllerBase implements ContainerInjec
   /**
    * Generates an overview table of older revisions of a Permanent Entity .
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $permanent_entity
+   * @param PermanentEntityInterface $permanent_entity
    *   A Permanent Entity  object.
    *
    * @return array
diff --git a/src/Entity/PermanentEntityInterface.php b/src/Entity/PermanentEntityInterface.php
index 5287a0e..56be1c9 100644
--- a/src/Entity/PermanentEntityInterface.php
+++ b/src/Entity/PermanentEntityInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permanent_entities\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -76,7 +77,7 @@ interface PermanentEntityInterface extends ContentEntityInterface, RevisionLogIn
   /**
    * Gets the Permanent Entity revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/EventSubscriber/TypeViewerSubscriber.php b/src/EventSubscriber/TypeViewerSubscriber.php
index 5d51545..1d61c53 100644
--- a/src/EventSubscriber/TypeViewerSubscriber.php
+++ b/src/EventSubscriber/TypeViewerSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\permanent_entities\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Routing\CurrentRouteMatch;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\permanent_entities\Entity\PermanentEntityType;
@@ -17,7 +17,7 @@ class TypeViewerSubscriber implements EventSubscriberInterface {
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
@@ -40,7 +40,7 @@ class TypeViewerSubscriber implements EventSubscriberInterface {
   /**
    * This method is called when the KernelEvents::REQUEST is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function onRequest(Event $event) {
diff --git a/src/Form/PermanentEntityRevisionDeleteForm.php b/src/Form/PermanentEntityRevisionDeleteForm.php
index 952d4d4..4e241a6 100644
--- a/src/Form/PermanentEntityRevisionDeleteForm.php
+++ b/src/Form/PermanentEntityRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permanent_entities\Form;
 
+use Drupal\permanent_entities\Entity\PermanentEntityInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class PermanentEntityRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Permanent Entity revision.
    *
-   * @var \Drupal\permanent_entities\Entity\PermanentEntityInterface
+   * @var PermanentEntityInterface
    */
   protected $revision;
 
   /**
    * The Permanent Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $permanentEntityStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new PermanentEntityRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
diff --git a/src/Form/PermanentEntityRevisionRevertForm.php b/src/Form/PermanentEntityRevisionRevertForm.php
index a03eef5..c2533af 100644
--- a/src/Form/PermanentEntityRevisionRevertForm.php
+++ b/src/Form/PermanentEntityRevisionRevertForm.php
@@ -21,30 +21,30 @@ class PermanentEntityRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Permanent Entity revision.
    *
-   * @var \Drupal\permanent_entities\Entity\PermanentEntityInterface
+   * @var PermanentEntityInterface
    */
   protected $revision;
 
   /**
    * The Permanent Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $permanentEntityStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new PermanentEntityRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Permanent Entity storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -130,12 +130,12 @@ class PermanentEntityRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $revision
+   * @param PermanentEntityInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\permanent_entities\Entity\PermanentEntityInterface
+   * @return PermanentEntityInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(PermanentEntityInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/PermanentEntityRevisionRevertTranslationForm.php b/src/Form/PermanentEntityRevisionRevertTranslationForm.php
index dbd2bc5..88b20cc 100644
--- a/src/Form/PermanentEntityRevisionRevertTranslationForm.php
+++ b/src/Form/PermanentEntityRevisionRevertTranslationForm.php
@@ -27,18 +27,18 @@ class PermanentEntityRevisionRevertTranslationForm extends PermanentEntityRevisi
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new PermanentEntityRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Permanent Entity storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -93,7 +93,7 @@ class PermanentEntityRevisionRevertTranslationForm extends PermanentEntityRevisi
   protected function prepareRevertedRevision(PermanentEntityInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\permanent_entities\Entity\PermanentEntityInterface $default_revision */
+    /** @var PermanentEntityInterface $default_revision */
     $latest_revision = $this->PermanentEntityStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/PermanentEntitySettingsForm.php b/src/Form/PermanentEntitySettingsForm.php
index 8b92d6f..7786323 100644
--- a/src/Form/PermanentEntitySettingsForm.php
+++ b/src/Form/PermanentEntitySettingsForm.php
@@ -27,7 +27,7 @@ class PermanentEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class PermanentEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/PermanentEntityAccessControlHandler.php b/src/PermanentEntityAccessControlHandler.php
index 3c0bd3f..ded3731 100644
--- a/src/PermanentEntityAccessControlHandler.php
+++ b/src/PermanentEntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permanent_entities;
 
+use Drupal\permanent_entities\Entity\PermanentEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class PermanentEntityAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\permanent_entities\Entity\PermanentEntityInterface $entity */
+    /** @var PermanentEntityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/PermanentEntityHtmlRouteProvider.php b/src/PermanentEntityHtmlRouteProvider.php
index 70f4794..bb5b8fc 100644
--- a/src/PermanentEntityHtmlRouteProvider.php
+++ b/src/PermanentEntityHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class PermanentEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class PermanentEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class PermanentEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class PermanentEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class PermanentEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class PermanentEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/PermanentEntityPermissions.php b/src/PermanentEntityPermissions.php
index 5780931..1b6d49a 100644
--- a/src/PermanentEntityPermissions.php
+++ b/src/PermanentEntityPermissions.php
@@ -20,14 +20,14 @@ class PermanentEntityPermissions implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a TaxonomyPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -58,7 +58,7 @@ class PermanentEntityPermissions implements ContainerInjectionInterface {
   /**
    * Builds a standard list of permanent_entity permissions for a given type.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityType $permanent_entity_type
+   * @param PermanentEntityType $permanent_entity_type
    *   The permanent_entity_type.
    *
    * @return array
diff --git a/src/PermanentEntityStorageInterface.php b/src/PermanentEntityStorageInterface.php
index 4d3bfe3..5477843 100644
--- a/src/PermanentEntityStorageInterface.php
+++ b/src/PermanentEntityStorageInterface.php
@@ -20,7 +20,7 @@ interface PermanentEntityStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of Permanent Entity revision IDs for a specific Permanent Entity.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $entity
+   * @param PermanentEntityInterface $entity
    *   The Permanent Entity entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface PermanentEntityStorageInterface extends ContentEntityStorageInterface
   /**
    * Gets a list of revision IDs having a given user as Permanent Entity author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface PermanentEntityStorageInterface extends ContentEntityStorageInterface
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $entity
+   * @param PermanentEntityInterface $entity
    *   The Permanent Entity entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface PermanentEntityStorageInterface extends ContentEntityStorageInterface
   /**
    * Unsets the language for all Permanent Entity with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/PermanentEntityTypeAccessControlHandler.php b/src/PermanentEntityTypeAccessControlHandler.php
index 23102a0..e589366 100644
--- a/src/PermanentEntityTypeAccessControlHandler.php
+++ b/src/PermanentEntityTypeAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\permanent_entities;
 
+use Drupal\permanent_entities\Entity\PermanentEntityTypeInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class PermanentEntityTypeAccessControlHandler extends EntityAccessControlHandler
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\permanent_entities\Entity\PermanentEntityTypeInterface $entity */
+    /** @var PermanentEntityTypeInterface $entity */
     if ($operation === 'delete') {
       $query = \Drupal::entityQuery('permanent_entity');
       $ids = $query->condition('type', $entity->id())->execute();
diff --git a/src/Plugin/views/argument_default/PermanentEntity.php b/src/Plugin/views/argument_default/PermanentEntity.php
index 806b276..d56f2f2 100644
--- a/src/Plugin/views/argument_default/PermanentEntity.php
+++ b/src/Plugin/views/argument_default/PermanentEntity.php
@@ -22,7 +22,7 @@ class PermanentEntity extends ArgumentDefaultPluginBase implements CacheableDepe
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -35,7 +35,7 @@ class PermanentEntity extends ArgumentDefaultPluginBase implements CacheableDepe
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match) {
diff --git a/tests/src/Functional/CrudTest.php b/tests/src/Functional/CrudTest.php
index dc9ee61..0291648 100644
--- a/tests/src/Functional/CrudTest.php
+++ b/tests/src/Functional/CrudTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\permanent_entities\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\permanent_entities\Entity\PermanentEntity;
@@ -29,14 +30,14 @@ class CrudTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->admin = $this->drupalCreateUser([], 'superadmin', TRUE);
     $this->drupalLogin($this->admin);
@@ -48,7 +49,7 @@ class CrudTest extends BrowserTestBase {
   public function testNoAddOrDelete() {
     $this->drupalGet(Url::fromRoute('entity.permanent_entity.collection'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Permanent Entities');
+    $this->assertSession()->responseContains('Permanent Entities');
     $assert_session = $this->assertSession();
     $assert_session->elementNotExists('css', '.button--primary');
     // Nothing for edit or delete yet.
@@ -64,11 +65,11 @@ class CrudTest extends BrowserTestBase {
     // Since full view mode is enabled, this should return code 200.
     $this->drupalGet('/permanent_entity/jupiter');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
-    $this->assertRaw('permanent-entity');
-    $this->assertRaw('permanent-entity--view-mode-full');
-    $this->assertRaw('permanent-entity--type-planet');
-    $this->assertRaw('permanent-entity--id-jupiter');
+    $this->assertSession()->responseContains('Jupiter');
+    $this->assertSession()->responseContains('permanent-entity');
+    $this->assertSession()->responseContains('permanent-entity--view-mode-full');
+    $this->assertSession()->responseContains('permanent-entity--type-planet');
+    $this->assertSession()->responseContains('permanent-entity--id-jupiter');
 
     // Now disable the full view mode from the bundle settings.
     $entity_type = PermanentEntityType::load('planet');
@@ -86,7 +87,7 @@ class CrudTest extends BrowserTestBase {
 
     $this->drupalGet(Url::fromRoute('entity.permanent_entity.collection'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
+    $this->assertSession()->responseContains('Jupiter');
     $assert_session = $this->assertSession();
     $assert_session->elementNotExists('css', '.button--primary');
     $assert_session->elementNotExists('css', '.dropbutton .delete');
@@ -99,10 +100,10 @@ class CrudTest extends BrowserTestBase {
     );
 
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
+    $this->assertSession()->responseContains('Jupiter');
     $save_button = $this->xpath('//input[@value="Save"]');
     $this->assertCount(1, $save_button, 'The Save button exists.');
-    $this->assertNoRaw('delete');
+    $this->assertSession()->responseNotContains('delete');
   }
 
   /**
diff --git a/tests/src/Kernel/CrudTest.php b/tests/src/Kernel/CrudTest.php
index 7321e76..2a8f4c1 100644
--- a/tests/src/Kernel/CrudTest.php
+++ b/tests/src/Kernel/CrudTest.php
@@ -24,7 +24,7 @@ class CrudTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('permanent_entity');
@@ -81,6 +81,7 @@ class CrudTest extends KernelTestBase {
 
   /**
    * Test limits of labels.
+   * @doesNotPerformAssertions
    */
   public function testLongName() {
     PermanentEntity::create([
