diff --git a/src/Commands/DefaultContentCommands.php b/src/Commands/DefaultContentCommands.php
index 9aa54e1..502176c 100644
--- a/src/Commands/DefaultContentCommands.php
+++ b/src/Commands/DefaultContentCommands.php
@@ -15,14 +15,14 @@ class DefaultContentCommands extends DrushCommands {
   /**
    * The default content exporter.
    *
-   * @var \Drupal\default_content\ExporterInterface
+   * @var ExporterInterface
    */
   protected $defaultContentExporter;
 
   /**
    * SimplesitemapController constructor.
    *
-   * @param \Drupal\default_content\ExporterInterface $default_content_exporter
+   * @param ExporterInterface $default_content_exporter
    *   The default content exporter.
    */
   public function __construct(ExporterInterface $default_content_exporter) {
diff --git a/src/Config/DefaultContentConfigSubscriber.php b/src/Config/DefaultContentConfigSubscriber.php
index 0e46743..ae3ef38 100644
--- a/src/Config/DefaultContentConfigSubscriber.php
+++ b/src/Config/DefaultContentConfigSubscriber.php
@@ -15,14 +15,14 @@ class DefaultContentConfigSubscriber implements EventSubscriberInterface {
   /**
    * The default content importer.
    *
-   * @var \Drupal\default_content\ImporterInterface
+   * @var ImporterInterface
    */
   protected $defaultContentImporter;
 
   /**
    * Constructs a DefaultContentConfigSubscriber object.
    *
-   * @param \Drupal\default_content\ImporterInterface $default_content_importer
+   * @param ImporterInterface $default_content_importer
    *   The default content importer.
    */
   public function __construct(ImporterInterface $default_content_importer) {
@@ -32,7 +32,7 @@ class DefaultContentConfigSubscriber implements EventSubscriberInterface {
   /**
    * Creates default content after config synchronization.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    *   The config importer event.
    */
   public function onConfigImport(ConfigImporterEvent $event) {
diff --git a/src/Event/ExportEvent.php b/src/Event/ExportEvent.php
index d70b130..a03cd41 100644
--- a/src/Event/ExportEvent.php
+++ b/src/Event/ExportEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\default_content\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines event fired when content is exported.
@@ -15,14 +15,14 @@ class ExportEvent extends Event {
   /**
    * The entity we're exporting.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
   /**
    * Constructs a new export event.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The exported content entity.
    */
   public function __construct(ContentEntityInterface $entity) {
@@ -32,7 +32,7 @@ class ExportEvent extends Event {
   /**
    * Get the entity we've exported.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The exported content entity.
    */
   public function getExportedEntity() {
diff --git a/src/Event/ImportEvent.php b/src/Event/ImportEvent.php
index 0b486f4..7251290 100644
--- a/src/Event/ImportEvent.php
+++ b/src/Event/ImportEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\default_content\Event;
 
-use Symfony\Component\EventDispatcher\Event;
-
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * Defines event fired when content is imported.
  *
@@ -14,7 +14,7 @@ class ImportEvent extends Event {
   /**
    * An array of content entities that were imported.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface[]
+   * @var ContentEntityInterface[]
    */
   protected $entities;
 
@@ -28,7 +28,7 @@ class ImportEvent extends Event {
   /**
    * Constructs a new import event.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   An array of content entities that were imported.
    * @param string $module
    *   The module that provided the default content.
@@ -41,7 +41,7 @@ class ImportEvent extends Event {
   /**
    * Get the imported entities.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   An array of content entities that were imported.
    */
   public function getImportedEntities() {
diff --git a/src/Exporter.php b/src/Exporter.php
index e7d062b..613b087 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -32,88 +32,88 @@ class Exporter implements ExporterInterface {
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The info file parser.
    *
-   * @var \Drupal\Core\Extension\InfoParserInterface
+   * @var InfoParserInterface
    */
   protected $infoParser;
 
   /**
    * The link manager service.
    *
-   * @var \Drupal\hal\LinkManager\LinkManagerInterface
+   * @var LinkManagerInterface
    */
   protected $linkManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * The filesystem service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Constructs the default content manager.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\hal\LinkManager\LinkManagerInterface $link_manager
+   * @param LinkManagerInterface $link_manager
    *   The link manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   The info file parser.
    * @param string $link_domain
    *   Defines relation domain URI for entity links.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The filesystem service.
    */
   public function __construct(Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, LinkManagerInterface $link_manager, EventDispatcherInterface $event_dispatcher, ModuleHandlerInterface $module_handler, InfoParserInterface $info_parser, $link_domain, AccountSwitcherInterface $account_switcher, FileSystemInterface $file_system) {
@@ -150,7 +150,7 @@ class Exporter implements ExporterInterface {
     $this->linkManager->setLinkDomain($this->linkDomain);
 
     $return = $this->serializer->serialize($entity, 'hal_json', ['json_encode_options' => JSON_PRETTY_PRINT]);
-    $this->eventDispatcher->dispatch(DefaultContentEvents::EXPORT, new ExportEvent($entity));
+    $this->eventDispatcher->dispatch(new ExportEvent($entity), DefaultContentEvents::EXPORT);
 
     // Reset the link domain and the current user, if needed.
     $this->linkManager->setLinkDomain(FALSE);
@@ -265,14 +265,14 @@ class Exporter implements ExporterInterface {
    * This method is also recursive to support use-cases like a node -> media
    * -> file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param int $depth
    *   Guard against infinite recursion.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $indexed_dependencies
+   * @param ContentEntityInterface[] $indexed_dependencies
    *   Previously discovered dependencies.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Keyed array of entities indexed by entity type and ID.
    */
   protected function getEntityReferencesRecursive(ContentEntityInterface $entity, $depth = 0, array &$indexed_dependencies = []) {
diff --git a/src/Importer.php b/src/Importer.php
index 600ed5c..181bc90 100644
--- a/src/Importer.php
+++ b/src/Importer.php
@@ -30,14 +30,14 @@ class Importer implements ImporterInterface {
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -58,47 +58,47 @@ class Importer implements ImporterInterface {
   /**
    * The link manager service.
    *
-   * @var \Drupal\hal\LinkManager\LinkManagerInterface
+   * @var LinkManagerInterface
    */
   protected $linkManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The file system scanner.
    *
-   * @var \Drupal\default_content\ScannerInterface
+   * @var ScannerInterface
    */
   protected $scanner;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * Constructs the default content manager.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\hal\LinkManager\LinkManagerInterface $link_manager
+   * @param LinkManagerInterface $link_manager
    *   The link manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\default_content\ScannerInterface $scanner
+   * @param ScannerInterface $scanner
    *   The file scanner.
    * @param string $link_domain
    *   Defines relation domain URI for entity links.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
    */
   public function __construct(Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, LinkManagerInterface $link_manager, EventDispatcherInterface $event_dispatcher, ScannerInterface $scanner, $link_domain, AccountSwitcherInterface $account_switcher) {
@@ -116,7 +116,7 @@ class Importer implements ImporterInterface {
    */
   public function importContent($module) {
     $created = [];
-    $folder = drupal_get_path('module', $module) . "/content";
+    $folder = \Drupal::service('extension.list.module')->getPath($module) . "/content";
 
     if (file_exists($folder)) {
       $root_user = $this->entityTypeManager->getStorage('user')->load(1);
@@ -190,7 +190,7 @@ class Importer implements ImporterInterface {
           $created[$entity->uuid()] = $entity;
         }
       }
-      $this->eventDispatcher->dispatch(DefaultContentEvents::IMPORT, new ImportEvent($created, $module));
+      $this->eventDispatcher->dispatch(new ImportEvent($created, $module), DefaultContentEvents::IMPORT);
       $this->accountSwitcher->switchBack();
     }
     // Reset the tree.
diff --git a/src/ImporterInterface.php b/src/ImporterInterface.php
index 0d300a3..261892b 100644
--- a/src/ImporterInterface.php
+++ b/src/ImporterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\default_content;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * An interface defining a default content importer.
  */
@@ -13,7 +14,7 @@ interface ImporterInterface {
    * @param string $module
    *   The module to create the default content from.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of created entities keyed by their UUIDs.
    */
   public function importContent($module);
diff --git a/tests/src/Functional/DefaultContentTest.php b/tests/src/Functional/DefaultContentTest.php
index d468668..13158df 100644
--- a/tests/src/Functional/DefaultContentTest.php
+++ b/tests/src/Functional/DefaultContentTest.php
@@ -33,7 +33,7 @@ class DefaultContentTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user 2 with the correct UUID.
     User::create([
@@ -48,6 +48,7 @@ class DefaultContentTest extends BrowserTestBase {
 
   /**
    * Test importing default content.
+   * @doesNotPerformAssertions
    */
   public function testImport() {
     // Enable the module and import the content.
@@ -70,7 +71,7 @@ class DefaultContentTest extends BrowserTestBase {
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
diff --git a/tests/src/Kernel/ExporterIntegrationTest.php b/tests/src/Kernel/ExporterIntegrationTest.php
index b6fb8a4..85ceb4a 100644
--- a/tests/src/Kernel/ExporterIntegrationTest.php
+++ b/tests/src/Kernel/ExporterIntegrationTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\default_content\Kernel;
 
+use Drupal\default_content\Exporter;
+use Symfony\Component\Serializer\Serializer;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ -28,14 +30,14 @@ class ExporterIntegrationTest extends KernelTestBase {
   /**
    * The tested default content exporter.
    *
-   * @var \Drupal\default_content\Exporter
+   * @var Exporter
    */
   protected $exporter;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
@@ -58,7 +60,7 @@ class ExporterIntegrationTest extends KernelTestBase {
     $term->save();
     $term = Term::load($term->id());
 
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
     \Drupal::service('hal.link_manager')
       ->setLinkDomain($this->container->getParameter('default_content.link_domain'));
@@ -68,8 +70,8 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_decoded = json_decode($exported);
 
     // Ensure the proper UUID is part of it.
-    $this->assertEqual($exported_decoded->uuid[0]->value, $term->uuid());
-    $this->assertEqual($exported, $expected);
+    $this->assertEquals($exported_decoded->uuid[0]->value, $term->uuid());
+    $this->assertEquals($exported, $expected);
 
     // Tests export of taxonomy parent field.
     // @todo Get rid of after https://www.drupal.org/node/2543726
@@ -111,7 +113,7 @@ class ExporterIntegrationTest extends KernelTestBase {
     // Reload the node to get the proper casted values from the DB.
     $node = Node::load($node->id());
 
-    /** @var \Symfony\Component\Serializer\Serializer $serializer */
+    /** @var Serializer $serializer */
     $serializer = \Drupal::service('serializer');
     \Drupal::service('hal.link_manager')
       ->setLinkDomain($this->container->getParameter('default_content.link_domain'));
@@ -122,15 +124,15 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_by_entity_type = $this->exporter->exportContentWithReferences('node', $node->id());
 
     // Ensure that the node type is not tryed to be exported.
-    $this->assertEqual(array_keys($exported_by_entity_type), ['node', 'user']);
+    $this->assertEquals(array_keys($exported_by_entity_type), ['node', 'user']);
 
     // Ensure the right UUIDs are exported.
-    $this->assertEqual([$node->uuid()], array_keys($exported_by_entity_type['node']));
-    $this->assertEqual([$user->uuid()], array_keys($exported_by_entity_type['user']));
+    $this->assertEquals([$node->uuid()], array_keys($exported_by_entity_type['node']));
+    $this->assertEquals([$user->uuid()], array_keys($exported_by_entity_type['user']));
 
     // Compare the actual serialized data.
-    $this->assertEqual(reset($exported_by_entity_type['node']), $expected_node);
-    $this->assertEqual(reset($exported_by_entity_type['user']), $expected_user);
+    $this->assertEquals(reset($exported_by_entity_type['node']), $expected_node);
+    $this->assertEquals(reset($exported_by_entity_type['user']), $expected_user);
 
     // Ensure no recursion on export.
     $field_name = 'field_test_self_ref';
@@ -183,7 +185,7 @@ class ExporterIntegrationTest extends KernelTestBase {
     $expected_node = $serializer->serialize($node, 'hal_json', ['json_encode_options' => JSON_PRETTY_PRINT]);
 
     $content = $this->exporter->exportModuleContent('default_content_export_test');
-    $this->assertEqual($content['node'][$test_uuid], $expected_node);
+    $this->assertEquals($content['node'][$test_uuid], $expected_node);
   }
 
   /**
