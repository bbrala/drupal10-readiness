modules/contrib/widget_block/src/Backend/WidgetBlockBackend.php
modules/contrib/widget_block/src/Backend/WidgetBlockBackendInterface.php
modules/contrib/widget_block/src/Entity/WidgetBlockConfig.php
modules/contrib/widget_block/src/Entity/WidgetBlockConfigInterface.php
modules/contrib/widget_block/src/Form/WidgetBlockConfigDeleteForm.php
modules/contrib/widget_block/src/Form/WidgetBlockConfigEditForm.php
modules/contrib/widget_block/src/Form/WidgetBlockConfigInvalidateForm.php
modules/contrib/widget_block/src/Form/WidgetBlockConfigRefreshForm.php
modules/contrib/widget_block/src/Plugin/Block/WidgetBlock.php
modules/contrib/widget_block/src/Plugin/Block/WidgetBlockInterface.php
modules/contrib/widget_block/src/Plugin/Derivative/WidgetBlockDeriver.php
modules/contrib/widget_block/src/Renderable/WidgetMarkup.php
modules/contrib/widget_block/src/Renderable/WidgetMarkupInterface.php
modules/contrib/widget_block/src/Utility/AssetsHelper.php
modules/contrib/widget_block/src/Utility/ResponseHelper.php
modules/contrib/widget_block/src/WidgetBlockLazyBuilder.php
modules/contrib/widget_block/src/WidgetBlockListBuilder.php
modules/contrib/widget_block/widget_block.api.php
modules/contrib/widget_block/widget_block.drush.inc
modules/contrib/widget_block/widget_block.module

15 files with changes
=====================

1) modules/contrib/widget_block/widget_block.module:77

    ---------- begin diff ----------
@@ @@
 /*
  * Batch related helper functions.
  */
-
 /**
  * Batch API related callback which is invoked when operation should be performed.
  *
- * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+ * @param WidgetBlockConfigInterface $config
  *   An instance of WidgetBlockConfigInterface.
- * @param \Drupal\Core\Language\LanguageInterface $language
+ * @param LanguageInterface $language
  *   An instance of LanguageInterface.
  * @param bool $forced
  *   Flag which indicates whether refresh should be forced.
@@ @@
 /**
  * Batch API related callback which is invoked when operation should be performed.
  *
- * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+ * @param WidgetBlockConfigInterface $config
  *   An instance of WidgetBlockConfigInterface.
- * @param \Drupal\Core\Language\LanguageInterface $language
+ * @param LanguageInterface $language
  *   An instance of LanguageInterface.
  * @param bool $forced
  *   Flag which indicates whether refresh should be forced.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/widget_block/widget_block.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\widget_block\Entity\WidgetBlockConfigInterface;
+use Drupal\Core\Language\LanguageInterface;
 /**
  * @file
  * Widget Block drush integration.
@@ @@
 /**
  * Get the Widget Block configuration from the ID option.
  *
- * @return \Drupal\widget_block\Entity\WidgetBlockConfigInterface[]
+ * @return WidgetBlockConfigInterface[]
  *   An array of WidgetBlockConfigInterface objects.
  */
 function _drush_widget_block_get_id_option() {
@@ @@
 /**
  * Get a list of languages from the language option.
  *
- * @return \Drupal\Core\Language\LanguageInterface[]
+ * @return LanguageInterface[]
  *   An array of LanguageInterface objects.
  */
 function _drush_widget_block_get_language_option() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/widget_block/widget_block.api.php:10

    ---------- begin diff ----------
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Purge all related resource which use the given Widget Block configuration.
  *
- * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+ * @param WidgetBlockConfigInterface $config
  *   The widget block configuration for which a purge is requested.
  * @param \Drupal\Core\LanguageInterface $language
  *   The language which the resources need to be purged.
    ----------- end diff -----------

4) modules/contrib/widget_block/src/WidgetBlockLazyBuilder.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\widget_block\Entity\WidgetBlockConfigInterface;
 use Drupal\Core\Entity\EntityManagerInterface;

 /**
@@ @@
   /**
    * The Widget Block configuration storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $widgetBlockConfigStorage;

@@ @@
   /**
    * Get the widget block configuration storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   An instance of EntityStorageInterface.
    */
   protected function getWidgetBlockConfigStorage() {
@@ @@
     // Initialize $markup variable to NULL as default behavior.
     $markup = NULL;

-    /** @var \Drupal\widget_block\Entity\WidgetBlockConfigInterface $widget_block_config */
+    /** @var WidgetBlockConfigInterface $widget_block_config */
     $widget_block_config = $this->getWidgetBlockConfigStorage()->load($widget_block_config_id);

     // Check whether the widget block configuration was resolved.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/widget_block/src/Utility/ResponseHelper.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Utility;

+use Drupal\Core\Language\LanguageInterface;
+use Drupal\widget_block\Renderable\WidgetMarkupInterface;
 use Psr\Http\Message\ResponseInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\widget_block\Entity\WidgetBlockConfigInterface;
@@ @@
     /**
      * Validate whether the response has valid meta headers.
      *
-     * @param \Psr\Http\Message\ResponseInterface $response
+     * @param ResponseInterface $response
      *   An instance of ResponseInterface.
      *
      * @throws \RuntimeException
@@ @@
     /**
      * Validate whether the content type matches.
      *
-     * @param \Psr\Http\Message\ResponseInterface $response
+     * @param ResponseInterface $response
      *   The response which should be validated.
      *
      * @throws \RuntimeException
@@ @@
     /**
      * Extract the widget related meta data from request.
      *
-     * @param \Psr\Http\Message\ResponseInterface $response
+     * @param ResponseInterface $response
      *   An instance of ResponseInterface.
      *
      * @return array
@@ @@
     /**
      * Create markup from specified response.
      *
-     * @param \Psr\Http\Message\ResponseInterface $response
+     * @param ResponseInterface $response
      *   An instance of ResponseInterface.
-     * @param \Drupal\Core\Language\LanguageInterface $language
+     * @param LanguageInterface $language
      *   Optional. The language for which the widget markup was generated. Defaults
      *   to the language code in the response.
      *
-     * @return \Drupal\widget_block\Renderable\WidgetMarkupInterface
+     * @return WidgetMarkupInterface
      *   An instance of WidgetMarkupInterface.
      *
      * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/widget_block/src/Renderable/WidgetMarkup.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Renderable;

+use Drupal\Core\Render\Markup;
 use Psr\Http\Message\ResponseInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Component\Render\MarkupInterface;
@@ @@
   /**
    * Markup which represents the content.
    *
-   * @var \Drupal\Core\Render\Markup
+   * @var Markup
    */
   protected $content;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/widget_block/src/Plugin/Derivative/WidgetBlockDeriver.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The widget block configuration storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $widgetBlockConfigStorage;

@@ @@
   /**
    * Create a WidgetBlockDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $widget_block_config_storage
+   * @param EntityStorageInterface $widget_block_config_storage
    *   The widget block configuration storage.
    */
   public function __construct(EntityStorageInterface $widget_block_config_storage) {
@@ @@
   /**
    * Get the widget block configuration storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The widget block configuration storage.
    */
   protected function getWidgetBlockConfigStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/widget_block/src/Plugin/Block/WidgetBlockInterface.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Plugin\Block;

+use Drupal\widget_block\Entity\WidgetBlockConfigInterface;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Language\LanguageInterface;

@@ @@
   /**
    * Get the configuration entity.
    *
-   * @return \Drupal\widget_block\Entity\WidgetBlockConfigInterface|NULL
+   * @return WidgetBlockConfigInterface|NULL
    *   An instance of WidgetBlockConfigInterface if available, otherwise NULL.
    */
   public function getConfigEntity();
@@ @@
   /**
    * Invalida the widget block.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which invalidation should be performed.
    *
    * @return bool
@@ @@
   /**
    * Refresh the widget block.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which refresh should be performed.
    * @param bool $forced
    *   Flag which indicates whether refresh should be performed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/widget_block/src/Plugin/Block/WidgetBlock.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Plugin\Block;

+use Drupal\widget_block\Entity\WidgetBlockConfigInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The widget block configuration storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $widgetBlockConfigStorage;

@@ @@
   /**
    * The widget service backend.
    *
-   * @var \Drupal\widget_block\Backend\WidgetBlockBackendInterface
+   * @var WidgetBlockBackendInterface
    */
   protected $backend;

@@ @@
   /**
    * The widget block configuration entity.
    *
-   * @var \Drupal\widget_block\Entity\WidgetBlockConfigInterface|NULL
+   * @var WidgetBlockConfigInterface|NULL
    */
   protected $configEntity;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\widget_block\Backend\WidgetBlockBackendInterface $backend
+   * @param WidgetBlockBackendInterface $backend
    *   The widget backend service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $widget_block_config_storage
+   * @param EntityStorageInterface $widget_block_config_storage
    *   The widget block configuration storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WidgetBlockBackendInterface $backend, EntityStorageInterface $widget_block_config_storage) {
@@ @@
   /**
    * Get the widget block backend.
    *
-   * @return \Drupal\widget_block\Backend\WidgetBlockBackendInterface
+   * @return WidgetBlockBackendInterface
    *   An instance of WidgetBlockBackendInterface.
    */
   protected function getBackend() {
@@ @@
   /**
    * Get the widget block configuration storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The widget block configuration storage.
    */
   protected function getStorage() {
@@ @@
   /**
    * Get the configuration entity.
    *
-   * @return \Drupal\widget_block\Entity\WidgetBlockConfigInterface|NULL
+   * @return WidgetBlockConfigInterface|NULL
    *   An instance of WidgetBlockConfigInterface.
    */
   public function getConfigEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/widget_block/src/Form/WidgetBlockConfigRefreshForm.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Form;

+use Drupal\Core\Language\LanguageInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Create a WidgetBlockConfigRefreshForm object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The Language Manager service.
    */
   public function __construct(LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Get the language manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   An instance of LanguageManagerInterface.
    */
   protected function getLanguageManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/widget_block/src/Form/WidgetBlockConfigInvalidateForm.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Form;

+use Drupal\Core\Language\LanguageInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageInterface
+   * @var LanguageInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Create a WidgetBlockConfigRefreshForm object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The Language Manager service.
    */
   public function __construct(LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Get the language manager.
    *
-   * @return \Drupal\Core\Language\LanguageManagerInterface
+   * @return LanguageManagerInterface
    *   An instance of LanguageManagerInterface.
    */
   protected function getLanguageManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/widget_block/src/Form/WidgetBlockConfigEditForm.php:21

    ---------- begin diff ----------
@@ @@
     // Perform default form building.
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\widget_block\Entity\WidgetBlockConfigInterface $entity */
+    /** @var WidgetBlockConfigInterface $entity */
     $entity = $this->getEntity();

     $form['id'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/widget_block/src/Entity/WidgetBlockConfigInterface.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Entity;

+use Drupal\widget_block\Renderable\WidgetMarkupInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Get the widget block markup.
    *
-   * @return \Drupal\widget_block\Renderable\WidgetMarkupInterface
+   * @return WidgetMarkupInterface
    *   An instance of WidgetMarkupInterface.
    */
   public function getMarkup();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/widget_block/src/Backend/WidgetBlockBackendInterface.php:5

    ---------- begin diff ----------
@@ @@

 namespace Drupal\widget_block\Backend;

+use Drupal\widget_block\Renderable\WidgetMarkupInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\widget_block\Entity\WidgetBlockConfigInterface;

@@ @@
   /**
    * Invalidate the widget block markup for specified configuration.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which an invalidation should be performed.
    *
    * @return bool
@@ @@
   /**
    * Refresh the widget block markup for specified configuration.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which a refresh should be performed.
    * @param boolean $forced
    *   A flag which indicates whether refresh should be forced.
@@ @@
   /**
    * Get the widget block markup for specified configuration.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which the widget block will be resolved.
    *
-   * @return \Drupal\widget_block\Renderable\WidgetMarkupInterface|null
+   * @return WidgetMarkupInterface|null
    *   An instance of WidgetMarkupInterface if available, otherwise null.
    */
   public function getMarkup(WidgetBlockConfigInterface $config, LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/widget_block/src/Backend/WidgetBlockBackend.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Cache used for resolved widget markup.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * An HTTP client which can be used for requesting widget markup.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The logger channel for this backend.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
    *
    * @param \Drupal\Core\Cache\CacheBackendInterface
    *   Cache used for resolved widget markup.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   An HTTP client which can be used to requesting widget markup.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   An instance of LoggerChannelInterface.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
    */
   public function __construct(CacheBackendInterface $cache, ClientInterface $http_client, LoggerChannelInterface $logger, ModuleHandlerInterface $module_handler, CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ @@
   /**
    * Get the widget markup cache.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   An instance of CacheBackendInterface.
    */
   protected function getCache() {
@@ @@
   /**
    * Get the HTTP client.
    *
-   * @return \GuzzleHttp\ClientInterface
+   * @return ClientInterface
    *   An instance of ClientInterface.
    */
   protected function getHttpClient() {
@@ @@
   /**
    * Get the logger instance.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   An instance of LoggerChannelInterface.
    */
   protected function getLogger() {
@@ @@
   /**
    * Get the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   An instance of ModuleHandlerInterface.
    */
   protected function getModuleHandler() {
@@ @@
   /**
    * Get the cache tags invalidator.
    *
-   * @return \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @return CacheTagsInvalidatorInterface
    *   An instance of CacheTagsInvalidatorInterface.
    */
   protected function getCacheTagsInvalidator() {
@@ @@
   /**
    * Create a request URL for specified Widget Block configuration.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which the markup should be resolved.
    *
    * @return string
@@ @@
   /**
    * Create a request for specified Widget Block configuration.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which the markup should be resolved.
    *
    * @return \Drupal\widget_block\Utility\WidgetResponse
@@ @@
   /**
    * Determine whether markup has changed.
    *
-   * @param \Drupal\widget_block\Renderable\WidgetMarkupInterface|null $current
+   * @param WidgetMarkupInterface|null $current
    *   The current markup from which comparison is performed.
-   * @param \Drupal\widget_block\Renderable\WidgetMarkupInterface|null $new
+   * @param WidgetMarkupInterface|null $new
    *   The new markup to compare against.
    */
   protected function hasMarkupChanged(WidgetMarkupInterface $current = NULL, WidgetMarkupInterface $new = NULL) {
@@ @@
   /**
    * Get the cache identifier based on the widget configuration.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which the markup should be resolved.
    *
    * @return string
@@ @@
   /**
    * Get markup from local cache.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which the markup should be resolved.
    *
-   * @return \Drupal\widget_block\Renderable\WidgetMarkupInterface|null
+   * @return WidgetMarkupInterface|null
    *   An instance of WidgetMarkupInterface if resolved, otherwise NULL.
    */
   protected function getMarkupFromCache(WidgetBlockConfigInterface $config, LanguageInterface $language) {
@@ @@
   /**
    * Apply markup to the underlying cache.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which the markup should be resolved.
    * @param \Drupal\widget_bock\Renderable\WidgetMarkupInterface|NULL $markup
    *   An instance of WidgetMarkupInterface.
@@ @@
   /**
    * Get markup from the external service.
    *
-   * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
+   * @param WidgetBlockConfigInterface $config
    *   The widget block configuration.
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language for which the markup should be resolved.
    *
-   * @return \Drupal\widget_block\Renderable\WidgetMarkupInterface|null
+   * @return WidgetMarkupInterface|null
    *   An instance of WidgetMarkupInterface if resolved, otherwise NULL.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 15 files have been changed by Rector                                      

