modules/contrib/timesup/src/Periodicity/DailyResolver.php
modules/contrib/timesup/src/Periodicity/HourlyResolver.php
modules/contrib/timesup/src/Periodicity/MidnightResolver.php
modules/contrib/timesup/src/Periodicity/MinutelyResolver.php
modules/contrib/timesup/src/Periodicity/PeriodicityBaseResolver.php
modules/contrib/timesup/src/Periodicity/WeeklyResolver.php
modules/contrib/timesup/src/Resolver/ChainPeriodicityResolver.php
modules/contrib/timesup/src/Resolver/PeriodicityResolverInterface.php
modules/contrib/timesup/tests/src/Traits/InvokeMethodTrait.php
modules/contrib/timesup/tests/src/Unit/Resolver/ChainPeriodicityResolverTest.php
modules/contrib/timesup/tests/src/Unit/Resolver/DailyResolverTest.php
modules/contrib/timesup/tests/src/Unit/Resolver/HourlyResolverTest.php
modules/contrib/timesup/tests/src/Unit/Resolver/MidnightResolverTest.php
modules/contrib/timesup/tests/src/Unit/Resolver/MinutelyResolverTest.php
modules/contrib/timesup/tests/src/Unit/Resolver/WeeklyResolverTest.php
modules/contrib/timesup/timesup.module

9 files with changes
====================

1) modules/contrib/timesup/tests/src/Unit/Resolver/WeeklyResolverTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\WeeklyResolver
+   * @var WeeklyResolver
    */
   protected $resolver;

@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);

-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);

-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);

-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ @@

   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/timesup/tests/src/Unit/Resolver/MinutelyResolverTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\MinutelyResolver
+   * @var MinutelyResolver
    */
   protected $resolver;

@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);

-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);

-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);

-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ @@

   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/timesup/tests/src/Unit/Resolver/MidnightResolverTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\MidnightResolver
+   * @var MidnightResolver
    */
   protected $resolver;

@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);

-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);

-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);

-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ @@

   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/timesup/tests/src/Unit/Resolver/HourlyResolverTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\HourlyResolver
+   * @var HourlyResolver
    */
   protected $resolver;

@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);

-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);

-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);

-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ @@

   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/timesup/tests/src/Unit/Resolver/DailyResolverTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\DailyResolver
+   * @var DailyResolver
    */
   protected $resolver;

@@ @@
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);

-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);

-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);

-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ @@

   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/timesup/tests/src/Unit/Resolver/ChainPeriodicityResolverTest.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Resolver\ChainPeriodicityResolver
+   * @var ChainPeriodicityResolver
    */
   protected $resolver;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/timesup/src/Resolver/ChainPeriodicityResolver.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The resolvers.
    *
-   * @var \Drupal\timesup\Resolver\PeriodicityResolverInterface[]
+   * @var PeriodicityResolverInterface[]
    */
   protected $resolvers = [];

@@ @@
   /**
    * Constructs a new ChainPeriodicityResolver object.
    *
-   * @param \Drupal\timesup\Resolver\PeriodicityResolverInterface[] $resolvers
+   * @param PeriodicityResolverInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
@@ @@
   /**
    * Adds a periodicity resolver.
    *
-   * @param \Drupal\timesup\Resolver\PeriodicityResolverInterface $resolver
+   * @param PeriodicityResolverInterface $resolver
    *   The resolver.
    */
   public function addResolver(PeriodicityResolverInterface $resolver): void {
@@ @@
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\timesup\Resolver\PeriodicityResolverInterface[]
+   * @return PeriodicityResolverInterface[]
    *   The resolvers.
    */
   public function getResolvers(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/timesup/src/Periodicity/PeriodicityBaseResolver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\timesup\Periodicity;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\State\StateInterface;
@@ @@
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The registered logger for this channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a PeriodicityBaseResolver object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory service.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator, StateInterface $state, TimeInterface $time, LoggerChannelFactoryInterface $logger_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/timesup/src/Periodicity/MidnightResolver.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Get the DrupalDateTime object of Today at Midnight as UTC as Timezone.
    *
-   * @return \Drupal\Component\Datetime\DateTimePlus
+   * @return DateTimePlus
    *   The Today at Midnight DrupalDateTime object.
    */
   protected function getTodayMidnight(): DateTimePlus {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

