diff --git a/date_recur_modular.install b/date_recur_modular.install
index 39a1216..3eff64d 100644
--- a/date_recur_modular.install
+++ b/date_recur_modular.install
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\date_recur\Entity\DateRecurInterpreter;
@@ -20,7 +21,7 @@ function date_recur_modular_update_8201(&$sandbox): void {
     return;
   }
 
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface[] $displays */
+  /** @var EntityFormDisplayInterface[] $displays */
   $displays = EntityFormDisplay::loadMultiple();
   foreach ($displays as $display) {
     $updated = FALSE;
diff --git a/src/DateRecurModularUtilityTrait.php b/src/DateRecurModularUtilityTrait.php
index 600e419..aeca6e8 100644
--- a/src/DateRecurModularUtilityTrait.php
+++ b/src/DateRecurModularUtilityTrait.php
@@ -28,7 +28,7 @@ trait DateRecurModularUtilityTrait {
    *   Form path to the time field.
    * @param string $timeZone
    *   Time zone for the day.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   Form state object.
    *
    * @return \DateTime
@@ -101,7 +101,7 @@ trait DateRecurModularUtilityTrait {
    * time zone will be determined based on the current user and site
    * configuration.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   A date recur field item.
    *
    * @return string
@@ -126,10 +126,10 @@ trait DateRecurModularUtilityTrait {
   /**
    * Attempts to get the first valid rule from a date recur field item.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   A date recur field item.
    *
-   * @return \Drupal\date_recur\DateRecurRuleInterface|null
+   * @return DateRecurRuleInterface|null
    *   A rule.
    */
   protected function getRule(DateRecurItem $item): ?DateRecurRuleInterface {
@@ -150,7 +150,7 @@ trait DateRecurModularUtilityTrait {
    *
    * @param array $parts
    *   An array of parts, including 'FREQ'.
-   * @param \Drupal\date_recur\DateRecurPartGrid $grid
+   * @param DateRecurPartGrid $grid
    *   A part grid. Any disallowed frequencies or parts are stripped silently.
    *
    * @return string
@@ -200,7 +200,7 @@ trait DateRecurModularUtilityTrait {
    *
    * Perspective of full day is determined by the current user [timezone].
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   Date recur field item.
    * @param bool $sameDay
    *   Whether dates must be the same calendar day.
diff --git a/src/DateRecurModularWidgetFieldsTrait.php b/src/DateRecurModularWidgetFieldsTrait.php
index 3170c0c..1428501 100644
--- a/src/DateRecurModularWidgetFieldsTrait.php
+++ b/src/DateRecurModularWidgetFieldsTrait.php
@@ -37,7 +37,7 @@ trait DateRecurModularWidgetFieldsTrait {
   /**
    * Get a BYMONTH element.
    *
-   * @param \Drupal\date_recur\DateRecurRuleInterface|null $rule
+   * @param DateRecurRuleInterface|null $rule
    *   Optional rule for which default value is derived.
    *
    * @return array
@@ -59,7 +59,7 @@ trait DateRecurModularWidgetFieldsTrait {
   /**
    * Get a BYDAY element.
    *
-   * @param \Drupal\date_recur\DateRecurRuleInterface|null $rule
+   * @param DateRecurRuleInterface|null $rule
    *   Optional rule for which default value is derived.
    * @param string $weekDayLabels
    *   Specify length of weekday labels. Possible values:
@@ -105,7 +105,7 @@ trait DateRecurModularWidgetFieldsTrait {
    *
    * Modes roughly equate to frequencies.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   A date recur field item.
    *
    * @return array
diff --git a/src/Form/DateRecurModularSierraModalForm.php b/src/Form/DateRecurModularSierraModalForm.php
index 28e5a68..d4b61e3 100644
--- a/src/Form/DateRecurModularSierraModalForm.php
+++ b/src/Form/DateRecurModularSierraModalForm.php
@@ -34,7 +34,7 @@ class DateRecurModularSierraModalForm extends FormBase {
   /**
    * The PrivateTempStore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
@@ -51,9 +51,9 @@ class DateRecurModularSierraModalForm extends FormBase {
   /**
    * Constructs a new DateRecurModularSierraModalForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The PrivateTempStore factory.
    */
   public function __construct(ConfigFactoryInterface $configFactory, PrivateTempStoreFactory $tempStoreFactory) {
@@ -276,7 +276,7 @@ class DateRecurModularSierraModalForm extends FormBase {
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $endsMode = $form_state->getValue('ends_mode');
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $endsDate */
+    /** @var DrupalDateTime|array|null $endsDate */
     $endsDate = $form_state->getValue('ends_date');
 
     if ('date' === $endsMode && !$endsDate instanceof DrupalDateTime) {
@@ -320,7 +320,7 @@ class DateRecurModularSierraModalForm extends FormBase {
     }
 
     $endsMode = $form_state->getValue('ends_mode');
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $endsDate */
+    /** @var DrupalDateTime|array|null $endsDate */
     $endsDate = $form_state->getValue('ends_date');
 
     // Ends mode.
diff --git a/src/Form/DateRecurModularSierraModalOccurrencesForm.php b/src/Form/DateRecurModularSierraModalOccurrencesForm.php
index 396d82b..b149728 100644
--- a/src/Form/DateRecurModularSierraModalOccurrencesForm.php
+++ b/src/Form/DateRecurModularSierraModalOccurrencesForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur_modular\Form;
 
+use RRule\RRule;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseDialogCommand;
 use Drupal\Core\Ajax\InvokeCommand;
@@ -39,25 +40,25 @@ class DateRecurModularSierraModalOccurrencesForm extends FormBase {
   /**
    * The PrivateTempStore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new DateRecurModularSierraModalOccurrencesForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The PrivateTempStore factory.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, PrivateTempStoreFactory $tempStoreFactory, DateFormatterInterface $dateFormatter) {
@@ -399,7 +400,7 @@ class DateRecurModularSierraModalOccurrencesForm extends FormBase {
 
     $lines = [];
     foreach ($rset->getRRules() as $rule) {
-      /** @var \RRule\RRule $rule */
+      /** @var RRule $rule */
       $lines[] = 'RRULE:' . $rule->rfcString(FALSE);
     }
 
diff --git a/src/Plugin/Field/FieldWidget/DateRecurModularAlphaWidget.php b/src/Plugin/Field/FieldWidget/DateRecurModularAlphaWidget.php
index 8fa3ce2..bc3732b 100644
--- a/src/Plugin/Field/FieldWidget/DateRecurModularAlphaWidget.php
+++ b/src/Plugin/Field/FieldWidget/DateRecurModularAlphaWidget.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur_modular\Plugin\Field\FieldWidget;
 
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -63,7 +64,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
   /**
    * Part grid for this list.
    *
-   * @var \Drupal\date_recur\DateRecurPartGrid
+   * @var DateRecurPartGrid
    */
   protected $partGrid;
 
@@ -122,7 +123,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state): array {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList|\Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem[] $items */
+    /** @var DateRecurFieldItemList|DateRecurItem[] $items */
     $elementParents = array_merge($element['#field_parents'], [$this->fieldDefinition->getName(), $delta]);
     $element['#element_validate'][] = [static::class, 'validateModularWidget'];
     $element['#after_build'][] = [static::class, 'afterBuildModularWidget'];
@@ -266,7 +267,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -274,9 +275,9 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
   public static function validateModularWidget(array &$element, FormStateInterface $form_state, array &$complete_form): void {
     // Each of these values can be array if input was invalid. E.g date or time
     // not provided.
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $start */
+    /** @var DrupalDateTime|array|null $start */
     $start = $form_state->getValue(array_merge($element['#parents'], ['start']));
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $end */
+    /** @var DrupalDateTime|array|null $end */
     $end = $form_state->getValue(array_merge($element['#parents'], ['end']));
     /** @var string|null $timeZone */
     $timeZone = $form_state->getValue(array_merge($element['#parents'], ['time_zone']));
@@ -303,7 +304,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
       $end = DrupalDateTime::createFromFormat($zoneLess, $end->format($zoneLess), $timeZoneObj);
       $form_state->setValueForElement($element['end'], $end);
     }
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $endsDate */
+    /** @var DrupalDateTime|array|null $endsDate */
     $endsDate = $form_state->getValue(array_merge($element['#parents'], ['ends_date']));
     if ($endsDate instanceof DrupalDateTime && $timeZone) {
       $endsDate = DrupalDateTime::createFromFormat($zoneLess, $endsDate->format($zoneLess), $timeZoneObj);
@@ -316,7 +317,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -340,7 +341,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
    * {@inheritdoc}
    */
   public function extractFormValues(FieldItemListInterface $items, array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $items */
+    /** @var DateRecurFieldItemList $items */
     $this->partGrid = $items->getPartGrid();
     parent::extractFormValues(...func_get_args());
     unset($this->partGrid);
@@ -372,7 +373,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
       assert(is_string($timeZone));
       $mode = $value['mode'] ?? NULL;
       $endsMode = $value['ends_mode'] ?? NULL;
-      /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $endsDate */
+      /** @var DrupalDateTime|array|null $endsDate */
       $endsDate = $value['ends_date'] ?? NULL;
 
       // Adjust the date for storage.
@@ -455,7 +456,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
    *
    * @param array $element
    *   The currently built element.
-   * @param \Drupal\date_recur\DateRecurRuleInterface|null $rule
+   * @param DateRecurRuleInterface|null $rule
    *   Optional rule for which default value is derived.
    *
    * @return array
@@ -500,7 +501,7 @@ class DateRecurModularAlphaWidget extends DateRecurModularWidgetBase {
    *
    * Determines whether some fields should be visible.
    *
-   * @param \Drupal\date_recur\DateRecurPartGrid $grid
+   * @param DateRecurPartGrid $grid
    *   A part grid object.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldWidget/DateRecurModularOscarWidget.php b/src/Plugin/Field/FieldWidget/DateRecurModularOscarWidget.php
index ad1f283..fcc265f 100644
--- a/src/Plugin/Field/FieldWidget/DateRecurModularOscarWidget.php
+++ b/src/Plugin/Field/FieldWidget/DateRecurModularOscarWidget.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur_modular\Plugin\Field\FieldWidget;
 
+use Drupal\date_recur\DateRecurPartGrid;
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -71,7 +74,7 @@ class DateRecurModularOscarWidget extends DateRecurModularWidgetBase {
   /**
    * Part grid for this list.
    *
-   * @var \Drupal\date_recur\DateRecurPartGrid
+   * @var DateRecurPartGrid
    */
   protected $partGrid;
 
@@ -168,7 +171,7 @@ class DateRecurModularOscarWidget extends DateRecurModularWidgetBase {
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state): array {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList|\Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem[] $items */
+    /** @var DateRecurFieldItemList|DateRecurItem[] $items */
     $element['#element_validate'][] = [static::class, 'validateModularWidget'];
     $element['#after_build'][] = [static::class, 'afterBuildModularWidget'];
     $element['#theme'] = 'date_recur_modular_oscar_widget';
@@ -295,7 +298,7 @@ class DateRecurModularOscarWidget extends DateRecurModularWidgetBase {
       $element['weekdays'][$key]['#title_display'] = 'before';
       $element['weekdays'][$key]['#attributes']['title'] = $value;
       // Change the label to a short letter of weekday.
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $value */
+      /** @var TranslatableMarkup $value */
       $value = substr((string) $value, 0, 1);
     }
 
@@ -314,7 +317,7 @@ class DateRecurModularOscarWidget extends DateRecurModularWidgetBase {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -405,7 +408,7 @@ class DateRecurModularOscarWidget extends DateRecurModularWidgetBase {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -429,7 +432,7 @@ class DateRecurModularOscarWidget extends DateRecurModularWidgetBase {
    * {@inheritdoc}
    */
   public function extractFormValues(FieldItemListInterface $items, array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $items */
+    /** @var DateRecurFieldItemList $items */
     $this->partGrid = $items->getPartGrid();
     parent::extractFormValues(...func_get_args());
     unset($this->partGrid);
@@ -443,9 +446,9 @@ class DateRecurModularOscarWidget extends DateRecurModularWidgetBase {
       // If each of start/end/timezone/zone contain invalid values, quit here.
       // Validation errors will show on form. Notably start and end day are
       // malformed arrays thanks to 'datetime' element.
-      /** @var \Drupal\Core\Datetime\DrupalDateTime|null $start */
+      /** @var DrupalDateTime|null $start */
       $start = $value['times']['time_start'] ?? NULL;
-      /** @var \Drupal\Core\Datetime\DrupalDateTime|null $end */
+      /** @var DrupalDateTime|null $end */
       $end = $value['times']['time_end'] ?? NULL;
       $timeZone = $value['time_zone'] ?? NULL;
       $mode = $value['mode'] ?? NULL;
diff --git a/src/Plugin/Field/FieldWidget/DateRecurModularSierraWidget.php b/src/Plugin/Field/FieldWidget/DateRecurModularSierraWidget.php
index 0b7dff8..b20e457 100644
--- a/src/Plugin/Field/FieldWidget/DateRecurModularSierraWidget.php
+++ b/src/Plugin/Field/FieldWidget/DateRecurModularSierraWidget.php
@@ -4,6 +4,11 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur_modular\Plugin\Field\FieldWidget;
 
+use Drupal\date_recur\DateRecurPartGrid;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
+use Drupal\date_recur\Plugin\DateRecurInterpreterPluginInterface;
+use Drupal\date_recur\DateRecurRuleInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -105,14 +110,14 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
   /**
    * The PrivateTempStore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * Provides form building and processing.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -121,42 +126,42 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
    *
    * Temporary storage for massage values.
    *
-   * @var \Drupal\date_recur\DateRecurPartGrid
+   * @var DateRecurPartGrid
    */
   protected $partGrid;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The date recur interpreter entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateRecurInterpreterStorage;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The date format entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateFormatStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -290,25 +295,25 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempStoreFactory
+   * @param PrivateTempStoreFactory $tempStoreFactory
    *   The PrivateTempStore factory.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   Provides form building and processing.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, ConfigFactoryInterface $configFactory, PrivateTempStoreFactory $tempStoreFactory, FormBuilderInterface $formBuilder, AccountInterface $currentUser, EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, DateFormatterInterface $dateFormatter) {
@@ -346,7 +351,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state): array {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList|\Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem[] $items */
+    /** @var DateRecurFieldItemList|DateRecurItem[] $items */
     $elementParents = [$this->fieldDefinition->getName(), $delta];
     $element['#element_validate'][] = [static::class, 'validateModularWidget'];
     $element['#theme'] = 'date_recur_modular_sierra_widget';
@@ -461,7 +466,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
       $helper = DateRecurHelper::create($customRrule, $startDate);
       $rules = $helper->getRules();
 
-      /** @var \Drupal\date_recur\Plugin\DateRecurInterpreterPluginInterface $plugin */
+      /** @var DateRecurInterpreterPluginInterface $plugin */
       $interpreter = $this->getInterpreter();
       if ($interpreter) {
         $plugin = $interpreter->getPlugin();
@@ -585,7 +590,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -666,7 +671,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
    * {@inheritdoc}
    */
   public function extractFormValues(FieldItemListInterface $items, array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $items */
+    /** @var DateRecurFieldItemList $items */
     $this->partGrid = $items->getPartGrid();
     parent::extractFormValues(...func_get_args());
     unset($this->partGrid);
@@ -752,7 +757,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
    *
    * @param array $element
    *   A single form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function transferStateToTempstore(array $element, FormStateInterface $form_state): void {
@@ -895,7 +900,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
   protected function guessRecurrenceOptionFromRrule(\DateTime $startDate, string $rrule): ?string {
     try {
       $helper = DateRecurHelper::create($rrule, $startDate);
-      /** @var \Drupal\date_recur\DateRecurRuleInterface[] $rules */
+      /** @var DateRecurRuleInterface[] $rules */
       $rules = $helper->getRules();
       $rule = reset($rules);
       if (!isset($rule)) {
@@ -953,7 +958,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
   /**
    * Load the interpreter to be used by this widget.
    *
-   * @return \Drupal\date_recur\Entity\DateRecurInterpreterInterface|null
+   * @return DateRecurInterpreterInterface|null
    *   An interpreter instance.
    */
   protected function getInterpreter(): ?DateRecurInterpreterInterface {
@@ -983,7 +988,7 @@ class DateRecurModularSierraWidget extends DateRecurModularWidgetBase {
    * @param string $input
    *   Input from a time field.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   A date object, or NULL if input was invalid. The date portion of this
    *   object should be ignored.
    */
diff --git a/src/Plugin/Field/FieldWidget/DateRecurModularWidgetBase.php b/src/Plugin/Field/FieldWidget/DateRecurModularWidgetBase.php
index cc2020b..499cac7 100644
--- a/src/Plugin/Field/FieldWidget/DateRecurModularWidgetBase.php
+++ b/src/Plugin/Field/FieldWidget/DateRecurModularWidgetBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur_modular\Plugin\Field\FieldWidget;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -24,7 +25,7 @@ abstract class DateRecurModularWidgetBase extends WidgetBase implements Containe
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -35,13 +36,13 @@ abstract class DateRecurModularWidgetBase extends WidgetBase implements Containe
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   A config factory for retrieving required config objects.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, ConfigFactoryInterface $configFactory) {
@@ -66,7 +67,7 @@ abstract class DateRecurModularWidgetBase extends WidgetBase implements Containe
   /**
    * Determine the best suitable mode for a date recur field item.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of translatable modes keyed by mode.
    */
   protected function getModes(): array {
@@ -76,7 +77,7 @@ abstract class DateRecurModularWidgetBase extends WidgetBase implements Containe
   /**
    * Determine the best suitable mode for a date recur field item.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   A date recur field item.
    *
    * @return string|null
@@ -94,9 +95,9 @@ abstract class DateRecurModularWidgetBase extends WidgetBase implements Containe
       // If each of start/end/time-zone contain invalid values, quit here.
       // Validation errors will show on form. Notably start and end day are
       // malformed arrays thanks to 'datetime' element.
-      /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $start */
+      /** @var DrupalDateTime|array|null $start */
       $start = $value['start'] ?? NULL;
-      /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $end */
+      /** @var DrupalDateTime|array|null $end */
       $end = $value['end'] ?? NULL;
       $timeZone = $value['time_zone'] ?? NULL;
       $mode = $value['mode'] ?? NULL;
diff --git a/tests/src/Functional/DateRecurModularAlphaTest.php b/tests/src/Functional/DateRecurModularAlphaTest.php
index 4c88838..1f85b08 100644
--- a/tests/src/Functional/DateRecurModularAlphaTest.php
+++ b/tests/src/Functional/DateRecurModularAlphaTest.php
@@ -70,7 +70,7 @@ class DateRecurModularAlphaTest extends WebDriverTestBase {
     $entity->save();
     $this->drupalGet($entity->toUrl('edit-form'));
 
-    $this->drupalPostForm(NULL, $values, 'Save');
+    $this->submitForm($values, 'Save');
     $this->assertSession()->pageTextContains('has been updated.');
 
     $entity = DrEntityTest::load($entity->id());
@@ -434,7 +434,7 @@ class DateRecurModularAlphaTest extends WebDriverTestBase {
       // Change to UTC+4.
       'dr[0][time_zone]' => 'Indian/Mauritius',
     ];
-    $this->drupalPostForm(NULL, $values, 'Save');
+    $this->submitForm($values, 'Save');
     $this->assertSession()->pageTextContains('has been updated.');
 
     // All values should be updated to account for different time zone, all
