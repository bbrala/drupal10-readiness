modules/contrib/external_entities/external_entities.install
modules/contrib/external_entities/external_entities.module
modules/contrib/external_entities/modules/external_entities_pathauto/external_entities_pathauto.module
modules/contrib/external_entities/modules/external_entities_pathauto/src/Plugin/pathauto/AliasType/ExternalEntityAliasTypeBase.php
modules/contrib/external_entities/src/Annotation/ExternalEntityStorageClient.php
modules/contrib/external_entities/src/Annotation/FieldMapper.php
modules/contrib/external_entities/src/Entity/ExternalEntity.php
modules/contrib/external_entities/src/Entity/ExternalEntityType.php
modules/contrib/external_entities/src/Entity/Query/External/Condition.php
modules/contrib/external_entities/src/Entity/Query/External/Query.php
modules/contrib/external_entities/src/Entity/Query/External/QueryFactory.php
modules/contrib/external_entities/src/Event/ExternalEntitiesEvents.php
modules/contrib/external_entities/src/Event/ExternalEntityExtractRawDataEvent.php
modules/contrib/external_entities/src/Event/ExternalEntityMapRawDataEvent.php
modules/contrib/external_entities/src/ExternalEntitiesServiceProvider.php
modules/contrib/external_entities/src/ExternalEntityAccessControlHandler.php
modules/contrib/external_entities/src/ExternalEntityInterface.php
modules/contrib/external_entities/src/ExternalEntityListBuilder.php
modules/contrib/external_entities/src/ExternalEntityPermissions.php
modules/contrib/external_entities/src/ExternalEntityStorage.php
modules/contrib/external_entities/src/ExternalEntityStorageInterface.php
modules/contrib/external_entities/src/ExternalEntityTypeInterface.php
modules/contrib/external_entities/src/ExternalEntityTypeListBuilder.php
modules/contrib/external_entities/src/FieldMapper/ConfigurableExpressionFieldMapperBase.php
modules/contrib/external_entities/src/FieldMapper/ExpressionFieldMapperBase.php
modules/contrib/external_entities/src/FieldMapper/ExpressionFieldMapperInterface.php
modules/contrib/external_entities/src/FieldMapper/FieldMapperBase.php
modules/contrib/external_entities/src/FieldMapper/FieldMapperInterface.php
modules/contrib/external_entities/src/FieldMapper/FieldMapperManager.php
modules/contrib/external_entities/src/Form/ExternalEntityForm.php
modules/contrib/external_entities/src/Form/ExternalEntityTypeDeleteForm.php
modules/contrib/external_entities/src/Form/ExternalEntityTypeForm.php
modules/contrib/external_entities/src/Plugin/Derivative/ExternalEntitiesLocalTask.php
modules/contrib/external_entities/src/Plugin/ExternalEntities/FieldMapper/JsonPath.php
modules/contrib/external_entities/src/Plugin/ExternalEntities/FieldMapper/SimpleFieldMapper.php
modules/contrib/external_entities/src/Plugin/ExternalEntities/StorageClient/Rest.php
modules/contrib/external_entities/src/Plugin/ExternalEntities/StorageClient/Wiki.php
modules/contrib/external_entities/src/Plugin/Field/AnnotationTitleFieldItemList.php
modules/contrib/external_entities/src/Plugin/PluginFormTrait.php
modules/contrib/external_entities/src/ResponseDecoder/ResponseDecoderFactory.php
modules/contrib/external_entities/src/ResponseDecoder/ResponseDecoderFactoryInterface.php
modules/contrib/external_entities/src/RouteProcessor/RouteProcessorExternalEntityType.php
modules/contrib/external_entities/src/Routing/ExternalEntityHtmlRouteProvider.php
modules/contrib/external_entities/src/Routing/ExternalEntityTypeRoutes.php
modules/contrib/external_entities/src/StorageClient/ExternalEntityStorageClientBase.php
modules/contrib/external_entities/src/StorageClient/ExternalEntityStorageClientInterface.php
modules/contrib/external_entities/src/StorageClient/ExternalEntityStorageClientManager.php
modules/contrib/external_entities/tests/modules/external_entities_test/external_entities_test.module
modules/contrib/external_entities/tests/modules/external_entities_test/src/Controller/ExternalEntitiesJsonController.php
modules/contrib/external_entities/tests/src/Functional/ExternalEntitiesBrowserTestBase.php
modules/contrib/external_entities/tests/src/Functional/SimpleExternalEntityTest.php

38 files with changes
=====================

1) modules/contrib/external_entities/tests/src/Functional/SimpleExternalEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\external_entities\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\external_entities\Entity\ExternalEntityType;
+use Drupal\Tests\WebAssert;
 use Drupal\filter\Entity\FilterFormat;

 /**
@@ @@
   /**
    * A user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;

@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
     global $base_url;
     $this->storage = $this->container->get('entity_type.manager')->getStorage('external_entity_type');

-    /** @var \Drupal\external_entities\Entity\ExternalEntityType $ref */
+    /** @var ExternalEntityType $ref */
     $ref = $this->container->get('entity_type.manager')->getStorage('external_entity_type')->create([
       'id' => 'ref',
       'label' => 'Ref',
@@ @@
       'filters' => [],
     ]);
     $full_html_format->save();
-    /** @var \Drupal\external_entities\Entity\ExternalEntityType $type */
+    /** @var ExternalEntityType $type */
     $type = $this->container->get('entity_type.manager')->getStorage('external_entity_type')->create([
       'id' => 'simple_external_entity',
       'label' => 'Simple external entity',
@@ @@
    * Tests creation of a rule and then triggering its execution.
    */
   public function testSimpleExternalEntity() {
-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     $this->drupalGet('admin/structure/external-entity-types');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/external_entities/tests/src/Functional/ExternalEntitiesBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\external_entities\Functional;

+use Behat\Mink\Element\NodeElement;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
    * @param string $locator
    *   Link id, title, text or image alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The link node element.
    */
   public function findLink($locator) {
@@ @@
    * @param string $locator
    *   Input id, name or label.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The input field element.
    */
   public function findField($locator) {
@@ @@
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The button node element.
    */
   public function findButton($locator) {
@@ @@
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function pressButton($locator) {
     $this->getSession()->getPage()->pressButton($locator);
@@ @@
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *
    * @see \Behat\Mink\Element\NodeElement::setValue
    */
@@ @@
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function selectFieldOption($locator, $value) {
     $this->getSession()->getPage()->selectFieldOption($locator, $value);
@@ @@
   protected function setFieldDisplay($bundle, $field_name) {
     $storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');

-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
+    /** @var EntityViewDisplay $view_display */
     $view_display = $storage->load($bundle . '.' . $bundle . '.default');

     if (empty($view_display)) {
@@ @@
   protected function setFieldFormDisplay($bundle, $field_name) {
     $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');

-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
+    /** @var EntityFormDisplay $form_display */
     $form_display = $storage->load($bundle . '.' . $bundle . '.default');

     if (empty($form_display)) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/external_entities/tests/modules/external_entities_test/src/Controller/ExternalEntitiesJsonController.php:191

    ---------- begin diff ----------
@@ @@
   /**
    * Get the request content.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   API Request.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/external_entities/src/StorageClient/ExternalEntityStorageClientManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/external_entities/src/StorageClient/ExternalEntityStorageClientInterface.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Saves the entity permanently.
    *
-   * @param \Drupal\external_entities\ExternalEntityInterface $entity
+   * @param ExternalEntityInterface $entity
    *   The entity to save.
    *
    * @return int
@@ @@
   /**
    * Deletes permanently saved entities.
    *
-   * @param \Drupal\external_entities\ExternalEntityInterface $entity
+   * @param ExternalEntityInterface $entity
    *   The external entity object to delete.
    */
   public function delete(ExternalEntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/external_entities/src/StorageClient/ExternalEntityStorageClientBase.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The external entity type this storage client is configured for.
    *
-   * @var \Drupal\external_entities\ExternalEntityTypeInterface
+   * @var ExternalEntityTypeInterface
    */
   protected $externalEntityType;

@@ @@
   /**
    * The response decoder factory.
    *
-   * @var \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface
+   * @var ResponseDecoderFactoryInterface
    */
   protected $responseDecoderFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface $response_decoder_factory
+   * @param ResponseDecoderFactoryInterface $response_decoder_factory
    *   The response decoder factory service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation, ResponseDecoderFactoryInterface $response_decoder_factory) {
@@ @@
   /**
    * Returns the response decoder factory.
    *
-   * @return \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface
+   * @return ResponseDecoderFactoryInterface
    *   The response decoder factory.
    */
   public function getResponseDecoderFactory() {
@@ @@
   /**
    * Sets the response decoder factory.
    *
-   * @param \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface $response_decoder_factory
+   * @param ResponseDecoderFactoryInterface $response_decoder_factory
    *   A response decoder factory.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/external_entities/src/Routing/ExternalEntityTypeRoutes.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new EntityTypeRepository.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Returns a collection of routes.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   A collection of routes.
    */
   public function routes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/external_entities/src/Routing/ExternalEntityHtmlRouteProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Routing;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider;
 use Symfony\Component\Routing\Route;
@@ @@
     // permission is required for viewing collections. We implement a separate
     // permission for external entity collection pages.
     if ($entity_type->hasLinkTemplate('collection') && $entity_type->hasListBuilderClass()) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $entity_type->getCollectionLabel();

       $route = new Route($entity_type->getLinkTemplate('collection'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/external_entities/src/RouteProcessor/RouteProcessorExternalEntityType.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityTypeRepository.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/external_entities/src/ResponseDecoder/ResponseDecoderFactoryInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Add a decoder.
    *
-   * @param \Drupal\Component\Serialization\SerializationInterface $decoder
+   * @param SerializationInterface $decoder
    *   The decoder.
    */
   public function addDecoder(SerializationInterface $decoder);
@@ @@
    * @param string $format
    *   The format to get the decoder for.
    *
-   * @return \Drupal\Component\Serialization\SerializationInterface|bool
+   * @return SerializationInterface|bool
    *   The decoder if it exists, FALSE otherwise.
    */
   public function getDecoder($format);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/external_entities/src/ResponseDecoder/ResponseDecoderFactory.php:10

    ---------- begin diff ----------
@@ @@
   /**
    * The decoders.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface[]
+   * @var SerializationInterface[]
    */
   protected $decoders = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/external_entities/src/Plugin/PluginFormTrait.php:17

    ---------- begin diff ----------
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::validateConfigurationForm()
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @see \Drupal\Core\Plugin\PluginFormInterface::submitConfigurationForm()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/external_entities/src/Plugin/ExternalEntities/StorageClient/Rest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Plugin\ExternalEntities\StorageClient;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
   /**
    * The HTTP client to fetch the files with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\external_entities\ResponseDecoder\ResponseDecoderFactoryInterface $response_decoder_factory
+   * @param ResponseDecoderFactoryInterface $response_decoder_factory
    *   The response decoder factory service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   A Guzzle client object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation, ResponseDecoderFactoryInterface $response_decoder_factory, ClientInterface $http_client) {
@@ @@
    * @return array|null
    *   A raw data array, NULL if no data returned.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function load($id) {
     $response = $this->httpClient->request(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/external_entities/src/Plugin/Derivative/ExternalEntitiesLocalTask.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Plugin\Derivative;

+use Drupal\external_entities\ExternalEntityTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an ExternalEntityTypeLocalTask object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
@@ @@
   /**
    * Gets all defined external entity types.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface[]
+   * @return ExternalEntityTypeInterface[]
    *   All defined external entity types.
    */
   protected function getExternalEntityTypes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/external_entities/src/Form/ExternalEntityTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\external_entities\ExternalEntityTypeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The field mapper manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $fieldMapperManager;

@@ @@
   /**
    * The external storage client manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $storageClientManager;

@@ @@
   /**
    * Constructs an ExternalEntityTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $field_mapper_manager
+   * @param PluginManagerInterface $field_mapper_manager
    *   The field mapper manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $storage_client_manager
+   * @param PluginManagerInterface $storage_client_manager
    *   The external storage client manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, MessengerInterface $messenger, DateFormatterInterface $date_formatter, PluginManagerInterface $field_mapper_manager, PluginManagerInterface $storage_client_manager) {
@@ @@
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If a field mapper plug-in cannot be loaded.
    */
   public function buildFieldMapperSelectForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If a field mapper plugin fails to load.
    */
   public function buildFieldMapperConfigForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If a storage client plug-in cannot be loaded.
    */
   public function buildStorageClientSelectForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function buildStorageClientConfigForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The current form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * The form entity which has been used for populating form element defaults.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The current form entity.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/external_entities/src/Form/ExternalEntityTypeDeleteForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new VocabularyResetForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/external_entities/src/Form/ExternalEntityForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Form;

+use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\external_entities\ExternalEntityInterface;
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\external_entities\ExternalEntityInterface $external_entity */
+    /** @var ExternalEntityInterface $external_entity */
     $external_entity = $this->entity;

     if ($this->operation == 'edit') {
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\external_entities\ExternalEntityInterface $external_entity */
+    /** @var ExternalEntityInterface $external_entity */
     $external_entity = $this->entity;

     // When saving an external entity with annotation through an inline entity
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see external_entities_entity_insert()
@@ @@
         continue;
       }

-      /** @var \Drupal\Core\Field\BaseFieldDefinition $field */
+      /** @var BaseFieldDefinition $field */
       $field = $widget_state['instance'];
       if ($field->getName() !== 'annotation') {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/external_entities/src/FieldMapper/FieldMapperManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/external_entities/src/FieldMapper/FieldMapperBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\FieldMapper;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The external entity type this field mapper is configured for.
    *
-   * @var \Drupal\external_entities\ExternalEntityTypeInterface
+   * @var ExternalEntityTypeInterface
    */
   protected $externalEntityType;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
    *   The identifier for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   /**
    * Get the external entity type being operated for.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type definition.
    */
   protected function getExternalEntityType() {
@@ @@
    * Computed fields are unmappable, which automatically excludes inherited
    * annotation fields as well. The annotation field is excluded as well.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An associative array of field definitions, keyed by field name.
    */
   protected function getMappableFields() {
@@ @@
    * Field properties that are marked read-only (which include computed ones)
    * are considered unmappable.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition we want to extract mappable properties from.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   An array of property definitions of mappable properties, keyed by
    *   property name.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/external_entities/src/FieldMapper/ExpressionFieldMapperBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\FieldMapper;

+use Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
    *   The identifier for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, TypedDataManagerInterface $typed_data_manager) {
@@ @@
   /**
    * Extracts field values from raw data for a given field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Definition of the field we are extracting for.
    * @param array $raw_data
    *   The raw data to extract the field values from.
@@ @@
   /**
    * Extracts field property values from raw data for a given field property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Definition of the field we are extracting for.
    * @param string $property_name
    *   Name of the property we are extracting.
@@ @@
    * Provides conversions for special data types and makes sure a property is in
    * the correct PHP value as expected by the data type.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Definition of the field we are extracting for.
    * @param string $property_name
    *   Name of the property we are extracting.
@@ @@

       if ($timestamp !== FALSE) {
         if (get_class($typed_data) === 'Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601') {
-          assert($typed_data instanceof \Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601);
+          assert($typed_data instanceof DateTimeIso8601);
           $datetime_type = $field_definition->getFieldStorageDefinition()->getSetting('datetime_type');

           if ($datetime_type === DateTimeItem::DATETIME_TYPE_DATE) {
@@ @@
   /**
    * Adds field values to a raw data array for a given field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition for the field being mapped.
    * @param array $field_values
    *   The field values to add to the raw data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/external_entities/src/FieldMapper/ConfigurableExpressionFieldMapperBase.php:30

    ---------- begin diff ----------
@@ @@
    *   The identifier for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typed_data_manager
+   * @param TypedDataManagerInterface $typed_data_manager
    *   The typed data manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManager $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, TypedDataManagerInterface $typed_data_manager, TranslationInterface $string_translation) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
@@ @@
   /**
    * Build a form element for configuring a field mapping.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return array
@@ @@
   /**
    * Build a form element for configuring a field property mapping.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param string $property_name
    *   The property name.
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $property_definition
+   * @param DataDefinitionInterface $property_definition
    *   The property definition.
    *
    * @return array
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form. Calling code should pass on a subform
    *   state created through
    *   \Drupal\Core\Form\SubformState::createForSubform().
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/external_entities/src/ExternalEntityTypeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities;

+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
+use Drupal\Core\Entity\ContentEntityTypeInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

@@ @@
   /**
    * Retrieves the field mapper.
    *
-   * @return \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @return FieldMapperInterface
    *   This types field mapper plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown if the field mapper plugin could not be retrieved.
    */
   public function getFieldMapper();
@@ @@
   /**
    * Retrieves the storage client.
    *
-   * @return \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @return ExternalEntityStorageClientInterface
    *   This types storage client plugin.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown if the storage client plugin could not be retrieved.
    */
   public function getStorageClient();
@@ @@
   /**
    * Gets the associated content entity type definition.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface|null
+   * @return ContentEntityTypeInterface|null
    *   The entity type definition or NULL if it doesn't exist.
    */
   public function getDerivedEntityType();
@@ @@
   /**
    * Returns the annotations field.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   A field definition or NULL if not annotatable.
    */
   public function getAnnotationField();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/external_entities/src/ExternalEntityStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities;

+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;

 /**
@@ @@
   /**
    * Get the field mapper.
    *
-   * @return \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @return FieldMapperInterface
    *   The field mapper.
    */
   public function getFieldMapper();
@@ @@
   /**
    * Get the storage client.
    *
-   * @return \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @return ExternalEntityStorageClientInterface
    *   The external entity storage client.
    */
   public function getStorageClient();
@@ @@
   /**
    * Gets the external entity type.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type.
    */
   public function getExternalEntityType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/external_entities/src/ExternalEntityStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities;

+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field mapper manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $fieldMapperManager;

@@ @@
   /**
    * Field mapper instance.
    *
-   * @var \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @var FieldMapperInterface
    */
   protected $fieldMapper;

@@ @@
   /**
    * The external storage client manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $storageClientManager;

@@ @@
   /**
    * Storage client instance.
    *
-   * @var \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @var ExternalEntityStorageClientInterface
    */
   protected $storageClient;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ExternalEntityStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface|null $memory_cache
+   * @param MemoryCacheInterface|null $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $field_mapper_manager
+   * @param PluginManagerInterface $field_mapper_manager
    *   The field mapper manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $storage_client_manager
+   * @param PluginManagerInterface $storage_client_manager
    *   The storage client manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(
@@ @@
    *
    * Used before the entities are deleted and before invoking the delete hook.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   An array of entities.
    *
    * @throws EntityStorageException
@@ @@
   /**
    * Gets the entity type definition.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   Entity type definition.
    */
   public function getEntityType() {
@@ @@
    *   If not empty, return entities that match these IDs. Return no entities
    *   when NULL.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Array of entities from the storage.
    */
   protected function getFromExternalStorage(array $ids = NULL) {
@@ @@
    * @param array $data
    *   Associative array of storage results, keyed on the entity ID.
    *
-   * @return \Drupal\external_entities\ExternalEntityInterface[]
+   * @return ExternalEntityInterface[]
    *   An array of entity objects implementing the ExternalEntityInterface.
    */
   protected function mapFromRawStorageData(array $data) {
@@ @@
       }
       // Allow other modules to perform custom mapping logic.
       $event = new ExternalEntityMapRawDataEvent($data[$id], $entity_values);
-      $this->eventDispatcher->dispatch(ExternalEntitiesEvents::MAP_RAW_DATA, $event);
+      $this->eventDispatcher->dispatch($event, ExternalEntitiesEvents::MAP_RAW_DATA);

       $entities[$id] = new $this->entityClass($event->getEntityValues(), $this->entityTypeId);
       $entities[$id]->enforceIsNew(FALSE);
@@ @@
    *
    * Used before the entity is saved and before invoking the presave hook.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
    * @throws EntityStorageException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/external_entities/src/ExternalEntityPermissions.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a standard list of external entity permissions for a given type.
    *
-   * @param \Drupal\external_entities\ExternalEntityTypeInterface $external_entity_type
+   * @param ExternalEntityTypeInterface $external_entity_type
    *   The external entity type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/external_entities/src/ExternalEntityInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the external entity type.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type.
    */
   public function getExternalEntityType();
@@ @@
   /**
    * Gets the associated annotation entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The annotation entity, null otherwise.
    */
   public function getAnnotation();
@@ @@
   /**
    * Map the annotations entity fields to this entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $annotation
+   * @param ContentEntityInterface|null $annotation
    *   (optional) An entity object to map the fields from. If NULL, the default
    *   annotation is assumed.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/external_entities/src/ExternalEntityAccessControlHandler.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an ExternalEntityAccessControlHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Get the external entity type this handler is running for.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface|bool
+   * @return ExternalEntityTypeInterface|bool
    *   The external entity type config entity object, or FALSE if not found.
    */
   protected function getExternalEntityType() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/external_entities/src/Event/ExternalEntityMapRawDataEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines an external entity raw data mapping event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/external_entities/src/Event/ExternalEntityExtractRawDataEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\external_entities\ExternalEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines a, external entity raw data extraction event.
@@ @@
   /**
    * The external entity.
    *
-   * @var \Drupal\external_entities\ExternalEntityInterface
+   * @var ExternalEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a map raw data event object.
    *
-   * @param \Drupal\external_entities\ExternalEntityInterface $entity
+   * @param ExternalEntityInterface $entity
    *   The external entity.
    * @param array $raw_data
    *   The raw data being mapped.
@@ @@
   /**
    * Gets the external entity.
    *
-   * @return \Drupal\external_entities\ExternalEntityInterface
+   * @return ExternalEntityInterface
    *   The external entity.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/external_entities/src/Entity/Query/External/QueryFactory.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Stores the entity manager used by the query.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a QueryFactory object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/external_entities/src/Entity/Query/External/Query.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Entity\Query\External;

+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
+use Drupal\external_entities\ExternalEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Query\QueryBase;
@@ @@
   /**
    * Stores the entity type manager used by the query.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Storage client instance.
    *
-   * @var \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @var ExternalEntityStorageClientInterface
    */
   protected $storageClient;

@@ @@
   /**
    * Constructs a query object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    * @param string $conjunction
    *   - AND: all of the conditions on the query need to match.
    * @param array $namespaces
    *   List of potential namespaces of the classes belonging to this query.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, $conjunction, array $namespaces, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Compiles the conditions.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   Returns the called object.
    */
   protected function compile() {
@@ @@
   /**
    * Finish the query by adding fields, GROUP BY and range.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   Returns the called object.
    */
   protected function finish() {
@@ @@
   /**
    * Get the storage client for a bundle.
    *
-   * @return \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @return ExternalEntityStorageClientInterface
    *   The external entity storage client.
    */
   protected function getStorageClient() {
@@ @@
   /**
    * Gets the external entity type.
    *
-   * @return \Drupal\external_entities\ExternalEntityTypeInterface
+   * @return ExternalEntityTypeInterface
    *   The external entity type.
    */
   public function getExternalEntityType() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/external_entities/src/Entity/Query/External/Condition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Entity\Query\External;

+use Drupal\Core\Entity\Query\Sql\Query;
 use Drupal\Core\Entity\Query\ConditionBase;
 use Drupal\Core\Entity\Query\ConditionInterface;

@@ @@
   /**
    * The SQL entity query object this condition belongs to.
    *
-   * @var \Drupal\Core\Entity\Query\Sql\Query
+   * @var Query
    */
   protected $query;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/external_entities/src/Entity/ExternalEntityType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Entity;

+use Drupal\external_entities\FieldMapper\FieldMapperInterface;
+use Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\external_entities\ExternalEntityTypeInterface;
@@ @@
   /**
    * The field mapper plugin instance.
    *
-   * @var \Drupal\external_entities\FieldMapper\FieldMapperInterface
+   * @var FieldMapperInterface
    */
   protected $fieldMapperPlugin;

@@ @@
   /**
    * The storage client plugin instance.
    *
-   * @var \Drupal\external_entities\StorageClient\ExternalEntityStorageClientInterface
+   * @var ExternalEntityStorageClientInterface
    */
   protected $storageClientPlugin;

@@ @@
   /**
    * Returns the entity field manager.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @return EntityFieldManagerInterface
    *   The entity field manager.
    */
   protected function entityFieldManager() {
@@ @@
    * @param string $channel
    *   The name of the channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger for this channel.
    */
   protected function logger($channel) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/external_entities/src/Entity/ExternalEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Entity;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * Provides the default base field definitions for external entities.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of base field definitions for the entity type, keyed by field
    *   name.
    */
@@ @@
   /**
    * Gets the fields that can be inherited by the external entity.
    *
-   * @param \Drupal\external_entities\ExternalEntityTypeInterface $type
+   * @param ExternalEntityTypeInterface $type
    *   The type of the external entity.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of field definitions, keyed by field name.
    *
    * @see \Drupal\Core\Entity\EntityManagerInterface::getFieldDefinitions()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/external_entities/src/Annotation/FieldMapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-friendly name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


36) modules/contrib/external_entities/src/Annotation/ExternalEntityStorageClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\external_entities\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-friendly name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


37) modules/contrib/external_entities/external_entities.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Allows using remote entities, for example through a REST interface.
@@ @@
  *
  * @param array $element
  *   The cardinality form render array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  *
  * @see \Drupal\field_ui\Form\FieldStorageConfigEditForm::validateCardinality()
@@ @@
  * Implements hook_theme_suggestions_HOOK().
  */
 function external_entities_theme_suggestions_external_entity(array $variables) {
-  /** @var \Drupal\external_entities\ExternalEntityInterface $entity */
+  /** @var ExternalEntityInterface $entity */
   $entity = $variables['elements']['#entity'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

@@ @@
  * external entity, and the pattern uses an inherited annotated field. Saving
  * the external entity on annotation change will make sure the generated path
  * is updated.
-   *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   *   An entity object.
  *
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @param EntityInterface $entity
+ *   An entity object.
+ *
+ * @throws PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws EntityStorageException
  */
 function _external_entities_save_annotated_external_entity(EntityInterface $entity) {
   if (!empty($entity->{EXTERNAL_ENTITIES_BYPASS_ANNOTATED_EXTERNAL_ENTITY_SAVE_PROPERTY})) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/external_entities/external_entities.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Config;
 /**
  * @file
  * Install, update and uninstall functions for the external_entities module.
@@ @@
   )->loadMultiple();

   foreach ($external_entity_types as $entity_type_id => $entity_type) {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = \Drupal::configFactory()->getEditable("external_entities.external_entity_type.{$entity_type_id}");

     $field_mappings = $config->get('field_mappings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/external_entities/modules/external_entities_pathauto/src
         /Plugin/pathauto/AliasType/ExternalEntityAliasTypeBase.php" file, due to:
                                                                                
         "Analyze error: "Class                                                 
         Drupal\pathauto\Plugin\pathauto\AliasType\EntityAliasTypeBase not      
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 2 nodes were removed                                                 

