diff --git a/comment_notify.inc b/comment_notify.inc
index 955de37..f8ca429 100644
--- a/comment_notify.inc
+++ b/comment_notify.inc
@@ -115,7 +115,7 @@ function comment_notify_get_notification_type($cid) {
  * @param string $comment_type
  *   The comment type.
  *
- * @return \Drupal\comment\CommentInterface[]
+ * @return CommentInterface[]
  *   A list of comment entities.
  */
 function comment_notify_get_watchers($entity_id, $comment_type) {
diff --git a/comment_notify.install b/comment_notify.install
index 1d4e812..ded6705 100644
--- a/comment_notify.install
+++ b/comment_notify.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Comment_notify.install.
@@ -131,7 +132,7 @@ function comment_notify_update_8002() {
  * Update settings for generic entity support.
  */
 function comment_notify_update_8003() {
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config = \Drupal::service('config.factory')
     ->getEditable('comment_notify.settings');
 
diff --git a/comment_notify.module b/comment_notify.module
index 7f3e9e0..ae2f482 100644
--- a/comment_notify.module
+++ b/comment_notify.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\comment_notify\UserNotificationSettings;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * This module provides comment follow-up e-mail notifications.
@@ -47,7 +50,7 @@ function comment_notify_form_comment_form_alter(&$form, FormStateInterface $form
     return;
   }
 
-  /** @var \Drupal\Core\Entity\EntityInterface $comment_entity */
+  /** @var EntityInterface $comment_entity */
   $comment_entity = $form_state->getFormObject()->getEntity();
   $field_identifier = CommentNotifySettings::getCommentFieldIdentifier($comment_entity);
 
@@ -68,7 +71,7 @@ function comment_notify_form_comment_form_alter(&$form, FormStateInterface $form
     $form['#validate'][] = 'comment_notify_comment_validate';
   }
   module_load_include('inc', 'comment_notify', 'comment_notify');
-  /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+  /** @var UserNotificationSettings $user_settings */
   $user_settings = \Drupal::service('comment_notify.user_settings');
   $preference = $user_settings->getSetting($user->id(), 'comment_notify');
   // If you want to hide this on your site see http://drupal.org/node/322482
@@ -96,7 +99,7 @@ function comment_notify_form_comment_form_alter(&$form, FormStateInterface $form
 
   // If this is an existing comment we set the default value based on their
   // selection last time.
-  /** @var \Drupal\comment\CommentInterface $comment */
+  /** @var CommentInterface $comment */
   $comment = $form_state->getFormObject()->getEntity();
   if (!$comment->isNew()) {
     $notify = comment_notify_get_notification_type($comment->id());
@@ -139,10 +142,10 @@ function comment_notify_comment_publish($comment) {
 function _comment_notify_submit_comment_form(array &$form, FormStateInterface $form_state) {
   module_load_include('inc', 'comment_notify', 'comment_notify');
 
-  /** @var \Drupal\comment\CommentInterface $comment */
+  /** @var CommentInterface $comment */
   $comment = $form_state->getFormObject()->getEntity();
   $user = \Drupal::currentUser();
-  /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+  /** @var UserNotificationSettings $user_settings */
   $user_settings = \Drupal::service('comment_notify.user_settings');
 
   // If the form component is visible, these values should be in the form state.
@@ -152,7 +155,7 @@ function _comment_notify_submit_comment_form(array &$form, FormStateInterface $f
     // Update user's preference.
     // @todo are the user notifications allowed to be edited here?
     if (!$user->isAnonymous()) {
-      /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+      /** @var UserNotificationSettings $user_settings */
       $user_settings->saveSettings($user->id(), NULL, $status);
     }
   }
@@ -232,9 +235,9 @@ function _comment_notify_get_comment_enabled_bundles() {
 function comment_notify_form_user_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
   module_load_include('inc', 'comment_notify', 'comment_notify');
 
-  /** @var \Drupal\user\UserInterface $user */
+  /** @var UserInterface $user */
   $user = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+  /** @var UserNotificationSettings $user_settings */
   $user_settings = \Drupal::service('comment_notify.user_settings');
   $notify_settings = $user->id() && $user_settings->getSettings($user->id()) ? $user_settings->getSettings($user->id()) : $user_settings->getDefaultSettings();
 
@@ -302,11 +305,11 @@ function comment_notify_form_user_form_alter(&$form, FormStateInterface &$form_s
 function _comment_notify_submit_user_form(array &$form, FormStateInterface $form_state) {
   module_load_include('inc', 'comment_notify', 'comment_notify');
 
-  /** @var \Drupal\user\UserInterface $user */
+  /** @var UserInterface $user */
   $user = $form_state->getFormObject()->getEntity();
 
   if (!$user->isAnonymous() && is_numeric($form_state->getValue('entity_notify')) && is_numeric($form_state->getValue('comment_notify'))) {
-    /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+    /** @var UserNotificationSettings $user_settings */
     $user_settings = \Drupal::service('comment_notify.user_settings');
     $user_settings->saveSettings($user->id(), $form_state->getValue('entity_notify'), $form_state->getValue('comment_notify'));
   }
@@ -335,7 +338,7 @@ function comment_notify_user_cancel($edit, $account, $method) {
  *   The user id.
  */
 function comment_notify_remove_user_settings($uid) {
-  /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+  /** @var UserNotificationSettings $user_settings */
   $user_settings = \Drupal::service('comment_notify.user_settings');
   $user_settings->deleteSettings($uid);
 }
@@ -369,7 +372,7 @@ function comment_notify_comment_load($comments) {
 /**
  * Private function to send the notifications.
  *
- * @param \Drupal\comment\CommentInterface $comment
+ * @param CommentInterface $comment
  *   The comment entity.
  */
 function _comment_notify_mailalert(CommentInterface $comment) {
@@ -391,7 +394,7 @@ function _comment_notify_mailalert(CommentInterface $comment) {
     return;
   }
 
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
 
   // No mails if this is not an enabled content type.
@@ -401,7 +404,7 @@ function _comment_notify_mailalert(CommentInterface $comment) {
   }
 
   if (empty($comment->getAuthorEmail())) {
-    /** @var \Drupal\user\UserInterface $comment_account */
+    /** @var UserInterface $comment_account */
     if ($comment_account = user_load_by_name($comment->getAuthorName())) {
       $comment_mail = $comment_account->getEmail() ?: '';
     }
@@ -427,7 +430,7 @@ function _comment_notify_mailalert(CommentInterface $comment) {
       else {
         $author = $entity->getOwner();
       }
-      /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+      /** @var UserNotificationSettings $user_settings */
       $user_settings = \Drupal::service('comment_notify.user_settings');
       $author_notify_settings = $user_settings->getSettings($author->id()) ?: $user_settings->getDefaultSettings();
       $author_email = $author->getEmail();
@@ -542,7 +545,7 @@ function comment_notify_mail($key, &$message, $params) {
 /**
  * Get the unsubscribe link for a comment subscriber.
  *
- * @param \Drupal\comment\CommentInterface $comment
+ * @param CommentInterface $comment
  *   The subscribed comment object.
  *
  * @return string|null
diff --git a/src/Form/CommentNotifySettings.php b/src/Form/CommentNotifySettings.php
index c74d2e1..fa07b9d 100644
--- a/src/Form/CommentNotifySettings.php
+++ b/src/Form/CommentNotifySettings.php
@@ -25,14 +25,14 @@ class CommentNotifySettings extends ConfigFormBase {
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;
 
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -65,11 +65,11 @@ class CommentNotifySettings extends ConfigFormBase {
   /**
    * CommentNotifySettings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManager $field_manager, ModuleHandlerInterface $module_handler, MessengerInterface $messenger) {
@@ -329,7 +329,7 @@ class CommentNotifySettings extends ConfigFormBase {
    * Returns the machine name of field identifier from bundle_types config for a
    * specific comment.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $comment
+   * @param EntityInterface $comment
    *   The comment entity.
    *
    * @return string
diff --git a/src/Form/CommentNotifyUnsubscribe.php b/src/Form/CommentNotifyUnsubscribe.php
index 90c3875..3a016f3 100644
--- a/src/Form/CommentNotifyUnsubscribe.php
+++ b/src/Form/CommentNotifyUnsubscribe.php
@@ -15,7 +15,7 @@ class CommentNotifyUnsubscribe extends FormBase {
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -31,7 +31,7 @@ class CommentNotifyUnsubscribe extends FormBase {
   /**
    * CommentNotifyUnsubscribe constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
diff --git a/src/UserNotificationSettings.php b/src/UserNotificationSettings.php
index a30d2c1..a9a9868 100644
--- a/src/UserNotificationSettings.php
+++ b/src/UserNotificationSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\comment_notify;
 
+use Drupal\user\UserData;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\user\UserDataInterface;
 
@@ -13,23 +14,23 @@ class UserNotificationSettings {
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserData
+   * @var UserData
    */
   protected $userData;
 
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * UserSettings constructor.
    *
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory;
+   * @param ConfigFactoryInterface $configFactory ;
    */
   public function __construct(UserDataInterface $userData, ConfigFactoryInterface $configFactory) {
     $this->userData = $userData;
diff --git a/tests/src/Functional/CommentNotifyAnonymousTest.php b/tests/src/Functional/CommentNotifyAnonymousTest.php
index b2d14e8..94bbd94 100644
--- a/tests/src/Functional/CommentNotifyAnonymousTest.php
+++ b/tests/src/Functional/CommentNotifyAnonymousTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\comment_notify\Functional;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Session\AccountInterface;
 
 /**
@@ -14,7 +15,7 @@ class CommentNotifyAnonymousTest extends CommentNotifyTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Allow anonymous users to post comments and get notifications.
@@ -34,7 +35,7 @@ class CommentNotifyAnonymousTest extends CommentNotifyTestBase {
    * Tests that the mail is required for anonymous users.
    */
   public function testMail() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $this->drupalCreateNode(['type' => 'article']);
 
     $subscribe = ['notify' => TRUE, 'notify_type' => COMMENT_NOTIFY_ENTITY];
@@ -47,7 +48,7 @@ class CommentNotifyAnonymousTest extends CommentNotifyTestBase {
    * Tests the "All comments" notification option used by an anonymous user.
    */
   public function testAnonymousAllCommentsTest() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $this->drupalCreateNode(['type' => 'article']);
     $subscribe = ['notify' => TRUE, 'notify_type' => COMMENT_NOTIFY_ENTITY];
     $contact = ['name' => $this->randomMachineName(), 'mail' => $this->getRandomEmailAddress()];
diff --git a/tests/src/Functional/CommentNotifyConfigPageTest.php b/tests/src/Functional/CommentNotifyConfigPageTest.php
index c6c9d4f..df13842 100644
--- a/tests/src/Functional/CommentNotifyConfigPageTest.php
+++ b/tests/src/Functional/CommentNotifyConfigPageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\comment_notify\Functional;
 
+use Drupal\node\Entity\Node;
 use Drupal\comment\CommentInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\field\Entity\FieldConfig;
@@ -190,7 +191,7 @@ class CommentNotifyConfigPageTest extends CommentNotifyTestBase {
    * Tests the Unsubscribe page.
    */
   public function testUnsubscribePage() {
-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     $node = $this->drupalCreateNode(['type' => 'article']);
 
     // Allow anonymous users to post comments and get notifications.
diff --git a/tests/src/Functional/CommentNotifyNotificationsTest.php b/tests/src/Functional/CommentNotifyNotificationsTest.php
index 483cce7..6c91307 100644
--- a/tests/src/Functional/CommentNotifyNotificationsTest.php
+++ b/tests/src/Functional/CommentNotifyNotificationsTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\comment_notify\Functional;
 
+use Drupal\comment_notify\UserNotificationSettings;
+use Drupal\Core\Config\Config;
+use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\comment\CommentInterface;
 use Drupal\comment\Entity\Comment;
 use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
@@ -50,7 +53,7 @@ class CommentNotifyNotificationsTest extends CommentNotifyTestBase {
    */
   public function testCommentNotification() {
     $user1 = $this->drupalCreateUser($this->permissions);
-    /** @var \Drupal\comment_notify\UserNotificationSettings $user_settings */
+    /** @var UserNotificationSettings $user_settings */
     $this->container->get('comment_notify.user_settings')->saveSettings($user1->id(), COMMENT_NOTIFY_ENTITY, COMMENT_NOTIFY_COMMENT);
     $user2 = $this->drupalCreateUser($this->permissions);
     $node = $this->drupalCreateNode(
@@ -86,7 +89,7 @@ class CommentNotifyNotificationsTest extends CommentNotifyTestBase {
   public function testCommentTypeNotification() {
     // Add a second comment type.
     $this->addDefaultCommentField('node', 'article', 'field_comment', CommentItemInterface::OPEN, 'comment_type_2');
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->container->get('config.factory')->getEditable('comment_notify.settings');
     $config->set('bundle_types', ['node--article--comment', 'node--article--field_comment']);
     $config->save();
@@ -172,14 +175,14 @@ class CommentNotifyNotificationsTest extends CommentNotifyTestBase {
    * Tests that the notifications are working on a different entity than a node.
    */
   public function testEntityNotification() {
-    /** @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
+    /** @var Vocabulary $vocabulary */
     $vocabulary = $this->createVocabulary();
     $this->addDefaultCommentField('taxonomy_term', $vocabulary->id(), 'field_comment_taxonomy', CommentItemInterface::OPEN, 'comment_type_2');
     $comment_field = FieldConfig::loadByName('taxonomy_term', $vocabulary->id(), 'field_comment_taxonomy');
     $comment_field->setSetting('anonymous', CommentInterface::ANONYMOUS_MAY_CONTACT);
     $comment_field->save();
 
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->container->get('config.factory')->getEditable('comment_notify.settings');
     $config->set('bundle_types', ['taxonomy_term--' . $vocabulary->id() . '--field_comment_taxonomy']);
     $config->save();
