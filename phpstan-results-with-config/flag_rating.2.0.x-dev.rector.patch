diff --git a/flag_rating.module b/flag_rating.module
index a7d9abd..2186847 100644
--- a/flag_rating.module
+++ b/flag_rating.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\File\FileSystemInterface;
 /**
  * @file
@@ -13,7 +15,7 @@ use Drupal\Core\File\FileSystemInterface;
  */
 function flag_rating_entity_type_alter(array &$entity_types) {
   if (isset($entity_types['flag'])) {
-    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
+    /** @var ContentEntityTypeInterface $entity_type */
     $entity_type = $entity_types['flag'];
     $handlers = $entity_type->getHandlerClasses();
     $handlers['form']['edit'] = 'Drupal\flag_rating\Form\FlagRatingEditForm';
@@ -87,11 +89,11 @@ function flag_rating_theme_suggestions_flag_rating_icon(array $variables) {
  * @param string $icon_directory
  *    Name of the directory where icons have to be saved.
  *
- * @return null|\Drupal\file\FileInterface $file
+ * @return null|FileInterface $file
  */
 function flag_rating_create_default_icon($icon_filename = 'star.svg', $icon_directory = 'public://flag-rating-icon') {
   global $base_url;
-  $icon_url = $base_url . '/' . drupal_get_path('module', 'flag_rating') . '/img' . '/' . $icon_filename;
+  $icon_url = $base_url . '/' . \Drupal::service('extension.list.module')->getPath('flag_rating') . '/img' . '/' . $icon_filename;
   if ($icon_file = system_retrieve_file($icon_url, $icon_directory . '/' . $icon_filename , TRUE, FileSystemInterface::EXISTS_REPLACE)) {
     $icon_file->setPermanent();
     $icon_file->save();
diff --git a/src/EventSubscriber/FlagEvents.php b/src/EventSubscriber/FlagEvents.php
index a02d3f3..6df3e6b 100644
--- a/src/EventSubscriber/FlagEvents.php
+++ b/src/EventSubscriber/FlagEvents.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flag_rating\EventSubscriber;
 
+use Drupal\Core\State\StateInterface;
 use Drupal\flag\Event\FlaggingEvent;
 use Drupal\flag\Event\UnflaggingEvent;
 use Drupal\flag\FlagServiceInterface;
@@ -18,16 +19,16 @@ class FlagEvents implements EventSubscriberInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(FlagServiceInterface $flag_service, RequestStack $request_stack) {
@@ -47,7 +48,7 @@ class FlagEvents implements EventSubscriberInterface {
   /**
    * React to flagging event.
    *
-   * @param \Drupal\flag\Event\FlaggingEvent $event
+   * @param FlaggingEvent $event
    *   The flagging event.
    */
   public function onFlag(FlaggingEvent $event) {
@@ -66,7 +67,7 @@ class FlagEvents implements EventSubscriberInterface {
   /**
    * React to unflagging event.
    *
-   * @param \Drupal\flag\Event\UnflaggingEvent $event
+   * @param UnflaggingEvent $event
    *   The unflagging event.
    */
   public function onUnflag(UnflaggingEvent $event) {
diff --git a/src/FlagRatingScoreManager.php b/src/FlagRatingScoreManager.php
index 7507ba8..342ea5e 100644
--- a/src/FlagRatingScoreManager.php
+++ b/src/FlagRatingScoreManager.php
@@ -18,14 +18,14 @@ class FlagRatingScoreManager implements EventSubscriberInterface {
   /**
    * The flag service.
    *
-   * @var \Drupal\flag\FlagServiceInterface
+   * @var FlagServiceInterface
    */
   protected $flagService;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\flag\FlagServiceInterface $flag_service
+   * @param FlagServiceInterface $flag_service
    *   The flag service.
    */
   public function __construct(FlagServiceInterface $flag_service) {
@@ -34,10 +34,10 @@ class FlagRatingScoreManager implements EventSubscriberInterface {
 
   /**
    * Gets the average score given to a given entities.
-   * 
-   * @param \Drupal\flag\FlagInterface $flag
+   *
+   * @param FlagInterface $flag
    *   The flag for which to retrieve a flag score.
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to retrieve a flag score.
    * @param mixed $anonymous_included
    *   (optional) Force the use or no use of Anonymous rating when doing calculations. Default: FALSE.
