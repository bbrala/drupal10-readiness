diff --git a/private_shortcut.install b/private_shortcut.install
index 0a3c108..084d586 100644
--- a/private_shortcut.install
+++ b/private_shortcut.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\private_shortcut\PrivateShortcutSetStorageInterface;
 /**
  * @file
  * Installation hooks for Private Shortcut module.
@@ -28,7 +29,7 @@ function private_shortcut_uninstall() {
     $shortcut_storage->delete($shortcut_storage->loadMultiple($private_shorcut_ids));
   }
 
-  /** @var \Drupal\private_shortcut\PrivateShortcutSetStorageInterface $shortcut_set_storage */
+  /** @var PrivateShortcutSetStorageInterface $shortcut_set_storage */
   $shortcut_set_storage = \Drupal::entityTypeManager()->getStorage('shortcut_set');
   // Remove user bindings with private shortcut sets.
   $shortcut_set_storage->unassingPrivateSets();
diff --git a/private_shortcut.module b/private_shortcut.module
index a88f65f..bccc78c 100644
--- a/private_shortcut.module
+++ b/private_shortcut.module
@@ -24,7 +24,7 @@ function private_shortcut_entity_type_alter(array &$entity_types) {
  * Implements hook_ENTITY_TYPE_access().
  */
 function private_shortcut_shortcut_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\private_shortcut\PrivateShortcutSetStorageInterface $storage */
+  /** @var PrivateShortcutSetStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityType()->getBundleEntityType());
   try {
     $shortcut_set_owner = $storage->getAccountFromPrivateSetId($entity->bundle());
@@ -44,7 +44,7 @@ function private_shortcut_shortcut_access(EntityInterface $entity, $operation, A
  * Sets the private user shortcut set as the system wide default.
  */
 function private_shortcut_shortcut_default_set($account) {
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   if ($account->hasPermission('customize shortcut links')) {
     // Use private set as default only when the user is able to customize it.
     return PrivateShortcutSetStorage::getPrivateSetIdFromUid($account->id());
diff --git a/src/Access/PrivateShortcutEditableAccess.php b/src/Access/PrivateShortcutEditableAccess.php
index 4949a36..e6ed074 100644
--- a/src/Access/PrivateShortcutEditableAccess.php
+++ b/src/Access/PrivateShortcutEditableAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_shortcut\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\shortcut\ShortcutSetInterface;
@@ -17,10 +18,10 @@ class PrivateShortcutEditableAccess implements AccessInterface {
   /**
    * Prevent access to non-owned private shortcut set.
    *
-   * @param \Drupal\shortcut\ShortcutSetInterface $shortcut_set
+   * @param ShortcutSetInterface $shortcut_set
    *   The shortcut set that is being accessed.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(ShortcutSetInterface $shortcut_set) {
diff --git a/src/Access/PrivateShortcutExcludeAccess.php b/src/Access/PrivateShortcutExcludeAccess.php
index 6b089d0..b28aaac 100644
--- a/src/Access/PrivateShortcutExcludeAccess.php
+++ b/src/Access/PrivateShortcutExcludeAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_shortcut\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\shortcut\ShortcutSetInterface;
@@ -17,10 +18,10 @@ class PrivateShortcutExcludeAccess implements AccessInterface {
   /**
    * Prevent access to private shortcut set.
    *
-   * @param \Drupal\shortcut\ShortcutSetInterface $shortcut_set
+   * @param ShortcutSetInterface $shortcut_set
    *   The shortcut set that is being accessed.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(ShortcutSetInterface $shortcut_set) {
diff --git a/src/PrivateShortcutSetStorage.php b/src/PrivateShortcutSetStorage.php
index fdfb778..71b9773 100644
--- a/src/PrivateShortcutSetStorage.php
+++ b/src/PrivateShortcutSetStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_shortcut;
 
+use Drupal\shortcut\ShortcutSetInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\shortcut\ShortcutSetStorage;
 use Drupal\user\Entity\User;
@@ -24,28 +25,28 @@ class PrivateShortcutSetStorage extends ShortcutSetStorage implements PrivateSho
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Constructs a PrivateShortcutSetStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_info
+   * @param EntityTypeInterface $entity_info
    *   The entity info for the entity type.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeInterface $entity_info, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, Connection $connection, AccountInterface $current_user) {
@@ -76,11 +77,11 @@ class PrivateShortcutSetStorage extends ShortcutSetStorage implements PrivateSho
    * Private shortcut set config entities are dinamically created on demand
    * and never get saved.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The user account for the private shortcut set. The current
    *   user if no one is given.
    *
-   * @return \Drupal\shortcut\ShortcutSetInterface
+   * @return ShortcutSetInterface
    *   The user's private shortcut set.
    */
   protected function userPrivateSet(AccountInterface $account = NULL) {
diff --git a/src/PrivateShortcutSetStorageInterface.php b/src/PrivateShortcutSetStorageInterface.php
index 5cf5979..6110b7b 100644
--- a/src/PrivateShortcutSetStorageInterface.php
+++ b/src/PrivateShortcutSetStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\private_shortcut;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\shortcut\ShortcutSetStorageInterface;
 
 /**
@@ -15,7 +16,7 @@ interface PrivateShortcutSetStorageInterface extends ShortcutSetStorageInterface
    * @param string $id
    *   The private shortcut set ID.
    *
-   * @return \Drupal\Core\Session\AccountInterface|null
+   * @return AccountInterface|null
    *   The user account, NULL if the user account does not exist in the system.
    *
    * @throws \InvalidArgumentException
