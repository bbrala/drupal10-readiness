modules/contrib/autotrader_csv/autotrader_csv.install
modules/contrib/autotrader_csv/autotrader_csv.module
modules/contrib/autotrader_csv/src/Annotation/AutotraderCsvNodeExport.php
modules/contrib/autotrader_csv/src/Form/SettingsForm.php
modules/contrib/autotrader_csv/src/NodeExporter.php
modules/contrib/autotrader_csv/src/NodeExporterInterface.php
modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExport/Automobile.php
modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExport/Marine.php
modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExportBase.php
modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExportInterface.php
modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExportManager.php

6 files with changes
====================

1) modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExportManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExportInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Tell the object which node it's working on.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node that this exporter is working on.
    */
   public function setNode(NodeInterface $node);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/autotrader_csv/src/Plugin/AutotraderCsvNodeExportBase.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Stores the configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The node we're exporting.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   public $node;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Creates a AutotraderCsvNodeExportBase instance.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The Drupal global container.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ @@
    *   The object that is created using dependency injection.
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+    /** @var ConfigFactoryInterface $config_factory */
     $config_factory = $container->get('config.factory');
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
     return new static(
       $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/autotrader_csv/src/NodeExporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\autotrader_csv;

+use Drupal\node\NodeInterface;
+use Drupal\autotrader_csv\Plugin\AutotraderCsvNodeExportBase;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\autotrader_csv\Plugin\AutotraderCsvNodeExportManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The node to export the records for.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes;

@@ @@
    *
    * We use this to get all of the NodeExporter plugins.
    *
-   * @var \Drupal\autotrader_csv\Plugin\AutotraderCsvNodeExportManager
+   * @var AutotraderCsvNodeExportManager
    */
   protected $bundleExportManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\autotrader_csv\Plugin\AutotraderCsvNodeExportManager $bundle_export_manager
+   * @param AutotraderCsvNodeExportManager $bundle_export_manager
    *   The NodeExporter plugin manager service. We're injecting this service
    *   so that we can use it to access the NodeExporter plugins.
    */
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Drupal\autotrader_csv\Plugin\AutotraderCsvNodeExportManager $bundle_export_manager */
+    /** @var AutotraderCsvNodeExportManager $bundle_export_manager */
     $bundle_export_manager = $container->get('plugin.manager.autotrader_csv_node_export');
     return new static($bundle_export_manager);
   }
@@ @@
   /**
    * Constructs an NodeExporter object.
    *
-   * @param \Drupal\node\NodeInterface[] $nodes
+   * @param NodeInterface[] $nodes
    *   The nodes to export the records for.
    * @param string $filename
    *   The filename to write the exported records to. NULL can be given when not
@@ @@
     $lines = $this->generateRecords();
     $lines = implode(PHP_EOL, $lines);
     // @todo - Allow for private storage.
-    return file_save_data($lines, 'public://' . $this->filename, FileSystemInterface::EXISTS_REPLACE);
+    return \Drupal::service('file.repository')->writeData($lines, 'public://' . $this->filename, FileSystemInterface::EXISTS_REPLACE);
   }

   /**
@@ @@
       $plugin_definitions = $this->bundleExportManager->getDefinitions();
       $plugin_id = $node->bundle();
       if (in_array($plugin_id, array_keys($plugin_definitions))) {
-        /** @var \Drupal\autotrader_csv\Plugin\AutotraderCsvNodeExportBase $plugin */
+        /** @var AutotraderCsvNodeExportBase $plugin */
         try {
           $plugin = $this->bundleExportManager->createInstance($plugin_id);
           $plugin->setNode($node);
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/autotrader_csv/src/Annotation/AutotraderCsvNodeExport.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\autotrader_csv\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


6) modules/contrib/autotrader_csv/autotrader_csv.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\file\Entity\File;
 /**
  * @file
  * Autotrader CSV module file.
@@ @@
  * @return array
  *   Returns an array with the real path and file object if successful.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+ * @throws InvalidPluginDefinitionException
  */
 function autotrader_csv_create_csv(array $content_types = NULL, $filename = NULL) {
   if ($content_types == NULL) {
@@ @@
     ->execute();
   // @todo - Work out a performance enhancement here. This won't scale.
   $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
-  /** @var Drupal\file\Entity\File $file */
+  /** @var File $file */
   $node_exporter = \Drupal::service('autotrader_csv.node_exporter');
   $node_exporter->setup($nodes, $filename);
   $file = $node_exporter->toFile();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

