modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_general/vc_actions_general.install
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_general/vc_actions_general.module
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Access/MaxVolunteers.php
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Access/NewVolunteer.php
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Access/VolunteerPendingStatus.php
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Controller/VCActionsVolunteerController.php
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Plugin/views/field/VolunteerForNeed.php
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/VCActionsVolunteerTrait.php
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/vc_actions_volunteer.install
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/vc_actions_volunteer.module
modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/vc_actions_volunteer.views.inc
modules/contrib/vc_base/modules/vc_actions/src/Entity/VCAction.php
modules/contrib/vc_base/modules/vc_actions/src/Entity/VCActionInterface.php
modules/contrib/vc_base/modules/vc_actions/src/Entity/VCActionType.php
modules/contrib/vc_base/modules/vc_actions/src/Entity/VCActionTypeInterface.php
modules/contrib/vc_base/modules/vc_actions/src/Entity/VCActionViewsData.php
modules/contrib/vc_base/modules/vc_actions/src/Form/VCActionDeleteForm.php
modules/contrib/vc_base/modules/vc_actions/src/Form/VCActionForm.php
modules/contrib/vc_base/modules/vc_actions/src/Form/VCActionSettingsForm.php
modules/contrib/vc_base/modules/vc_actions/src/Form/VCActionTypeDeleteForm.php
modules/contrib/vc_base/modules/vc_actions/src/Form/VCActionTypeForm.php
modules/contrib/vc_base/modules/vc_actions/src/VCActionAccessControlHandler.php
modules/contrib/vc_base/modules/vc_actions/src/VCActionHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_actions/src/VCActionListBuilder.php
modules/contrib/vc_base/modules/vc_actions/src/VCActionPermissions.php
modules/contrib/vc_base/modules/vc_actions/src/VCActionTranslationHandler.php
modules/contrib/vc_base/modules/vc_actions/src/VCActionTypeHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_actions/src/VCActionTypeListBuilder.php
modules/contrib/vc_base/modules/vc_actions/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_actions/vc_action.page.inc
modules/contrib/vc_base/modules/vc_actions/vc_actions.module
modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_volunteers/src/Plugin/AJAXDashboardButton/VolunteerContacts.php
modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_volunteers/src/Plugin/EntityReferenceSelection/ProfileLink.php
modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_volunteers/src/VCContactVolunteersUtilities.php
modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_volunteers/vc_contacts_volunteers.install
modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_volunteers/vc_contacts_volunteers.module
modules/contrib/vc_base/modules/vc_contacts/src/Controller/VCContactController.php
modules/contrib/vc_base/modules/vc_contacts/src/Entity/VCContact.php
modules/contrib/vc_base/modules/vc_contacts/src/Entity/VCContactInterface.php
modules/contrib/vc_base/modules/vc_contacts/src/Entity/VCContactType.php
modules/contrib/vc_base/modules/vc_contacts/src/Entity/VCContactTypeInterface.php
modules/contrib/vc_base/modules/vc_contacts/src/Entity/VCContactViewsData.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactDeleteForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactRevisionDeleteForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactRevisionRevertForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactRevisionRevertTranslationForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactSettingsForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactTypeDeleteForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactTypeForm.php
modules/contrib/vc_base/modules/vc_contacts/src/Plugin/EntityReferenceSelection/VCContactAuthor.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactAccessControlHandler.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactListBuilder.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactPermissions.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactStorage.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactStorageInterface.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactTranslationHandler.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactTypeHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_contacts/src/VCContactTypeListBuilder.php
modules/contrib/vc_base/modules/vc_contacts/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_contacts/vc_contact.page.inc
modules/contrib/vc_base/modules/vc_contacts/vc_contacts.install
modules/contrib/vc_base/modules/vc_contacts/vc_contacts.module
modules/contrib/vc_base/modules/vc_dashboard/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_dashboard/vc_dashboard.module
modules/contrib/vc_base/modules/vc_events/src/Entity/VCEvent.php
modules/contrib/vc_base/modules/vc_events/src/Entity/VCEventInterface.php
modules/contrib/vc_base/modules/vc_events/src/Entity/VCEventType.php
modules/contrib/vc_base/modules/vc_events/src/Entity/VCEventTypeInterface.php
modules/contrib/vc_base/modules/vc_events/src/Entity/VCEventViewsData.php
modules/contrib/vc_base/modules/vc_events/src/Form/VCEventDeleteForm.php
modules/contrib/vc_base/modules/vc_events/src/Form/VCEventForm.php
modules/contrib/vc_base/modules/vc_events/src/Form/VCEventSettingsForm.php
modules/contrib/vc_base/modules/vc_events/src/Form/VCEventTypeDeleteForm.php
modules/contrib/vc_base/modules/vc_events/src/Form/VCEventTypeForm.php
modules/contrib/vc_base/modules/vc_events/src/VCEventAccessControlHandler.php
modules/contrib/vc_base/modules/vc_events/src/VCEventHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_events/src/VCEventListBuilder.php
modules/contrib/vc_base/modules/vc_events/src/VCEventPermissions.php
modules/contrib/vc_base/modules/vc_events/src/VCEventTranslationHandler.php
modules/contrib/vc_base/modules/vc_events/src/VCEventTypeHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_events/src/VCEventTypeListBuilder.php
modules/contrib/vc_base/modules/vc_events/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_events/vc_event.page.inc
modules/contrib/vc_base/modules/vc_events/vc_events.module
modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/src/Controller/GroupVCGCContactsController.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/src/Plugin/GroupContentEnabler/GroupVCGCContacts.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/src/Plugin/GroupContentEnabler/GroupVCGCContactsDeriver.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/src/Routing/GroupVCGCContactsRouteProvider.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/vc_gc_contacts.module
modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/src/Controller/GroupVCGCResourcesController.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/src/Plugin/GroupContentEnabler/GroupVCGCResources.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/src/Plugin/GroupContentEnabler/GroupVCGCResourcesDeriver.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/src/Routing/GroupVCGCResourcesRouteProvider.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/vc_gc_resources.module
modules/contrib/vc_base/modules/vc_groups/modules/vc_groups_dashboard/vc_groups_dashboard.module
modules/contrib/vc_base/modules/vc_groups/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_groups/vc_groups.module
modules/contrib/vc_base/modules/vc_needs/src/Access/ActiveNeed.php
modules/contrib/vc_base/modules/vc_needs/src/Controller/VCNeedController.php
modules/contrib/vc_base/modules/vc_needs/src/Entity/VCNeed.php
modules/contrib/vc_base/modules/vc_needs/src/Entity/VCNeedInterface.php
modules/contrib/vc_base/modules/vc_needs/src/Entity/VCNeedType.php
modules/contrib/vc_base/modules/vc_needs/src/Entity/VCNeedTypeInterface.php
modules/contrib/vc_base/modules/vc_needs/src/Entity/VCNeedViewsData.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedDeleteForm.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedForm.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedRevisionDeleteForm.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedRevisionRevertForm.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedRevisionRevertTranslationForm.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedSettingsForm.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedTypeDeleteForm.php
modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedTypeForm.php
modules/contrib/vc_base/modules/vc_needs/src/Plugin/EntityReferenceSelection/AllOfNeedTypeOrQuery.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedAccessControlHandler.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedListBuilder.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedPermissions.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedStatus.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedStatusManager.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedStatusManagerInterface.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedStorage.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedStorageInterface.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedTranslationHandler.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedTypeHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_needs/src/VCNeedTypeListBuilder.php
modules/contrib/vc_base/modules/vc_needs/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_needs/vc_need.page.inc
modules/contrib/vc_base/modules/vc_needs/vc_needs.install
modules/contrib/vc_base/modules/vc_needs/vc_needs.module
modules/contrib/vc_base/modules/vc_operations/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_operations/vc_operations.module
modules/contrib/vc_base/modules/vc_resources/modules/vc_resources_information/src/Plugin/AJAXDashboardSection/UserInformationResources.php
modules/contrib/vc_base/modules/vc_resources/modules/vc_resources_information/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_resources/modules/vc_resources_information/vc_resources_information.install
modules/contrib/vc_base/modules/vc_resources/modules/vc_resources_information/vc_resources_information.module
modules/contrib/vc_base/modules/vc_resources/src/Controller/VCResourceController.php
modules/contrib/vc_base/modules/vc_resources/src/Entity/VCResource.php
modules/contrib/vc_base/modules/vc_resources/src/Entity/VCResourceInterface.php
modules/contrib/vc_base/modules/vc_resources/src/Entity/VCResourceType.php
modules/contrib/vc_base/modules/vc_resources/src/Entity/VCResourceTypeInterface.php
modules/contrib/vc_base/modules/vc_resources/src/Entity/VCResourceViewsData.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceDeleteForm.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceForm.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceRevisionDeleteForm.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceRevisionRevertForm.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceRevisionRevertTranslationForm.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceSettingsForm.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceTypeDeleteForm.php
modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceTypeForm.php
modules/contrib/vc_base/modules/vc_resources/src/Plugin/AJAXDashboardSection/UserResources.php
modules/contrib/vc_base/modules/vc_resources/src/Plugin/views_add_button/VABVCResource.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceAccessControlHandler.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceListBuilder.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourcePermissions.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceStorage.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceStorageInterface.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceTranslationHandler.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceTypeHtmlRouteProvider.php
modules/contrib/vc_base/modules/vc_resources/src/VCResourceTypeListBuilder.php
modules/contrib/vc_base/modules/vc_resources/tests/src/Functional/LoadTest.php
modules/contrib/vc_base/modules/vc_resources/vc_resource.page.inc
modules/contrib/vc_base/modules/vc_resources/vc_resources.install
modules/contrib/vc_base/modules/vc_resources/vc_resources.module

65 files with changes
=====================

1) modules/contrib/vc_base/modules/vc_resources/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_resources\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/vc_base/modules/vc_resources/src/VCResourceStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of VCResource revision IDs for a specific VCResource.
    *
-   * @param \Drupal\vc_resources\Entity\VCResourceInterface $entity
+   * @param VCResourceInterface $entity
    *   The VCResource entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as VCResource author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\vc_resources\Entity\VCResourceInterface $entity
+   * @param VCResourceInterface $entity
    *   The VCResource entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all VCResource with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/vc_base/modules/vc_resources/src/VCResourcePermissions.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\vc_resources\Entity\VCResourceType $type
+   * @param VCResourceType $type
    *   The VCResource type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/vc_base/modules/vc_resources/src/VCResourceHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/vc_base/modules/vc_resources/src/VCResourceAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_resources;

+use Drupal\vc_resources\Entity\VCResourceInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\vc_resources\Entity\VCResourceInterface $entity */
-
+    /** @var VCResourceInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_resources\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\vc_resources\Entity\VCResourceInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(VCResourceInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\vc_resources\Entity\VCResourceInterface $default_revision */
+    /** @var VCResourceInterface $default_revision */
     $latest_revision = $this->VCResourceStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_resources\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The VCResource revision.
    *
-   * @var \Drupal\vc_resources\Entity\VCResourceInterface
+   * @var VCResourceInterface
    */
   protected $revision;

@@ @@
   /**
    * The VCResource storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vCResourceStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\vc_resources\Entity\VCResourceInterface $revision
+   * @param VCResourceInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\vc_resources\Entity\VCResourceInterface
+   * @return VCResourceInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(VCResourceInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_resources\Form;

+use Drupal\vc_resources\Entity\VCResourceInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The VCResource revision.
    *
-   * @var \Drupal\vc_resources\Entity\VCResourceInterface
+   * @var VCResourceInterface
    */
   protected $revision;

@@ @@
   /**
    * The VCResource storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vCResourceStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }

@@ @@
     $this->VCResourceStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('VCResource: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    $this->messenger()->addMessage(t('Revision from %revision-date of VCResource %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    $this->messenger()->addMessage(t('Revision from %revision-date of VCResource %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.vc_resource.canonical',
        ['vc_resource' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/vc_base/modules/vc_resources/src/Form/VCResourceForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_resources\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/vc_base/modules/vc_resources/src/Entity/VCResourceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_resources\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the VCResource revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/vc_base/modules/vc_resources/src/Controller/VCResourceController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_resources\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Generates an overview table of older revisions of a VCResource.
    *
-   * @param \Drupal\vc_resources\Entity\VCResourceInterface $vc_resource
+   * @param VCResourceInterface $vc_resource
    *   A VCResource object.
    *
    * @return array
@@ @@
           ]));
         }
         else {
-          $link = $vc_resource->link($date);
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Please confirm that `$vc_resource` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+          $link = $vc_resource->toLink($date)->toString();
         }

         $row = [];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/vc_base/modules/vc_resources/modules/vc_resources_information/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_resources_document\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/vc_base/modules/vc_operations/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_operations\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/vc_base/modules/vc_needs/vc_needs.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\vc_needs\Entity\VCNeed;
 /**
  * @file
  * Contains vc_needs.install.
@@ @@
   $definition_manager = \Drupal::entityDefinitionUpdateManager();

     // Create a new field definition.
-    $new_field = \Drupal\Core\Field\BaseFieldDefinition::create('boolean')
+    $new_field = BaseFieldDefinition::create('boolean')
       ->setLabel(t('Active'))
       ->setRevisionable(TRUE)
       ->setDescription(t('A boolean indicating whether the Need is active for volunteer purposes.'))
@@ @@
   $definition_manager = \Drupal::entityDefinitionUpdateManager();

   // Create a new field definition.
-  $new_field = \Drupal\Core\Field\BaseFieldDefinition::create('list_string')
+  $new_field = BaseFieldDefinition::create('list_string')
     ->setLabel(t('Need Status'))
     ->setDescription(t('The current status of the need'))
     ->setRevisionable(TRUE)
     ->setSettings([
-      'allowed_values' => \Drupal\vc_needs\Entity\VCNeed::getNeedStatusesAsSelectOptions(),
+      'allowed_values' => VCNeed::getNeedStatusesAsSelectOptions(),
       'text_processing' => 0,
     ])
     ->setDefaultValue('inactive')
@@ @@
   foreach ($entities as $entity) {
     $entity->set('need_status', 'active')->save();
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/vc_base/modules/vc_needs/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_needs\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/vc_base/modules/vc_needs/src/VCNeedStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of VCNeed revision IDs for a specific VCNeed.
    *
-   * @param \Drupal\vc_needs\Entity\VCNeedInterface $entity
+   * @param VCNeedInterface $entity
    *   The VCNeed entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as VCNeed author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\vc_needs\Entity\VCNeedInterface $entity
+   * @param VCNeedInterface $entity
    *   The VCNeed entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all VCNeed with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/vc_base/modules/vc_needs/src/VCNeedStatusManager.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new VCNeedStatusManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    */
   public function __construct(ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/vc_base/modules/vc_needs/src/VCNeedPermissions.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\vc_needs\Entity\VCNeedType $type
+   * @param VCNeedType $type
    *   The VCNeed type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/vc_base/modules/vc_needs/src/VCNeedHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/vc_base/modules/vc_needs/src/VCNeedAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs;

+use Drupal\vc_needs\Entity\VCNeedInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\vc_needs\Entity\VCNeedInterface $entity */
-
+    /** @var VCNeedInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\vc_needs\Entity\VCNeedInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(VCNeedInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\vc_needs\Entity\VCNeedInterface $default_revision */
+    /** @var VCNeedInterface $default_revision */
     $latest_revision = $this->VCNeedStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The VCNeed revision.
    *
-   * @var \Drupal\vc_needs\Entity\VCNeedInterface
+   * @var VCNeedInterface
    */
   protected $revision;

@@ @@
   /**
    * The VCNeed storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vCNeedStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\vc_needs\Entity\VCNeedInterface $revision
+   * @param VCNeedInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\vc_needs\Entity\VCNeedInterface
+   * @return VCNeedInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(VCNeedInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs\Form;

+use Drupal\vc_needs\Entity\VCNeedInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The VCNeed revision.
    *
-   * @var \Drupal\vc_needs\Entity\VCNeedInterface
+   * @var VCNeedInterface
    */
   protected $revision;

@@ @@
   /**
    * The VCNeed storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vCNeedStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }

@@ @@
     $this->VCNeedStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('VCNeed: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    $this->messenger()->addMessage(t('Revision from %revision-date of VCNeed %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    $this->messenger()->addMessage(t('Revision from %revision-date of VCNeed %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.vc_need.canonical',
        ['vc_need' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/vc_base/modules/vc_needs/src/Form/VCNeedForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\vc_needs\Entity\VCNeed;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/vc_base/modules/vc_needs/src/Entity/VCNeedInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the VCNeed revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/vc_base/modules/vc_needs/src/Controller/VCNeedController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Generates an overview table of older revisions of a VCNeed.
    *
-   * @param \Drupal\vc_needs\Entity\VCNeedInterface $vc_need
+   * @param VCNeedInterface $vc_need
    *   A VCNeed object.
    *
    * @return array
@@ @@
           ]));
         }
         else {
-          $link = $vc_need->link($date);
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Please confirm that `$vc_need` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+          $link = $vc_need->toLink($date)->toString();
         }

         $row = [];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/vc_base/modules/vc_needs/src/Access/ActiveNeed.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_needs\Access;

+use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
    * @param Route $route
    * @param RouteMatchInterface $route_match
    * @param AccountInterface $account
-   * @return AccessResult|\Drupal\Core\Access\AccessResultAllowed
+   * @return AccessResult|AccessResultAllowed
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
     $vc_need = $route_match->getParameter('vc_need');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/vc_base/modules/vc_groups/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_groups\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_gc_resources\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_gc_contacts\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/vc_base/modules/vc_events/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_events\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/vc_base/modules/vc_events/src/VCEventPermissions.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\vc_events\Entity\VCEventType $type
+   * @param VCEventType $type
    *   The VCEvent type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/vc_base/modules/vc_events/src/VCEventHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/vc_base/modules/vc_events/src/VCEventAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_events;

+use Drupal\vc_events\Entity\VCEventInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\vc_events\Entity\VCEventInterface $entity */
-
+    /** @var VCEventInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/vc_base/modules/vc_events/src/Form/VCEventSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/vc_base/modules/vc_events/src/Form/VCEventForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_events\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/vc_base/modules/vc_dashboard/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_dashboard\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/vc_base/modules/vc_contacts/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_contacts\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/vc_base/modules/vc_contacts/src/VCContactStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of VCContact revision IDs for a specific VCContact.
    *
-   * @param \Drupal\vc_contacts\Entity\VCContactInterface $entity
+   * @param VCContactInterface $entity
    *   The VCContact entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as VCContact author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\vc_contacts\Entity\VCContactInterface $entity
+   * @param VCContactInterface $entity
    *   The VCContact entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all VCContact with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/vc_base/modules/vc_contacts/src/VCContactPermissions.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\vc_contacts\Entity\VCContactType $type
+   * @param VCContactType $type
    *   The VCContact type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


43) modules/contrib/vc_base/modules/vc_contacts/src/VCContactHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/vc_base/modules/vc_contacts/src/VCContactAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts;

+use Drupal\vc_contacts\Entity\VCContactInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\vc_contacts\Entity\VCContactInterface $entity */
-
+    /** @var VCContactInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/vc_base/modules/vc_contacts/src/Plugin/EntityReferenceSelection/VCContactAuthor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts\Plugin\EntityReferenceSelection;

+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\DependencyInjection\DeprecatedServicePropertyTrait;
@@ @@
    *   (Optional) The operation the matching should be done with. Defaults
    *   to "CONTAINS".
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The EntityQuery object with the basic conditions and sorting applied to
    *   it.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\vc_contacts\Entity\VCContactInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(VCContactInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\vc_contacts\Entity\VCContactInterface $default_revision */
+    /** @var VCContactInterface $default_revision */
     $latest_revision = $this->VCContactStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The VCContact revision.
    *
-   * @var \Drupal\vc_contacts\Entity\VCContactInterface
+   * @var VCContactInterface
    */
   protected $revision;

@@ @@
   /**
    * The VCContact storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vCContactStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\vc_contacts\Entity\VCContactInterface $revision
+   * @param VCContactInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\vc_contacts\Entity\VCContactInterface
+   * @return VCContactInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(VCContactInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts\Form;

+use Drupal\vc_contacts\Entity\VCContactInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The VCContact revision.
    *
-   * @var \Drupal\vc_contacts\Entity\VCContactInterface
+   * @var VCContactInterface
    */
   protected $revision;

@@ @@
   /**
    * The VCContact storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vCContactStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }

@@ @@
     $this->VCContactStorage->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('VCContact: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    $this->messenger()->addMessage(t('Revision from %revision-date of VCContact %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    $this->messenger()->addMessage(t('Revision from %revision-date of VCContact %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.vc_contact.canonical',
        ['vc_contact' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/vc_base/modules/vc_contacts/src/Form/VCContactForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/vc_base/modules/vc_contacts/src/Entity/VCContactInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the VCContact revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/vc_base/modules/vc_contacts/src/Controller/VCContactController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Generates an overview table of older revisions of a VCContact.
    *
-   * @param \Drupal\vc_contacts\Entity\VCContactInterface $vc_contact
+   * @param VCContactInterface $vc_contact
    *   A VCContact object.
    *
    * @return array
@@ @@
           ]));
         }
         else {
-          $link = $vc_contact->link($date);
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // Please confirm that `$vc_contact` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+          $link = $vc_contact->toLink($date)->toString();
         }

         $row = [];
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_volunteers/vc_contacts_volunteers.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\vc_contacts_volunteers\VCContactVolunteersUtilities;
 /**
  * @file
  */
@@ @@
 /**
  * Implements hook_help().
  */
-function vc_contacts_volunteers_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function vc_contacts_volunteers_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     // Main module help for the vc_contacts module.
     case 'help.page.vc_contacts':
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_view().
  */
-function vc_contacts_volunteers_user_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
+function vc_contacts_volunteers_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
   if ($display->getComponent('profile_dashboard')) {
-    $profile = \Drupal\vc_contacts_volunteers\VCContactVolunteersUtilities::getProfileFromUser($entity, TRUE);
+    $profile = VCContactVolunteersUtilities::getProfileFromUser($entity, TRUE);
     $build['profile_dashboard'] = [
       '#theme' => 'ajax_dashboard',
       '#id' => 'vc_dashboard_user_profile',
@@ @@
  * Implements hook_ENTITY_TYPE_insert()
  * @param $entity
  */
-function vc_contacts_volunteers_vc_contact_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function vc_contacts_volunteers_vc_contact_insert(EntityInterface $entity) {
   $query = \Drupal::request()->query->get('associate-user');
   if($entity->bundle() === 'volunteer' && $query) {
     $associate = $entity->get('field_associate_user')->getValue();
@@ @@
  * Implements hook_ENTITY_TYPE_update()
  * @param $entity
  */
-function vc_contacts_volunteers_vc_contact_update(Drupal\Core\Entity\EntityInterface $entity) {
+function vc_contacts_volunteers_vc_contact_update(EntityInterface $entity) {
   vc_contacts_volunteers_vc_contact_insert($entity);
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


54) modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_volunteers/src/VCContactVolunteersUtilities.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_contacts_volunteers;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;

 class VCContactVolunteersUtilities {
@@ @@
   /**
    * @param EntityInterface $account
    * @param bool $id
-   * @return bool|\Drupal\Core\Entity\EntityInterface|mixed
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return bool|EntityInterface|mixed
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function getProfileFromUser(EntityInterface $account, $id = FALSE) {
     $params = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


55) modules/contrib/vc_base/modules/vc_actions/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_actions\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/vc_base/modules/vc_actions/src/VCActionPermissions.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\vc_actions\Entity\VCActionType $type
+   * @param VCActionType $type
    *   The VCAction type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


57) modules/contrib/vc_base/modules/vc_actions/src/VCActionHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/vc_base/modules/vc_actions/src/VCActionAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_actions;

+use Drupal\vc_actions\Entity\VCActionInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\vc_actions\Entity\VCActionInterface $entity */
-
+    /** @var VCActionInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/vc_base/modules/vc_actions/src/Form/VCActionSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/vc_base/modules/vc_actions/src/Form/VCActionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_actions\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\vc_actions_volunteer\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Controller/VCActionsVolunteerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_actions_volunteer\Controller;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Drupal\vc_actions\Entity\VCAction;
@@ @@
   /**
    * @param VCNeed $vc_need
    * @return RedirectResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function volunteer(VCNeed $vc_need) {

@@ @@
    * @param VCNeed $vc_need
    * @param VCAction $vc_action
    * @return RedirectResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function approveRequest(VCNeed $vc_need, VCAction $vc_action) {
     $vc_action->set('field_action_status','commit')->save();
@@ @@
    * @param VCNeed $vc_need
    * @param VCAction $vc_action
    * @return RedirectResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function rejectRequest(VCNeed $vc_need, VCAction $vc_action) {
     $vc_action->set('field_action_status','cancel')->save();
@@ @@
   /**
    * @param VCAction $vc_action
    * @return RedirectResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function markConfirm(VCAction $vc_action) {
     $vc_action->set('field_action_status','confirm')->save();
@@ @@
    * @param VCNeed $vc_need
    * @param VCAction $vc_action
    * @return RedirectResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function markComplete(VCNeed $vc_need, VCAction $vc_action) {
     $vc_action->set('field_action_status','complete')->save();
@@ @@
   /**
    * @param VCAction $vc_action
    * @return RedirectResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function cancelByVolunteer(VCAction $vc_action) {
     $vc_action->set('field_action_status','cancel')->save();
@@ @@
    * @param VCNeed $vc_need
    * @param VCAction $vc_action
    * @return RedirectResponse
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function cancelByNeedOwner(VCNeed $vc_need, VCAction $vc_action) {
     $vc_action->set('field_action_status','cancel_volunteer')->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Access/VolunteerPendingStatus.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_actions_volunteer\Access;

+use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
    * @param Route $route
    * @param RouteMatchInterface $route_match
    * @param AccountInterface $account
-   * @return AccessResult|\Drupal\Core\Access\AccessResultAllowed
+   * @return AccessResult|AccessResultAllowed
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


64) modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Access/NewVolunteer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_actions_volunteer\Access;

+use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
    * @param Route $route
    * @param RouteMatchInterface $route_match
    * @param AccountInterface $account
-   * @return AccessResult|\Drupal\Core\Access\AccessResultAllowed
+   * @return AccessResult|AccessResultAllowed
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
     $vc_need = $route_match->getParameter('vc_need');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/vc_base/modules/vc_actions/modules/vc_actions_volunteer/src/Access/MaxVolunteers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\vc_actions_volunteer\Access;

+use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
    * @param Route $route
    * @param RouteMatchInterface $route_match
    * @param AccountInterface $account
-   * @return AccessResult|\Drupal\Core\Access\AccessResultAllowed
+   * @return AccessResult|AccessResultAllowed
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
     $vc_need = $route_match->getParameter('vc_need');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_resources/src/Plugin/views_add_button
         /VABVCResource.php" file, due to:                                      
         "Analyze error: "Class Drupal\views_add_button\ViewsAddButtonInterface 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_resources/src/Plugin/AJAXDashboardSec
         tion/UserResources.php" file, due to:                                  
         "Analyze error: "Class                                                 
         Drupal\ajax_dashboard\Plugin\AJAXDashboardSectionBase not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_resources/modules/vc_resources_inform
         ation/src/Plugin/AJAXDashboardSection/UserInformationResources.php" file,
         due to:                                                                
         "Analyze error: "Class                                                 
         Drupal\ajax_dashboard\Plugin\AJAXDashboardSectionBase not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/src/Plu
         gin/GroupContentEnabler/GroupVCGCResources.php" file, due to:          
         "Analyze error: "Class Drupal\group\Plugin\GroupContentEnablerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_group_content/vc_gc_resources/src/Con
         troller/GroupVCGCResourcesController.php" file, due to:                
         "Analyze error: "Class                                                 
         Drupal\group\Entity\Controller\GroupContentController not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/src/Plug
         in/GroupContentEnabler/GroupVCGCContacts.php" file, due to:            
         "Analyze error: "Class Drupal\group\Plugin\GroupContentEnablerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_group_content/vc_gc_contacts/src/Cont
         roller/GroupVCGCContactsController.php" file, due to:                  
         "Analyze error: "Class                                                 
         Drupal\group\Entity\Controller\GroupContentController not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/vc_base/modules/vc_contacts/modules/vc_contacts_voluntee
         rs/src/Plugin/AJAXDashboardButton/VolunteerContacts.php" file, due to: 
         "Analyze error: "Class                                                 
         Drupal\ajax_dashboard\Plugin\AJAXDashboardButtonBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

