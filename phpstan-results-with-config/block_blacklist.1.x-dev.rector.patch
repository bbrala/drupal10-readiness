diff --git a/block_blacklist.info.yml b/block_blacklist.info.yml
index c5da0da..3afa144 100755
--- a/block_blacklist.info.yml
+++ b/block_blacklist.info.yml
@@ -1,7 +1,7 @@
 name: "Block Blacklist"
 description: Remove unnecessary blocks from the block list for better system performance.
 type: module
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - drupal:block
 configure: block_blacklist.settings
diff --git a/src/Blacklist.php b/src/Blacklist.php
index 92c498b..3dff309 100644
--- a/src/Blacklist.php
+++ b/src/Blacklist.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\block_blacklist;
 
+use Drupal\layout_builder\Section;
+use Drupal\layout_builder\SectionComponent;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
@@ -13,7 +15,7 @@ class Blacklist extends ServiceProviderBase {
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -48,7 +50,7 @@ class Blacklist extends ServiceProviderBase {
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -99,11 +101,11 @@ class Blacklist extends ServiceProviderBase {
         ->loadMultiple() as $entity_view_display) {
 
         // Look for block plugins in each Layout Builder section.
-        /** @var \Drupal\layout_builder\Section $section */
+        /** @var Section $section */
         foreach ($entity_view_display->getThirdPartySetting(
           'layout_builder', 'sections', []) as $section) {
 
-          /** @var \Drupal\layout_builder\SectionComponent $component */
+          /** @var SectionComponent $component */
           foreach ($section->getComponents() as $component) {
             $blocks_in_use[] = $component->getPluginId();
           }
diff --git a/src/Controller/DefaultController.php b/src/Controller/DefaultController.php
index c7ebe23..923b261 100644
--- a/src/Controller/DefaultController.php
+++ b/src/Controller/DefaultController.php
@@ -17,41 +17,41 @@ class DefaultController extends ControllerBase {
   /**
    * Drupal\Core\Block\BlockManagerInterface.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Drupal\Core\Plugin\Context\LazyContextRepository.
    *
-   * @var \Drupal\Core\Plugin\Context\LazyContextRepository
+   * @var LazyContextRepository
    */
   protected $contextRepository;
 
   /**
    * The Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Blacklist service.
    *
-   * @var \Drupal\block_blacklist\Blacklist
+   * @var Blacklist
    */
   protected $blacklistService;
 
   /**
    * Constructs a new DefaultController object.
    *
-   * @param Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *  The Block Manager service.
-   * @param Drupal\Core\Plugin\Context\LazyContextRepository $context_repository
+   * @param LazyContextRepository $context_repository
    *  The Context Repository service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Configuration factory.
-   * @param \Drupal\block_blacklist\Blacklist $blacklist_service
+   * @param Blacklist $blacklist_service
    *   The Block Blacklist service.
    */
   public function __construct(
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index c4fdd7a..5c91928 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -16,7 +16,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/PluginAlter.php b/src/PluginAlter.php
index 759faf4..9dccb68 100644
--- a/src/PluginAlter.php
+++ b/src/PluginAlter.php
@@ -16,32 +16,32 @@ class PluginAlter implements ContainerInjectionInterface {
   /**
    * The Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Blacklist service.
    *
-   * @var \Drupal\block_blacklist\Blacklist
+   * @var Blacklist
    */
   protected $blacklistService;
 
   /**
    * PluginAlter constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager service.
-   * @param \Drupal\block_blacklist\Blacklist $blacklist_service
+   * @param Blacklist $blacklist_service
    *   The Block Blacklist service.
    */
   protected function __construct(
diff --git a/tests/src/Functional/BlockBlacklistTest.php b/tests/src/Functional/BlockBlacklistTest.php
index 16096ce..2bacd8b 100644
--- a/tests/src/Functional/BlockBlacklistTest.php
+++ b/tests/src/Functional/BlockBlacklistTest.php
@@ -29,7 +29,7 @@ class BlockBlacklistTest extends BrowserTestBase {
   /**
    * Perform initial setup tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->DrupalCreateUser([
       'administer site configuration',
@@ -49,7 +49,7 @@ class BlockBlacklistTest extends BrowserTestBase {
     ];
     foreach ($pages as $page) {
       $this->drupalGet($page);
-      $this->assertResponse(200);
+      $this->assertSession()->statusCodeEquals(200);
     }
     $this->drupalLogout();
   }
@@ -99,27 +99,23 @@ class BlockBlacklistTest extends BrowserTestBase {
 
     // Access config page.
     $this->drupalGet('admin/config/block_blacklist/settings');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // Test the form elements exist and have default values.
     $config = $this->config('block_blacklist.settings');
     
     foreach ($replace as $field => $opt) {
-      $this->assertFieldByName(
-        $field,
-        $config->get('block_blacklist.settings.' . $field),
-        $field . ' field has the default value'
-      );
+      $this->assertSession()->fieldValueEquals($field, $config->get('block_blacklist.settings.' . $field));
     }
     // Test form submission.
     $edit = [];
     foreach ($replace as $field => $opt) {
       $edit[$field] = $opt['rule'];
     }
-    $this->drupalPostForm(NULL, $edit, t('Save configuration'));
-    $this->assertText(
-      'The configuration options have been saved.',
-      'The form was saved correctly.'
-    );
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
     // Test the new values are there.
     $this->drupalGet('admin/config/block_blacklist/settings');
     $this->assertSession()->statusCodeEquals(200);
@@ -143,7 +139,10 @@ class BlockBlacklistTest extends BrowserTestBase {
           case $type . '_match':
           case $type . '_prefix':
           case $type . '_regex':
-            $this->assertNoText($opt['hides'], $opt['label'] . ' block was not displayed .');
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+            // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+            $this->assertSession()->pageTextNotContains($opt['hides']);
             break;
 
         }
