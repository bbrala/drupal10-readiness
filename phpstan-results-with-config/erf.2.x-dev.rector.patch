diff --git a/erf.module b/erf.module
index 348d583..fd632c2 100644
--- a/erf.module
+++ b/erf.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains erf.module.
@@ -106,7 +107,7 @@ function erf_entity_bundle_create($entity_type_id, $bundle) {
     $form_display = $storage->load('registration.' . $bundle . '.embedded');
 
     if (!$form_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $form_display = $storage->create([
         'targetEntityType' => 'registration',
         'bundle' => $bundle,
@@ -127,7 +128,7 @@ function erf_entity_bundle_create($entity_type_id, $bundle) {
     $form_display = $storage->load('participant.' . $bundle . '.inline');
 
     if (!$form_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $form_display = $storage->create([
         'targetEntityType' => 'participant',
         'bundle' => $bundle,
diff --git a/modules/erf_commerce/erf_commerce.module b/modules/erf_commerce/erf_commerce.module
index 5f05777..f3e60b5 100644
--- a/modules/erf_commerce/erf_commerce.module
+++ b/modules/erf_commerce/erf_commerce.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
+use Drupal\erf\Form\RegistrationForm;
 /**
  * @file
  * Contains erf_commerce.module.
@@ -60,7 +62,7 @@ function erf_commerce_entity_base_field_info(EntityTypeInterface $entity_type) {
  * - Attaching the `product_variations` field for commerce integration.
  */
 function erf_commerce_form_registration_type_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityBundleBase $registration_type */
+  /** @var ConfigEntityBundleBase $registration_type */
   $registration_type = $form_state->getFormObject()->getEntity();
 
   $form['erf_commerce']['cart_redirect'] = [
@@ -364,10 +366,10 @@ function erf_commerce_redirect_add_form_builder($entity_type, RegistrationType $
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function erf_commerce_form_registration_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\erf\Form\RegistrationForm $form_object */
+  /** @var RegistrationForm $form_object */
   $form_object = $form_state->getFormObject();
 
-  /** @var \Drupal\erf\Entity\RegistrationInterface $registration_entity */
+  /** @var RegistrationInterface $registration_entity */
   $registration = $form_object->getEntity();
 
   // Add a submit handler to redirect users to the cart if this registration
@@ -434,7 +436,7 @@ function erf_commerce_cart_redirect($form, FormStateInterface $form_state) {
  * @see erf_commerce_form_registration_form_alter().
  */
 function erf_commerce_locked_cart_reset($form, FormStateInterface $form_state) {
-  /** @var \Drupal\erf\Entity\RegistrationInterface $registration */
+  /** @var RegistrationInterface $registration */
   $registration = $form_state->getFormObject()->getEntity();
 
   /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
diff --git a/modules/erf_commerce/src/EventSubscriber/OrderCompleteSubscriber.php b/modules/erf_commerce/src/EventSubscriber/OrderCompleteSubscriber.php
index 228fcda..9966f60 100644
--- a/modules/erf_commerce/src/EventSubscriber/OrderCompleteSubscriber.php
+++ b/modules/erf_commerce/src/EventSubscriber/OrderCompleteSubscriber.php
@@ -14,7 +14,7 @@ class OrderCompleteSubscriber implements EventSubscriberInterface {
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
diff --git a/modules/erf_commerce/src/OrderRegistrationManager.php b/modules/erf_commerce/src/OrderRegistrationManager.php
index 9553235..7aefcd3 100644
--- a/modules/erf_commerce/src/OrderRegistrationManager.php
+++ b/modules/erf_commerce/src/OrderRegistrationManager.php
@@ -13,7 +13,7 @@ class OrderRegistrationManager {
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
diff --git a/modules/erf_commerce/src/Plugin/EntityReferenceSelection/VariationSelection.php b/modules/erf_commerce/src/Plugin/EntityReferenceSelection/VariationSelection.php
index 4da7e1f..8eaec78 100644
--- a/modules/erf_commerce/src/Plugin/EntityReferenceSelection/VariationSelection.php
+++ b/modules/erf_commerce/src/Plugin/EntityReferenceSelection/VariationSelection.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\erf_commerce\Plugin\EntityReferenceSelection;
 
+use Drupal\Core\Entity\Query\Sql\Query;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -26,14 +28,14 @@ class VariationSelection extends SelectionPluginBase implements ContainerFactory
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
@@ -46,9 +48,9 @@ class VariationSelection extends SelectionPluginBase implements ContainerFactory
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, CurrentRouteMatch $current_route_match) {
@@ -178,13 +180,13 @@ class VariationSelection extends SelectionPluginBase implements ContainerFactory
         return $return;
       }
 
-      /** @var \Drupal\Core\Entity\Query\Sql\Query $query */
+      /** @var Query $query */
       $query = $this->entityTypeManager->getStorage('commerce_product')->getQuery();
       $query->condition('status', 1);
       $group = $query->orConditionGroup();
       $query->condition($group);
 
-      /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
+      /** @var FieldStorageConfig $field_storage */
       foreach ($reg_type_reference_fields as $field_storage) {
         $group->condition($field_storage->getName(), $registration_type_parameter);
       }
diff --git a/modules/erf_commerce/src/Plugin/Field/FieldWidget/RenderedVariationReferenceWidget.php b/modules/erf_commerce/src/Plugin/Field/FieldWidget/RenderedVariationReferenceWidget.php
index c616457..51ab624 100644
--- a/modules/erf_commerce/src/Plugin/Field/FieldWidget/RenderedVariationReferenceWidget.php
+++ b/modules/erf_commerce/src/Plugin/Field/FieldWidget/RenderedVariationReferenceWidget.php
@@ -40,21 +40,21 @@ class RenderedVariationReferenceWidget extends OptionsButtonsWidget implements C
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -65,19 +65,19 @@ class RenderedVariationReferenceWidget extends OptionsButtonsWidget implements C
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   The formatter label display setting.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The event dispatcher.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityDisplayRepositoryInterface $entity_display_repository, EntityTypeManager $entity_type_manager, ContainerAwareEventDispatcher $event_dispatcher, RequestStack $request_stack) {
@@ -174,7 +174,7 @@ class RenderedVariationReferenceWidget extends OptionsButtonsWidget implements C
 
     foreach ($targets as $target) {
       $gen_view = $view_builder->view($target, $this->getSetting('variation_view_mode'), $target->language()->getId());
-      $element['#options'][$target->id()] = render($gen_view);
+      $element['#options'][$target->id()] = \Drupal::service('renderer')->render($gen_view);
     }
 
     return $element;
diff --git a/src/Entity/Registration.php b/src/Entity/Registration.php
index 9c6398f..abdefde 100644
--- a/src/Entity/Registration.php
+++ b/src/Entity/Registration.php
@@ -104,7 +104,7 @@ class Registration extends ContentEntityBase implements RegistrationInterface {
           // If no user, create and save a new one.
           if (!$user_account) {
             $user_account = $this->entityTypeManager()->getStorage('user')->create();
-            $user_account->setPassword(user_password(20));
+            $user_account->setPassword(\Drupal::service('password_generator')->generate(20));
             $user_account->enforceIsNew();
             $user_account->setEmail($participant->mail->value);
             $user_account->setUsername($participant->mail->value);
diff --git a/src/Entity/RegistrationInterface.php b/src/Entity/RegistrationInterface.php
index 3aac070..a2cc459 100644
--- a/src/Entity/RegistrationInterface.php
+++ b/src/Entity/RegistrationInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\erf\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\user\EntityOwnerInterface;
@@ -45,7 +46,7 @@ interface RegistrationInterface extends ContentEntityInterface, EntityChangedInt
   /**
    * Gets the Source Entity associated with the registration.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity associated with this registration.
    */
   public function getSourceEntity();
diff --git a/src/EntityRegistrationSession.php b/src/EntityRegistrationSession.php
index 2ee40ea..d752831 100644
--- a/src/EntityRegistrationSession.php
+++ b/src/EntityRegistrationSession.php
@@ -19,14 +19,14 @@ class EntityRegistrationSession {
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;
 
   /**
    * Constructs a new EntityRegistrationSession object.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
diff --git a/src/Form/ParticipantForm.php b/src/Form/ParticipantForm.php
index 32b5c49..02fbbed 100644
--- a/src/Form/ParticipantForm.php
+++ b/src/Form/ParticipantForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\erf\Form;
 
+use Drupal\erf\Entity\Participant;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -16,7 +17,7 @@ class ParticipantForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\erf\Entity\Participant $entity */
+    /** @var Participant $entity */
     $form = parent::buildForm($form, $form_state);
 
     $entity = $this->entity;
diff --git a/src/Form/ParticipantSettingsForm.php b/src/Form/ParticipantSettingsForm.php
index 0f693f0..0326342 100644
--- a/src/Form/ParticipantSettingsForm.php
+++ b/src/Form/ParticipantSettingsForm.php
@@ -27,7 +27,7 @@ class ParticipantSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class ParticipantSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/RegistrationSettingsForm.php b/src/Form/RegistrationSettingsForm.php
index 7d8d4c5..76753c4 100644
--- a/src/Form/RegistrationSettingsForm.php
+++ b/src/Form/RegistrationSettingsForm.php
@@ -27,7 +27,7 @@ class RegistrationSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class RegistrationSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/RegistrationTypeForm.php b/src/Form/RegistrationTypeForm.php
index 1f2d9c7..e4857d5 100644
--- a/src/Form/RegistrationTypeForm.php
+++ b/src/Form/RegistrationTypeForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\erf\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\field\FieldStorageConfigStorage;
+use Drupal\field\FieldConfigStorage;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -15,35 +19,35 @@ class RegistrationTypeForm extends EntityForm {
   /**
    * The participant type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $participantTypeStorage;
 
   /**
    * The field storage config storage.
    *
-   * @var \Drupal\field\FieldStorageConfigStorage
+   * @var FieldStorageConfigStorage
    */
   protected $fieldStorageConfigStorage;
 
   /**
    * The field config storage.
    *
-   * @var \Drupal\field\FieldConfigStorage
+   * @var FieldConfigStorage
    */
   protected $fieldConfigStorage;
 
   /**
    * The entity form display storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorage
+   * @var ConfigEntityStorage
    */
   protected $entityFormDisplayStorage;
 
   /**
    * Creates a new RegistrationTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/ParticipantAccessControlHandler.php b/src/ParticipantAccessControlHandler.php
index 211364f..cb0ef78 100644
--- a/src/ParticipantAccessControlHandler.php
+++ b/src/ParticipantAccessControlHandler.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\erf;
 
+use Drupal\erf\Entity\Participant;
+use Drupal\erf\Entity\RegistrationInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -36,11 +39,10 @@ class ParticipantAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\erf\Entity\Participant $entity */
-
+    /** @var Participant $entity */
     $registration_permissions = [];
 
-    /** @var \Drupal\erf\Entity\RegistrationInterface $registration */
+    /** @var RegistrationInterface $registration */
     foreach ($entity->getRegistrations() as $registration) {
       $registration_permissions[] = $registration->access($operation . '_participant', $account, TRUE);
     }
@@ -51,7 +53,7 @@ class ParticipantAccessControlHandler extends EntityAccessControlHandler {
       return AccessResult::allowedIfHasPermission($account, 'administer registrations');
     }
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = array_shift($registration_permissions);
 
     // If there are any remaining registration access permissions, combine them
diff --git a/src/ParticipantHtmlRouteProvider.php b/src/ParticipantHtmlRouteProvider.php
index 38ae213..8ddfd8b 100644
--- a/src/ParticipantHtmlRouteProvider.php
+++ b/src/ParticipantHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class ParticipantHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/ParticipantListBuilder.php b/src/ParticipantListBuilder.php
index f3ce6cc..a4ca527 100644
--- a/src/ParticipantListBuilder.php
+++ b/src/ParticipantListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\erf;
 
+use Drupal\erf\Entity\Participant;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -26,7 +27,7 @@ class ParticipantListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\erf\Entity\Participant $entity */
+    /** @var Participant $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
diff --git a/src/Plugin/Field/FieldFormatter/RegistrationFormFormatter.php b/src/Plugin/Field/FieldFormatter/RegistrationFormFormatter.php
index b094ee2..f24d59c 100644
--- a/src/Plugin/Field/FieldFormatter/RegistrationFormFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/RegistrationFormFormatter.php
@@ -30,28 +30,28 @@ class RegistrationFormFormatter extends FormatterBase implements ContainerFactor
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The user account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The entity registration session service.
    *
-   * @var \Drupal\erf\EntityRegistrationSession
+   * @var EntityRegistrationSession
    */
   protected $entityRegistrationSession;
 
@@ -62,7 +62,7 @@ class RegistrationFormFormatter extends FormatterBase implements ContainerFactor
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -72,13 +72,13 @@ class RegistrationFormFormatter extends FormatterBase implements ContainerFactor
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $form_builder
+   * @param EntityFormBuilderInterface $form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user.
-   * @param \Drupal\erf\EntityRegistrationSession $entity_registration_session
+   * @param EntityRegistrationSession $entity_registration_session
    *   The entity registration session service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityFormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_type_manager, AccountProxy $current_user, EntityRegistrationSession $entity_registration_session) {
@@ -142,9 +142,9 @@ class RegistrationFormFormatter extends FormatterBase implements ContainerFactor
   /**
    * Get or create a registration for a given type and source entity.
    *
-   * @param \Drupal\erf\Entity\RegistrationType $registration_type
+   * @param RegistrationType $registration_type
    *   The registration type.
-   * @param \Drupal\core\Entity\ContentEntityInterface $source_entity
+   * @param ContentEntityInterface $source_entity
    *   The source content entity.
    */
   protected function getRegistration(RegistrationType $registration_type, ContentEntityInterface $source_entity) {
diff --git a/src/Plugin/views/field/EntityRegistrationSourceEntityLabel.php b/src/Plugin/views/field/EntityRegistrationSourceEntityLabel.php
index 82e3392..6556865 100644
--- a/src/Plugin/views/field/EntityRegistrationSourceEntityLabel.php
+++ b/src/Plugin/views/field/EntityRegistrationSourceEntityLabel.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\erf\Plugin\views\field;
 
+use Drupal\erf\Entity\RegistrationInterface;
+use Drupal\core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ -42,10 +44,10 @@ class EntityRegistrationSourceEntityLabel extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\erf\Entity\RegistrationInterface $registration */
+    /** @var RegistrationInterface $registration */
     $registration = $values->_entity;
 
-    /** @var \Drupal\core\Entity\ContentEntityInterface $source_entity */
+    /** @var ContentEntityInterface $source_entity */
     $source_entity = $registration->getSourceEntity();
 
     if (empty($source_entity)) {
diff --git a/src/RegistrationAccessControlHandler.php b/src/RegistrationAccessControlHandler.php
index ea0afe4..4e98fbe 100644
--- a/src/RegistrationAccessControlHandler.php
+++ b/src/RegistrationAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\erf;
 
+use Drupal\erf\Entity\RegistrationInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -20,16 +21,16 @@ class RegistrationAccessControlHandler extends EntityAccessControlHandler implem
   /**
    * The entity registration session service.
    *
-   * @var \Drupal\erf\EntityRegistrationSession
+   * @var EntityRegistrationSession
    */
   protected $entityRegistrationSession;
 
   /**
    * RegistrationAccessControlHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\erf\EntityRegistrationSession $entity_registration_session
+   * @param EntityRegistrationSession $entity_registration_session
    *   The entity registration session service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRegistrationSession $entity_registration_session) {
@@ -51,8 +52,7 @@ class RegistrationAccessControlHandler extends EntityAccessControlHandler implem
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\erf\Entity\RegistrationInterface $entity */
-
+    /** @var RegistrationInterface $entity */
     // Anonymous users are special. Ownership is determined by session.
     if ($account->isAnonymous()) {
       $registration_ids = $this->entityRegistrationSession->getRegistrationIds();
diff --git a/src/RegistrationHtmlRouteProvider.php b/src/RegistrationHtmlRouteProvider.php
index 42540f7..a3558bc 100644
--- a/src/RegistrationHtmlRouteProvider.php
+++ b/src/RegistrationHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class RegistrationHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/RegistrationListBuilder.php b/src/RegistrationListBuilder.php
index 457167d..957c574 100644
--- a/src/RegistrationListBuilder.php
+++ b/src/RegistrationListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\erf;
 
+use Drupal\erf\Entity\Registration;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -26,7 +27,7 @@ class RegistrationListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\erf\Entity\Registration $entity */
+    /** @var Registration $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
diff --git a/src/RegistrationPermissions.php b/src/RegistrationPermissions.php
index b82032a..1ac777f 100644
--- a/src/RegistrationPermissions.php
+++ b/src/RegistrationPermissions.php
@@ -30,7 +30,7 @@ class RegistrationPermissions {
   /**
    * Builds a standard list of permissions for a given registration type.
    *
-   * @param \Drupal\erf\Entity\RegistrationTypeInterface $registration_type
+   * @param RegistrationTypeInterface $registration_type
    *   The registration type.
    *
    * @return array
diff --git a/src/RegistrationTypeAccessControlHandler.php b/src/RegistrationTypeAccessControlHandler.php
index 17f7db2..6adf276 100644
--- a/src/RegistrationTypeAccessControlHandler.php
+++ b/src/RegistrationTypeAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\erf;
 
+use Drupal\erf\Entity\RegistrationTypeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -23,8 +24,7 @@ class RegistrationTypeAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\erf\Entity\RegistrationTypeInterface $entity*/
-
+    /** @var RegistrationTypeInterface $entity*/
     // The registration type label is not privileged information, so this check
     // has has been added to allow labels for registration types to be viewed
     // when a user doesn't have 'administer site configuration' permission. See
