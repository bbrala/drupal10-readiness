diff --git a/courier.module b/courier.module
index e97c166..4ed5fa8 100644
--- a/courier.module
+++ b/courier.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\courier\Service\GlobalTemplateCollectionManagerInterface;
 /**
  * @file
  * Hooks for Courier.
@@ -33,7 +34,7 @@ function courier_entity_update(EntityInterface $entity) {
  */
 function _courier_entity_postsave(EntityInterface $entity) {
   if ($entity instanceof ChannelInterface) {
-    /** @var \Drupal\courier\Service\GlobalTemplateCollectionManagerInterface $template_collection_manager */
+    /** @var GlobalTemplateCollectionManagerInterface $template_collection_manager */
     $template_collection_manager = \Drupal::service('courier.manager.global_template_collection');
     $template_collection_manager->notifyTemplateChanged($entity);
   }
@@ -47,7 +48,7 @@ function courier_entity_load($entities, $entity_type) {
     return;
   }
 
-  /** @var \Drupal\courier\Service\GlobalTemplateCollectionManagerInterface $template_collection_manager */
+  /** @var GlobalTemplateCollectionManagerInterface $template_collection_manager */
   $template_collection_manager = \Drupal::service('courier.manager.global_template_collection');
   foreach ($entities as $entity) {
     $template_collection_manager
diff --git a/courier_message_composer/src/Access/ComposeAccessCheck.php b/courier_message_composer/src/Access/ComposeAccessCheck.php
index a657d66..06e570e 100644
--- a/courier_message_composer/src/Access/ComposeAccessCheck.php
+++ b/courier_message_composer/src/Access/ComposeAccessCheck.php
@@ -17,14 +17,14 @@ class ComposeAccessCheck implements AccessInterface {
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManagerInterface
+   * @var IdentityChannelManagerInterface
    */
   protected $identityChannelManager;
 
   /**
    * Constructs a ComposeAccessCheck object.
    *
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
    */
   public function __construct(IdentityChannelManagerInterface $identity_channel_manager) {
diff --git a/courier_message_composer/src/Controller/CourierMessageController.php b/courier_message_composer/src/Controller/CourierMessageController.php
index 04eee51..68b2a16 100644
--- a/courier_message_composer/src/Controller/CourierMessageController.php
+++ b/courier_message_composer/src/Controller/CourierMessageController.php
@@ -17,23 +17,23 @@ class CourierMessageController extends ControllerBase implements ContainerInject
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManagerInterface
+   * @var IdentityChannelManagerInterface
    */
   protected $identityChannelManager;
 
   /**
    * Constructs a CourierMessageController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, IdentityChannelManagerInterface $identity_channel_manager) {
diff --git a/courier_message_composer/src/Form/MessageForm.php b/courier_message_composer/src/Form/MessageForm.php
index c49e0fd..f74e98e 100644
--- a/courier_message_composer/src/Form/MessageForm.php
+++ b/courier_message_composer/src/Form/MessageForm.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\courier_message_composer\Form;
 
+use Drupal\courier\Service\IdentityChannelManager;
+use Drupal\courier\ChannelInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -34,32 +37,32 @@ class MessageForm extends FormBase {
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManager
+   * @var IdentityChannelManager
    */
   protected $identityChannelManager;
 
   /**
    * The courier manager.
    *
-   * @var \Drupal\courier\Service\CourierManagerInterface
+   * @var CourierManagerInterface
    */
   protected $courierManager;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a MessageForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
-   * @param \Drupal\courier\Service\CourierManagerInterface $courier_manager
+   * @param CourierManagerInterface $courier_manager
    *   The courier manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, IdentityChannelManagerInterface $identity_channel_manager, CourierManagerInterface $courier_manager) {
@@ -95,7 +98,7 @@ class MessageForm extends FormBase {
       '@channel' => $courier_channel->getLabel(),
     ];
 
-    /** @var \Drupal\courier\ChannelInterface $message */
+    /** @var ChannelInterface $message */
     $message = $this->entityTypeManager->getStorage($courier_channel->id())->create();
     $form_state->set('message_entity', $message);
 
@@ -150,7 +153,7 @@ class MessageForm extends FormBase {
     }
 
     // Form display.
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepo */
+    /** @var EntityDisplayRepositoryInterface $entityDisplayRepo */
     $entityDisplayRepo = \Drupal::service('entity_display.repository');
     $display = $entityDisplayRepo->getFormDisplay($courier_channel->id(), $courier_channel->id(), 'default');
     $form_state->set(['form_display'], $display);
@@ -181,7 +184,7 @@ class MessageForm extends FormBase {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\courier\ChannelInterface $message */
+    /** @var ChannelInterface $message */
     $message = $form_state->get('message_entity');
     $form_state->get(['form_display'])
       ->validateFormValues($message, $form, $form_state);
@@ -220,7 +223,7 @@ class MessageForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\courier\ChannelInterface $message */
+    /** @var ChannelInterface $message */
     $message = $form_state->get('message_entity');
     $form_state->get(['form_display'])
       ->extractFormValues($message, $form, $form_state);
diff --git a/courier_message_composer/src/Permissions.php b/courier_message_composer/src/Permissions.php
index dc367fd..0fbf76f 100644
--- a/courier_message_composer/src/Permissions.php
+++ b/courier_message_composer/src/Permissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier_message_composer;
 
+use Drupal\courier\Service\IdentityChannelManager;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,23 +19,23 @@ class Permissions implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManager
+   * @var IdentityChannelManager
    */
   protected $identityChannelManager;
 
   /**
    * Constructs a CourierMessageController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, IdentityChannelManagerInterface $identity_channel_manager) {
diff --git a/courier_system/courier_system.install b/courier_system/courier_system.install
index 56bcabf..8c538af 100644
--- a/courier_system/courier_system.install
+++ b/courier_system/courier_system.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\courier\Service\GlobalTemplateCollectionManagerInterface;
 /**
  * @file
  * Install functions for Courier system.
@@ -12,7 +13,7 @@ use Drupal\courier\Entity\TemplateCollection;
  * configuration entities.
  */
 function courier_system_update_8001() {
-  /** @var \Drupal\courier\Service\GlobalTemplateCollectionManagerInterface $template_collection_manager */
+  /** @var GlobalTemplateCollectionManagerInterface $template_collection_manager */
   $template_collection_manager = \Drupal::service('courier.manager.global_template_collection');
   $config_factory = \Drupal::configFactory();
   $old_state = \Drupal::state()->get('courier_system_template_collections', []);
diff --git a/courier_system/courier_system.module b/courier_system/courier_system.module
index a896e39..c842af7 100644
--- a/courier_system/courier_system.module
+++ b/courier_system/courier_system.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\courier\Service\GlobalTemplateCollectionManagerInterface;
+use Drupal\courier\Service\CourierManagerInterface;
 /**
  * @file
  * Hooks for Courier system.
@@ -18,8 +20,7 @@ use Drupal\courier\Entity\GlobalTemplateCollection;
 function courier_system_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   if ($operation == 'templates' && $entity instanceof TemplateCollectionInterface) {
     // Determine if template collection belongs to courier_system.
-
-    /** @var \Drupal\courier\Service\GlobalTemplateCollectionManagerInterface $template_collection_manager */
+    /** @var GlobalTemplateCollectionManagerInterface $template_collection_manager */
     $template_collection_manager = \Drupal::service('courier.manager.global_template_collection');
     $gtc = $template_collection_manager
       ->getGlobalCollectionForLocalCollection($entity);
@@ -48,9 +49,9 @@ function courier_system_mail_alter(&$message) {
       $template_collection = $gtc->getTemplateCollection();
       // _user_mail_notify() adds account param.
       // Only valid for user.module mails.
-      /** @var \Drupal\Core\Session\AccountInterface $account */
+      /** @var AccountInterface $account */
       $account = $message['params']['account'];
-      /** @var \Drupal\user\Entity\User $identity */
+      /** @var User $identity */
       $identity = User::load($account->id());
       $template_collection
         ->setTokenValue('user', $identity)
@@ -58,7 +59,7 @@ function courier_system_mail_alter(&$message) {
         // @see user_mail_tokens().
         ->setTokenOption('callback', 'user_mail_tokens');
 
-      /** @var \Drupal\courier\Service\CourierManagerInterface $courier_manager */
+      /** @var CourierManagerInterface $courier_manager */
       $courier_manager = \Drupal::service('courier.manager');
       $courier_manager->sendMessage($template_collection, $identity);
     }
diff --git a/courier_system/src/Form/Settings.php b/courier_system/src/Form/Settings.php
index 89861da..bab7372 100644
--- a/courier_system/src/Form/Settings.php
+++ b/courier_system/src/Form/Settings.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\courier_system\Form;
 
+use Drupal\courier\Entity\GlobalTemplateCollectionInterface;
+use Drupal\courier\CourierContextInterface;
+use Drupal\courier\Entity\Email;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -20,16 +23,16 @@ class Settings extends ConfigFormBase {
   /**
    * The courier manager.
    *
-   * @var \Drupal\courier\Service\CourierManagerInterface
+   * @var CourierManagerInterface
    */
   protected $courierManager;
 
   /**
    * Constructs a configuration form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\courier\Service\CourierManagerInterface $courier_manager
+   * @param CourierManagerInterface $courier_manager
    *   The courier manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, CourierManagerInterface $courier_manager) {
@@ -215,7 +218,7 @@ class Settings extends ConfigFormBase {
     $config = $this->config('courier_system.settings');
 
     // Template collections keyed by mail ID.
-    /** @var \Drupal\courier\Entity\GlobalTemplateCollectionInterface[] $global_template_collections */
+    /** @var GlobalTemplateCollectionInterface[] $global_template_collections */
     $global_template_collections = [];
     foreach ($this->getSystemMails() as $module => $mails) {
       foreach ($mails as $mail_id => $definition) {
@@ -272,7 +275,7 @@ class Settings extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitCreateMessages(array &$form, FormStateInterface $form_state) {
@@ -293,7 +296,7 @@ class Settings extends ConfigFormBase {
         // See issue: https://www.drupal.org/node/2555027
         // Context.
         // Create global context for accounts if it does not exist.
-        /** @var \Drupal\courier\CourierContextInterface $courier_context */
+        /** @var CourierContextInterface $courier_context */
         if (!$courier_context = CourierContext::load('courier_system_user')) {
           $courier_context = CourierContext::create([
             'label' => t('Courier System: Account'),
@@ -322,7 +325,7 @@ class Settings extends ConfigFormBase {
    *
    * Template collection and email template must be created prior to calling.
    *
-   * @param \Drupal\courier\TemplateCollectionInterface $template_collection
+   * @param TemplateCollectionInterface $template_collection
    *   A template collection entity.
    * @param string $mail_id
    *   A mail ID as defined in $this->getSystemMails().
@@ -333,7 +336,7 @@ class Settings extends ConfigFormBase {
     $user_mails = $this->config('user.mail');
     $mail = $user_mails->get($key);
 
-    /** @var \Drupal\courier\Entity\Email $courier_email */
+    /** @var Email $courier_email */
     if ($courier_email = $template_collection->getTemplate('courier_email')) {
       foreach ($mail as &$value) {
         $value = nl2br($value);
diff --git a/courier_system/tests/src/Kernel/CourierSystemTest.php b/courier_system/tests/src/Kernel/CourierSystemTest.php
index 9eac067..c9d1357 100644
--- a/courier_system/tests/src/Kernel/CourierSystemTest.php
+++ b/courier_system/tests/src/Kernel/CourierSystemTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\courier_system\Kernel;
 
+use Drupal\Core\CronInterface;
+use Drupal\user\UserInterface;
+use Drupal\courier\Entity\GlobalTemplateCollectionInterface;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\courier\Entity\GlobalTemplateCollection;
 use Drupal\Tests\courier\Kernel\CourierKernelTestBase;
@@ -24,7 +27,7 @@ class CourierSystemTest extends CourierKernelTestBase {
   /**
    * Cron.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;
 
@@ -38,7 +41,7 @@ class CourierSystemTest extends CourierKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['courier', 'courier_system']);
     $this->installSchema('system', ['sequences']);
@@ -127,7 +130,7 @@ class CourierSystemTest extends CourierKernelTestBase {
   /**
    * Create a random user for testing.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   A user entity.
    */
   protected function createUser() {
@@ -148,7 +151,7 @@ class CourierSystemTest extends CourierKernelTestBase {
    * @param string $email_body
    *   Change the email template body.
    *
-   * @return \Drupal\courier\Entity\GlobalTemplateCollectionInterface
+   * @return GlobalTemplateCollectionInterface
    */
   protected function createGlobalTemplateCollection($id, $email_body) {
     $gtc = GlobalTemplateCollection::create(['id' => $id]);
diff --git a/src/Annotation/IdentityChannel.php b/src/Annotation/IdentityChannel.php
index 222aa77..280d96d 100644
--- a/src/Annotation/IdentityChannel.php
+++ b/src/Annotation/IdentityChannel.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class IdentityChannel extends Plugin {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
 
diff --git a/src/ChannelInterface.php b/src/ChannelInterface.php
index c67087a..267671a 100644
--- a/src/ChannelInterface.php
+++ b/src/ChannelInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier;
 
+use Drupal\courier\Exception\ChannelFailure;
 use Drupal\Core\Entity\FieldableEntityInterface;
 
 /**
@@ -25,7 +26,7 @@ interface ChannelInterface extends FieldableEntityInterface, TokenInterface {
    * @param array $options
    *   Miscellaneous options.
    *
-   * @throws \Drupal\courier\Exception\ChannelFailure
+   * @throws ChannelFailure
    *   Throw if the message cannot be sent.
    */
   public static function sendMessages(array $messages, array $options = []);
diff --git a/src/Controller/ChannelFormController.php b/src/Controller/ChannelFormController.php
index 7e2c466..bdc43f6 100644
--- a/src/Controller/ChannelFormController.php
+++ b/src/Controller/ChannelFormController.php
@@ -24,14 +24,14 @@ class ChannelFormController extends ControllerBase implements ContainerInjection
   /**
    * Gets the template form for a channel in a template collection.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\courier\TemplateCollectionInterface $courier_template_collection
+   * @param TemplateCollectionInterface $courier_template_collection
    *   A template collection entity.
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $courier_channel
+   * @param ContentEntityTypeInterface $courier_channel
    *   Entity type definition for the channel.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   A render array for regular requests, or AjaxResponse if called by ajax.
    */
   public function template(Request $request, TemplateCollectionInterface $courier_template_collection, ContentEntityTypeInterface $courier_channel) {
@@ -59,12 +59,12 @@ class ChannelFormController extends ControllerBase implements ContainerInjection
   /**
    * Get tokens for a template collection.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\courier\TemplateCollectionInterface $courier_template_collection
+   * @param TemplateCollectionInterface $courier_template_collection
    *   A template collection entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   A AJAX response object.
    */
   public function tokens(Request $request, TemplateCollectionInterface $courier_template_collection) {
diff --git a/src/CourierTokenElementTrait.php b/src/CourierTokenElementTrait.php
index 2827add..afb1e31 100644
--- a/src/CourierTokenElementTrait.php
+++ b/src/CourierTokenElementTrait.php
@@ -15,7 +15,7 @@ trait CourierTokenElementTrait {
   /**
    * Render a token element for a template collection.
    *
-   * @param \Drupal\courier\TemplateCollectionInterface $template_collection
+   * @param TemplateCollectionInterface $template_collection
    *   A template collection entity.
    *
    * @return array
diff --git a/src/Element/TemplateCollectionList.php b/src/Element/TemplateCollectionList.php
index d5d8cff..53612b6 100644
--- a/src/Element/TemplateCollectionList.php
+++ b/src/Element/TemplateCollectionList.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\courier\Element;
 
+use Drupal\courier\Service\IdentityChannelManagerInterface;
+use Drupal\courier\TemplateCollectionInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ -42,7 +44,7 @@ class TemplateCollectionList extends FormElement {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   container.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -77,12 +79,12 @@ class TemplateCollectionList extends FormElement {
 
     $entity_type_manager = \Drupal::entityTypeManager();
     $destination = \Drupal::destination()->getAsArray();
-    /** @var \Drupal\courier\Service\IdentityChannelManagerInterface $icm */
+    /** @var IdentityChannelManagerInterface $icm */
     $icm = \Drupal::service('plugin.manager.identity_channel');
     $channels_all = array_keys($icm->getChannels());
 
     foreach ($element['#items'] as $id => $setting) {
-      /** @var \Drupal\courier\TemplateCollectionInterface $template_collection */
+      /** @var TemplateCollectionInterface $template_collection */
       $template_collection = $setting['#template_collection'];
 
       $t_args = [
diff --git a/src/Entity/Email.php b/src/Entity/Email.php
index ce8d5c2..c2a5aac 100644
--- a/src/Entity/Email.php
+++ b/src/Entity/Email.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Entity;
 
+use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\courier\ChannelBase;
 use Drupal\courier\EmailInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -154,7 +155,7 @@ class Email extends ChannelBase implements EmailInterface {
         ],
       ];
 
-      /** @var \Drupal\Core\Mail\MailManagerInterface $mailman */
+      /** @var MailManagerInterface $mailman */
       $mailman = \Drupal::service('plugin.manager.mail');
       $mailman->mail(
         'system',
diff --git a/src/Entity/GlobalTemplateCollection.php b/src/Entity/GlobalTemplateCollection.php
index 522d58e..31ca4a8 100644
--- a/src/Entity/GlobalTemplateCollection.php
+++ b/src/Entity/GlobalTemplateCollection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Entity;
 
+use Drupal\courier\Service\GlobalTemplateCollectionManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 
 /**
@@ -60,7 +61,7 @@ class GlobalTemplateCollection extends ConfigEntityBase implements GlobalTemplat
    * {@inheritdoc}
    */
   public function getTemplateCollection() {
-    /** @var \Drupal\courier\Service\GlobalTemplateCollectionManagerInterface $template_collection_manager */
+    /** @var GlobalTemplateCollectionManagerInterface $template_collection_manager */
     $template_collection_manager = \Drupal::service('courier.manager.global_template_collection');
     return $template_collection_manager->getLocalCollection($this);
   }
diff --git a/src/Entity/GlobalTemplateCollectionInterface.php b/src/Entity/GlobalTemplateCollectionInterface.php
index 6e2b05e..fe3e9e9 100644
--- a/src/Entity/GlobalTemplateCollectionInterface.php
+++ b/src/Entity/GlobalTemplateCollectionInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\courier\Entity;
 
+use Drupal\courier\TemplateCollectionInterface;
+use Drupal\courier\Exception\GlobalTemplateCollectionException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -12,10 +14,10 @@ interface GlobalTemplateCollectionInterface extends ConfigEntityInterface {
   /**
    * Get the local Template Collection for this global template collection.
    *
-   * @return \Drupal\courier\TemplateCollectionInterface
+   * @return TemplateCollectionInterface
    *   A template collection entity.
    *
-   * @throws \Drupal\courier\Exception\GlobalTemplateCollectionException
+   * @throws GlobalTemplateCollectionException
    *   Thrown if this global template collection is unsaved.
    */
   public function getTemplateCollection();
diff --git a/src/Form/CourierMaintenanceForm.php b/src/Form/CourierMaintenanceForm.php
index 6ec94a6..6157296 100644
--- a/src/Form/CourierMaintenanceForm.php
+++ b/src/Form/CourierMaintenanceForm.php
@@ -15,14 +15,14 @@ class CourierMaintenanceForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a CourierMaintenanceForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Form/EmailForm.php b/src/Form/EmailForm.php
index 02c7da7..5136791 100644
--- a/src/Form/EmailForm.php
+++ b/src/Form/EmailForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Form;
 
+use Drupal\courier\Entity\Email;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\courier\EmailInterface;
@@ -18,7 +19,7 @@ class EmailForm extends ContentEntityForm {
   /**
    * The courier_email entity.
    *
-   * @var \Drupal\courier\EmailInterface
+   * @var EmailInterface
    */
   protected $entity;
 
@@ -28,7 +29,7 @@ class EmailForm extends ContentEntityForm {
   public function form(array $form, FormStateInterface $form_state, EmailInterface $email = NULL) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\courier\Entity\Email $email */
+    /** @var Email $email */
     $email = $this->entity;
 
     if (!$email->isNew()) {
diff --git a/src/Form/Settings.php b/src/Form/Settings.php
index ee0f4ea..1ffa938 100644
--- a/src/Form/Settings.php
+++ b/src/Form/Settings.php
@@ -17,7 +17,7 @@ class Settings extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -31,18 +31,18 @@ class Settings extends ConfigFormBase {
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManagerInterface
+   * @var IdentityChannelManagerInterface
    */
   protected $identityChannelManager;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, IdentityChannelManagerInterface $identity_channel_manager) {
diff --git a/src/Form/TemplateEditForm.php b/src/Form/TemplateEditForm.php
index de7b3f6..82bb394 100644
--- a/src/Form/TemplateEditForm.php
+++ b/src/Form/TemplateEditForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\courier\Form;
 
+use Drupal\courier\ChannelInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,32 +23,32 @@ class TemplateEditForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManagerInterface
+   * @var IdentityChannelManagerInterface
    */
   protected $identityChannelManager;
 
   /**
    * The courier manager.
    *
-   * @var \Drupal\courier\Service\CourierManagerInterface
+   * @var CourierManagerInterface
    */
   protected $courierManager;
 
   /**
    * Constructs a MessageForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
-   * @param \Drupal\courier\Service\CourierManagerInterface $courier_manager
+   * @param CourierManagerInterface $courier_manager
    *   The courier manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, IdentityChannelManagerInterface $identity_channel_manager, CourierManagerInterface $courier_manager) {
@@ -83,7 +85,7 @@ class TemplateEditForm extends FormBase {
 
     if (!$message = $template_collection->getTemplate($courier_channel->id())) {
       // Create it if it does not exist.
-      /** @var \Drupal\courier\ChannelInterface $message */
+      /** @var ChannelInterface $message */
       $message = $this->entityTypeManager
         ->getStorage($courier_channel->id())
         ->create();
@@ -102,7 +104,7 @@ class TemplateEditForm extends FormBase {
     ];
 
     // Entity form display.
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepo */
+    /** @var EntityDisplayRepositoryInterface $entityDisplayRepo */
     $entityDisplayRepo = \Drupal::service('entity_display.repository');
     $display = $entityDisplayRepo->getFormDisplay($message->getEntityTypeId(), $message->getEntityTypeId(), 'default');
     $form_state->set(['form_display'], $display);
@@ -131,13 +133,13 @@ class TemplateEditForm extends FormBase {
    *    * @param array $form
    *   An associative array containing the structure of the form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function cancelForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\courier\ChannelInterface $message */
+    /** @var ChannelInterface $message */
     $message = $form_state->get('message_entity');
-    /** @var \Drupal\courier\TemplateCollectionInterface $template_collection */
+    /** @var TemplateCollectionInterface $template_collection */
     $template_collection = $form_state->get('template_collection');
     $response = new AjaxResponse();
     $response
@@ -153,7 +155,7 @@ class TemplateEditForm extends FormBase {
    * @inheritDoc
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\courier\ChannelInterface $message */
+    /** @var ChannelInterface $message */
     $message = $form_state->get('message_entity');
     $form_state->get(['form_display'])
       ->validateFormValues($message, $form, $form_state);
@@ -163,9 +165,9 @@ class TemplateEditForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\courier\ChannelInterface $message */
+    /** @var ChannelInterface $message */
     $message = $form_state->get('message_entity');
-    /** @var \Drupal\courier\TemplateCollectionInterface $template_collection */
+    /** @var TemplateCollectionInterface $template_collection */
     $template_collection = $form_state->get('template_collection');
 
     $form_state->get(['form_display'])
diff --git a/src/MessageQueueItemInterface.php b/src/MessageQueueItemInterface.php
index 20449a3..cbe3ed5 100644
--- a/src/MessageQueueItemInterface.php
+++ b/src/MessageQueueItemInterface.php
@@ -13,7 +13,7 @@ interface MessageQueueItemInterface extends ContentEntityInterface {
   /**
    * Get associated identity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   An identity entity.
    */
   public function getIdentity();
@@ -21,7 +21,7 @@ interface MessageQueueItemInterface extends ContentEntityInterface {
   /**
    * Set associated identity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $identity
+   * @param EntityInterface $identity
    *   The identity to set.
    *
    * @return \Drupal\courier\MessageQueueItemInterface
@@ -35,7 +35,7 @@ interface MessageQueueItemInterface extends ContentEntityInterface {
    * @param string $entity_type_id
    *   A channel entity type ID.
    *
-   * @return \Drupal\courier\ChannelInterface|null
+   * @return ChannelInterface|null
    *   A message, or NULL.
    */
   public function getMessage($entity_type_id);
@@ -46,7 +46,7 @@ interface MessageQueueItemInterface extends ContentEntityInterface {
    * The order of the messages is meaningful. The first successful message in
    * the list will terminate the remaining messages.
    *
-   * @return \Drupal\courier\ChannelInterface[]
+   * @return ChannelInterface[]
    *   An array of template entities.
    */
   public function getMessages();
@@ -54,7 +54,7 @@ interface MessageQueueItemInterface extends ContentEntityInterface {
   /**
    * Add a message to the message queue item.
    *
-   * @param \Drupal\courier\ChannelInterface $message
+   * @param ChannelInterface $message
    *   The message to add to the message queue item.
    *
    * @return \Drupal\courier\MessageQueueItemInterface
diff --git a/src/ParamConverter/CourierChannelConverter.php b/src/ParamConverter/CourierChannelConverter.php
index 06502c3..e4febbc 100644
--- a/src/ParamConverter/CourierChannelConverter.php
+++ b/src/ParamConverter/CourierChannelConverter.php
@@ -15,14 +15,14 @@ class CourierChannelConverter implements ParamConverterInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new CourierChannelConverter.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/IdentityChannel/CourierEmail/User.php b/src/Plugin/IdentityChannel/CourierEmail/User.php
index 5a6a072..9863149 100644
--- a/src/Plugin/IdentityChannel/CourierEmail/User.php
+++ b/src/Plugin/IdentityChannel/CourierEmail/User.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Plugin\IdentityChannel\CourierEmail;
 
+use Drupal\courier\EmailInterface;
 use Drupal\courier\Plugin\IdentityChannel\IdentityChannelPluginInterface;
 use Drupal\courier\ChannelInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -24,7 +25,7 @@ class User implements IdentityChannelPluginInterface {
    */
   public function applyIdentity(ChannelInterface &$message, EntityInterface $identity) {
     /** @var \Drupal\user\UserInterface $identity */
-    /** @var \Drupal\courier\EmailInterface $message */
+    /** @var EmailInterface $message */
     $message->setRecipientName($identity->label());
     $message->setEmailAddress($identity->getEmail());
   }
diff --git a/src/Plugin/IdentityChannel/IdentityChannelPluginInterface.php b/src/Plugin/IdentityChannel/IdentityChannelPluginInterface.php
index 3db2689..28dd4e1 100644
--- a/src/Plugin/IdentityChannel/IdentityChannelPluginInterface.php
+++ b/src/Plugin/IdentityChannel/IdentityChannelPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Plugin\IdentityChannel;
 
+use Drupal\courier\Exception\IdentityException;
 use Drupal\courier\ChannelInterface;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -13,12 +14,12 @@ interface IdentityChannelPluginInterface {
   /**
    * Inserts the identity into the message.
    *
-   * @param \Drupal\courier\ChannelInterface $message
+   * @param ChannelInterface $message
    *   The message. Passed by reference.
-   * @param \Drupal\Core\Entity\EntityInterface $identity
+   * @param EntityInterface $identity
    *   The identity.
    *
-   * @throws \Drupal\courier\Exception\IdentityException
+   * @throws IdentityException
    *   Thrown when an identity cannot be applied. Message is discarded, it does
    *   not stop creation of remaining messages in collection.
    */
diff --git a/src/Plugin/QueueWorker/MessageWorker.php b/src/Plugin/QueueWorker/MessageWorker.php
index 772a6b5..ce95f53 100644
--- a/src/Plugin/QueueWorker/MessageWorker.php
+++ b/src/Plugin/QueueWorker/MessageWorker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Plugin\QueueWorker;
 
+use Drupal\courier\Service\MessageQueueManagerInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\courier\Entity\MessageQueueItem;
 
@@ -25,7 +26,7 @@ class MessageWorker extends QueueWorkerBase {
   public function processItem($data) {
     $message_queue = MessageQueueItem::load($data['id']);
     if ($message_queue) {
-      /** @var \Drupal\courier\Service\MessageQueueManagerInterface $service */
+      /** @var MessageQueueManagerInterface $service */
       $service = \Drupal::service('courier.manager.message_queue');
       $service->sendMessage($message_queue);
     }
diff --git a/src/ProxyClass/ParamConverter/CourierChannelConverter.php b/src/ProxyClass/ParamConverter/CourierChannelConverter.php
index ffd9488..5fd1f80 100644
--- a/src/ProxyClass/ParamConverter/CourierChannelConverter.php
+++ b/src/ProxyClass/ParamConverter/CourierChannelConverter.php
@@ -11,14 +11,18 @@
 
 namespace Drupal\courier\ProxyClass\ParamConverter {
 
+  use Drupal\Core\ParamConverter\ParamConverterInterface;
+  use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+  use Symfony\Component\DependencyInjection\ContainerInterface;
+  use Symfony\Component\Routing\Route;
   /**
    * Provides a proxy class for \Drupal\courier\ParamConverter\CourierChannelConverter.
    *
    * @see \Drupal\Component\ProxyBuilder
    */
-  class CourierChannelConverter implements \Drupal\Core\ParamConverter\ParamConverterInterface {
+  class CourierChannelConverter implements ParamConverterInterface {
 
-    use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use DependencySerializationTrait;
 
     /**
      * The id of the original proxied service.
@@ -37,19 +41,19 @@ namespace Drupal\courier\ProxyClass\ParamConverter {
     /**
      * The service container.
      *
-     * @var \Symfony\Component\DependencyInjection\ContainerInterface
+     * @var ContainerInterface
      */
     protected $container;
 
     /**
      * Constructs a ProxyClass Drupal proxy object.
      *
-     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+     * @param ContainerInterface $container
      *   The container.
      * @param string $drupal_proxy_original_service_id
      *   The service ID of the original service.
      */
-    public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id) {
+    public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id) {
 
       $this->container = $container;
       $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ -81,7 +85,7 @@ namespace Drupal\courier\ProxyClass\ParamConverter {
     /**
      * {@inheritdoc}
      */
-    public function applies($definition, $name, \Symfony\Component\Routing\Route $route) {
+    public function applies($definition, $name, Route $route) {
 
       return $this->lazyLoadItself()->applies($definition, $name, $route);
     }
diff --git a/src/Service/CourierManager.php b/src/Service/CourierManager.php
index e8e90d0..4a97975 100644
--- a/src/Service/CourierManager.php
+++ b/src/Service/CourierManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\courier\Service;
 
+use Psr\Log\LoggerInterface;
+use Drupal\courier\ChannelInterface;
 use Drupal\courier\TemplateCollectionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -18,50 +20,50 @@ class CourierManager implements CourierManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The logger for the Courier channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManager
+   * @var IdentityChannelManager
    */
   protected $identityChannelManager;
 
   /**
    * The message queue service.
    *
-   * @var \Drupal\courier\Service\MessageQueueManagerInterface
+   * @var MessageQueueManagerInterface
    */
   protected $messageQueue;
 
   /**
    * Constructs the Courier Manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
-   * @param \Drupal\courier\Service\MessageQueueManagerInterface $message_queue
+   * @param MessageQueueManagerInterface $message_queue
    *   The message queue service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, IdentityChannelManagerInterface $identity_channel_manager, MessageQueueManagerInterface $message_queue) {
@@ -104,7 +106,7 @@ class CourierManager implements CourierManagerInterface {
 
     // All templates are 'rendered' into messages in case preferred channels
     // fail.
-    /** @var \Drupal\courier\ChannelInterface[] $templates */
+    /** @var ChannelInterface[] $templates */
     $templates = [];
     foreach ($this->identityChannelManager->getChannelsForIdentity($identity) as $channel) {
       if ($template = $template_collection->getTemplate($channel)) {
diff --git a/src/Service/CourierManagerInterface.php b/src/Service/CourierManagerInterface.php
index 37bb9f3..36a6b89 100644
--- a/src/Service/CourierManagerInterface.php
+++ b/src/Service/CourierManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Service;
 
+use Drupal\courier\MessageQueueItemInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\courier\TemplateCollectionInterface;
 
@@ -17,7 +18,7 @@ interface CourierManagerInterface {
    *
    * Does not replace templates for existing channel types.
    *
-   * @param \Drupal\courier\TemplateCollectionInterface $template_collection
+   * @param TemplateCollectionInterface $template_collection
    *   A template collection entity.
    */
   public function addTemplates(TemplateCollectionInterface &$template_collection);
@@ -28,9 +29,9 @@ interface CourierManagerInterface {
    * Once this method is executed, responsibility for transmission is passed
    * to Courier.
    *
-   * @param \Drupal\courier\TemplateCollectionInterface $template_collection
+   * @param TemplateCollectionInterface $template_collection
    *   A template collection entity.
-   * @param \Drupal\Core\Entity\EntityInterface $identity
+   * @param EntityInterface $identity
    *   An identity entity.
    * @param array $options
    *   Optional options to pass to the channel.
@@ -53,7 +54,7 @@ interface CourierManagerInterface {
    *   ];
    * @endcode
    *
-   * @return \Drupal\courier\MessageQueueItemInterface|false
+   * @return MessageQueueItemInterface|false
    *   A message queue item entity, or FALSE if no messages could be generated.
    */
   public function sendMessage(TemplateCollectionInterface $template_collection, EntityInterface $identity, array $options = []);
diff --git a/src/Service/GlobalTemplateCollectionManager.php b/src/Service/GlobalTemplateCollectionManager.php
index bbbc39a..2a39494 100644
--- a/src/Service/GlobalTemplateCollectionManager.php
+++ b/src/Service/GlobalTemplateCollectionManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Service;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 use Drupal\Core\KeyValueStore\KeyValueFactoryInterface;
 use Drupal\courier\Entity\GlobalTemplateCollection;
 use Drupal\courier\Entity\TemplateCollection;
@@ -18,23 +19,23 @@ class GlobalTemplateCollectionManager implements GlobalTemplateCollectionManager
   /**
    * The key value store to use.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValueStore;
 
   /**
    * The courier manager.
    *
-   * @var \Drupal\courier\Service\CourierManagerInterface
+   * @var CourierManagerInterface
    */
   protected $courierManager;
 
   /**
    * Constructs a global template collection manager.
    *
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_factory
    *   The key value store to use.
-   * @param \Drupal\courier\Service\CourierManagerInterface $courier_manager
+   * @param CourierManagerInterface $courier_manager
    *   The courier manager.
    */
   public function __construct(KeyValueFactoryInterface $key_value_factory, CourierManagerInterface $courier_manager) {
diff --git a/src/Service/GlobalTemplateCollectionManagerInterface.php b/src/Service/GlobalTemplateCollectionManagerInterface.php
index c62a553..293e30c 100644
--- a/src/Service/GlobalTemplateCollectionManagerInterface.php
+++ b/src/Service/GlobalTemplateCollectionManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Service;
 
+use Drupal\courier\Exception\GlobalTemplateCollectionException;
 use Drupal\courier\ChannelInterface;
 use Drupal\courier\TemplateCollectionInterface;
 use Drupal\courier\Entity\GlobalTemplateCollectionInterface;
@@ -14,10 +15,10 @@ interface GlobalTemplateCollectionManagerInterface {
   /**
    * Get the global template collection associated with a template.
    *
-   * @param \Drupal\courier\ChannelInterface $template
+   * @param ChannelInterface $template
    *   A template entity.
    *
-   * @return \Drupal\courier\Entity\GlobalTemplateCollectionInterface|false
+   * @return GlobalTemplateCollectionInterface|false
    *   A global template collection entity, or FALSE if the template is not
    *   associated with a global template collection.
    */
@@ -29,10 +30,10 @@ interface GlobalTemplateCollectionManagerInterface {
    * Get the global template collection associated with a local template
    * collection.
    *
-   * @param \Drupal\courier\TemplateCollectionInterface $template_collection
+   * @param TemplateCollectionInterface $template_collection
    *   A local template collection entity.
    *
-   * @return \Drupal\courier\Entity\GlobalTemplateCollectionInterface|false
+   * @return GlobalTemplateCollectionInterface|false
    *   A global template collection entity, or FALSE if the template collection
    *   is not associated with a global template collection.
    */
@@ -42,17 +43,17 @@ interface GlobalTemplateCollectionManagerInterface {
    * Create a global template collection and associate it with a template
    * collection.
    *
-   * @param \Drupal\courier\TemplateCollectionInterface $template_collection
+   * @param TemplateCollectionInterface $template_collection
    *   A local template collection entity.
    * @param array $defaults
    *   Default values to add to the new global template collection. This value
    *   must contain a 'id' key which does not conflict with existing global
    *   template collections.
    *
-   * @return \Drupal\courier\Entity\GlobalTemplateCollectionInterface
+   * @return GlobalTemplateCollectionInterface
    *   A new and saved global template collection.
    *
-   * @throws \Drupal\courier\Exception\GlobalTemplateCollectionException
+   * @throws GlobalTemplateCollectionException
    *   Thrown if passed template collection is unsaved.
    */
   public function createGlobalCollectionForLocalCollection(TemplateCollectionInterface $template_collection, array $defaults = []);
@@ -63,13 +64,13 @@ interface GlobalTemplateCollectionManagerInterface {
    * Create a global template collection and associate it with a template
    * collection.
    *
-   * @param \Drupal\courier\Entity\GlobalTemplateCollectionInterface $global_template_collection
+   * @param GlobalTemplateCollectionInterface $global_template_collection
    *   A global template collection entity.
    *
-   * @return \Drupal\courier\TemplateCollectionInterface
+   * @return TemplateCollectionInterface
    *   A template collection entity.
    *
-   * @throws \Drupal\courier\Exception\GlobalTemplateCollectionException
+   * @throws GlobalTemplateCollectionException
    *   Thrown if passed global template collection is unsaved.
    */
   public function createLocalCollectionForGlobalCollection(GlobalTemplateCollectionInterface $global_template_collection);
@@ -78,13 +79,13 @@ interface GlobalTemplateCollectionManagerInterface {
    * Locate, and optionally instantiate, a local template collection to
    * associate a global template collection.
    *
-   * @param \Drupal\courier\Entity\GlobalTemplateCollectionInterface $global_template_collection
+   * @param GlobalTemplateCollectionInterface $global_template_collection
    *   A global template collection entity.
    *
-   * @return \Drupal\courier\TemplateCollectionInterface
+   * @return TemplateCollectionInterface
    *   A template collection entity.
    *
-   * @throws \Drupal\courier\Exception\GlobalTemplateCollectionException
+   * @throws GlobalTemplateCollectionException
    *   Thrown if passed global template collection is unsaved.
    */
   public function getLocalCollection(GlobalTemplateCollectionInterface $global_template_collection);
@@ -95,7 +96,7 @@ interface GlobalTemplateCollectionManagerInterface {
    * This method will resynchronise template contents with the global template
    * collection configuration.
    *
-   * @param \Drupal\courier\ChannelInterface $template
+   * @param ChannelInterface $template
    *   A template entity.
    */
   public function notifyTemplateChanged(ChannelInterface $template);
@@ -106,7 +107,7 @@ interface GlobalTemplateCollectionManagerInterface {
    *
    * This will override message values from the database.
    *
-   * @param \Drupal\courier\ChannelInterface $template
+   * @param ChannelInterface $template
    *   A template entity.
    */
   public function importFromGlobalCollection(ChannelInterface $template);
diff --git a/src/Service/IdentityChannelManagerInterface.php b/src/Service/IdentityChannelManagerInterface.php
index 2234798..8b615c0 100644
--- a/src/Service/IdentityChannelManagerInterface.php
+++ b/src/Service/IdentityChannelManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Service;
 
+use Drupal\courier\Plugin\IdentityChannel\IdentityChannelPluginInterface;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -30,7 +31,7 @@ interface IdentityChannelManagerInterface {
    * @param string $identity_type_id
    *   An identity entity type ID.
    *
-   * @return \Drupal\courier\Plugin\IdentityChannel\IdentityChannelPluginInterface|null
+   * @return IdentityChannelPluginInterface|null
    *   A CourierIdentity plugin instance, or NULL if no plugin was found.
    */
   public function getCourierIdentity($channel_type_id, $identity_type_id);
@@ -65,7 +66,7 @@ interface IdentityChannelManagerInterface {
   /**
    * Determine which channels an identity would like a message sent to.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $identity
+   * @param EntityInterface $identity
    *   An identity entity.
    *
    * @return string[]
diff --git a/src/Service/MessageQueueManager.php b/src/Service/MessageQueueManager.php
index 5ff20b0..2555506 100644
--- a/src/Service/MessageQueueManager.php
+++ b/src/Service/MessageQueueManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\courier\Service;
 
+use Psr\Log\LoggerInterface;
+use Drupal\courier\ChannelInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\courier\MessageQueueItemInterface;
 
@@ -13,23 +15,23 @@ class MessageQueueManager implements MessageQueueManagerInterface {
   /**
    * The logger for the Courier channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The identity channel manager.
    *
-   * @var \Drupal\courier\Service\IdentityChannelManager
+   * @var IdentityChannelManager
    */
   protected $identityChannelManager;
 
   /**
    * Constructs a message queue manager.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\courier\Service\IdentityChannelManagerInterface $identity_channel_manager
+   * @param IdentityChannelManagerInterface $identity_channel_manager
    *   The identity channel manager.
    */
   public function __construct(LoggerChannelFactoryInterface $logger_factory, IdentityChannelManagerInterface $identity_channel_manager) {
@@ -58,7 +60,7 @@ class MessageQueueManager implements MessageQueueManagerInterface {
       }
     }
 
-    /** @var \Drupal\courier\ChannelInterface[] $messages */
+    /** @var ChannelInterface[] $messages */
     foreach ($messages as $message) {
       $message_options = $options;
       // Transform options based on channel.
diff --git a/src/Service/MessageQueueManagerInterface.php b/src/Service/MessageQueueManagerInterface.php
index 1750677..857d5c1 100644
--- a/src/Service/MessageQueueManagerInterface.php
+++ b/src/Service/MessageQueueManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier\Service;
 
+use Drupal\courier\ChannelInterface;
 use Drupal\courier\MessageQueueItemInterface;
 
 /**
@@ -18,10 +19,10 @@ interface MessageQueueManagerInterface {
    * Attempts will halt as soon as a message is sent successfully, then the
    * message queue item will be deleted.
    *
-   * @param \Drupal\courier\MessageQueueItemInterface $mqi
+   * @param MessageQueueItemInterface $mqi
    *   A message queue item.
    *
-   * @return \Drupal\courier\ChannelInterface|false
+   * @return ChannelInterface|false
    *   The message that was sent, or FALSE if all messages failed to send.
    */
   public function sendMessage(MessageQueueItemInterface $mqi);
diff --git a/src/TemplateCollectionInterface.php b/src/TemplateCollectionInterface.php
index b5acec7..f09c1dc 100644
--- a/src/TemplateCollectionInterface.php
+++ b/src/TemplateCollectionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\courier;
 
+use Drupal\courier\Entity\TemplateCollection;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
@@ -13,7 +14,7 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
   /**
    * Gets the context entity.
    *
-   * @return \Drupal\courier\CourierContextInterface|null
+   * @return CourierContextInterface|null
    *   The context entity, or NULL if it does not exist.
    */
   public function getContext();
@@ -21,7 +22,7 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
   /**
    * Sets the context entity.
    *
-   * @param \Drupal\courier\CourierContextInterface|null $entity
+   * @param CourierContextInterface|null $entity
    *   A courier_context entity, or NULL to remove context.
    *
    * @return \Drupal\courier\TemplateCollectionInterface
@@ -32,7 +33,7 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
   /**
    * Gets the owner entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The owner entity, or NULL if it does not exist.
    */
   public function getOwner();
@@ -40,7 +41,7 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
   /**
    * Sets the owner entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   An entity, or NULL to set as global.
    *
    * @return \Drupal\courier\TemplateCollectionInterface
@@ -54,7 +55,7 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
    * @param string $channel_type_id
    *   A channel entity type ID.
    *
-   * @return \Drupal\courier\ChannelInterface|null
+   * @return ChannelInterface|null
    *   A message, or NULL.
    */
   public function getTemplate($channel_type_id);
@@ -62,7 +63,7 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
   /**
    * Get all templates associated with this collections.
    *
-   * @return \Drupal\courier\ChannelInterface[]
+   * @return ChannelInterface[]
    *   An array of template entities.
    */
   public function getTemplates();
@@ -72,7 +73,7 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
    *
    * Collections can accept one of each channel entity type.
    *
-   * @param \Drupal\courier\ChannelInterface $template
+   * @param ChannelInterface $template
    *   A template entity.
    *
    * @return \Drupal\courier\TemplateCollectionInterface
@@ -102,10 +103,10 @@ interface TemplateCollectionInterface extends ContentEntityInterface, TokenInter
   /**
    * Locates the template collection which references a template.
    *
-   * @param \Drupal\courier\ChannelInterface $template
+   * @param ChannelInterface $template
    *   A template entity.
    *
-   * @return \Drupal\courier\Entity\TemplateCollection|null
+   * @return TemplateCollection|null
    *   A template collection entity, or NULL if the template is an orphan.
    */
   public static function getTemplateCollectionForTemplate(ChannelInterface $template);
