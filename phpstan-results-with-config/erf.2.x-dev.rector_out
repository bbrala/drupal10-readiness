modules/contrib/erf/erf.module
modules/contrib/erf/modules/erf_commerce/erf_commerce.module
modules/contrib/erf/modules/erf_commerce/erf_commerce.post_update.php
modules/contrib/erf/modules/erf_commerce/src/EventSubscriber/OrderCompleteSubscriber.php
modules/contrib/erf/modules/erf_commerce/src/OrderRegistrationManager.php
modules/contrib/erf/modules/erf_commerce/src/Plugin/EntityReferenceSelection/VariationSelection.php
modules/contrib/erf/modules/erf_commerce/src/Plugin/Field/FieldWidget/RenderedVariationReferenceWidget.php
modules/contrib/erf/participant.page.inc
modules/contrib/erf/registration.page.inc
modules/contrib/erf/src/Entity/Participant.php
modules/contrib/erf/src/Entity/ParticipantInterface.php
modules/contrib/erf/src/Entity/ParticipantType.php
modules/contrib/erf/src/Entity/ParticipantTypeInterface.php
modules/contrib/erf/src/Entity/ParticipantViewsData.php
modules/contrib/erf/src/Entity/Registration.php
modules/contrib/erf/src/Entity/RegistrationInterface.php
modules/contrib/erf/src/Entity/RegistrationType.php
modules/contrib/erf/src/Entity/RegistrationTypeInterface.php
modules/contrib/erf/src/Entity/RegistrationViewsData.php
modules/contrib/erf/src/EntityRegistrationSession.php
modules/contrib/erf/src/Form/ParticipantDeleteForm.php
modules/contrib/erf/src/Form/ParticipantForm.php
modules/contrib/erf/src/Form/ParticipantSettingsForm.php
modules/contrib/erf/src/Form/ParticipantTypeDeleteForm.php
modules/contrib/erf/src/Form/ParticipantTypeForm.php
modules/contrib/erf/src/Form/RegistrationDeleteForm.php
modules/contrib/erf/src/Form/RegistrationForm.php
modules/contrib/erf/src/Form/RegistrationSettingsForm.php
modules/contrib/erf/src/Form/RegistrationTypeDeleteForm.php
modules/contrib/erf/src/Form/RegistrationTypeForm.php
modules/contrib/erf/src/IefDuplicateParticipantConstraint.php
modules/contrib/erf/src/ParticipantAccessControlHandler.php
modules/contrib/erf/src/ParticipantHtmlRouteProvider.php
modules/contrib/erf/src/ParticipantListBuilder.php
modules/contrib/erf/src/ParticipantTypeHtmlRouteProvider.php
modules/contrib/erf/src/ParticipantTypeListBuilder.php
modules/contrib/erf/src/Plugin/Field/FieldFormatter/RegistrationFormFormatter.php
modules/contrib/erf/src/Plugin/views/field/EntityRegistrationSourceEntityLabel.php
modules/contrib/erf/src/RegistrationAccessControlHandler.php
modules/contrib/erf/src/RegistrationHtmlRouteProvider.php
modules/contrib/erf/src/RegistrationListBuilder.php
modules/contrib/erf/src/RegistrationPermissions.php
modules/contrib/erf/src/RegistrationTypeAccessControlHandler.php
modules/contrib/erf/src/RegistrationTypeHtmlRouteProvider.php
modules/contrib/erf/src/RegistrationTypeListBuilder.php

23 files with changes
=====================

1) modules/contrib/erf/src/RegistrationTypeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf;

+use Drupal\erf\Entity\RegistrationTypeInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\erf\Entity\RegistrationTypeInterface $entity*/
-
+    /** @var RegistrationTypeInterface $entity*/
     // The registration type label is not privileged information, so this check
     // has has been added to allow labels for registration types to be viewed
     // when a user doesn't have 'administer site configuration' permission. See
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/erf/src/RegistrationPermissions.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a standard list of permissions for a given registration type.
    *
-   * @param \Drupal\erf\Entity\RegistrationTypeInterface $registration_type
+   * @param RegistrationTypeInterface $registration_type
    *   The registration type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/erf/src/RegistrationListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf;

+use Drupal\erf\Entity\Registration;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\erf\Entity\Registration $entity */
+    /** @var Registration $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/erf/src/RegistrationHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/erf/src/RegistrationAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf;

+use Drupal\erf\Entity\RegistrationInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity registration session service.
    *
-   * @var \Drupal\erf\EntityRegistrationSession
+   * @var EntityRegistrationSession
    */
   protected $entityRegistrationSession;

@@ @@
   /**
    * RegistrationAccessControlHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\erf\EntityRegistrationSession $entity_registration_session
+   * @param EntityRegistrationSession $entity_registration_session
    *   The entity registration session service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityRegistrationSession $entity_registration_session) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\erf\Entity\RegistrationInterface $entity */
-
+    /** @var RegistrationInterface $entity */
     // Anonymous users are special. Ownership is determined by session.
     if ($account->isAnonymous()) {
       $registration_ids = $this->entityRegistrationSession->getRegistrationIds();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/erf/src/Plugin/views/field/EntityRegistrationSourceEntityLabel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf\Plugin\views\field;

+use Drupal\erf\Entity\RegistrationInterface;
+use Drupal\core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\erf\Entity\RegistrationInterface $registration */
+    /** @var RegistrationInterface $registration */
     $registration = $values->_entity;

-    /** @var \Drupal\core\Entity\ContentEntityInterface $source_entity */
+    /** @var ContentEntityInterface $source_entity */
     $source_entity = $registration->getSourceEntity();

     if (empty($source_entity)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/erf/src/Plugin/Field/FieldFormatter/RegistrationFormFormatter.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The user account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The entity registration session service.
    *
-   * @var \Drupal\erf\EntityRegistrationSession
+   * @var EntityRegistrationSession
    */
   protected $entityRegistrationSession;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $form_builder
+   * @param EntityFormBuilderInterface $form_builder
    *   The entity form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user.
-   * @param \Drupal\erf\EntityRegistrationSession $entity_registration_session
+   * @param EntityRegistrationSession $entity_registration_session
    *   The entity registration session service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityFormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_type_manager, AccountProxy $current_user, EntityRegistrationSession $entity_registration_session) {
@@ @@
   /**
    * Get or create a registration for a given type and source entity.
    *
-   * @param \Drupal\erf\Entity\RegistrationType $registration_type
+   * @param RegistrationType $registration_type
    *   The registration type.
-   * @param \Drupal\core\Entity\ContentEntityInterface $source_entity
+   * @param ContentEntityInterface $source_entity
    *   The source content entity.
    */
   protected function getRegistration(RegistrationType $registration_type, ContentEntityInterface $source_entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/erf/src/ParticipantListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf;

+use Drupal\erf\Entity\Participant;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\erf\Entity\Participant $entity */
+    /** @var Participant $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/erf/src/ParticipantHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/erf/src/ParticipantAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf;

+use Drupal\erf\Entity\Participant;
+use Drupal\erf\Entity\RegistrationInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\erf\Entity\Participant $entity */
-
+    /** @var Participant $entity */
     $registration_permissions = [];

-    /** @var \Drupal\erf\Entity\RegistrationInterface $registration */
+    /** @var RegistrationInterface $registration */
     foreach ($entity->getRegistrations() as $registration) {
       $registration_permissions[] = $registration->access($operation . '_participant', $account, TRUE);
     }
@@ @@
       return AccessResult::allowedIfHasPermission($account, 'administer registrations');
     }

-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = array_shift($registration_permissions);

     // If there are any remaining registration access permissions, combine them
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/erf/src/Form/RegistrationTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\field\FieldStorageConfigStorage;
+use Drupal\field\FieldConfigStorage;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The participant type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $participantTypeStorage;

@@ @@
   /**
    * The field storage config storage.
    *
-   * @var \Drupal\field\FieldStorageConfigStorage
+   * @var FieldStorageConfigStorage
    */
   protected $fieldStorageConfigStorage;

@@ @@
   /**
    * The field config storage.
    *
-   * @var \Drupal\field\FieldConfigStorage
+   * @var FieldConfigStorage
    */
   protected $fieldConfigStorage;

@@ @@
   /**
    * The entity form display storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorage
+   * @var ConfigEntityStorage
    */
   protected $entityFormDisplayStorage;

@@ @@
   /**
    * Creates a new RegistrationTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/erf/src/Form/RegistrationSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/erf/src/Form/ParticipantSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/erf/src/Form/ParticipantForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf\Form;

+use Drupal\erf\Entity\Participant;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\erf\Entity\Participant $entity */
+    /** @var Participant $entity */
     $form = parent::buildForm($form, $form_state);

     $entity = $this->entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/erf/src/EntityRegistrationSession.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
   /**
    * Constructs a new EntityRegistrationSession object.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/erf/src/Entity/RegistrationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf\Entity;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\user\EntityOwnerInterface;
@@ @@
   /**
    * Gets the Source Entity associated with the registration.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity associated with this registration.
    */
   public function getSourceEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/erf/src/Entity/Registration.php:103

    ---------- begin diff ----------
@@ @@
           // If no user, create and save a new one.
           if (!$user_account) {
             $user_account = $this->entityTypeManager()->getStorage('user')->create();
-            $user_account->setPassword(user_password(20));
+            $user_account->setPassword(\Drupal::service('password_generator')->generate(20));
             $user_account->enforceIsNew();
             $user_account->setEmail($participant->mail->value);
             $user_account->setUsername($participant->mail->value);
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/erf/modules/erf_commerce/src/Plugin/Field/FieldWidget/RenderedVariationReferenceWidget.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
    * @param array $third_party_settings
    *   The formatter label display setting.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @param ContainerAwareEventDispatcher $event_dispatcher
    *   The event dispatcher.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityDisplayRepositoryInterface $entity_display_repository, EntityTypeManager $entity_type_manager, ContainerAwareEventDispatcher $event_dispatcher, RequestStack $request_stack) {
@@ @@

     foreach ($targets as $target) {
       $gen_view = $view_builder->view($target, $this->getSetting('variation_view_mode'), $target->language()->getId());
-      $element['#options'][$target->id()] = render($gen_view);
+      $element['#options'][$target->id()] = \Drupal::service('renderer')->render($gen_view);
     }

     return $element;
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/erf/modules/erf_commerce/src/Plugin/EntityReferenceSelection/VariationSelection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\erf_commerce\Plugin\EntityReferenceSelection;

+use Drupal\Core\Entity\Query\Sql\Query;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, CurrentRouteMatch $current_route_match) {
@@ @@
         return $return;
       }

-      /** @var \Drupal\Core\Entity\Query\Sql\Query $query */
+      /** @var Query $query */
       $query = $this->entityTypeManager->getStorage('commerce_product')->getQuery();
       $query->condition('status', 1);
       $group = $query->orConditionGroup();
       $query->condition($group);

-      /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
+      /** @var FieldStorageConfig $field_storage */
       foreach ($reg_type_reference_fields as $field_storage) {
         $group->condition($field_storage->getName(), $registration_type_parameter);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/erf/modules/erf_commerce/src/OrderRegistrationManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/erf/modules/erf_commerce/src/EventSubscriber/OrderCompleteSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/erf/modules/erf_commerce/erf_commerce.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
+use Drupal\erf\Form\RegistrationForm;
 /**
  * @file
  * Contains erf_commerce.module.
@@ @@
  * - Attaching the `product_variations` field for commerce integration.
  */
 function erf_commerce_form_registration_type_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityBundleBase $registration_type */
+  /** @var ConfigEntityBundleBase $registration_type */
   $registration_type = $form_state->getFormObject()->getEntity();

   $form['erf_commerce']['cart_redirect'] = [
@@ @@
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function erf_commerce_form_registration_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\erf\Form\RegistrationForm $form_object */
+  /** @var RegistrationForm $form_object */
   $form_object = $form_state->getFormObject();

-  /** @var \Drupal\erf\Entity\RegistrationInterface $registration_entity */
+  /** @var RegistrationInterface $registration_entity */
   $registration = $form_object->getEntity();

   // Add a submit handler to redirect users to the cart if this registration
@@ @@
  * @see erf_commerce_form_registration_form_alter().
  */
 function erf_commerce_locked_cart_reset($form, FormStateInterface $form_state) {
-  /** @var \Drupal\erf\Entity\RegistrationInterface $registration */
+  /** @var RegistrationInterface $registration */
   $registration = $form_state->getFormObject()->getEntity();

   /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


23) modules/contrib/erf/erf.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains erf.module.
@@ @@
     $form_display = $storage->load('registration.' . $bundle . '.embedded');

     if (!$form_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $form_display = $storage->create([
         'targetEntityType' => 'registration',
         'bundle' => $bundle,
@@ @@
     $form_display = $storage->load('participant.' . $bundle . '.inline');

     if (!$form_display) {
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $form_display = $storage->create([
         'targetEntityType' => 'participant',
         'bundle' => $bundle,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 23 files have been changed by Rector                                      

