modules/contrib/cache_tools/cache_tools.module
modules/contrib/cache_tools/src/CachewiseBlockViewBuilder.php
modules/contrib/cache_tools/src/Plugin/views/cache/SanitizedCacheFieldTag.php
modules/contrib/cache_tools/src/Plugin/views/cache/SanitizedCacheTag.php
modules/contrib/cache_tools/src/Service/CacheInvalidator.php
modules/contrib/cache_tools/src/Service/CacheSanitizer.php

6 files with changes
====================

1) modules/contrib/cache_tools/src/Service/CacheSanitizer.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The cache tag handler.
    *
-   * @var \Drupal\cache_tools\Service\CacheInvalidator
+   * @var CacheInvalidator
    */
   protected $cacheInvalidator;

@@ @@
   /**
    * CacheSanitizer constructor.
    *
-   * @param \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator
+   * @param CacheInvalidator $cache_invalidator
    *   PublishedEntityCacheTag object.
    * @param array $settings
    *   The cache tools settings.
@@ @@
   /**
    * Sanitizes cacheable metadata.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    * @param array $build
    *   Build.
@@ @@
   /**
    * Get published cache tag in format `entitytype_entitybundle_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return string
@@ @@
   /**
    * Get published cache tag in format `entitytype_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity.
    *
    * @return string
@@ @@
    * 3. Published entities going to be deleted or unpublished are invalidated
    *    via entity_type:id (eg node:123).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/cache_tools/src/Service/CacheInvalidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cache_tools\Service;

+use Drupal\Core\Field\EntityReferenceFieldItemList;
 use drunomics\ServiceUtils\Core\Entity\EntityTypeManagerTrait;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
   /**
    * The cache tag invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * CacheSanitizer constructor.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tag invalidator.
    * @param array $settings
    *   The cache settings.
@@ @@
   /**
    * Get published cache tag in format `entitytype_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   Entity.
    *
    * @return string
@@ @@
   /**
    * Get published cache tag in format `entitytype_entitybundle_pub`.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return string
@@ @@
    * 3. Published entities going to be deleted or unpublished are invalidated
    *    via entity_type:id (eg node:123).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return bool
@@ @@
   /**
    * Get field cache tags for configured fields having (modified) values.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   Entity.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity_compare
+   * @param FieldableEntityInterface|null $entity_compare
    *   (optional) An entity to compare field values with. When provided only
    *   non-equal field values will be considered.
    *
@@ @@
           }
           if (!$entity_compare->get($field_name)->isEmpty()) {
             // Add tag for the original field value.
-            /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $field_items */
+            /** @var EntityReferenceFieldItemList $field_items */
             foreach ($entity_compare->get($field_name)->getValue() as $value) {
               $tags = array_merge($tags, $this->generateTagsBasedOnInvalidationStrategy($target_type, $value[$key], $tag_prefix_field, $invalidate_term_parents));
             }
@@ @@
         }
         if (!$entity->get($field_name)->isEmpty()) {
           // Add tag for the new field value.
-          /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $field_items */
+          /** @var EntityReferenceFieldItemList $field_items */
           foreach ($entity->get($field_name)->getValue() as $value) {
             $tags = array_merge($tags, $this->generateTagsBasedOnInvalidationStrategy($target_type, $value[$key], $tag_prefix_field, $invalidate_term_parents));
           }
@@ @@
    * 4. Update and publish: all non-empty field values.
    * 5. Update and unpublish: all non-empty original field values.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/cache_tools/src/Plugin/views/cache/SanitizedCacheTag.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cache_tools\Plugin\views\cache;

+use Drupal\views\Plugin\views\display\DisplayPluginBase;
+use Drupal\views\Plugin\views\HandlerBase;
 use Drupal\cache_tools\Service\CacheSanitizer;
 use Drupal\node\Plugin\views\argument\Type;
 use Drupal\views\Plugin\views\cache\Tag;
@@ @@
   /**
    * Cache sanitizer.
    *
-   * @var \Drupal\cache_tools\Service\CacheSanitizer
+   * @var CacheSanitizer
    */
   protected $cacheSanitizer;

@@ @@
    *
    * TODO: Make this work with custom conditions (e.g. NOT, or grouped one).
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    *
    * @return array
@@ @@
    */
   protected function extractPublishedTagsFromView(ViewExecutable $view) {
     $tags = [];
-    /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase $currentDisplay */
+    /** @var DisplayPluginBase $currentDisplay */
     $currentDisplay = $view->getDisplay();
     $lookupHandlers = [
       'filter' => Bundle::class,
@@ @@
       $handlers = $currentDisplay->getHandlers($handlerName);
       foreach ($handlers as $handler) {
         if ($handler instanceof $handlerClass) {
-          /** @var \Drupal\views\Plugin\views\HandlerBase $handler */
+          /** @var HandlerBase $handler */
           foreach ($handler->value as $bundle) {
             try {
               $entityType = $handler->getEntityType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cache_tools/src/Plugin/views/cache/SanitizedCacheFieldTag.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cache_tools\Plugin\views\cache;

+use Drupal\node\Entity\NodeType;
 use Drupal\cache_tools\Service\CacheSanitizer;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;

@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
     parent::buildOptionsForm($form, $form_state);
     $options = [];

-    /** @var \Drupal\node\Entity\NodeType[] $bundles */
+    /** @var NodeType[] $bundles */
     $bundles = $this->entityTypeManager
       ->getStorage('node_type')
       ->loadMultiple();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cache_tools/src/CachewiseBlockViewBuilder.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The cache sanitizer.
    *
-   * @var \Drupal\cache_tools\Service\CacheSanitizer
+   * @var CacheSanitizer
    */
   protected $cacheSanitizer;

@@ @@
   /**
    * Constructs a new CachewiseBlockViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The module handler.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\cache_tools\Service\CacheSanitizer $cacheSanitizer
+   * @param CacheSanitizer $cacheSanitizer
    *   The cache sanitizer.
    */
-
   public function __construct(EntityTypeInterface $entity_type, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, Registry $theme_registry, EntityDisplayRepositoryInterface $entity_display_repository, CacheSanitizer $cacheSanitizer) {
     parent::__construct($entity_type, $entity_repository, $language_manager, $theme_registry, $entity_display_repository);
     $this->cacheSanitizer = $cacheSanitizer;
@@ @@
   public static function preRender($build) {
     static $cacheSanitizer;
     if (!isset($cacheSanitizer)) {
-      /** @var \Drupal\cache_tools\Service\CacheSanitizer $cacheSanitizer */
+      /** @var CacheSanitizer $cacheSanitizer */
       $cacheSanitizer = \Drupal::service('cache_tools.cache.sanitizer');
     }
     $block = $build['#block'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cache_tools/cache_tools.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Entity\ConfigEntityType;
+use Drupal\cache_tools\Service\CacheInvalidator;
 /**
  * @file
  * Provides various caching enhancements.
@@ @@
  * Implements hook_entity_type_alter().
  */
 function cache_tools_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $block */
+  /** @var ConfigEntityType $block */
   $block = $entity_types['block'];
   $block->setViewBuilderClass('Drupal\cache_tools\CachewiseBlockViewBuilder');
 }
@@ @@
  *   https://www.drupal.org/project/drupal/issues/2551893 .
  */
 function cache_tools_entity_insert(EntityInterface $entity) {
-  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
+  /** @var CacheInvalidator $cache_invalidator */
   $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
   $cache_invalidator->invalidatePublishedEntity($entity);
   $cache_invalidator->invalidatePublishedEntityFields($entity);
@@ @@
  * a field needs to be allowed for invalidation.
  */
 function cache_tools_entity_update(EntityInterface $entity) {
-  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
+  /** @var CacheInvalidator $cache_invalidator */
   $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
   $cache_invalidator->invalidatePublishedEntity($entity);
   $cache_invalidator->invalidatePublishedEntityFields($entity);
@@ @@
  * Note: Deleted entities are invalidated via entity_type:id (eg node:123).
  */
 function cache_tools_entity_delete(EntityInterface $entity) {
-  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
+  /** @var CacheInvalidator $cache_invalidator */
   $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
   $cache_invalidator->invalidatePublishedEntityFields($entity);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

