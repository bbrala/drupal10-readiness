diff --git a/shortcode_basic_tags/src/Plugin/Shortcode/BlockShortcode.php b/shortcode_basic_tags/src/Plugin/Shortcode/BlockShortcode.php
index 4342442..50a3055 100644
--- a/shortcode_basic_tags/src/Plugin/Shortcode/BlockShortcode.php
+++ b/shortcode_basic_tags/src/Plugin/Shortcode/BlockShortcode.php
@@ -23,14 +23,14 @@ class BlockShortcode extends ShortcodeBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -43,9 +43,9 @@ class BlockShortcode extends ShortcodeBase {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
diff --git a/shortcode_basic_tags/src/Plugin/Shortcode/ImageShortcode.php b/shortcode_basic_tags/src/Plugin/Shortcode/ImageShortcode.php
index 7ccff51..24f8d2f 100644
--- a/shortcode_basic_tags/src/Plugin/Shortcode/ImageShortcode.php
+++ b/shortcode_basic_tags/src/Plugin/Shortcode/ImageShortcode.php
@@ -42,7 +42,7 @@ class ImageShortcode extends ShortcodeBase {
           $attributes['src'] = ImageStyle::load($attributes['imagestyle'])->buildUrl($properties['path']);
         }
         else {
-          $attributes['src'] = file_create_url($properties['path']);
+          $attributes['src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($properties['path']);
         }
       }
       if ($properties['alt'] && !$attributes['alt']) {
diff --git a/src/Annotation/Shortcode.php b/src/Annotation/Shortcode.php
index b4b5ea9..0998bb6 100644
--- a/src/Annotation/Shortcode.php
+++ b/src/Annotation/Shortcode.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shortcode\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -51,7 +52,7 @@ class Shortcode extends Plugin {
    *
    * This is used as an administrative summary of what the shortcode does.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    * @ingroup plugin_translatable
    */
   public $title;
@@ -59,7 +60,7 @@ class Shortcode extends Plugin {
   /**
    * Additional administrative information about the shortcode's behavior.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *  (optional)
    * @ingroup plugin_translatable
    */
diff --git a/src/Plugin/Filter/Shortcode.php b/src/Plugin/Filter/Shortcode.php
index ef5bfe2..db56e1a 100644
--- a/src/Plugin/Filter/Shortcode.php
+++ b/src/Plugin/Filter/Shortcode.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\shortcode\Plugin\Filter;
 
+use Drupal\shortcode\ShortcodeService;
+use Drupal\shortcode\Plugin\ShortcodeInterface;
+use Drupal\shortcode\ShortcodePluginManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\filter\FilterProcessResult;
 use Drupal\filter\Plugin\FilterBase;
@@ -24,7 +27,7 @@ class Shortcode extends FilterBase {
    */
   public function settingsForm(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\shortcode\ShortcodeService $shortcodeService */
+    /** @var ShortcodeService $shortcodeService */
     $shortcodeService = \Drupal::service('shortcode');
     $shortcodes = $shortcodeService->loadShortcodePlugins();
 
@@ -55,7 +58,7 @@ class Shortcode extends FilterBase {
         return $b['weight'] - $a['weight'];
       });
 
-      /** @var \Drupal\shortcode\Plugin\ShortcodeInterface $shortcode */
+      /** @var ShortcodeInterface $shortcode */
       foreach ($sorted_shortcodes as $shortcode_id => $shortcode_info) {
         $settings[$shortcode_id] = [
           '#type' => 'checkbox',
@@ -73,7 +76,7 @@ class Shortcode extends FilterBase {
    */
   public function process($text, $langcode) {
     if (!empty($text)) {
-      /** @var \Drupal\shortcode\ShortcodeService $shortcodeEngine */
+      /** @var ShortcodeService $shortcodeEngine */
       $shortcodeEngine = \Drupal::service('shortcode');
       $text = $shortcodeEngine->process($text, $langcode, $this);
     }
@@ -86,19 +89,19 @@ class Shortcode extends FilterBase {
    */
   public function tips($long = FALSE) {
 
-    /** @var \Drupal\shortcode\ShortcodeService $type */
+    /** @var ShortcodeService $type */
     $type = \Drupal::service('shortcode');
 
     // todo: it duplicates the tips section.
     // Get enabled shortcodes for this text format.
     $shortcodes = $type->getShortcodePlugins($this);
-    /** @var \Drupal\shortcode\ShortcodePluginManager $type */
+    /** @var ShortcodePluginManager $type */
     $type = \Drupal::service('plugin.manager.shortcode');
 
     // Gather tips defined in all enabled plugins.
     $tips = [];
     foreach ($shortcodes as $shortcode_info) {
-      /** @var \Drupal\shortcode\Plugin\ShortcodeInterface $shortcode */
+      /** @var ShortcodeInterface $shortcode */
       $shortcode = $type->createInstance($shortcode_info['id']);
       $tips[] = $shortcode->tips($long);
     }
diff --git a/src/Plugin/ShortcodeBase.php b/src/Plugin/ShortcodeBase.php
index 4003836..e299186 100644
--- a/src/Plugin/ShortcodeBase.php
+++ b/src/Plugin/ShortcodeBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shortcode\Plugin;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Render\RendererInterface;
@@ -52,7 +53,7 @@ abstract class ShortcodeBase extends PluginBase implements ShortcodeInterface {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -65,7 +66,7 @@ abstract class ShortcodeBase extends PluginBase implements ShortcodeInterface {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RendererInterface $renderer) {
@@ -301,7 +302,7 @@ abstract class ShortcodeBase extends PluginBase implements ShortcodeInterface {
     $field_media = $this->getMediaField($media_entity);
     if ($field_media) {
       $file = $field_media->entity;
-      return file_create_url($file->getFileUri());
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     }
     return FALSE;
   }
@@ -312,7 +313,7 @@ abstract class ShortcodeBase extends PluginBase implements ShortcodeInterface {
    * Loop through Drupal media file fields, and return a field object if
    * found.
    *
-   * @param \Drupal\media\Entity\Media $entity
+   * @param Media $entity
    *   Drupal media entity.
    *
    * @return mixed|object|bool
@@ -403,7 +404,7 @@ abstract class ShortcodeBase extends PluginBase implements ShortcodeInterface {
    * @param array $elements
    *   The structured array describing the data to be rendered.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|mixed
+   * @return MarkupInterface|mixed
    *   Element stripped of any bubbleable metadata.
    */
   public function render(array &$elements) {
diff --git a/src/Plugin/ShortcodeInterface.php b/src/Plugin/ShortcodeInterface.php
index 5952f70..657d51f 100644
--- a/src/Plugin/ShortcodeInterface.php
+++ b/src/Plugin/ShortcodeInterface.php
@@ -40,7 +40,7 @@ interface ShortcodeInterface extends ConfigurableInterface, DependentPluginInter
    *
    * @param array $form
    *   A minimally pre-populated form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the (entire) configuration form.
    *
    * @return array
diff --git a/src/ShortcodePluginManager.php b/src/ShortcodePluginManager.php
index c9b82be..0cbd151 100644
--- a/src/ShortcodePluginManager.php
+++ b/src/ShortcodePluginManager.php
@@ -21,9 +21,9 @@ class ShortcodePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/ShortcodeService.php b/src/ShortcodeService.php
index 5baba40..ef07b06 100644
--- a/src/ShortcodeService.php
+++ b/src/ShortcodeService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\shortcode;
 
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\shortcode\Plugin\ShortcodeInterface;
 use Drupal\filter\Plugin\FilterInterface;
 use Drupal\Core\Language\Language;
 
@@ -13,14 +15,14 @@ class ShortcodeService {
   /**
    * The devel dumper plugin manager.
    *
-   * @var \Drupal\shortcode\ShortcodePluginManager
+   * @var ShortcodePluginManager
    */
   protected $shortCodePluginManager;
 
   /**
    * Constructs a ShortcodeService object.
    *
-   * @param \Drupal\shortcode\ShortcodePluginManager $shortCodePluginManager
+   * @param ShortcodePluginManager $shortCodePluginManager
    *   The config factory service.
    */
   public function __construct(ShortcodePluginManager $shortCodePluginManager) {
@@ -35,7 +37,7 @@ class ShortcodeService {
    */
   public function loadShortcodePlugins() {
 
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $type */
+    /** @var PluginManagerInterface $type */
     $definitions_raw = $this->shortCodePluginManager->getDefinitions();
 
     $definitions = [];
@@ -84,7 +86,7 @@ class ShortcodeService {
   /**
    * Returns array of shortcode plugin definitions enabled for the filter.
    *
-   * @param \Drupal\filter\Plugin\FilterInterface $filter
+   * @param FilterInterface $filter
    *   The filter. Defaults to NULL, where all shortcode plugins will be
    *   returned.
    * @param bool $reset
@@ -152,7 +154,7 @@ class ShortcodeService {
    * @param string $shortcode_id
    *   The shorShortCodetcode plugin id.
    *
-   * @return \Drupal\shortcode\Plugin\ShortcodeInterface
+   * @return ShortcodeInterface
    *   The plugin instance.
    */
   public function getShortcodePlugin($shortcode_id) {
@@ -215,7 +217,7 @@ class ShortcodeService {
    *   The string containing shortcodes to be processed.
    * @param string $langcode
    *   The language code of the text to be filtered.
-   * @param \Drupal\filter\Plugin\FilterInterface $filter
+   * @param FilterInterface $filter
    *   The text filter.
    *
    * @return string
@@ -360,7 +362,7 @@ class ShortcodeService {
    *   Text to be processed.
    * @param string $langcode
    *   The language code of the text to be filtered.
-   * @param \Drupal\filter\Plugin\FilterInterface $filter
+   * @param FilterInterface $filter
    *   The filter plugin that triggered this process.
    *
    * @return string
diff --git a/tests/src/Functional/ShortcodeTest.php b/tests/src/Functional/ShortcodeTest.php
index 69235d4..e9b9320 100644
--- a/tests/src/Functional/ShortcodeTest.php
+++ b/tests/src/Functional/ShortcodeTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\shortcode\Functional;
 
+use Drupal\shortcode\ShortcodeService;
+use Drupal\Core\GeneratedUrl;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Url;
 
@@ -27,21 +29,21 @@ class ShortcodeTest extends BrowserTestBase {
   /**
    * The shortcode service.
    *
-   * @var \Drupal\shortcode\ShortcodeService
+   * @var ShortcodeService
    */
   private $shortcodeService;
 
   /**
    * Url of the site.
    *
-   * @var \Drupal\Core\GeneratedUrl|string
+   * @var GeneratedUrl|string
    */
   private $siteUrl;
 
   /**
    * Perform any initial set up tasks that run before every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->shortcodeService = $this->container->get('shortcode');
     $this->siteUrl = Url::fromRoute('<front>', [], ["absolute" => TRUE])->toString();
@@ -72,7 +74,7 @@ class ShortcodeTest extends BrowserTestBase {
 
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
-      $this->assertEqual($output, $set['output'], $set['message']);
+      $this->assertEquals($output, $set['output'], $set['message']);
     }
   }
 
@@ -111,7 +113,7 @@ class ShortcodeTest extends BrowserTestBase {
 
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
-      $this->assertEqual($output, $set['output'], $set['message']);
+      $this->assertEquals($output, $set['output'], $set['message']);
     }
   }
 
@@ -135,7 +137,7 @@ class ShortcodeTest extends BrowserTestBase {
 
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
-      $this->assertEqual($output, $set['output'], $set['message']);
+      $this->assertEquals($output, $set['output'], $set['message']);
     }
   }
 
@@ -147,12 +149,12 @@ class ShortcodeTest extends BrowserTestBase {
     $test_input = '[highlight]highlighted text[/highlight]';
     $expected_output = '<span class="highlight">highlighted text</span>';
     $output = $this->shortcodeService->process($test_input);
-    $this->assertEqual($output, $expected_output, 'Highlight shortcode output matches.');
+    $this->assertEquals($output, $expected_output, 'Highlight shortcode output matches.');
 
     $test_input = '[highlight class="custom-class"]highlighted text[/highlight]';
     $expected_output = '<span class="custom-class highlight">highlighted text</span>';
     $output = $this->shortcodeService->process($test_input);
-    $this->assertEqual($output, $expected_output, 'Highlight shortcode with custom class output matches.');
+    $this->assertEquals($output, $expected_output, 'Highlight shortcode with custom class output matches.');
   }
 
   /**
@@ -175,7 +177,7 @@ class ShortcodeTest extends BrowserTestBase {
 
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
-      $this->assertEqual($output, $set['output'], $set['message']);
+      $this->assertEquals($output, $set['output'], $set['message']);
     }
   }
 
@@ -209,7 +211,7 @@ class ShortcodeTest extends BrowserTestBase {
 
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
-      $this->assertEqual($output, $set['output'], $set['message']);
+      $this->assertEquals($output, $set['output'], $set['message']);
     }
   }
 
@@ -243,7 +245,7 @@ class ShortcodeTest extends BrowserTestBase {
 
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
-      $this->assertEqual($output, $set['output'], $set['message']);
+      $this->assertEquals($output, $set['output'], $set['message']);
     }
   }
 
@@ -273,7 +275,7 @@ class ShortcodeTest extends BrowserTestBase {
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
       $output = preg_replace('/\s+/', ' ', $output);
-      $this->assertEqual($output, $set['output'], $set['message']);
+      $this->assertEquals($output, $set['output'], $set['message']);
     }
   }
 
@@ -302,7 +304,7 @@ class ShortcodeTest extends BrowserTestBase {
 
     foreach ($sets as $set) {
       $output = $this->shortcodeService->process($set['input']);
-      $this->assertEqual(strlen($output), $set['output'], $set['message']);
+      $this->assertEquals(strlen($output), $set['output'], $set['message']);
     }
   }
 
