modules/contrib/build_hooks/build_hooks.install
modules/contrib/build_hooks/build_hooks.module
modules/contrib/build_hooks/build_hooks.post_update.php
modules/contrib/build_hooks/modules/build_hooks_bitbucket/src/BitbucketManager.php
modules/contrib/build_hooks/modules/build_hooks_bitbucket/src/Form/SettingsForm.php
modules/contrib/build_hooks/modules/build_hooks_bitbucket/src/Plugin/FrontendEnvironment/BitbucketFrontendEnvironment.php
modules/contrib/build_hooks/modules/build_hooks_bitbucket/tests/src/Functional/BitbucketFormTest.php
modules/contrib/build_hooks/modules/build_hooks_bitbucket/tests/src/Kernel/BitbucketBuildHooksTest.php
modules/contrib/build_hooks/modules/build_hooks_bitbucket/tests/src/Unit/BitbucketManagerTest.php
modules/contrib/build_hooks/modules/build_hooks_circleci/build_hooks_circleci.install
modules/contrib/build_hooks/modules/build_hooks_circleci/src/CircleCiManager.php
modules/contrib/build_hooks/modules/build_hooks_circleci/src/CircleCiManagerInterface.php
modules/contrib/build_hooks/modules/build_hooks_circleci/src/Form/BuildHooksCircleCiConfigForm.php
modules/contrib/build_hooks/modules/build_hooks_circleci/src/Plugin/FrontendEnvironment/CircleCiFrontendEnvironment.php
modules/contrib/build_hooks/modules/build_hooks_circleci/src/Plugin/FrontendEnvironment/CircleV2.php
modules/contrib/build_hooks/modules/build_hooks_circleci/tests/src/Functional/CircleCiUpdateTest.php
modules/contrib/build_hooks/modules/build_hooks_circleci/tests/src/Functional/CircleV2FormTest.php
modules/contrib/build_hooks/modules/build_hooks_circleci/tests/src/Kernel/CircleBuildHookTest.php
modules/contrib/build_hooks/modules/build_hooks_github/src/Form/BuildHooksGithubConfigForm.php
modules/contrib/build_hooks/modules/build_hooks_github/src/Plugin/FrontendEnvironment/GithubFrontendEnvironment.php
modules/contrib/build_hooks/modules/build_hooks_github/tests/src/Functional/GithubFormTest.php
modules/contrib/build_hooks/modules/build_hooks_github/tests/src/Kernel/GithubBuildHooksTest.php
modules/contrib/build_hooks/modules/build_hooks_netlify/build_hooks_netlify.install
modules/contrib/build_hooks/modules/build_hooks_netlify/src/Form/BuildHooksNetlifyConfigForm.php
modules/contrib/build_hooks/modules/build_hooks_netlify/src/NetlifyManager.php
modules/contrib/build_hooks/modules/build_hooks_netlify/src/NetlifyManagerInterface.php
modules/contrib/build_hooks/modules/build_hooks_netlify/src/Plugin/FrontendEnvironment/NetlifyFrontendEnvironment.php
modules/contrib/build_hooks/modules/build_hooks_netlify/tests/src/Functional/NetlifyUpdateTest.php
modules/contrib/build_hooks/modules/build_hooks_netlify/tests/src/Kernel/NetlifyBuildHooksTest.php
modules/contrib/build_hooks/src/Annotation/FrontendEnvironment.php
modules/contrib/build_hooks/src/BuildHookDetails.php
modules/contrib/build_hooks/src/Controller/FrontendEnvironmentAddController.php
modules/contrib/build_hooks/src/Controller/FrontendEnvironmentLibraryController.php
modules/contrib/build_hooks/src/Controller/FrontendEnvironmentTitleController.php
modules/contrib/build_hooks/src/DeployLogger.php
modules/contrib/build_hooks/src/DeploymentListBuilder.php
modules/contrib/build_hooks/src/DeploymentStorageHandler.php
modules/contrib/build_hooks/src/DeploymentStorageHandlerInterface.php
modules/contrib/build_hooks/src/DeploymentViewsData.php
modules/contrib/build_hooks/src/Entity/Deployment.php
modules/contrib/build_hooks/src/Entity/DeploymentInterface.php
modules/contrib/build_hooks/src/Entity/FrontendEnvironment.php
modules/contrib/build_hooks/src/Entity/FrontendEnvironmentInterface.php
modules/contrib/build_hooks/src/Event/BuildTrigger.php
modules/contrib/build_hooks/src/Event/ResponseEvent.php
modules/contrib/build_hooks/src/Form/DeploymentForm.php
modules/contrib/build_hooks/src/Form/FrontendEnvironmentDeleteForm.php
modules/contrib/build_hooks/src/Form/FrontendEnvironmentForm.php
modules/contrib/build_hooks/src/Form/SettingsForm.php
modules/contrib/build_hooks/src/FrontendEnvironmentListBuilder.php
modules/contrib/build_hooks/src/FrontendEnvironmentPluginCollection.php
modules/contrib/build_hooks/src/Plugin/FrontendEnvironment/GenericFrontendEnvironment.php
modules/contrib/build_hooks/src/Plugin/FrontendEnvironmentBase.php
modules/contrib/build_hooks/src/Plugin/FrontendEnvironmentInterface.php
modules/contrib/build_hooks/src/Plugin/FrontendEnvironmentManager.php
modules/contrib/build_hooks/src/Plugin/Validation/Constraint/BuildHooksDeployment.php
modules/contrib/build_hooks/src/Plugin/Validation/Constraint/BuildHooksDeploymentValidator.php
modules/contrib/build_hooks/src/Trigger.php
modules/contrib/build_hooks/src/TriggerInterface.php
modules/contrib/build_hooks/tests/modules/build_hooks_test/src/EventSubscriber.php
modules/contrib/build_hooks/tests/modules/build_hooks_test/src/Plugin/FrontendEnvironment/TestEnvironment.php
modules/contrib/build_hooks/tests/src/Functional/DeploymentUpdateTest.php
modules/contrib/build_hooks/tests/src/Functional/UiTest.php
modules/contrib/build_hooks/tests/src/Kernel/BuildHooksConfigEntityTest.php
modules/contrib/build_hooks/tests/src/Kernel/BuildHooksKernelTestBase.php
modules/contrib/build_hooks/tests/src/Kernel/BuildTriggerTest.php
modules/contrib/build_hooks/tests/src/Kernel/DeployLogDeprecatedTest.php
modules/contrib/build_hooks/tests/src/Kernel/DeploymentStorageHandlerTest.php
modules/contrib/build_hooks/tests/src/Kernel/DeploymentValidationTest.php
modules/contrib/build_hooks/tests/src/Traits/EnvironmentTestTrait.php
modules/contrib/build_hooks/tests/src/Unit/BuildHookDetailsDeprecatedTest.php

49 files with changes
=====================

1) modules/contrib/build_hooks/tests/src/Unit/BuildHookDetailsDeprecatedTest.php:17

    ---------- begin diff ----------
@@ @@
    *
    * @expectedDeprecation Drupal\build_hooks\BuildHookDetails::getBody is deprecated in build_hooks:8.x-2.4 and is removed from build_hooks:8.x-3.0. Instead, you should use Drupal\build_hooks\BuildHookDetails::getOptions. See https://www.drupal.org/node/3173753
    * @expectedDeprecation Drupal\build_hooks\BuildHookDetails::setBody is deprecated in build_hooks:8.x-2.4 and is removed from build_hooks:8.x-3.0. Instead, you should use Drupal\build_hooks\BuildHookDetails::setOptions. See https://www.drupal.org/node/3173753
+   * @doesNotPerformAssertions
    */
   public function testDeprecatedMethods() {
     $details = new BuildHookDetails();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/build_hooks/tests/src/Traits/EnvironmentTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks\Traits;

+use Drupal\build_hooks\Entity\FrontendEnvironmentInterface;
 use Drupal\build_hooks\Entity\FrontendEnvironment;
 use Drupal\build_hooks\Trigger;

@@ @@
   /**
    * Test environment.
    *
-   * @var \Drupal\build_hooks\Entity\FrontendEnvironmentInterface
+   * @var FrontendEnvironmentInterface
    */
   protected $environment;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/build_hooks/tests/src/Kernel/DeploymentValidationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks\Kernel;

+use Drupal\Core\Entity\EntityConstraintViolationList;
 use Drupal\build_hooks\Entity\Deployment;
 use Drupal\Tests\build_hooks\Traits\EnvironmentTestTrait;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->createTestEnvironment();
   }
@@ @@
    */
   public function testValidation() {
     \Drupal::entityTypeManager()->getStorage('build_hooks_deployment')->getOrCreateNextDeploymentForEnvironment($this->environment);
-    /** @var \Drupal\build_hooks\Entity\Deployment $another */
+    /** @var Deployment $another */
     $another = Deployment::create([
       'label' => $this->randomMachineName(),
       'environment' => ['target_id' => $this->environment->id()],
       'status' => 0,
     ]);
-    /** @var \Drupal\Core\Entity\EntityConstraintViolationList $errors */
+    /** @var EntityConstraintViolationList $errors */
     $errors = $another->validate();
     $this->assertCount(1, $errors);
-    $this->assertRegExp('/There is already an active deployment for this environment/', (string) $errors[0]->getMessage());
+    $this->assertMatchesRegularExpression('/There is already an active deployment for this environment/', (string) $errors[0]->getMessage());
     $this->assertEquals('status', $errors[0]->getPropertyPath());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/build_hooks/tests/src/Kernel/DeploymentStorageHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\build_hooks\DeploymentStorageHandlerInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\Tests\build_hooks\Traits\EnvironmentTestTrait;
@@ @@
  */
 class DeploymentStorageHandlerTest extends BuildHooksKernelTestBase {

+  use ProphecyTrait;
   use EnvironmentTestTrait;

   const MOCK_TIME = 1600745446;
@@ @@
   /**
    * Deployment storage.
    *
-   * @var \Drupal\build_hooks\DeploymentStorageHandlerInterface
+   * @var DeploymentStorageHandlerInterface
    */
   protected $storage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->createTestEnvironment();
     $time = $this->prophesize(TimeInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/build_hooks/tests/src/Kernel/DeployLogDeprecatedTest.php:13

    ---------- begin diff ----------
@@ @@
    * Tests removed method.
    *
    * @expectedDeprecation Drupal\build_hooks\DeployLogger::getLogItemsSinceTimestamp is deprecated in build_hooks:8.x-2.4 and is removed from build_hooks:8.x-3.0. There is no replacement, instead work with the deployment content entity. See https://www.drupal.org/node/3172327
+   * @doesNotPerformAssertions
    */
   public function testDeprecatedMethod() {
     $logger = \Drupal::service('build_hooks.deploylogger');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/build_hooks/tests/src/Kernel/BuildHooksKernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks\Kernel;

+use GuzzleHttp\ClientInterface;
+use Drupal\build_hooks\DeployLogger;
 use Drupal\build_hooks\Entity\FrontendEnvironment;
 use Drupal\build_hooks\TriggerInterface;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * History of requests.
    *
-   * @var \GuzzleHttp\Psr7\Request[]
+   * @var Request[]
    */
   protected $history = [];

@@ @@
   /**
    * Mock client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $mockClient;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('build_hooks');
     $this->installConfig('system');
@@ @@
    *   Expected URL.
    * @param array $settings
    *   Plugin settings.
-   * @param \GuzzleHttp\Psr7\Response $mockResponse
+   * @param Response $mockResponse
    *   Response object to be returned by the mocked http-client.
    * @param string|null $entity_label
    *   Entity label to use.
    *
-   * @return \GuzzleHttp\Psr7\Request|null
+   * @return Request|null
    *   Build hook request.
    */
   protected function assertFrontendEnvironmentBuildHook(
@@ @@
       'name' => $entity_label ?: $this->randomMachineName(),
     ]);
     $entity->save();
-    /** @var \Drupal\build_hooks\DeployLogger $logger */
+    /** @var DeployLogger $logger */
     $logger = \Drupal::service('build_hooks.deploylogger');
     // The entity-save strategy will never have queued items.
     $this->assertEquals($deployment_strategy === TriggerInterface::DEPLOYMENT_STRATEGY_ENTITYSAVE && $expected_url ? 0 : 1, $logger->getNumberOfItemsSinceLastDeploymentForEnvironment($environment));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/build_hooks/tests/src/Functional/UiTest.php:145

    ---------- begin diff ----------
@@ @@
    */
   private function assertAddEnvironmentForPluginFunctionality() {
     $assert = $this->assertSession();
-    $query = $assert->buildXPathQuery('//a[contains(@href, :href)]', [
+    $query = $this->assertSession()->buildXPathQuery('//a[contains(@href, :href)]', [
       ':href' => Url::fromRoute('build_hooks.admin_add', [
         'plugin_id' => 'build_hooks_test',
       ])->toString(),
@@ @@
   /**
    * Asserts admin can create new environment.
    *
-   * @return \Drupal\build_hooks\Entity\FrontendEnvironmentInterface
+   * @return FrontendEnvironmentInterface
    *   Created entity.
    */
   private function assertThatAdminCanAddFrontEndEnvironment() : FrontendEnvironmentInterface {
@@ @@
   /**
    * Tests editing an environment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    *
-   * @return \Drupal\build_hooks\Entity\FrontendEnvironmentInterface
+   * @return FrontendEnvironmentInterface
    *   Edited entity.
    */
   private function assertThatAdminCanEditFrontEndEnvironment(FrontendEnvironmentInterface $environment) : FrontendEnvironmentInterface {
@@ @@
   /**
    * Tests deployment form functionality.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    */
   private function assertFrontEndEnvironmentDeploymentFormFunctionality(FrontendEnvironmentInterface $environment) {
@@ @@
   /**
    * Tests admin can delete environments.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    */
   private function assertThatAdminCanDeleteFrontEndEnvironment(FrontendEnvironmentInterface $environment) {
@@ @@
   /**
    * Tests toolbar integration.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    * @param int $expected_count
    *   Expected count.
@@ @@
   }

   /**
-  * Tests inactive environment toolbar integration.
-  *
-  * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
-  *   Environment.
-  */
+   * Tests inactive environment toolbar integration.
+   *
+   * @param FrontendEnvironmentInterface $environment
+   *   Environment.
+   */
   private function assertInactiveEnvironmentToolbarIntegration(FrontendEnvironmentInterface $environment) {
     $environment->set('status', TRUE);
     $environment->save();
    ----------- end diff -----------

Applied rules:
 * BuildXPathQueryRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/build_hooks/tests/modules/build_hooks_test/src/EventSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Reacts to build trigger event.
    *
-   * @param \Drupal\build_hooks\Event\BuildTrigger $trigger
+   * @param BuildTrigger $trigger
    *   Trigger.
    */
   public function onBuildTrigger(BuildTrigger $trigger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/build_hooks/src/TriggerInterface.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Triggers a build hook for an environment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $frontend_environment
+   * @param FrontendEnvironmentInterface $frontend_environment
    *   The Environment to trigger the deployment for.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/build_hooks/src/Trigger.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The config.factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The http_client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The current_user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The string_translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $stringTranslation;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The logger.factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * The deploy logger service.
    *
-   * @var \Drupal\build_hooks\DeployLogger
+   * @var DeployLogger
    */
   protected $deployLogger;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The cache tag invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagInvalidator;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    */
   private function deployEnvironmentsByDeploymentStrategy(string $strategy) {
     try {
-      /** @var \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment */
+      /** @var FrontendEnvironmentInterface $environment */
       $environments = $this->entityTypeManager->getStorage('frontend_environment')
         ->loadByProperties(['deployment_strategy' => $strategy]);
       foreach ($environments as $environment) {
@@ @@
   /**
    * Trigger a deployment for a frontend environment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $frontendEnvironment
+   * @param FrontendEnvironmentInterface $frontendEnvironment
    *   The frontend environment entity to trigger the deployment for.
    */
   public function triggerBuildHookForEnvironment(FrontendEnvironmentInterface $frontendEnvironment) {
@@ @@
   /**
    * Triggers a build hook by the details.
    *
-   * @param \Drupal\build_hooks\BuildHookDetails $buildHookDetails
+   * @param BuildHookDetails $buildHookDetails
    *   An object that holds the information about the call.
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $frontendEnvironment
+   * @param FrontendEnvironmentInterface $frontendEnvironment
    *   The plugin which performs the trigger.
    *
-   * @return \Drupal\build_hooks\Event\BuildTrigger
+   * @return BuildTrigger
    *   Trigger event.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   private function triggerBuildHook(BuildHookDetails $buildHookDetails, FrontendEnvironmentInterface $frontendEnvironment) {
-    /** @var \Drupal\build_hooks\DeploymentStorageHandlerInterface $deployment_storage */
+    /** @var DeploymentStorageHandlerInterface $deployment_storage */
     $deployment_storage = $this->entityTypeManager->getStorage('build_hooks_deployment');
     $deployment = $deployment_storage->getOrCreateNextDeploymentForEnvironment($frontendEnvironment);
     $triggerEvent = new BuildTrigger($buildHookDetails, $frontendEnvironment, $deployment);
     $frontendEnvironment->getPlugin()->preDeploymentTrigger($triggerEvent);
-    $this->eventDispatcher->dispatch(BuildTrigger::class, $triggerEvent);
+    $this->eventDispatcher->dispatch($triggerEvent);
     if (!$triggerEvent->shouldBuild()) {
       return $triggerEvent;
     }
@@ @@
       $buildHookDetails->getOptions()
     );
     $event = new ResponseEvent($response, $frontendEnvironment->getPlugin());
-    $this->eventDispatcher->dispatch(ResponseEvent::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, ResponseEvent::EVENT_NAME);
     return $triggerEvent->setResponse($response);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/build_hooks/src/Plugin/Validation/Constraint/BuildHooksDeploymentValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Plugin\Validation\Constraint;

+use Drupal\build_hooks\Entity\DeploymentInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Creates a new BuildHooksEnvironmentConstraintValidator instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function validate($entity, Constraint $constraint) {
-    /** @var \Drupal\build_hooks\Entity\DeploymentInterface $entity */
+    /** @var DeploymentInterface $entity */
     $deployment_storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());

     if ($entity->isDeployed()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/build_hooks/src/Plugin/FrontendEnvironmentManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/build_hooks/src/Plugin/FrontendEnvironmentInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Plugin;

+use Drupal\build_hooks\BuildHookDetails;
 use Drupal\build_hooks\Event\BuildTrigger;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Get the info to trigger the hook based on the configuration of the plugin.
    *
-   * @return \Drupal\build_hooks\BuildHookDetails
+   * @return BuildHookDetails
    *   An object containing the details to trigger the hook.
    */
   public function getBuildHookDetails();
@@ @@
   /**
    * Allows the plugin to add elements to the deployment form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
   /**
    * Determine if the deployment was triggered successfully.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response for the trigger request.
    *
    * @return bool
@@ @@
   /**
    * React before a build is triggered.
    *
-   * @param \Drupal\build_hooks\Event\BuildTrigger $trigger
+   * @param BuildTrigger $trigger
    *   The build trigger.
    */
   public function preDeploymentTrigger(BuildTrigger $trigger) : void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/build_hooks/src/Plugin/FrontendEnvironmentBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
   /**
    * Wraps the transliteration service.
    *
-   * @return \Drupal\Component\Transliteration\TransliterationInterface
+   * @return TransliterationInterface
    *   The transliteration service.
    */
   protected function transliteration() {
@@ @@
   /**
    * Sets the transliteration service.
    *
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
    */
   public function setTransliteration(TransliterationInterface $transliteration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/build_hooks/src/FrontendEnvironmentPluginCollection.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new BlockPluginCollection.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/build_hooks/src/FrontendEnvironmentListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks;

+use Drupal\build_hooks\Entity\FrontendEnvironment;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\build_hooks\Entity\FrontendEnvironment $entity */
+    /** @var FrontendEnvironment $entity */
     $row['label'] = $entity->label();
     $row['plugin'] = $entity->getPlugin()->getPluginDefinition()['label'];
     $row['id'] = $entity->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/build_hooks/src/Form/SettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/build_hooks/src/Form/FrontendEnvironmentForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

@@ @@
   /**
    * FrontendEnvironmentForm constructor.
    *
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
    */
   public function __construct(PluginFormFactoryInterface $plugin_form_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/build_hooks/src/Form/DeploymentForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Form;

+use Drupal\build_hooks\Plugin\FrontendEnvironmentBase;
+use Drupal\build_hooks\DeploymentStorageHandlerInterface;
 use Drupal\build_hooks\DeployLogger;
 use Drupal\build_hooks\Entity\FrontendEnvironment;
 use Drupal\build_hooks\Entity\FrontendEnvironmentInterface;
@@ @@
   /**
    * Drupal\build_hooks\TriggerInterface definition.
    *
-   * @var \Drupal\build_hooks\TriggerInterface
+   * @var TriggerInterface
    */
   protected $buildHooksTrigger;

@@ @@
   /**
    * Drupal\build_hooks\DeployLogger definition.
    *
-   * @var \Drupal\build_hooks\DeployLogger
+   * @var DeployLogger
    */
   protected $buildHooksDeploylogger;

@@ @@
   /**
    * Drupal\Core\Render\Renderer definition.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Drupal\Core\Datetime\DateFormatter definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Create.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    *
    * @return \Drupal\build_hooks\Form\DeploymentForm
@@ @@
     ];

     // Plugins have a possibility to return additional elements for this form:
-    /** @var \Drupal\build_hooks\Plugin\FrontendEnvironmentBase $plugin */
+    /** @var FrontendEnvironmentBase $plugin */
     $plugin = $frontend_environment->getPlugin();
     $additionalFormElements = $plugin->getAdditionalDeployFormElements($form_state);

@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     // Get the environment entity:
-    /** @var \Drupal\build_hooks\Entity\FrontendEnvironment $frontend_environment */
+    /** @var FrontendEnvironment $frontend_environment */
     $frontend_environment = $form_state->getValue('frontend_environment');
     $this->buildHooksTrigger->triggerBuildHookForEnvironment($frontend_environment);
   }
@@ @@
   /**
    * Use the included view to render the changelog.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    *
    * @return array
@@ @@
    *   Render array.
    */
   private function getChangelogView(FrontendEnvironmentInterface $environment) {
-    /** @var \Drupal\build_hooks\DeploymentStorageHandlerInterface $deployment_storage */
+    /** @var DeploymentStorageHandlerInterface $deployment_storage */
     $deployment_storage = $this->entityTypeManager->getStorage('build_hooks_deployment');
     $deployment = $deployment_storage->getOrCreateNextDeploymentForEnvironment($environment);
     return $this->entityTypeManager->getViewBuilder('build_hooks_deployment')->view($deployment);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/build_hooks/src/Event/ResponseEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Psr\Http\Message\ResponseInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\build_hooks\Plugin\FrontendEnvironmentInterface;

 /**
@@ @@
   /**
    * The http client response.
    *
-   * @var \Psr\Http\Message\ResponseInterface
+   * @var ResponseInterface
    */
   protected $response;

@@ @@
   /**
    * The build hook plugin.
    *
-   * @var \Drupal\build_hooks\Plugin\FrontendEnvironmentInterface
+   * @var FrontendEnvironmentInterface
    */
   protected $plugin;

@@ @@
   /**
    * Set the response.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response.
    */
   public function setResponse(ResponseInterface $response) {
@@ @@
   /**
    * Get the response.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The http client $response.
    */
   public function getResponse() {
@@ @@
   /**
    * Set the plugin.
    *
-   * @param \Drupal\build_hooks\Plugin\FrontendEnvironmentInterface $plugin
+   * @param FrontendEnvironmentInterface $plugin
    *   The build hook plugin.
    */
   public function setPlugin(FrontendEnvironmentInterface $plugin) {
@@ @@
   /**
    * Get the plugin.
    *
-   * @return \Drupal\build_hooks\Plugin\FrontendEnvironmentInterface
+   * @return FrontendEnvironmentInterface
    *   The build hook plugin.
    */
   public function getPlugin() {
@@ @@
   /**
    * ResponseEvent constructor.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   The http client $response.
-   * @param \Drupal\build_hooks\Plugin\FrontendEnvironmentInterface $plugin
+   * @param FrontendEnvironmentInterface $plugin
    *   The build hook plugin.
    */
   public function __construct(ResponseInterface $response, FrontendEnvironmentInterface $plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/build_hooks/src/Event/BuildTrigger.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\build_hooks\BuildHookDetails;
 use Drupal\build_hooks\Entity\DeploymentInterface;
 use Drupal\build_hooks\Entity\FrontendEnvironmentInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Psr\Http\Message\ResponseInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines a class for triggering a build.
@@ @@
   /**
    * Build hook details.
    *
-   * @var \Drupal\build_hooks\BuildHookDetails
+   * @var BuildHookDetails
    */
   protected $buildHookDetails;

@@ @@
   /**
    * Front-end environment.
    *
-   * @var \Drupal\build_hooks\Entity\FrontendEnvironmentInterface
+   * @var FrontendEnvironmentInterface
    */
   protected $frontendEnvironment;

@@ @@
   /**
    * Reason not to build.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $reason;

@@ @@
   /**
    * Response.
    *
-   * @var \Psr\Http\Message\ResponseInterface
+   * @var ResponseInterface
    */
   protected $response;

@@ @@
   /**
    * Current deployment.
    *
-   * @var \Drupal\build_hooks\Entity\DeploymentInterface
+   * @var DeploymentInterface
    */
   protected $deployment;

@@ @@
   /**
    * Constructs a new BuildTriggerEvent.
    *
-   * @param \Drupal\build_hooks\BuildHookDetails $buildHookDetails
+   * @param BuildHookDetails $buildHookDetails
    *   Build hook details.
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $frontendEnvironment
+   * @param FrontendEnvironmentInterface $frontendEnvironment
    *   Front-end environment.
-   * @param \Drupal\build_hooks\Entity\DeploymentInterface $deployment
+   * @param DeploymentInterface $deployment
    *   Deployment.
    */
   public function __construct(BuildHookDetails $buildHookDetails, FrontendEnvironmentInterface $frontendEnvironment, DeploymentInterface $deployment) {
@@ @@
   /**
    * Sets should not build.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup $reason
+   * @param TranslatableMarkup $reason
    *   The reason not to build.
    *
    * @return $this
@@ @@
   /**
    * Gets value of reason not to build.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Reason not to build.
    */
   public function getReason(): TranslatableMarkup {
@@ @@
   /**
    * Sets response.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response.
    */
   public function setResponse(ResponseInterface $response): BuildTrigger {
@@ @@
   /**
    * Gets build hook details.
    *
-   * @return \Drupal\build_hooks\BuildHookDetails
+   * @return BuildHookDetails
    *   Build hook details.
    */
   public function getBuildHookDetails(): BuildHookDetails {
@@ @@
   /**
    * Gets front-end environment.
    *
-   * @return \Drupal\build_hooks\Entity\FrontendEnvironmentInterface
+   * @return FrontendEnvironmentInterface
    *   Front-end environment.
    */
   public function getFrontendEnvironment(): FrontendEnvironmentInterface {
@@ @@
   /**
    * Gets value of Response.
    *
-   * @return \Psr\Http\Message\ResponseInterface|null
+   * @return ResponseInterface|null
    *   Value of Response.
    */
   public function getResponse(): ?ResponseInterface {
@@ @@
   /**
    * Gets current deployment.
    *
-   * @return \Drupal\build_hooks\Entity\DeploymentInterface
+   * @return DeploymentInterface
    *   Current deployment.
    */
   public function getDeployment(): DeploymentInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/build_hooks/src/Entity/FrontendEnvironment.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Entity;

+use Drupal\block\BlockPluginCollection;
+use Drupal\Component\Plugin\LazyPluginCollection;
 use Drupal\build_hooks\FrontendEnvironmentPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ @@
   /**
    * The plugin collection that holds the block plugin for this entity.
    *
-   * @var \Drupal\block\BlockPluginCollection
+   * @var BlockPluginCollection
    */
   protected $pluginCollection;

@@ @@
   /**
    * Encapsulates creation of the frontend environment's LazyPluginCollection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The frontend environment's plugin collection.
    */
   protected function getPluginCollection() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/build_hooks/src/DeploymentStorageHandlerInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the next deployment for an environment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    *
-   * @return \Drupal\build_hooks\Entity\DeploymentInterface
+   * @return DeploymentInterface
    *   Next deployment.
    */
   public function getOrCreateNextDeploymentForEnvironment(FrontendEnvironmentInterface $environment) : DeploymentInterface;
@@ @@
   /**
    * Gets the last deployment for an environment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    *
-   * @return \Drupal\build_hooks\Entity\DeploymentInterface|null
+   * @return DeploymentInterface|null
    *   Last deployment if it exists.
    */
   public function getLastDeploymentForEnvironment(FrontendEnvironmentInterface $environment) : ?DeploymentInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/build_hooks/src/DeploymentStorageHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks;

+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\build_hooks\Entity\DeploymentInterface;
 use Drupal\build_hooks\Entity\FrontendEnvironmentInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Gets the label for the next deployment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   Environment.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/build_hooks/src/DeploymentListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks;

+use Drupal\build_hooks\Entity\DeploymentInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\build_hooks\Entity\DeploymentInterface $entity */
+    /** @var DeploymentInterface $entity */
     return [
       'label' => $entity->label(),
       'environment' => $entity->bundle(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/build_hooks/src/DeployLogger.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The config.factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new DeployLogger object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time.
    */
   public function __construct(ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager, TimeInterface $time) {
@@ @@
   /**
    * Determines if we should log activity related to the passed entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ @@
   /**
    * Logs the creation of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    */
   public function logEntityCreated(ContentEntityInterface $entity) {
-    /** @var \Drupal\build_hooks\DeploymentStorageHandlerInterface $deployment_storage */
+    /** @var DeploymentStorageHandlerInterface $deployment_storage */
     $deployment_storage = $this->entityTypeManager->getStorage('build_hooks_deployment');
     foreach ($this->entityTypeManager->getStorage('frontend_environment')->loadMultiple() as $environment) {
       $deployment = $deployment_storage->getOrCreateNextDeploymentForEnvironment($environment);
@@ @@
   /**
    * Logs the updating of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    */
   public function logEntityUpdated(ContentEntityInterface $entity) {
@@ @@
   /**
    * Logs the deleting of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    */
   public function logEntityDeleted(ContentEntityInterface $entity) {
-    /** @var \Drupal\build_hooks\DeploymentStorageHandlerInterface $deployment_storage */
+    /** @var DeploymentStorageHandlerInterface $deployment_storage */
     $deployment_storage = $this->entityTypeManager->getStorage('build_hooks_deployment');
     foreach ($this->entityTypeManager->getStorage('frontend_environment')->loadMultiple() as $environment) {
       $deployment = $deployment_storage->getOrCreateNextDeploymentForEnvironment($environment);
@@ @@
   /**
    * Get the last deployed time for an environment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment
+   * @param FrontendEnvironmentInterface $environment
    *   The frontend environment config entity.
    * @param int|null $timestamp
    *   Timestamp.
    */
   public function setLastDeployTimeForEnvironment(FrontendEnvironmentInterface $environment, int $timestamp = NULL) {
-    /** @var \Drupal\build_hooks\DeploymentStorageHandlerInterface $deployment_storage */
+    /** @var DeploymentStorageHandlerInterface $deployment_storage */
     $deployment_storage = $this->entityTypeManager->getStorage('build_hooks_deployment');
     $deployment = $deployment_storage->getOrCreateNextDeploymentForEnvironment($environment);
     $deployment->deployed = $timestamp ?: $this->time->getCurrentTime();
@@ @@
   /**
    * Get the last deployed time for an environment.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironment $environment
+   * @param FrontendEnvironment $environment
    *   The frontend environment config entity.
    *
    * @return int
@@ @@
    *   The timestamp of the latest deployment for the environment.
    */
   public function getLastDeployTimeForEnvironment(FrontendEnvironment $environment) {
-    /** @var \Drupal\build_hooks\DeploymentStorageHandlerInterface $deployment_storage */
+    /** @var DeploymentStorageHandlerInterface $deployment_storage */
     $deployment_storage = $this->entityTypeManager->getStorage('build_hooks_deployment');
     if ($last = $deployment_storage->getLastDeploymentForEnvironment($environment)) {
       return $last->deployed->value;
@@ @@
   /**
    * Gets how many changes have happened since the last deployment for an env.
    *
-   * @param \Drupal\build_hooks\Entity\FrontendEnvironment $environment
+   * @param FrontendEnvironment $environment
    *   The frontend environment config entity.
    *
    * @return int
@@ @@
    *   The amount of changes for the environment since last deployment.
    */
   public function getNumberOfItemsSinceLastDeploymentForEnvironment(FrontendEnvironment $environment) {
-    /** @var \Drupal\build_hooks\DeploymentStorageHandlerInterface $deployment_storage */
+    /** @var DeploymentStorageHandlerInterface $deployment_storage */
     $deployment_storage = $this->entityTypeManager->getStorage('build_hooks_deployment');
     $next = $deployment_storage->getOrCreateNextDeploymentForEnvironment($environment);
     return count(array_filter(iterator_to_array($next->get('contents')), function (DynamicEntityReferenceItem $item) {
@@ @@
   /**
    * Checks if an entity is already part of a deployment.
    *
-   * @param \Drupal\build_hooks\Entity\DeploymentInterface $deployment
+   * @param DeploymentInterface $deployment
    *   Deployment.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/build_hooks/src/Controller/FrontendEnvironmentLibraryController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The frontend environment manager.
    *
-   * @var \Drupal\build_hooks\Plugin\FrontendEnvironmentManager
+   * @var FrontendEnvironmentManager
    */
   protected $frontendEnvironmentManager;

@@ @@
   /**
    * FrontendEnvironmentLibraryController constructor.
    *
-   * @param \Drupal\build_hooks\Plugin\FrontendEnvironmentManager $frontendEnvironmentManager
+   * @param FrontendEnvironmentManager $frontendEnvironmentManager
    *   The frontend environment manager.
    */
   public function __construct(FrontendEnvironmentManager $frontendEnvironmentManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/build_hooks/src/Controller/FrontendEnvironmentAddController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;

 /**
@@ @@
    * @return array
    *   The form to add and configure a frontend environment entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function frontendEnvironmentAddConfigureForm($plugin_id) {
     // Create a frontend environment entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/build_hooks/src/Annotation/FrontendEnvironment.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


30) modules/contrib/build_hooks/modules/build_hooks_netlify/tests/src/Kernel/NetlifyBuildHooksTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('build_hooks_netlify');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/build_hooks/modules/build_hooks_netlify/src/Plugin/FrontendEnvironment/NetlifyFrontendEnvironment.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\build_hooks_netlify\NetlifyManager definition.
    *
-   * @var \Drupal\build_hooks_netlify\NetlifyManager
+   * @var NetlifyManager
    */
   protected $netlifyManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\build_hooks_netlify\NetlifyManager $netlifyManager
+   * @param NetlifyManager $netlifyManager
    *   The Netlify Manager.
    */
   public function __construct(
@@ @@
    * @return array
    *   Renderable array.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   private function getLastNetlifyDeploymentsTable(array $settings) {
     $netlifyData = $this->netlifyManager->retrieveLatestBuildsFromNetlifyForEnvironment($settings, 8);
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/build_hooks/modules/build_hooks_netlify/src/NetlifyManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_netlify;

+use GuzzleHttp\Exception\GuzzleException;
 /**
  * NetlifyManager interface.
  */
@@ @@
    * @return array
    *   An array with info about the builds.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function retrieveLatestBuildsFromNetlifyForEnvironment(array $settings, $limit = 1);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/build_hooks/modules/build_hooks_netlify/src/NetlifyManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_netlify;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use GuzzleHttp\ClientInterface;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
    * @return array
    *   An array with info about the builds.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function retrieveLatestBuildsFromNetlifyForEnvironment(array $settings, $limit = 1) {
     $url = $this->buildNetlifyApiRetrieveBuildsUrl($settings);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/build_hooks/modules/build_hooks_github/tests/src/Kernel/GithubBuildHooksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks_github\Kernel;

+use GuzzleHttp\Psr7\Request;
+use GuzzleHttp\ClientInterface;
 use Drupal\build_hooks\TriggerInterface;
 use Drupal\Tests\build_hooks\Kernel\BuildHooksKernelTestBase;
 use GuzzleHttp\Psr7\Response;
@@ @@
   /**
    * History of requests.
    *
-   * @var \GuzzleHttp\Psr7\Request[]
+   * @var Request[]
    */
   protected $history = [];

@@ @@
   /**
    * Mock client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $mockClient;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/build_hooks/modules/build_hooks_github/tests/src/Functional/GithubFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks_github\Functional;

+use Drupal\build_hooks\Entity\FrontendEnvironmentInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
       $assert->fieldExists($name)->setValue($value);
     }
     $this->submitForm([], 'Save');
-    /** @var \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment */
+    /** @var FrontendEnvironmentInterface $environment */
     $environment = \Drupal::entityTypeManager()->getStorage('frontend_environment')->load($random);
     $this->assertNotEmpty($environment);
     $settings = $environment->get('settings');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/build_hooks/modules/build_hooks_github/src/Plugin/FrontendEnvironment/GithubFrontendEnvironment.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_github\Plugin\FrontendEnvironment;

+use Drupal\Core\Config\Config;
 use Drupal\build_hooks\Plugin\FrontendEnvironmentBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The github config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/build_hooks/modules/build_hooks_circleci/tests/src/Kernel/CircleBuildHookTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks_circleci\Kernel;

+use Drupal\build_hooks\Plugin\FrontendEnvironmentInterface;
 use Drupal\build_hooks\TriggerInterface;
 use Drupal\build_hooks\Entity\FrontendEnvironment;
 use Drupal\build_hooks\Trigger;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installConfig('build_hooks_circleci');
@@ @@
       new Response('500', [], json_encode([]))
     );
     $title = $this->randomMachineName();
-    /** @var \Drupal\build_hooks\Entity\FrontendEnvironment $environment */
+    /** @var FrontendEnvironment $environment */
     $project = 'foo/bar';
     $environment = FrontendEnvironment::create([
       'id' => 'foo',
@@ @@
       'deployment_strategy' => Trigger::DEPLOYMENT_STRATEGY_CRON,
     ]);
     $environment->save();
-    /** @var \Drupal\build_hooks\Plugin\FrontendEnvironmentInterface $plugin */
+    /** @var FrontendEnvironmentInterface $plugin */
     $plugin = $environment->getPlugin();
     $extra = $plugin->getAdditionalDeployFormElements(new FormState())['builds'];
     $expected_url = 'https://circleci.com/api/v2/project/gh/' . $project . '/pipeline/mine?branch=master';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/build_hooks/modules/build_hooks_circleci/tests/src/Functional/CircleV2FormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks_circleci\Functional;

+use Drupal\build_hooks\Entity\FrontendEnvironmentInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
     $assert->buttonExists('Remove item 4')->click();
     $assert->fieldNotExists('settings[parameters][3][name]');
     $this->submitForm([], 'Save');
-    /** @var \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment */
+    /** @var FrontendEnvironmentInterface $environment */
     $environment = \Drupal::entityTypeManager()->getStorage('frontend_environment')->load($random);
     $this->assertNotEmpty($environment);
     $this->assertEquals([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


39) modules/contrib/build_hooks/modules/build_hooks_circleci/src/Plugin/FrontendEnvironment/CircleV2.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   private $httpClient;

@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   private $formatter;

@@ @@
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   HTTP client.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $formatter
+   * @param DateFormatterInterface $formatter
    *   Date formatter.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ClientInterface $httpClient, DateFormatterInterface $formatter) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/build_hooks/modules/build_hooks_circleci/src/Plugin/FrontendEnvironment/CircleCiFrontendEnvironment.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\build_hooks_circleci\CircleCiManager definition.
    *
-   * @var \Drupal\build_hooks_circleci\CircleCiManager
+   * @var CircleCiManager
    */
   protected $circleCiManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\build_hooks_circleci\CircleCiManager $circleCiManager
+   * @param CircleCiManager $circleCiManager
    *   The Circle CI Manager.
    */
   public function __construct(
@@ @@
    * @return array
    *   Renderable array.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   private function getLastCircleCiDeploymentsTable(array $settings) {
     $circleCiData = $this->circleCiManager->retrieveLatestBuildsFromCircleciForEnvironment($settings, 8);
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/build_hooks/modules/build_hooks_circleci/src/CircleCiManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_circleci;

+use Drupal\build_hooks\BuildHookDetails;
+use GuzzleHttp\Exception\GuzzleException;
 /**
  * CircleCiManager interface.
  */
@@ @@
    * @param array $config
    *   The plugin configuration array.
    *
-   * @return \Drupal\build_hooks\BuildHookDetails
+   * @return BuildHookDetails
    *   Build hooks detail object with info about the request to make.
    */
   public function getBuildHookDetailsForPluginConfiguration(array $config);
@@ @@
    * @return array
    *   An array with info about the builds.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function retrieveLatestBuildsFromCircleciForEnvironment(array $settings, $limit = 1);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


42) modules/contrib/build_hooks/modules/build_hooks_circleci/src/CircleCiManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_circleci;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\build_hooks\BuildHookDetails;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
    * @param array $config
    *   The plugin configuration array.
    *
-   * @return \Drupal\build_hooks\BuildHookDetails
+   * @return BuildHookDetails
    *   Build hooks detail object with info about the request to make.
    */
   public function getBuildHookDetailsForPluginConfiguration(array $config) {
@@ @@
    * @return array
    *   An array with info about the builds.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function retrieveLatestBuildsFromCircleciForEnvironment(array $settings, $limit = 1) {
     $url = $this->buildCircleCiApiRetrieveBuildsUrl($settings, $limit);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/build_hooks/modules/build_hooks_bitbucket/tests/src/Unit/BitbucketManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks_bitbucket\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\build_hooks\BuildHookDetails;
 use Drupal\build_hooks_bitbucket\BitbucketManager;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class BitbucketManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests getting build hook details..
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


44) modules/contrib/build_hooks/modules/build_hooks_bitbucket/tests/src/Kernel/BitbucketBuildHooksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks_bitbucket\Kernel;

+use GuzzleHttp\Psr7\Request;
+use GuzzleHttp\ClientInterface;
 use Drupal\build_hooks\TriggerInterface;
 use Drupal\Tests\build_hooks\Kernel\BuildHooksKernelTestBase;
 use GuzzleHttp\Psr7\Response;
@@ @@
   /**
    * History of requests.
    *
-   * @var \GuzzleHttp\Psr7\Request[]
+   * @var Request[]
    */
   protected $history = [];

@@ @@
   /**
    * Mock client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $mockClient;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/build_hooks/modules/build_hooks_bitbucket/tests/src/Functional/BitbucketFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\build_hooks_bitbucket\Functional;

+use Drupal\build_hooks\Entity\FrontendEnvironmentInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
       $assert->fieldExists($name)->setValue($value);
     }
     $this->submitForm([], 'Save');
-    /** @var \Drupal\build_hooks\Entity\FrontendEnvironmentInterface $environment */
+    /** @var FrontendEnvironmentInterface $environment */
     $environment = \Drupal::entityTypeManager()->getStorage('frontend_environment')->load($random);
     $this->assertNotEmpty($environment);
     $settings = $environment->get('settings');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


46) modules/contrib/build_hooks/modules/build_hooks_bitbucket/src/Plugin/FrontendEnvironment/BitbucketFrontendEnvironment.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_bitbucket\Plugin\FrontendEnvironment;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\build_hooks\Plugin\FrontendEnvironmentBase;
 use Drupal\build_hooks_bitbucket\BitbucketManager;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Drupal\build_hooks_bitbucket\BitbucketManager definition.
    *
-   * @var \Drupal\build_hooks_bitbucket\BitbucketManager
+   * @var BitbucketManager
    */
   protected $bitbucketManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\build_hooks_bitbucket\BitbucketManager $bitbucketManager
+   * @param BitbucketManager $bitbucketManager
    *   The Bitbucket pipelines Manager.
    */
   public function __construct(
@@ @@
    * @return array
    *   Render array.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    *   When fetching fails.
    */
   private function getLastBitbucketDeploymentsTable(array $settings) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/build_hooks/modules/build_hooks_bitbucket/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_bitbucket\Form;

+use Drupal\build_hooks_bitbucket\BitbucketManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Bitbucket manager.
    *
-   * @var \Drupal\build_hooks_bitbucket\BitbucketManager
+   * @var BitbucketManager
    */
   protected $manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/build_hooks/modules/build_hooks_bitbucket/src/BitbucketManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\build_hooks_bitbucket;

+use Drupal\Core\Config\Config;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\build_hooks\BuildHookDetails;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a BitbucketManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   HTTP client.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The Date formatter service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ClientInterface $http_client, DateFormatterInterface $date_formatter) {
@@ @@
    * @param array $settings
    *   The configuration for this hook.
    *
-   * @return \Drupal\build_hooks\BuildHookDetails
+   * @return BuildHookDetails
    *   An object that will trigger a pipeline based on config.
    */
   public function getBuildHookDetailsForPluginConfiguration(array $settings) {
@@ @@
    * @return array
    *   An array with info about the builds.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function retrieveLatestBuilds(array $settings, $limit = 10) {
     $url = $this->getPipelinesApiPath($settings);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


49) modules/contrib/build_hooks/build_hooks.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\build_hooks\Entity\FrontendEnvironment;
+use Drupal\build_hooks\Trigger;
+use Drupal\build_hooks\DeployLogger;
 /**
  * @file
  * Contains build_hooks.module.
@@ @@
   $items = [];
   if ($triggerService->showMenu()) {

-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $entityTypeManager = \Drupal::service('entity_type.manager');
     // Load all defined environments.
     $allEnvironments = $entityTypeManager->getStorage('frontend_environment')->loadByProperties(['status' => TRUE]);
@@ @@
     if ($has_envs && count($allEnvironments) < 2) {
       foreach ($allEnvironments as $environment) {
         $num = build_hooks_get_logger_service()->getNumberOfItemsSinceLastDeploymentForEnvironment($environment);
-        /** @var \Drupal\build_hooks\Entity\FrontendEnvironment $environment */
+        /** @var FrontendEnvironment $environment */
         $items['build_hooks-' . $environment->id()] = [
           '#cache' => $cache,
           '#weight' => $environment->getWeight() + 999,
@@ @@
       foreach ($allEnvironments as $environment) {
         $changes = build_hooks_get_logger_service()->getNumberOfItemsSinceLastDeploymentForEnvironment($environment);
         $totalChanges += $changes;
-        /** @var \Drupal\build_hooks\Entity\FrontendEnvironment $environment */
+        /** @var FrontendEnvironment $environment */
         $bh_items['build_hooks_' . $environment->id()] = [
           '#type' => 'link',
           '#title' => \Drupal::translation()->formatPlural($changes, '@envName (1 change)', '@envName (@count changes)', [
@@ @@
 /**
  * Get the trigger service.
  *
- * @return \Drupal\build_hooks\Trigger
+ * @return Trigger
  *   The trigger service.
  */
 function build_hooks_get_trigger_service() {
@@ @@
 /**
  * Get the deploy logger service.
  *
- * @return \Drupal\build_hooks\DeployLogger
+ * @return DeployLogger
  *   The deploy logger service.
  */
 function build_hooks_get_logger_service() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 49 files have been changed by Rector                                      

