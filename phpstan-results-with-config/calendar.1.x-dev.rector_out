modules/contrib/calendar/calendar.module
modules/contrib/calendar/calendar.theme.inc
modules/contrib/calendar/calendar.views.inc
modules/contrib/calendar/calendar_datetime/src/Plugin/views/argument_default/Date.php
modules/contrib/calendar/src/CalendarDateInfo.php
modules/contrib/calendar/src/CalendarEvent.php
modules/contrib/calendar/src/CalendarHelper.php
modules/contrib/calendar/src/CalendarStyleInfo.php
modules/contrib/calendar/src/CalendarViewsTrait.php
modules/contrib/calendar/src/DateArgumentWrapper.php
modules/contrib/calendar/src/Form/CalendarSettingsForm.php
modules/contrib/calendar/src/Plugin/Block/CalendarLegend.php
modules/contrib/calendar/src/Plugin/Derivative/ViewsFieldTemplate.php
modules/contrib/calendar/src/Plugin/ViewsTemplateBuilder/ViewsFieldTemplate.php
modules/contrib/calendar/src/Plugin/views/area/CalendarHeader.php
modules/contrib/calendar/src/Plugin/views/argument/DatetimeYearWeekDate.php
modules/contrib/calendar/src/Plugin/views/argument/TimeStampYearWeekDate.php
modules/contrib/calendar/src/Plugin/views/argument_validator/CalendarValidator.php
modules/contrib/calendar/src/Plugin/views/pager/CalendarPager.php
modules/contrib/calendar/src/Plugin/views/row/Calendar.php
modules/contrib/calendar/src/Plugin/views/style/Calendar.php
modules/contrib/calendar/src/Template/TwigExtension.php

14 files with changes
=====================

1) modules/contrib/calendar/src/Template/TwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\calendar\Template;

+use Drupal\calendar\CalendarEvent;
 /**
  * A class providing Calendar Twig extensions.
  */
@@ @@
   /**
    * Adds a striped background to the passed event.
    *
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *
    * @return string
    *   A HTML output string.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/calendar/src/Plugin/views/style/Calendar.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\calendar\Plugin\views\style;

+use Drupal\calendar\CalendarEvent;
 use Drupal\calendar\CalendarDateInfo;
 use Drupal\calendar\CalendarHelper;
 use Drupal\calendar\CalendarStyleInfo;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The time interface.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time interface.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatter $date_formatter, MessengerInterface $messenger, TimeInterface $time) {
@@ @@
       $this->view->row_index = $row_index;
       $events = $this->view->rowPlugin->render($row);
       // @todo Check what comes out here.
-      /** @var \Drupal\calendar\CalendarEvent $event_info */
+      /** @var CalendarEvent $event_info */
       foreach ($events as $event_info) {
         $item_start = $event_info->calendar_start_date->format('Y-m-d');
         $item_end = $event_info->calendar_end_date->format('Y-m-d');
@@ @@
         if ($date == $current_day_date) {
           ksort($day);
           foreach ($day as $time => $hour) {
-            /** @var \Drupal\calendar\CalendarEvent $item */
+            /** @var CalendarEvent $item */
             foreach ($hour as $key => $item) {
               $all_day = $item->isAllDay();

@@ @@
         $selected = TRUE;
         ksort($day);
         foreach ($day as $time => $hour) {
-          /** @var \Drupal\calendar\CalendarEvent $item */
+          /** @var CalendarEvent $item */
           foreach ($hour as $key => $item) {
             $count++;
             $ids[$item->getType()] = $item;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/calendar/src/Plugin/views/row/Calendar.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\calendar\Plugin\views\row;

+use Drupal\views\Plugin\views\argument\Formula;
+use Drupal\views\ResultRow;
+use Drupal\calendar\CalendarDateInfo;
+use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\calendar\CalendarEvent;
 use Drupal\calendar\CalendarHelper;
 use Drupal\calendar\CalendarViewsTrait;
@@ @@
   /**
    * The data formatter object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    *   The date formatter service.
    */
   protected $dateFormatter;
@@ @@
   /**
    * The formula object.
    *
-   * @var \Drupal\views\Plugin\views\argument\Formula
+   * @var Formula
    */
   protected $dateArgument;

@@ @@
   /**
    * The entity field manager object.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatter $date_formatter, EntityFieldManagerInterface $field_manager) {
@@ @@
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State of the form.
    */
   public function validateHexColor(array $element, FormStateInterface $form_state) {
@@ @@
     // repeatedly for the same entity if there are multiple results for one
     // entity.
     $ids = [];
-    /** @var \Drupal\views\ResultRow $row */
+    /** @var ResultRow $row */
     foreach ($result as $row) {
       // Use the entity id as the key so we don't create more than one value per
       // entity.
@@ @@

     $data = $data['name'];
     $date_fields = [];
-    /** @var \Drupal\views\Plugin\views\argument\Formula $handler */
+    /** @var Formula $handler */
     foreach ($this->view->getDisplay()->getHandlers('argument') as $handler) {
       if ($handler instanceof Date) {
         // Strip "_calendar" from the field name.
@@ @@
    * {@inheritdoc}
    */
   public function render($row) {
-    /** @var \Drupal\calendar\CalendarDateInfo $dateInfo */
+    /** @var CalendarDateInfo $dateInfo */
     $dateInfo = $this->dateArgument->view->dateInfo;
     $id = $row->_entity->id();
     $rows = [];
@@ @@
       // Clone this entity so we can change it's values without altering other
       // occurrences of this entity on the same page, for example in an
       // "Upcoming" block.
-      /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+      /** @var ContentEntityBase $entity */
       $entity = clone($this->entities[$id]);

       if (empty($entity)) {
@@ @@
         // 'row' => $row,
         // 'field_alias' => isset($this->field_alias) ? $this->field_alias : '',
         // ]);
-        /** @var \Drupal\calendar\CalendarEvent[] $events */
+        /** @var CalendarEvent[] $events */
         $events = $this->explodeValues($event);
         foreach ($events as $event) {
           switch ($this->options['colors']['legend']) {
@@ @@
   }

   /**
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *   A calendar event to explode date values.
    *
    * @return array
@@ @@
     // All three were limited by the min-max date range of the view.
     $position = 0;
     while (!empty($now) && $now <= $to) {
-      /** @var \Drupal\calendar\CalendarEvent $entity */
+      /** @var CalendarEvent $entity */
       $entity = clone($event);

       // Get start and end of current day.
@@ @@
   /**
    * Create a stripe base on node type.
    *
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *   The event result object.
    */
   public function nodeTypeStripe(CalendarEvent &$event) {
@@ @@
   /**
    * Create a stripe based on a taxonomy term.
    *
-   * @param \Drupal\calendar\CalendarEvent $event
+   * @param CalendarEvent $event
    *   A calendar event.
    */
   public function calendarTaxonomyStripe(CalendarEvent &$event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/calendar/src/Plugin/views/pager/CalendarPager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\calendar\Plugin\views\pager;

+use Drupal\calendar\DateArgumentWrapper;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\calendar\CalendarHelper;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ @@
   /**
    * The Date argument wrapper object.
    *
-   * @var \Drupal\calendar\DateArgumentWrapper
+   * @var DateArgumentWrapper
    */
   protected $argument;

@@ @@
     $current_position = 0;
     $arg_vals = [];
     /**
-     * @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $handler
+     * @var ArgumentPluginBase $handler
      */
     foreach ($this->view->argument as $name => $handler) {
       if ($current_position != $this->argument->getPosition()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/calendar/src/Plugin/views/argument_validator/CalendarValidator.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The date argument wrapper object.
    *
-   * @var \Drupal\calendar\DateArgumentWrapper
+   * @var DateArgumentWrapper
    */
   protected $argumentWrapper;

@@ @@
   /**
    * The dateformatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/calendar/src/Plugin/ViewsTemplateBuilder/ViewsFieldTemplate.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager object.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/calendar/src/Plugin/Derivative/ViewsFieldTemplate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\calendar\Plugin\Derivative;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;

@@ @@
   /**
    * The views data service.
    *
-   * @var \Drupal\views\ViewsData
+   * @var ViewsData
    */
   protected $viewsData;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity type manager service.
-   * @param \Drupal\views\ViewsData $views_data
+   * @param ViewsData $views_data
    *   The entity storage to load views.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager interface.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $manager, ViewsData $views_data, EntityFieldManagerInterface $field_manager) {
@@ @@
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
     /**
-     * @var \Drupal\Core\Entity\EntityTypeInterface $entity_type
+     * @var EntityTypeInterface $entity_type
      */
     foreach ($this->entityManager->getDefinitions() as $entity_type_id => $entity_type) {
       // Just add support for entity types which have a views integration.
@@ @@
   /**
    * Set all derivatives for an entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type service.
    * @param array $base_plugin_definition
    *   The array.
    */
   protected function setConfigurableFieldsDerivatives(EntityTypeInterface $entity_type, array $base_plugin_definition) {
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage */
+    /** @var FieldStorageDefinitionInterface $field_storage */
     $field_storages = $this->fieldManager->getFieldStorageDefinitions($entity_type->id());

     foreach ($field_storages as $field_id => $field_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/calendar/src/DateArgumentWrapper.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The date object.
    *
-   * @var \Drupal\views\Plugin\views\argument\Date
+   * @var Date
    */
   protected $dateArg;

@@ @@
   /**
    * The function to return date.
    *
-   * @return \Drupal\views\Plugin\views\argument\Date
+   * @return Date
    *   Returns date.
    */
   public function getDateArg() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/calendar/src/CalendarViewsTrait.php:37

    ---------- begin diff ----------
@@ @@
    * @todo Change to a more generic is Content Entity Reference.
    *
    * @param $field_info
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager service.
    */
   protected function isTermReferenceField($field_info, EntityFieldManagerInterface $field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/calendar/src/CalendarHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\calendar;

+use Drupal\views\Plugin\ViewsHandlerManager;
+use Drupal\Core\Routing\RouteProvider;
 use Drupal\Core\Datetime\DateHelper;
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
@@ @@
   /**
    * Argument can be used as calendar argument.
    *
-   * @param \Drupal\views\Plugin\views\argument\ArgumentPluginBase $arg
+   * @param ArgumentPluginBase $arg
    *   The argument base object.
    *
    * @return bool
@@ @@
   /**
    * Helper function to find the first date argument handler for this view.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable object.
    * @param null $display_id
    *
-   * @return \Drupal\calendar\DateArgumentWrapper|false
+   * @return DateArgumentWrapper|false
    *   Returns the Date handler if one is found, or FALSE otherwise.
    */
   public static function getDateArgumentHandler(ViewExecutable $view, $display_id = NULL) {
@@ @@
     $all_arguments = [];
     if ($display_id) {
       // If we aren't dealing with current display we have to load the argument handlers.
-      /** @var \Drupal\views\Plugin\ViewsHandlerManager $argument_manager */
+      /** @var ViewsHandlerManager $argument_manager */
       $argument_manager = \Drupal::getContainer()->get('plugin.manager.views.argument');

       $argument_configs = $view->getHandlers('argument', $display_id);
@@ @@
       $current_position = 0;
       /**
        * @var  $name
-       * @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $handler
+       * @var ArgumentPluginBase $handler
        */
       foreach ($all_arguments as $name => $handler) {
         if (static::isCalendarArgument($handler)) {
@@ @@
   /**
    * Get the display that handles a given granularity.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable service.
    * @param $granularity
    *
@@ @@
    *
    * @todo Allow a View to link to other Views by itself for a certain granularity.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable service.
    * @param $granularity
    * @param $arguments
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    */
   public static function getURLForGranularity(ViewExecutable $view, $granularity, $arguments) {
     $granularity_links = $view->getStyle()->options['granularity_links'];
     if ($granularity_links[$granularity]) {
-      /** @var \Drupal\Core\Routing\RouteProvider $router */
+      /** @var RouteProvider $router */
       $router = \Drupal::getContainer()->get('router.route_provider');
       $route_name = $granularity_links[$granularity];
       // Check if route exists. $router->getRoutesByName will throw error if no match.
@@ @@
   /**
    * Get the Url object to link to a View display with given arguments.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view executable service.
    * @param $display_id
    * @param array $args
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Returns url.
    */
   public static function getViewsURL(ViewExecutable $view, $display_id, array $args = []) {
@@ @@
   /**
    * @param array $args
    *   The provided arguments.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    *
    * @return array
@@ @@
   /**
    * Returns all the argument values for the specified view's current display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   An executed view.
    * @param string $value
    *   The date argument value.
-   * @param \Drupal\calendar\DateArgumentWrapper|null $argument_handler
+   * @param DateArgumentWrapper|null $argument_handler
    *   (optional) A date argument wrapper object. If not specified it will be
    *   derived from the view.
    *
@@ @@
     }
     $current_position = 0;

-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $handler */
+    /** @var ArgumentPluginBase $handler */
     foreach ($view->argument as $name => $handler) {
       if ($current_position != $argument_handler->getPosition()) {
         $arg_values["arg_$current_position"] = $handler->getValue();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/calendar/src/CalendarEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\calendar;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * The content entity interface object.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Function to get entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function getEntity() {
     return $this->entity;
@@ @@
    * @return string
    *   The public url to this event.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getUrl() {
     return $this->entity->toUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/calendar/calendar_datetime/src/Plugin/views/argument_default/Date.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $date_formatter, Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/calendar/calendar.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\calendar\CalendarStyleInfo;
+use Drupal\calendar\CalendarEvent;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * @file
  * Theme functions for the Calendar module.
@@ @@

   $item_count = 0;
   $by_hour_count = 0;
-  /** @var \Drupal\calendar\CalendarStyleInfo $styleInfo */
+  /** @var CalendarStyleInfo $styleInfo */
   $styleInfo = $view->styleInfo;
   $grouping_field = !empty($styleInfo->getCustomGroupByField()) ? ($styleInfo->getCustomGroupByField()) : NULL;
   $display_overlap = !empty($styleInfo->getThemeStyle()) && !empty($styleInfo->getGroupByTimes());
@@ @@

   $grouped_items = [];
   foreach ($rows['items'] as &$items) {
-    /** @var \Drupal\calendar\CalendarEvent $item */
+    /** @var CalendarEvent $item */
     foreach ($items as &$item) {
       $time = date_format($item->getStartDate(), 'H:i:s');
       if (!empty($item->rendered_fields[$grouping_field])) {
@@ @@
 function template_preprocess_calendar_item(&$vars) {
   // At the last possible minute we fix the values in rendered_fields so it
   // contains the correct rendered content for the type of item and item display.
-  /** @var \Drupal\calendar\CalendarEvent $item */
+  /** @var CalendarEvent $item */
   $item = $vars['item'];

   $multiday_hidden = !empty($vars['view']->style_options['multiday_hidden']) ? $vars['view']->style_options['multiday_hidden'] : [];
@@ @@
  * @return string
  *   The HTML output of the legend.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function template_preprocess_calendar_stripe_legend(array &$vars) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/calendar/calendar.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 /**
  * @file
  */
@@ @@
  * Track the current date as the user moves from calendar display to calendar
  * display.
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *
- * @return \Drupal\views\Plugin\views\argument\ArgumentPluginBase
+ * @return ArgumentPluginBase
  */
 function _calendar_views_track_current_date(ViewExecutable $view) {
   $user = \Drupal::currentUser();
@@ @@
 /**
  * Find the path for the calendar display that has a specific granularity.
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The current view.
  * @param string $granularity
  *   The granularity to find.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

