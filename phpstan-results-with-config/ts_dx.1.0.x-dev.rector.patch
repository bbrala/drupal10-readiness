diff --git a/src/Commands/DxCommands.php b/src/Commands/DxCommands.php
index e7e9058..d47054b 100644
--- a/src/Commands/DxCommands.php
+++ b/src/Commands/DxCommands.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ts_dx\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drush\Commands\DrushCommands;
@@ -38,7 +42,7 @@ class DxCommands extends DrushCommands {
   /**
    * EntityType Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -59,7 +63,7 @@ class DxCommands extends DrushCommands {
   /**
    * DxCommands constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity Type Manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -171,8 +175,8 @@ class DxCommands extends DrushCommands {
    * @param array $entitiesIds
    *   THe entity ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function deleteAllEntities(string $entityTypeId, array $entitiesIds): void {
     $entityType = $this->getStorage($entityTypeId);
@@ -223,11 +227,11 @@ class DxCommands extends DrushCommands {
    * @param string $entityTypeId
    *   The entity type id.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getStorage($entityTypeId) {
     if (!array_key_exists($entityTypeId, $this->storages)) {
@@ -243,11 +247,11 @@ class DxCommands extends DrushCommands {
    * @param string $entityTypeId
    *   The entity type id.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getDefinition($entityTypeId) {
     if (!array_key_exists($entityTypeId, $this->definitions)) {
diff --git a/src/Controller/ToolbarRedirectController.php b/src/Controller/ToolbarRedirectController.php
index e3480b9..b1dd5ad 100644
--- a/src/Controller/ToolbarRedirectController.php
+++ b/src/Controller/ToolbarRedirectController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\ts_dx\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -27,23 +32,23 @@ class ToolbarRedirectController extends ControllerBase {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Current Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
   /**
    * ToolbarRedirectController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityType manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The requestStack.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RequestStack $requestStack) {
@@ -64,7 +69,7 @@ class ToolbarRedirectController extends ControllerBase {
   /**
    * Redirect to node edit form selected by the query params.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function nodeEditFormRedirect() {
@@ -74,7 +79,7 @@ class ToolbarRedirectController extends ControllerBase {
   /**
    * Redirect to term edit form selected by the query params.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function termEditFormRedirect() {
@@ -87,7 +92,7 @@ class ToolbarRedirectController extends ControllerBase {
    * @param string $entity_type
    *   Le type d'entité.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function entityEditFormRedirect($entity_type) {
@@ -111,11 +116,11 @@ class ToolbarRedirectController extends ControllerBase {
    * @param string $entity_type
    *   LE type d'entité.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Les entités.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntities(string $entity_type) {
     // Permet de définir une propriété à un champ complexe avec séparateur ':'.
@@ -145,11 +150,11 @@ class ToolbarRedirectController extends ControllerBase {
    * @param array $queryElements
    *   La query.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Les entités.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntitiesByEntityQuery(string $entity_type, array $queryElements) {
     $query = $this->entityTypeManager->getStorage($entity_type)->getQuery();
diff --git a/src/Services/Context/ContextTools.php b/src/Services/Context/ContextTools.php
index 97f3e10..32849ef 100644
--- a/src/Services/Context/ContextTools.php
+++ b/src/Services/Context/ContextTools.php
@@ -66,7 +66,7 @@ class ContextTools {
   /**
    * Return the entity of the current page.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The current context entity.
    */
   public function getCurrentContextEntity() {
diff --git a/src/Services/MiscTools.php b/src/Services/MiscTools.php
index a723e1f..b45bf81 100644
--- a/src/Services/MiscTools.php
+++ b/src/Services/MiscTools.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ts_dx\Services;
 
+use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 
 /**
@@ -31,7 +32,7 @@ class MiscTools
   /**
    * Return the list of attributes of entity reference item list.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemList $field
+   * @param EntityReferenceFieldItemList $field
    *   The field.
    * @param string $attribute
    *   The attributes.
diff --git a/src/Services/Theme/Base/AbstractTwigExtension.php b/src/Services/Theme/Base/AbstractTwigExtension.php
index ba58cf8..d018b88 100644
--- a/src/Services/Theme/Base/AbstractTwigExtension.php
+++ b/src/Services/Theme/Base/AbstractTwigExtension.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ts_dx\Services\Theme\Base;
 
+use Twig\TwigFunction;
+use Twig\TwigFilter;
 /**
  * Class AbstractTwigExtension.
  *
@@ -29,7 +31,7 @@ abstract class AbstractTwigExtension extends \Twig_Extension {
   /**
    * Retourne la liste des fonctions nons préfixées.
    *
-   * @return \Twig\TwigFunction[]
+   * @return TwigFunction[]
    *   La liste de fonctions.
    */
   abstract protected function getAllFunctions(): array;
@@ -37,7 +39,7 @@ abstract class AbstractTwigExtension extends \Twig_Extension {
   /**
    * REtourne la liste dse filtres nons préfixés.
    *
-   * @return \Twig\TwigFilter[]
+   * @return TwigFilter[]
    *   La lsite des filtres.
    */
   abstract protected function getAllFilters(): array;
diff --git a/src/Services/Theme/TwigExtension.php b/src/Services/Theme/TwigExtension.php
index f9101a0..e542ac3 100644
--- a/src/Services/Theme/TwigExtension.php
+++ b/src/Services/Theme/TwigExtension.php
@@ -39,14 +39,14 @@ class TwigExtension extends AbstractTwigExtension {
   /**
    * Theme Manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * TwigExtension constructor.
    *
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   Le theme manager.
    */
   public function __construct(ThemeManagerInterface $themeManager) {
@@ -92,7 +92,7 @@ class TwigExtension extends AbstractTwigExtension {
    */
   public function getCurrentModulePath($path, $theme = NULL) {
     if ($theme) {
-      $asset_dir = base_path() . drupal_get_path('theme', $theme);
+      $asset_dir = base_path() . \Drupal::service('extension.list.theme')->getPath($theme);
     }
     else {
       $asset_dir = $this->themeManager->getActiveTheme()->getPath();
diff --git a/src/Services/Tree/MenuTools.php b/src/Services/Tree/MenuTools.php
index 30159ff..6fa4333 100644
--- a/src/Services/Tree/MenuTools.php
+++ b/src/Services/Tree/MenuTools.php
@@ -30,14 +30,14 @@ class MenuTools {
   /**
    * The menu link tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;
 
   /**
    * Constructs a MenuTools object.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree
+   * @param MenuLinkTreeInterface $menu_link_tree
    *   The menu link tree service.
    */
   public function __construct(MenuLinkTreeInterface $menu_link_tree) {
