diff --git a/src/Access/PrivateTaxonomyView.php b/src/Access/PrivateTaxonomyView.php
index acfd459..8b9f73a 100644
--- a/src/Access/PrivateTaxonomyView.php
+++ b/src/Access/PrivateTaxonomyView.php
@@ -22,7 +22,7 @@ class PrivateTaxonomyView implements AccessInterface {
   /**
    * The construct.
    *
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The loged user.
    */
   public function __construct(AccountProxy $current_user) {
diff --git a/src/Controller/TermAutocompleteController.php b/src/Controller/TermAutocompleteController.php
index 69fbf89..63d3e73 100644
--- a/src/Controller/TermAutocompleteController.php
+++ b/src/Controller/TermAutocompleteController.php
@@ -19,14 +19,14 @@ class TermAutocompleteController implements ContainerInjectionInterface {
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs \Drupal\taxonomy\Controller\TermAutocompleteController object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ -61,14 +61,14 @@ class TermAutocompleteController implements ContainerInjectionInterface {
    *   };
    * @endcode
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $entity_type
    *   The entity_type.
    * @param string $field_name
    *   The name of the term reference field.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\Response
+   * @return JsonResponse|Response
    *   When valid field name is specified, a JSON response containing the
    *   autocomplete suggestions for taxonomy terms. Otherwise a normal response
    *   containing an error message.
diff --git a/src/Form/PrivateTaxonomySettingsForm.php b/src/Form/PrivateTaxonomySettingsForm.php
index 75e4e59..afd8c4f 100644
--- a/src/Form/PrivateTaxonomySettingsForm.php
+++ b/src/Form/PrivateTaxonomySettingsForm.php
@@ -16,16 +16,16 @@ class PrivateTaxonomySettingsForm extends ConfigFormBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(Connection $database, ConfigFactoryInterface $config_factory) {
diff --git a/src/Plugin/Field/FieldFormatter/PrivateTaxonomyFormatterBase.php b/src/Plugin/Field/FieldFormatter/PrivateTaxonomyFormatterBase.php
index 1899215..6561152 100644
--- a/src/Plugin/Field/FieldFormatter/PrivateTaxonomyFormatterBase.php
+++ b/src/Plugin/Field/FieldFormatter/PrivateTaxonomyFormatterBase.php
@@ -27,7 +27,7 @@ abstract class PrivateTaxonomyFormatterBase extends FormatterBase implements Con
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -37,7 +37,7 @@ abstract class PrivateTaxonomyFormatterBase extends FormatterBase implements Con
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The logged user.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountProxy $current_user) {
diff --git a/src/Plugin/Field/FieldWidget/PrivateTaxonomyAutocompleteWidget.php b/src/Plugin/Field/FieldWidget/PrivateTaxonomyAutocompleteWidget.php
index 36a9afd..7d3619c 100644
--- a/src/Plugin/Field/FieldWidget/PrivateTaxonomyAutocompleteWidget.php
+++ b/src/Plugin/Field/FieldWidget/PrivateTaxonomyAutocompleteWidget.php
@@ -36,7 +36,7 @@ class PrivateTaxonomyAutocompleteWidget extends WidgetBase implements ContainerF
   /**
    * Term storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $termStorage;
 
diff --git a/tests/src/Functional/PrivateTaxonomyPermissionsTest.php b/tests/src/Functional/PrivateTaxonomyPermissionsTest.php
index 76d4a40..667b4d1 100644
--- a/tests/src/Functional/PrivateTaxonomyPermissionsTest.php
+++ b/tests/src/Functional/PrivateTaxonomyPermissionsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\private_taxonomy\Functional;
 
+use Drupal\Core\StringTranslation\StringTranslationTrait;
 /**
  * Test Private Taxonomy functionality.
  *
@@ -9,7 +10,7 @@ namespace Drupal\Tests\private_taxonomy\Functional;
  */
 class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
-  use \Drupal\Core\StringTranslation\StringTranslationTrait;
+  use StringTranslationTrait;
 
   /**
    * Test for user with 'administer own taxonomy' permission.
@@ -34,16 +35,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertNoText($admin_term->getName(), $this->t('Admin term not visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($admin_term->getName());
 
     // Test to verify what vocabularies we can add terms to.
     $this->drupalGet('admin/structure/taxonomy/manage/' . $private_vocabulary->id() . '/add');
@@ -93,16 +104,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
 
     $this->drupalLogin($admin_user);
     $edit = [
@@ -110,40 +131,48 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
       'label' => 'Private',
       'field_name' => 'private',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field',
-      $edit, $this->t('Save and continue'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
+    $this->submitForm($edit, $this->t('Save and continue'));
     $edit = [
       'fields[field_private][type]' => 'options_select',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/form-display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/form-display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'fields[field_private][type]' => 'private_taxonomy_term_reference_link',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'settings[allowed_values][0][vocabulary]' => $private_vocabulary->id(),
       'settings[allowed_values][0][users]' => 'all',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_private/storage', $edit, $this->t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_private/storage');
+    $this->submitForm($edit, $this->t('Save field settings'));
 
     $this->drupalGet('node/add/page');
-    $this->assertText($admin_term->getName(), $this->t('Found term'));
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
 
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'field_private' => $admin_term->id(),
     ];
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, $this->t('Save'));
     // Should find the owner's term and use it.
-    $this->assertRaw('taxonomy/term/' . $admin_term->id(), $this->t('Found term'));
+    $this->assertSession()->responseContains('taxonomy/term/' . $admin_term->id());
     // Check taxonomy index.
     $this->drupalGet('taxonomy/term/' . $admin_term->id());
-    $this->assertRaw($admin_term->getName(), $this->t('Found term'));
+    $this->assertSession()->responseContains($admin_term->getName());
   }
 
   /**
@@ -181,16 +210,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
 
     $this->drupalLogin($admin_user);
     $edit = [
@@ -198,42 +237,53 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
       'label' => 'Private',
       'field_name' => 'private',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/add-field',
-      $edit, $this->t('Save and continue'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/add-field');
+    $this->submitForm($edit, $this->t('Save and continue'));
     $edit = [
       'fields[field_private][type]' => 'options_select',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/form-display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/form-display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'fields[field_private][type]' => 'private_taxonomy_term_reference_plain',
       'fields[field_private][region]' => 'content',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/display',
-      $edit, $this->t('Save'));
+    $this->drupalGet('admin/structure/types/manage/page/display');
+    $this->submitForm($edit, $this->t('Save'));
     $edit = [
       'settings[allowed_values][0][vocabulary]' => $private_vocabulary->id(),
       'settings[allowed_values][0][users]' => 'owner',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/page/fields/node.page.field_private/storage', $edit, $this->t('Save field settings'));
+    $this->drupalGet('admin/structure/types/manage/page/fields/node.page.field_private/storage');
+    $this->submitForm($edit, $this->t('Save field settings'));
 
     $this->drupalLogin($user);
     $this->drupalGet('node/add/page');
-    $this->assertNoText($admin_term->getName(), $this->t('Term not found'));
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($admin_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
 
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'field_private' => $private_term->id(),
     ];
-    $this->drupalPostForm('node/add/page', $edit, $this->t('Save'));
+    $this->drupalGet('node/add/page');
+    $this->submitForm($edit, $this->t('Save'));
 
     // Should find the owner's term and use it.
-    $this->assertText($private_term->getName(), $this->t('Found term'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
     // Check taxonomy index.
     $this->drupalGet('taxonomy/term/' . $private_term->id());
-    $this->assertRaw($private_term->getName(), $this->t('Found term'));
+    $this->assertSession()->responseContains($private_term->getName());
   }
 
   /**
@@ -262,16 +312,26 @@ class PrivateTaxonomyPermissionsTest extends PrivateTaxonomyTestBase {
 
     // Test to see what vocabularies are visible.
     $this->drupalGet('admin/structure/taxonomy');
-    $this->assertNoText($public_vocabulary->label(),
-      $this->t('Public vocabulary not visible.'));
-    $this->assertText($private_vocabulary->label(),
-      $this->t('Private vocabulary visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($public_vocabulary->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_vocabulary->label());
 
     // Test to see what terms are visible.
     $this->drupalGet('admin/structure/taxonomy/manage/' .
       $private_vocabulary->id() . '/overview');
-    $this->assertText($private_term->getName(), $this->t('Private term visible.'));
-    $this->assertText($admin_term->getName(), $this->t('Admin term visible.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($private_term->getName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($admin_term->getName());
   }
 
   /**
