diff --git a/context.module b/context.module
index 482b60b..ba8adf0 100644
--- a/context.module
+++ b/context.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\context\ContextManager;
 /**
  * @file
  * Defines Drupal hooks for context module.
@@ -43,7 +44,7 @@ function context_help($route_name, RouteMatchInterface $route_match) {
  * classes to the page body.
  */
 function context_preprocess_html(&$variables) {
-  /** @var \Drupal\context\ContextManager $context_manager */
+  /** @var ContextManager $context_manager */
   $context_manager = \Drupal::service('context.manager');
   // Active theme for route.
   $current_theme = \Drupal::service('theme.negotiator')->determineActiveTheme(Drupal::routeMatch());
@@ -72,7 +73,7 @@ function context_preprocess_html(&$variables) {
  * Implements hook_preprocess_HOOK().
  */
 function context_preprocess_page_title(&$variables) {
-  /** @var \Drupal\context\ContextManager $context_manager */
+  /** @var ContextManager $context_manager */
   $context_manager = \Drupal::service('context.manager');
 
   foreach ($context_manager->getActiveReactions('page_title') as $reaction) {
diff --git a/modules/context_ui/src/ContextListBuilder.php b/modules/context_ui/src/ContextListBuilder.php
index 25493e9..d4d889a 100644
--- a/modules/context_ui/src/ContextListBuilder.php
+++ b/modules/context_ui/src/ContextListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context_ui;
 
+use Drupal\context\ContextInterface;
 use Drupal\context\ContextManager;
 use Drupal\context\Entity\Context;
 use Drupal\Component\Utility\Html;
@@ -25,36 +26,36 @@ class ContextListBuilder extends ConfigEntityListBuilder implements FormInterfac
   /**
    * The Context modules context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a new ContextListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The Drupal form builder.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(
@@ -168,7 +169,7 @@ class ContextListBuilder extends ConfigEntityListBuilder implements FormInterfac
         ],
       ];
 
-      /** @var \Drupal\context\ContextInterface $context */
+      /** @var ContextInterface $context */
       foreach ($contexts as $context_id => $context) {
         $operations = [
           'edit' => [
diff --git a/modules/context_ui/src/Controller/ContextUIController.php b/modules/context_ui/src/Controller/ContextUIController.php
index 9266adc..8f188ef 100644
--- a/modules/context_ui/src/Controller/ContextUIController.php
+++ b/modules/context_ui/src/Controller/ContextUIController.php
@@ -27,32 +27,32 @@ class ContextUIController extends ControllerBase {
   /**
    * The context reaction manager.
    *
-   * @var \Drupal\context\ContextReactionManager
+   * @var ContextReactionManager
    */
   protected $contextReactionManager;
 
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * The Drupal core condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * Construct a new context controller.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
-   * @param \Drupal\context\ContextReactionManager $contextReactionManager
+   * @param ContextReactionManager $contextReactionManager
    *   The Context module context reaction plugin manager.
-   * @param \Drupal\Core\Condition\ConditionManager $conditionManager
+   * @param ConditionManager $conditionManager
    *   The Drupal core condition manager.
    */
   public function __construct(
@@ -79,10 +79,10 @@ class ContextUIController extends ControllerBase {
   /**
    * Retrieves group suggestions for a context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response with groups matching the query.
    */
   public function groupsAutocomplete(Request $request) {
@@ -112,7 +112,7 @@ class ContextUIController extends ControllerBase {
   /**
    * Displays a list of conditions that can be added to the context.
    *
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to display available conditions for.
    *
    * @return array
@@ -188,7 +188,7 @@ class ContextUIController extends ControllerBase {
   /**
    * Displays a list of reactions that can be added to the context.
    *
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to display available.
    *
    * @return array
@@ -264,14 +264,14 @@ class ContextUIController extends ControllerBase {
   /**
    * Add the specified reaction to the context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to add the reaction to.
    * @param string $reaction_id
    *   The ID of the reaction to add.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   An AJAX response or a redirect response.
    */
   public function addReaction(Request $request, ContextInterface $context, $reaction_id) {
@@ -331,14 +331,14 @@ class ContextUIController extends ControllerBase {
   /**
    * Add the specified condition to the context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context to add the condition to.
    * @param string $condition_id
    *   The ID of the condition to add.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   An AJAX response or A redirect response.
    */
   public function addCondition(Request $request, ContextInterface $context, $condition_id) {
diff --git a/modules/context_ui/src/Form/ConditionDeleteForm.php b/modules/context_ui/src/Form/ConditionDeleteForm.php
index 74ad3b4..442c37a 100644
--- a/modules/context_ui/src/Form/ConditionDeleteForm.php
+++ b/modules/context_ui/src/Form/ConditionDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\context_ui\Form;
 
+use Drupal\context\Entity\Context;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\context\ContextInterface;
@@ -19,28 +21,28 @@ class ConditionDeleteForm extends ConfirmFormBase {
   /**
    * The context to delete a condition from.
    *
-   * @var \Drupal\context\Entity\Context
+   * @var Context
    */
   protected $context;
 
   /**
    * The condition to delete from the context.
    *
-   * @var \Drupal\Core\Condition\ConditionInterface
+   * @var ConditionInterface
    */
   protected $condition;
 
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * Construct a condition delete form.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ -131,7 +133,7 @@ class ConditionDeleteForm extends ConfirmFormBase {
   /**
    * Handle when the form is submitted trough AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function submitFormAjax() {
diff --git a/modules/context_ui/src/Form/ContextDeleteForm.php b/modules/context_ui/src/Form/ContextDeleteForm.php
index cbdac3f..3956b5c 100644
--- a/modules/context_ui/src/Form/ContextDeleteForm.php
+++ b/modules/context_ui/src/Form/ContextDeleteForm.php
@@ -16,14 +16,14 @@ class ContextDeleteForm extends EntityConfirmFormBase {
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * ContextDeleteForm constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
diff --git a/modules/context_ui/src/Form/ContextDisableForm.php b/modules/context_ui/src/Form/ContextDisableForm.php
index ea779d1..d206a39 100644
--- a/modules/context_ui/src/Form/ContextDisableForm.php
+++ b/modules/context_ui/src/Form/ContextDisableForm.php
@@ -16,14 +16,14 @@ class ContextDisableForm extends EntityConfirmFormBase {
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * The ContextDisableForm constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
diff --git a/modules/context_ui/src/Form/ContextDuplicateForm.php b/modules/context_ui/src/Form/ContextDuplicateForm.php
index fe7b847..e2e37ad 100644
--- a/modules/context_ui/src/Form/ContextDuplicateForm.php
+++ b/modules/context_ui/src/Form/ContextDuplicateForm.php
@@ -16,14 +16,14 @@ class ContextDuplicateForm extends ContextFormBase {
   /**
    * Context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   Context manager.
    */
   public function __construct(ContextManager $contextManager) {
diff --git a/modules/context_ui/src/Form/ContextEditForm.php b/modules/context_ui/src/Form/ContextEditForm.php
index 49b6775..58e0dbc 100644
--- a/modules/context_ui/src/Form/ContextEditForm.php
+++ b/modules/context_ui/src/Form/ContextEditForm.php
@@ -77,7 +77,7 @@ class ContextEditForm extends ContextFormBase {
    *
    * @param array $element
    *   The element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -152,7 +152,7 @@ class ContextEditForm extends ContextFormBase {
    *
    * @param array $element
    *   The element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -230,7 +230,7 @@ class ContextEditForm extends ContextFormBase {
    *
    * @param array $form
    *   Form object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return mixed
@@ -260,7 +260,7 @@ class ContextEditForm extends ContextFormBase {
    *
    * @param array $form
    *   Form object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   From state object.
    */
   public function collection(array $form, FormStateInterface $form_state) {
diff --git a/modules/context_ui/src/Form/ContextFormBase.php b/modules/context_ui/src/Form/ContextFormBase.php
index c20654f..cb156d5 100644
--- a/modules/context_ui/src/Form/ContextFormBase.php
+++ b/modules/context_ui/src/Form/ContextFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context_ui\Form;
 
+use Drupal\context\ContextInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\context\ContextManager;
 use Drupal\context\Entity\Context;
@@ -19,14 +20,14 @@ abstract class ContextFormBase extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $entity;
 
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
@@ -40,7 +41,7 @@ abstract class ContextFormBase extends EntityForm {
   /**
    * Construct a new context form.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    * @param \Drupal\context\Entity\ContextRepositoryInterface $contextRepository
    *   The Drupal context repository.
@@ -165,7 +166,7 @@ abstract class ContextFormBase extends EntityForm {
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function handleConditions(array &$form, FormStateInterface $form_state) {
@@ -192,7 +193,7 @@ abstract class ContextFormBase extends EntityForm {
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function handleReactions(array &$form, FormStateInterface $form_state) {
@@ -213,7 +214,7 @@ abstract class ContextFormBase extends EntityForm {
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function validateConditions(array &$form, FormStateInterface $form_state) {
@@ -241,7 +242,7 @@ abstract class ContextFormBase extends EntityForm {
    *
    * @param array $form
    *   The rendered form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   private function validateReactions(array &$form, FormStateInterface $form_state) {
diff --git a/modules/context_ui/src/Form/ReactionDeleteForm.php b/modules/context_ui/src/Form/ReactionDeleteForm.php
index 884210f..a047ae7 100644
--- a/modules/context_ui/src/Form/ReactionDeleteForm.php
+++ b/modules/context_ui/src/Form/ReactionDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\context_ui\Form;
 
+use Drupal\context\ContextReactionInterface;
+use Drupal\Core\Url;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\context\ContextManager;
 use Drupal\context\ContextInterface;
@@ -20,28 +22,28 @@ class ReactionDeleteForm extends ConfirmFormBase implements ContainerInjectionIn
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;
 
   /**
    * The context reaction.
    *
-   * @var \Drupal\context\ContextReactionInterface
+   * @var ContextReactionInterface
    */
   protected $reaction;
 
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * Construct.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context module context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ -72,7 +74,7 @@ class ReactionDeleteForm extends ConfirmFormBase implements ContainerInjectionIn
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -136,7 +138,7 @@ class ReactionDeleteForm extends ConfirmFormBase implements ContainerInjectionIn
   /**
    * Handle when the form is submitted through AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function submitFormAjax() {
diff --git a/modules/context_ui/src/MenuBuilder.php b/modules/context_ui/src/MenuBuilder.php
index 9e26bc2..3acf4e7 100644
--- a/modules/context_ui/src/MenuBuilder.php
+++ b/modules/context_ui/src/MenuBuilder.php
@@ -19,14 +19,14 @@ class MenuBuilder {
   /**
    * The menu link plugin manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;
 
   /**
    * MenuBuilder constructor.
    *
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $menuLinkManager
+   * @param MenuLinkManagerInterface $menuLinkManager
    *   The menu link plugin manager.
    */
   public function __construct(MenuLinkManagerInterface $menuLinkManager) {
@@ -45,7 +45,7 @@ class MenuBuilder {
   /**
    * Adds a submenu item for the $entity item.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The given entity item.
    */
   public function addSubMenuItem(Context $entity) {
@@ -64,7 +64,7 @@ class MenuBuilder {
   /**
    * Updates the submenu item of the $entity item.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The given entity item.
    */
   public function updateSubMenuItem(Context $entity) {
@@ -89,7 +89,7 @@ class MenuBuilder {
   /**
    * Deletes the submenu item of the $entity item.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The given entity item.
    */
   public function deleteSubMenuItem(Context $entity) {
@@ -108,7 +108,7 @@ class MenuBuilder {
   /**
    * Return the URI string of the given context entity.
    *
-   * @param \Drupal\context\Entity\Context $entity
+   * @param Context $entity
    *   The context entity.
    *
    * @return string
diff --git a/modules/context_ui/src/Plugin/Block/ContextInspector.php b/modules/context_ui/src/Plugin/Block/ContextInspector.php
index 6d11343..e0155a7 100644
--- a/modules/context_ui/src/Plugin/Block/ContextInspector.php
+++ b/modules/context_ui/src/Plugin/Block/ContextInspector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\context_ui\Plugin\Block;
 
+use Drupal\Core\Extension\ModuleHandler;
+use Drupal\context\ContextManager;
 use Drupal\Core\Block\BlockBase;
 
 /**
@@ -26,12 +28,12 @@ class ContextInspector extends BlockBase {
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
+    /** @var ModuleHandler $moduleHandler */
     $moduleHandler = \Drupal::service('module_handler');
     $module = $moduleHandler->moduleExists('devel');
     $permission = \Drupal::currentUser()->hasPermission('access devel information');
     if ($module && $permission) {
-      /** @var \Drupal\context\ContextManager $context_manager */
+      /** @var ContextManager $context_manager */
       $context_manager = \Drupal::service('context.manager');
       /** @codingStandardsIgnoreStart * */
       $output = kpr($context_manager->getActiveContexts(), TRUE);
diff --git a/src/ContextInterface.php b/src/ContextInterface.php
index 754ea9c..feeae56 100644
--- a/src/ContextInterface.php
+++ b/src/ContextInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context;
 
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 
@@ -140,7 +141,7 @@ interface ContextInterface extends ConfigEntityInterface, EntityWithPluginCollec
   /**
    * Get a list of all conditions.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   The plugin collection.
    */
   public function getConditions();
@@ -151,7 +152,7 @@ interface ContextInterface extends ConfigEntityInterface, EntityWithPluginCollec
    * @param string $condition_id
    *   The condition to get.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   The specific Condition.
    */
   public function getCondition($condition_id);
diff --git a/src/ContextManager.php b/src/ContextManager.php
index 04e8f98..382be36 100644
--- a/src/ContextManager.php
+++ b/src/ContextManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\context;
 
+use Drupal\Context\ContextInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\context\Entity\Context;
 use Drupal\context\Plugin\ContextReaction\Blocks;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ -29,21 +31,21 @@ class ContextManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * Wraps the context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
@@ -60,7 +62,7 @@ class ContextManager {
   /**
    * An array of all contexts.
    *
-   * @var \Drupal\Context\ContextInterface[]
+   * @var ContextInterface[]
    */
   protected $contexts = [];
 
@@ -74,35 +76,35 @@ class ContextManager {
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   private $entityFormBuilder;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /** The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
 
   /**
    * Construct.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The Drupal entity manager service.
    * @param \Drupal\context\Entity\ContextRepositoryInterface $contextRepository
    *   The drupal context repository service.
    * @param \Drupal\context\Entity\ContextHandlerInterface $contextHandler
    *   The Drupal context handler service.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entityFormBuilder
+   * @param EntityFormBuilderInterface $entityFormBuilder
    *   The Drupal EntityFormBuilder service.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The Drupal theme manager service.
    */
   public function __construct(
@@ -354,7 +356,7 @@ class ContextManager {
   /**
    * Apply context to all the context aware conditions in the collection.
    *
-   * @param \Drupal\Core\Condition\ConditionPluginCollection $conditions
+   * @param ConditionPluginCollection $conditions
    *   A collection of conditions to apply context to.
    *
    * @return bool
diff --git a/src/ContextMenuActiveTrail.php b/src/ContextMenuActiveTrail.php
index 7e5d275..3865fc9 100644
--- a/src/ContextMenuActiveTrail.php
+++ b/src/ContextMenuActiveTrail.php
@@ -16,7 +16,7 @@ class ContextMenuActiveTrail extends MenuActiveTrail {
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
diff --git a/src/ContextReactionInterface.php b/src/ContextReactionInterface.php
index 7397633..d489e3a 100644
--- a/src/ContextReactionInterface.php
+++ b/src/ContextReactionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Executable\ExecutableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
@@ -23,7 +24,7 @@ interface ContextReactionInterface extends ConfigurableInterface, PluginFormInte
   /**
    * Provides a human readable summary of the condition's configuration.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   An object that, when cast to a string, returns the translated string.
    */
   public function summary();
diff --git a/src/Entity/Context.php b/src/Entity/Context.php
index 5ed9622..204e4df 100644
--- a/src/Entity/Context.php
+++ b/src/Entity/Context.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\context\Entity;
 
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\context\ContextReactionPluginBase;
+use Drupal\Core\Condition\ConditionPluginBase;
 use Drupal;
 use InvalidArgumentException;
 use Drupal\context\ContextInterface;
@@ -91,14 +94,14 @@ class Context extends ConfigEntityBase implements ContextInterface {
   /**
    * The context conditions as a collection.
    *
-   * @var \Drupal\Core\Condition\ConditionPluginCollection
+   * @var ConditionPluginCollection
    */
   protected $conditionsCollection;
 
   /**
    * The context reactions as a collection.
    *
-   * @var \Drupal\context\Plugin\ContextReactionPluginCollection
+   * @var ContextReactionPluginCollection
    */
   protected $reactionsCollection;
 
@@ -351,7 +354,7 @@ class Context extends ConfigEntityBase implements ContextInterface {
   /**
    * Gets the plugin collections used by this entity.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ -395,9 +398,9 @@ class Context extends ConfigEntityBase implements ContextInterface {
    */
   public function calculateDependencies() {
     $dependencies = parent::calculateDependencies();
-    /** @var \Drupal\context\Plugin\ContextReactionPluginCollection $reaction_collection */
+    /** @var ContextReactionPluginCollection $reaction_collection */
     $reaction_collection = $this->getReactions();
-    /** @var \Drupal\Core\Condition\ConditionPluginCollection $condition_collection */
+    /** @var ConditionPluginCollection $condition_collection */
     $condition_collection = $this->getConditions();
     if (empty($reaction_collection) && empty($condition_collection)) {
       return $dependencies;
@@ -411,13 +414,13 @@ class Context extends ConfigEntityBase implements ContextInterface {
   /**
    * Set context dependencies based on the reactions set.
    *
-   * @param \Drupal\context\Plugin\ContextReactionPluginCollection $reaction_collection
+   * @param ContextReactionPluginCollection $reaction_collection
    *   The Reaction Plugin collection.
    */
   public function calculateReactionDependencies(ContextReactionPluginCollection $reaction_collection) {
     $instance_ids = $reaction_collection->getInstanceIds();
     foreach ($instance_ids as $instance_id) {
-      /** @var \Drupal\context\ContextReactionPluginBase $plugin */
+      /** @var ContextReactionPluginBase $plugin */
       $plugin = $reaction_collection->get($instance_id);
       $plugin_dependencies = $this->getPluginDependencies($plugin);
       $this->addDependencies($plugin_dependencies);
@@ -427,13 +430,13 @@ class Context extends ConfigEntityBase implements ContextInterface {
   /**
    * Set context dependencies based on the conditions set.
    *
-   * @param \Drupal\Core\Condition\ConditionPluginCollection $condition_collection
+   * @param ConditionPluginCollection $condition_collection
    *   The Condition Plugin collection.
    */
   public function calculateConditionDependencies(ConditionPluginCollection $condition_collection) {
     $instance_ids = $condition_collection->getInstanceIds();
     foreach ($instance_ids as $instance_id) {
-      /** @var \Drupal\Core\Condition\ConditionPluginBase $plugin */
+      /** @var ConditionPluginBase $plugin */
       $plugin = $condition_collection->get($instance_id);
       $plugin_dependencies = $this->getPluginDependencies($plugin);
       $this->addDependencies($plugin_dependencies);
diff --git a/src/Entity/ContextAccess.php b/src/Entity/ContextAccess.php
index 094c62c..0f0416c 100644
--- a/src/Entity/ContextAccess.php
+++ b/src/Entity/ContextAccess.php
@@ -17,7 +17,7 @@ class ContextAccess extends EntityAccessControlHandler implements EntityHandlerI
   /**
    * Constructs an access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    */
   public function __construct(EntityTypeInterface $entity_type) {
diff --git a/src/EventSubscriber/BlockPageDisplayVariantSubscriber.php b/src/EventSubscriber/BlockPageDisplayVariantSubscriber.php
index e0fa693..38e1c21 100644
--- a/src/EventSubscriber/BlockPageDisplayVariantSubscriber.php
+++ b/src/EventSubscriber/BlockPageDisplayVariantSubscriber.php
@@ -18,14 +18,14 @@ class BlockPageDisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;
 
   /**
    * Construct a block page display variant.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ -35,7 +35,7 @@ class BlockPageDisplayVariantSubscriber implements EventSubscriberInterface {
   /**
    * Selects the context block page display variant.
    *
-   * @param \Drupal\Core\Render\PageDisplayVariantSelectionEvent $event
+   * @param PageDisplayVariantSelectionEvent $event
    *   The event to process.
    */
   public function onSelectPageDisplayVariant(PageDisplayVariantSelectionEvent $event) {
diff --git a/src/Plugin/Condition/ContextAll.php b/src/Plugin/Condition/ContextAll.php
index f9d307c..a5428af 100644
--- a/src/Plugin/Condition/ContextAll.php
+++ b/src/Plugin/Condition/ContextAll.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\context\Plugin\Condition;
 
+use Drupal\context\ContextInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Condition\ConditionPluginBase;
@@ -22,7 +24,7 @@ class ContextAll extends ConditionPluginBase implements ContainerFactoryPluginIn
   /**
    * Context Manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;
 
@@ -35,7 +37,7 @@ class ContextAll extends ConditionPluginBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\context\ContextManager $context_manager
+   * @param ContextManager $context_manager
    *   A context manager for checking the current active contexts.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ContextManager $context_manager) {
@@ -72,12 +74,12 @@ class ContextAll extends ConditionPluginBase implements ContainerFactoryPluginIn
       // Strip out `~` for negated contexts.
       $id = ltrim($id, '~');
 
-      /** @var \Drupal\context\ContextInterface $context */
+      /** @var ContextInterface $context */
       $context = $this->contextManager->getContext($id);
       if (empty($context)) {
         continue;
       }
-      /** @var \Drupal\Core\Condition\ConditionInterface[] $context_conditions */
+      /** @var ConditionInterface[] $context_conditions */
       $context_conditions = $context->getConditions();
       foreach ($context_conditions as $condition) {
         $cache_contexts = Cache::mergeContexts($cache_contexts, $condition->getCacheContexts());
@@ -145,7 +147,7 @@ class ContextAll extends ConditionPluginBase implements ContainerFactoryPluginIn
 
     // Handle negated contexts first.
     foreach ($negated_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $negated_context */
+      /** @var ContextInterface $negated_context */
       $negated_context = $this->contextManager->getContext($name);
       if ($this->contextManager->evaluateContextConditions($negated_context) && !$negated_context->disabled()) {
         return FALSE;
@@ -154,7 +156,7 @@ class ContextAll extends ConditionPluginBase implements ContainerFactoryPluginIn
 
     // Now handle required contexts.
     foreach ($required_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $required_context */
+      /** @var ContextInterface $required_context */
       if ($required_context = $this->contextManager->getContext($name)) {
         if (!$this->contextManager->evaluateContextConditions($required_context) && !$required_context->disabled()) {
           return FALSE;
@@ -163,7 +165,7 @@ class ContextAll extends ConditionPluginBase implements ContainerFactoryPluginIn
     }
 
     // Handle the asterisks/wildcard contexts.
-    /** @var \Drupal\context\ContextInterface $asterisk_contexts */
+    /** @var ContextInterface $asterisk_contexts */
     if ($asterisk_contexts = $this->contextManager->getContext($asterisk_context)) {
       foreach ($asterisk_contexts as $context) {
         if (!$this->contextManager->evaluateContextConditions($context) && !$context->disabled()) {
diff --git a/src/Plugin/Condition/ContextAny.php b/src/Plugin/Condition/ContextAny.php
index 5398a23..5ba8205 100644
--- a/src/Plugin/Condition/ContextAny.php
+++ b/src/Plugin/Condition/ContextAny.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\context\Plugin\Condition;
 
+use Drupal\context\ContextInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Condition\ConditionPluginBase;
@@ -22,7 +24,7 @@ class ContextAny extends ConditionPluginBase implements ContainerFactoryPluginIn
   /**
    * Context Manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;
 
@@ -35,7 +37,7 @@ class ContextAny extends ConditionPluginBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\context\ContextManager $context_manager
+   * @param ContextManager $context_manager
    *   A context manager for checking the current active contexts.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ContextManager $context_manager) {
@@ -72,9 +74,9 @@ class ContextAny extends ConditionPluginBase implements ContainerFactoryPluginIn
       // Strip out `~` for negated contexts.
       $id = ltrim($id, '~');
 
-      /** @var \Drupal\context\ContextInterface $context */
+      /** @var ContextInterface $context */
       $context = $this->contextManager->getContext($id);
-      /** @var \Drupal\Core\Condition\ConditionInterface[] $context_conditions */
+      /** @var ConditionInterface[] $context_conditions */
       $context_conditions = $context->getConditions();
       foreach ($context_conditions as $condition) {
         $cache_contexts = Cache::mergeContexts($cache_contexts, $condition->getCacheContexts());
@@ -142,7 +144,7 @@ class ContextAny extends ConditionPluginBase implements ContainerFactoryPluginIn
 
     // Handle negated contexts first.
     foreach ($negated_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $negated_context */
+      /** @var ContextInterface $negated_context */
       $negated_context = $this->contextManager->getContext($name);
       if ($this->contextManager->evaluateContextConditions($negated_context) && !$negated_context->disabled()) {
         return FALSE;
@@ -151,7 +153,7 @@ class ContextAny extends ConditionPluginBase implements ContainerFactoryPluginIn
 
     // Now handle required contexts.
     foreach ($required_contexts as $name) {
-      /** @var \Drupal\context\ContextInterface $required_context */
+      /** @var ContextInterface $required_context */
       if ($required_context = $this->contextManager->getContext($name)) {
         if ($this->contextManager->evaluateContextConditions($required_context) && !$required_context->disabled()) {
           return TRUE;
@@ -160,7 +162,7 @@ class ContextAny extends ConditionPluginBase implements ContainerFactoryPluginIn
     }
 
     // Handle the asterisks/wildcard contexts.
-    /** @var \Drupal\context\ContextInterface $asterisk_contexts */
+    /** @var ContextInterface $asterisk_contexts */
     if ($asterisk_contexts = $this->contextManager->getContext($asterisk_context)) {
       foreach ($asterisk_contexts as $context) {
         if ($this->contextManager->evaluateContextConditions($context) && !$context->disabled()) {
diff --git a/src/Plugin/Condition/HttpStatusCode.php b/src/Plugin/Condition/HttpStatusCode.php
index 8c323f9..092420e 100644
--- a/src/Plugin/Condition/HttpStatusCode.php
+++ b/src/Plugin/Condition/HttpStatusCode.php
@@ -22,7 +22,7 @@ class HttpStatusCode extends ConditionPluginBase implements ContainerFactoryPlug
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -35,7 +35,7 @@ class HttpStatusCode extends ConditionPluginBase implements ContainerFactoryPlug
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, RequestStack $request_stack) {
@@ -122,7 +122,7 @@ class HttpStatusCode extends ConditionPluginBase implements ContainerFactoryPlug
       return TRUE;
     }
 
-    /** @var \Symfony\Component\HttpKernel\Exception\HttpException $exception */
+    /** @var HttpException $exception */
     $exception = $this->requestStack->getCurrentRequest()->attributes->get('exception');
 
     if (!empty($exception) && $exception instanceof HttpException) {
diff --git a/src/Plugin/Condition/RequestDomain.php b/src/Plugin/Condition/RequestDomain.php
index 27ed75c..917c076 100644
--- a/src/Plugin/Condition/RequestDomain.php
+++ b/src/Plugin/Condition/RequestDomain.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context\Plugin\Condition;
 
+use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Condition\ConditionPluginBase;
@@ -21,21 +22,21 @@ class RequestDomain extends ConditionPluginBase implements ContainerFactoryPlugi
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * Constructs a RequestPath condition plugin.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/Condition/UserProfilePage.php b/src/Plugin/Condition/UserProfilePage.php
index 34dd096..eabdadf 100644
--- a/src/Plugin/Condition/UserProfilePage.php
+++ b/src/Plugin/Condition/UserProfilePage.php
@@ -27,21 +27,21 @@ class UserProfilePage extends ConditionPluginBase implements ContainerFactoryPlu
   /**
    * Service current_route_match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   private $currentRouteMatch;
 
   /**
    * Service entity_field.manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   private $entityFieldManager;
 
   /**
    * Service current_user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   private $currentUser;
 
diff --git a/src/Plugin/Condition/ViewInclusion.php b/src/Plugin/Condition/ViewInclusion.php
index ce1e92b..5b8aed7 100644
--- a/src/Plugin/Condition/ViewInclusion.php
+++ b/src/Plugin/Condition/ViewInclusion.php
@@ -22,14 +22,14 @@ class ViewInclusion extends ConditionPluginBase implements ContainerFactoryPlugi
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   private $currentRouteMatch;
 
@@ -45,9 +45,9 @@ class ViewInclusion extends ConditionPluginBase implements ContainerFactoryPlugi
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The current route match service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, CurrentRouteMatch $currentRouteMatch) {
diff --git a/src/Plugin/ContextReaction/Blocks.php b/src/Plugin/ContextReaction/Blocks.php
index 8ccddc5..e658bf0 100644
--- a/src/Plugin/ContextReaction/Blocks.php
+++ b/src/Plugin/ContextReaction/Blocks.php
@@ -63,63 +63,63 @@ class Blocks extends ContextReactionPluginBase implements ContainerFactoryPlugin
   /**
    * Contains a temporary collection of blocks.
    *
-   * @var \Drupal\context\Reaction\Blocks\BlockCollection
+   * @var BlockCollection
    */
   protected $blocksCollection;
 
   /**
    * The Drupal UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The current account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $blockManager;
 
@@ -428,7 +428,7 @@ class Blocks extends ContextReactionPluginBase implements ContainerFactoryPlugin
   /**
    * Get all blocks as a collection.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface[]|BlockCollection
+   * @return BlockPluginInterface[]|BlockCollection
    *   The collection of blocks.
    */
   public function getBlocks() {
@@ -445,7 +445,7 @@ class Blocks extends ContextReactionPluginBase implements ContainerFactoryPlugin
    * @param string $blockId
    *   The ID of the block to get.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The specified block plugin.
    */
   public function getBlock($blockId) {
@@ -650,7 +650,7 @@ class Blocks extends ContextReactionPluginBase implements ContainerFactoryPlugin
 
       // Add each block specified for the region if there are any.
       if (isset($blocks[$region])) {
-        /** @var \Drupal\Core\Block\BlockPluginInterface $block */
+        /** @var BlockPluginInterface $block */
         foreach ($blocks[$region] as $block_id => $block) {
           $configuration = $block->getConfiguration();
 
@@ -725,7 +725,7 @@ class Blocks extends ContextReactionPluginBase implements ContainerFactoryPlugin
   /**
    * Check to see if the block should be uniquely placed.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   The block plugin.
    *
    * @return bool
diff --git a/src/Plugin/ContextReaction/Menu.php b/src/Plugin/ContextReaction/Menu.php
index 5e46307..b752267 100644
--- a/src/Plugin/ContextReaction/Menu.php
+++ b/src/Plugin/ContextReaction/Menu.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context\Plugin\ContextReaction;
 
+use Drupal\Core\Menu\MenuParentFormSelector;
 use Drupal\context\ContextReactionPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Menu\MenuParentFormSelectorInterface;
@@ -21,7 +22,7 @@ class Menu extends ContextReactionPluginBase implements ContainerFactoryPluginIn
   /**
    * The menu parent form selector service.
    *
-   * @var \Drupal\Core\Menu\MenuParentFormSelector
+   * @var MenuParentFormSelector
    */
   protected $menuParentFormSelector;
 
diff --git a/src/Plugin/ContextReaction/Regions.php b/src/Plugin/ContextReaction/Regions.php
index 81513e9..0d43617 100644
--- a/src/Plugin/ContextReaction/Regions.php
+++ b/src/Plugin/ContextReaction/Regions.php
@@ -30,14 +30,14 @@ class Regions extends ContextReactionPluginBase implements ContainerFactoryPlugi
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
diff --git a/src/Plugin/ContextReaction/Theme.php b/src/Plugin/ContextReaction/Theme.php
index c6889f7..153d957 100644
--- a/src/Plugin/ContextReaction/Theme.php
+++ b/src/Plugin/ContextReaction/Theme.php
@@ -22,14 +22,14 @@ class Theme extends ContextReactionPluginBase implements ContainerFactoryPluginI
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
diff --git a/src/Plugin/DisplayVariant/ContextBlockPageVariant.php b/src/Plugin/DisplayVariant/ContextBlockPageVariant.php
index 99fe884..c342066 100644
--- a/src/Plugin/DisplayVariant/ContextBlockPageVariant.php
+++ b/src/Plugin/DisplayVariant/ContextBlockPageVariant.php
@@ -28,7 +28,7 @@ class ContextBlockPageVariant extends VariantBase implements PageVariantInterfac
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
@@ -49,14 +49,14 @@ class ContextBlockPageVariant extends VariantBase implements PageVariantInterfac
   /**
    * The display variant plugin manager.
    *
-   * @var \Drupal\Core\Display\VariantManager
+   * @var VariantManager
    */
   protected $displayVariant;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
@@ -69,11 +69,11 @@ class ContextBlockPageVariant extends VariantBase implements PageVariantInterfac
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The context module manager.
-   * @param \Drupal\Core\Display\VariantManager $displayVariant
+   * @param VariantManager $displayVariant
    *   The variant manager.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The Drupal theme manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContextManager $contextManager, VariantManager $displayVariant, ThemeManagerInterface $themeManager) {
diff --git a/src/Reaction/Annotation/ContextReaction.php b/src/Reaction/Annotation/ContextReaction.php
index 27e0b11..f8affd2 100644
--- a/src/Reaction/Annotation/ContextReaction.php
+++ b/src/Reaction/Annotation/ContextReaction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context\Reaction\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class ContextReaction extends Plugin {
   /**
    * The human-readable name of the context reaction.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Reaction/Blocks/BlockCollection.php b/src/Reaction/Blocks/BlockCollection.php
index 399d8d5..505f395 100644
--- a/src/Reaction/Blocks/BlockCollection.php
+++ b/src/Reaction/Blocks/BlockCollection.php
@@ -25,14 +25,14 @@ class BlockCollection extends DefaultLazyPluginCollection {
    * @param string $theme
    *   The theme to get blocks for.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface[]
+   * @return BlockPluginInterface[]
    *   An associative array keyed by region, containing an associative array of
    *   block plugins.
    */
   public function getAllByRegion($theme) {
     $region_assignments = [];
 
-    /** @var \Drupal\Core\Block\BlockPluginInterface[] $this */
+    /** @var BlockPluginInterface[] $this */
     foreach ($this as $block_id => $block) {
       $configuration = $block->getConfiguration();
 
diff --git a/src/Reaction/Blocks/Controller/ContextReactionBlocksController.php b/src/Reaction/Blocks/Controller/ContextReactionBlocksController.php
index 7e42a60..a2b16cd 100644
--- a/src/Reaction/Blocks/Controller/ContextReactionBlocksController.php
+++ b/src/Reaction/Blocks/Controller/ContextReactionBlocksController.php
@@ -23,41 +23,41 @@ class ContextReactionBlocksController extends ControllerBase {
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The Context modules context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * Constructs a new ContextReactionBlocksController object.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
+   * @param BlockManagerInterface $blockManager
    *   The block manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The Drupal context repository.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The handler of the available themes.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context modules context manager.
    */
   public function __construct(
@@ -87,9 +87,9 @@ class ContextReactionBlocksController extends ControllerBase {
   /**
    * Display a library of blocks that can be added to the context reaction.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context the blocks reaction belongs to.
    * @param string $reaction_id
    *   The ID of the blocks reaction that the selected block
@@ -193,12 +193,12 @@ class ContextReactionBlocksController extends ControllerBase {
   /**
    * Callback for the theme select list on the Context blocks reaction form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context the block reaction is located on.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function blocksFormThemeSelect(Request $request, ContextInterface $context) {
diff --git a/src/Reaction/Blocks/Form/BlockDeleteForm.php b/src/Reaction/Blocks/Form/BlockDeleteForm.php
index fcaec9d..04b8185 100644
--- a/src/Reaction/Blocks/Form/BlockDeleteForm.php
+++ b/src/Reaction/Blocks/Form/BlockDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\context\Reaction\Blocks\Form;
 
+use Drupal\context\Plugin\ContextReaction\Blocks;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\context\ContextInterface;
 use Drupal\context\ContextManager;
 use Drupal\Core\Ajax\AjaxResponse;
@@ -19,35 +21,35 @@ class BlockDeleteForm extends ConfirmFormBase {
   /**
    * The context that the block is being removed from.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;
 
   /**
    * The blocks reaction.
    *
-   * @var \Drupal\context\Plugin\ContextReaction\Blocks
+   * @var Blocks
    */
   protected $reaction;
 
   /**
    * The block that is being removed.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;
 
   /**
    * The Context module context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * Construct a condition delete form.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The context manager.
    */
   public function __construct(ContextManager $contextManager) {
@@ -138,7 +140,7 @@ class BlockDeleteForm extends ConfirmFormBase {
   /**
    * Handle when the form is submitted trough AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function submitFormAjax() {
diff --git a/src/Reaction/Blocks/Form/BlockFormBase.php b/src/Reaction/Blocks/Form/BlockFormBase.php
index db629ff..aaade90 100644
--- a/src/Reaction/Blocks/Form/BlockFormBase.php
+++ b/src/Reaction/Blocks/Form/BlockFormBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\context\Reaction\Blocks\Form;
 
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\context\Plugin\ContextReaction\Blocks;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\block\BlockInterface;
 use Drupal\block\BlockRepositoryInterface;
 use Drupal\block\Entity\Block;
 use Drupal\context\ContextManager;
@@ -37,98 +42,98 @@ abstract class BlockFormBase extends FormBase {
   /**
    * The plugin being configured.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;
 
   /**
    * The context entity the reaction belongs to.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;
 
   /**
    * The blocks reaction this block should be added to.
    *
-   * @var \Drupal\context\Plugin\ContextReaction\Blocks
+   * @var Blocks
    */
   protected $reaction;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $blockManager;
 
   /**
    * The Drupal context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The handler of the available themes.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The context reaction manager.
    *
-   * @var \Drupal\context\ContextReactionManager
+   * @var ContextReactionManager
    */
   protected $contextReactionManager;
 
   /**
    * The Context modules context manager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   protected $contextManager;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new VariantPluginFormBase.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $block_manager
+   * @param PluginManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $contextRepository
+   * @param ContextRepositoryInterface $contextRepository
    *   The Drupal context repository.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   * @param ThemeHandlerInterface $themeHandler
    *   The handler of the available themes.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
-   * @param \Drupal\context\ContextReactionManager $contextReactionManager
+   * @param ContextReactionManager $contextReactionManager
    *   The context reaction manager.
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   The Context modules context manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The current request.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(
@@ -173,7 +178,7 @@ abstract class BlockFormBase extends FormBase {
    * @param string $block_id
    *   Either a block ID, or the plugin ID used to create a new block.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface
+   * @return BlockPluginInterface
    *   The block plugin.
    */
   abstract protected function prepareBlock($block_id);
@@ -181,7 +186,7 @@ abstract class BlockFormBase extends FormBase {
   /**
    * Get the value to use for the submit button.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   An object that, when cast to a string, returns the translated string.
    */
   abstract protected function getSubmitValue();
@@ -191,9 +196,9 @@ abstract class BlockFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context the reaction belongs to.
    * @param string|null $reaction_id
    *   The ID of the blocks reaction the block should be added to.
@@ -299,7 +304,7 @@ abstract class BlockFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ -320,7 +325,7 @@ abstract class BlockFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -365,7 +370,7 @@ abstract class BlockFormBase extends FormBase {
   /**
    * Handle when the form is submitted trough AJAX.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AJAX response.
    */
   public function submitFormAjax(array &$form, FormStateInterface $form_state) {
@@ -419,7 +424,7 @@ abstract class BlockFormBase extends FormBase {
    * getEntity method is available. Since hook_form_block_form_alter is also
    * called in this form, this will break modules depending on this method.
    *
-   * @return \Drupal\block\BlockInterface
+   * @return BlockInterface
    *   A block entity.
    */
   public function getEntity() {
diff --git a/src/Reaction/ContextReactionFormBase.php b/src/Reaction/ContextReactionFormBase.php
index 4fd5750..ccab8af 100644
--- a/src/Reaction/ContextReactionFormBase.php
+++ b/src/Reaction/ContextReactionFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\context\Reaction;
 
+use Drupal\context\ContextReactionInterface;
 use Drupal\context\ContextInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -14,14 +15,14 @@ abstract class ContextReactionFormBase extends FormBase {
   /**
    * The context.
    *
-   * @var \Drupal\context\ContextInterface
+   * @var ContextInterface
    */
   protected $context;
 
   /**
    * The context reaction.
    *
-   * @var \Drupal\context\ContextReactionInterface
+   * @var ContextReactionInterface
    */
   protected $reaction;
 
@@ -30,9 +31,9 @@ abstract class ContextReactionFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\context\ContextInterface $context
+   * @param ContextInterface $context
    *   The context that contains the reaction.
    * @param int $reaction_id
    *   The id of the reaction that is being configured.
diff --git a/src/Theme/ThemeSwitcherNegotiator.php b/src/Theme/ThemeSwitcherNegotiator.php
index 36fbbde..7ed1c27 100644
--- a/src/Theme/ThemeSwitcherNegotiator.php
+++ b/src/Theme/ThemeSwitcherNegotiator.php
@@ -15,7 +15,7 @@ class ThemeSwitcherNegotiator implements ThemeNegotiatorInterface {
   /**
    * ContextManager.
    *
-   * @var \Drupal\context\ContextManager
+   * @var ContextManager
    */
   private $contextManager;
 
@@ -36,7 +36,7 @@ class ThemeSwitcherNegotiator implements ThemeNegotiatorInterface {
   /**
    * Service constructor.
    *
-   * @param \Drupal\context\ContextManager $contextManager
+   * @param ContextManager $contextManager
    *   ContextManager.
    */
   public function __construct(ContextManager $contextManager) {
diff --git a/tests/src/Kernel/ContextAllAnyTest.php b/tests/src/Kernel/ContextAllAnyTest.php
index 1eb2c95..449a87a 100644
--- a/tests/src/Kernel/ContextAllAnyTest.php
+++ b/tests/src/Kernel/ContextAllAnyTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\context\Kernel;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\path_alias\AliasManagerInterface;
+use Drupal\context\Plugin\Condition\RequestDomain;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ -32,28 +35,28 @@ class ContextAllAnyTest extends KernelTestBase {
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;
 
   /**
    * The path alias manager used for testing.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
@@ -87,7 +90,7 @@ class ContextAllAnyTest extends KernelTestBase {
 
     $request = Request::create('/node/22');
     $this->requestStack->push($request);
-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('context_all');
 
     $this->aliasManager->addAlias('/node/22', '/node/22');
@@ -154,7 +157,7 @@ class ContextAllAnyTest extends KernelTestBase {
   public function testContextAny() {
     $request = Request::create('/node/2');
     $this->requestStack->push($request);
-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('context');
 
     $this->aliasManager->addAlias('/node/2', '/node/2');
diff --git a/tests/src/Kernel/HttpStatusCodeTest.php b/tests/src/Kernel/HttpStatusCodeTest.php
index 433959b..da5cc0c 100644
--- a/tests/src/Kernel/HttpStatusCodeTest.php
+++ b/tests/src/Kernel/HttpStatusCodeTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\context\Kernel;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\path_alias\AliasManagerInterface;
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\system\Tests\Routing\MockAliasManager;
@@ -21,21 +24,21 @@ class HttpStatusCodeTest extends KernelTestBase {
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;
 
   /**
    * The path alias manager used for testing.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -47,7 +50,7 @@ class HttpStatusCodeTest extends KernelTestBase {
   /**
    * Current path stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
@@ -83,7 +86,7 @@ class HttpStatusCodeTest extends KernelTestBase {
     $request->attributes->set('exception', new HttpException(200));
     $this->requestStack->push($request);
 
-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition * */
+    /** @var RequestPath $condition * */
     $condition = $this->pluginManager->createInstance('http_status_code');
     $condition->setConfig('status_codes', $statusCodes);
 
@@ -127,7 +130,7 @@ class HttpStatusCodeTest extends KernelTestBase {
     $request->attributes->set('exception', new HttpException(200));
     $this->requestStack->push($request);
 
-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition * */
+    /** @var RequestPath $condition * */
     $condition = $this->pluginManager->createInstance('http_status_code');
     $condition->setConfig('status_codes', $statusCodes);
     $condition->setConfig('negate', 1);
diff --git a/tests/src/Kernel/RequestDomainTest.php b/tests/src/Kernel/RequestDomainTest.php
index 86c085e..e28c944 100644
--- a/tests/src/Kernel/RequestDomainTest.php
+++ b/tests/src/Kernel/RequestDomainTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\context\Kernel;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\RequestDomain;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ -25,21 +27,21 @@ class RequestDomainTest extends KernelTestBase {
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;
 
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
@@ -66,7 +68,7 @@ class RequestDomainTest extends KernelTestBase {
     $this->requestStack->push($request);
     $domain = $request->getHost();
 
-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('request_domain');
     $condition->setConfig('domains', $domain);
     $this->assertTrue($condition->execute(), 'Domains match');
@@ -85,7 +87,7 @@ class RequestDomainTest extends KernelTestBase {
     $this->requestStack->push($request);
     $domain = $request->getHost();
 
-    /** @var \Drupal\context\Plugin\Condition\RequestDomain $condition */
+    /** @var RequestDomain $condition */
     $condition = $this->pluginManager->createInstance('request_domain');
     $condition->setConfig('negate', 1);
 
diff --git a/tests/src/Kernel/RequestPathExclusionTest.php b/tests/src/Kernel/RequestPathExclusionTest.php
index 10fe0df..a2f79d8 100644
--- a/tests/src/Kernel/RequestPathExclusionTest.php
+++ b/tests/src/Kernel/RequestPathExclusionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\context\Kernel;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\RequestPathExclusion;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\system\Tests\Routing\MockAliasManager;
@@ -25,28 +27,28 @@ class RequestPathExclusionTest extends KernelTestBase {
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;
 
   /**
    * The path alias manager used for testing.
    *
-   * @var \Drupal\system\Tests\Routing\MockAliasManager
+   * @var MockAliasManager
    */
   protected $aliasManager;
 
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
@@ -81,7 +83,7 @@ class RequestPathExclusionTest extends KernelTestBase {
     $this->requestStack->push($request);
 
     // Test a standard path.
-    /** @var \Drupal\context\Plugin\Condition\RequestPathExclusion $condition */
+    /** @var RequestPathExclusion $condition */
     $condition = $this->pluginManager->createInstance('request_path_exclusion');
     $condition->setConfig('pages', $pages);
     $this->aliasManager->addAlias('/my/exclude/page2', '/my/exclude/page2');
diff --git a/tests/src/Kernel/UserProfilePageTest.php b/tests/src/Kernel/UserProfilePageTest.php
index 557a6ce..c8bc250 100644
--- a/tests/src/Kernel/UserProfilePageTest.php
+++ b/tests/src/Kernel/UserProfilePageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\context\Kernel;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\UserProfilePage;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ -30,21 +32,21 @@ class UserProfilePageTest extends KernelTestBase {
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;
 
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
@@ -73,7 +75,7 @@ class UserProfilePageTest extends KernelTestBase {
     $request->attributes->set('_route_object', new Route('/node/'));
     $this->requestStack->push($request);
 
-    /** @var \Drupal\context\Plugin\Condition\UserProfilePage $condition */
+    /** @var UserProfilePage $condition */
     $condition = $this->pluginManager->createInstance('user_status');
 
     // Checks if viewing_profile is set to not work on nodes.
@@ -130,7 +132,7 @@ class UserProfilePageTest extends KernelTestBase {
     $request->attributes->set('_route_object', new Route('/node/'));
     $this->requestStack->push($request);
 
-    /** @var \Drupal\context\Plugin\Condition\UserProfilePage $condition */
+    /** @var UserProfilePage $condition */
     $condition = $this->pluginManager->createInstance('user_status');
     $condition->setConfig('negate', 1);
 
diff --git a/tests/src/Kernel/ViewInclusionTest.php b/tests/src/Kernel/ViewInclusionTest.php
index 0ab0983..32ab491 100644
--- a/tests/src/Kernel/ViewInclusionTest.php
+++ b/tests/src/Kernel/ViewInclusionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\context\Kernel;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\context\Plugin\Condition\ViewInclusion;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\KernelTests\KernelTestBase;
@@ -26,21 +28,21 @@ class ViewInclusionTest extends KernelTestBase {
   /**
    * The condition plugin manager used for testing.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $pluginManager;
 
   /**
    * The request stack used for testing.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
@@ -68,7 +70,7 @@ class ViewInclusionTest extends KernelTestBase {
     $request->attributes->set('_route_object', new Route('/node/'));
     $this->requestStack->push($request);
 
-    /** @var \Drupal\context\Plugin\Condition\ViewInclusion $condition */
+    /** @var ViewInclusion $condition */
     $condition = $this->pluginManager->createInstance('view_inclusion');
     $condition->setConfig('view_inclusion', ['view-frontpage-page_1' => 'view-frontpage-page_1']);
     $this->assertTrue($condition->execute(), 'The path does not match');
