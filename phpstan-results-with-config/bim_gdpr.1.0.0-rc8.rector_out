modules/contrib/bim_gdpr/bim_gdpr.module
modules/contrib/bim_gdpr/modules/services/bim_gdpr_service_facebook_id/src/Plugin/bim_gdpr/BimGdprServiceType/FacebookIdBimGdprServiceType.php
modules/contrib/bim_gdpr/modules/services/bim_gdpr_service_google_tag_manager/src/Plugin/bim_gdpr/BimGdprServiceType/GoogleTagManagerBimGdprServiceType.php
modules/contrib/bim_gdpr/modules/services/bim_gdpr_service_matomo/src/Plugin/bim_gdpr/BimGdprServiceType/MatomoBimGdprServiceType.php
modules/contrib/bim_gdpr/modules/services/bim_gdpr_service_youtube_embed/src/Plugin/bim_gdpr/BimGdprServiceType/YoutubeEmbedBimGdprServiceType.php
modules/contrib/bim_gdpr/src/BimGdprGroupInterface.php
modules/contrib/bim_gdpr/src/BimGdprGroupListBuilder.php
modules/contrib/bim_gdpr/src/BimGdprServiceInterface.php
modules/contrib/bim_gdpr/src/BimGdprServiceListBuilder.php
modules/contrib/bim_gdpr/src/Entity/BimGdprGroup.php
modules/contrib/bim_gdpr/src/Entity/BimGdprService.php
modules/contrib/bim_gdpr/src/Form/BimGdprGroupForm.php
modules/contrib/bim_gdpr/src/Form/BimGdprServiceForm.php
modules/contrib/bim_gdpr/src/Form/BimGdrpOverview.php
modules/contrib/bim_gdpr/src/Form/EntityDeleteForm.php
modules/contrib/bim_gdpr/src/Form/SettingsForm.php
modules/contrib/bim_gdpr/src/Form/TranslateListForm.php
modules/contrib/bim_gdpr/src/Generators/BimGdprServiceType/BimGdprServiceTypePluginGenerator.php
modules/contrib/bim_gdpr/src/Generators/BimGdprTemplate/BimGdprTemplatePluginGenerator.php
modules/contrib/bim_gdpr/src/Hierarchy/EntityHierarchyBase.php
modules/contrib/bim_gdpr/src/Hierarchy/Hierarchy.php
modules/contrib/bim_gdpr/src/Hierarchy/HierarchyInterface.php
modules/contrib/bim_gdpr/src/Plugin/bim_gdpr/BimGdprTemplate/BottomBannerBimGdprTemplate.php
modules/contrib/bim_gdpr/src/Plugin/bim_gdpr/BimGdprTemplate/ColumnChoiceBimGdprTemplate.php
modules/contrib/bim_gdpr/src/Plugin/bim_gdpr/BimGdprTemplate/DefaultTemplateBimGdprTemplate.php
modules/contrib/bim_gdpr/src/Plugin/bim_gdpr/BimGdprTemplate/NoTemplateBimGdprTemplate.php
modules/contrib/bim_gdpr/src/Plugin/bim_gdpr/BimGdprTemplate/QuickTemplateBimGdprTemplate.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprServiceType/AbstractBimGdprServiceType.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprServiceType/BimGdprServiceTypeAnnotation.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprServiceType/BimGdprServiceTypeInterface.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprServiceType/BimGdprServiceTypePluginManager.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/AbstractBimGdprTemplate.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/BimGdprTemplateAnnotation.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/BimGdprTemplateInterface.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/BimGdprTemplatePluginManager.php
modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/BimGdprTemplateTrait.php
modules/contrib/bim_gdpr/src/Services/BimGdprInitializer.php
modules/contrib/bim_gdpr/src/Services/HierarchyStorage.php
modules/contrib/bim_gdpr/src/Services/TemplateManager.php
modules/contrib/bim_gdpr/src/Storage/TranslatableConfigEntityFormTrait.php
modules/contrib/bim_gdpr/src/Storage/TranslatableConfigEntityInterface.php
modules/contrib/bim_gdpr/src/Storage/TranslatableConfigEntityStorage.php
modules/contrib/bim_gdpr/src/Storage/TranslatableConfigEntityTrait.php
modules/contrib/bim_gdpr/src/Tools/DragTable.php

22 files with changes
=====================

1) modules/contrib/bim_gdpr/src/Tools/DragTable.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * THe renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * DragTable constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   THe renderer.
    * @param bool $draggable
    *   Is table draggable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/bim_gdpr/src/Storage/TranslatableConfigEntityTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\Storage;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Trait translatable config entity trait.
  *
@@ @@
   /**
    * Storage.
    *
-   * @var \Drupal\bim_gdpr\Storage\TranslatableConfigEntityStorage
+   * @var TranslatableConfigEntityStorage
    */
   protected $storage;

@@ @@
   /**
    * Return the storage.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityStorage|\Drupal\Core\Entity\EntityStorageInterface
+   * @return TranslatableConfigEntityStorage|EntityStorageInterface
    *   The storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getStorage() {
     if (is_null($this->storage)) {
@@ @@
    * @param string $languageId
    *   The language id.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface
+   * @return TranslatableConfigEntityInterface
    *   The translation.
    */
   public function getTranslation(string $languageId) {
@@ @@
    * @param bool $nullIfNotTranslated
    *   Return null if not exisiting in this language, else return default lang.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface|null
+   * @return TranslatableConfigEntityInterface|null
    *   The entity.
    */
   public static function loadLanguaged($id, $languageId, $nullIfNotTranslated = FALSE) {
@@ @@
    * @param bool $nullIfNotTranslated
    *   Return null if not exisiting in this language, else return default lang.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface[]
+   * @return TranslatableConfigEntityInterface[]
    *   The entity.
    */
   public static function loadMultipleLanguaged(array $ids = NULL, $languageId, $nullIfNotTranslated = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/bim_gdpr/src/Storage/TranslatableConfigEntityStorage.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Return the prefix.
    *
-   * @param \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface $entity
+   * @param TranslatableConfigEntityInterface $entity
    *   The entity.
    *
    * @return string
@@ @@
    *   Return null if not exisiting in this language, else return default
    *   langcode.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface|null
+   * @return TranslatableConfigEntityInterface|null
    *   The entity.
    */
   public function loadLanguaged($id, $languageId, $nullIfNotTranslated = FALSE) {
@@ @@
    * @param string $languageId
    *   The language id.
    *
-   * @return \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface|null
+   * @return TranslatableConfigEntityInterface|null
    *   The entity.
    */
   public function loadMultipleLanguaged(array $ids, $languageId) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/bim_gdpr/src/Storage/TranslatableConfigEntityFormTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\Storage;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\bim_gdpr\Storage\TranslatableConfigEntityInterface $entity */
+    /** @var TranslatableConfigEntityInterface $entity */
     $entity = parent::buildEntity($form, $form_state);

     $this->initEntity();
@@ @@
   /**
    * Init the entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function initEntity() {
     $currentLanguage = \Drupal::languageManager()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/bim_gdpr/src/Services/TemplateManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\Services;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\bim_gdpr\PluginManager\BimGdprTemplate\AbstractBimGdprTemplate;
 use Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Entity TYpe manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * Template plugin manager.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager
+   * @var BimGdprTemplatePluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * THe language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * TemplateManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   THe entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   THe config factory.
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager $pluginManager
+   * @param BimGdprTemplatePluginManager $pluginManager
    *   The plugin manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The Language manager.
    */
   public function __construct(
@@ @@
    * @param string|null $key
    *   THe key.
    *
-   * @return array|\Drupal\Core\Config\ImmutableConfig|mixed|null
+   * @return array|ImmutableConfig|mixed|null
    *   THe settings.
    */
   public function getLocaleSettings($key = NULL) {
@@ @@
   /**
    * Return the list of available templates.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\AbstractBimGdprTemplate[]|\Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginWrapper[]
+   * @return AbstractBimGdprTemplate[]|\Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginWrapper[]
    *   All plugin managers.
    */
   public function getAvailableTemplates() {
@@ @@
   /**
    * Return the plugin manager.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplatePluginManager
+   * @return BimGdprTemplatePluginManager
    *   The plugin manager.
    */
   public function getPluginManager(): BimGdprTemplatePluginManager {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/bim_gdpr/src/Services/HierarchyStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\Services;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\bim_gdpr\BimGdprGroupInterface;
 use Drupal\bim_gdpr\BimGdprServiceInterface;
 use Drupal\bim_gdpr\Hierarchy\Hierarchy;
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * THe config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * ServiceRepository constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   THe entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $configFactory) {
@@ @@
   /**
    * Return the hierarchy of services.
    *
-   * @return \Drupal\bim_gdpr\Hierarchy\HierarchyInterface
+   * @return HierarchyInterface
    *   The hierararchy.
    */
   public function getHierarchy(): HierarchyInterface {
@@ @@
   /**
    * Return the list of groups.
    *
-   * @return \Drupal\bim_gdpr\BimGdprGroupInterface[]
+   * @return BimGdprGroupInterface[]
    *   The list of groups.
    */
   public function getGroups(): array {
@@ @@
   /**
    * Return the list of services.
    *
-   * @return \Drupal\bim_gdpr\BimGdprServiceInterface[]
+   * @return BimGdprServiceInterface[]
    *   The list of services.
    */
   public function getServices(): array {
@@ @@
   /**
    * Register hierarchy configuration.
    *
-   * @param \Drupal\bim_gdpr\Hierarchy\HierarchyInterface $hierarchy
+   * @param HierarchyInterface $hierarchy
    *   The hierarchy.
    */
   public function saveHierarchy(HierarchyInterface $hierarchy) {
@@ @@
   /**
    * Adds an entity in the hierarchy.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function add(EntityInterface $entity) {
@@ @@
   /**
    * Delete entity from storage.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entities.
    */
   public function delete(array $entities) {
@@ @@
    * @param string $rawId
    *   THe id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityFromRawId(string $rawId) {
     [$entityTypeId, $id] = explode(HierarchyInterface::PREFIX, $rawId);
@@ @@
   /**
    * Add entity into raw Data.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param array $rawData
    *   THe raw data.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/bim_gdpr/src/Services/BimGdprInitializer.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Hierarchy storage.
    *
-   * @var \Drupal\bim_gdpr\Services\HierarchyStorage
+   * @var HierarchyStorage
    */
   protected $hierarchyStorage;

@@ @@
   /**
    * Template Manager.
    *
-   * @var \Drupal\bim_gdpr\Services\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * BimGdprInitializer constructor.
    *
-   * @param \Drupal\bim_gdpr\Services\HierarchyStorage $hierarchyStorage
+   * @param HierarchyStorage $hierarchyStorage
    *   The hierarchy storage.
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   THe template manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(HierarchyStorage $hierarchyStorage, TemplateManager $templateManager, LanguageManagerInterface $languageManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/BimGdprTemplateTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\PluginManager\BimGdprTemplate;

+use http\Client\Response;
 use Drupal\bim_gdpr\Services\TemplateManager;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
    *
    * @param string $type
    *   The type.
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The template manager.
    * @param array $form
    *   THe form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The formstate.
    *
    * @return $this
@@ @@
     $url = str_replace(static::LANGUAGE_TOKEN, $id, $url);
     if (!empty($url)) {
       try {
-        /** @var \http\Client\Response $body */
+        /** @var Response $body */
         $response = \Drupal::httpClient()->get($url);
         $content = Json::decode($response->getBody());
         $this->createInputFromJson($content);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/BimGdprTemplatePluginManager.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * List of available plugin.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\AbstractBimGdprTemplate[]
+   * @var AbstractBimGdprTemplate[]
    */
   protected $plugins;

@@ @@
    * {@inheritdoc}
    */
   protected static function createPluginInstance($plugin_id, array $configuration = []) {
-    /** @var \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface $plugin */
+    /** @var BimGdprTemplateInterface $plugin */
     $plugin = call_user_func($configuration['class'] . '::create', \Drupal::getContainer());
     $plugin->setId($plugin_id);
     $plugin->setLabel($configuration['label']);
@@ @@
    * @param string $id
    *   The plugin id.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface|null
+   * @return BimGdprTemplateInterface|null
    *   The plugin.
    */
   public function getPluginById($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bim_gdpr/src/PluginManager/BimGdprTemplate/BimGdprTemplateInterface.php:88

    ---------- begin diff ----------
@@ @@
   /**
    * Create the Bim Gdpr Template.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
    * @return \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface
@@ @@
   /**
    * Get the config form part.
    *
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The service.
    * @param array $parentForm
    *   The parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    * @param array $requiredStates
    *   The required state value to declare field is required.
@@ @@
   /**
    * Get the translatino form part.
    *
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The service.
    * @param array $parentForm
    *   The parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    * @param array $requiredStates
    *   The required state value to declare field is required.
@@ @@
    *   The form values.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   THe formstate.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/bim_gdpr/src/PluginManager/BimGdprServiceType/BimGdprServiceTypePluginManager.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * List of available plugin.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface[]
+   * @var BimGdprServiceTypeInterface[]
    */
   protected $plugins;

@@ @@
   /**
    * Return all available plugins.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface[]
+   * @return BimGdprServiceTypeInterface[]
    *   The list of plugins.
    */
   public function getAllPlugins(): array {
@@ @@
    * @param array $configuration
    *   The plugin configuration.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface
+   * @return BimGdprServiceTypeInterface
    *   THe plugin.
    */
   protected static function createPluginInstance(string $plugin_id, array $configuration = []) {
-    /** @var \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface $serviceType */
+    /** @var BimGdprServiceTypeInterface $serviceType */
     $serviceType = call_user_func($configuration['class'] . '::create', \Drupal::getContainer());
     $serviceType->setId($plugin_id);
     $serviceType->setLabel($configuration['label']);
@@ @@
    * @param string $id
    *   The plugin id.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface|null
+   * @return BimGdprServiceTypeInterface|null
    *   The plugin wrapper.
    */
   public function getPluginById($id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bim_gdpr/src/PluginManager/BimGdprServiceType/BimGdprServiceTypeInterface.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Create the Bim GDPR Service TYpe.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
    * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface
@@ @@
   /**
    * Get the config form part.
    *
-   * @param \Drupal\bim_gdpr\BimGdprServiceInterface $service
+   * @param BimGdprServiceInterface $service
    *   The service.
    * @param array $parentForm
    *   The parent form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    * @param array $requiredStates
    *   The required state value to declare field is required.
@@ @@
    *   The form values.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   THe formstate.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/bim_gdpr/src/Hierarchy/HierarchyInterface.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Return the list of root elements.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of elements.
    */
   public function getRoot(): array;
@@ @@
   /**
    * Return ht echildren of an entity in the hierarchy.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $parent
+   * @param EntityInterface $parent
    *   The parent entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of children.
    */
   public function getChildrenOfItem(EntityInterface $parent): array;
@@ @@
   /**
    * REturn the weight of item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   THe item.
    *
    * @return int
@@ @@
   /**
    * REturn the parent of item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   THe item.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The weight.
    */
   public function getParentOfItem(EntityInterface $item);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/bim_gdpr/src/Hierarchy/Hierarchy.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * List of root Items.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $rootList = [];

@@ @@
   /**
    * List of all items.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $itemList = [];

@@ @@
   /**
    * Hierarchy constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $rawList
+   * @param EntityInterface[] $rawList
    *   The raw list.
    */
   public function __construct(array $rawList = []) {
@@ @@
   /**
    * Return the raw id.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return string
@@ @@
    * @param int $weight
    *   The weight.
    *
-   * @return \Drupal\bim_gdpr\BimGdprGroupInterface|null
+   * @return BimGdprGroupInterface|null
    *   The group.
    */
   protected function getGroupFromRawData(string $id, int &$weight) {
@@ @@
    *   The id.
    * @param int $weight
    *   The weight.
-   * @param \Drupal\Core\Entity\EntityInterface|null $parent
+   * @param EntityInterface|null $parent
    *   The parent entity.
    *
-   * @return \Drupal\bim_gdpr\BimGdprServiceInterface|null
+   * @return BimGdprServiceInterface|null
    *   The service.
    */
   protected function getServiceFromRawData(string $id, int &$weight, EntityInterface $parent = NULL) {
@@ @@
   /**
    * Return group data.
    *
-   * @param \Drupal\bim_gdpr\BimGdprGroupInterface $group
+   * @param BimGdprGroupInterface $group
    *   The group.
    *
    * @return array
@@ @@
   /**
    * Return service data.
    *
-   * @param \Drupal\bim_gdpr\BimGdprServiceInterface $service
+   * @param BimGdprServiceInterface $service
    *   The service.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/bim_gdpr/src/Form/TranslateListForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\bim_gdpr\Tools\DragTable;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * BimGdrpOverview constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config, EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, RendererInterface $renderer, RouteMatchInterface $routeMatch, RequestStack $requestStack) {
     $this->configFactory = $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/bim_gdpr/src/Form/SettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Template Manager.
    *
-   * @var \Drupal\bim_gdpr\Services\TemplateManager
+   * @var TemplateManager
    */
   protected $templateManager;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\bim_gdpr\Services\TemplateManager $templateManager
+   * @param TemplateManager $templateManager
    *   The template manager.
    */
   public function __construct(TemplateManager $templateManager) {
@@ @@
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(TemplateManager::SERVICE_NAME)
+      $this->templateManager
     );
   }

@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   protected function initTemplateType(array &$form, FormStateInterface $formState) {
@@ @@
   /**
    * Return the plugin subform.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface $plugin
+   * @param BimGdprTemplateInterface $plugin
    *   The plugin.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Return the plugin subform.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprTemplate\BimGdprTemplateInterface $plugin
+   * @param BimGdprTemplateInterface $plugin
    *   The plugin.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   THe form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function getTemplateMassagedValues(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/bim_gdpr/src/Form/BimGdrpOverview.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Service repo.
    *
-   * @var \Drupal\bim_gdpr\Services\HierarchyStorage
+   * @var HierarchyStorage
    */
   protected $serviceHierarchy;

@@ @@
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * BimGdrpOverview constructor.
    *
-   * @param \Drupal\bim_gdpr\Services\HierarchyStorage $repository
+   * @param HierarchyStorage $repository
    *   The service repo.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
-  public function __construct(HierarchyStorage $repository, RendererInterface $renderer) {
+  public function __construct(HierarchyStorage $repository, RendererInterface $renderer, HierarchyStorage $serviceHierarchy) {
     $this->serviceHierarchy = $repository;
     $this->renderer = $renderer;
+    $this->serviceHierarchy = $serviceHierarchy;
   }

   /**
@@ @@
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(HierarchyStorage::SERVICE_NAME),
+      $this->serviceHierarchy,
       $container->get('renderer')
     );
   }
@@ @@
   /**
    * Add row to table.
    *
-   * @param \Drupal\bim_gdpr\Tools\DragTable $table
+   * @param DragTable $table
    *   The table.
    * @param array $itemList
    *   THe itemList.
-   * @param \Drupal\bim_gdpr\Hierarchy\HierarchyInterface $hierarchy
+   * @param HierarchyInterface $hierarchy
    *   THe hierarchy.
    * @param int $depth
    *   THe current depth.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/bim_gdpr/src/Form/BimGdprServiceForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\Form;

+use Drupal\bim_gdpr\BimGdprServiceInterface;
 use Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface;
 use Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypePluginManager;
 use Drupal\bim_gdpr\Storage\TranslatableConfigEntityFormTrait;
@@ @@
 /**
  * Bim GDPR Service form.
  *
- * @property \Drupal\bim_gdpr\BimGdprServiceInterface $entity
+ * @property BimGdprServiceInterface $entity
  */
 class BimGdprServiceForm extends EntityForm {

@@ @@
   /**
    * Service Type Plugin Manager.
    *
-   * @var \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypePluginManager
+   * @var BimGdprServiceTypePluginManager
    */
   protected $serviceTypeManager;

@@ @@
   /**
    * BimGdprServiceForm constructor.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypePluginManager $serviceTypeManager
+   * @param BimGdprServiceTypePluginManager $serviceTypeManager
    *   The service type manager.
    */
   public function __construct(BimGdprServiceTypePluginManager $serviceTypeManager) {
@@ @@
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(BimGdprServiceTypePluginManager::SERVICE_NAME)
+      $this->serviceTypeManager
     );
   }

@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    */
   protected function initServiceType(array &$form, FormStateInterface $formState) {
@@ @@
   /**
    * Return the plugin subform.
    *
-   * @param \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface $plugin
+   * @param BimGdprServiceTypeInterface $plugin
    *   The plugin.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   THe form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function massageValues(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/bim_gdpr/src/Form/BimGdprGroupForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr\Form;

+use Drupal\bim_gdpr\BimGdprGroupInterface;
 use Drupal\bim_gdpr\Storage\TranslatableConfigEntityFormTrait;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 /**
  * Bim GDPR Group form.
  *
- * @property \Drupal\bim_gdpr\BimGdprGroupInterface $entity
+ * @property BimGdprGroupInterface $entity
  */
 class BimGdprGroupForm extends EntityForm {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/bim_gdpr/src/BimGdprServiceListBuilder.php:23

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\bim_gdpr\BimGdprGroupInterface $entity */
+    /** @var BimGdprGroupInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/bim_gdpr/src/BimGdprServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bim_gdpr;

+use Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Return the service type plugin.
    *
-   * @return \Drupal\bim_gdpr\PluginManager\BimGdprServiceType\BimGdprServiceTypeInterface
+   * @return BimGdprServiceTypeInterface
    *   The service type plugin.
    */
   public function getServiceType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/bim_gdpr/src/BimGdprGroupListBuilder.php:23

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\bim_gdpr\BimGdprGroupInterface $entity */
+    /** @var BimGdprGroupInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/bim_gdpr/src/Generators/BimGdprTemplate/BimGdprTemplateP
         luginGenerator.php" file, due to:                                      
         "Analyze error: "Class DrupalCodeGenerator\Command\BaseGenerator not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/bim_gdpr/src/Generators/BimGdprServiceType/BimGdprServic
         eTypePluginGenerator.php" file, due to:                                
         "Analyze error: "Class DrupalCodeGenerator\Command\BaseGenerator not   
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

