diff --git a/default_content_deploy.install b/default_content_deploy.install
index 8f4445e..f1b3d9c 100644
--- a/default_content_deploy.install
+++ b/default_content_deploy.install
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\user\Entity\Role;
 /**
  * @file
  * Install, update and uninstall hooks for default_content_deploy module.
  */
-
 /**
  * Swap permission 'import content' for 'default content deploy import'.
  */
 function default_content_deploy_update_8001() {
-  /** @var \Drupal\user\Entity\Role[] $roles */
+  /** @var Role[] $roles */
   $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
 
   foreach ($roles as $role) {
diff --git a/src/Commands/DefaultContentDeployCommands.php b/src/Commands/DefaultContentDeployCommands.php
index 0508acd..8636054 100644
--- a/src/Commands/DefaultContentDeployCommands.php
+++ b/src/Commands/DefaultContentDeployCommands.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\default_content_deploy\Commands;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\default_content_deploy\DeployManager;
 use Drupal\default_content_deploy\Exporter;
 use Drupal\default_content_deploy\Importer;
@@ -18,32 +21,32 @@ class DefaultContentDeployCommands extends DrushCommands {
   /**
    * DCD Exporter.
    *
-   * @var \Drupal\default_content_deploy\Exporter
+   * @var Exporter
    */
   private $exporter;
 
   /**
    * DCD Importer.
    *
-   * @var \Drupal\default_content_deploy\Importer
+   * @var Importer
    */
   private $importer;
 
   /**
    * Default deploy content manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;
 
   /**
    * DefaultContentDeployCommands constructor.
    *
-   * @param \Drupal\default_content_deploy\Exporter $exporter
+   * @param Exporter $exporter
    *   DCD Exporter.
-   * @param \Drupal\default_content_deploy\Importer $importer
+   * @param Importer $importer
    *   DCD Importer.
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   DCD manager.
    */
   public function __construct(Exporter $exporter, Importer $importer, DeployManager $deploy_manager) {
@@ -277,9 +280,9 @@ class DefaultContentDeployCommands extends DrushCommands {
    *   Print detailed information about importing entities.
    * @aliases dcdi,default-content-deploy-import
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function contentDeployImport(array $options = ['force-override' => FALSE, 'folder' => self::OPT]) {
     // Perform read only update.
diff --git a/src/Controller/DownloadController.php b/src/Controller/DownloadController.php
index e5031ef..b23d0cc 100644
--- a/src/Controller/DownloadController.php
+++ b/src/Controller/DownloadController.php
@@ -16,23 +16,23 @@ class DownloadController implements ContainerInjectionInterface {
   /**
    * The DCD manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;
 
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * DownloadController constructor.
    *
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   The DCD manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The File system.
    */
   public function __construct(DeployManager $deploy_manager, FileSystemInterface $file_system) {
@@ -53,7 +53,7 @@ class DownloadController implements ContainerInjectionInterface {
   /**
    * Return binary archive file for download.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    */
   public function downloadCompressedContent() {
     $this->deployManager->compressContent();
diff --git a/src/DeployManager.php b/src/DeployManager.php
index faa11c4..6ac85eb 100644
--- a/src/DeployManager.php
+++ b/src/DeployManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\default_content_deploy;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Archiver\ArchiveTar;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -15,50 +18,50 @@ class DeployManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * Site settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;
 
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $request;
 
   /**
    * DeployManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   Site settings.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The File system.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config, Settings $settings, FileSystemInterface $file_system, RequestStack $request_stack) {
@@ -80,8 +83,8 @@ class DeployManager {
    * @return string
    *   UUID value.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityUuidById($entity_type, $id) {
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($id);
diff --git a/src/Event/PreSerializeEvent.php b/src/Event/PreSerializeEvent.php
index a18465d..409840b 100644
--- a/src/Event/PreSerializeEvent.php
+++ b/src/Event/PreSerializeEvent.php
@@ -11,7 +11,7 @@ use Drupal\Core\Entity\ContentEntityInterface;
 class PreSerializeEvent extends Event {
 
   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -21,7 +21,7 @@ class PreSerializeEvent extends Event {
   protected $mode;
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    * @param string $mode
    */
   public function __construct(ContentEntityInterface $entity, $mode) {
@@ -30,14 +30,14 @@ class PreSerializeEvent extends Event {
   }
 
   /**
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   public function getEntity() {
     return $this->entity;
   }
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+   * @param ContentEntityInterface|null $entity
    */
   public function setEntity($entity = NULL) {
     $this->entity = $entity;
diff --git a/src/Exporter.php b/src/Exporter.php
index 183aa71..0133a16 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\default_content_deploy;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -25,42 +27,42 @@ class Exporter {
   /**
    * DCD Manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * DB connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Serializer.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The account switcher service.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
@@ -128,40 +130,40 @@ class Exporter {
   /**
    * The link manager service.
    *
-   * @var \Drupal\hal\LinkManager\LinkManagerInterface
+   * @var LinkManagerInterface
    */
   protected $linkManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Exporter constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   DB connection.
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   DCD Manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager.
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   Serializer.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\hal\LinkManager\LinkManagerInterface $link_manager
+   * @param LinkManagerInterface $link_manager
    *   The link manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(Connection $database, DeployManager $deploy_manager, EntityTypeManagerInterface $entityTypeManager, Serializer $serializer, AccountSwitcherInterface $account_switcher, FileSystemInterface $file_system, LinkManagerInterface $link_manager, ContainerAwareEventDispatcher $eventDispatcher, ModuleHandlerInterface $module_handler) {
@@ -361,8 +363,8 @@ class Exporter {
   /**
    * Prepare content to export.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function prepareToExport() {
     $entity_type = $this->entityTypeId;
@@ -373,7 +375,7 @@ class Exporter {
     }
 
     foreach ($exported_entity_ids as $entity_id) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
       $exported_entity = $this->getSerializedContent($entity);
       $this->addExportedEntity($exported_entity);
@@ -383,8 +385,8 @@ class Exporter {
   /**
    * Prepare content with reference to export.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function prepareToExportWithReference() {
     $entity_type = $this->entityTypeId;
@@ -395,7 +397,7 @@ class Exporter {
     }
 
     foreach ($exported_entity_ids as $entity_id) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
       $exported_entities = $this->getSerializedContentWithReferences($entity);
       $this->addExportedEntity($exported_entities);
@@ -405,8 +407,8 @@ class Exporter {
   /**
    * Prepare all content on the site to export.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function prepareToExportAllContent() {
     $content_entity_types = $this->deployManager->getContentEntityTypes();
@@ -426,7 +428,7 @@ class Exporter {
         $entity_ids = array_values($query->execute());
 
         foreach ($entity_ids as $entity_id) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
 
           if ($time && $entity instanceof EntityChangedInterface && $entity->getChangedTimeAcrossTranslations() < $time) {
@@ -446,8 +448,8 @@ class Exporter {
    * @return array
    *   Return array of entity ids.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getEntityIdsForExport() {
     $skip_entities = $this->skipEntityIds;
@@ -559,12 +561,12 @@ class Exporter {
   /**
    * Exports a single entity as importContent expects it.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return string
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getSerializedContent(ContentEntityInterface $entity) {
     $content = '';
@@ -595,12 +597,12 @@ class Exporter {
   /**
    * Exports a single entity and all its referenced entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getSerializedContentWithReferences(ContentEntityInterface $entity) {
     $indexed_dependencies = [$entity->uuid() => $entity];
@@ -622,10 +624,10 @@ class Exporter {
   /**
    * Returns all layout builder referenced blocks of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Keyed array of entities indexed by entity type and ID.
    */
   private function getEntityLayoutBuilderDependencies(ContentEntityInterface $entity) {
@@ -683,14 +685,14 @@ class Exporter {
    * This method is also recursive to support use-cases like a node -> media
    * -> file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param int $depth
    *   Guard against infinite recursion.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $indexed_dependencies
+   * @param ContentEntityInterface[] $indexed_dependencies
    *   Previously discovered dependencies.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   Keyed array of entities indexed by entity type and ID.
    */
   private function getEntityReferencesRecursive(ContentEntityInterface $entity, $depth = 0, array &$indexed_dependencies = []) {
diff --git a/src/Form/ExportForm.php b/src/Form/ExportForm.php
index 2c628d7..50cc6a6 100644
--- a/src/Form/ExportForm.php
+++ b/src/Form/ExportForm.php
@@ -19,39 +19,39 @@ class ExportForm extends FormBase {
   /**
    * Default Content Deploy Export object.
    *
-   * @var \Drupal\default_content_deploy\Exporter
+   * @var Exporter
    */
   protected $exporter;
 
   /**
    * Deploy manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;
 
   /**
    * Static cache of bundle information.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * ExportForm constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
-   * @param \Drupal\default_content_deploy\Exporter $exporter
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param Messenger $messenger
+   * @param DeployManager $deploy_manager
+   * @param Exporter $exporter
+   * @param EntityTypeBundleInfoInterface $bundle_info
+   * @param FileSystemInterface $file_system
    */
   public function __construct(Messenger $messenger, DeployManager $deploy_manager, Exporter $exporter, EntityTypeBundleInfoInterface $bundle_info, FileSystemInterface  $file_system) {
     $this->exporter = $exporter;
@@ -192,7 +192,7 @@ class ExportForm extends FormBase {
    * Ajax callback for Mode form element.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -214,7 +214,7 @@ class ExportForm extends FormBase {
    * Ajax callback for Entity type form element.
    *
    * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ -247,7 +247,7 @@ class ExportForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @throws \Exception
diff --git a/src/Form/ImportForm.php b/src/Form/ImportForm.php
index f857807..1471db4 100644
--- a/src/Form/ImportForm.php
+++ b/src/Form/ImportForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\default_content_deploy\Form;
 
+use Symfony\Component\HttpFoundation\File\UploadedFile;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,31 +19,31 @@ class ImportForm extends FormBase {
   /**
    * Default Content Deploy Importer object.
    *
-   * @var \Drupal\default_content_deploy\Importer
+   * @var Importer
    */
   private $importer;
 
   /**
    * Deploy manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;
 
   /**
    * The File system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * ImportForm constructor.
    *
-   * @param \Drupal\default_content_deploy\Importer $importer
-   * @param \Drupal\Core\Messenger\Messenger $messenger
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param Importer $importer
+   * @param Messenger $messenger
+   * @param DeployManager $deploy_manager
+   * @param FileSystemInterface $file_system
    */
   public function __construct(Importer $importer, Messenger $messenger, DeployManager $deploy_manager, FileSystemInterface  $file_system) {
     $this->importer = $importer;
@@ -114,7 +115,7 @@ class ImportForm extends FormBase {
     $all_files = $this->getRequest()->files->get('files', []);
 
     if (!empty($all_files['file'])) {
-      /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $file_upload */
+      /** @var UploadedFile $file_upload */
       $file_upload = $all_files['file'];
       $extension = $file_upload->getClientOriginalExtension();
 
@@ -140,7 +141,7 @@ class ImportForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @throws \Exception
diff --git a/src/Importer.php b/src/Importer.php
index a721f98..f10e817 100644
--- a/src/Importer.php
+++ b/src/Importer.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\default_content_deploy;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -24,7 +28,7 @@ class Importer {
   /**
    * Deploy manager.
    *
-   * @var \Drupal\default_content_deploy\DeployManager
+   * @var DeployManager
    */
   protected $deployManager;
 
@@ -59,14 +63,14 @@ class Importer {
   /**
    * The Entity repository manager.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The cache data.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
@@ -80,40 +84,40 @@ class Importer {
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The link manager service.
    *
-   * @var \Drupal\hal\LinkManager\LinkManagerInterface
+   * @var LinkManagerInterface
    */
   protected $linkManager;
 
   /**
    * The account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * DCD Exporter.
    *
-   * @var \Drupal\default_content_deploy\Exporter
+   * @var Exporter
    */
   protected $exporter;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -130,21 +134,21 @@ class Importer {
   /**
    * Constructs the default content deploy manager.
    *
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param Serializer $serializer
    *   The serializer service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\hal\LinkManager\LinkManagerInterface $link_manager
+   * @param LinkManagerInterface $link_manager
    *   The link manager service.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   The account switcher.
-   * @param \Drupal\default_content_deploy\DeployManager $deploy_manager
+   * @param DeployManager $deploy_manager
    *   Deploy manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The Entity repository manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache data.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(Serializer $serializer, EntityTypeManagerInterface $entity_type_manager, LinkManagerInterface $link_manager, AccountSwitcherInterface $account_switcher, DeployManager $deploy_manager, EntityRepositoryInterface $entity_repository, CacheBackendInterface $cache, Exporter $exporter, Connection $database) {
@@ -210,8 +214,8 @@ class Importer {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   public function prepareForImport() {
@@ -270,9 +274,9 @@ class Importer {
   /**
    * Import to entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function import() {
     $files = $this->dataToImport;
@@ -300,7 +304,7 @@ class Importer {
           $class = $this->entityTypeManager->getDefinition($entity_type)->getClass();
           $needs_second_run = $this->preDenormalize($file, $entity_type);
 
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entity = $this->serializer->denormalize($file['data'], $class, 'hal_json', ['request_method' => 'POST']);
           $entity->enforceIsNew($file['is_new']);
           $entity->save();
@@ -371,8 +375,8 @@ class Importer {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   protected function decodeFile($file) {
@@ -417,15 +421,15 @@ class Importer {
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws InvalidPluginDefinitionException
    */
   protected function preAddToImport(&$data) {
     $decode = $data['data'];
     $uuid = $decode['uuid'][0]['value'];
     $entity_type_id = $data['entity_type_id'];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityRepository->loadEntityByUuid($entity_type_id, $uuid);
     $entity_type_object = $this->entityTypeManager->getDefinition($entity_type_id);
 
@@ -505,7 +509,7 @@ class Importer {
    *
    * @param $file
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function preDenormalize(&$file, $entity_type) {
     $needs_second_run = FALSE;
@@ -605,7 +609,7 @@ class Importer {
    *
    * @return $this
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function updateTargetRevisionId(&$decode) {
     if (isset($decode['_embedded'])) {
