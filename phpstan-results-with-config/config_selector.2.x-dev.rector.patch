diff --git a/src/ActiveEntity.php b/src/ActiveEntity.php
index c131332..25f671a 100644
--- a/src/ActiveEntity.php
+++ b/src/ActiveEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_selector;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
@@ -14,14 +15,14 @@ class ActiveEntity {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ActiveEntity constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -36,7 +37,7 @@ class ActiveEntity {
    * @param string $feature
    *   The config selector feature to get the ID for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The active entity for the provided entity type and feature. NULL is there
    *   is no corresponding entity.
    */
@@ -55,10 +56,10 @@ class ActiveEntity {
   /**
    * Gets the active entity from using the details from an entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to get the active entity for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The active entity for the provided entity.
    */
   public function getFromEntity(ConfigEntityInterface $entity) {
diff --git a/src/ConfigSelector.php b/src/ConfigSelector.php
index d02e38e..7ea88c9 100644
--- a/src/ConfigSelector.php
+++ b/src/ConfigSelector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_selector;
 
+use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -32,42 +33,42 @@ class ConfigSelector {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -92,17 +93,17 @@ class ConfigSelector {
   /**
    * ConfigSelector constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConfigManagerInterface $config_manager, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger, StateInterface $state, MessengerInterface $messenger) {
@@ -204,7 +205,7 @@ class ConfigSelector {
         ->getQuery()
         ->condition('third_party_settings.config_selector.feature', $feature)
         ->execute();
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+      /** @var ConfigEntityInterface[] $configs */
       $configs = $entity_storage->loadMultiple($matching_config);
       $this->sortConfigEntities($configs);
 
@@ -264,7 +265,7 @@ class ConfigSelector {
     // Build a list of feature names of the configuration that's been imported.
     $features = [];
     foreach ($new_configuration_list as $config_name) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+      /** @var ConfigEntityInterface $config_entity */
       $config_entity = $this->configManager->loadConfigEntityByName($config_name);
       if (!$config_entity) {
         // Simple configuration is ignored.
@@ -293,7 +294,7 @@ class ConfigSelector {
         ->condition('status', FALSE, '<>')
         ->execute();
 
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+      /** @var ConfigEntityInterface[] $configs */
       $configs = $entity_storage->loadMultiple($matching_config);
       $configs = $this->sortConfigEntities($configs);
 
@@ -325,10 +326,10 @@ class ConfigSelector {
   /**
    * Generates a link for a configuration entity if possible.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The configuration entity to generate a link for.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   The best URL to link to the entity with. Edit links are preferred to
    *   canonical links. If no link is possible an empty string is returned.
    */
diff --git a/src/ConfigSelectorServiceProvider.php b/src/ConfigSelectorServiceProvider.php
index 7d780aa..9bf9df8 100644
--- a/src/ConfigSelectorServiceProvider.php
+++ b/src/ConfigSelectorServiceProvider.php
@@ -18,7 +18,7 @@ class ConfigSelectorServiceProvider implements ServiceProviderInterface {
    * This service decorates the config.installer so the optional profile
    * configuration can be selected during installation.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container builder.
    */
   public function register(ContainerBuilder $container) {
diff --git a/src/ConfigSelectorSortTrait.php b/src/ConfigSelectorSortTrait.php
index 6335b4c..b2af286 100644
--- a/src/ConfigSelectorSortTrait.php
+++ b/src/ConfigSelectorSortTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_selector;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 /**
  * Provides a sort function for sorting config entities for config_selector.
  */
@@ -10,10 +11,10 @@ trait ConfigSelectorSortTrait {
   /**
    * Sorts an array of configuration entities by priority then config name.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs
+   * @param ConfigEntityInterface[] $configs
    *   Array of configuration entities to sort.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   The sorted array of configuration entities.
    */
   protected function sortConfigEntities(array $configs) {
diff --git a/src/Controller/Switcher.php b/src/Controller/Switcher.php
index a80cd62..890d220 100644
--- a/src/Controller/Switcher.php
+++ b/src/Controller/Switcher.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\config_selector\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\config_selector\ConfigSelector;
 use Drupal\config_selector\ConfigSelectorSortTrait;
 use Drupal\config_selector\Entity\FeatureInterface;
@@ -16,19 +18,19 @@ class Switcher extends ControllerBase {
   /**
    * Selects the supplied configuration entity.
    *
-   * @param \Drupal\config_selector\Entity\FeatureInterface $config_selector_feature
+   * @param FeatureInterface $config_selector_feature
    *   The Configuration selector feature.
    * @param string $config_entity_type
    *   The entity type of the configuration entity we are switching to.
    * @param string $config_entity_id
    *   The ID of the configuration entity we are switching to.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   This always redirects to the feature's manage route.
    */
   public function select(FeatureInterface $config_selector_feature, $config_entity_type, $config_entity_id) {
     $redirect = $this->redirect('entity.config_selector_feature.manage', ['config_selector_feature' => $config_selector_feature->id()]);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+    /** @var ConfigEntityInterface $config_entity */
     $config_entity = $this->getConfigEntity($config_selector_feature, $config_entity_type, $config_entity_id);
     if (!$config_entity) {
       return $redirect;
@@ -62,18 +64,18 @@ class Switcher extends ControllerBase {
   /**
    * Gets a valid configuration entity to work with.
    *
-   * @param \Drupal\config_selector\Entity\FeatureInterface $config_selector_feature
+   * @param FeatureInterface $config_selector_feature
    *   The Configuration selector feature.
    * @param string $config_entity_type
    *   The entity type of the configuration entity we are switching to.
    * @param string $config_entity_id
    *   The ID of the configuration entity we are switching to.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface|false
+   * @return ConfigEntityInterface|false
    *   The configuration entity we are switching to, or FALSE if invalid.
    */
   protected function getConfigEntity(FeatureInterface $config_selector_feature, $config_entity_type, $config_entity_id) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+    /** @var ConfigEntityInterface $config_entity */
     $config_entity = $this->entityTypeManager()->getStorage($config_entity_type)->load($config_entity_id);
     if (!$config_entity) {
       $this->messenger()->addWarning($this->t('Configuration entity of type %type and ID $id does not exist.', ['%type' => $config_entity_type, '%id' => $config_entity_id]));
diff --git a/src/DecoratingConfigInstaller.php b/src/DecoratingConfigInstaller.php
index 33248a6..53bc8b2 100644
--- a/src/DecoratingConfigInstaller.php
+++ b/src/DecoratingConfigInstaller.php
@@ -17,16 +17,16 @@ class DecoratingConfigInstaller implements ConfigInstallerInterface {
   /**
    * The config.installer service.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   protected $decoratedService;
 
   /**
    * DecoratingConfigInstaller constructor.
    *
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config.installer service to decorate.
-   * @param \Drupal\config_selector\ConfigSelector $config_selector
+   * @param ConfigSelector $config_selector
    *   The config_selector service.
    */
   public function __construct(ConfigInstallerInterface $config_installer, ConfigSelector $config_selector) {
@@ -73,7 +73,7 @@ class DecoratingConfigInstaller implements ConfigInstallerInterface {
   /**
    * Gets the configuration storage that provides the default configuration.
    *
-   * @return \Drupal\Core\Config\StorageInterface|null
+   * @return StorageInterface|null
    *   The configuration storage that provides the default configuration.
    *   Returns null if the source storage has not been set.
    */
diff --git a/src/Entity/FeatureInterface.php b/src/Entity/FeatureInterface.php
index b7a6fda..264da26 100644
--- a/src/Entity/FeatureInterface.php
+++ b/src/Entity/FeatureInterface.php
@@ -31,7 +31,7 @@ interface FeatureInterface extends ConfigEntityInterface {
    * @param string $entity_type_id
    *   The entity type of the returned configuration entities.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   The feature's configuration entities of the specified type. Keyed by
    *   their ID.
    */
diff --git a/src/FeatureListBuilder.php b/src/FeatureListBuilder.php
index d25bcdd..f9d220a 100644
--- a/src/FeatureListBuilder.php
+++ b/src/FeatureListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_selector;
 
+use Drupal\config_selector\Entity\FeatureInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -38,7 +39,7 @@ class FeatureListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\config_selector\Entity\FeatureInterface $entity */
+    /** @var FeatureInterface $entity */
     $row['name'] = $entity->label();
     $row['description'] = $entity->getDescription();
     return $row + parent::buildRow($entity);
diff --git a/src/Form/FeatureManageForm.php b/src/Form/FeatureManageForm.php
index d03fb15..938f81a 100644
--- a/src/Form/FeatureManageForm.php
+++ b/src/Form/FeatureManageForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_selector\Form;
 
+use Drupal\config_selector\Entity\FeatureInterface;
 use Drupal\config_selector\ConfigSelectorSortTrait;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityForm;
@@ -18,7 +19,7 @@ class FeatureManageForm extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\config_selector\Entity\FeatureInterface
+   * @var FeatureInterface
    */
   protected $entity;
 
@@ -55,7 +56,7 @@ class FeatureManageForm extends EntityForm {
         ],
       ];
 
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
+      /** @var ConfigEntityInterface $config_entity */
       // Sort by reverse priority so that the highest priority is listed first.
       $config_entities = array_reverse($this->sortConfigEntities($config_entities), TRUE);
       foreach ($config_entities as $config_entity) {
@@ -112,10 +113,10 @@ class FeatureManageForm extends EntityForm {
    * getDescription() method that will be used. Otherwise descriptions can be
    * add to the config_selector third party settings.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The config entity to get the description for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The config entity description.
    */
   protected function getDescription(ConfigEntityInterface $entity) {
diff --git a/src/Plugin/Derivative/FeatureListMenuLink.php b/src/Plugin/Derivative/FeatureListMenuLink.php
index 99461e5..f9714f6 100644
--- a/src/Plugin/Derivative/FeatureListMenuLink.php
+++ b/src/Plugin/Derivative/FeatureListMenuLink.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_selector\Plugin\Derivative;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -17,14 +18,14 @@ class FeatureListMenuLink extends DeriverBase implements ContainerDeriverInterfa
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * FeatureListAccessCheck constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -53,7 +54,7 @@ class FeatureListMenuLink extends DeriverBase implements ContainerDeriverInterfa
   /**
    * Allows access to Config Selector UI if there are entities.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access() {
diff --git a/src/TestLogger.php b/src/TestLogger.php
index c2e6283..fbb4240 100644
--- a/src/TestLogger.php
+++ b/src/TestLogger.php
@@ -138,7 +138,7 @@ class TestLogger implements DebugLoggerInterface, LoggerInterface {
   /**
    * Registers the test logger to the container.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The ContainerBuilder to register the test logger to.
    */
   public static function register(ContainerBuilder $container) {
diff --git a/tests/modules/config_selector_ui_test/config_selector_ui_test.install b/tests/modules/config_selector_ui_test/config_selector_ui_test.install
index 9f3792c..99531eb 100644
--- a/tests/modules/config_selector_ui_test/config_selector_ui_test.install
+++ b/tests/modules/config_selector_ui_test/config_selector_ui_test.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\views\ViewEntityInterface;
 /**
  * @file
  * The Configuration Selector UI Test module install methods.
@@ -37,7 +38,7 @@ function config_selector_ui_test_install() {
  * @param array $view_data
  *   The complete data for the view.
  *
- * @return \Drupal\views\ViewEntityInterface
+ * @return ViewEntityInterface
  *   The new view entity.
  */
 function _config_selector_ui_test_create_new_view($new_id, $feature, $description, $priority, $status, array $view_data) {
@@ -45,7 +46,7 @@ function _config_selector_ui_test_create_new_view($new_id, $feature, $descriptio
   $view_data['id'] = $new_id;
   // Make life simple for testing and ensure the views are removed on uninstall.
   $view_data['dependencies']['enforced']['module'] = ['config_selector_ui_test'];
-  /** @var \Drupal\views\ViewEntityInterface $view */
+  /** @var ViewEntityInterface $view */
   $view = $view_storage->createFromStorageRecord($view_data);
   $view->setStatus($status);
   $view->setThirdPartySetting('config_selector', 'feature', $feature);
diff --git a/tests/src/Functional/ConfigSelectorProfileTest.php b/tests/src/Functional/ConfigSelectorProfileTest.php
index cc25665..feac529 100644
--- a/tests/src/Functional/ConfigSelectorProfileTest.php
+++ b/tests/src/Functional/ConfigSelectorProfileTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\config_selector\Functional;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -25,7 +26,7 @@ class ConfigSelectorProfileTest extends BrowserTestBase {
    * Tests the profile supplied configuration can be selected.
    */
   public function testProfileInstall() {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
 
     $this->assertTrue($configs['feature_a_five']->status());
diff --git a/tests/src/Functional/ConfigSelectorUiTest.php b/tests/src/Functional/ConfigSelectorUiTest.php
index 64131aa..88c4c76 100644
--- a/tests/src/Functional/ConfigSelectorUiTest.php
+++ b/tests/src/Functional/ConfigSelectorUiTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\config_selector\Functional;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\config_selector\Entity\Feature;
 use Drupal\Tests\BrowserTestBase;
 
@@ -94,7 +95,7 @@ class ConfigSelectorUiTest extends BrowserTestBase {
     $this->assertFalse($view_storage->load('feature_test_3')->status());
 
     // Add another type of configuration entity to the feature.
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
     $configs['feature_a_one']
       ->setThirdPartySetting('config_selector', 'feature', 'feature_test')
diff --git a/tests/src/Kernel/ActiveEntityTest.php b/tests/src/Kernel/ActiveEntityTest.php
index 9a6026b..046489b 100644
--- a/tests/src/Kernel/ActiveEntityTest.php
+++ b/tests/src/Kernel/ActiveEntityTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\config_selector\Kernel;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\config_selector\ActiveEntity;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -26,7 +29,7 @@ class ActiveEntityTest extends KernelTestBase {
   /**
    * The config_test entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $testEntityStorage;
 
@@ -42,9 +45,9 @@ class ActiveEntityTest extends KernelTestBase {
    * @covers ::get
    */
   public function testGet() {
-    /** @var \Drupal\config_selector\ActiveEntity $service */
+    /** @var ActiveEntity $service */
     $service = $this->container->get('config_selector.active');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->testEntityStorage->create(['id' => 'test_1']);
     $entity->setThirdPartySetting('config_selector', 'feature', 'test');
     $entity->save();
@@ -83,9 +86,9 @@ class ActiveEntityTest extends KernelTestBase {
    * @covers ::getFromEntity
    */
   public function testGetFromEntity() {
-    /** @var \Drupal\config_selector\ActiveEntity $service */
+    /** @var ActiveEntity $service */
     $service = $this->container->get('config_selector.active');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->testEntityStorage->create(['id' => 'test_1']);
     $entity->setThirdPartySetting('config_selector', 'feature', 'test');
     $entity->save();
diff --git a/tests/src/Kernel/ConfigSelectorTest.php b/tests/src/Kernel/ConfigSelectorTest.php
index c61b7a3..2a36149 100644
--- a/tests/src/Kernel/ConfigSelectorTest.php
+++ b/tests/src/Kernel/ConfigSelectorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\config_selector\Kernel;
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\config_selector\TestLogger;
@@ -33,13 +35,13 @@ class ConfigSelectorTest extends KernelTestBase {
    * Tests \Drupal\config_selector\ConfigSelector().
    */
   public function testConfigSelector() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');
 
     // Install a module that has configuration with config_selector third party
     // settings for the ConfigSelector to process..
     $module_installer->install(['config_selector_test_one']);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
     $this->assertTrue($configs['feature_a_one']->status());
     $this->assertArrayNotHasKey('feature_a_two', $configs);
@@ -248,7 +250,7 @@ class ConfigSelectorTest extends KernelTestBase {
    * Checks indirect module uninstall dependencies.
    */
   public function testConfigSelectorIndirectDependency() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');
 
     // Install two modules at start, 3 configurations should be imported, where
@@ -259,7 +261,7 @@ class ConfigSelectorTest extends KernelTestBase {
       'config_selector_test_one',
       'config_selector_test_depends_on_test_two',
     ]);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
 
     $this->assertFalse($configs['feature_a_one']->status());
@@ -305,11 +307,11 @@ class ConfigSelectorTest extends KernelTestBase {
    * versions.
    */
   public function testConfigSelectorMultipleFeatures() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');
 
     $module_installer->install(['config_selector_test_provides_multiple']);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
 
     $this->assertTrue($configs['feature_a_two']->status());
@@ -332,13 +334,13 @@ class ConfigSelectorTest extends KernelTestBase {
    * Tests installing multiple modules at the same time.
    */
   public function testConfigSelectorMultipleModuleInstall() {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = $this->container->get('module_installer');
 
     // Install a module that has configuration with config_selector third party
     // settings for the ConfigSelector to process..
     $module_installer->install(['config_selector_test_one']);
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface[] $configs */
+    /** @var ConfigEntityInterface[] $configs */
     $configs = \Drupal::entityTypeManager()->getStorage('config_test')->loadMultiple();
     $this->assertTrue($configs['feature_a_one']->status());
     $this->assertArrayNotHasKey('feature_a_two', $configs);
diff --git a/tests/src/Unit/ConfigSelectorTest.php b/tests/src/Unit/ConfigSelectorTest.php
index 3568e02..21d7d06 100644
--- a/tests/src/Unit/ConfigSelectorTest.php
+++ b/tests/src/Unit/ConfigSelectorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\config_selector\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\config_selector\ConfigSelector;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
@@ -17,6 +18,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class ConfigSelectorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::getConfigEntityLink
    */
