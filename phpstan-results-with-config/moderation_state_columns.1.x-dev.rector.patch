diff --git a/moderation_state_columns.info.yml b/moderation_state_columns.info.yml
index 9c309cc..b9c869c 100644
--- a/moderation_state_columns.info.yml
+++ b/moderation_state_columns.info.yml
@@ -1,8 +1,7 @@
 name: 'Moderation state columns'
 type: module
 description: 'Provides a view display that shows moderation states as columns.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Content moderation'
 dependencies:
   - drupal:content_moderation
diff --git a/moderation_state_columns.module b/moderation_state_columns.module
index ed86ab3..b6c2004 100644
--- a/moderation_state_columns.module
+++ b/moderation_state_columns.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Contains moderation_state_columns.module.
@@ -30,11 +32,11 @@ function moderation_state_columns_help($route_name, RouteMatchInterface $route_m
  */
 function template_preprocess_views_view_moderation_state_columns(&$variables) {
   $entities = [];
-  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderationInformation */
+  /** @var ModerationInformationInterface $moderationInformation */
   $moderationInformation = \Drupal::service('content_moderation.moderation_information');
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $variables['view'];
-  /** @var \Drupal\workflows\Entity\Workflow $workflow */
+  /** @var Workflow $workflow */
   $workflow = Workflow::load($view->style_plugin->options['workflow']);
   $states = array_intersect_key(ModerationStateColumns::getWorkflowStatesOptions($workflow), $view->style_plugin->options['states']);
 
@@ -71,7 +73,7 @@ function template_preprocess_views_view_moderation_state_columns(&$variables) {
     }
     $variables['#cache']['tags'] = array_merge($variables['#cache']['tags'], $entity->getCacheTags());
 
-    $entities[$state][] = render($row);
+    $entities[$state][] = \Drupal::service('renderer')->render($row);
   }
   $variables['json_encoded_content'] = json_encode([
     'states' => $states,
diff --git a/src/Plugin/views/style/ModerationStateColumns.php b/src/Plugin/views/style/ModerationStateColumns.php
index b16b3d4..f2d8aed 100644
--- a/src/Plugin/views/style/ModerationStateColumns.php
+++ b/src/Plugin/views/style/ModerationStateColumns.php
@@ -43,7 +43,7 @@ class ModerationStateColumns extends StylePluginBase {
   /**
    * Returns the workflow states as options.
    *
-   * @param \Drupal\workflows\Entity\Workflow $workflow
+   * @param Workflow $workflow
    *   The workflow entity.
    *
    * @return array
@@ -75,7 +75,7 @@ class ModerationStateColumns extends StylePluginBase {
     parent::buildOptionsForm($form, $form_state);
 
     $workflows = ['' => $this->t('- Select -')];
-    /** @var \Drupal\workflows\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     foreach (Workflow::loadMultiple() as $workflow) {
       $workflows[$workflow->id()] = $workflow->label();
     }
@@ -128,7 +128,7 @@ class ModerationStateColumns extends StylePluginBase {
    * Ajax callback that triggers when the workflow changes.
    *
    * @param array $form
-   * @param \Drupal\core\form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 61de1cb..fbed89f 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\moderation_state_columns\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
