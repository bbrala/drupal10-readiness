modules/contrib/xbbcode/src/Annotation/XBBCodeTag.php
modules/contrib/xbbcode/src/Entity/Tag.php
modules/contrib/xbbcode/src/Entity/TagInterface.php
modules/contrib/xbbcode/src/Entity/TagSet.php
modules/contrib/xbbcode/src/Entity/TagSetInterface.php
modules/contrib/xbbcode/src/Form/LabeledFormTrait.php
modules/contrib/xbbcode/src/Form/TagForm.php
modules/contrib/xbbcode/src/Form/TagFormBase.php
modules/contrib/xbbcode/src/Form/TagFormCopy.php
modules/contrib/xbbcode/src/Form/TagFormView.php
modules/contrib/xbbcode/src/Form/TagSetForm.php
modules/contrib/xbbcode/src/Parser/ParserInterface.php
modules/contrib/xbbcode/src/Parser/Processor/CallbackTagProcessor.php
modules/contrib/xbbcode/src/Parser/Processor/TagProcessorBase.php
modules/contrib/xbbcode/src/Parser/Processor/TagProcessorInterface.php
modules/contrib/xbbcode/src/Parser/Tree/ElementInterface.php
modules/contrib/xbbcode/src/Parser/Tree/NodeElement.php
modules/contrib/xbbcode/src/Parser/Tree/NodeElementInterface.php
modules/contrib/xbbcode/src/Parser/Tree/OutputElement.php
modules/contrib/xbbcode/src/Parser/Tree/OutputElementInterface.php
modules/contrib/xbbcode/src/Parser/Tree/RootElement.php
modules/contrib/xbbcode/src/Parser/Tree/TagElement.php
modules/contrib/xbbcode/src/Parser/Tree/TagElementInterface.php
modules/contrib/xbbcode/src/Parser/Tree/TextElement.php
modules/contrib/xbbcode/src/Parser/XBBCodeParser.php
modules/contrib/xbbcode/src/Plugin/Derivative/TagPluginDeriver.php
modules/contrib/xbbcode/src/Plugin/Filter/XBBCodeFilter.php
modules/contrib/xbbcode/src/Plugin/RenderTagPlugin.php
modules/contrib/xbbcode/src/Plugin/TagPluginBase.php
modules/contrib/xbbcode/src/Plugin/TagPluginInterface.php
modules/contrib/xbbcode/src/Plugin/TemplateTagPlugin.php
modules/contrib/xbbcode/src/Plugin/XBBCode/EntityTagPlugin.php
modules/contrib/xbbcode/src/Plugin/XBBCode/NullTagPlugin.php
modules/contrib/xbbcode/src/PluginCollectionArrayAdapter.php
modules/contrib/xbbcode/src/PluginCollectionInterface.php
modules/contrib/xbbcode/src/PreparedTagElement.php
modules/contrib/xbbcode/src/TagAccessHandler.php
modules/contrib/xbbcode/src/TagListBuilder.php
modules/contrib/xbbcode/src/TagPluginCollection.php
modules/contrib/xbbcode/src/TagPluginManager.php
modules/contrib/xbbcode/src/TagProcessResult.php
modules/contrib/xbbcode/src/TagSetListBuilder.php
modules/contrib/xbbcode/src/Utf8.php
modules/contrib/xbbcode/src/XssEscape.php
modules/contrib/xbbcode/standard/src/Plugin/XBBCode/CodeTagPlugin.php
modules/contrib/xbbcode/standard/src/Plugin/XBBCode/ImageTagPlugin.php
modules/contrib/xbbcode/standard/src/Plugin/XBBCode/ListTagPlugin.php
modules/contrib/xbbcode/standard/src/Plugin/XBBCode/TableTagPlugin.php
modules/contrib/xbbcode/standard/src/TreeEncodeTrait.php
modules/contrib/xbbcode/standard/tests/src/Kernel/XBBCodeStandardTest.php
modules/contrib/xbbcode/standard/xbbcode_standard.install
modules/contrib/xbbcode/tests/src/Functional/XBBCodeAdminTest.php
modules/contrib/xbbcode/tests/src/Kernel/XBBCodeDefaultConfigTest.php
modules/contrib/xbbcode/tests/src/Kernel/XBBCodeFilterTest.php
modules/contrib/xbbcode/tests/xbbcode_test_plugin/src/Plugin/XBBCode/XBBCodeTestPlugin.php
modules/contrib/xbbcode/xbbcode.install
modules/contrib/xbbcode/xbbcode.module

41 files with changes
=====================

1) modules/contrib/xbbcode/xbbcode.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\filter\FilterFormatInterface;
 /**
  * @file
  * Update functions for the xbbcode module.
@@ @@
 /**
  * Add an "xss" key to the filter settings.
  *
- * @throws \Drupal\Core\Utility\UpdateException
+ * @throws UpdateException
  *   If the update fails.
  */
 function xbbcode_update_8300() {
@@ @@
   try {
     $storage = Drupal::entityTypeManager()->getStorage('filter_format');

-    /** @var \Drupal\filter\FilterFormatInterface[] $formats */
+    /** @var FilterFormatInterface[] $formats */
     $formats = $storage->loadByProperties(['status' => TRUE]);
     foreach ($formats as $format) {
       $filters = $format->filters();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/xbbcode/tests/src/Kernel/XBBCodeFilterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xbbcode\Kernel;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private $renderer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/xbbcode/tests/src/Kernel/XBBCodeDefaultConfigTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xbbcode\Kernel;

+use Drupal\filter\FilterFormatInterface;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\RoleInterface;
@@ @@
    */
   public function testInstallation(): void {
     // Verify that the format was installed correctly.
-    /** @var \Drupal\filter\FilterFormatInterface $format */
+    /** @var FilterFormatInterface $format */
     $format = FilterFormat::load('xbbcode');

     // Use part of the FilterDefaultConfigTest, but only those parts not
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/xbbcode/tests/src/Functional/XBBCodeAdminTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xbbcode\Functional;

+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * User who can create pages.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $webUser;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ @@
    * @return array
    *   Information about the created tag.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   private function createCustomTag(bool $save = TRUE): array {
     $name = mb_strtolower($this->randomMachineName());
@@ @@
   /**
    * Test the custom tag page.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testCustomTags(): void {
     $this->drupalGet('admin/config/content/xbbcode/tags');
@@ @@
     $this->assertSession()->fieldValueEquals('template_code', rtrim($template));

     // The read-only form has no save button.
-    $fields = $this->xpath($this->assertSession()->buildXPathQuery(
-      '//input[@name=:name][@value=:value]', [
-        ':name' => 'op',
-        ':value' => 'Save',
-      ]
-    ));
+    $fields = $this->xpath($this->assertSession()->buildXPathQuery('//input[@name=:name][@value=:value]', [
+      ':name' => 'op',
+      ':value' => 'Save',
+    ]));
     static::assertEmpty($fields);

     $this->clickLink('Copy');
     $this->assertSession()->addressEquals('admin/config/content/xbbcode/tags/manage/test_tag_external/copy');
     $this->assertSession()->fieldValueEquals('label', 'Test External Template 2');
-    static::assertNotEmpty($this->xpath($this->assertSession()->buildXPathQuery(
-      '//input[@name=:name][@value=:value]', [
-        ':name' => 'op',
-        ':value' => 'Save',
-      ]
-    )));
+    static::assertNotEmpty($this->xpath($this->assertSession()->buildXPathQuery('//input[@name=:name][@value=:value]', [
+      ':name' => 'op',
+      ':value' => 'Save',
+    ])));
     // No copy button on a new tag.
     $this->assertSession()->linkNotExists('Copy');

@@ @@
   /**
    * Test the global default plugins.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ResponseTextException
+   * @throws ExpectationException
    */
   public function testGlobalPlugins(): void {
     // By default, we have the tags from the test module.
@@ @@
   /**
    * Create and edit a tag set.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ResponseTextException
+   * @throws ExpectationException
    */
   public function testTagSet(): void {
     $tag = $this->createCustomTag();
    ----------- end diff -----------

Applied rules:
 * AssertEscapedRector
 * AssertNoEscapedRector
 * BuildXPathQueryRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/xbbcode/standard/tests/src/Kernel/XBBCodeStandardTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xbbcode_standard\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\Html;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/xbbcode/standard/src/TreeEncodeTrait.php:69

    ---------- begin diff ----------
@@ @@
    * @param string $token
    *   The token used as a placeholder.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\TagElement
+   * @return TagElement
    *   A pseudo-tag element (empty name) containing the part of the tree
    *   represented by $cell.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/xbbcode/standard/src/Plugin/XBBCode/TableTagPlugin.php:103

    ---------- begin diff ----------
@@ @@
    * @param array $children
    *   The parse tree under the table tag.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\TagElementInterface[][]
+   * @return TagElementInterface[][]
    *   Array of rows, each row an array of cells, each cell a node element.
    */
   private static function tabulateTree(array $children): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/xbbcode/standard/src/Plugin/XBBCode/ListTagPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode_standard\Plugin\XBBCode;

+use Drupal\xbbcode\Parser\Tree\ElementInterface;
+use Drupal\xbbcode\Parser\Tree\NodeElementInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Render\Markup;
 use Drupal\xbbcode\Parser\Tree\TagElementInterface;
@@ @@
    *
    * Any instance of [*] in the top-level text will be used as a delimiter.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\ElementInterface[] $children
+   * @param ElementInterface[] $children
    *   The tag's child elements in the parse tree.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface[]
+   * @return NodeElementInterface[]
    *   A sequence of nodes, each containing a part of the parse tree.
    */
   protected static function splitContent(array $children): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/xbbcode/src/TagSetListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode;

+use Drupal\xbbcode\Entity\TagSetInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    */
   public function buildRow(EntityInterface $entity): array {
     $row['label'] = $entity->label();
-    /** @var \Drupal\xbbcode\Entity\TagSetInterface $entity */
+    /** @var TagSetInterface $entity */
     $row['tags']['data'] = $entity->getPluginCollection()->getSummary();
     return $row + parent::buildRow($entity);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/xbbcode/src/TagPluginManager.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The default collection.
    *
-   * @var \Drupal\xbbcode\TagPluginCollection
+   * @var TagPluginCollection
    */
   protected $defaultCollection;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *
    * If multiple plugins use the same default name, the last one will be used.
    *
-   * @return \Drupal\xbbcode\TagPluginCollection
+   * @return TagPluginCollection
    *   The plugin collection.
    */
   public function getDefaultCollection(): TagPluginCollection {
@@ @@
       $this->defaultNameCollisions = [];

       foreach ($this->getDefinedIds() as $plugin_id) {
-        /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $plugin */
+        /** @var TagPluginInterface $plugin */
         try {
           $plugin = $this->createInstance($plugin_id);
           $name = $plugin->getName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/xbbcode/src/TagPluginCollection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode;

+use Drupal\xbbcode\Plugin\TagPluginInterface;
 use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\Markup;
@@ @@
   /**
    * Create a plugin collection directly from an array of tag plugins.
    *
-   * @param \Drupal\xbbcode\Plugin\TagPluginInterface[] $tags
+   * @param TagPluginInterface[] $tags
    *   The tag plugins.
    *
    * @return static
@@ @@
     ];

     foreach ($this as $name => $tag) {
-      /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $tag */
+      /** @var TagPluginInterface $tag */
       $parser = new XBBCodeParser(static::createFromTags([$name => $tag]));
       $tree = $parser->parse($tag->getSample());
       $sample = $tree->render();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/xbbcode/src/TagListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode;

+use Drupal\xbbcode\Entity\TagInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\xbbcode\Entity\TagInterface $entity */
+    /** @var TagInterface $entity */
     $row['tag'] = $entity->label();
     $row['description'] = $entity->getDescription();
     $row['sample'] = [
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    */
   protected function getDefaultOperations(EntityInterface $entity): array {
     $operations = parent::getDefaultOperations($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/xbbcode/src/TagAccessHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode;

+use Drupal\xbbcode\Entity\TagInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\xbbcode\Entity\TagInterface $entity */
+    /** @var TagInterface $entity */
     if (($operation === 'update' || $operation === 'delete') && !$entity->isEditable()) {
       return AccessResult::forbidden();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/xbbcode/src/PreparedTagElement.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\xbbcode\Parser\Processor\TagProcessorInterface;
 use Drupal\xbbcode\Parser\Tree\ElementInterface;
@@ @@
   /**
    * The wrapped tag element.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\TagElementInterface
+   * @var TagElementInterface
    */
   protected $tag;

@@ @@
   /**
    * The outer source.
    *
-   * @var \Drupal\Component\Render\MarkupInterface
+   * @var MarkupInterface
    */
   protected $outerSource;

@@ @@
   /**
    * PreparedTagElement constructor.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag to be wrapped.
    */
   public function __construct(TagElementInterface $tag) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/xbbcode/src/PluginCollectionArrayAdapter.php:12

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function offsetExists($offset): bool {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     return $this->has($offset);
   }

@@ @@
    * {@inheritdoc}
    */
   public function offsetGet($offset) {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     return $this->get($offset);
   }

@@ @@
    * {@inheritdoc}
    */
   public function offsetSet($offset, $value): void {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     $this->set($offset, $value);
   }

@@ @@
    * {@inheritdoc}
    */
   public function offsetUnset($offset): void {
-    /** @var \Drupal\xbbcode\PluginCollectionInterface $this */
+    /** @var PluginCollectionInterface $this */
     $this->remove($offset);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/xbbcode/src/Plugin/XBBCode/EntityTagPlugin.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
    *
    * (Not serialized for performance reasons.)
    *
-   * @var \Drupal\xbbcode\Entity\TagInterface
+   * @var TagInterface
    */
   private $entity;

@@ @@
    *   The plugin implementation definition.
    * @param \Twig\Environment $twig
    *   The twig template loader.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The tag storage.
    */
   public function __construct(array $configuration,
@@ @@
   /**
    * Loads the custom tag entity of the plugin.
    *
-   * @return \Drupal\xbbcode\Entity\TagInterface
+   * @return TagInterface
    *   The custom tag entity.
    */
   protected function getEntity(): TagInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/xbbcode/src/Plugin/TemplateTagPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Plugin;

+use Twig\Error\LoaderError;
+use Twig\Error\RuntimeError;
+use Twig\Error\SyntaxError;
 use Drupal\xbbcode\Parser\Tree\TagElementInterface;
 use Drupal\xbbcode\TagProcessResult;
 use Twig\Environment as TwigEnvironment;
@@ @@
    * @return \Twig_TemplateWrapper
    *   The compiled template that should render this tag.
    *
-   * @throws \Twig\Error\LoaderError
-   * @throws \Twig\Error\RuntimeError
-   * @throws \Twig\Error\SyntaxError
+   * @throws LoaderError
+   * @throws RuntimeError
+   * @throws SyntaxError
    */
   protected function getTemplate(): TwigTemplateWrapper {
     if (!$this->templateWrapper) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Twig\Error\LoaderError
-   * @throws \Twig\Error\RuntimeError
-   * @throws \Twig\Error\SyntaxError
+   * @throws LoaderError
+   * @throws RuntimeError
+   * @throws SyntaxError
    */
   public function doProcess(TagElementInterface $tag): TagProcessResult {
     return new TagProcessResult($this->getTemplate()->render([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/xbbcode/src/Plugin/TagPluginInterface.php:78

    ---------- begin diff ----------
@@ @@
   /**
    * Generate output from a tag element.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag element to process.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\OutputElementInterface
+   * @return OutputElementInterface
    *   Actually a TagProcessResult, but PHP does not support covariant types.
    *
    * @todo Add covariant type hints after PHP 7.4 is required.
@@ @@
    *
    * @param string $content
    *   The content, after applying inner transformations.
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The original tag element.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/xbbcode/src/Plugin/TagPluginBase.php:180

    ---------- begin diff ----------
@@ @@
    * Tag plugins should override this function rather than ::process(),
    * in order to let the metadata from sub-tags bubble up.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   Tag element in the parse tree.
    *
-   * @return \Drupal\xbbcode\TagProcessResult
+   * @return TagProcessResult
    *   Tag process result.
    */
   abstract public function doProcess(TagElementInterface $tag): TagProcessResult;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/xbbcode/src/Plugin/RenderTagPlugin.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Drupal renderer service.
    */
   public function __construct(array $configuration,
@@ @@
   /**
    * Build a render array from the tag.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag element in the parse tree.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/xbbcode/src/Plugin/Filter/XBBCodeFilter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Plugin\Filter;

+use Drupal\xbbcode\TagPluginCollection;
+use Drupal\xbbcode\Entity\TagSetInterface;
+use Drupal\xbbcode\Parser\ParserInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The tag set storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\xbbcode\TagPluginManager
+   * @var TagPluginManager
    */
   protected $manager;

@@ @@
   /**
    * The tag plugins.
    *
-   * @var \Drupal\xbbcode\TagPluginCollection
+   * @var TagPluginCollection
    */
   protected $tags;

@@ @@
   /**
    * The tag set (optional).
    *
-   * @var \Drupal\xbbcode\Entity\TagSetInterface
+   * @var TagSetInterface
    */
   protected $tagSet;

@@ @@
   /**
    * The parser.
    *
-   * @var \Drupal\xbbcode\Parser\ParserInterface
+   * @var ParserInterface
    */
   protected $parser;

@@ @@
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The tag set storage.
-   * @param \Drupal\xbbcode\TagPluginManager $manager
+   * @param TagPluginManager $manager
    *   The tag plugin manager.
    */
   public function __construct(array $configuration,
@@ @@
   /**
    * Recursively apply source transformations to each tag element.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\ElementInterface $node
+   * @param ElementInterface $node
    *   The parse tree.
    *
    * @return string
@@ @@
    * The "option" and "attribute" values are provided to plugins as raw input
    * (and will be filtered by them before printing).
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $tree
+   * @param NodeElementInterface $tree
    *   The parse tree.
    */
   public static function decodeHtml(NodeElementInterface $tree): void {
@@ @@
    * on its own (without HTML restrictors) while still maintaining
    * markup safety.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $tree
+   * @param NodeElementInterface $tree
    *   The parse tree.
    */
   public static function filterXss(NodeElementInterface $tree): void {
@@ @@
   /**
    * Add linebreaks inside text elements.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $tree
+   * @param NodeElementInterface $tree
    *   The parse tree.
    */
   public static function addLinebreaks(NodeElementInterface $tree): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/xbbcode/src/Plugin/Derivative/TagPluginDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Plugin\Derivative;

+use Drupal\xbbcode\Entity\TagInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Constructs a Deriver.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage.
    */
   public function __construct(EntityStorageInterface $storage) {
@@ @@
   public function getDerivativeDefinitions($base_plugin_definition): array {
     $xbbcode_tags = $this->storage->loadMultiple();
     foreach ($xbbcode_tags as $id => $tag) {
-      /** @var \Drupal\xbbcode\Entity\TagInterface $tag */
+      /** @var TagInterface $tag */
       $this->derivatives[$id] = [
         'id' => 'xbbcode_tag' . TagPluginBase::DERIVATIVE_SEPARATOR . $id,
         'label' => $tag->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/xbbcode/src/Parser/XBBCodeParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Parser;

+use Drupal\xbbcode\Parser\Processor\TagProcessorInterface;
+use Drupal\xbbcode\Parser\Tree\NodeElement;
 use Drupal\xbbcode\Parser\Tree\NodeElementInterface;
 use Drupal\xbbcode\Parser\Tree\RootElement;
 use Drupal\xbbcode\Parser\Tree\TagElement;
@@ @@
   /**
    * The plugins for rendering.
    *
-   * @var \Drupal\xbbcode\Parser\Processor\TagProcessorInterface[]
+   * @var TagProcessorInterface[]
    */
   protected $processors;

@@ @@
    * @param array[] $tokens
    *   The tokens.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @return NodeElementInterface
    *   The element representing the tree.
    */
   public static function buildTree(string $text, array $tokens): NodeElementInterface {
-    /** @var \Drupal\xbbcode\Parser\Tree\NodeElement[] $stack */
+    /** @var NodeElement[] $stack */
     $stack = [new RootElement()];

     // Tracks the current position in the text.
@@ @@
       }
       else {
         // Pop the closed element.
-        /** @var \Drupal\xbbcode\Parser\Tree\TagElementInterface $element */
+        /** @var TagElementInterface $element */
         $element = array_pop($stack);
         $element->setClosingName($token['name']);
         end($stack)->append($element);
@@ @@
   /**
    * Assign processors to the tag elements of a tree.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $node
+   * @param NodeElementInterface $node
    *   The tree to decorate.
-   * @param \Drupal\xbbcode\Parser\Processor\TagProcessorInterface[]|\ArrayAccess $processors
+   * @param TagProcessorInterface[]|\ArrayAccess $processors
    *   The processors, keyed by name.
    */
   public static function decorateTree(NodeElementInterface $node, $processors): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/xbbcode/src/Parser/Tree/TagElementInterface.php:151

    ---------- begin diff ----------
@@ @@
    * Note that the parent's rendered content will obviously be incomplete
    * during rendering, and should not be accessed.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @return NodeElementInterface
    *   Parent node.
    */
   public function getParent(): NodeElementInterface;
@@ @@
   /**
    * Set the parent of the current tag.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\NodeElementInterface $parent
+   * @param NodeElementInterface $parent
    *   Parent node.
    */
   public function setParent(NodeElementInterface $parent): void;
@@ @@
   /**
    * Get the assigned processor.
    *
-   * @return \Drupal\xbbcode\Parser\Processor\TagProcessorInterface
+   * @return TagProcessorInterface
    *   Tag processor.
    */
   public function getProcessor(): TagProcessorInterface;
@@ @@
   /**
    * Assign a processor to this tag element.
    *
-   * @param \Drupal\xbbcode\Parser\Processor\TagProcessorInterface $processor
+   * @param TagProcessorInterface $processor
    *   A tag processor.
    */
   public function setProcessor(TagProcessorInterface $processor): void;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/xbbcode/src/Parser/Tree/TagElement.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The processor handling this element.
    *
-   * @var \Drupal\xbbcode\Parser\Processor\TagProcessorInterface
+   * @var TagProcessorInterface
    */
   private $processor;

@@ @@
   /**
    * The tag's parent element.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @var NodeElementInterface
    */
   private $parent;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/xbbcode/src/Parser/Tree/NodeElementInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Append an element to the children of this element.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\ElementInterface $element
+   * @param ElementInterface $element
    *   The new element.
    */
   public function append(ElementInterface $element): void;
@@ @@
   /**
    * Get all children of the element.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\ElementInterface[]
+   * @return ElementInterface[]
    *   The children.
    */
   public function getChildren(): array;
@@ @@
    *   (Optional) Set to FALSE to only return output that is already rendered.
    *   By default, this method renders it implicitly.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\OutputElementInterface[]
+   * @return OutputElementInterface[]
    *   The sequence of rendered outputs.
    */
   public function getRenderedChildren(bool $force_render = TRUE): array;
@@ @@
   /**
    * Retrieve the descendants of the node.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\ElementInterface[]|\iterable
+   * @return ElementInterface[]|\iterable
    *   Every descendant of the node.
    */
   public function getDescendants();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/xbbcode/src/Parser/Tree/NodeElement.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * The children of this node.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\ElementInterface[]
+   * @var ElementInterface[]
    */
   protected $children = [];

@@ @@
   /**
    * The rendered children of this node.
    *
-   * @var \Drupal\xbbcode\Parser\Tree\OutputElementInterface[]
+   * @var OutputElementInterface[]
    */
   protected $output;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/xbbcode/src/Parser/Tree/ElementInterface.php:9

    ---------- begin diff ----------
@@ @@
   /**
    * Render this element to a string.
    *
-   * @return string|\Drupal\xbbcode\Parser\Tree\OutputElementInterface
+   * @return string|OutputElementInterface
    *   The rendered output.
    */
   public function render();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/xbbcode/src/Parser/Processor/TagProcessorInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Process a tag match.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   The tag to be rendered.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\OutputElementInterface
+   * @return OutputElementInterface
    *   The rendered output.
    */
   public function process(TagElementInterface $tag): OutputElementInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/xbbcode/src/Parser/Processor/TagProcessorBase.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Override this function to return any printable value.
    *
-   * @param \Drupal\xbbcode\Parser\Tree\TagElementInterface $tag
+   * @param TagElementInterface $tag
    *   Tag element in the parse tree.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/xbbcode/src/Parser/ParserInterface.php:14

    ---------- begin diff ----------
@@ @@
    * @param string $text
    *   The source text.
    *
-   * @return \Drupal\xbbcode\Parser\Tree\NodeElementInterface
+   * @return NodeElementInterface
    *   The element representing the root of the tree.
    */
   public function parse(string $text): NodeElementInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/xbbcode/src/Form/TagSetForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Form;

+use Drupal\xbbcode\Entity\TagSetInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\filter\FilterFormatInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $tagStorage;

@@ @@
   /**
    * The format storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $formatStorage;

@@ @@
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\xbbcode\TagPluginManager
+   * @var TagPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * Constructs a new FilterFormatFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $tagStorage
+   * @param EntityStorageInterface $tagStorage
    *   The entity storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $formatStorage
+   * @param EntityStorageInterface $formatStorage
    *   The format storage.
-   * @param \Drupal\xbbcode\TagPluginManager $pluginManager
+   * @param TagPluginManager $pluginManager
    *   The tag plugin manager.
    */
   public function __construct(EntityStorageInterface $tagStorage,
@@ @@
       '#empty'      => $this->t('No custom tags or plugins are available.'),
     ];

-    /** @var \Drupal\xbbcode\Entity\TagSetInterface $tagSet */
+    /** @var TagSetInterface $tagSet */
     $tagSet = $this->entity;
     $plugins = new TagPluginCollection($this->pluginManager,
                                        $tagSet->getTags());
@@ @@
     // Add the fields for the activated plugins, keyed by current tag name.
     // (This is because the same plugin might be active with multiple names.)
     foreach ($plugins as $name => $plugin) {
-      /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $plugin */
+      /** @var TagPluginInterface $plugin */
       $settings["enabled:$name"] = $this->buildRow($plugin, TRUE);
       $form['_tags']['#default_value']["enabled:$name"] = TRUE;

@@ @@
     // Add the fields for the available plugins, keyed by plugin ID.
     // (This is because multiple plugins might use the same default tag name.)
     foreach ($available as $plugin_id) {
-      /** @var \Drupal\xbbcode\Plugin\TagPluginInterface $plugin */
+      /** @var TagPluginInterface $plugin */
       try {
         $plugin = $this->pluginManager->createInstance($plugin_id);
         $settings["available:$plugin_id"] = $this->buildRow($plugin, FALSE);
@@ @@
   /**
    * Build a table row for a single plugin.
    *
-   * @param \Drupal\xbbcode\Plugin\TagPluginInterface $plugin
+   * @param TagPluginInterface $plugin
    *   The plugin instance.
    * @param bool $enabled
    *   Whether or not the plugin is currently enabled.
@@ @@
       $tags[$row['name']] = $this->buildPluginConfiguration($row);
     }

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity->set('tags', $tags);
   }

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state): int {
     $result = parent::save($form, $form_state);
@@ @@
     ];

     foreach ($update as $tag_set => $formats) {
-      /** @var \Drupal\filter\FilterFormatInterface $format */
+      /** @var FilterFormatInterface $format */
       foreach ($this->formatStorage->loadMultiple($formats) as $format) {
         $filter = $format->filters('xbbcode');
         $config = $filter->getConfiguration();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/xbbcode/src/Form/TagFormView.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Form;

+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
+   * @throws ServiceCircularReferenceException
+   * @throws ServiceNotFoundException
    */
   public static function create(ContainerInterface $container): self {
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/xbbcode/src/Form/TagFormCopy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityInterface;

 /**
@@ @@
       $number = 1;
     }

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $copy */
+    /** @var ConfigEntityInterface $copy */
     $copy = $entity->createDuplicate();
     $copy->set('label', $label . ' ' . ($number + 1));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/xbbcode/src/Form/TagFormBase.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The twig service.
    *
-   * @var \Drupal\Core\Template\TwigEnvironment
+   * @var TwigEnvironment
    */
   protected $twig;

@@ @@
   /**
    * TagFormBase constructor.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The twig service.
    */
   public function __construct(TwigEnvironment $twig) {
@@ @@
   public function form(array $form, FormStateInterface $form_state): array {
     $form = $this->addLabelFields($form);

-    /** @var \Drupal\xbbcode\Entity\TagInterface $tag */
+    /** @var TagInterface $tag */
     $tag = $this->entity;
     $sample = str_replace('{{ name }}', $tag->getName(), $tag->getSample());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/xbbcode/src/Form/TagForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Form;

+use Drupal\xbbcode\Entity\TagInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The tag storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The tag plugin manager.
    *
-   * @var \Drupal\xbbcode\TagPluginManager
+   * @var TagPluginManager
    */
   protected $manager;

@@ @@
   /**
    * Constructs a new TagForm.
    *
-   * @param \Drupal\Core\Template\TwigEnvironment $twig
+   * @param TwigEnvironment $twig
    *   The twig service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The tag storage.
-   * @param \Drupal\xbbcode\TagPluginManager $manager
+   * @param TagPluginManager $manager
    *   The tag plugin manager.
    */
   public function __construct(TwigEnvironment $twig, EntityStorageInterface $storage, TagPluginManager $manager) {
@@ @@
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state): void {
     parent::copyFormValuesToEntity($entity, $form, $form_state);
-    /** @var \Drupal\xbbcode\Entity\TagInterface $entity */
+    /** @var TagInterface $entity */
     $name = $entity->getName();

     // Ensure the input is safe for regex patterns, as it is not yet validated.
@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state): void {
     parent::validateForm($form, $form_state);

-    /** @var \Drupal\xbbcode\Entity\TagInterface $tag */
+    /** @var TagInterface $tag */
     $tag = $this->entity;

     // Set up a mock parser and do a practice run with this tag.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Core\Entity\Exception\UndefinedLinkTemplateException
+   * @throws EntityMalformedException
+   * @throws UndefinedLinkTemplateException
    */
   public function save(array $form, FormStateInterface $form_state): int {
     $result = parent::save($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/xbbcode/src/Form/LabeledFormTrait.php:20

    ---------- begin diff ----------
@@ @@
    *
    * Redeclared here because PHP traits cannot implement interfaces.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The current form entity.
    *
    * @see \Drupal\Core\Entity\EntityFormInterface::getEntity()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


38) modules/contrib/xbbcode/src/Entity/TagSetInterface.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Get the plugin collection.
    *
-   * @return \Drupal\xbbcode\TagPluginCollection
+   * @return TagPluginCollection
    *   The plugin collection.
    */
   public function getPluginCollection(): TagPluginCollection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/xbbcode/src/Entity/TagSet.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * The tag plugin collection.
    *
-   * @var \Drupal\xbbcode\TagPluginCollection
+   * @var TagPluginCollection
    */
   protected $pluginCollection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/xbbcode/src/Entity/Tag.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Entity;

+use Drupal\filter\FilterFormatInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\Cache;
@@ @@
   /**
    * Get all formats that use this tag.
    *
-   * @return \Drupal\filter\FilterFormatInterface[]
+   * @return FilterFormatInterface[]
    *   An array of filter formats using a tag set where this tag is active.
    */
   protected function getFormats(): array {
@@ @@
         ->condition('filters.xbbcode.status', TRUE)
         ->execute();

-      /** @var \Drupal\filter\FilterFormatInterface $format */
+      /** @var FilterFormatInterface $format */
       foreach ($storage->loadMultiple($ids) as $id => $format) {
         $config = $format->filters('xbbcode')->getConfiguration();
         $tag_set_id = $config['settings']['tags'];
@@ @@

         // If it references an existing tag set without this tag, skip.
         if ($tag_set_id) {
-          /** @var \Drupal\xbbcode\Entity\TagSetInterface $tag_set */
+          /** @var TagSetInterface $tag_set */
           $tag_set = TagSet::load($tag_set_id);
           if ($tag_set !== NULL && !$tag_set->hasTag($this->id())) {
             continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/xbbcode/src/Annotation/XBBCodeTag.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xbbcode\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the tag.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Additional administrative information about the filter's behavior.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A sample tag for the filter tips.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 41 files have been changed by Rector                                      

