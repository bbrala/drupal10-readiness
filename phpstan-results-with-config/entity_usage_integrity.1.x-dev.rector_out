modules/contrib/entity_usage_integrity/entity_usage_integrity.module
modules/contrib/entity_usage_integrity/src/EntityUsage.php
modules/contrib/entity_usage_integrity/src/EntityUsageIntegrityResource/RelationCollections.php
modules/contrib/entity_usage_integrity/src/EntityUsageIntegrityResource/RelationStatusCollection.php
modules/contrib/entity_usage_integrity/src/EntityUsageIntegrityResource/RelationStatusItem.php
modules/contrib/entity_usage_integrity/src/Event/EntityUsageIntegrityApplicabilityCheckEvent.php
modules/contrib/entity_usage_integrity/src/Event/EntityUsageIntegrityEvents.php
modules/contrib/entity_usage_integrity/src/Form/IntegritySettingsForm.php
modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/ModerationStateChangeConfirmDialog.php
modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/SubmittedEditForm.php
modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/SubmittedFormBase.php
modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/SubmittedModerationStateForm.php
modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/ViewedDeleteForm.php
modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/ViewedEditForm.php
modules/contrib/entity_usage_integrity/src/IntegrityValidationContext.php
modules/contrib/entity_usage_integrity/src/IntegrityValidationTrait.php
modules/contrib/entity_usage_integrity/src/IntegrityValidator.php

14 files with changes
=====================

1) modules/contrib/entity_usage_integrity/src/IntegrityValidator.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity usage service.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsage
+   * @var EntityUsage
    */
   protected $entityUsage;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity usage integrity logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Construct the IntegrityValidator object.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsage $entity_usage
+   * @param EntityUsage $entity_usage
    *   The entity usage service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The entity usage integrity logger channel.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(EntityUsage $entity_usage, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger, MessengerInterface $messenger, Renderer $renderer) {
@@ @@
    *    of entity usage, but we have to get relations directly from
    *    entity field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity for which we are validating entity usage integrity.
    * @param string $context
    *   Context of validation.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections
+   * @return RelationCollections
    *   Collection of relations for current entity with statuses.
    */
   public function getValidatedUsageRelations(EntityInterface $current_entity, $context) {
@@ @@
   /**
    * Validate relation between current entity and related entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity for which we are validating entity usage integrity.
    * @param array $related_entities_data
    *   Data about related entities to current entity.
    * @param string $relation_type
    *   Relation type between current entity and related entities.
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relations
+   * @param RelationCollections $relations
    *   Collection of validated relations.
    */
   protected function validateEntityRelations(EntityInterface $current_entity, array $related_entities_data, $relation_type, RelationCollections $relations) {
@@ @@
    * Relation is 'broken' if target entity doesn't exists.
    * Relation is 'ignore' if it is valid, but source is unpublished.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $source_entity
+   * @param EntityInterface|null $source_entity
    *   Source entity.
-   * @param \Drupal\Core\Entity\EntityInterface|null $target_entity
+   * @param EntityInterface|null $target_entity
    *   Target entity.
    *
    * @return string
@@ @@
   /**
    * Check if given entity is published.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to check status.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/entity_usage_integrity/src/IntegrityValidationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Exception;
@@ @@
   /**
    * The entity usage integrity validator service.
    *
-   * @var \Drupal\entity_usage_integrity\IntegrityValidator
+   * @var IntegrityValidator
    */
   protected $integrityValidator;

@@ @@
   /**
    * The entity usage integrity configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $integrityConfig;

@@ @@
   /**
    * Injects the integrity validator service.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
    *
    * @return $this
@@ @@
   /**
    * Set entity usage integrity configuration.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    *
    * @return $this
@@ @@
   /**
    * Validate usage integrity for given entity and get validated relations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity for which we are validating entity usage integrity.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections
+   * @return RelationCollections
    *   Collection of relations for current entity with statuses.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/ViewedEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityFormInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Create EntityUsageIntegrityForm object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, RequestStack $request, EventDispatcherInterface $event_dispatcher) {
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form id.
@@ @@
    * is opened and default revision is displayed, we have to do extra check
    * to verify if form refers to current revision.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ @@
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ @@

     if ($is_applicable) {
       $event = new EntityUsageIntegrityApplicabilityCheckEvent($form_state, $is_applicable);
-      $this->eventDispatcher->dispatch(EntityUsageIntegrityEvents::APPLICABILITY_CHECK, $event);
+      $this->eventDispatcher->dispatch($event, EntityUsageIntegrityEvents::APPLICABILITY_CHECK);
       $is_applicable = $event->isApplicable();
     }

@@ @@
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ @@
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageHeader($relation_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/ViewedDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityFormInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Create ViewedDeleteForm object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, EventDispatcherInterface $event_dispatcher) {
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form id.
@@ @@
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ @@

     if ($is_applicable) {
       $event = new EntityUsageIntegrityApplicabilityCheckEvent($form_state, $is_applicable);
-      $this->eventDispatcher->dispatch(EntityUsageIntegrityEvents::APPLICABILITY_CHECK, $event);
+      $this->eventDispatcher->dispatch($event, EntityUsageIntegrityEvents::APPLICABILITY_CHECK);
       $is_applicable = $event->isApplicable();
     }

@@ @@
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ @@
   /**
    * Get message displayed after list of related entities.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageFooter() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/SubmittedModerationStateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   protected function buildEntity(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->get('entity');
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
     $entity = $storage->createRevision($entity, $entity->isDefaultRevision());
     $new_state = $form_state->getValue('moderation_state');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/SubmittedFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Create SubmittedFormBase object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, ConfigFactoryInterface $config_factory) {
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validate(array &$form, FormStateInterface $form_state) {
@@ @@
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ @@
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageHeader($relation_type) {
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The current entity with new values from form.
    */
   abstract protected function buildEntity(array &$form, FormStateInterface $form_state);
@@ @@
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/SubmittedEditForm.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_usage_integrity/src/FormIntegrityValidation/ModerationStateChangeConfirmDialog.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity\FormIntegrityValidation;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * Create SubmittedFormBase object.
    *
-   * @param \Drupal\entity_usage_integrity\IntegrityValidator $integrity_validator
+   * @param IntegrityValidator $integrity_validator
    *   The entity usage integrity validator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
    */
   public function __construct(IntegrityValidator $integrity_validator, EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, EntityTypeBundleInfoInterface $entity_type_bundle_info, EventDispatcherInterface $event_dispatcher, ModerationInformationInterface $moderation_information = NULL) {
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form id.
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response containing modal dialog with relations that will be broken
    *   if entity will be saved with selected content moderation state
    *   or empty ajax response if no errors found.
@@ @@
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The current entity with new values from form.
    */
   protected function buildEntity(array &$form, FormStateInterface $form_state) {
@@ @@
     }
     elseif ($this->isContentModerationForm($form_state)) {
       $entity = $form_state->get('entity');
-      /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+      /** @var ContentEntityStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       $entity = $storage->createRevision($entity, $entity->isDefaultRevision());
       $new_state = $form_state->getValue('new_state');
@@ @@
   /**
    * Check if a given generic form is applicable to be altered.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ @@

     if ($is_applicable) {
       $event = new EntityUsageIntegrityApplicabilityCheckEvent($form_state, $is_applicable);
-      $this->eventDispatcher->dispatch(EntityUsageIntegrityEvents::APPLICABILITY_CHECK, $event);
+      $this->eventDispatcher->dispatch($event, EntityUsageIntegrityEvents::APPLICABILITY_CHECK);
       $is_applicable = $event->isApplicable();
     }

@@ @@
   /**
    * Checks if current form is content entity form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ @@
    * content_moderation_info_block_form. These forms allows to change moderation
    * state without editing the entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form object.
    *
    * @return bool
@@ @@
   /**
    * Get message to display.
    *
-   * @param \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationCollections $relation_collections
+   * @param RelationCollections $relation_collections
    *   Entity usage relation collections.
    *
    * @return array
@@ @@
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageHeader($relation_type) {
@@ @@
   /**
    * Get message displayed after list of related entities.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Message to display before list of related entities.
    */
   protected function getMessageFooter() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/entity_usage_integrity/src/Event/EntityUsageIntegrityApplicabilityCheckEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines an entity usage integrity applicability check event.
@@ @@
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
   /**
    * Constructs an applicability check event object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param bool $is_applicable
    *   The default applicability status. TRUE if an entity usage integrity check
@@ @@
   /**
    * Gets the form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The form state.
    */
   public function getFormState() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_usage_integrity/src/EntityUsageIntegrityResource/RelationStatusItem.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Entity initializing integrity check.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $currentEntity;

@@ @@
   /**
    * Entity related to current entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $relatedEntity;

@@ @@
   /**
    * Create RelationItem object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity initializing integrity check.
-   * @param \Drupal\Core\Entity\EntityInterface $related_entity
+   * @param EntityInterface $related_entity
    *   Entity related to current entity.
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
@@ @@
   /**
    * Get related entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Related entity.
    */
   public function getRelatedEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/entity_usage_integrity/src/EntityUsageIntegrityResource/RelationStatusCollection.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Storage for relation items.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusItem[]
+   * @var RelationStatusItem[]
    */
   protected $relations = [];

@@ @@
   /**
    * Add new entity usage relation item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $current_entity
+   * @param EntityInterface $current_entity
    *   Entity initializing integrity check.
-   * @param \Drupal\Core\Entity\EntityInterface $related_entity
+   * @param EntityInterface $related_entity
    *   Entity related to current entity.
    * @param string $relation_type
    *   Describes if current entity is 'source' or 'target' of relation.
@@ @@
    */
   public function getRelatedEntitiesElement($relation_type) {
     $element = [];
-    /** @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusItem[] $relation */
+    /** @var RelationStatusItem[] $relation */
     foreach ($this->relations as $relation) {
       if ($relation->getRelationType() == $relation_type) {
         $entity = $relation->getRelatedEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/entity_usage_integrity/src/EntityUsageIntegrityResource/RelationCollections.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Storage for valid usage integrity relations.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @var RelationStatusCollection
    */
   protected $validRelations;

@@ @@
   /**
    * Storage for invalid usage integrity relations.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @var RelationStatusCollection
    */
   protected $invalidRelations;

@@ @@
   /**
    * Storage for broken usage integrity relations.
    *
-   * @var \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @var RelationStatusCollection
    */
   protected $brokenRelations;

@@ @@
    *
    *   Broken relation means that related_entity doesn't exists.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @return RelationStatusCollection
    *   Collection of relations with given relation status.
    */
   public function getRelationCollectionWithStatus($relation_status) {
@@ @@
    *   'invalid' if we would like to get number of invalid relations,
    *   'broken' if we would like to get number of broken relations.
    *
-   * @return \Drupal\entity_usage_integrity\EntityUsageIntegrityResource\RelationStatusCollection
+   * @return RelationStatusCollection
    *   Relation collection of given type.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/entity_usage_integrity/src/EntityUsage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_usage_integrity;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * The database connection used to store entity usage information.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Construct the EntityUsage object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection which will be used to store the entity usage
    *   information.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\entity_usage\EntityUsageInterface $entity_usage
    *   The entity usage service.
@@ @@
    * Drupal\entity_usage\EntityUsage::listSources(), but it is assumed that
    * it is useful only for the module and won't be used anywhere else.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $target_entity
+   * @param EntityInterface $target_entity
    *   A target entity.
    *
    * @return array
@@ @@
           // reference. But entity usage integrity checks integrity only
           // for default revision, so further processing makes no
           // sense in that scenario.
-          /** @var \Drupal\Core\Entity\RevisionableInterface $source */
+          /** @var RevisionableInterface $source */
           foreach ($source_revisions as $entity_usage_source_revision) {
             if ($source->getRevisionId() === $entity_usage_source_revision['source_vid']
               && $target_entity->language()->getId() === $entity_usage_source_revision['source_langcode']
@@ @@
    * As original Drupal\entity_usage\EntityUsage::listTargets()
    * is not supporting that, we have to wrote new method.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity to check for references.
    *
    * @return array
@@ @@
    * table and we can't get them this way (like on listTargets())
    * We have to get new relations directly from referencing fields.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $source_entity
+   * @param EntityInterface $source_entity
    *   The source entity before save to check for references.
    *
    * @return array
@@ @@
       $fields = array_keys($instance->getReferencingFields($source_entity, $trackable_field_types));
       foreach ($fields as $field_name) {
         if ($source_entity instanceof FieldableEntityInterface && $source_entity->hasField($field_name) && !$source_entity->{$field_name}->isEmpty()) {
-          /** @var \Drupal\Core\Field\FieldItemInterface $field_item */
+          /** @var FieldItemInterface $field_item */
           foreach ($source_entity->{$field_name} as $field_item) {
             $properties = $field_item->getProperties();
             // Fix for dynamic entity references where entity_type stores
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/entity_usage_integrity/entity_usage_integrity.module:49

    ---------- begin diff ----------
@@ @@
  *
  * @param array &$form
  *   A reference to an associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @internal
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 14 files have been changed by Rector                                      

