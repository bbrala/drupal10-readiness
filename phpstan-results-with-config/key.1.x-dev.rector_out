modules/contrib/key/drush/key.drush.inc
modules/contrib/key/drush/key_delete.drush.inc
modules/contrib/key/drush/key_list.drush.inc
modules/contrib/key/drush/key_provider_list.drush.inc
modules/contrib/key/drush/key_save.drush.inc
modules/contrib/key/drush/key_type_list.drush.inc
modules/contrib/key/drush/key_value_get.drush.inc
modules/contrib/key/key.api.php
modules/contrib/key/key.install
modules/contrib/key/key.module
modules/contrib/key/src/Annotation/KeyInput.php
modules/contrib/key/src/Annotation/KeyProvider.php
modules/contrib/key/src/Annotation/KeyType.php
modules/contrib/key/src/Commands/KeyCommands.php
modules/contrib/key/src/Controller/KeyConfigOverrideListBuilder.php
modules/contrib/key/src/Controller/KeyListBuilder.php
modules/contrib/key/src/Element/KeySelect.php
modules/contrib/key/src/Entity/Key.php
modules/contrib/key/src/Entity/KeyConfigOverride.php
modules/contrib/key/src/Exception/KeyException.php
modules/contrib/key/src/Exception/KeyValueNotDeletedException.php
modules/contrib/key/src/Exception/KeyValueNotRetrievedException.php
modules/contrib/key/src/Exception/KeyValueNotSetException.php
modules/contrib/key/src/Form/KeyAddForm.php
modules/contrib/key/src/Form/KeyConfigOverrideAddForm.php
modules/contrib/key/src/Form/KeyConfigOverrideDeleteForm.php
modules/contrib/key/src/Form/KeyDeleteForm.php
modules/contrib/key/src/Form/KeyEditForm.php
modules/contrib/key/src/Form/KeyFormBase.php
modules/contrib/key/src/KeyConfigOverrideInterface.php
modules/contrib/key/src/KeyConfigOverrides.php
modules/contrib/key/src/KeyInterface.php
modules/contrib/key/src/KeyRepository.php
modules/contrib/key/src/KeyRepositoryInterface.php
modules/contrib/key/src/Plugin/KeyInput/GenerateKeyInput.php
modules/contrib/key/src/Plugin/KeyInput/NoneKeyInput.php
modules/contrib/key/src/Plugin/KeyInput/TextFieldKeyInput.php
modules/contrib/key/src/Plugin/KeyInput/TextareaFieldKeyInput.php
modules/contrib/key/src/Plugin/KeyInputBase.php
modules/contrib/key/src/Plugin/KeyInputInterface.php
modules/contrib/key/src/Plugin/KeyPluginBase.php
modules/contrib/key/src/Plugin/KeyPluginCollection.php
modules/contrib/key/src/Plugin/KeyPluginDeleteFormInterface.php
modules/contrib/key/src/Plugin/KeyPluginFormInterface.php
modules/contrib/key/src/Plugin/KeyPluginInterface.php
modules/contrib/key/src/Plugin/KeyPluginManager.php
modules/contrib/key/src/Plugin/KeyProvider/ConfigKeyProvider.php
modules/contrib/key/src/Plugin/KeyProvider/EnvKeyProvider.php
modules/contrib/key/src/Plugin/KeyProvider/FileKeyProvider.php
modules/contrib/key/src/Plugin/KeyProviderBase.php
modules/contrib/key/src/Plugin/KeyProviderInterface.php
modules/contrib/key/src/Plugin/KeyProviderSettableValueInterface.php
modules/contrib/key/src/Plugin/KeyType/AuthenticationKeyType.php
modules/contrib/key/src/Plugin/KeyType/AuthenticationMultivalueKeyType.php
modules/contrib/key/src/Plugin/KeyType/EncryptionKeyType.php
modules/contrib/key/src/Plugin/KeyType/UserPasswordKeyType.php
modules/contrib/key/src/Plugin/KeyTypeBase.php
modules/contrib/key/src/Plugin/KeyTypeInterface.php
modules/contrib/key/src/Plugin/KeyTypeMultivalueInterface.php
modules/contrib/key/tests/modules/key_test/src/Plugin/KeyInput/MutliValueKeyInput.php
modules/contrib/key/tests/modules/key_test/src/Plugin/KeyProvider/State.php
modules/contrib/key/tests/modules/key_test/src/Plugin/KeyType/MultiValueKeyType.php
modules/contrib/key/tests/src/Functional/KeyAdminTest.php
modules/contrib/key/tests/src/Functional/KeyInputTest.php
modules/contrib/key/tests/src/Functional/KeyNonAdminAccessTest.php
modules/contrib/key/tests/src/Functional/KeyOverrideAdminTest.php
modules/contrib/key/tests/src/Functional/KeyRepositoryServiceTest.php
modules/contrib/key/tests/src/Functional/KeyTestTrait.php
modules/contrib/key/tests/src/Kernel/KeyMultiValueTest.php
modules/contrib/key/tests/src/Unit/Entity/KeyEntityTest.php
modules/contrib/key/tests/src/Unit/KeyTestBase.php

34 files with changes
=====================

1) modules/contrib/key/tests/src/Unit/KeyTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\key\Unit;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Tests\UnitTestCase;
@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Configuration storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorage
+   * @var ConfigEntityStorage
    */
   protected $configStorage;

@@ @@
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
    * This should be used sparingly by test cases to add to the container as
    * necessary for tests.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Mock the Config object, but methods will be mocked in the test class.
-    $this->config = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->config = $this->createMock('\Drupal\Core\Config\ImmutableConfig');

     // Mock ConfigEntityStorage object, but methods will be mocked in the test
     // class.
-    $this->configStorage = $this->getMockBuilder('\Drupal\Core\Config\Entity\ConfigEntityStorage')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->configStorage = $this->createMock('\Drupal\Core\Config\Entity\ConfigEntityStorage');

     // Mock EntityTypeManager service.
-    $this->entityTypeManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityTypeManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManager');
     $this->entityTypeManager->expects($this->any())
       ->method('getStorage')
       ->with('key')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/key/tests/src/Unit/Entity/KeyEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\key\Unit\Entity;

+use Drupal\key\Plugin\KeyPluginManager;
 use Drupal\key\Entity\Key;
 use Drupal\key\Plugin\KeyProvider\ConfigKeyProvider;
 use Drupal\key\Plugin\KeyType\AuthenticationKeyType;
@@ @@
   /**
    * Key type manager.
    *
-   * @var \Drupal\key\Plugin\KeyPluginManager
+   * @var KeyPluginManager
    */
   protected $keyTypeManager;

@@ @@
   /**
    * Key provider manager.
    *
-   * @var \Drupal\key\Plugin\KeyPluginManager
+   * @var KeyPluginManager
    */
   protected $keyProviderManager;

@@ @@
   /**
    * Key plugin manager.
    *
-   * @var \Drupal\key\Plugin\KeyPluginManager
+   * @var KeyPluginManager
    */
   protected $keyInputManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $definition = [
@@ @@
     $plugin = new AuthenticationKeyType($this->key_type_settings, 'authentication', $definition);

     // Mock the KeyTypeManager service.
-    $this->keyTypeManager = $this->getMockBuilder('\Drupal\key\Plugin\KeyPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->keyTypeManager = $this->createMock('\Drupal\key\Plugin\KeyPluginManager');

     $this->keyTypeManager->expects($this->any())
       ->method('getDefinitions')
@@ @@
     $plugin = new ConfigKeyProvider($this->key_provider_settings, 'config', $definition);

     // Mock the KeyProviderManager service.
-    $this->keyProviderManager = $this->getMockBuilder('\Drupal\key\Plugin\KeyPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->keyProviderManager = $this->createMock('\Drupal\key\Plugin\KeyPluginManager');

     $this->keyProviderManager->expects($this->any())
       ->method('getDefinitions')
@@ @@
     $plugin = new NoneKeyInput($this->key_input_settings, 'none', $definition);

     // Mock the KeyInputManager service.
-    $this->keyInputManager = $this->getMockBuilder('\Drupal\key\Plugin\KeyPluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->keyInputManager = $this->createMock('\Drupal\key\Plugin\KeyPluginManager');

     $this->keyInputManager->expects($this->any())
       ->method('getDefinitions')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/key/tests/src/Functional/KeyTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\key\Functional;

+use Drupal\key\KeyInterface;
+use Drupal\key\KeyConfigOverrideInterface;
 use Drupal\Core\Url;
 use Drupal\key\Entity\Key;
 use Drupal\key\Entity\KeyConfigOverride;
@@ @@
   /**
    * A key entity to use for testing.
    *
-   * @var \Drupal\key\KeyInterface
+   * @var KeyInterface
    */
   protected $testKey;

@@ @@
   /**
    * A key configuration override entity to use for testing.
    *
-   * @var \Drupal\key\KeyConfigOverrideInterface
+   * @var KeyConfigOverrideInterface
    */
   protected $testKeyConfigOverride;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/key/tests/src/Functional/KeyOverrideAdminTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->createTestKey('key_foo');
     $this->createTestKeyConfigOverride('test_override', 'key_foo');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/key/tests/src/Functional/KeyNonAdminAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\key\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A non-admin authenticated user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $authenticatedUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->createTestKey('key_foo');
     $this->createTestKeyConfigOverride('test_override', 'key_foo');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/key/tests/src/Functional/KeyInputTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\key\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Url;
@@ @@
   /**
    * A user with the 'administer keys' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer keys']);
@@ @@
       'key_type' => 'authentication',
       'key_input_settings[key_value]' => str_pad('', 4000, 'z'),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains(sprintf('The key %s has been added.', $edit['label']));

     // Go to the Key page.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/key/tests/src/Functional/KeyAdminTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\key\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\Url;
@@ @@
   /**
    * A user with the 'administer keys' permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer keys']);
@@ @@
       'id' => 'testing_key',
       'label' => 'Testing Key',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Go to the Key list page.
     $this->drupalGet('admin/config/system/keys');
@@ @@

   /**
    * Tests key routes for an authorized user.
+   * @doesNotPerformAssertions
    */
   public function testAdminUserRoutes() {
     $this->createTestKey('key_foo');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/key/tests/modules/key_test/src/Plugin/KeyProvider/State.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key_test\Plugin\KeyProvider;

+use Drupal\Core\State\StateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\key\KeyInterface;
 use Drupal\key\Plugin\KeyProviderBase;
@@ @@
   /**
    * State.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/key/src/Plugin/KeyTypeInterface.php:13

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the plugin form.
    * @param string|null $key_value
    *   The key value to be validated.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/key/src/Plugin/KeyType/AuthenticationKeyType.php:24

    ---------- begin diff ----------
@@ @@
    */
   public static function generateKeyValue(array $configuration) {
     // Generate a random 16-character password.
-    return user_password(16);
+    return \Drupal::service('password_generator')->generate(16);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/key/src/Plugin/KeyProviderSettableValueInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the value of a key.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key whose value will be set.
    * @param string $key_value
    *   The key value.
@@ @@
   /**
    * Deletes the value of a key.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key whose value will be deleted.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/key/src/Plugin/KeyProviderInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the value of a key.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key whose value will be retrieved.
    *
    * @return string
@@ @@
   /**
    * Allows a key provider to perform actions after a key entity is saved.
    *
-   * @param \Drupal\key\KeyInterface $key
+   * @param KeyInterface $key
    *   The key entity that was saved.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage object.
    * @param bool $update
    *   TRUE if the entity has been updated, or FALSE if it has been inserted.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/key/src/Plugin/KeyPluginManager.php:25

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct($type, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/key/src/Plugin/KeyPluginDeleteFormInterface.php:17

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateDeleteForm(array &$form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitDeleteForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/key/src/Plugin/KeyInputInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Process a submitted key value.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/key/src/Plugin/KeyInput/TextFieldKeyInput.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Plugin\KeyInput;

+use Drupal\key\Entity\Key;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\key\Plugin\KeyInputBase;

@@ @@
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $key_value_data = $form_state->get('key_value');

-    /** @var \Drupal\key\Entity\Key $key */
+    /** @var Key $key */
     $key = $form_state->getFormObject()->getEntity();
     $form['key_value'] = [
       '#type' => 'textfield',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/key/src/Plugin/KeyInput/GenerateKeyInput.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Plugin\KeyInput;

+use Drupal\key\Entity\Key;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\key\Plugin\KeyInputBase;

@@ @@
       ];
     }
     else {
-      /** @var \Drupal\key\Entity\Key $key */
+      /** @var Key $key */
       $key = $form_state->getFormObject()->getEntity();
       $key_type = $key->getKeyType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/key/src/KeyRepositoryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key;

+use Drupal\key\Entity\Key;
 /**
  * Provides the interface for a repository of Key entities.
  */
@@ @@
    * @param array $key_ids
    *   (optional) An array of entity IDs, or NULL to load all entities.
    *
-   * @return \Drupal\key\Entity\Key[]
+   * @return Key[]
    *   An array of key entities, indexed by ID. Returns an empty array if no
    *   matching entities are found.
    */
@@ @@
    * @param string $key_provider_id
    *   The key provider ID to use.
    *
-   * @return \Drupal\key\Entity\Key[]
+   * @return Key[]
    *   An array of key objects indexed by their ids.
    */
   public function getKeysByProvider($key_provider_id);
@@ @@
    * @param string $key_type_id
    *   The key type ID to use.
    *
-   * @return \Drupal\key\Entity\Key[]
+   * @return Key[]
    *   An array of key objects indexed by their ids.
    */
   public function getKeysByType($key_type_id);
@@ @@
    * @param string $storage_method
    *   The storage method of the key provider.
    *
-   * @return \Drupal\key\Entity\Key[]
+   * @return Key[]
    *   An array of key objects indexed by their ids.
    */
   public function getKeysByStorageMethod($storage_method);
@@ @@
    * @param string $type_group
    *   The key type group on which to filter.
    *
-   * @return \Drupal\key\Entity\Key[]
+   * @return Key[]
    *   An array of key objects indexed by their ids.
    */
   public function getKeysByTypeGroup($type_group);
@@ @@
    * @param string $key_id
    *   The key ID to use.
    *
-   * @return \Drupal\key\Entity\Key
+   * @return Key
    *   The key object with the given id.
    */
   public function getKey($key_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/key/src/KeyRepository.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The key provider plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $keyProviderManager;

@@ @@
   /**
    * The key type plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $keyTypeManager;

@@ @@
   /**
    * The key input plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $keyInputManager;

@@ @@
   /**
    * Constructs a new KeyRepository.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $key_provider_manager
+   * @param PluginManagerInterface $key_provider_manager
    *   The key provider plugin manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $key_type_manager
+   * @param PluginManagerInterface $key_type_manager
    *   The key type plugin manager.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $key_input_manager
+   * @param PluginManagerInterface $key_input_manager
    *   The key input plugin manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, PluginManagerInterface $key_provider_manager, PluginManagerInterface $key_type_manager, PluginManagerInterface $key_input_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/key/src/KeyInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key;

+use Drupal\key\Plugin\KeyPluginInterface;
+use Drupal\key\Plugin\KeyTypeInterface;
+use Drupal\key\Plugin\KeyProviderInterface;
+use Drupal\key\Plugin\KeyInputInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Returns the configured plugins for the key.
    *
-   * @return \Drupal\key\Plugin\KeyPluginInterface[]
+   * @return KeyPluginInterface[]
    *   An array of plugins, indexed by plugin type.
    */
   public function getPlugins();
@@ @@
    * @param string $type
    *   The plugin type to return.
    *
-   * @return \Drupal\key\Plugin\KeyPluginInterface
+   * @return KeyPluginInterface
    *   The plugin.
    */
   public function getPlugin($type);
@@ @@
   /**
    * Returns the configured key type for the key.
    *
-   * @return \Drupal\key\Plugin\KeyTypeInterface
+   * @return KeyTypeInterface
    *   The key type associated with the key.
    */
   public function getKeyType();
@@ @@
   /**
    * Returns the configured key provider for the key.
    *
-   * @return \Drupal\key\Plugin\KeyProviderInterface
+   * @return KeyProviderInterface
    *   The key provider associated with the key.
    */
   public function getKeyProvider();
@@ @@
   /**
    * Returns the configured key input for the key.
    *
-   * @return \Drupal\key\Plugin\KeyInputInterface
+   * @return KeyInputInterface
    *   The key input associated with the key.
    */
   public function getKeyInput();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/key/src/KeyConfigOverrides.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * Creates a new ModuleConfigOverrides instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface|null $config_factory
+   * @param ConfigFactoryInterface|null $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface|null $cache_backend
+   * @param CacheBackendInterface|null $cache_backend
    *   The cache backend.
    */
   public function __construct(ConfigFactoryInterface $config_factory = NULL, CacheBackendInterface $cache_backend = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/key/src/KeyConfigOverrideInterface.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Return the key entity associated with the override.
    *
-   * @return \Drupal\key\KeyInterface
+   * @return KeyInterface
    *   The key entity.
    */
   public function getKey();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/key/src/Form/KeyFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The key storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The original key.
    *
-   * @var \Drupal\key\Entity\Key|null
+   * @var Key|null
    *   The original key entity or NULL if this is a new key.
    */
   protected $originalKey = NULL;
@@ @@
   /**
    * Constructs a new key form base.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage
+   * @param ConfigEntityStorageInterface $storage
    *   The key storage.
    */
   public function __construct(ConfigEntityStorageInterface $storage) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Update the Key Input plugin.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function updateKeyInput(FormStateInterface $form_state) {
@@ @@
   /**
    * Returns the original key entity.
    *
-   * @return \Drupal\key\Entity\Key
+   * @return Key
    *   The original key entity.
    */
   public function getOriginalKey() {
@@ @@
    *
    * @param string $type
    *   The plugin type ID.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to copy values from.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   A clone of the form state object with values from the plugin.
    */
   protected function createPluginFormState($type, FormStateInterface $form_state) {
@@ @@
   /**
    * Moves form errors from one form state to another.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $from
+   * @param FormStateInterface $from
    *   The form state object to move from.
-   * @param \Drupal\Core\Form\FormStateInterface $to
+   * @param FormStateInterface $to
    *   The form state object to move to.
    */
   protected function moveFormStateErrors(FormStateInterface $from, FormStateInterface $to) {
@@ @@
   /**
    * Moves storage variables from one form state to another.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $from
+   * @param FormStateInterface $from
    *   The form state object to move from.
-   * @param \Drupal\Core\Form\FormStateInterface $to
+   * @param FormStateInterface $to
    *   The form state object to move to.
    */
   protected function moveFormStateStorage(FormStateInterface $from, FormStateInterface $to) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/key/src/Form/KeyEditForm.php:140

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function confirmEdit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/key/src/Form/KeyConfigOverrideAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\StorageInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The Key Configuration Override entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * The configuration entity type definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface[]
+   * @var EntityTypeInterface[]
    */
   protected $configEntityTypeDefinitions;

@@ @@
   /**
    * The current request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a KeyConfigOverrideAddForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config storage.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request stack.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, StorageInterface $config_storage, RequestStack $request_stack) {
@@ @@
    * @param bool $with_excluded
    *   Whether or not to include excluded configuration types.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   The entity type definitions.
    */
   protected function getConfigEntityTypeDefinitions($with_excluded = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/key/src/Entity/KeyConfigOverride.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Entity;

+use Drupal\key\KeyInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\key\KeyConfigOverrideInterface;

@@ @@
   /**
    * The key entity associated with the override.
    *
-   * @var \Drupal\key\KeyInterface
+   * @var KeyInterface
    */
   protected $key;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/key/src/Entity/Key.php:131

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin collections, indexed by plugin type.
    *
-   * @var \Drupal\key\Plugin\KeyPluginCollection[]
+   * @var KeyPluginCollection[]
    */
   protected $pluginCollections;

@@ @@
    * @param string $type
    *   The plugin type.
    *
-   * @return \Drupal\key\Plugin\KeyPluginCollection
+   * @return KeyPluginCollection
    *   The plugin collection.
    */
   public function getPluginCollection($type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/key/src/Element/KeySelect.php:43

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/key/src/Controller/KeyListBuilder.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/key/src/Controller/KeyConfigOverrideListBuilder.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The key repository.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/key/src/Commands/KeyCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Commands;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Key repository object.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $repository;

@@ @@
   /**
    * Key plugin manager object.
    *
-   * @var \Drupal\key\Plugin\KeyPluginManager
+   * @var KeyPluginManager
    */
   protected $keyTypePluginManager;

@@ @@
   /**
    * Entity type manager object.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Logger object.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Key provider manager object.
    *
-   * @var \Drupal\key\Plugin\KeyPluginManager
+   * @var KeyPluginManager
    */
   protected $keyProviderPluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/key/src/Annotation/KeyType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the key type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the key type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


33) modules/contrib/key/src/Annotation/KeyProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the key provider.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the key provider.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


34) modules/contrib/key/src/Annotation/KeyInput.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\key\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the key input.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the key input.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 34 files have been changed by Rector                                      

