modules/contrib/intelligencebank/ib_dam.module
modules/contrib/intelligencebank/modules/ib_dam_media/ib_dam_media.install
modules/contrib/intelligencebank/modules/ib_dam_media/ib_dam_media.module
modules/contrib/intelligencebank/modules/ib_dam_media/src/AssetStorage/MediaStorage.php
modules/contrib/intelligencebank/modules/ib_dam_media/src/Exceptions/MediaStorageUnableSaveMediaItem.php
modules/contrib/intelligencebank/modules/ib_dam_media/src/Exceptions/MediaTypeMatcherBadMediaTypeMatch.php
modules/contrib/intelligencebank/modules/ib_dam_media/src/Exceptions/MediaTypeMatcherBadMediaTypes.php
modules/contrib/intelligencebank/modules/ib_dam_media/src/Form/MediaConfigurationForm.php
modules/contrib/intelligencebank/modules/ib_dam_media/src/MediaTypeMatcher.php
modules/contrib/intelligencebank/modules/ib_dam_media/src/Plugin/EntityBrowser/Widget/IbDamEbWidget.php
modules/contrib/intelligencebank/modules/ib_dam_media/src/Plugin/media/Source/IbDamEmbedField.php
modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/ib_dam_wysiwyg.module
modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Access/FilterInUse.php
modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/AssetStorage/TextFilterStorage.php
modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Form/IbDamWysiwygDialog.php
modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Plugin/CKEditorPlugin/IbDamEditorPlugin.php
modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Plugin/Filter/IbDamWysiwygFilter.php
modules/contrib/intelligencebank/src/Annotation/IbDamAssetValidation.php
modules/contrib/intelligencebank/src/Asset/Asset.php
modules/contrib/intelligencebank/src/Asset/AssetInterface.php
modules/contrib/intelligencebank/src/Asset/EmbedAsset.php
modules/contrib/intelligencebank/src/Asset/EmbedAssetInterface.php
modules/contrib/intelligencebank/src/Asset/LocalAsset.php
modules/contrib/intelligencebank/src/Asset/LocalAssetInterface.php
modules/contrib/intelligencebank/src/AssetFormatter/AssetFeatures.php
modules/contrib/intelligencebank/src/AssetFormatter/AssetFormatterBase.php
modules/contrib/intelligencebank/src/AssetFormatter/AssetFormatterInterface.php
modules/contrib/intelligencebank/src/AssetFormatter/AssetFormatterManager.php
modules/contrib/intelligencebank/src/AssetFormatter/EmbedAssetFormatterBase.php
modules/contrib/intelligencebank/src/AssetFormatter/EmbedAudioAssetFormatter.php
modules/contrib/intelligencebank/src/AssetFormatter/EmbedImageAssetFormatter.php
modules/contrib/intelligencebank/src/AssetFormatter/EmbedLinkAssetFormatter.php
modules/contrib/intelligencebank/src/AssetFormatter/EmbedVideoAssetFormatter.php
modules/contrib/intelligencebank/src/AssetFormatter/LocalAssetFormatter.php
modules/contrib/intelligencebank/src/AssetStorage/AssetStorageInterface.php
modules/contrib/intelligencebank/src/AssetValidation/AssetValidationBase.php
modules/contrib/intelligencebank/src/AssetValidation/AssetValidationInterface.php
modules/contrib/intelligencebank/src/AssetValidation/AssetValidationManager.php
modules/contrib/intelligencebank/src/AssetValidation/AssetValidationTrait.php
modules/contrib/intelligencebank/src/AssetValidation/AssetViolationAggregator.php
modules/contrib/intelligencebank/src/Downloader.php
modules/contrib/intelligencebank/src/Element/IbIframeApp.php
modules/contrib/intelligencebank/src/Exceptions/AssetDownloaderBadDestination.php
modules/contrib/intelligencebank/src/Exceptions/AssetDownloaderBadRequest.php
modules/contrib/intelligencebank/src/Exceptions/AssetDownloaderBadResponse.php
modules/contrib/intelligencebank/src/Exceptions/AssetUnableCreateStorageHandler.php
modules/contrib/intelligencebank/src/Exceptions/AssetUnableSaveLocalFile.php
modules/contrib/intelligencebank/src/Exceptions/AssetUnableSaveThumbnailFile.php
modules/contrib/intelligencebank/src/Exceptions/AssetValidationBadPluginId.php
modules/contrib/intelligencebank/src/Exceptions/IbDamException.php
modules/contrib/intelligencebank/src/Form/IbSettingsForm.php
modules/contrib/intelligencebank/src/IbDamApi.php
modules/contrib/intelligencebank/src/IbDamResourceModel.php
modules/contrib/intelligencebank/src/Plugin/EntityBrowser/Widget/FileEntityBrowser.php
modules/contrib/intelligencebank/src/Plugin/Field/FieldFormatter/IbDamEmbedFormatter.php
modules/contrib/intelligencebank/src/Plugin/IbDam/AssetValidation/Api.php
modules/contrib/intelligencebank/src/Plugin/IbDam/AssetValidation/File.php
modules/contrib/intelligencebank/src/Plugin/IbDam/AssetValidation/Resource.php

30 files with changes
=====================

1) modules/contrib/intelligencebank/src/Plugin/IbDam/AssetValidation/Resource.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Resource type validator.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface $asset
+   * @param AssetInterface $asset
    *   The asset object to validate.
    * @param array $options
    *   Validator options with such options:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/intelligencebank/src/Plugin/IbDam/AssetValidation/File.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * File extensions validator.
    *
-   * @param \Drupal\ib_dam\Asset\LocalAsset $asset
+   * @param LocalAsset $asset
    *   The asset object to validate.
    * @param array|string $extensions
    *   The list of allowed file extensions.
@@ @@
   /**
    * File directory validator.
    *
-   * @param \Drupal\ib_dam\Asset\LocalAsset $asset
+   * @param LocalAsset $asset
    *   The asset object to validate.
    * @param string $file_dir
    *   The file directory to check.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/intelligencebank/src/Plugin/IbDam/AssetValidation/Api.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * API auth key validator.
    *
-   * @param \Drupal\ib_dam\Asset\LocalAsset $asset
+   * @param LocalAsset $asset
    *   The asset object to validate.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/intelligencebank/src/Plugin/EntityBrowser/Widget/FileEntityBrowser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\intelligencebank\Plugin\EntityBrowser\Widget;

+use Drupal\file\FileInterface;
 use Drupal\entity_browser\WidgetBase;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
  */
 class FileEntityBrowser extends WidgetBase {

-  /** @var \Drupal\Core\Session\AccountProxyInterface */
+  /** @var AccountProxyInterface */
   protected $currentUser;

   /**
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, AccountProxyInterface $current_user) {
@@ @@
    * {@inheritdoc}
    */
   protected function prepareEntities(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $this->entityTypeManager->getStorage('file')->create([
       'uri' => $form_state->getValue('url'),
       'uid' => $this->currentUser->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/intelligencebank/src/IbDamApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam;

+use GuzzleHttp\Client;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\Core\Http\ClientFactory;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Site\Settings;
@@ @@
   /**
    * GuzzleHttp\Client definition.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The logger channel for IntelligenceBank DAM.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Http\ClientFactory $http_client_factory
+   * @param ClientFactory $http_client_factory
    *   A Guzzle client factory object.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The site settings.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   * @param LoggerChannelInterface $loggerChannel
    *   Logger chanel for IntelligenceBank DAM.
    */
   public function __construct(ClientFactory $http_client_factory, Settings $settings, LoggerChannelInterface $loggerChannel) {
@@ @@
    * @param string $url
    *   The url of the resource.
    *
-   * @return null|\Psr\Http\Message\ResponseInterface
+   * @return null|ResponseInterface
    *   Response object.
    */
   public function fetchResource($url) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/intelligencebank/src/Downloader.php:54

    ---------- begin diff ----------
@@ @@
    *
    * Fetch file stream from api and save as unmanaged local file.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface $asset
+   * @param AssetInterface $asset
    *   The asset object where take resource url.
    * @param string $upload_dir
    *   The file dir uri where store unmanaged file.
@@ @@
   /**
    * Fetch asset thumbnail file and save as umnanaged local file.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface $asset
+   * @param AssetInterface $asset
    *   The asset object where take thumbnail remote url.
    * @param string $upload_dir
    *   The file dir uri where store unmanaged file.
@@ @@
    *
    * Fetch file data from HTTP stream.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   The HTTP response object.
    * @param string $directory
    *   The upload directory path.
@@ @@
    * @return bool|null
    *   Result of save operation.
    *
-   * @throws \Drupal\ib_dam\Exceptions\AssetDownloaderBadDestination
-   * @throws \Drupal\ib_dam\Exceptions\AssetDownloaderBadResponse
+   * @throws AssetDownloaderBadDestination
+   * @throws AssetDownloaderBadResponse
    */
   private function saveUnmanagedFile(ResponseInterface $response, $directory, $filename) {
     $stream_data = $response->getBody();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/intelligencebank/src/AssetValidation/AssetViolationAggregator.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Extract messages from violations list.
    *
-   * @param \Symfony\Component\Validator\ConstraintViolationListInterface $violations
+   * @param ConstraintViolationListInterface $violations
    *   The violations list.
    * @param string $mode
    *   Possible options:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/intelligencebank/src/AssetValidation/AssetValidationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam\AssetValidation;

+use Drupal\ib_dam\Asset\AssetInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ib_dam\Exceptions\AssetValidationBadPluginId;
 use Symfony\Component\Validator\ConstraintViolationList;
@@ @@
    *   The validators list.
    * @param array $assets
    *   The assets list.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state to mark form as invalid.
    * @param array &$element
    *   The reference to the ib_dam browser element.
@@ @@
   /**
    * Get AssetValidationManager service.
    *
-   * @return \Drupal\ib_dam\AssetValidation\AssetValidationManager
+   * @return AssetValidationManager
    *   The service instance.
    */
   abstract protected function getAssetValidationManager();
@@ @@
   /**
    * Defines asset validators and runs them.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface[] $assets
+   * @param AssetInterface[] $assets
    *   The list of assets to check over.
    * @param array $validators
    *   The list of validator.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationList
+   * @return ConstraintViolationList
    *   List of validations violations.
    */
   protected function runAssetValidators(array $assets, array $validators) {
@@ @@
     $violations = new ConstraintViolationList();

     foreach ($validators as $options) {
-      /** @var \Drupal\ib_dam\AssetValidation\AssetValidationInterface $asset_validator */
+      /** @var AssetValidationInterface $asset_validator */
       try {
         $validator = $this->getAssetValidationManager()->getInstance($options);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/intelligencebank/src/AssetValidation/AssetValidationManager.php:32

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/intelligencebank/src/AssetValidation/AssetValidationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam\AssetValidation;

+use Drupal\ib_dam\Asset\AssetInterface;
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;

@@ @@
    *
    * Collect available validators and run validation process.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface[] $assets
+   * @param AssetInterface[] $assets
    *   Array of selected assets.
    * @param array $options
    *   (Optional) Array of options needed by the constraint validator.
@@ @@
    *   (Optional) Use validators that declared in asset class,
    *   in other case run all available validators.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of constraint violations. If the list is empty, validation
    *   succeeded.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/intelligencebank/src/AssetValidation/AssetValidationBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam\AssetValidation;

+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
   /**
    * The Typed Data Manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
    * @param array $options
    *   Array of options needed by the constraint validator.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   A data definition object for the given data type.
    */
   protected function getDataDefinition($data_type, $constraint_name = NULL, array $options = []) {
@@ @@
   /**
    * Creates and validates instances of typed data for each Entity.
    *
-   * @param \Drupal\Core\TypedData\DataDefinitionInterface $data_definition
+   * @param DataDefinitionInterface $data_definition
    *   The data definition generated from ::getDataDefinition().
    * @param array $entities
    *   An array of Entities to validate the definition against.
    *
-   * @return \Symfony\Component\Validator\ConstraintViolationListInterface
+   * @return ConstraintViolationListInterface
    *   A list of violations.
    */
   protected function validateDataDefinition(DataDefinitionInterface $data_definition, array $entities) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/intelligencebank/src/AssetStorage/AssetStorageInterface.php:22

    ---------- begin diff ----------
@@ @@
    * Typical example build media object before it will be saved to db.
    * Another one - build text item for the text filter.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface $asset
+   * @param AssetInterface $asset
    *   The asset.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/intelligencebank/src/AssetFormatter/LocalAssetFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam\AssetFormatter;

+use Drupal\Core\Field\FormatterInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Form\FormState;
 use Drupal\ib_dam\Asset\AssetInterface;
@@ @@
   /**
    * Field formatter instance.
    *
-   * @var \Drupal\Core\Field\FormatterInterface|null
+   * @var FormatterInterface|null
    */
   private $fieldFormatter;

@@ @@
   /**
    * Field definition, suitable for field formatter.
    *
-   * @var \Drupal\Core\Field\BaseFieldDefinition
+   * @var BaseFieldDefinition
    */
   private $fieldDefinition;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/intelligencebank/src/AssetFormatter/AssetFormatterManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Factory method to build correct formatter.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface $asset
+   * @param AssetInterface $asset
    *   The asset object.
    * @param array $display_settings
    *   The display options used for formatting asset later.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/intelligencebank/src/Asset/LocalAssetInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam\Asset;

+use Drupal\ib_dam\Exceptions\AssetDownloaderBadResponse;
 use Drupal\file\FileInterface;
 use Drupal\ib_dam\Downloader;

@@ @@
    *
    * Can be an empty object returned by ::create() method.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The File instance.
    */
   public function localFile();
@@ @@
   /**
    * Setter for asset local file property.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file to set.
    *
    * @return \Drupal\ib_dam\Asset\LocalAssetInterface
@@ @@
    *
    * Local file and optionally thumbnail file.
    *
-   * @param \Drupal\ib_dam\Downloader $downloader
+   * @param Downloader $downloader
    *   The Downloader service.
    * @param string $upload_dir
    *   Destination dir to upload files.
    *
-   * @throws \Drupal\ib_dam\Exceptions\AssetDownloaderBadResponse
+   * @throws AssetDownloaderBadResponse
    */
   public function saveAttachments(Downloader $downloader, $upload_dir);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/intelligencebank/src/Asset/LocalAsset.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Asset file.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   private $localFile;

@@ @@
    * @param null|FileInterface $file
    *   The File instance.
    *
-   * @return null|\Symfony\Component\Validator\ConstraintViolationList
+   * @return null|ConstraintViolationList
    *   The list of constraint violations for the given file.
    */
   protected function validateFile(FileInterface $file = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/intelligencebank/src/Asset/AssetInterface.php:19

    ---------- begin diff ----------
@@ @@
    * @param string $storage_type_id
    *   The storage handler id.
    *
-   * @return \Drupal\ib_dam\Asset\Asset
+   * @return Asset
    *   Return asset.
    */
   public function setStorageType($storage_type_id);
@@ @@
   /**
    * Returns asset's thumbnail file object.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The thumbnail file object.
    */
   public function thumbnail();
@@ @@
   /**
    * Returns asset's source model object.
    *
-   * @return \Drupal\ib_dam\IbDamResourceModel
+   * @return IbDamResourceModel
    *   The source model object.
    */
   public function source();
@@ @@
   /**
    * Setter for asset source property.
    *
-   * @param \Drupal\ib_dam\IbDamResourceModel $model
+   * @param IbDamResourceModel $model
    *   Response model.
    *
    * @return \Drupal\ib_dam\Asset\AssetInterface
@@ @@
   /**
    * Setter for thumbnail property.
    *
-   * @param \Drupal\file\FileInterface|null $thumbnail
+   * @param FileInterface|null $thumbnail
    *   The File instance.
    *
    * @return \Drupal\ib_dam\Asset\AssetInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/intelligencebank/src/Asset/Asset.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * Asset thumbnail.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $thumbnail;

@@ @@
   /**
    * Factory method to build an asset from source model.
    *
-   * @param \Drupal\ib_dam\IbDamResourceModel $source
+   * @param IbDamResourceModel $source
    *   The source object.
    * @param string $owner_id
    *   The owner of asset that will be constructed and later might be saved.
@@ @@
    *   The flag to indicate if asset should be previewable,
    *   return true if should.
    *
-   * @return \Drupal\ib_dam\Asset\AssetInterface
+   * @return AssetInterface
    *   Asset object.
    */
   public static function createFromSource(IbDamResourceModel $source, $owner_id, $has_preview = TRUE) {
@@ @@
    * @param array $data
    *   The array of values used as asset properties.
    *
-   * @return \Drupal\ib_dam\Asset\AssetInterface
+   * @return AssetInterface
    *   Asset object.
    */
   public static function createFromValues(array $data) {
@@ @@
    * @param null|FileInterface $file
    *   The File instance.
    *
-   * @return null|\Symfony\Component\Validator\ConstraintViolationList
+   * @return null|ConstraintViolationList
    *   The list of constraint violations for the given file.
    */
   protected function validateThumbnail(FileInterface $file = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/intelligencebank/src/Annotation/IbDamAssetValidation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the widget validator.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Plugin/Filter/IbDamWysiwygFilter.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RendererInterface $renderer, AccountProxyInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Plugin/CKEditorPlugin/IbDamEditorPlugin.php:33

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'ib_dam_wysiwyg') . '/js/plugins/ib_dam_browser/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('ib_dam_wysiwyg') . '/js/plugins/ib_dam_browser/plugin.js';
   }

   /**
@@ @@
       'ib_dam_browser' => [
         'name' => 'IB',
         'label' => $this->t('IntelligenceBank Asset Browser'),
-        'image' => drupal_get_path('module', 'ib_dam_wysiwyg') . '/js/plugins/ib_dam_browser/icon.png',
+        'image' => \Drupal::service('extension.list.module')->getPath('ib_dam_wysiwyg') . '/js/plugins/ib_dam_browser/icon.png',
       ],
     ];
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Form/IbDamWysiwygDialog.php:231

    ---------- begin diff ----------
@@ @@
    * @param \stdClass $response
    *   Asset data for a Model class.
    *
-   * @return \Drupal\ib_dam\Asset\AssetInterface
+   * @return AssetInterface
    *   Returns an asset instance.
    */
   private function buildAsset(\stdClass $response) {
@@ @@
   /**
    * Create asset text representation for editor and text filter.
    *
-   * @param \Drupal\ib_dam\Asset\AssetInterface $asset
+   * @param AssetInterface $asset
    *   The asset.
-   * @param \Drupal\filter\Entity\FilterFormat $format
+   * @param FilterFormat $format
    *   The filter format instance.
    *
    * @return mixed
@@ @@
       $display['width'] = $width;
       $display['height'] = $height;
     }
-    $data['preview_uri'] = file_url_transform_relative($file_url);
+    $data['preview_uri'] = \Drupal::service('file_url_generator')->transformRelative($file_url);
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/AssetStorage/TextFilterStorage.php:46

    ---------- begin diff ----------
@@ @@
     }
     elseif ($asset instanceof LocalAssetInterface) {
       $data['file_id'] = $asset->localFile()->id();
-      $data['preview_uri'] = file_url_transform_relative(file_create_url($asset->localFile()->getFileUri()));
+      $data['preview_uri'] = \Drupal::service('file_url_generator')->generateString($asset->localFile()->getFileUri());
     }
     return $data;
   }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/intelligencebank/modules/ib_dam_wysiwyg/src/Access/FilterInUse.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Check if the filter is used for the given filter.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route
+   * @param RouteMatchInterface $route
    *   The route.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An access result.
    */
   public function access(RouteMatchInterface $route) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/intelligencebank/modules/ib_dam_media/src/Plugin/media/Source/IbDamEmbedField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam_media\Plugin\media\Source;

+use Drupal\Core\Config\Config;
+use Drupal\ib_dam\IbDamResourceModel;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The media settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $mediaSettings;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   Config field type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
    */
   public function __construct(
@@ @@
         . '/' . $this->pluginDefinition['default_thumbnail_filename'],
     ];
     if (isset($media->original_item)) {
-      /** @var \Drupal\ib_dam\IbDamResourceModel $original_item */
+      /** @var IbDamResourceModel $original_item */
       $original_item = $media->original_item;
       $metadata += [
         'default_name'   => $original_item->getName(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/intelligencebank/modules/ib_dam_media/src/MediaTypeMatcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ib_dam_media;

+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\media\Entity\MediaType;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\field\Entity\FieldConfig;
@@ @@
 use Drupal\ib_dam\Downloader;
 use Drupal\ib_dam_media\Exceptions\MediaTypeMatcherBadMediaTypes;
 use Exception;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Class MediaTypeMatcher.
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct(ConfigFactoryInterface $config_factory, MimeTypeGuesserInterface $mime_type_guesser, EntityTypeManagerInterface $entity_type_manager) {
+  public function __construct(ConfigFactoryInterface $config_factory, MimeTypesInterface $mime_type_guesser, EntityTypeManagerInterface $entity_type_manager) {
     $this->config = $config_factory->get('ib_dam_media.settings');
     $this->mimeGuesser = $mime_type_guesser;
     $this->entityTypeManager = $entity_type_manager;
@@ @@
         ->displayMessage();
       return [];
     }
-    /** @var \Drupal\media\Entity\MediaType $bundle */
+    /** @var MediaType $bundle */
     foreach ($media_bundles as $bundle_name => $bundle) {
       $discrete_types = [];

@@ @@
   /**
    * Collect all allowed file extensions either for a given media types or all.
    *
-   * @param \Drupal\media\Entity\MediaType[] $media_types
+   * @param MediaType[] $media_types
    *   List of media types instances to get data.
    * @param bool $load_all
    *   Collect file extensions even if there is empty media types variable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector


27) modules/contrib/intelligencebank/modules/ib_dam_media/src/Form/MediaConfigurationForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Media Type Matcher instance.
    *
-   * @var \Drupal\ib_dam_media\MediaTypeMatcher
+   * @var MediaTypeMatcher
    */
   protected $mediaTypeMatcher;

@@ @@
   /**
    * Entity Type Manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a MediaConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager to get media types.
-   * @param \Drupal\ib_dam_media\MediaTypeMatcher $media_type_matcher
+   * @param MediaTypeMatcher $media_type_matcher
    *   The media type matcher to find right media types matches.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, MediaTypeMatcher $media_type_matcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/intelligencebank/modules/ib_dam_media/src/Exceptions/MediaTypeMatcherBadMediaTypeMatch.php:15

    ---------- begin diff ----------
@@ @@
    * MediaTypeMatcherBadMediaTypeMatch constructor.
    *
    * @param $source_type
-   * @param \Drupal\ib_dam\IbDamResourceModel $source
+   * @param IbDamResourceModel $source
    */
   public function __construct($source_type, IbDamResourceModel $source) {
     $log_message = "Can't find a media type match for the source type %source_type";
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/intelligencebank/modules/ib_dam_media/src/AssetStorage/MediaStorage.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Media type suited for current asset.
    *
-   * @var \Drupal\media\Entity\MediaType
+   * @var MediaType
    */
   private $mediaType;

@@ @@
   /**
    * Set media type.
    *
-   * @param \Drupal\media\Entity\MediaType $type
+   * @param MediaType $type
    *   The loaded Media Type.
    *
    * @return $this
@@ @@
   /**
    * Image pre-fill method.
    *
-   * @param \Drupal\ib_dam\Asset\LocalAsset $asset
+   * @param LocalAsset $asset
    *   The Asset.
    *
    * @return array
@@ @@
   /**
    * File pre-fill method.
    *
-   * @param \Drupal\ib_dam\Asset\LocalAsset $asset
+   * @param LocalAsset $asset
    *   The Asset.
    *
    * @return array
@@ @@
   /**
    * Embed pre-fill method.
    *
-   * @param \Drupal\ib_dam\Asset\EmbedAsset $asset
+   * @param EmbedAsset $asset
    *   The Asset.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/intelligencebank/modules/ib_dam_media/ib_dam_media.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\MediaInterface;
 /**
  * @file
  * Contains install/uninstall hooks.
  */
-
 /**
  * Update existing embedded field structures.
  */
@@ @@
 function ib_dam_media_update_8601() {
   static $type       = 'ib_dam_embed';
   static $field_name = 'field_media_ib_dam_embed';
-  /** @var \Drupal\media\MediaInterface[] $medias */
+  /** @var MediaInterface[] $medias */
   $medias = \Drupal::entityTypeManager()
     ->getStorage('media')
     ->loadByProperties(['bundle' => $type]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/intelligencebank/modules/ib_dam_media/src/Plugin/EntityB
         rowser/Widget/IbDamEbWidget.php" file, due to:                         
         "Analyze error: "Class Drupal\entity_browser\WidgetBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

