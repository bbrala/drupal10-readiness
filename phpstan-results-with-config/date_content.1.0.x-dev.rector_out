modules/contrib/date_content/date_content.module
modules/contrib/date_content/date_content.page.inc
modules/contrib/date_content/src/Access/DateContentRevisionAccessCheck.php
modules/contrib/date_content/src/Controller/DateContentController.php
modules/contrib/date_content/src/DateContentAccessControlHandler.php
modules/contrib/date_content/src/DateContentHtmlRouteProvider.php
modules/contrib/date_content/src/DateContentListBuilder.php
modules/contrib/date_content/src/DateContentPermissions.php
modules/contrib/date_content/src/DateContentStorage.php
modules/contrib/date_content/src/DateContentStorageInterface.php
modules/contrib/date_content/src/DateContentTranslationHandler.php
modules/contrib/date_content/src/DateContentTypeHtmlRouteProvider.php
modules/contrib/date_content/src/DateContentTypeListBuilder.php
modules/contrib/date_content/src/DateContentViewsData.php
modules/contrib/date_content/src/Entity/DateContent.php
modules/contrib/date_content/src/Entity/DateContentInterface.php
modules/contrib/date_content/src/Entity/DateContentType.php
modules/contrib/date_content/src/Entity/DateContentTypeInterface.php
modules/contrib/date_content/src/Entity/DateContentViewsData.php
modules/contrib/date_content/src/Form/DateContentDeleteForm.php
modules/contrib/date_content/src/Form/DateContentForm.php
modules/contrib/date_content/src/Form/DateContentRevisionDeleteForm.php
modules/contrib/date_content/src/Form/DateContentRevisionRevertForm.php
modules/contrib/date_content/src/Form/DateContentRevisionRevertTranslationForm.php
modules/contrib/date_content/src/Form/DateContentSettingsForm.php
modules/contrib/date_content/src/Form/DateContentTypeDeleteForm.php
modules/contrib/date_content/src/Form/DateContentTypeForm.php
modules/contrib/date_content/src/Plugin/DateAugmenter/Content.php
modules/contrib/date_content/src/Plugin/views/field/DateContentBulkForm.php
modules/contrib/date_content/src/Plugin/views/wizard/DateContent.php
modules/contrib/date_content/src/Plugin/views/wizard/DateContentRevision.php

14 files with changes
=====================

1) modules/contrib/date_content/src/Plugin/DateAugmenter/Content.php:34

    ---------- begin diff ----------
@@ @@
    *
    * @param array $output
    *   The existing render array, to be augmented, passed by reference.
-   * @param Drupal\Core\Datetime\DrupalDateTime $start
+   * @param DrupalDateTime $start
    *   The object which contains the start time.
-   * @param Drupal\Core\Datetime\DrupalDateTime $end
+   * @param DrupalDateTime $end
    *   The optionalobject which contains the end time.
    * @param array $options
    *   An array of options to further guide output.
@@ @@
   /**
    * Construct a link with the configured attributes.
    *
-   * @param Drupal\Core\Url $url
+   * @param Url $url
    *   Where the link should point.
    * @param string $title
    *   The text of the link.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/date_content/src/Form/DateContentTypeForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs the NodeTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/date_content/src/Form/DateContentSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/date_content/src/Form/DateContentRevisionRevertTranslationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_content\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\date_content\Entity\DateContentInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   protected function prepareRevertedRevision(DateContentInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\date_content\Entity\DateContentInterface $default_revision */
+    /** @var DateContentInterface $default_revision */
     $latest_revision = $this->DateContentDateContent->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);

@@ @@

     $latest_revision_translation->setNewRevision();
     $latest_revision_translation->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $latest_revision_translation;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/date_content/src/Form/DateContentRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_content\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Date Content revision.
    *
-   * @var \Drupal\date_content\Entity\DateContentInterface
+   * @var DateContentInterface
    */
   protected $revision;

@@ @@
   /**
    * The Date Content date_content.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateContentStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $revision
+   * @param DateContentInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\date_content\Entity\DateContentInterface
+   * @return DateContentInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(DateContentInterface $revision, FormStateInterface $form_state) {
     $revision->setNewRevision();
     $revision->isDefaultRevision(TRUE);
-    $revision->setRevisionCreationTime(REQUEST_TIME);
+    $revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());

     return $revision;
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/date_content/src/Form/DateContentRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_content\Form;

+use Drupal\date_content\Entity\DateContentInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The Date Content revision.
    *
-   * @var \Drupal\date_content\Entity\DateContentInterface
+   * @var DateContentInterface
    */
   protected $revision;

@@ @@
   /**
    * The Date Content date_content.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateContentStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }

@@ @@
     $this->DateContentDateContent->deleteRevision($this->revision->getRevisionId());

     $this->logger('content')->notice('Date Content: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
-    $this->messenger()->addMessage(t('Revision from %revision-date of Date Content %title has been deleted.', ['%revision-date' => format_date($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
+    $this->messenger()->addMessage(t('Revision from %revision-date of Date Content %title has been deleted.', ['%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()), '%title' => $this->revision->label()]));
     $form_state->setRedirect(
       'entity.date_content.canonical',
        ['date_content' => $this->revision->id()]
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/date_content/src/Form/DateContentForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_content\Form;

+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\date_content\Entity\DateContentType;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
         $field_delta = (int) $entity->field_delta->get(0)->getString();
         $parent_field_value = $parent->get($field_name)->get($field_delta)->view();
         if (!empty($parent_field_value['start'])) {
-          $start = render($parent_field_value);
+          $start = \Drupal::service('renderer')->render($parent_field_value);
         }
         else {
           // @todo Provide better fallback behaviour.
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/date_content/src/Entity/DateContent.php:163

    ---------- begin diff ----------
@@ @@
       $field_delta = (int) $this->field_delta->get(0)->getString();
       $parent_field_value = $parent->get($field_name)->get($field_delta)->view();
       if (!empty($parent_field_value['start'])) {
-        $start = render($parent_field_value);
+        $start = \Drupal::service('renderer')->render($parent_field_value);
       }
       else {
         // @todo Provide better fallback behaviour.
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/date_content/src/DateContentStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Date Content revision IDs for a specific Date Content.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $entity
+   * @param DateContentInterface $entity
    *   The Date Content entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Date Content author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $entity
+   * @param DateContentInterface $entity
    *   The Date Content entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Date Content with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/date_content/src/DateContentPermissions.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\date_content\Entity\DateContentType $type
+   * @param DateContentType $type
    *   The Date Content type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/date_content/src/DateContentHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/date_content/src/DateContentAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_content;

+use Drupal\date_content\Entity\DateContentInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\date_content\Entity\DateContentInterface $entity */
-
+    /** @var DateContentInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/date_content/src/Controller/DateContentController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_content\Controller;

+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Generates an overview table of older revisions of a Date Content entity.
    *
-   * @param \Drupal\date_content\Entity\DateContentInterface $date_content
+   * @param DateContentInterface $date_content
    *   A Date Content object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/date_content/src/Access/DateContentRevisionAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_content\Access;

+use Drupal\date_content\DateContentStorageInterface;
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The date_content date_content.
    *
-   * @var \Drupal\date_content\DateContentStorageInterface
+   * @var DateContentStorageInterface
    */
   protected $dateContentStorage;

@@ @@
   /**
    * The date_content access control handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $dateContentAccess;

@@ @@
   /**
    * Constructs a new DateContentRevisionAccessCheck.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks routing access for the date_content revision.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    * @param int $date_content_revision
    *   (optional) The date_content revision ID. If not specified, but $date_content is,
@@ @@
    *   $date_content_revision is specified. If neither $date_content_revision nor
    *   $date_content are specified, then access is denied.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, $date_content_revision = NULL, DateContentInterface $date_content = NULL) {
@@ @@
    *
    * @param \Drupal\date_content\DateContentInterface $date_content
    *   The date_content to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user object representing the user for whom the operation is to be
    *   performed.
    * @param string $op
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 14 files have been changed by Rector                                      

