diff --git a/lingotek.api.php b/lingotek.api.php
index 46ccae29..ee5760d7 100644
--- a/lingotek.api.php
+++ b/lingotek.api.php
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\node\NodeInterface;
+use Drupal\comment\CommentInterface;
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 /**
  * @file
  * Hooks provided by the Lingotek module.
@@ -16,18 +19,15 @@ use Drupal\Core\Serialization\Yaml;
  * invoked to allow modules to modify the operation.
  * @}
  */
-
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Act on a translation of an content entity before it is saved or updated after
  * being downloaded from Lingotek.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface &$translation
+ * @param ContentEntityInterface $translation
  *   The content entity that is going to be saved.
  * @param string $langcode
  *   Drupal language code that has been downloaded.
@@ -40,7 +40,7 @@ function hook_lingotek_content_entity_translation_presave(ContentEntityInterface
   // In this example, we avoid press releases to be published when downloaded.
   if ($translation->getEntityTypeId() === 'node' && $translation->bundle() === 'press_release') {
     if ($translation->isNewTranslation()) {
-      /** @var \Drupal\node\NodeInterface $translation */
+      /** @var NodeInterface $translation */
       $translation->setUnpublished();
     }
   }
@@ -52,7 +52,7 @@ function hook_lingotek_content_entity_translation_presave(ContentEntityInterface
  *
  * @param array &$source_data
  *   The data that will be uploaded, as an associative array.
- * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+ * @param ContentEntityInterface $entity
  *   The content entity where the data is extracted from and will be associated
  *   to the Lingotek document.
  * @param string &$url
@@ -71,7 +71,7 @@ function hook_lingotek_content_entity_document_upload(array &$source_data, Conte
 /**
  * Determines the default Lingotek profile for the given entity.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity.
  * @param \Drupal\lingotek\LingotekProfileInterface &$profile
  *   The already calculated profile.
@@ -88,9 +88,9 @@ function hook_lingotek_content_entity_get_profile(ContentEntityInterface $entity
    * commented entity.
    */
   if ($entity->getEntityTypeId() === 'comment') {
-    /** @var \Drupal\comment\CommentInterface $entity */
+    /** @var CommentInterface $entity */
     $commented = $entity->getCommentedEntity();
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
     $profile = $lingotek_config->getEntityProfile($commented, FALSE);
   }
@@ -100,7 +100,7 @@ function hook_lingotek_content_entity_get_profile(ContentEntityInterface $entity
  * Act on a translation of a config entity before it is saved or updated after
  * being downloaded from Lingotek.
  *
- * @param \Drupal\Core\Config\Entity\ConfigEntityInterface &$translation
+ * @param ConfigEntityInterface $translation
  *   The config entity that is going to be saved.
  * @param string $langcode
  *   Drupal language code that has been downloaded.
@@ -132,7 +132,7 @@ function hook_lingotek_config_entity_translation_presave(ConfigEntityInterface &
  *
  * @param array &$source_data
  *   The data that will be uploaded, as an associative array.
- * @param \Drupal\Core\Config\Entity\ConfigEntityInterface &$entity
+ * @param ConfigEntityInterface $entity
  *   The config entity where the data is extracted from and will be associated
  *   to the Lingotek document.
  * @param string &$url
diff --git a/lingotek.batch.inc b/lingotek.batch.inc
index f3f8b300..f98fdb54 100644
--- a/lingotek.batch.inc
+++ b/lingotek.batch.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 /**
  * @file
  * Lingotek batch functions
@@ -21,7 +24,7 @@ function lingotek_operation_content_upload($entity_type_id, $entity_id, &$contex
     $context['message'] = t('Uploading @entity_type @entity_id', ['@entity_type' => $entity_type_id, '@entity_id' => $entity_id]);
   }
 
-  /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+  /** @var EntityStorageInterface $entity_storage */
   $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
   // Prepare the entity's translatable content for upload.
   $entity = $entity_storage->load($entity_id);
@@ -33,7 +36,7 @@ function lingotek_operation_content_upload($entity_type_id, $entity_id, &$contex
       ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
     return;
   }
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+  /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
   $lingotek_configuration = \Drupal::service('lingotek.configuration');
   if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
     \Drupal::messenger()->addWarning(t('Cannot upload @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -41,7 +44,7 @@ function lingotek_operation_content_upload($entity_type_id, $entity_id, &$contex
     return;
   }
 
-  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+  /** @var LingotekContentTranslationServiceInterface $translation_service */
   $translation_service = \Drupal::service('lingotek.content_translation');
 
   // Use upload with new entities.
@@ -134,7 +137,7 @@ function lingotek_operation_content_download($entity_type_id, $entity_id, $local
   if ($context) {
     $context['message'] = t('Downloading translation "@locale" for @entity_type #@entity_id', ['@entity_type' => $entity_type_id, '@entity_id' => $entity_id, '@locale' => $locale]);
   }
-  /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+  /** @var EntityStorageInterface $entity_storage */
   $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);
   // Prepare the entity's translatable content for upload.
   $entity = $entity_storage->load($entity_id);
@@ -146,7 +149,7 @@ function lingotek_operation_content_download($entity_type_id, $entity_id, $local
       ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
     return;
   }
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+  /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
   $lingotek_configuration = \Drupal::service('lingotek.configuration');
   if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
     \Drupal::messenger()->addWarning(t('Cannot download @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -154,7 +157,7 @@ function lingotek_operation_content_download($entity_type_id, $entity_id, $local
     return;
   }
 
-  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+  /** @var LingotekContentTranslationServiceInterface $translation_service */
   $translation_service = \Drupal::service('lingotek.content_translation');
 
   try {
diff --git a/lingotek.drush.inc b/lingotek.drush.inc
index a55f59ee..90703646 100644
--- a/lingotek.drush.inc
+++ b/lingotek.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\lingotek\Cli\LingotekCliService;
 /**
  * @file
  * Drush 8 integration for Lingotek.
@@ -100,7 +101,7 @@ function lingotek_drush_command() {
 
 function drush_lingotek_upload($entity_type_id, $entity_id) {
   $facade = new Drush8IoWrapper();
-  /** @var \Drupal\lingotek\Cli\LingotekCliService $cliService */
+  /** @var LingotekCliService $cliService */
   $cliService = \Drupal::service('lingotek.cli_service');
   $cliService->setupOutput($facade);
   $cliService->setLogger($facade);
@@ -111,7 +112,7 @@ function drush_lingotek_upload($entity_type_id, $entity_id) {
 
 function drush_lingotek_check_upload($entity_type_id, $entity_id) {
   $facade = new Drush8IoWrapper();
-  /** @var \Drupal\lingotek\Cli\LingotekCliService $cliService */
+  /** @var LingotekCliService $cliService */
   $cliService = \Drupal::service('lingotek.cli_service');
   $cliService->setupOutput($facade);
   $cliService->setLogger($facade);
@@ -121,7 +122,7 @@ function drush_lingotek_check_upload($entity_type_id, $entity_id) {
 
 function drush_lingotek_request_translations($entity_type_id, $entity_id) {
   $facade = new Drush8IoWrapper();
-  /** @var \Drupal\lingotek\Cli\LingotekCliService $cliService */
+  /** @var LingotekCliService $cliService */
   $cliService = \Drupal::service('lingotek.cli_service');
   $cliService->setupOutput($facade);
   $cliService->setLogger($facade);
@@ -134,7 +135,7 @@ function drush_lingotek_request_translations($entity_type_id, $entity_id) {
 
 function drush_lingotek_check_translations_statuses($entity_type_id, $entity_id) {
   $facade = new Drush8IoWrapper();
-  /** @var \Drupal\lingotek\Cli\LingotekCliService $cliService */
+  /** @var LingotekCliService $cliService */
   $cliService = \Drupal::service('lingotek.cli_service');
   $cliService->setupOutput($facade);
   $cliService->setLogger($facade);
@@ -153,7 +154,7 @@ function drush_lingotek_check_translations_statuses($entity_type_id, $entity_id)
 
 function drush_lingotek_download_translations($entity_type_id, $entity_id) {
   $facade = new Drush8IoWrapper();
-  /** @var \Drupal\lingotek\Cli\LingotekCliService $cliService */
+  /** @var LingotekCliService $cliService */
   $cliService = \Drupal::service('lingotek.cli_service');
   $cliService->setupOutput($facade);
   $cliService->setLogger($facade);
diff --git a/lingotek.module b/lingotek.module
index f9418980..0d280ba4 100644
--- a/lingotek.module
+++ b/lingotek.module
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\lingotek\LingotekConfigTranslationServiceInterface;
+use Drupal\lingotek\Moderation\LingotekModerationFactoryInterface;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\lingotek\LanguageLocaleMapperInterface;
 /**
  * @file
  * Implements Drupal-related hooks for the Lingotek Translation module.
@@ -48,14 +54,14 @@ function lingotek_module_implements_alter(&$implementations, $hook) {
  * Implements hook_entity_insert().
  */
 function lingotek_entity_insert(EntityInterface $entity) {
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $configuration_service */
+  /** @var LingotekConfigurationServiceInterface $configuration_service */
   $configuration_service = \Drupal::service('lingotek.configuration');
   if ($entity instanceof ConfigEntityInterface) {
     if (\Drupal::isConfigSyncing()) {
       // We don't want to react to configuration imports.
       return;
     }
-    /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
+    /** @var LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $entity_type_id = $entity->getEntityTypeId();
     if ($entity instanceof FieldConfig) {
@@ -139,7 +145,7 @@ function lingotek_entity_insert(EntityInterface $entity) {
 
       // If workbench moderation is enabled, we need to prevent that content is
       // processed if not the right state.
-      /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderation_factory */
+      /** @var LingotekModerationFactoryInterface $moderation_factory */
       $moderation_factory = \Drupal::service('lingotek.moderation_factory');
       $moderation_handler = $moderation_factory->getModerationHandler();
       $prevent = $moderation_handler->shouldModerationPreventUpload($entity);
@@ -157,7 +163,7 @@ function lingotek_entity_insert(EntityInterface $entity) {
 
       $has_autoupload = $profile->hasAutomaticUpload();
 
-      /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+      /** @var LingotekContentTranslationServiceInterface $translation_service */
       $translation_service = \Drupal::service('lingotek.content_translation');
 
       $source_status = $translation_service->getSourceStatus($entity);
@@ -234,14 +240,14 @@ function lingotek_entity_update(EntityInterface $entity) {
       (isset($entity->original->lingotek_processed) && $entity->original->lingotek_processed)) {
     return;
   }
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $configuration_service */
+  /** @var LingotekConfigurationServiceInterface $configuration_service */
   $configuration_service = \Drupal::service('lingotek.configuration');
   if ($entity instanceof ConfigEntityInterface) {
     if (\Drupal::isConfigSyncing()) {
       // We don't want to react to configuration imports.
       return;
     }
-    /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
+    /** @var LingotekConfigTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.config_translation');
     $entity_type_id = $entity->getEntityTypeId();
     if ($entity instanceof FieldConfig) {
@@ -334,12 +340,12 @@ function lingotek_entity_update(EntityInterface $entity) {
           }
         }
       }
-      /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+      /** @var LingotekContentTranslationServiceInterface $translation_service */
       $translation_service = \Drupal::service('lingotek.content_translation');
       if ($entity->isDefaultTranslation()) {
         // If workbench moderation is enabled, we need to prevent that content is
         // processed if not the right state.
-        /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderation_factory */
+        /** @var LingotekModerationFactoryInterface $moderation_factory */
         $moderation_factory = \Drupal::service('lingotek.moderation_factory');
         $moderation_handler = $moderation_factory->getModerationHandler();
         $preventUpload = $moderation_handler->shouldModerationPreventUpload($entity);
@@ -466,7 +472,7 @@ function lingotek_entity_delete(EntityInterface $entity) {
     return;
   }
 
-  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+  /** @var LingotekContentTranslationServiceInterface $translation_service */
   $translation_service = \Drupal::service('lingotek.content_translation');
 
   // Cancel the TMS document if it's been uploaded.
@@ -493,9 +499,9 @@ function lingotek_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
     $entity = $form_object->getEntity();
 
-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = \Drupal::service('content_translation.manager');
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     // If content translation is not enabled and lingotek configured, don't add
@@ -550,17 +556,17 @@ function lingotek_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 
 /**
  * @param array $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function lingotek_form_content_entity_form_submit(array $form, FormStateInterface $form_state) {
   $form_values = $form_state->getValues();
-  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+  /** @var LingotekContentTranslationServiceInterface $translation_service */
   $translation_service = \Drupal::service('lingotek.content_translation');
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+  /** @var LingotekConfigurationServiceInterface $lingotek_config */
   $lingotek_config = \Drupal::service('lingotek.configuration');
-  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $entity_form */
+  /** @var ContentEntityFormInterface $entity_form */
   $entity_form = $form_state->getFormObject();
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   $entity = $entity_form->getEntity();
 
   if ($entity_form->getOperation() !== 'lingotek_metadata') {
@@ -596,9 +602,9 @@ function lingotek_entity_type_alter(array &$entity_types) {
  */
 function lingotek_entity_base_field_info(EntityTypeInterface $entity_type) {
   // Taken from content_translation.
-  /** @var \Drupal\content_translation\ContentTranslationManagerInterface $manager */
+  /** @var ContentTranslationManagerInterface $manager */
   $manager = \Drupal::service('content_translation.manager');
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+  /** @var LingotekConfigurationServiceInterface $lingotek_config */
   $lingotek_config = \Drupal::service('lingotek.configuration');
 
   $entity_type_id = $entity_type->id();
@@ -619,9 +625,9 @@ function lingotek_entity_base_field_info(EntityTypeInterface $entity_type) {
  * Implements hook_entity_translation_insert().
  */
 function lingotek_entity_translation_insert(ContentEntityInterface $translation) {
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+  /** @var LingotekConfigurationServiceInterface $lingotek_config */
   $lingotek_config = \Drupal::service('lingotek.configuration');
-  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+  /** @var LingotekContentTranslationServiceInterface $translation_service */
   $translation_service = \Drupal::service('lingotek.content_translation');
   if ($lingotek_config->isEnabled($translation->getEntityTypeId(), $translation->bundle())) {
     $status = $translation_service->getTargetStatus($translation, $translation->language()->getId());
@@ -633,11 +639,11 @@ function lingotek_entity_translation_insert(ContentEntityInterface $translation)
 }
 
 function lingotek_entity_translation_delete(ContentEntityInterface $entity) {
-  /** @var \Drupal\lingotek\LanguageLocaleMapperInterface $languageMapper */
+  /** @var LanguageLocaleMapperInterface $languageMapper */
   $languageMapper = \Drupal::service('lingotek.language_locale_mapper');
-  /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+  /** @var LingotekConfigurationServiceInterface $lingotek_config */
   $lingotek_config = \Drupal::service('lingotek.configuration');
-  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+  /** @var LingotekContentTranslationServiceInterface $translation_service */
   $translation_service = \Drupal::service('lingotek.content_translation');
   $langcode = $entity->language()->getId();
   if ($lingotek_config->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
diff --git a/src/Annotation/LingotekFieldProcessor.php b/src/Annotation/LingotekFieldProcessor.php
index fc599be3..a367152c 100644
--- a/src/Annotation/LingotekFieldProcessor.php
+++ b/src/Annotation/LingotekFieldProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\AnnotationBase;
 
 /**
@@ -23,7 +24,7 @@ class LingotekFieldProcessor extends AnnotationBase {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
@@ -32,7 +33,7 @@ class LingotekFieldProcessor extends AnnotationBase {
    *
    * @ingroup_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Annotation/LingotekFormComponentAnnotationBase.php b/src/Annotation/LingotekFormComponentAnnotationBase.php
index 87d3005a..af3c7f94 100644
--- a/src/Annotation/LingotekFormComponentAnnotationBase.php
+++ b/src/Annotation/LingotekFormComponentAnnotationBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -19,7 +20,7 @@ abstract class LingotekFormComponentAnnotationBase extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -28,7 +29,7 @@ abstract class LingotekFormComponentAnnotationBase extends Plugin {
   /**
    * The group the plugin belongs to.
    *
-   * @var string|\Drupal\Core\Annotation\Translation
+   * @var string|Translation
    */
   public $group;
 
diff --git a/src/Annotation/RelatedEntitiesDetector.php b/src/Annotation/RelatedEntitiesDetector.php
index 0d393810..c0a034a2 100644
--- a/src/Annotation/RelatedEntitiesDetector.php
+++ b/src/Annotation/RelatedEntitiesDetector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\AnnotationBase;
 
 /**
@@ -23,7 +24,7 @@ class RelatedEntitiesDetector extends AnnotationBase {
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $title;
 
@@ -32,7 +33,7 @@ class RelatedEntitiesDetector extends AnnotationBase {
    *
    * @ingroup_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
 
diff --git a/src/Breadcrumb/TranslationJobBreadcrumbBuilder.php b/src/Breadcrumb/TranslationJobBreadcrumbBuilder.php
index 112dce8f..d94455df 100644
--- a/src/Breadcrumb/TranslationJobBreadcrumbBuilder.php
+++ b/src/Breadcrumb/TranslationJobBreadcrumbBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Breadcrumb;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
@@ -19,28 +20,28 @@ class TranslationJobBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
 
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
diff --git a/src/Cli/Commands/Drush9/LingotekCommands.php b/src/Cli/Commands/Drush9/LingotekCommands.php
index 66ac5838..984b32d3 100644
--- a/src/Cli/Commands/Drush9/LingotekCommands.php
+++ b/src/Cli/Commands/Drush9/LingotekCommands.php
@@ -15,14 +15,14 @@ class LingotekCommands extends DrushCommands {
   /**
    * The Lingotek CLI service.
    *
-   * @var \Drupal\lingotek\Cli\LingotekCliService
+   * @var LingotekCliService
    */
   protected $cliService;
 
   /**
    * Drush8CommandBase constructor.
    *
-   * @param \Drupal\lingotek\Cli\LingotekCliService $cli_service
+   * @param LingotekCliService $cli_service
    *   The Lingotek CLI service.
    */
   public function __construct(LingotekCliService $cli_service) {
@@ -95,7 +95,7 @@ class LingotekCommands extends DrushCommands {
    *   langcode: Language code
    * @default-fields langcode
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Statuses of the given translations formatted as a table.
    *
    * @command lingotek:request-translations
@@ -127,7 +127,7 @@ class LingotekCommands extends DrushCommands {
    *   status: Status
    * @default-fields langcode,status
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Statuses of the given translations formatted as a table.
    *
    * @command lingotek:check-translations-statuses
diff --git a/src/Cli/LingotekCliService.php b/src/Cli/LingotekCliService.php
index 194d775e..ae22378d 100644
--- a/src/Cli/LingotekCliService.php
+++ b/src/Cli/LingotekCliService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek\Cli;
 
+use Symfony\Component\Console\Output\OutputInterface;
+use Drupal\lingotek\Cli\Commands\Drush8\Drush8IoWrapper;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -19,44 +22,44 @@ class LingotekCliService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
-   * @var \Symfony\Component\Console\Output\OutputInterface|\Drupal\lingotek\Cli\Commands\Drush8\Drush8IoWrapper
+   * @var OutputInterface|Drush8IoWrapper
    */
   protected $output;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface|\Drupal\lingotek\Cli\Commands\Drush8\Drush8IoWrapper
+   * @var LoggerInterface|Drush8IoWrapper
    */
   protected $logger;
 
   /**
    * LingotekCliService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LingotekContentTranslationServiceInterface $translation_service, LanguageLocaleMapperInterface $language_locale_mapper) {
@@ -186,7 +189,7 @@ class LingotekCliService {
       $this->logger->error('Invalid entity type id: @entity_type_id', ['@entity_type_id' => $entity_type_id]);
       return self::COMMAND_ERROR_ENTITY_TYPE_ID;
     }
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $entity_storage->load($entity_id);
     if (!$entity) {
       $this->logger->error('Entity of type @entity_type_id with id @entity_id not found.', ['@entity_type_id' => $entity_type_id, '@entity_id' => $entity_id]);
diff --git a/src/Controller/LingotekBatchController.php b/src/Controller/LingotekBatchController.php
index 36fd3315..5a1fc52a 100644
--- a/src/Controller/LingotekBatchController.php
+++ b/src/Controller/LingotekBatchController.php
@@ -2,17 +2,20 @@
 
 namespace Drupal\lingotek\Controller;
 
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\lingotek\Lingotek;
 use Drupal\lingotek\Entity\LingotekProfile;
 use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
 
 class LingotekBatchController extends LingotekControllerBase {
 
   public function dispatch($action, $entity_type, $entity_id) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $configuration_service */
+    /** @var LingotekConfigurationServiceInterface $configuration_service */
     $configuration_service = \Drupal::service('lingotek.configuration');
-    /** @var \Drupal\lingotek\Lingotek $lingotek */
+    /** @var Lingotek $lingotek */
     $lingotek = \Drupal::service('lingotek');
 
     $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
@@ -41,7 +44,7 @@ class LingotekBatchController extends LingotekControllerBase {
       'operations' => $this->getUploadOperations($entity_type, [$entity_id]),
       'error_message' => t('An error happened.'),
       'finished' => 'lingotek_operation_content_upload_finished',
-      'file' => drupal_get_path('module', 'lingotek') . '/lingotek.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('lingotek') . '/lingotek.batch.inc',
     ];
     $redirect_url = \Drupal::urlGenerator()->generate("entity.$entity_type.content_translation_overview",
       [$entity_type => $entity_id], UrlGeneratorInterface::ABSOLUTE_URL);
@@ -54,7 +57,7 @@ class LingotekBatchController extends LingotekControllerBase {
       'title' => $this->t('Downloading translations from Lingotek'),
       'operations' => $this->getDownloadOperations($entity_type, [$entity_id], $locales),
       'finished' => 'lingotek_operation_content_download_finished',
-      'file' => drupal_get_path('module', 'lingotek') . '/lingotek.batch.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('lingotek') . '/lingotek.batch.inc',
     ];
     $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
     $redirect_url = \Drupal::urlGenerator()->generate("entity.$entity_type.content_translation_overview",
diff --git a/src/Controller/LingotekConfigTranslationController.php b/src/Controller/LingotekConfigTranslationController.php
index 99e6a4bd..99b59130 100644
--- a/src/Controller/LingotekConfigTranslationController.php
+++ b/src/Controller/LingotekConfigTranslationController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Controller;
 
+use Drupal\config_translation\ConfigMapperInterface;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\config_translation\ConfigMapperManagerInterface;
 use Drupal\config_translation\Controller\ConfigTranslationController;
@@ -36,46 +37,46 @@ class LingotekConfigTranslationController extends ConfigTranslationController {
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek config translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $translationService;
 
   /**
    * Constructs a LingotekConfigTranslationController.
    *
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service
+   * @param LingotekConfigTranslationServiceInterface $translation_service
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $config_mapper_manager
+   * @param ConfigMapperManagerInterface $config_mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The menu link access service.
-   * @param \Symfony\Component\Routing\Matcher\RequestMatcherInterface $router
+   * @param RequestMatcherInterface $router
    *   The dynamic router service.
-   * @param \Drupal\Core\PathProcessor\InboundPathProcessorInterface $path_processor
+   * @param InboundPathProcessorInterface $path_processor
    *   The inbound path processor.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigTranslationServiceInterface $translation_service, LingotekConfigurationServiceInterface $lingotek_configuration, ConfigMapperManagerInterface $config_mapper_manager, AccessManagerInterface $access_manager, RequestMatcherInterface $router, InboundPathProcessorInterface $path_processor, AccountInterface $account, LanguageManagerInterface $language_manager, RendererInterface $renderer) {
@@ -113,7 +114,7 @@ class LingotekConfigTranslationController extends ConfigTranslationController {
 
     $entity = NULL;
     $entity_id = NULL;
-    /** @var \Drupal\config_translation\ConfigMapperInterface $mapper */
+    /** @var ConfigMapperInterface $mapper */
     $mapper = $this->configMapperManager->createInstance($plugin_id);
     $mapper->populateFromRouteMatch($route_match);
 
@@ -661,7 +662,7 @@ class LingotekConfigTranslationController extends ConfigTranslationController {
    * @param string $entity_id
    *   The config entity id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response.
    */
   protected function redirectToEntityTranslateOverview($entity_type, $entity_id) {
@@ -688,7 +689,7 @@ class LingotekConfigTranslationController extends ConfigTranslationController {
    * @param string $plugin_id
    *   The plugin id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response.
    */
   protected function redirectToConfigTranslateOverview($plugin_id) {
diff --git a/src/Controller/LingotekControllerBase.php b/src/Controller/LingotekControllerBase.php
index 6c06537b..d4ab9357 100644
--- a/src/Controller/LingotekControllerBase.php
+++ b/src/Controller/LingotekControllerBase.php
@@ -22,52 +22,52 @@ abstract class LingotekControllerBase extends ControllerBase {
   /**
    * A Symfony request instance
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a LingotekControllerBase object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(Request $request, ConfigFactoryInterface $config_factory, LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, FormBuilderInterface $form_builder, LoggerInterface $logger) {
diff --git a/src/Controller/LingotekDashboardController.php b/src/Controller/LingotekDashboardController.php
index cc04ca5e..2008d484 100644
--- a/src/Controller/LingotekDashboardController.php
+++ b/src/Controller/LingotekDashboardController.php
@@ -27,46 +27,46 @@ class LingotekDashboardController extends LingotekControllerBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotek_configuration;
 
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructs a LingotekDashboardController object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(Request $request, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, FormBuilderInterface $form_builder, LoggerInterface $logger, UrlGeneratorInterface $url_generator = NULL, AccountInterface $current_user = NULL) {
@@ -108,7 +108,7 @@ class LingotekDashboardController extends LingotekControllerBase {
   /**
    * Presents a dashboard overview page of translation status through Lingotek.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The page request.
    *
    * @return array
diff --git a/src/Controller/LingotekEntityController.php b/src/Controller/LingotekEntityController.php
index 2461ef67..4e2e7182 100644
--- a/src/Controller/LingotekEntityController.php
+++ b/src/Controller/LingotekEntityController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Controller;
 
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -30,35 +31,35 @@ class LingotekEntityController extends LingotekControllerBase {
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Constructs a LingotekEntityController object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(Request $request, ConfigFactoryInterface $config_factory, LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, FormBuilderInterface $form_builder, LoggerInterface $logger, LingotekConfigurationServiceInterface $lingotek_configuration = NULL, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL) {
@@ -92,7 +93,7 @@ class LingotekEntityController extends LingotekControllerBase {
   }
 
   public function checkUpload($doc_id) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
 
     $entity = $translation_service->loadByDocumentId($doc_id);
@@ -131,7 +132,7 @@ class LingotekEntityController extends LingotekControllerBase {
   }
 
   public function checkTarget($doc_id, $locale) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
 
     $entity = $translation_service->loadByDocumentId($doc_id);
@@ -171,7 +172,7 @@ class LingotekEntityController extends LingotekControllerBase {
   }
 
   public function addTarget($doc_id, $locale) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
 
     $entity = $translation_service->loadByDocumentId($doc_id);
@@ -243,7 +244,7 @@ class LingotekEntityController extends LingotekControllerBase {
       ));
       return $this->translationsPageRedirect($entity);
     }
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     try {
       if ($translation_service->uploadDocument($entity)) {
@@ -266,7 +267,7 @@ class LingotekEntityController extends LingotekControllerBase {
   }
 
   public function update($doc_id) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $entity = $translation_service->loadByDocumentId($doc_id);
     if (!$entity) {
@@ -323,7 +324,7 @@ class LingotekEntityController extends LingotekControllerBase {
   }
 
   public function download($doc_id, $locale) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
 
     $entity = $translation_service->loadByDocumentId($doc_id);
diff --git a/src/Controller/LingotekInterfaceTranslationController.php b/src/Controller/LingotekInterfaceTranslationController.php
index b3480057..410f5bfa 100644
--- a/src/Controller/LingotekInterfaceTranslationController.php
+++ b/src/Controller/LingotekInterfaceTranslationController.php
@@ -24,26 +24,26 @@ class LingotekInterfaceTranslationController extends LingotekControllerBase {
   /**
    * The Lingotek interface translation service.
    *
-   * @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface
+   * @var LingotekInterfaceTranslationServiceInterface
    */
   protected $lingotekInterfaceTranslation;
 
   /**
    * Constructs a LingotekManagementController object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation
+   * @param LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation
    *   The Lingotek interface translation service.
    */
   public function __construct(Request $request, ConfigFactoryInterface $config_factory, LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, FormBuilderInterface $form_builder, LoggerInterface $logger, LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation) {
diff --git a/src/Controller/LingotekJobManagementController.php b/src/Controller/LingotekJobManagementController.php
index 59837dd4..816f82d5 100644
--- a/src/Controller/LingotekJobManagementController.php
+++ b/src/Controller/LingotekJobManagementController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Controller;
 
+use Drupal\lingotek\Entity\LingotekContentMetadata;
+use Drupal\lingotek\Entity\LingotekConfigMetadata;
 use Drupal\Core\Url;
 
 /**
@@ -68,7 +70,7 @@ class LingotekJobManagementController extends LingotekControllerBase {
 
     $metadatas = $this->entityTypeManager()->getStorage('lingotek_content_metadata')
       ->loadMultiple($ids);
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     foreach ($metadatas as $metadata) {
       $job_id = $metadata->getJobId();
       if (!empty($job_id)) {
@@ -92,7 +94,7 @@ class LingotekJobManagementController extends LingotekControllerBase {
 
     $metadatas = $this->entityTypeManager()->getStorage('lingotek_config_metadata')
       ->loadMultiple($ids);
-    /** @var \Drupal\lingotek\Entity\LingotekConfigMetadata $metadata */
+    /** @var LingotekConfigMetadata $metadata */
     foreach ($metadatas as $metadata) {
       $job_id = $metadata->getJobId();
       if (!empty($job_id)) {
diff --git a/src/Controller/LingotekManagementController.php b/src/Controller/LingotekManagementController.php
index ec9a35c1..0bace6ac 100644
--- a/src/Controller/LingotekManagementController.php
+++ b/src/Controller/LingotekManagementController.php
@@ -16,19 +16,19 @@ class LingotekManagementController extends LingotekControllerBase {
   /**
    * Constructs a LingotekManagementController object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(Request $request, ConfigFactoryInterface $config_factory, LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, FormBuilderInterface $form_builder, LoggerInterface $logger, UrlGeneratorInterface $url_generator) {
diff --git a/src/Controller/LingotekNotificationController.php b/src/Controller/LingotekNotificationController.php
index 7ebed4f2..62ce11d4 100644
--- a/src/Controller/LingotekNotificationController.php
+++ b/src/Controller/LingotekNotificationController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Controller;
 
+use Drupal\lingotek\Entity\LingotekProfile;
+use Drupal\lingotek\LingotekInterfaceTranslationService;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Cache\CacheableJsonResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -31,53 +33,53 @@ class LingotekNotificationController extends LingotekControllerBase {
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek interface translation service.
    *
-   * @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface
+   * @var LingotekInterfaceTranslationServiceInterface
    */
   protected $lingotekInterfaceTranslation;
 
   /**
    * Constructs a LingotekControllerBase object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service
+   * @param LingotekContentTranslationServiceInterface $content_translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service
+   * @param LingotekConfigTranslationServiceInterface $config_translation_service
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $interface_translation_service
+   * @param LingotekInterfaceTranslationServiceInterface $interface_translation_service
    *   The Lingotek interface translation service.
    */
   public function __construct(Request $request, ConfigFactoryInterface $config_factory, LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, FormBuilderInterface $form_builder, LoggerInterface $logger, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $content_translation_service, LingotekConfigTranslationServiceInterface $config_translation_service, LingotekInterfaceTranslationServiceInterface $interface_translation_service = NULL) {
@@ -190,7 +192,7 @@ class LingotekNotificationController extends LingotekControllerBase {
       // a document has uploaded and imported successfully for document_id
       case 'document_uploaded':
         $entity = $this->getEntity($request->query->get('document_id'));
-        /** @var \Drupal\lingotek\Entity\LingotekProfile $profile */
+        /** @var LingotekProfile $profile */
         $profile = $this->getProfile($entity);
         if ($entity) {
           if ($entity instanceof ConfigEntityInterface) {
@@ -225,7 +227,7 @@ class LingotekNotificationController extends LingotekControllerBase {
 
       case 'document_updated':
         $entity = $this->getEntity($request->query->get('document_id'));
-        /** @var \Drupal\lingotek\Entity\LingotekProfile $profile */
+        /** @var LingotekProfile $profile */
         $profile = $this->getProfile($entity);
         if ($entity) {
           if ($entity instanceof ConfigEntityInterface) {
@@ -481,7 +483,7 @@ class LingotekNotificationController extends LingotekControllerBase {
 
           try {
             $entity = $this->getEntity($document_id);
-            /** @var \Drupal\lingotek\Entity\LingotekProfile $profile */
+            /** @var LingotekProfile $profile */
             $profile = $this->getProfile($entity);
             if ($entity) {
               if ($entity instanceof ConfigEntityInterface) {
@@ -584,7 +586,7 @@ class LingotekNotificationController extends LingotekControllerBase {
   }
 
   protected function getProfile($entity) {
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $configuration_service */
+    /** @var LingotekConfigurationServiceInterface $configuration_service */
     $configuration_service = \Drupal::service('lingotek.configuration');
     $profile = NULL;
     if ($entity instanceof ContentEntityInterface) {
@@ -597,16 +599,16 @@ class LingotekNotificationController extends LingotekControllerBase {
   }
 
   protected function getEntity($document_id) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $entity = $translation_service->loadByDocumentId($document_id);
     if ($entity === NULL) {
-      /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
+      /** @var LingotekConfigTranslationServiceInterface $translation_service */
       $translation_service = \Drupal::service('lingotek.config_translation');
       $entity = $translation_service->loadByDocumentId($document_id);
     }
     if ($entity === NULL) {
-      /** @var \Drupal\lingotek\LingotekInterfaceTranslationService $translation_service */
+      /** @var LingotekInterfaceTranslationService $translation_service */
       $translation_service = \Drupal::service('lingotek.interface_translation');
       $entity = $translation_service->loadByDocumentId($document_id);
     }
diff --git a/src/Controller/LingotekSupportedLocalesController.php b/src/Controller/LingotekSupportedLocalesController.php
index af0cc2ee..0a34abc1 100644
--- a/src/Controller/LingotekSupportedLocalesController.php
+++ b/src/Controller/LingotekSupportedLocalesController.php
@@ -57,10 +57,10 @@ class LingotekSupportedLocalesController extends LingotekControllerBase {
   /**
    * Callback for the autocomplete of supported locales.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function autocomplete(Request $request) {
diff --git a/src/Controller/LingotekWorkbenchRedirectController.php b/src/Controller/LingotekWorkbenchRedirectController.php
index efca551c..b64434c8 100644
--- a/src/Controller/LingotekWorkbenchRedirectController.php
+++ b/src/Controller/LingotekWorkbenchRedirectController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Controller;
 
+use Drupal\Core\Config\Config;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -23,26 +24,26 @@ class LingotekWorkbenchRedirectController extends LingotekControllerBase {
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a LingotekControllerBase object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The Request instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(Request $request, ConfigFactoryInterface $config_factory, LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, FormBuilderInterface $form_builder, LoggerInterface $logger, TimeInterface $time = NULL) {
@@ -83,7 +84,7 @@ class LingotekWorkbenchRedirectController extends LingotekControllerBase {
    *   The document id.
    * @param string $locale
    *   Lingotek translation language.
-   * @param \Drupal\Core\Config\Config $account
+   * @param Config $account
    *   Config with the account settings.
    *
    * @return string
diff --git a/src/Element/LingotekJobId.php b/src/Element/LingotekJobId.php
index 52c8ef67..8bfb6582 100644
--- a/src/Element/LingotekJobId.php
+++ b/src/Element/LingotekJobId.php
@@ -86,7 +86,7 @@ class LingotekJobId extends Textfield {
    *
    * @param array $element
    *   The form element to process. See main class documentation for properties.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Element/LingotekSourceStatus.php b/src/Element/LingotekSourceStatus.php
index 6db00409..0aa2f03d 100644
--- a/src/Element/LingotekSourceStatus.php
+++ b/src/Element/LingotekSourceStatus.php
@@ -60,12 +60,12 @@ class LingotekSourceStatus extends RenderElement {
   /**
    * Get the source action url based on the source status.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $source_status
    *   The source status.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   An url object.
    */
   protected function getSourceActionUrl(ContentEntityInterface &$entity, $source_status) {
@@ -170,7 +170,7 @@ class LingotekSourceStatus extends RenderElement {
   /**
    * Get the source status label.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $source_status
    *   The source status
diff --git a/src/Element/LingotekTargetStatuses.php b/src/Element/LingotekTargetStatuses.php
index fca218cb..35225b03 100644
--- a/src/Element/LingotekTargetStatuses.php
+++ b/src/Element/LingotekTargetStatuses.php
@@ -69,7 +69,7 @@ class LingotekTargetStatuses extends RenderElement {
   /**
    * Gets the translation status of an entity in a format ready to display.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $source_langcode
    *   The source language code.
@@ -303,7 +303,7 @@ class LingotekTargetStatuses extends RenderElement {
   /**
    * Get secondary target actions, which will be shown when expanded.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The entity.
    * @param string $target_status
    *   The target status.
diff --git a/src/Element/LingotekTargetTrait.php b/src/Element/LingotekTargetTrait.php
index e2e3d14f..a7d9e4cc 100644
--- a/src/Element/LingotekTargetTrait.php
+++ b/src/Element/LingotekTargetTrait.php
@@ -15,14 +15,14 @@ trait LingotekTargetTrait {
   /**
    * Get the target action url based on the source status.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $target_status
    *   The target status.
    * @param string $langcode
    *   The language code.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   An url object.
    */
   protected function getTargetActionUrl(ContentEntityInterface &$entity, $target_status, $langcode) {
@@ -80,7 +80,7 @@ trait LingotekTargetTrait {
   /**
    * Get secondary target actions, which will be shown when expanded.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $target_status
    *   The target status.
diff --git a/src/Entity/LingotekConfigMetadata.php b/src/Entity/LingotekConfigMetadata.php
index 453d6f17..dead9cdf 100644
--- a/src/Entity/LingotekConfigMetadata.php
+++ b/src/Entity/LingotekConfigMetadata.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Entity;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\config_translation\ConfigMapperInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\lingotek\LingotekConfigMetadataInterface;
@@ -226,13 +228,13 @@ class LingotekConfigMetadata extends ConfigEntityBase implements LingotekConfigM
    * @param string $config_name
    *   The config name.
    *
-   * @return \Drupal\lingotek\LingotekConfigMetadataInterface
+   * @return LingotekConfigMetadataInterface
    */
   public static function loadByConfigName($config_name) {
     if ($config_name == NULL) {
       return NULL;
     }
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('lingotek_config_metadata');
     $config = $storage->load($config_name);
     if ($config == NULL) {
@@ -281,12 +283,12 @@ class LingotekConfigMetadata extends ConfigEntityBase implements LingotekConfigM
   /**
    * Gets the config mapper for this metadata.
    *
-   * @return \Drupal\config_translation\ConfigMapperInterface
+   * @return ConfigMapperInterface
    *   The config mapper this metadata is related to.
    */
   public function getConfigMapper() {
     $mapper = NULL;
-    /** @var \Drupal\config_translation\ConfigMapperInterface[] $mappers */
+    /** @var ConfigMapperInterface[] $mappers */
     $mappers = \Drupal::service('plugin.manager.config_translation.mapper')->getMappers();
     $name = $this->getDependencyName();
     $config_mapper_id = $this->getMapperIdForName($name);
@@ -316,7 +318,7 @@ class LingotekConfigMetadata extends ConfigEntityBase implements LingotekConfigM
    */
   protected function getMapperIdForName($name) {
     $mapper_id = NULL;
-    /** @var \Drupal\config_translation\ConfigMapperInterface[] $config_mappers */
+    /** @var ConfigMapperInterface[] $config_mappers */
     $config_mappers = \Drupal::service('plugin.manager.config_translation.mapper')->getMappers();
     foreach ($config_mappers as $config_mapper_id => $config_mapper) {
       $names = $config_mapper->getConfigNames();
diff --git a/src/Entity/LingotekContentMetadata.php b/src/Entity/LingotekContentMetadata.php
index 9283c5ac..75974e96 100644
--- a/src/Entity/LingotekContentMetadata.php
+++ b/src/Entity/LingotekContentMetadata.php
@@ -197,7 +197,7 @@ class LingotekContentMetadata extends ContentEntityBase {
   /**
    * Sets the content entity this Lingotek metadata relates to.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The content entity.
    *
    * @return $this
diff --git a/src/EventSubscriber/AcquiaContentHubExcludeLingotekContentMetadataFromSerializationSubscriber.php b/src/EventSubscriber/AcquiaContentHubExcludeLingotekContentMetadataFromSerializationSubscriber.php
index 4d4fa187..4413242f 100644
--- a/src/EventSubscriber/AcquiaContentHubExcludeLingotekContentMetadataFromSerializationSubscriber.php
+++ b/src/EventSubscriber/AcquiaContentHubExcludeLingotekContentMetadataFromSerializationSubscriber.php
@@ -52,7 +52,7 @@ class AcquiaContentHubExcludeLingotekContentMetadataFromSerializationSubscriber
   /**
    * Whether we should include this field in the serialization.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The entity field.
    *
    * @return bool
diff --git a/src/EventSubscriber/DepCalcExcludeLingotekContentMetadataSubscriber.php b/src/EventSubscriber/DepCalcExcludeLingotekContentMetadataSubscriber.php
index 9ce79ac0..01ffca70 100644
--- a/src/EventSubscriber/DepCalcExcludeLingotekContentMetadataSubscriber.php
+++ b/src/EventSubscriber/DepCalcExcludeLingotekContentMetadataSubscriber.php
@@ -37,7 +37,7 @@ class DepCalcExcludeLingotekContentMetadataSubscriber implements EventSubscriber
   /**
    * Whether we should include this field in the dependency calculation.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The entity field.
    *
    * @return bool
diff --git a/src/EventSubscriber/LingotekConfigSubscriber.php b/src/EventSubscriber/LingotekConfigSubscriber.php
index 6a336e93..0aa0f7e1 100644
--- a/src/EventSubscriber/LingotekConfigSubscriber.php
+++ b/src/EventSubscriber/LingotekConfigSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek\EventSubscriber;
 
+use Drupal\config_translation\ConfigMapperInterface;
+use Drupal\lingotek\LanguageLocaleMapperInterface;
+use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\config_translation\ConfigMapperManagerInterface;
 use Drupal\Core\Config\ConfigCrudEvent;
@@ -25,57 +28,57 @@ class LingotekConfigSubscriber implements EventSubscriberInterface {
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $translationService;
 
   /**
    * The mapper manager.
    *
-   * @var \Drupal\config_translation\ConfigMapperManagerInterface
+   * @var ConfigMapperManagerInterface
    */
   protected $mapperManager;
 
   /**
    * A array of configuration mapper instances.
    *
-   * @var \Drupal\config_translation\ConfigMapperInterface[]
+   * @var ConfigMapperInterface[]
    */
   protected $mappers;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * Entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs a LingotekConfigSubscriber.
    *
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service
+   * @param LingotekConfigTranslationServiceInterface $translation_service
    *   The Lingotek config translation service.
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $mapper_manager
+   * @param ConfigMapperManagerInterface $mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(LingotekConfigTranslationServiceInterface $translation_service, ConfigMapperManagerInterface $mapper_manager, LingotekConfigurationServiceInterface $lingotek_configuration, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -100,7 +103,7 @@ class LingotekConfigSubscriber implements EventSubscriberInterface {
   /**
    * Updates the configuration translation status when a configuration is saved.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function onConfigSave(ConfigCrudEvent $event) {
@@ -123,7 +126,7 @@ class LingotekConfigSubscriber implements EventSubscriberInterface {
               $this->translationService->markConfigTranslationsAsDirty($mapper);
             }
           }
-          /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+          /** @var LingotekConfigurationServiceInterface $lingotek_config */
           $lingotek_config = $this->lingotekConfiguration;
           $profile = $lingotek_config->getConfigProfile($mapper->getPluginId());
           if ($profile !== NULL && $profile->id() === Lingotek::PROFILE_DISABLED) {
@@ -152,7 +155,7 @@ class LingotekConfigSubscriber implements EventSubscriberInterface {
         $id = $config->get('id');
         list($entity_type_id, $bundle, $field_name) = explode('.', $id);
         if (!$config->get('translatable')) {
-          /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+          /** @var LingotekConfigurationServiceInterface $lingotek_config */
           $lingotek_config = $this->lingotekConfiguration;
           $field_definition = $this->entityFieldManager->getFieldDefinitions($entity_type_id, $bundle);
           // We need to make an exception for hosted entities. The field
@@ -192,12 +195,12 @@ class LingotekConfigSubscriber implements EventSubscriberInterface {
   /**
    * Updates the Lingotek configuration when a field is deleted.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function onConfigLanguageOverrideDelete(LanguageConfigOverrideCrudEvent $event) {
     if (!InstallerKernel::installationAttempted()) {
-      /** @var \Drupal\lingotek\LanguageLocaleMapperInterface $languageMapper */
+      /** @var LanguageLocaleMapperInterface $languageMapper */
       $languageMapper = \Drupal::service('lingotek.language_locale_mapper');
 
       $configOverride = $event->getLanguageConfigOverride();
@@ -263,7 +266,7 @@ class LingotekConfigSubscriber implements EventSubscriberInterface {
     }
     if (!$result) {
       // It may not be config, but config entity.
-      /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+      /** @var ConfigManagerInterface $config_manager */
       $config_manager = \Drupal::service('config.manager');
       $entity_type_id = $config_manager->getEntityTypeIdByName($name);
 
diff --git a/src/EventSubscriber/LingotekFieldDeletedConfigSubscriber.php b/src/EventSubscriber/LingotekFieldDeletedConfigSubscriber.php
index f658d320..a2dc551c 100644
--- a/src/EventSubscriber/LingotekFieldDeletedConfigSubscriber.php
+++ b/src/EventSubscriber/LingotekFieldDeletedConfigSubscriber.php
@@ -17,14 +17,14 @@ class LingotekFieldDeletedConfigSubscriber implements EventSubscriberInterface {
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * Constructs a LingotekFieldDeletedConfigSubscriber.
    *
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(LingotekConfigurationServiceInterface $lingotek_configuration) {
@@ -43,7 +43,7 @@ class LingotekFieldDeletedConfigSubscriber implements EventSubscriberInterface {
   /**
    * Updates the Lingotek configuration when a field is deleted.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function onConfigDelete(ConfigCrudEvent $event) {
diff --git a/src/Exception/LingotekContentEntityStorageException.php b/src/Exception/LingotekContentEntityStorageException.php
index 586bec28..9a23acf3 100644
--- a/src/Exception/LingotekContentEntityStorageException.php
+++ b/src/Exception/LingotekContentEntityStorageException.php
@@ -14,7 +14,7 @@ class LingotekContentEntityStorageException extends LingotekException {
   /**
    * The entity that could not be saved.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
diff --git a/src/FieldProcessor/LingotekFieldProcessorInterface.php b/src/FieldProcessor/LingotekFieldProcessorInterface.php
index 1adf0ff9..fae0a397 100644
--- a/src/FieldProcessor/LingotekFieldProcessorInterface.php
+++ b/src/FieldProcessor/LingotekFieldProcessorInterface.php
@@ -14,9 +14,9 @@ interface LingotekFieldProcessorInterface {
   /**
    * Check if this processor applies to a given field name.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity to process.
    */
   public function appliesToField(FieldDefinitionInterface $field_definition, ContentEntityInterface &$entity);
@@ -24,11 +24,11 @@ interface LingotekFieldProcessorInterface {
   /**
    * Extract data for the given field in the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Content entity to extract data from.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $data
    *   The data being extracted.
@@ -42,15 +42,15 @@ interface LingotekFieldProcessorInterface {
   /**
    * Extract data for the given field in the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $translation
+   * @param ContentEntityInterface $translation
    *   Content entity to store data in.
    * @param string $langcode
    *   The langcode being saved.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $revision
+   * @param ContentEntityInterface $revision
    *   Uploaded content entity revision as a reference.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $field_data
    *   The field data for being stored.
diff --git a/src/FieldProcessor/LingotekFieldProcessorManager.php b/src/FieldProcessor/LingotekFieldProcessorManager.php
index 345d829f..e03f2efb 100644
--- a/src/FieldProcessor/LingotekFieldProcessorManager.php
+++ b/src/FieldProcessor/LingotekFieldProcessorManager.php
@@ -20,9 +20,9 @@ class LingotekFieldProcessorManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -42,7 +42,7 @@ class LingotekFieldProcessorManager extends DefaultPluginManager {
     $valid_processors = [];
     uasort($field_processor_definitions, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
     foreach ($field_processor_definitions as $field_processor_definition_id => $field_processor_definition) {
-      /** @var \Drupal\lingotek\FieldProcessor\LingotekFieldProcessorInterface $processor */
+      /** @var LingotekFieldProcessorInterface $processor */
       $processor = $this->createInstance($field_processor_definition_id, []);
       if ($processor->appliesToField($field_definition, $entity)) {
         $valid_processors[] = $processor;
diff --git a/src/Form/LingotekAccountDisconnectForm.php b/src/Form/LingotekAccountDisconnectForm.php
index 468b6c1a..9d284c43 100644
--- a/src/Form/LingotekAccountDisconnectForm.php
+++ b/src/Form/LingotekAccountDisconnectForm.php
@@ -17,15 +17,15 @@ class LingotekAccountDisconnectForm extends ConfirmFormBase {
   /**
    * A lingotek connector object
    *
-   * @var \Drupal\lingotek\LingotekInterface
+   * @var LingotekInterface
    */
   protected $lingotek;
 
   /**
    * Constructs a \Drupal\lingotek\Form\LingotekAccountDisconnect object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param LingotekInterface $lingotek
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(LingotekInterface $lingotek, ConfigFactoryInterface $config_factory) {
diff --git a/src/Form/LingotekConfigFormBase.php b/src/Form/LingotekConfigFormBase.php
index b17a859c..451ce1f2 100644
--- a/src/Form/LingotekConfigFormBase.php
+++ b/src/Form/LingotekConfigFormBase.php
@@ -15,34 +15,34 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 abstract class LingotekConfigFormBase extends ConfigFormBase {
 
   /**
-   * @var \Drupal\lingotek\LingotekInterface
+   * @var LingotekInterface
    */
   protected $lingotek;
 
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;
 
   /**
    * Constructs a \Drupal\lingotek\Form\LingotekConfigFormBase object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
    */
   public function __construct(LingotekInterface $lingotek, ConfigFactoryInterface $config, UrlGeneratorInterface $url_generator, LinkGeneratorInterface $link_generator) {
diff --git a/src/Form/LingotekConfigManagementForm.php b/src/Form/LingotekConfigManagementForm.php
index 347fd1a6..a85c3559 100644
--- a/src/Form/LingotekConfigManagementForm.php
+++ b/src/Form/LingotekConfigManagementForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+use Drupal\lingotek\LingotekProfileInterface;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\config_translation\ConfigFieldMapper;
 use Drupal\config_translation\ConfigMapperInterface;
@@ -40,42 +42,42 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $translationService;
 
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * A array of configuration mapper instances.
    *
-   * @var \Drupal\config_translation\ConfigMapperInterface[]
+   * @var ConfigMapperInterface[]
    */
   protected $mappers;
 
@@ -89,17 +91,17 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Constructs a new LingotekManagementForm object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service
+   * @param LingotekConfigTranslationServiceInterface $translation_service
    *   The Lingotek config translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\config_translation\ConfigMapperInterface[] $mappers
+   * @param ConfigMapperInterface[] $mappers
    *   The configuration mappers.
    */
   public function __construct(LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigTranslationServiceInterface $translation_service, PrivateTempStoreFactory $temp_store_factory, array $mappers) {
@@ -215,7 +217,7 @@ class LingotekConfigManagementForm extends FormBase {
 
       $ids = $query->execute();
       $entities = $entity_storage->loadMultiple($ids);
-      /** @var \Drupal\config_translation\ConfigEntityMapper $mapper  */
+      /** @var ConfigEntityMapper $mapper  */
       $mappers = [];
       foreach ($entities as $entity) {
         $new_mapper = clone $mapper;
@@ -394,7 +396,7 @@ class LingotekConfigManagementForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function filterForm(array &$form, FormStateInterface $form_state) {
@@ -417,7 +419,7 @@ class LingotekConfigManagementForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function resetFilterForm(array &$form, FormStateInterface $form_state) {
@@ -516,14 +518,14 @@ class LingotekConfigManagementForm extends FormBase {
    *
    * @param array $values
    *   Array of ids to assign a Job ID.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function redirectToAssignJobIdMultipleConfigForm($values, FormStateInterface $form_state) {
     $entityInfo = [];
     $mappers = $this->getSelectedMappers($values);
     foreach ($mappers as $mapper_id => $mapper) {
-      /** @var \Drupal\config_translation\ConfigNamesMapper $mapper */
+      /** @var ConfigNamesMapper $mapper */
       $langcode = $mapper->getLangcode();
       $entityInfo[$this->filter][$mapper_id] = [$langcode => $langcode];
     }
@@ -537,14 +539,14 @@ class LingotekConfigManagementForm extends FormBase {
    *
    * @param array $values
    *   Array of ids to clear Job ID.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function redirectToClearJobIdMultipleConfigForm($values, FormStateInterface $form_state) {
     $entityInfo = [];
     $mappers = $this->getSelectedMappers($values);
     foreach ($mappers as $mapper_id => $mapper) {
-      /** @var \Drupal\config_translation\ConfigNamesMapper $mapper */
+      /** @var ConfigNamesMapper $mapper */
       $langcode = $mapper->getLangcode();
       $entityInfo[$this->filter][$mapper_id] = [$langcode => $langcode];
     }
@@ -560,7 +562,7 @@ class LingotekConfigManagementForm extends FormBase {
     });
     $bundles = [];
     foreach ($mappers as $bundle => $mapper) {
-      /** @var \Drupal\config_translation\ConfigEntityMapper $mapper */
+      /** @var ConfigEntityMapper $mapper */
       $bundles[$bundle] = $mapper->getTypeLabel();
     }
     return $bundles;
@@ -753,7 +755,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Export source for debugging purposes.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function debugExport(ConfigMapperInterface $mapper, $language, $job_id, &$context) {
@@ -793,7 +795,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Upload source for translation.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function uploadDocument(ConfigMapperInterface $mapper, $language, $job_id, &$context) {
@@ -893,7 +895,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Check document upload status for a given content.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function checkDocumentUploadStatus(ConfigMapperInterface $mapper, $language, $job_id, &$context) {
@@ -934,7 +936,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Request all translations for a given content.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function requestTranslations(ConfigMapperInterface $mapper, $language, $job_id, &$context) {
@@ -1016,7 +1018,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Checks all translations statuses for a given content.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function checkTranslationStatuses(ConfigMapperInterface $mapper, $language, $job_id, &$context) {
@@ -1063,7 +1065,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Checks translation status for a given content in a given language.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    * @param string $langcode
    *   The language to check.
@@ -1113,7 +1115,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Request translations for a given content in a given language.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    * @param string $langcode
    *   The language to download.
@@ -1200,7 +1202,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Download translation for a given content in a given language.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    * @param string $langcode
    *   The language to download.
@@ -1227,7 +1229,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Download translations for a given content in all enabled languages.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function downloadTranslations(ConfigMapperInterface $mapper, $langcode, $job_id, &$context) {
@@ -1257,7 +1259,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Cancel the content from Lingotek.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function cancel(ConfigMapperInterface $mapper, $langcode, $job_id, &$context) {
@@ -1307,7 +1309,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Cancel the content from Lingotek.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function cancelTarget(ConfigMapperInterface $mapper, $langcode, $job_id, &$context) {
@@ -1373,7 +1375,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Change Translation Profile.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    */
   public function changeProfile(ConfigMapperInterface $mapper, $profile_id = NULL, $job_id = NULL, &$context = NULL) {
@@ -1395,7 +1397,7 @@ class LingotekConfigManagementForm extends FormBase {
       $this->messenger()->addError(t('The Translation Profile change for %title failed. Please try again.', ['%title' => $mapper->getTitle()]));
     }
     if ($profile_id === Lingotek::PROFILE_DISABLED) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+      /** @var ConfigEntityInterface $entity */
       $entity = ($mapper instanceof ConfigEntityMapper) ? $mapper->getEntity() : NULL;
       if ($mapper instanceof ConfigEntityMapper) {
         $this->translationService->setSourceStatus($entity, Lingotek::STATUS_DISABLED);
@@ -1440,7 +1442,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Gets the source status of an config in a format ready to display.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    *
    * @return array
@@ -1563,7 +1565,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Gets the translation status of an entity in a format ready to display.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    *
    * @return array
@@ -1587,7 +1589,7 @@ class LingotekConfigManagementForm extends FormBase {
       $this->translationService->getTargetStatuses($entity) :
       $this->translationService->getConfigTargetStatuses($mapper);
 
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $mapper instanceof ConfigEntityMapper ?
       $this->lingotekConfiguration->getConfigEntityProfile($entity, TRUE) :
       $this->lingotekConfiguration->getConfigProfile($mapper->getPluginId());
@@ -1653,7 +1655,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Formats the translation statuses for display.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    * @param array $translations
    *   Pairs of language - status.
@@ -1756,11 +1758,11 @@ class LingotekConfigManagementForm extends FormBase {
   }
 
   /**
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    * @param string $source_status
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   protected function getSourceActionUrl(ConfigMapperInterface &$mapper, $source_status) {
     $url = NULL;
@@ -1855,7 +1857,7 @@ class LingotekConfigManagementForm extends FormBase {
   /**
    * Actually performs the translation download.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper to be used.
    * @param $entity
    *   The entity (in case it is a config entity mapper).
@@ -1921,7 +1923,7 @@ class LingotekConfigManagementForm extends FormBase {
    * @param $values
    *   Array of ids.
    *
-   * @return \Drupal\config_translation\ConfigNamesMapper[]
+   * @return ConfigNamesMapper[]
    *   The mappers.
    */
   protected function getSelectedMappers($values) {
diff --git a/src/Form/LingotekContentTranslationForm.php b/src/Form/LingotekContentTranslationForm.php
index 74c56190..9955898d 100644
--- a/src/Form/LingotekContentTranslationForm.php
+++ b/src/Form/LingotekContentTranslationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ -21,30 +22,30 @@ class LingotekContentTranslationForm extends LingotekConfigFormBase {
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * Constructs a \Drupal\lingotek\Form\LingotekContentTranslationForm object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LingotekInterface $lingotek
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
    */
   public function __construct(LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, ConfigFactoryInterface $config, UrlGeneratorInterface $url_generator = NULL, LinkGeneratorInterface $link_generator = NULL) {
@@ -78,7 +79,7 @@ class LingotekContentTranslationForm extends LingotekConfigFormBase {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, array $build = NULL) {
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
 
     $entity = $build['#entity'];
diff --git a/src/Form/LingotekDisassociateAllConfirmForm.php b/src/Form/LingotekDisassociateAllConfirmForm.php
index 447ab494..68fe8477 100644
--- a/src/Form/LingotekDisassociateAllConfirmForm.php
+++ b/src/Form/LingotekDisassociateAllConfirmForm.php
@@ -21,23 +21,23 @@ class LingotekDisassociateAllConfirmForm extends ConfirmFormBase {
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $contentTranslationService;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $configTranslationService;
 
   /**
    * Constructs a new LingotekDisassociateAllConfirmForm object.
    *
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service
+   * @param LingotekContentTranslationServiceInterface $content_translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $config_translation_service
+   * @param LingotekConfigTranslationServiceInterface $config_translation_service
    *   The Lingotek config translation service.
    */
   public function __construct(LingotekContentTranslationServiceInterface $content_translation_service, LingotekConfigTranslationServiceInterface $config_translation_service) {
@@ -132,7 +132,7 @@ class LingotekDisassociateAllConfirmForm extends ConfirmFormBase {
   protected function disassociateAllConfigTranslations() {
     $error = FALSE;
 
-    /** @var \Drupal\lingotek\Entity\LingotekConfigMetadata[] $all_config_metadata */
+    /** @var LingotekConfigMetadata[] $all_config_metadata */
     $all_config_metadata = LingotekConfigMetadata::loadMultiple();
     foreach ($all_config_metadata as $config_metadata) {
       try {
@@ -164,7 +164,7 @@ class LingotekDisassociateAllConfirmForm extends ConfirmFormBase {
   protected function disassociateAllContentTranslations() {
     $error = FALSE;
 
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata[] $all_content_metadata */
+    /** @var LingotekContentMetadata[] $all_content_metadata */
     $all_content_metadata = LingotekContentMetadata::loadMultiple();
     foreach ($all_content_metadata as $content_metadata) {
       try {
diff --git a/src/Form/LingotekElementInfoAlterForm.php b/src/Form/LingotekElementInfoAlterForm.php
index 8cc185fe..2477795e 100644
--- a/src/Form/LingotekElementInfoAlterForm.php
+++ b/src/Form/LingotekElementInfoAlterForm.php
@@ -30,41 +30,41 @@ class LingotekElementInfoAlterForm implements ContainerInjectionInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * Constructs a new LingotekElementInfoAlterForm object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   An entity type manager object.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, RouteBuilderInterface $route_builder, LingotekConfigurationServiceInterface $lingotek_configuration) {
@@ -103,7 +103,7 @@ class LingotekElementInfoAlterForm implements ContainerInjectionInterface {
    *
    * @param array $element
    *   Form API element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The form.
@@ -158,7 +158,7 @@ class LingotekElementInfoAlterForm implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @see lingotek_language_configuration_element_validate()
diff --git a/src/Form/LingotekFieldConfigEditForm.php b/src/Form/LingotekFieldConfigEditForm.php
index c5c3c942..67d5f917 100644
--- a/src/Form/LingotekFieldConfigEditForm.php
+++ b/src/Form/LingotekFieldConfigEditForm.php
@@ -21,14 +21,14 @@ class LingotekFieldConfigEditForm {
   /**
    * The Lingotek Configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfig;
 
   /**
    * Constructs a new LingotekConfigurationService object.
    *
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config
+   * @param LingotekConfigurationServiceInterface $lingotek_config
    *   The Lingotek Configuration service.
    */
   public function __construct(LingotekConfigurationServiceInterface $lingotek_config) {
@@ -41,7 +41,7 @@ class LingotekFieldConfigEditForm {
    *
    * @param array $form
    *   The form definition array for the language content settings.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function form(array &$form, FormStateInterface $form_state) {
@@ -106,7 +106,7 @@ class LingotekFieldConfigEditForm {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function submitForm(array $form, FormStateInterface $form_state) {
     $field = $form_state->getFormObject()->getEntity();
diff --git a/src/Form/LingotekIntelligenceMetadataForm.php b/src/Form/LingotekIntelligenceMetadataForm.php
index 57ed636a..7569e86e 100644
--- a/src/Form/LingotekIntelligenceMetadataForm.php
+++ b/src/Form/LingotekIntelligenceMetadataForm.php
@@ -353,7 +353,7 @@ class LingotekIntelligenceMetadataForm extends FormBase {
   /**
    * Helper method for getting the Lingotek intelligence metadata.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return LingotekIntelligenceMetadataInterface
diff --git a/src/Form/LingotekInterfaceTranslationClearMetadataForm.php b/src/Form/LingotekInterfaceTranslationClearMetadataForm.php
index a2e1c00a..965d360f 100644
--- a/src/Form/LingotekInterfaceTranslationClearMetadataForm.php
+++ b/src/Form/LingotekInterfaceTranslationClearMetadataForm.php
@@ -16,14 +16,14 @@ class LingotekInterfaceTranslationClearMetadataForm extends ConfirmFormBase {
   /**
    * The Lingotek interface translation service.
    *
-   * @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface
+   * @var LingotekInterfaceTranslationServiceInterface
    */
   protected $lingotekInterfaceTranslation;
 
   /**
    * Constructs a LingotekInterfaceTranslationClearMetadataForm object.
    *
-   * @param \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation
+   * @param LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation
    *   The Lingotek interface translation service.
    */
   public function __construct(LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation) {
diff --git a/src/Form/LingotekInterfaceTranslationForm.php b/src/Form/LingotekInterfaceTranslationForm.php
index 930e0bf9..aeda9af7 100644
--- a/src/Form/LingotekInterfaceTranslationForm.php
+++ b/src/Form/LingotekInterfaceTranslationForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\language\ConfigurableLanguageManagerInterface;
+use Drupal\Core\Extension\ModuleExtensionList;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -26,41 +28,41 @@ class LingotekInterfaceTranslationForm extends FormBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The Lingotek interface translation service.
    *
-   * @var \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface
+   * @var LingotekInterfaceTranslationServiceInterface
    */
   protected $lingotekInterfaceTranslation;
 
   /**
    * Constructs a new LingotekInterfaceTranslationForm object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\lingotek\LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation
+   * @param LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation
    *   The Lingotek interface translation service.
    */
   public function __construct(LanguageManagerInterface $language_manager, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, LingotekInterfaceTranslationServiceInterface $lingotek_interface_translation) {
@@ -271,7 +273,7 @@ class LingotekInterfaceTranslationForm extends FormBase {
       $component = $moduleInfo->getPath();
       $type = $moduleInfo->getType();
       // We don't inject this service as its interface is not considered "stable".
-      /** @var \Drupal\Core\Extension\ModuleExtensionList $moduleExtensionList */
+      /** @var ModuleExtensionList $moduleExtensionList */
       $moduleExtensionList = \Drupal::service('extension.list.module');
       $userFriendlyName = $moduleExtensionList->getName($module);
 
diff --git a/src/Form/LingotekJobAssignToMultipleConfigForm.php b/src/Form/LingotekJobAssignToMultipleConfigForm.php
index 04796770..98375358 100644
--- a/src/Form/LingotekJobAssignToMultipleConfigForm.php
+++ b/src/Form/LingotekJobAssignToMultipleConfigForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\config_translation\ConfigNamesMapper;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\config_translation\ConfigFieldMapper;
 use Drupal\config_translation\ConfigMapperInterface;
@@ -35,42 +39,42 @@ class LingotekJobAssignToMultipleConfigForm extends FormBase {
   /**
    * A array of configuration mapper instances.
    *
-   * @var \Drupal\config_translation\ConfigMapperInterface[]
+   * @var ConfigMapperInterface[]
    */
   protected $mappers;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The tempstore.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $tempStore;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $translationService;
 
@@ -84,17 +88,17 @@ class LingotekJobAssignToMultipleConfigForm extends FormBase {
   /**
    * Constructs a new LingotekJobAssignToMultipleConfigForm object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service
+   * @param LingotekConfigTranslationServiceInterface $translation_service
    *   The Lingotek config translation service.
-   * @param \Drupal\config_translation\ConfigMapperInterface[] $mappers
+   * @param ConfigMapperInterface[] $mappers
    *   The configuration mappers.
    */
   public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, PrivateTempStoreFactory $temp_store_factory, MessengerInterface $messenger, LingotekConfigTranslationServiceInterface $translation_service, array $mappers) {
@@ -291,11 +295,11 @@ class LingotekJobAssignToMultipleConfigForm extends FormBase {
    * @param $values
    *   Array of ids.
    *
-   * @return \Drupal\config_translation\ConfigNamesMapper[]
+   * @return ConfigNamesMapper[]
    *   The mappers.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSelectedMappers($values) {
     $mappers = [];
@@ -334,7 +338,7 @@ class LingotekJobAssignToMultipleConfigForm extends FormBase {
   /**
    * Gets a user-friendly label for a mapper.
    *
-   * @param \Drupal\config_translation\ConfigMapperInterface $mapper
+   * @param ConfigMapperInterface $mapper
    *   The mapper.
    *
    * @return string
@@ -357,7 +361,7 @@ class LingotekJobAssignToMultipleConfigForm extends FormBase {
   /**
    * Gets a user-friendly label for a mapper bundle.
    *
-   * @param \Drupal\config_translation\ConfigFieldMapper $mapper
+   * @param ConfigFieldMapper $mapper
    *   The mapper.
    *
    * @return string
diff --git a/src/Form/LingotekJobAssignToMultipleEntitiesForm.php b/src/Form/LingotekJobAssignToMultipleEntitiesForm.php
index 73d0ee44..a8edfd49 100644
--- a/src/Form/LingotekJobAssignToMultipleEntitiesForm.php
+++ b/src/Form/LingotekJobAssignToMultipleEntitiesForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\Core\TempStore\SharedTempStore;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -28,35 +32,35 @@ class LingotekJobAssignToMultipleEntitiesForm extends FormBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The tempstore.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $tempStore;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
@@ -70,15 +74,15 @@ class LingotekJobAssignToMultipleEntitiesForm extends FormBase {
   /**
    * Constructs a new LingotekJobAssignToMultipleEntitiesForm object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
    */
   public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, PrivateTempStoreFactory $temp_store_factory, MessengerInterface $messenger, LingotekContentTranslationServiceInterface $translation_service) {
@@ -242,11 +246,11 @@ class LingotekJobAssignToMultipleEntitiesForm extends FormBase {
    * @param string[][] $selection
    *   The selection.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   The entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSelectedEntities($selection) {
     $entities = [];
diff --git a/src/Form/LingotekJobManagementContentEntitiesForm.php b/src/Form/LingotekJobManagementContentEntitiesForm.php
index 98362bcb..7bde2a0e 100644
--- a/src/Form/LingotekJobManagementContentEntitiesForm.php
+++ b/src/Form/LingotekJobManagementContentEntitiesForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\Entity\LingotekContentMetadata;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -34,7 +35,7 @@ class LingotekJobManagementContentEntitiesForm extends LingotekManagementFormBas
     $metadatas = $metadataStorage->loadMultiple($ids);
     $entities = [];
 
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     if (!empty($metadatas)) {
       foreach ($metadatas as $metadata) {
         $content_entity_type_id = $metadata->getContentEntityTypeId();
diff --git a/src/Form/LingotekLanguageContentSettingsForm.php b/src/Form/LingotekLanguageContentSettingsForm.php
index 3119479f..1d51ce4c 100644
--- a/src/Form/LingotekLanguageContentSettingsForm.php
+++ b/src/Form/LingotekLanguageContentSettingsForm.php
@@ -18,14 +18,14 @@ class LingotekLanguageContentSettingsForm {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleInfo;
 
   /**
    * Constructs a new LingotekConfigTranslationService object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_bundle_info) {
@@ -38,7 +38,7 @@ class LingotekLanguageContentSettingsForm {
    *
    * @param array $form
    *   The form definition array for the language content settings.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function form(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/LingotekLanguageForm.php b/src/Form/LingotekLanguageForm.php
index d4ebf140..4bdc924d 100644
--- a/src/Form/LingotekLanguageForm.php
+++ b/src/Form/LingotekLanguageForm.php
@@ -24,32 +24,32 @@ class LingotekLanguageForm {
   /**
    * A lingotek connector object
    *
-   * @var \Drupal\lingotek\LingotekInterface
+   * @var LingotekInterface
    */
   protected $lingotek;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * Constructs a new LingotekLanguageForm object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   A lingotek object.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration = NULL) {
@@ -67,11 +67,11 @@ class LingotekLanguageForm {
    *
    * @param array $form
    *   The form definition array for the configurable language entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function form(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\language\ConfigurableLanguageInterface $language */
+    /** @var ConfigurableLanguageInterface $language */
     $language = $form_state->getFormObject()->getEntity();
     $langcode = $language->getId();
 
@@ -133,11 +133,11 @@ class LingotekLanguageForm {
    *
    * @param string $entity_type
    *   The entity type.
-   * @param \Drupal\language\ConfigurableLanguageInterface $language
+   * @param ConfigurableLanguageInterface $language
    *   The language object.
    * @param array $form
    *   The form definition array for the configurable language entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see lingotek_form_language_admin_add_form_alter()
@@ -160,7 +160,7 @@ class LingotekLanguageForm {
    *
    * @param array $form
    *   The form definition array for the configurable language entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see lingotek_form_language_admin_add_form_alter()
diff --git a/src/Form/LingotekManagementForm.php b/src/Form/LingotekManagementForm.php
index 2817552e..4be7daf5 100644
--- a/src/Form/LingotekManagementForm.php
+++ b/src/Form/LingotekManagementForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
@@ -24,7 +25,7 @@ class LingotekManagementForm extends LingotekManagementFormBase {
    */
   protected function getFilteredEntities() {
     // The query will be initialized in FormComponentFilterBase.
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $query */
+    /** @var PagerSelectExtender $query */
     $query = NULL;
     $temp_store = $this->tempStoreFactory->get($this->getTempStorageFilterKey());
     $submitted = $temp_store->get('filters') ?? [];
diff --git a/src/Form/LingotekManagementFormBase.php b/src/Form/LingotekManagementFormBase.php
index 7650f6d1..e2311303 100644
--- a/src/Form/LingotekManagementFormBase.php
+++ b/src/Form/LingotekManagementFormBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\FormComponent\LingotekFormComponentFieldInterface;
+use Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionInterface;
+use Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionOptionInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Database\Connection;
@@ -40,77 +44,77 @@ abstract class LingotekManagementFormBase extends FormBase {
   /**
    * The connection object on which to run queries.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The content translation manager.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslationManager;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
   /**
    * The state key value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -124,7 +128,7 @@ abstract class LingotekManagementFormBase extends FormBase {
   /**
    * Available form-field plugins.
    *
-   * @var \Drupal\lingotek\FormComponent\LingotekFormComponentFieldInterface[]
+   * @var LingotekFormComponentFieldInterface[]
    */
   protected $formFields = [];
 
@@ -145,78 +149,78 @@ abstract class LingotekManagementFormBase extends FormBase {
   /**
    * Available form-bulk-actions plugins.
    *
-   * @var \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionInterface[]
+   * @var LingotekFormComponentBulkActionInterface[]
    */
   protected $formBulkActions = [];
 
   /**
    * Available form-bulk-actions options plugins.
    *
-   * @var \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionOptionInterface[]
+   * @var LingotekFormComponentBulkActionOptionInterface[]
    */
   protected $formBulkActionOptions = [];
 
   /**
    * Available form-bulk-actions plugin manager.
    *
-   * @var \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionManager
+   * @var LingotekFormComponentBulkActionManager
    */
   protected $formBulkActionManager;
 
   /**
    * Available form-bulk-actions options plugin manager.
    *
-   * @var \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionOptionManager
+   * @var LingotekFormComponentBulkActionOptionManager
    */
   protected $formBulkActionOptionsManager;
 
   /**
    * Available form-bulk-actions executor.
    *
-   * @var \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionExecutor
+   * @var LingotekFormComponentBulkActionExecutor
    */
   protected $formBulkActionExecutor;
 
   /**
    * Constructs a new LingotekManagementFormBase object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The current database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The Lingotek service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param string $entity_type_id
    *   The entity type id.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentFieldManager $form_field_manager
+   * @param LingotekFormComponentFieldManager $form_field_manager
    *   The form-field plugin manager.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentFilterManager $form_filter_manager
+   * @param LingotekFormComponentFilterManager $form_filter_manager
    *   The form-filter plugin manager.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionManager $form_actions_manager
+   * @param LingotekFormComponentBulkActionManager $form_actions_manager
    *   The form-actions plugin manager.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionOptionManager $form_action_options_manager
+   * @param LingotekFormComponentBulkActionOptionManager $form_action_options_manager
    *   The form-action options plugin manager.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionExecutor $form_bulk_action_executor
+   * @param LingotekFormComponentBulkActionExecutor $form_bulk_action_executor
    *   The form-action options plugin manager.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekInterface $lingotek, LingotekConfigurationServiceInterface $lingotek_configuration, LanguageLocaleMapperInterface $language_locale_mapper, ContentTranslationManagerInterface $content_translation_manager, LingotekContentTranslationServiceInterface $translation_service, PrivateTempStoreFactory $temp_store_factory, StateInterface $state, ModuleHandlerInterface $module_handler, $entity_type_id, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, LingotekFormComponentFieldManager $form_field_manager, LingotekFormComponentFilterManager $form_filter_manager, LingotekFormComponentBulkActionManager $form_actions_manager, LingotekFormComponentBulkActionOptionManager $form_action_options_manager, LingotekFormComponentBulkActionExecutor $form_bulk_action_executor) {
@@ -384,7 +388,7 @@ abstract class LingotekManagementFormBase extends FormBase {
    * @param string[] $values
    *   Array of values that identify the selected entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities.
    */
   abstract protected function getSelectedEntities($values);
@@ -402,7 +406,7 @@ abstract class LingotekManagementFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function resetFilterForm(array &$form, FormStateInterface $form_state) {
@@ -415,7 +419,7 @@ abstract class LingotekManagementFormBase extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function filterForm(array &$form, FormStateInterface $form_state) {
@@ -479,7 +483,7 @@ abstract class LingotekManagementFormBase extends FormBase {
   /**
    * Gets the entities that needs to be displayed based on the current filters.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities
    */
   abstract protected function getFilteredEntities();
@@ -495,7 +499,7 @@ abstract class LingotekManagementFormBase extends FormBase {
   /**
    * Gets the rows for rendering based on the passed entity list.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entity_list
+   * @param EntityInterface[] $entity_list
    *
    * @return array
    *   A render array.
@@ -513,7 +517,7 @@ abstract class LingotekManagementFormBase extends FormBase {
   /**
    * Gets a row of fields for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
diff --git a/src/Form/LingotekManagementRelatedEntitiesForm.php b/src/Form/LingotekManagementRelatedEntitiesForm.php
index 374eb314..e46c16a2 100644
--- a/src/Form/LingotekManagementRelatedEntitiesForm.php
+++ b/src/Form/LingotekManagementRelatedEntitiesForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorInterface;
+use Drupal\Core\TempStore\TempStoreException;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityType;
@@ -30,53 +34,53 @@ use Drupal\lingotek\LingotekInterface;
 class LingotekManagementRelatedEntitiesForm extends LingotekManagementFormBase {
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * Constructs a new LingotekManagementRelatedEntitiesForm object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The current database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The Lingotek service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param StateInterface $state
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param string $entity_type_id
    *   The entity type id.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentFieldManager $form_field_manager
+   * @param LingotekFormComponentFieldManager $form_field_manager
    *   The form-field plugin manager.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentFilterManager $form_filter_manager
+   * @param LingotekFormComponentFilterManager $form_filter_manager
    *   The form-filter plugin manager.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionManager $form_actions_manager
+   * @param LingotekFormComponentBulkActionManager $form_actions_manager
    *   The form-actions plugin manager.
-   * @param \Drupal\lingotek\FormComponent\LingotekFormComponentBulkActionOptionManager $form_action_options_manager
+   * @param LingotekFormComponentBulkActionOptionManager $form_action_options_manager
    *   The form-action options plugin manager.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekInterface $lingotek, LingotekConfigurationServiceInterface $lingotek_configuration, LanguageLocaleMapperInterface $language_locale_mapper, ContentTranslationManagerInterface $content_translation_manager, LingotekContentTranslationServiceInterface $translation_service, PrivateTempStoreFactory $temp_store_factory, StateInterface $state, ModuleHandlerInterface $module_handler, $entity_type_id, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, LingotekFormComponentFieldManager $form_field_manager, LingotekFormComponentFilterManager $form_filter_manager, LingotekFormComponentBulkActionManager $form_actions_manager, LingotekFormComponentBulkActionOptionManager $form_action_options_manager, LingotekFormComponentBulkActionExecutor $form_bulk_action_executor) {
     // The entity type is inevitably a node, but let's find out the proper way.
     $route_parameters = \Drupal::routeMatch()->getParameters()->all();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = reset($route_parameters);
     parent::__construct($connection, $entity_type_manager, $language_manager, $lingotek, $lingotek_configuration, $language_locale_mapper, $content_translation_manager, $translation_service, $temp_store_factory, $state, $module_handler, $entity->getEntityTypeId(), $entity_field_manager, $entity_type_bundle_info, $form_field_manager, $form_filter_manager, $form_actions_manager, $form_action_options_manager, $form_bulk_action_executor);
   }
@@ -184,7 +188,7 @@ class LingotekManagementRelatedEntitiesForm extends LingotekManagementFormBase {
     $plugin_definitions = $type->getDefinitions();
     uasort($plugin_definitions, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
     foreach ($plugin_definitions as $plugin_definition_id => $plugin_definition) {
-      /** @var \Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorInterface $plugin */
+      /** @var RelatedEntitiesDetectorInterface $plugin */
       $plugin = $type->createInstance($plugin_definition_id, []);
       $entities = $plugin->extract($this->node, $entities, $related, $recursion_depth, $visited);
     }
@@ -253,7 +257,7 @@ class LingotekManagementRelatedEntitiesForm extends LingotekManagementFormBase {
    * @param int $depth
    *   The recursion depth.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   protected function setRecursionDepth($depth) {
     $temp_store = $this->tempStoreFactory->get('lingotek.management.recursion_depth');
diff --git a/src/Form/LingotekMediaBulkForm.php b/src/Form/LingotekMediaBulkForm.php
index d454f7b2..bde8c779 100644
--- a/src/Form/LingotekMediaBulkForm.php
+++ b/src/Form/LingotekMediaBulkForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\media\MediaInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\image\Entity\ImageStyle;
@@ -21,7 +22,7 @@ class LingotekMediaBulkForm {
    *
    * @param array &$form
    *   The form definition array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function form(array &$form, FormStateInterface $form_state) {
@@ -31,7 +32,7 @@ class LingotekMediaBulkForm {
       if ($formObject->getEntityTypeId() === 'media') {
         $thumbnailExists = ImageStyle::load('thumbnail');
         $mids = array_keys($form['table']['#options']);
-        /** @var \Drupal\media\MediaInterface[] $medias */
+        /** @var MediaInterface[] $medias */
         $medias = Media::loadMultiple($mids);
         $form['table']['#header'] = ['thumbnail' => $this->t('Thumbnail')] + $form['table']['#header'];
         foreach ($medias as $id => $media) {
diff --git a/src/Form/LingotekMetadataEditForm.php b/src/Form/LingotekMetadataEditForm.php
index d3b9e946..baadbb70 100644
--- a/src/Form/LingotekMetadataEditForm.php
+++ b/src/Form/LingotekMetadataEditForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\Entity\LingotekContentMetadata;
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
@@ -24,21 +26,21 @@ class LingotekMetadataEditForm extends ContentEntityForm {
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
@@ -52,17 +54,17 @@ class LingotekMetadataEditForm extends ContentEntityForm {
   /**
    * Constructs a new LingotekManagementForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
    * @param string $entity_type_id
    *   The entity type id.
@@ -111,7 +113,7 @@ class LingotekMetadataEditForm extends ContentEntityForm {
 
     // $form = parent::buildForm($form, $form_state);
     $entity = $this->getEntity();
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata|NULL $metadata */
+    /** @var LingotekContentMetadata|NULL $metadata */
     $metadata = $entity->hasField('lingotek_metadata') ? $entity->lingotek_metadata->entity : NULL;
     $lingotek_document_id = $this->translationService->getDocumentId($entity);
     $source_status = $this->translationService->getSourceStatus($entity);
@@ -185,13 +187,13 @@ class LingotekMetadataEditForm extends ContentEntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function saveMetadata(array &$form, FormStateInterface $form_state) {
     $entity = $this->getEntity();
 
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     if ($lingotek_config->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
@@ -204,7 +206,7 @@ class LingotekMetadataEditForm extends ContentEntityForm {
       foreach ($this->languageManager->getLanguages() as $langcode => $language) {
         $this->translationService->setTargetStatus($entity, $langcode, $input[$langcode]);
       }
-      /** @var \Drupal\lingotek\Entity\LingotekContentMetadata|NULL $metadata */
+      /** @var LingotekContentMetadata|NULL $metadata */
       $metadata = $entity->hasField('lingotek_metadata') ? $entity->lingotek_metadata->entity : NULL;
       if ($metadata !== NULL) {
         $metadata->setProfile($input['lingotek_translation_management']['lingotek_translation_profile']);
@@ -252,7 +254,7 @@ class LingotekMetadataEditForm extends ContentEntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/LingotekParagraphsBulkForm.php b/src/Form/LingotekParagraphsBulkForm.php
index acc1ccb7..e9900a2f 100644
--- a/src/Form/LingotekParagraphsBulkForm.php
+++ b/src/Form/LingotekParagraphsBulkForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\paragraphs\Entity\Paragraph;
@@ -23,10 +25,10 @@ class LingotekParagraphsBulkForm {
    *
    * @param array &$form
    *   The form definition array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function form(array &$form, FormStateInterface $form_state) {
     $build_info = $form_state->getBuildInfo();
@@ -38,7 +40,7 @@ class LingotekParagraphsBulkForm {
         $paragraphs = Paragraph::loadMultiple($pids);
         $form['table']['#header'] = ['parent' => $this->t('Parent')] + $form['table']['#header'];
         foreach ($paragraphs as $id => $paragraph) {
-          /** @var \Drupal\Core\Entity\EntityInterface $parent */
+          /** @var EntityInterface $parent */
           $parent = $paragraph;
           do {
             $parent = $parent->getParentEntity();
diff --git a/src/Form/LingotekProfileDeleteForm.php b/src/Form/LingotekProfileDeleteForm.php
index d1a59aa5..d9c3dbab 100644
--- a/src/Form/LingotekProfileDeleteForm.php
+++ b/src/Form/LingotekProfileDeleteForm.php
@@ -16,14 +16,14 @@ class LingotekProfileDeleteForm extends EntityDeleteForm {
   /**
    * The Lingotek profiles usage service.
    *
-   * @var \Drupal\lingotek\LingotekProfileUsageInterface
+   * @var LingotekProfileUsageInterface
    */
   protected $profileUsage;
 
   /**
    * Constructs a new LingotekProfileDeleteForm object.
    *
-   * @param \Drupal\lingotek\LingotekProfileUsageInterface $profile_usage
+   * @param LingotekProfileUsageInterface $profile_usage
    *   The Lingotek profiles usage service.
    */
   public function __construct(LingotekProfileUsageInterface $profile_usage) {
diff --git a/src/Form/LingotekProfileFormBase.php b/src/Form/LingotekProfileFormBase.php
index 7260ec9c..81855187 100644
--- a/src/Form/LingotekProfileFormBase.php
+++ b/src/Form/LingotekProfileFormBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\LingotekProfileInterface;
+use Drupal\lingotek\Entity\LingotekProfile;
+use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,23 +22,23 @@ class LingotekProfileFormBase extends EntityForm {
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface
+   * @var LingotekFilterManagerInterface
    */
   protected $lingotekFilterManager;
 
   /**
    * Constructs a LingotekProfileFormBase object.
    *
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekFilterManagerInterface $lingotek_filter_manager
+   * @param LingotekFilterManagerInterface $lingotek_filter_manager
    *   The Lingotek Filter manager.
    */
   public function __construct(LingotekConfigurationServiceInterface $lingotek_configuration, LingotekFilterManagerInterface $lingotek_filter_manager) {
@@ -65,7 +68,7 @@ class LingotekProfileFormBase extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->entity;
     $form['id'] = [
       '#type' => 'machine_name',
@@ -205,7 +208,7 @@ class LingotekProfileFormBase extends EntityForm {
       '#default_value' => $profile->getVault(),
     ];
 
-    /** @var \Drupal\lingotek\LingotekFilterManagerInterface $filter_manager */
+    /** @var LingotekFilterManagerInterface $filter_manager */
     $filters = $this->lingotekFilterManager->getLocallyAvailableFilters();
     $form['filter'] = [
       '#type' => 'select',
@@ -339,9 +342,9 @@ class LingotekProfileFormBase extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\lingotek\Entity\LingotekProfile $profile */
+    /** @var LingotekProfile $profile */
     $profile = $this->getEntity();
-    /** @var \Drupal\Core\Form\FormInterface $subform */
+    /** @var FormInterface $subform */
     $form_object = new LingotekIntelligenceMetadataForm();
     $input = $form_state->getUserInput();
     $inner_form_state = new FormState();
diff --git a/src/Form/LingotekSettingsContentSingleForm.php b/src/Form/LingotekSettingsContentSingleForm.php
index 89bd99af..a490064a 100644
--- a/src/Form/LingotekSettingsContentSingleForm.php
+++ b/src/Form/LingotekSettingsContentSingleForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\lingotek\Moderation\LingotekModerationFactoryInterface;
+use Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Form\FormStateInterface;
@@ -35,7 +38,7 @@ class LingotekSettingsContentSingleForm extends LingotekConfigFormBase {
     $this->entity_type_id = $entity_type;
     $this->bundle_id = $bundle;
 
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     $entity_type_definitions = \Drupal::entityTypeManager()->getDefinitions();
@@ -60,9 +63,9 @@ class LingotekSettingsContentSingleForm extends LingotekConfigFormBase {
 
     $entity_key = 'entity-' . $entity_type;
 
-    /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderationFactory */
+    /** @var LingotekModerationFactoryInterface $moderationFactory */
     $moderationFactory = \Drupal::service('lingotek.moderation_factory');
-    /** @var \Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface $moderationForm */
+    /** @var LingotekModerationSettingsFormInterface $moderationForm */
     $moderationForm = $moderationFactory->getModerationSettingsForm();
 
     $bundle_label = $entity_type_definitions[$entity_type]->getBundleLabel();
@@ -132,7 +135,7 @@ class LingotekSettingsContentSingleForm extends LingotekConfigFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     $form_values = $form_state->getValues();
@@ -171,9 +174,9 @@ class LingotekSettingsContentSingleForm extends LingotekConfigFormBase {
           $contentSettingsData[$entity_id][$bundle_id]['profile'] = $form_values[$entity_id][$bundle_id]['profiles'];
         }
 
-        /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderationFactory */
+        /** @var LingotekModerationFactoryInterface $moderationFactory */
         $moderationFactory = \Drupal::service('lingotek.moderation_factory');
-        /** @var \Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface $moderationForm */
+        /** @var LingotekModerationSettingsFormInterface $moderationForm */
         $moderationForm = $moderationFactory->getModerationSettingsForm();
         $moderationForm->submitHandler($entity_id, $bundle_id, $bundle);
       }
@@ -221,7 +224,7 @@ class LingotekSettingsContentSingleForm extends LingotekConfigFormBase {
   }
 
   protected function retrieveProfiles($entity_id, $bundle_id) {
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
     $enable_bulk_management = $lingotek_config->getPreference('contrib.paragraphs.enable_bulk_management');
 
@@ -248,7 +251,7 @@ class LingotekSettingsContentSingleForm extends LingotekConfigFormBase {
   protected function retrieveFields(FormStateInterface $form_state, $entity_id, $bundle_id) {
     $provideDefaults = $form_state->getTemporaryValue('provideDefaults') ?: [];
     $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_id);
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
     $content_translation_manager = \Drupal::service('content_translation.manager');
     $storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_id);
diff --git a/src/Form/LingotekSettingsTabAccountForm.php b/src/Form/LingotekSettingsTabAccountForm.php
index 2da973ca..6a3b1086 100644
--- a/src/Form/LingotekSettingsTabAccountForm.php
+++ b/src/Form/LingotekSettingsTabAccountForm.php
@@ -21,22 +21,22 @@ class LingotekSettingsTabAccountForm extends LingotekConfigFormBase {
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface
+   * @var LingotekFilterManagerInterface
    */
   protected $lingotekFilterManager;
 
   /**
    * Constructs a LingotekSettingsTabAccountForm object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The Lingotek service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The factory for configuration objects.
-   * @param \Drupal\lingotek\LingotekFilterManagerInterface $lingotek_filter_manager
+   * @param LingotekFilterManagerInterface $lingotek_filter_manager
    *   The Lingotek Filter manager.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
    */
   public function __construct(LingotekInterface $lingotek, ConfigFactoryInterface $config, LingotekFilterManagerInterface $lingotek_filter_manager, UrlGeneratorInterface $url_generator = NULL, LinkGeneratorInterface $link_generator = NULL) {
diff --git a/src/Form/LingotekSettingsTabConfigurationForm.php b/src/Form/LingotekSettingsTabConfigurationForm.php
index 9bf1402d..90f562a5 100644
--- a/src/Form/LingotekSettingsTabConfigurationForm.php
+++ b/src/Form/LingotekSettingsTabConfigurationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\config_translation\ConfigMapperInterface;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,50 +24,50 @@ class LingotekSettingsTabConfigurationForm extends LingotekConfigFormBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfig;
 
   /**
    * The Lingotek config translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $translationService;
 
   /**
    * A array of configuration mapper instances.
    *
-   * @var \Drupal\config_translation\ConfigMapperInterface[]
+   * @var ConfigMapperInterface[]
    */
   protected $mappers;
 
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new LingotekManagementForm object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config
+   * @param LingotekConfigurationServiceInterface $lingotek_config
    *   The Lingotek config service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service
+   * @param LingotekConfigTranslationServiceInterface $translation_service
    *   The Lingotek config translation service.
-   * @param \Drupal\config_translation\ConfigMapperInterface[] $mappers
+   * @param ConfigMapperInterface[] $mappers
    *   The configuration mapper manager.
    */
   public function __construct(LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, LingotekConfigurationServiceInterface $lingotek_config, LingotekConfigTranslationServiceInterface $translation_service, array $mappers) {
diff --git a/src/Form/LingotekSettingsTabContentForm.php b/src/Form/LingotekSettingsTabContentForm.php
index 6487f538..5ff2a8a9 100644
--- a/src/Form/LingotekSettingsTabContentForm.php
+++ b/src/Form/LingotekSettingsTabContentForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\lingotek\Moderation\LingotekModerationFactoryInterface;
+use Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -40,7 +43,7 @@ class LingotekSettingsTabContentForm extends LingotekConfigFormBase {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     $entity_type_definitions = \Drupal::entityTypeManager()->getDefinitions();
@@ -84,9 +87,9 @@ class LingotekSettingsTabContentForm extends LingotekConfigFormBase {
         'content' => [],
       ];
 
-      /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderationFactory */
+      /** @var LingotekModerationFactoryInterface $moderationFactory */
       $moderationFactory = \Drupal::service('lingotek.moderation_factory');
-      /** @var \Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface $moderationForm */
+      /** @var LingotekModerationSettingsFormInterface $moderationForm */
       $moderationForm = $moderationFactory->getModerationSettingsForm();
 
       $bundle_label = $entity_type_definitions[$entity_id]->getBundleLabel();
@@ -199,7 +202,7 @@ class LingotekSettingsTabContentForm extends LingotekConfigFormBase {
       $readOnly = TRUE;
     }
 
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     $form_values = $form_state->getValues();
@@ -240,9 +243,9 @@ class LingotekSettingsTabContentForm extends LingotekConfigFormBase {
             $contentSettingsData[$entity_id][$bundle_id]['profile'] = $form_values[$entity_id][$bundle_id]['profiles'];
           }
 
-          /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderationFactory */
+          /** @var LingotekModerationFactoryInterface $moderationFactory */
           $moderationFactory = \Drupal::service('lingotek.moderation_factory');
-          /** @var \Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface $moderationForm */
+          /** @var LingotekModerationSettingsFormInterface $moderationForm */
           $moderationForm = $moderationFactory->getModerationSettingsForm();
           $moderationForm->submitHandler($entity_id, $bundle_id, $bundle);
         }
@@ -295,7 +298,7 @@ class LingotekSettingsTabContentForm extends LingotekConfigFormBase {
   }
 
   protected function retrieveProfiles($entity_id, $bundle_id) {
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
     $enable_bulk_management = $lingotek_config->getPreference('contrib.paragraphs.enable_bulk_management');
 
@@ -322,7 +325,7 @@ class LingotekSettingsTabContentForm extends LingotekConfigFormBase {
   protected function retrieveFields(FormStateInterface $form_state, $entity_id, $bundle_id, $readOnly = FALSE) {
     $provideDefaults = $form_state->getTemporaryValue('provideDefaults') ?: [];
     $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_id);
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
     $content_translation_manager = \Drupal::service('content_translation.manager');
     $storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_id);
diff --git a/src/Form/LingotekSettingsTabIntegrationsForm.php b/src/Form/LingotekSettingsTabIntegrationsForm.php
index 545510e5..1153d16a 100644
--- a/src/Form/LingotekSettingsTabIntegrationsForm.php
+++ b/src/Form/LingotekSettingsTabIntegrationsForm.php
@@ -20,38 +20,38 @@ class LingotekSettingsTabIntegrationsForm extends LingotekConfigFormBase {
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The router builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;
 
   /**
    * The render cache bin.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $renderCache;
 
   /**
    * Constructs a \Drupal\lingotek\Form\LingotekConfigFormBase object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param LingotekInterface $lingotek
+   * @param ConfigFactoryInterface $config
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $render_cache
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param CacheBackendInterface $render_cache
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
    */
   public function __construct(LingotekInterface $lingotek, ConfigFactoryInterface $config, ModuleHandlerInterface $module_handler, RouteBuilderInterface $router_builder, CacheBackendInterface $render_cache, UrlGeneratorInterface $url_generator = NULL, LinkGeneratorInterface $link_generator = NULL) {
diff --git a/src/Form/LingotekSettingsTabPreferencesForm.php b/src/Form/LingotekSettingsTabPreferencesForm.php
index 57352542..b6ca8aa6 100644
--- a/src/Form/LingotekSettingsTabPreferencesForm.php
+++ b/src/Form/LingotekSettingsTabPreferencesForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Form;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\Core\Menu\MenuLinkManager;
 use Drupal\block\BlockRepositoryInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
@@ -30,7 +32,7 @@ class LingotekSettingsTabPreferencesForm extends LingotekConfigFormBase {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     $this->retrieveLanguageSwitcher();
@@ -173,7 +175,7 @@ class LingotekSettingsTabPreferencesForm extends LingotekConfigFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
 
     $form_values = $form_state->getValues();
@@ -256,7 +258,7 @@ class LingotekSettingsTabPreferencesForm extends LingotekConfigFormBase {
     $updated_values = [];
     $should_reset_cache = FALSE;
 
-    /** @var \Drupal\Core\Menu\MenuLinkManager $menu_link_manager */
+    /** @var MenuLinkManager $menu_link_manager */
     $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
 
     // Only run if there's been a change to avoid clearing the cache if we don't have to
diff --git a/src/Form/LingotekSettingsTabProfilesEditForm.php b/src/Form/LingotekSettingsTabProfilesEditForm.php
index 4bee6258..c41a60c3 100644
--- a/src/Form/LingotekSettingsTabProfilesEditForm.php
+++ b/src/Form/LingotekSettingsTabProfilesEditForm.php
@@ -214,7 +214,7 @@ class LingotekSettingsTabProfilesEditForm extends LingotekConfigFormBase {
   }
 
   protected function updateCustomProfile($name, $auto_upload, $auto_download, $auto_download_worker) {
-    /** @var \Drupal\lingotek\Entity\LingotekProfile $current_profile */
+    /** @var LingotekProfile $current_profile */
     $current_profile = $this->profile;
     $current_profile->set('label', $name);
     $current_profile->setAutomaticDownload($auto_download);
diff --git a/src/Form/LingotekSettingsTabUtilitiesForm.php b/src/Form/LingotekSettingsTabUtilitiesForm.php
index 02f8fc77..cc526280 100644
--- a/src/Form/LingotekSettingsTabUtilitiesForm.php
+++ b/src/Form/LingotekSettingsTabUtilitiesForm.php
@@ -17,31 +17,31 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class LingotekSettingsTabUtilitiesForm extends LingotekConfigFormBase {
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * Constructs a \Drupal\lingotek\Form\LingotekSettingsTabUtilitiesForm object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The factory for configuration objects.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder service.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
    */
   public function __construct(LingotekInterface $lingotek, ConfigFactoryInterface $config, StateInterface $state, RouteBuilderInterface $route_builder, UrlGeneratorInterface $url_generator = NULL, LinkGeneratorInterface $link_generator = NULL) {
diff --git a/src/FormComponent/LingotekFormComponentBase.php b/src/FormComponent/LingotekFormComponentBase.php
index 84c22cb7..07e84217 100644
--- a/src/FormComponent/LingotekFormComponentBase.php
+++ b/src/FormComponent/LingotekFormComponentBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\FormComponent;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -23,28 +24,28 @@ abstract class LingotekFormComponentBase extends PluginBase implements LingotekF
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language_manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The lingotek.configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The lingotek.content_translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
@@ -58,7 +59,7 @@ abstract class LingotekFormComponentBase extends PluginBase implements LingotekF
   /**
    * An array of entity-type definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface[]
+   * @var EntityTypeInterface[]
    */
   protected $entityTypes = [];
 
@@ -71,13 +72,13 @@ abstract class LingotekFormComponentBase extends PluginBase implements LingotekF
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
    */
   public function __construct(
diff --git a/src/FormComponent/LingotekFormComponentBulkActionBase.php b/src/FormComponent/LingotekFormComponentBulkActionBase.php
index 402489a0..3adf653e 100644
--- a/src/FormComponent/LingotekFormComponentBulkActionBase.php
+++ b/src/FormComponent/LingotekFormComponentBulkActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\FormComponent;
 
+use Psr\Log\LoggerInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Routing\LocalRedirectResponse;
@@ -74,7 +75,7 @@ abstract class LingotekFormComponentBulkActionBase extends LingotekFormComponent
   /**
    * Gets the messenger.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The messenger.
    */
   public function logger() {
diff --git a/src/FormComponent/LingotekFormComponentBulkActionExecutor.php b/src/FormComponent/LingotekFormComponentBulkActionExecutor.php
index 36a1079c..0068125b 100644
--- a/src/FormComponent/LingotekFormComponentBulkActionExecutor.php
+++ b/src/FormComponent/LingotekFormComponentBulkActionExecutor.php
@@ -52,7 +52,7 @@ class LingotekFormComponentBulkActionExecutor {
   /**
    * Create and set a batch.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   Array of entities to process.
    * @param array $options
    *   Array of options.
diff --git a/src/FormComponent/LingotekFormComponentBulkActionManager.php b/src/FormComponent/LingotekFormComponentBulkActionManager.php
index a321b897..b08d8d72 100644
--- a/src/FormComponent/LingotekFormComponentBulkActionManager.php
+++ b/src/FormComponent/LingotekFormComponentBulkActionManager.php
@@ -21,9 +21,9 @@ class LingotekFormComponentBulkActionManager extends LingotekFormComponentManage
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FormComponent/LingotekFormComponentBulkActionOptionManager.php b/src/FormComponent/LingotekFormComponentBulkActionOptionManager.php
index d7fc48c4..653378d6 100644
--- a/src/FormComponent/LingotekFormComponentBulkActionOptionManager.php
+++ b/src/FormComponent/LingotekFormComponentBulkActionOptionManager.php
@@ -21,9 +21,9 @@ class LingotekFormComponentBulkActionOptionManager extends LingotekFormComponent
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FormComponent/LingotekFormComponentBundleTrait.php b/src/FormComponent/LingotekFormComponentBundleTrait.php
index c8ac46f7..e651037b 100644
--- a/src/FormComponent/LingotekFormComponentBundleTrait.php
+++ b/src/FormComponent/LingotekFormComponentBundleTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\FormComponent;
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * Helper trait to handle entity bundles.
  *
@@ -12,7 +14,7 @@ trait LingotekFormComponentBundleTrait {
   /**
    * The entity_type.bundle.info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -26,7 +28,7 @@ trait LingotekFormComponentBundleTrait {
   /**
    * Gets the entity_type.bundle.info service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @return EntityTypeBundleInfoInterface
    *   The entity_type.bundle.info service.
    */
   protected function entityTypeBundleInfo() {
@@ -69,7 +71,7 @@ trait LingotekFormComponentBundleTrait {
    * @return bool
    *   TRUE if the entity type has bundles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function hasBundles(string $entity_type_id) {
     $entity_type = $this->getEntityType($entity_type_id);
diff --git a/src/FormComponent/LingotekFormComponentFieldInterface.php b/src/FormComponent/LingotekFormComponentFieldInterface.php
index c82bde72..b4b67cf4 100644
--- a/src/FormComponent/LingotekFormComponentFieldInterface.php
+++ b/src/FormComponent/LingotekFormComponentFieldInterface.php
@@ -23,7 +23,7 @@ interface LingotekFormComponentFieldInterface extends LingotekFormComponentInter
   /**
    * Returns the data for a field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return array
    */
diff --git a/src/FormComponent/LingotekFormComponentFieldManager.php b/src/FormComponent/LingotekFormComponentFieldManager.php
index 71368dd8..45712978 100644
--- a/src/FormComponent/LingotekFormComponentFieldManager.php
+++ b/src/FormComponent/LingotekFormComponentFieldManager.php
@@ -23,9 +23,9 @@ class LingotekFormComponentFieldManager extends LingotekFormComponentManagerBase
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FormComponent/LingotekFormComponentFilterBase.php b/src/FormComponent/LingotekFormComponentFilterBase.php
index bfb8942d..d37a4e50 100644
--- a/src/FormComponent/LingotekFormComponentFilterBase.php
+++ b/src/FormComponent/LingotekFormComponentFilterBase.php
@@ -27,7 +27,7 @@ abstract class LingotekFormComponentFilterBase extends LingotekFormComponentBase
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -40,17 +40,17 @@ abstract class LingotekFormComponentFilterBase extends LingotekFormComponentBase
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, Connection $connection) {
diff --git a/src/FormComponent/LingotekFormComponentFilterInterface.php b/src/FormComponent/LingotekFormComponentFilterInterface.php
index fad57a3a..9ae42342 100644
--- a/src/FormComponent/LingotekFormComponentFilterInterface.php
+++ b/src/FormComponent/LingotekFormComponentFilterInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\FormComponent;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Database\Query\SelectInterface;
 
 /**
@@ -42,9 +43,9 @@ interface LingotekFormComponentFilterInterface extends LingotekFormComponentInte
    * Performs the filter operation.
    *
    * @param string $entity_type_id
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    * @param mixed $value
-   * @param \Drupal\Core\Database\Query\SelectInterface|null $query
+   * @param SelectInterface|null $query
    */
   public function filter(string $entity_type_id, array $entities, $value, SelectInterface &$query = NULL);
 
diff --git a/src/FormComponent/LingotekFormComponentFilterManager.php b/src/FormComponent/LingotekFormComponentFilterManager.php
index 7251f7e2..8bbde0be 100644
--- a/src/FormComponent/LingotekFormComponentFilterManager.php
+++ b/src/FormComponent/LingotekFormComponentFilterManager.php
@@ -21,9 +21,9 @@ class LingotekFormComponentFilterManager extends LingotekFormComponentManagerBas
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/FormComponent/LingotekFormComponentInterface.php b/src/FormComponent/LingotekFormComponentInterface.php
index fdc6a07e..7fd903c1 100644
--- a/src/FormComponent/LingotekFormComponentInterface.php
+++ b/src/FormComponent/LingotekFormComponentInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\FormComponent;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 
@@ -39,7 +41,7 @@ interface LingotekFormComponentInterface extends PluginInspectionInterface, Cont
    * @param string $entity_type_id
    *   The entity-type ID.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type.
    */
   public function getEntityType(string $entity_type_id);
@@ -47,7 +49,7 @@ interface LingotekFormComponentInterface extends PluginInspectionInterface, Cont
   /**
    * Gets the plugin's title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   public function getTitle();
diff --git a/src/FormComponent/LingotekFormComponentManagerBase.php b/src/FormComponent/LingotekFormComponentManagerBase.php
index 3acd4596..552f4004 100644
--- a/src/FormComponent/LingotekFormComponentManagerBase.php
+++ b/src/FormComponent/LingotekFormComponentManagerBase.php
@@ -41,7 +41,7 @@ abstract class LingotekFormComponentManagerBase extends DefaultPluginManager imp
     $form_id = $arguments['form_id'];
     $entity_type_id = $arguments['entity_type_id'];
 
-    /** @var \Drupal\lingotek\FormComponent\LingotekFormComponentInterface[] $plugins */
+    /** @var LingotekFormComponentInterface[] $plugins */
     $plugins = [];
 
     $definitions = array_filter($this->getDefinitions(), function ($definition) use ($form_id, $entity_type_id) {
@@ -69,7 +69,7 @@ abstract class LingotekFormComponentManagerBase extends DefaultPluginManager imp
 
     foreach (array_keys($definitions) as $plugin_id) {
       try {
-        /** @var \Drupal\lingotek\FormComponent\LingotekFormComponentInterface $plugin */
+        /** @var LingotekFormComponentInterface $plugin */
         $plugin = $this->createInstance($plugin_id);
 
         if ($plugin->isApplicable($arguments)) {
diff --git a/src/FormComponent/LingotekFormComponentManagerInterface.php b/src/FormComponent/LingotekFormComponentManagerInterface.php
index cf2b2d81..4ea38fea 100644
--- a/src/FormComponent/LingotekFormComponentManagerInterface.php
+++ b/src/FormComponent/LingotekFormComponentManagerInterface.php
@@ -19,7 +19,7 @@ interface LingotekFormComponentManagerInterface {
    *   - entity_type_id: The ID of the entity type the form is managing.
    *   More specific plugin managers may require different variables.
    *
-   * @return \Drupal\lingotek\FormComponent\LingotekFormComponentInterface[]
+   * @return LingotekFormComponentInterface[]
    *   The form plugins.
    */
   public function getApplicable(array $arguments = []);
diff --git a/src/Helpers/LingotekManagementFormHelperTrait.php b/src/Helpers/LingotekManagementFormHelperTrait.php
index 07165def..aca93acd 100644
--- a/src/Helpers/LingotekManagementFormHelperTrait.php
+++ b/src/Helpers/LingotekManagementFormHelperTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Helpers;
 
+use Drupal\Core\TempStore\PrivateTempStoreFactory;
 /**
  * Useful methods for management forms.
  */
@@ -10,7 +11,7 @@ trait LingotekManagementFormHelperTrait {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
diff --git a/src/LanguageLocaleMapper.php b/src/LanguageLocaleMapper.php
index 2f56a319..a3ffd8a0 100644
--- a/src/LanguageLocaleMapper.php
+++ b/src/LanguageLocaleMapper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\language\ConfigurableLanguageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 
@@ -10,14 +11,14 @@ class LanguageLocaleMapper implements LanguageLocaleMapperInterface {
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new LingotekConfigTranslationService object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -46,7 +47,7 @@ class LanguageLocaleMapper implements LanguageLocaleMapperInterface {
    * {@inheritDoc}
    */
   public function getLocaleForLangcode($langcode) {
-    /** @var \Drupal\language\ConfigurableLanguageInterface $config_language */
+    /** @var ConfigurableLanguageInterface $config_language */
     $config_language = ConfigurableLanguage::load($langcode);
     $locale = NULL;
     if ($config_language) {
diff --git a/src/LanguageLocaleMapperInterface.php b/src/LanguageLocaleMapperInterface.php
index 3bec244f..4853703d 100644
--- a/src/LanguageLocaleMapperInterface.php
+++ b/src/LanguageLocaleMapperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\language\ConfigurableLanguageInterface;
 interface LanguageLocaleMapperInterface {
 
   /**
@@ -10,7 +11,7 @@ interface LanguageLocaleMapperInterface {
    * @param string $locale
    *   The Lingotek locale.
    *
-   * @return \Drupal\language\ConfigurableLanguageInterface|null
+   * @return ConfigurableLanguageInterface|null
    *   The Drupal language created for this locale, or NULL if there is none.
    */
   public function getConfigurableLanguageForLocale($locale);
@@ -21,7 +22,7 @@ interface LanguageLocaleMapperInterface {
    * @param string $langcode
    *   The Drupal langcode.
    *
-   * @return \Drupal\language\ConfigurableLanguageInterface|null
+   * @return ConfigurableLanguageInterface|null
    *   The Lingotek locale.
    */
   public function getLocaleForLangcode($langcode);
diff --git a/src/Lingotek.php b/src/Lingotek.php
index 71aa8b8b..4ec05c99 100644
--- a/src/Lingotek.php
+++ b/src/Lingotek.php
@@ -24,28 +24,28 @@ class Lingotek implements LingotekInterface {
   protected $api;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek Filter manager.
    *
-   * @var \Drupal\lingotek\LingotekFilterManagerInterface
+   * @var LingotekFilterManagerInterface
    */
   protected $lingotekFilterManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -88,11 +88,11 @@ class Lingotek implements LingotekInterface {
   /**
    * Constructs a Lingotek object.
    *
-   * @param \Drupal\lingotek\Remote\LingotekApiInterface $api
+   * @param LingotekApiInterface $api
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    * @param LingotekFilterManagerInterface $lingotek_filter_manager
    *   The Lingotek Filter manager.
diff --git a/src/LingotekConfigTranslationService.php b/src/LingotekConfigTranslationService.php
index c6c312ac..c97f4397 100644
--- a/src/LingotekConfigTranslationService.php
+++ b/src/LingotekConfigTranslationService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\config_translation\ConfigMapperInterface;
+use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\config_translation\ConfigMapperManagerInterface;
@@ -27,59 +29,59 @@ use Drupal\lingotek\Exception\LingotekProcessedWordsLimitException;
 class LingotekConfigTranslationService implements LingotekConfigTranslationServiceInterface {
 
   /**
-   * @var \Drupal\lingotek\LingotekInterface
+   * @var LingotekInterface
    */
   protected $lingotek;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * A array of configuration mapper instances.
    *
-   * @var \Drupal\config_translation\ConfigMapperInterface[]
+   * @var ConfigMapperInterface[]
    */
   protected $mappers;
 
   /**
    * Constructs a new LingotekConfigTranslationService object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   An lingotek object.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   An entity manager object.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $mapper_manager
+   * @param ConfigMapperManagerInterface $mapper_manager
    *   The configuration mapper manager.
    */
   public function __construct(LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, ConfigMapperManagerInterface $mapper_manager) {
@@ -131,7 +133,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
    * {@inheritDoc}
    */
   public function getConfigTranslatableProperties(ConfigNamesMapper $mapper) {
-    /** @var \Drupal\Core\Config\TypedConfigManagerInterface $typed_config */
+    /** @var TypedConfigManagerInterface $typed_config */
     $typed_config = \Drupal::service('config.typed');
 
     $properties = [];
@@ -323,7 +325,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
    * {@inheritdoc}
    */
   public function getSourceData(ConfigEntityInterface $entity) {
-    /** @var \Drupal\config_translation\ConfigEntityMapper $mapper */
+    /** @var ConfigEntityMapper $mapper */
     if ($entity->getEntityTypeId() == 'field_config') {
       $id = $entity->getTargetEntityTypeId();
       $mapper = clone $this->mappers[$id . '_fields'];
@@ -751,7 +753,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
 
   /**
    * Clear the target statuses.
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    */
   protected function clearTargetStatuses(ConfigEntityInterface &$entity) {
     $profile = $this->lingotekConfiguration->getConfigEntityProfile($entity);
@@ -769,7 +771,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
    * {@inheritdoc}
    */
   public function checkTargetStatuses(ConfigEntityInterface &$entity) {
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getConfigEntityProfile($entity);
     if ($profile->id() === Lingotek::PROFILE_DISABLED || $this->getSourceStatus($entity) === Lingotek::STATUS_CANCELLED) {
       return FALSE;
@@ -1486,7 +1488,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
    */
   public function checkConfigTargetStatuses($mapper_id) {
     $mapper = $this->mappers[$mapper_id];
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getConfigProfile($mapper_id);
     if ($profile->id() === Lingotek::PROFILE_DISABLED || $this->getConfigSourceStatus($mapper) === Lingotek::STATUS_CANCELLED) {
       return FALSE;
@@ -2068,7 +2070,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
    * In case of 404, we need to know if there was an error, or it's just still
    * importing.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being imported.
    * @param string $process_id
    *   The process ID in the TMS.
@@ -2087,7 +2089,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
   /**
    * Gets the upload process id.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being imported.
    */
   protected function getUploadProcessId(ConfigEntityInterface $entity) {
@@ -2103,7 +2105,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
   /**
    * Checks the upload process id.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being imported.
    *
    * @return bool
@@ -2118,7 +2120,7 @@ class LingotekConfigTranslationService implements LingotekConfigTranslationServi
   /**
    * Clears the upload process id.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being imported.
    */
   protected function clearUploadProcessId(ConfigEntityInterface $entity) {
diff --git a/src/LingotekConfigTranslationServiceInterface.php b/src/LingotekConfigTranslationServiceInterface.php
index e2d0603a..505c2ad8 100644
--- a/src/LingotekConfigTranslationServiceInterface.php
+++ b/src/LingotekConfigTranslationServiceInterface.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\lingotek\Exception\LingotekProcessedWordsLimitException;
+use Drupal\lingotek\Exception\LingotekPaymentRequiredException;
+use Drupal\lingotek\Exception\LingotekApiException;
+use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
+use Drupal\lingotek\Exception\LingotekDocumentLockedException;
+use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
+use Drupal\lingotek\Exception\LingotekDocumentTargetAlreadyCompletedException;
 use Drupal\config_translation\ConfigNamesMapper;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\TypedData\TraversableTypedDataInterface;
@@ -14,7 +22,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the config entities that are available for Lingotek config translation.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of config entities that are enabled for Lingotek config translation.
    */
   public function getEnabledConfigTypes();
@@ -44,7 +52,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the configuration translatable properties of the given mapper.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The mapper.
    *
    * @return array
@@ -55,7 +63,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the document id in the Lingotek platform for a given entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which we want the document id.
    *
    * @return string
@@ -66,7 +74,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the document id in the Lingotek platform for a given entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which we want the document id.
    *
    * @param string $document_id
@@ -175,7 +183,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the translation source locale of a given entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which we want to get the source locale.
    *
    * @return string
@@ -186,7 +194,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Uploads a document to the Lingotek service.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being uploaded.
    * @param string $job_id
    *   (optional) The job ID that will be associated.
@@ -194,20 +202,20 @@ interface LingotekConfigTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was uploaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekApiException
    *
    * Propagated from @see ::updateDocument :
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
    */
   public function uploadDocument(ConfigEntityInterface $entity, $job_id = NULL);
 
   /**
    * Checks the source is uploaded correctly.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which status we want to check.
    *
    * @return bool
@@ -218,7 +226,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Resends a document to the translation service.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being updated.
    * @param string $job_id
    *   (optional) The job ID that will be associated.
@@ -226,51 +234,51 @@ interface LingotekConfigTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was updated successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function updateDocument(ConfigEntityInterface &$entity, $job_id = NULL);
 
   /**
    * Request a translation for a given entity in the given locale.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which target we want to add.
    * @param string $locale
    *   Lingotek translation language which we want to modify.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function addTarget(ConfigEntityInterface &$entity, $locale);
 
   /**
    * Requests translations of a document in all the enabled locales.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being requested for translations.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function requestTranslations(ConfigEntityInterface &$entity);
 
   /**
    * Checks the status of the translation in the Lingotek service.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which status we want to check.
    * @param string $locale
    *   Lingotek translation language which we want to download.
@@ -283,7 +291,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Checks the status of all the translations in the Lingotek service.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which status we want to check.
    *
    * @return bool
@@ -294,7 +302,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Downloads a document from the Lingotek service for a given locale.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity being downloaded.
    * @param string $locale
    *   Lingotek translation language which we want to download.
@@ -302,17 +310,17 @@ interface LingotekConfigTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was downloaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function downloadDocument(ConfigEntityInterface $entity, $locale);
 
   /**
    * Cancels a document from the server.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface &$entity
+   * @param ConfigEntityInterface $entity
    *   The entity which we want to cancel.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   The entity.
    */
   public function cancelDocument(ConfigEntityInterface &$entity);
@@ -320,12 +328,12 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Cancels a translation for a given entity in the given locale.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface &$entity
+   * @param ConfigEntityInterface $entity
    *   The entity which target we want to cancel.
    * @param string $locale
    *   Lingotek translation language which we want to modify.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentTargetAlreadyCompletedException
+   * @throws LingotekDocumentTargetAlreadyCompletedException
    *   If the target was already completed.
    */
   public function cancelDocumentTarget(ConfigEntityInterface &$entity, $locale);
@@ -333,7 +341,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Deletes metadata.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which we want to delete.
    *
    * @return ContentEntityInterface
@@ -344,7 +352,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the document id in the Lingotek platform for a given entity.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which we want the document id.
    *
    * @return string
@@ -355,7 +363,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the document id in the Lingotek platform for a given entity.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which we want to set the document id.
    * @param string $document_id
    *   The document id.
@@ -368,7 +376,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the source status of a given entity.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which status we want to change.
    *
    * @return int
@@ -379,7 +387,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the translation status of a given entity.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which status we want to change.
    * @param int $status
    *   Status of the translation. Use Lingotek class constants.
@@ -391,7 +399,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the translation status of a given entity translation for all locales.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which status we want to get.
    *
    * @return array
@@ -402,7 +410,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the translation status of a given entity translation for a locale.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which status we want to get.
    * @param string $locale
    *   Lingotek translation language which we want to get.
@@ -415,7 +423,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the translation status of all translations of a given entity.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which status we want to change.
    * @param string $locale
    *   Lingotek translation language which we want to get.
@@ -429,7 +437,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the translation status of all translations of a given entity.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which status we want to change.
    * @param int $status
    *   Status of the translation. Use Lingotek constants.
@@ -441,7 +449,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the translation source locale of a given entity.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which we want to get the source locale.
    *
    * @return string
@@ -455,7 +463,7 @@ interface LingotekConfigTranslationServiceInterface {
    * Only those fields that have actual translatable text, and have marked for upload will
    * be included.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The entity which we want the source data.
    *
    * @return mixed
@@ -473,14 +481,14 @@ interface LingotekConfigTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was uploaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekApiException
    *
    * Propagated from @see ::updateConfig :
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekDocumentLockedException
    */
   public function uploadConfig($mapper_id, $job_id = NULL);
 
@@ -503,12 +511,12 @@ interface LingotekConfigTranslationServiceInterface {
    * @param string $locale
    *   Lingotek translation language which we want to modify.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function addConfigTarget($mapper_id, $locale);
 
@@ -518,12 +526,12 @@ interface LingotekConfigTranslationServiceInterface {
    * @param string $mapper_id
    *   The entity which target we want to add.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function requestConfigTranslations($mapper_id);
 
@@ -562,7 +570,7 @@ interface LingotekConfigTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was downloaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function downloadConfig($mapper_id, $locale);
 
@@ -572,7 +580,7 @@ interface LingotekConfigTranslationServiceInterface {
    * @param string $mapper_id
    *   The entity being cancelled.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function cancelConfigDocument($mapper_id);
 
@@ -584,7 +592,7 @@ interface LingotekConfigTranslationServiceInterface {
    * @param string $locale
    *   Lingotek translation language which we want to modify.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function cancelConfigDocumentTarget($mapper_id, $locale);
 
@@ -607,22 +615,22 @@ interface LingotekConfigTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was updated successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekApiException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
    */
   public function updateConfig($mapper_id, $job_id = NULL);
 
   /**
    * Marks the translation status as dirty if they exist.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper_id
+   * @param ConfigNamesMapper $mapper_id
    *   The mapper which status we want to change.
    *
-   * @return \Drupal\config_translation\ConfigNamesMapper
+   * @return ConfigNamesMapper
    */
   public function markConfigTranslationsAsDirty(ConfigNamesMapper $mapper_id);
 
@@ -640,7 +648,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the job ID of a given entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which we want the document id.
    * @param $job_id
    *   The job ID being saved.
@@ -648,22 +656,22 @@ interface LingotekConfigTranslationServiceInterface {
    *   (Optional) Flag indicating if the change should be communicated to the
    *   TMS. False by default.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   Returns the entity which job ID is saved.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function setJobId(ConfigEntityInterface $entity, $job_id, $update_tms = FALSE);
 
   /**
    * Gets the job ID of a given entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity which we want the document id.
    *
    * @return string
@@ -674,7 +682,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the job ID of a given mapper.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The mapper we want to save a job id for.
    * @param $job_id
    *   The job ID being saved.
@@ -685,19 +693,19 @@ interface LingotekConfigTranslationServiceInterface {
    * @return \Drupal\Core\Entity\ContentEntityInterface
    *   Returns the mapper which job ID is saved.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function setConfigJobId(ConfigNamesMapper $mapper, $job_id, $update_tms = FALSE);
 
   /**
    * Gets the job ID of a given mapper.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The mapper we want to get the job id.
    *
    * @return string
@@ -708,7 +716,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Get the translatable properties for this schema.
    *
-   * @param \Drupal\Core\TypedData\TraversableTypedDataInterface $schema
+   * @param TraversableTypedDataInterface $schema
    *   The schema we need to extract the properties from.
    * @param string $prefix
    *   The prefix to be used for constructing the canonical name.
@@ -721,7 +729,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the timestamp for the last time the config was uploaded.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The mapper for which we want to save the timestamp.
    * @param int $timestamp
    *   The timestamp being saved.
@@ -731,7 +739,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Sets the timestamp for the last time the config was updated.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The mapper for which we want to save the timestamp.
    * @param int $timestamp
    *   The timestamp being saved.
@@ -741,7 +749,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the timestamp for the last time the config was uploaded.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The mapper for which we want to get the timestamp.
    *
    * @return int
@@ -752,7 +760,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the timestamp for the last time the config was updated.
    *
-   * @param \Drupal\config_translation\ConfigNamesMapper $mapper
+   * @param ConfigNamesMapper $mapper
    *   The mapper for which we want to get the timestamp.
    *
    * @return int
@@ -763,7 +771,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the 'initial upload' time metadata.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity for which we want the timestamp.
    *
    * @return int
@@ -774,7 +782,7 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Gets the 'updated date' time metadata.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity for which we want the timestamp.
    *
    * @return int
@@ -785,12 +793,12 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Updates the 'initial upload' time metadata to the current request time.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to which we want to save the timestamp.
    * @param int $timestamp
    *   The timestamp we want to store.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   Returns the entity for which timestamp is saved.
    */
   public function setLastUploaded(ConfigEntityInterface $entity, int $timestamp);
@@ -798,12 +806,12 @@ interface LingotekConfigTranslationServiceInterface {
   /**
    * Updates the 'updated date' time metadata to the current request time.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity to which we want to save the timestamp.
    * @param int $timestamp
    *   The timestamp we want to store.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface
+   * @return ConfigEntityInterface
    *   Returns the entity for which timestamp is saved.
    */
   public function setLastUpdated(ConfigEntityInterface $entity, int $timestamp);
diff --git a/src/LingotekConfigurationService.php b/src/LingotekConfigurationService.php
index 7b55bcea..1d528386 100644
--- a/src/LingotekConfigurationService.php
+++ b/src/LingotekConfigurationService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\config_translation\ConfigMapperManager;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -165,7 +167,7 @@ class LingotekConfigurationService implements LingotekConfigurationServiceInterf
    */
   public function getConfigProfile($plugin_id, $provide_default = TRUE) {
     $profile_id = NULL;
-    /** @var \Drupal\config_translation\ConfigMapperManager $mapper_manager */
+    /** @var ConfigMapperManager $mapper_manager */
     $mapper_manager = \Drupal::service('plugin.manager.config_translation.mapper');
     $mappers = $mapper_manager->getMappers();
     $mapper = isset($mappers[$plugin_id]) ? $mappers[$plugin_id] : NULL;
@@ -187,7 +189,7 @@ class LingotekConfigurationService implements LingotekConfigurationServiceInterf
    */
   public function getConfigEntityProfile(ConfigEntityInterface $entity, $provide_default = TRUE) {
     $entity_type_id = $entity->getEntityTypeId();
-    /** @var \Drupal\lingotek\Entity\LingotekConfigMetadata $metadata */
+    /** @var LingotekConfigMetadata $metadata */
     $metadata = LingotekConfigMetadata::loadByConfigName($entity_type_id . '.' . $entity->id());
     $profile_id = $metadata->getProfile();
     if ($profile_id === NULL) {
@@ -263,7 +265,7 @@ class LingotekConfigurationService implements LingotekConfigurationServiceInterf
    * {@inheritDoc}
    */
   public function setConfigProfile($mapper_id, $profile_id, $save = TRUE) {
-    /** @var \Drupal\config_translation\ConfigMapperManager $mapper_manager */
+    /** @var ConfigMapperManager $mapper_manager */
     $mapper_manager = \Drupal::service('plugin.manager.config_translation.mapper');
     $mappers = $mapper_manager->getMappers();
     $mapper = $mappers[$mapper_id];
@@ -372,7 +374,7 @@ class LingotekConfigurationService implements LingotekConfigurationServiceInterf
   }
 
   public function getDefaultFieldPropertiesLingotekEnabled($entity_type_id, $bundle, $field_name) {
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+    /** @var FieldDefinitionInterface[] $field_definitions */
     $field_definitions = \Drupal::service('entity_field.manager')
       ->getFieldDefinitions($entity_type_id, $bundle);
     $field_definition = $field_definitions[$field_name];
diff --git a/src/LingotekConfigurationServiceInterface.php b/src/LingotekConfigurationServiceInterface.php
index 0756ebcd..d91ca123 100644
--- a/src/LingotekConfigurationServiceInterface.php
+++ b/src/LingotekConfigurationServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\language\ConfigurableLanguageInterface;
@@ -14,7 +15,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Gets the entity types that are enabled for Lingotek content translation.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of entity types that are enabled for Lingotek content translation.
    */
   public function getEnabledEntityTypes();
@@ -117,7 +118,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Determines the default Lingotek profile for the given entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity.
    * @param bool $provide_default
    *   If TRUE, and the entity does not have a profile, will retrieve the default
@@ -131,7 +132,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Sets the default Lingotek profile for the given config entity.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   The entity.
    * @param string $profile_id
    *   The profile id.
@@ -143,13 +144,13 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Determines the default Lingotek profile for the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param bool $provide_default
    *   If TRUE, and the entity does not have a profile, will retrieve the default
    *   for this entity type and bundle. Defaults to TRUE.
    *
-   * @return \Drupal\lingotek\LingotekProfileInterface
+   * @return LingotekProfileInterface
    *   The default profile.
    */
   public function getEntityProfile(ContentEntityInterface $entity, $provide_default = TRUE);
@@ -157,7 +158,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Sets the default Lingotek profile for the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $profile_id
    *   The profile id.
@@ -268,7 +269,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Returns all the languages that are Lingotek enabled.
    *
-   * @return \Drupal\language\ConfigurableLanguageInterface[]
+   * @return ConfigurableLanguageInterface[]
    *   The languages.
    */
   public function getEnabledLanguages();
@@ -276,7 +277,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Checks if a language is enabled in the Lingotek interface.
    *
-   * @param \Drupal\language\ConfigurableLanguageInterface $language
+   * @param ConfigurableLanguageInterface $language
    *   The language to check.
    *
    * @return bool
@@ -287,7 +288,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Enables a language from the Lingotek interface.
    *
-   * @param \Drupal\language\ConfigurableLanguageInterface $language
+   * @param ConfigurableLanguageInterface $language
    *   The language to be enabled.
    */
   public function enableLanguage(ConfigurableLanguageInterface $language);
@@ -295,7 +296,7 @@ interface LingotekConfigurationServiceInterface {
   /**
    * Disables a language from the Lingotek interface.
    *
-   * @param \Drupal\language\ConfigurableLanguageInterface $language
+   * @param ConfigurableLanguageInterface $language
    *   The language to be disabled.
    */
   public function disableLanguage(ConfigurableLanguageInterface $language);
diff --git a/src/LingotekContentTranslationEntityRevisionResolver.php b/src/LingotekContentTranslationEntityRevisionResolver.php
index 28f1faeb..15246f2a 100644
--- a/src/LingotekContentTranslationEntityRevisionResolver.php
+++ b/src/LingotekContentTranslationEntityRevisionResolver.php
@@ -30,14 +30,14 @@ class LingotekContentTranslationEntityRevisionResolver implements ContainerInjec
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new LingotekContentTranslationEntityRevisionResolver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   An entity manager object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/LingotekContentTranslationEntityRevisionResolverInterface.php b/src/LingotekContentTranslationEntityRevisionResolverInterface.php
index d6676a4f..27c2f12b 100644
--- a/src/LingotekContentTranslationEntityRevisionResolverInterface.php
+++ b/src/LingotekContentTranslationEntityRevisionResolverInterface.php
@@ -10,12 +10,12 @@ use Drupal\Core\Entity\ContentEntityInterface;
 interface LingotekContentTranslationEntityRevisionResolverInterface {
 
   /**
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to extract data from.
    * @param string $mode
    *   The mode to use for resolving the revision.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity resolved source revision.
    */
   public function resolve(ContentEntityInterface $entity, string $mode);
diff --git a/src/LingotekContentTranslationHandler.php b/src/LingotekContentTranslationHandler.php
index b2b8fb7c..c9c28109 100644
--- a/src/LingotekContentTranslationHandler.php
+++ b/src/LingotekContentTranslationHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
@@ -24,14 +25,14 @@ class LingotekContentTranslationHandler implements LingotekContentTranslationHan
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -39,18 +40,18 @@ class LingotekContentTranslationHandler implements LingotekContentTranslationHan
    * The array of installed field storage definitions for the entity type, keyed
    * by field name.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface[]
+   * @var FieldStorageDefinitionInterface[]
    */
   protected $fieldStorageDefinitions;
 
   /**
    * Initializes an instance of the content translation controller.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The info array of the given entity type.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
+   * @param EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
    *   The entity last installed schema repository.
    */
   public function __construct(EntityTypeInterface $entity_type, LanguageManagerInterface $language_manager, EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository) {
diff --git a/src/LingotekContentTranslationService.php b/src/LingotekContentTranslationService.php
index 6e8b7851..00341c2f 100644
--- a/src/LingotekContentTranslationService.php
+++ b/src/LingotekContentTranslationService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\lingotek\FieldProcessor\LingotekFieldProcessorManager;
+use Drupal\lingotek\FieldProcessor\LingotekFieldProcessorInterface;
+use Drupal\lingotek\Moderation\LingotekModerationFactoryInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
@@ -41,86 +44,86 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
   /**
    * The Lingotek interface
    *
-   * @var \Drupal\lingotek\LingotekInterface
+   * @var LingotekInterface
    */
   protected $lingotek;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The content entity revision resolver from where to extract the data from.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationEntityRevisionResolverInterface
+   * @var LingotekContentTranslationEntityRevisionResolverInterface
    */
   protected $contentRevisionResolver;
 
   /**
    * Constructs a new LingotekContentTranslationService object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   An lingotek object.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   An entity manager object.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
-   * @param \Drupal\lingotek\LingotekContentTranslationEntityRevisionResolverInterface $content_revision_resolver
+   * @param LingotekContentTranslationEntityRevisionResolverInterface $content_revision_resolver
    *   The content revision resolver.
    */
   public function __construct(LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, EntityFieldManagerInterface $entity_field_manager, Connection $connection, LingotekContentTranslationEntityRevisionResolverInterface $content_revision_resolver) {
@@ -210,7 +213,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
    * Checks the time elapsed since the last upload and sets the entity
    * to error if the max time has elapsed.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    */
   protected function checkForTimeout(ContentEntityInterface &$entity) {
     // We set a max time of 1 hour for the import (in seconds)
@@ -271,7 +274,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
 
   /**
    * Clear the target statuses.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    */
   protected function clearTargetStatuses(ContentEntityInterface &$entity) {
     $profile = $this->lingotekConfiguration->getEntityProfile($entity);
@@ -293,7 +296,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
    * {@inheritdoc}
    */
   public function checkTargetStatuses(ContentEntityInterface &$entity) {
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getEntityProfile($entity);
     if ($profile->id() === Lingotek::PROFILE_DISABLED || $this->getSourceStatus($entity) === Lingotek::STATUS_CANCELLED) {
       return FALSE;
@@ -361,7 +364,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
    * {@inheritdoc}
    */
   public function checkTargetStatus(ContentEntityInterface &$entity, $langcode) {
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getEntityProfile($entity);
     if ($profile->id() === Lingotek::PROFILE_DISABLED || $this->getSourceStatus($entity) === Lingotek::STATUS_CANCELLED
         || $profile->hasDisabledTarget($langcode)) {
@@ -606,9 +609,9 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
 
     $data = [];
     foreach ($translatable_fields as $field_name => $definition) {
-      /** @var \Drupal\lingotek\FieldProcessor\LingotekFieldProcessorManager $field_processor_manager */
+      /** @var LingotekFieldProcessorManager $field_processor_manager */
       $field_processor_manager = \Drupal::service('plugin.manager.lingotek_field_processor');
-      /** @var \Drupal\lingotek\FieldProcessor\LingotekFieldProcessorInterface[] $field_processors */
+      /** @var LingotekFieldProcessorInterface[] $field_processors */
       $field_processors = $field_processor_manager->getProcessorsForField($field_definitions[$field_name], $source_entity);
       foreach ($field_processors as $field_processor) {
         $field_processor->extract($source_entity, $field_name, $field_definitions[$field_name], $data, $visited, $revision_mode);
@@ -667,7 +670,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
    * {@inheritdoc}
    */
   public function addTarget(ContentEntityInterface &$entity, $locale) {
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getEntityProfile($entity);
     $drupal_language = $this->languageLocaleMapper->getConfigurableLanguageForLocale($locale);
     if ($profile->id() === Lingotek::PROFILE_DISABLED || $this->getSourceStatus($entity) === Lingotek::STATUS_CANCELLED ||
@@ -745,7 +748,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
    * {@inheritdoc}
    */
   public function requestTranslations(ContentEntityInterface &$entity) {
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getEntityProfile($entity);
     if ($profile->id() === Lingotek::PROFILE_DISABLED || $this->getSourceStatus($entity) === Lingotek::STATUS_CANCELLED) {
       return FALSE;
@@ -1265,12 +1268,12 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
   /**
    * Loads the correct revision is loaded from the database, bypassing caches.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity we want to load a revision from.
    * @param int|null $revision
    *   The revision id. NULL if we don't know it.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The wanted revision of the entity.
    */
   protected function loadUploadedRevision(ContentEntityInterface $entity, $revision = NULL) {
@@ -1342,8 +1345,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
       // We need to load the revision that was uploaded for consistency. For that,
       // we check if we have a valid revision in the response, and if not, we
       // check the date of the uploaded document.
-
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $revision = (isset($data['_lingotek_metadata']) && isset($data['_lingotek_metadata']['_entity_revision'])) ? $data['_lingotek_metadata']['_entity_revision'] : NULL;
       $revision = $this->loadUploadedRevision($entity, $revision);
 
@@ -1360,7 +1362,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
       }
 
       // Initialize the translation on the Drupal side, if necessary.
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $translation */
+      /** @var ContentEntityInterface $translation */
       if (!$entity->hasTranslation($langcode)) {
         $entity->addTranslation($langcode, $revision->toArray());
       }
@@ -1375,9 +1377,9 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
         if ($field_definition && ($field_definition->isTranslatable() || $field_definition->getType() === 'cohesion_entity_reference_revisions' || $field_definition->getType() === 'entity_reference_revisions')
           && $this->lingotekConfiguration->isFieldLingotekEnabled($entity->getEntityTypeId(), $entity->bundle(), $field_name)) {
 
-          /** @var \Drupal\lingotek\FieldProcessor\LingotekFieldProcessorManager $field_processor_manager */
+          /** @var LingotekFieldProcessorManager $field_processor_manager */
           $field_processor_manager = \Drupal::service('plugin.manager.lingotek_field_processor');
-          /** @var \Drupal\lingotek\FieldProcessor\LingotekFieldProcessorInterface[] $field_processors */
+          /** @var LingotekFieldProcessorInterface[] $field_processors */
           $field_processors = $field_processor_manager->getProcessorsForField($field_definition, $revision);
           // For persisting, only one processor can apply for avoiding conflicts.
           if (count($field_processors) > 0) {
@@ -1417,7 +1419,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
 
       // If there is any content moderation module is enabled, we may need to
       // perform a transition in their workflow.
-      /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderation_factory */
+      /** @var LingotekModerationFactoryInterface $moderation_factory */
       $moderation_factory = \Drupal::service('lingotek.moderation_factory');
       $moderation_handler = $moderation_factory->getModerationHandler();
       $moderation_handler->performModerationTransitionIfNeeded($translation);
@@ -1453,7 +1455,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
   public function getJobId(ContentEntityInterface $entity) {
     $job_id = NULL;
     if (!empty($entity->get('lingotek_metadata')->target_id)) {
-      /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+      /** @var LingotekContentMetadata $metadata */
       $metadata = $entity->lingotek_metadata->entity;
       $job_id = $metadata->getJobId();
     }
@@ -1467,7 +1469,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
     if (!$entity->lingotek_metadata->entity) {
       $entity->lingotek_metadata->entity = LingotekContentMetadata::loadByTargetId($entity->getEntityTypeId(), $entity->id());
     }
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     $metadata = &$entity->lingotek_metadata->entity;
     $source_langcode = $entity->getUntranslated()->language()->getId();
     $source_locale = $this->languageLocaleMapper->getLocaleForLangcode($source_langcode);
@@ -1516,7 +1518,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
   /**
    * Embeds the metadata for being uploaded.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param $data
    *   The array of data.
@@ -1527,7 +1529,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
     $data['_lingotek_metadata']['_entity_revision'] = $entity->getRevisionId();
 
     if ($includeIntelligenceMetadata) {
-      /** @var \Drupal\lingotek\LingotekIntelligenceMetadataInterface $intelligenceService */
+      /** @var LingotekIntelligenceMetadataInterface $intelligenceService */
       $intelligenceService = \Drupal::service('lingotek.intelligence');
 
       if ($entity->id()) {
@@ -1543,7 +1545,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
         $author_name = '';
         $author_email = '';
         if (method_exists($entity, 'getOwner')) {
-          /** @var \Drupal\user\UserInterface $user */
+          /** @var UserInterface $user */
           $user = $entity->getOwner();
           if ($user !== NULL && $user instanceof UserInterface) {
             $author_name = $user->getDisplayName();
@@ -1618,7 +1620,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
     if (!$entity->lingotek_metadata->entity) {
       $entity->lingotek_metadata->entity = LingotekContentMetadata::loadByTargetId($entity->getEntityTypeId(), $entity->id());
     }
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     $metadata = &$entity->lingotek_metadata->entity;
     $metadata->setLastUploaded($timestamp)->save();
 
@@ -1632,7 +1634,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
     if (!$entity->lingotek_metadata->entity) {
       $entity->lingotek_metadata->entity = LingotekContentMetadata::loadByTargetId($entity->getEntityTypeId(), $entity->id());
     }
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     $metadata = &$entity->lingotek_metadata->entity;
     $metadata->setLastUpdated($timestamp)->save();
 
@@ -1646,7 +1648,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
     if (!$entity->lingotek_metadata->entity) {
       $entity->lingotek_metadata->entity = LingotekContentMetadata::loadByTargetId($entity->getEntityTypeId(), $entity->id());
     }
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     $metadata = $entity->lingotek_metadata->entity;
     return $metadata->getLastUploaded();
   }
@@ -1659,7 +1661,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
       $entity->lingotek_metadata->entity = LingotekContentMetadata::loadByTargetId($entity->getEntityTypeId(), $entity->id());
     }
 
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     $metadata = $entity->lingotek_metadata->entity;
     return $metadata->getLastUpdated();
   }
@@ -1670,7 +1672,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
    * In case of 404, we need to know if there was an error, or it's just still
    * importing.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being imported.
    * @param string $process_id
    *   The process ID in the TMS.
@@ -1689,7 +1691,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
   /**
    * Gets the upload process id.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being imported.
    */
   protected function getUploadProcessId(ContentEntityInterface $entity) {
@@ -1705,7 +1707,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
   /**
    * Checks the upload process id.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being imported.
    *
    * @return bool
@@ -1720,7 +1722,7 @@ class LingotekContentTranslationService implements LingotekContentTranslationSer
   /**
    * Clears the upload process id.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being imported.
    */
   protected function clearUploadProcessId(ContentEntityInterface $entity) {
diff --git a/src/LingotekContentTranslationServiceInterface.php b/src/LingotekContentTranslationServiceInterface.php
index 74b959a8..0a8e2595 100644
--- a/src/LingotekContentTranslationServiceInterface.php
+++ b/src/LingotekContentTranslationServiceInterface.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
+use Drupal\lingotek\Exception\LingotekProcessedWordsLimitException;
+use Drupal\lingotek\Exception\LingotekPaymentRequiredException;
+use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
+use Drupal\lingotek\Exception\LingotekDocumentLockedException;
+use Drupal\lingotek\Exception\LingotekApiException;
+use Drupal\lingotek\Exception\LingotekDocumentTargetAlreadyCompletedException;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -12,7 +19,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Checks the source is uploaded correctly.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to check.
    *
    * @return bool
@@ -23,7 +30,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Gets the source status of the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to check.
    *
    * @return int
@@ -34,29 +41,29 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Sets the translation status of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to change.
    * @param int $status
    *   Status of the translation. Use Lingotek class constants.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function setSourceStatus(ContentEntityInterface &$entity, $status);
 
   /**
    * Gets the current status of all the target translations.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to check.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function checkTargetStatuses(ContentEntityInterface &$entity);
 
   /**
    * Gets the current status of the target translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to check.
    * @param string $langcode
    *   Translation language we want to check.
@@ -64,14 +71,14 @@ interface LingotekContentTranslationServiceInterface {
    * @return bool
    *   True if the entity is uploaded succesfully.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function checkTargetStatus(ContentEntityInterface &$entity, $langcode);
 
   /**
    * Gets the translation status of a given entity translation for a locale.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to get.
    * @param string $locale
    *   Lingotek translation language which we want to get.
@@ -84,7 +91,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Gets the translation statuses of a given entity translation for all locales.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to get.
    *
    * @return array
@@ -96,7 +103,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Sets the translation status of a given entity translation for a locale.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to change.
    * @param string $langcode
    *   Language code which we want to modify.
@@ -105,36 +112,36 @@ interface LingotekContentTranslationServiceInterface {
    * @param bool $save
    *   If FALSE, the entity is not saved yet. Defaults to TRUE.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function setTargetStatus(ContentEntityInterface &$entity, $langcode, $status, $save = TRUE);
 
   /**
    * Sets the translation status of all translations of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to change.
    * @param int $status
    *   Status of the translation. Use Lingotek constants.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function setTargetStatuses(ContentEntityInterface &$entity, $status);
 
   /**
    * Marks the translation status as dirty if they exist.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which status we want to change.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    */
   public function markTranslationsAsDirty(ContentEntityInterface &$entity);
 
   /**
    * Gets the document id in the Lingotek platform for a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want the document id.
    *
    * @return string
@@ -145,12 +152,12 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Sets the Lingotek document id for a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want to set a document id.
    * @param $doc_id
    *   The document id in the Lingotek platform.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function setDocumentId(ContentEntityInterface &$entity, $doc_id);
@@ -158,7 +165,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Gets the translation source locale of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want to get the source locale.
    *
    * @return string
@@ -172,7 +179,7 @@ interface LingotekContentTranslationServiceInterface {
    * Only those fields that have actual translatable text, and have marked for upload will
    * be included.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want the source data.
    * @param array &$visited
    *   The array of already visited entities, avoiding cycles and infinite loops.
@@ -187,7 +194,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Updates the entity hash.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being checked
    * @param array $precalculated_source_data
    *   The entity source data if we have already calculated that, avoiding doing
@@ -200,7 +207,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Checks if the source entity data has changed from last time we uploaded it.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity being checked
    *
    * @return bool
@@ -211,39 +218,39 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Request a translation for a given entity in the given locale.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which target we want to add.
    * @param string $locale
    *   Lingotek translation language which we want to modify.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function addTarget(ContentEntityInterface &$entity, $locale);
 
   /**
    * Requests translations of a document in all the enabled locales.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity being requested for translations.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function requestTranslations(ContentEntityInterface &$entity);
 
   /**
    * Uploads a document to the Lingotek service.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being uploaded.
    * @param string $job_id
    *   (optional) The job ID that will be associated.
@@ -251,19 +258,19 @@ interface LingotekContentTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was uploaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekApiException
    */
   public function uploadDocument(ContentEntityInterface $entity, $job_id = NULL);
 
   /**
    * Downloads a document from the Lingotek service for a given locale.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity being downloaded.
    * @param string $locale
    *   Lingotek translation language which we want to download.
@@ -271,29 +278,29 @@ interface LingotekContentTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was downloaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function downloadDocument(ContentEntityInterface &$entity, $locale);
 
   /**
    * Downloads a document from the Lingotek service for all available locales.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity being downloaded.
    *
    * @return bool
    *   TRUE if the document was downloaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function downloadDocuments(ContentEntityInterface &$entity);
 
   /**
    * Resends a document to the translation service.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity being updated.
    * @param string $job_id
    *   (optional) The job ID that will be associated.
@@ -301,50 +308,50 @@ interface LingotekContentTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was updated successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function updateDocument(ContentEntityInterface &$entity, $job_id = NULL);
 
   /**
    * Cancels a document from the server.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want to cancel.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function cancelDocument(ContentEntityInterface &$entity);
 
   /**
    * Cancels a translation for a given entity in the given locale.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which target we want to cancel.
    * @param string $locale
    *   Lingotek translation language which we want to modify.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentTargetAlreadyCompletedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
+   * @throws LingotekDocumentTargetAlreadyCompletedException
    */
   public function cancelDocumentTarget(ContentEntityInterface &$entity, $locale);
 
   /**
    * Deletes all local metadata related to an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want to forget about.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function deleteMetadata(ContentEntityInterface &$entity);
@@ -355,7 +362,7 @@ interface LingotekContentTranslationServiceInterface {
    * @param string $document_id
    *   The document id.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity with the given document id.
    */
   public function loadByDocumentId($document_id);
@@ -371,14 +378,14 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Save the entity translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface &$entity
+   * @param ContentEntityInterface $entity
    *   The entity we want to save a translation for.
    * @param $locale
    *   The locale of the translation being saved.
    * @param $data
    *   The data being saved.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Returns the entity which translations are saved.
    */
   public function saveTargetData(ContentEntityInterface &$entity, $locale, $data);
@@ -386,7 +393,7 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Sets the job ID of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity we want to save a job id for.
    * @param string $job_id
    *   The job ID being saved.
@@ -394,22 +401,22 @@ interface LingotekContentTranslationServiceInterface {
    *   (Optional) Flag indicating if the change should be communicated to the
    *   TMS. False by default.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Returns the entity which job ID is saved.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function setJobId(ContentEntityInterface $entity, $job_id, $update_tms = FALSE);
 
   /**
    * Gets the job ID of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity we want to get the job id.
    *
    * @return string
@@ -420,12 +427,12 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Updates the 'initial upload' time metadata to the current request time.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want the document id.
    * @param int $timestamp
    *   The timestamp we want to store.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Returns the entity.
    */
   public function setLastUploaded(ContentEntityInterface $entity, int $timestamp);
@@ -433,12 +440,12 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Updates the 'updated date' time metadata to the current request time.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want the document id.
    * @param int $timestamp
    *   The timestamp we want to store.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Returns the entity.
    */
   public function setLastUpdated(ContentEntityInterface $entity, int $timestamp);
@@ -446,10 +453,10 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Gets the 'initial upload' time metadata for the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want the document id.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Returns the timestamp.
    */
   public function getLastUploaded(ContentEntityInterface $entity);
@@ -457,10 +464,10 @@ interface LingotekContentTranslationServiceInterface {
   /**
    * Gets the 'updated date' time metadata for the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity which we want the document id.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Returns the timestamp.
    */
   public function getLastUpdated(ContentEntityInterface $entity);
diff --git a/src/LingotekFilterManager.php b/src/LingotekFilterManager.php
index 4970945e..5a8f1492 100644
--- a/src/LingotekFilterManager.php
+++ b/src/LingotekFilterManager.php
@@ -14,14 +14,14 @@ class LingotekFilterManager implements LingotekFilterManagerInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new LingotekFilterManager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/LingotekFilterManagerInterface.php b/src/LingotekFilterManagerInterface.php
index 6e426431..dc47782c 100644
--- a/src/LingotekFilterManagerInterface.php
+++ b/src/LingotekFilterManagerInterface.php
@@ -55,7 +55,7 @@ interface LingotekFilterManagerInterface {
    * Given filter provider can take precedence, or the settings default will be
    * applied.
    *
-   * @param \Drupal\lingotek\LingotekFilterProviderInterface|null $profile
+   * @param LingotekFilterProviderInterface|null $profile
    *   A filter provider.
    *
    * @return string
@@ -69,7 +69,7 @@ interface LingotekFilterManagerInterface {
    * Given filter provider can take precedence, or the settings default will be
    * applied.
    *
-   * @param \Drupal\lingotek\LingotekFilterProviderInterface|null $profile
+   * @param LingotekFilterProviderInterface|null $profile
    *   A filter provider.
    *
    * @return string
diff --git a/src/LingotekIntelligenceService.php b/src/LingotekIntelligenceService.php
index 8bebdcc2..5425868a 100644
--- a/src/LingotekIntelligenceService.php
+++ b/src/LingotekIntelligenceService.php
@@ -15,21 +15,21 @@ class LingotekIntelligenceService implements LingotekIntelligenceMetadataInterfa
   /**
    * The Lingotek Intelligence configuration service.
    *
-   * @var \Drupal\lingotek\LingotekIntelligenceServiceConfig
+   * @var LingotekIntelligenceServiceConfig
    */
   protected $intelligenceConfig;
 
   /**
    * The Lingotek profile.
    *
-   * @var \Drupal\lingotek\LingotekProfileInterface|NULL
+   * @var LingotekProfileInterface|NULL
    */
   protected $profile;
 
   /**
    * Constructs a LingotekIntelligenceService object.
    *
-   * @param \Drupal\lingotek\LingotekIntelligenceServiceConfig $intelligence_config
+   * @param LingotekIntelligenceServiceConfig $intelligence_config
    *   The Lingotek Intelligence configuration service.
    */
   public function __construct(LingotekIntelligenceServiceConfig $intelligence_config) {
@@ -48,7 +48,7 @@ class LingotekIntelligenceService implements LingotekIntelligenceMetadataInterfa
   /**
    * Sets the profile.
    *
-   * @param \Drupal\lingotek\LingotekProfileInterface $profile
+   * @param LingotekProfileInterface $profile
    *   The profile.
    */
   public function setProfile($profile) {
@@ -227,7 +227,7 @@ class LingotekIntelligenceService implements LingotekIntelligenceMetadataInterfa
    * {@inheritdoc}
    */
   public function getDefaultAuthorEmail() {
-    /** @var \Drupal\lingotek\LingotekIntelligenceMetadataInterface $metadata */
+    /** @var LingotekIntelligenceMetadataInterface $metadata */
     $metadata = $this->profile;
     $value = NULL;
     if ($this->profile !== NULL && $this->profile->hasIntelligenceMetadataOverrides()) {
diff --git a/src/LingotekIntelligenceServiceConfig.php b/src/LingotekIntelligenceServiceConfig.php
index 16f6844c..7114304d 100644
--- a/src/LingotekIntelligenceServiceConfig.php
+++ b/src/LingotekIntelligenceServiceConfig.php
@@ -16,14 +16,14 @@ class LingotekIntelligenceServiceConfig implements LingotekIntelligenceMetadataI
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a LingotekIntelligenceService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/LingotekInterface.php b/src/LingotekInterface.php
index 124ccc3c..ac58ba7e 100644
--- a/src/LingotekInterface.php
+++ b/src/LingotekInterface.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\lingotek\Exception\LingotekProcessedWordsLimitException;
+use Drupal\lingotek\Exception\LingotekPaymentRequiredException;
+use Drupal\lingotek\Exception\LingotekApiException;
+use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
+use Drupal\lingotek\Exception\LingotekDocumentLockedException;
+use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
+use Drupal\lingotek\Exception\LingotekDocumentAlreadyCompletedException;
+use Drupal\lingotek\Exception\LingotekDocumentTargetAlreadyCompletedException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 
 interface LingotekInterface extends ContainerInjectionInterface {
@@ -210,7 +218,7 @@ interface LingotekInterface extends ContainerInjectionInterface {
    *   The Lingotek locale.
    * @param string $url
    *   (optional) The document url in the site if any. This allows support for in-context review.
-   * @param \Drupal\lingotek\LingotekProfileInterface $profile
+   * @param LingotekProfileInterface $profile
    *   (optional) The profile being used.
    * @param string $job_id
    *   (optional) The job ID that will be associated.
@@ -220,9 +228,9 @@ interface LingotekInterface extends ContainerInjectionInterface {
    * @return string
    *   The document ID assigned to the uploaded document.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekApiException
    */
   public function uploadDocument($title, $content, $locale, $url = NULL, LingotekProfileInterface $profile = NULL, $job_id = NULL, &$process_id = NULL);
 
@@ -238,7 +246,7 @@ interface LingotekInterface extends ContainerInjectionInterface {
    *   (optional) The document url in the site if any. This allows support for in-context review.
    * @param string $title
    *   (optional) The title of the document as it will be seen in the TMS.
-   * @param \Drupal\lingotek\LingotekProfileInterface $profile
+   * @param LingotekProfileInterface $profile
    *   (optional) The profile being used.
    * @param string $job_id
    *   (optional) The job ID that will be associated.
@@ -251,12 +259,12 @@ interface LingotekInterface extends ContainerInjectionInterface {
    *   TRUE if the document was successfully updated. FALSE if not (v5.1).
    *   New document ID if the document was successfully updated. FALSE if not (v5.2).
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function updateDocument($doc_id, $content, $url = NULL, $title = NULL, LingotekProfileInterface $profile = NULL, $job_id = NULL, $locale = NULL, &$process_id = NULL);
 
@@ -267,18 +275,18 @@ interface LingotekInterface extends ContainerInjectionInterface {
    *   The document id to translate.
    * @param string $locale
    *   The Lingotek locale to request.
-   * @param \Drupal\lingotek\LingotekProfileInterface $profile
+   * @param LingotekProfileInterface $profile
    *   The profile being used.
    *
    * @return bool
    *   TRUE if the document was successfully updated. FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function addTarget($doc_id, $locale, LingotekProfileInterface $profile = NULL);
 
@@ -316,7 +324,7 @@ interface LingotekInterface extends ContainerInjectionInterface {
    *   Returns TRUE if the document translation is completed. FALSE if it was not
    *   requested. The percentage if it's still in progress.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function getDocumentTranslationStatus($doc_id, $locale);
 
@@ -329,7 +337,7 @@ interface LingotekInterface extends ContainerInjectionInterface {
    * @return array
    *   Returns array keyed by the locale with the percentage of completion.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function getDocumentTranslationStatuses($doc_id);
 
@@ -344,7 +352,7 @@ interface LingotekInterface extends ContainerInjectionInterface {
    * @return array
    *   Returns array with the content of the document.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
+   * @throws LingotekDocumentNotFoundException
    */
   public function downloadDocument($doc_id, $locale);
 
@@ -357,8 +365,8 @@ interface LingotekInterface extends ContainerInjectionInterface {
    * @return bool
    *   TRUE if the document was successfully cancelled. FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentAlreadyCompletedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekDocumentAlreadyCompletedException
    *   If the document was already completed.
    */
   public function cancelDocument($doc_id);
@@ -374,7 +382,7 @@ interface LingotekInterface extends ContainerInjectionInterface {
    * @return bool
    *   TRUE if the document target was successfully cancelled. FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentTargetAlreadyCompletedException
+   * @throws LingotekDocumentTargetAlreadyCompletedException
    *   If the target was already completed.
    */
   public function cancelDocumentTarget($doc_id, $locale);
diff --git a/src/LingotekInterfaceTranslationService.php b/src/LingotekInterfaceTranslationService.php
index 59757bf8..dab7f8f4 100644
--- a/src/LingotekInterfaceTranslationService.php
+++ b/src/LingotekInterfaceTranslationService.php
@@ -30,68 +30,68 @@ class LingotekInterfaceTranslationService implements LingotekInterfaceTranslatio
   /**
    * The Lingotek interface
    *
-   * @var \Drupal\lingotek\LingotekInterface
+   * @var LingotekInterface
    */
   protected $lingotek;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Constructs a new LingotekContentTranslationService object.
    *
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   An lingotek object.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(LingotekInterface $lingotek, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LanguageManagerInterface $language_manager, Connection $connection, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
diff --git a/src/LingotekInterfaceTranslationServiceInterface.php b/src/LingotekInterfaceTranslationServiceInterface.php
index 75d6a53c..3d892c12 100644
--- a/src/LingotekInterfaceTranslationServiceInterface.php
+++ b/src/LingotekInterfaceTranslationServiceInterface.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\lingotek\Exception\LingotekProcessedWordsLimitException;
+use Drupal\lingotek\Exception\LingotekPaymentRequiredException;
+use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
+use Drupal\lingotek\Exception\LingotekDocumentLockedException;
+use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
+use Drupal\lingotek\Exception\LingotekApiException;
 /**
  * Service for managing Lingotek interface translations.
  */
@@ -198,12 +204,12 @@ interface LingotekInterfaceTranslationServiceInterface {
    * @param string $locale
    *   Lingotek translation language which we want to modify.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function addTarget($component, $locale);
 
@@ -213,12 +219,12 @@ interface LingotekInterfaceTranslationServiceInterface {
    * @param string $component
    *   The component being requested for translations.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function requestTranslations($component);
 
@@ -233,11 +239,11 @@ interface LingotekInterfaceTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was uploaded successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekApiException
    *
    * @see ::updateDocument
    */
@@ -267,12 +273,12 @@ interface LingotekInterfaceTranslationServiceInterface {
    * @return bool
    *   TRUE if the document was updated successfully, FALSE if not.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function updateDocument($component, $job_id = NULL);
 
@@ -383,12 +389,12 @@ interface LingotekInterfaceTranslationServiceInterface {
    * @return string
    *   Returns the component which job ID is saved.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekProcessedWordsLimitException
-   * @throws \Drupal\lingotek\Exception\LingotekPaymentRequiredException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentArchivedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentLockedException
-   * @throws \Drupal\lingotek\Exception\LingotekDocumentNotFoundException
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekProcessedWordsLimitException
+   * @throws LingotekPaymentRequiredException
+   * @throws LingotekDocumentArchivedException
+   * @throws LingotekDocumentLockedException
+   * @throws LingotekDocumentNotFoundException
+   * @throws LingotekApiException
    */
   public function setJobId($component, $job_id, $update_tms = FALSE);
 
diff --git a/src/LingotekJobManagementService.php b/src/LingotekJobManagementService.php
index c273b469..4fbf4df4 100644
--- a/src/LingotekJobManagementService.php
+++ b/src/LingotekJobManagementService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\lingotek\Entity\LingotekContentMetadata;
+use Drupal\lingotek\Entity\LingotekConfigMetadata;
 class LingotekJobManagementService {
 
   public function getAllContentJobs(array &$jobs) {
@@ -11,7 +13,7 @@ class LingotekJobManagementService {
 
     $metadatas = $this->entityTypeManager()->getStorage('lingotek_content_metadata')
       ->loadMultiple($ids);
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     foreach ($metadatas as $metadata) {
       $job_id = $metadata->getJobId();
       if (!empty($job_id)) {
@@ -35,7 +37,7 @@ class LingotekJobManagementService {
 
     $metadatas = $this->entityTypeManager()->getStorage('lingotek_config_metadata')
       ->loadMultiple($ids);
-    /** @var \Drupal\lingotek\Entity\LingotekConfigMetadata $metadata */
+    /** @var LingotekConfigMetadata $metadata */
     foreach ($metadatas as $metadata) {
       $job_id = $metadata->getJobId();
       if (!empty($job_id)) {
diff --git a/src/LingotekMultipleContentConfigurationServiceInterface.php b/src/LingotekMultipleContentConfigurationServiceInterface.php
index 1b3d253b..cc7c9f2f 100644
--- a/src/LingotekMultipleContentConfigurationServiceInterface.php
+++ b/src/LingotekMultipleContentConfigurationServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * Defines service for setting content configuration in a multiple way.
  */
@@ -10,7 +11,7 @@ interface LingotekMultipleContentConfigurationServiceInterface {
   /**
    * Sets Lingotek translatability settings of multiple content.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of entity types that are enabled for Lingotek content translation.
    */
   public function setContentTranslationSettings(array $contentData);
diff --git a/src/LingotekProfileListBuilder.php b/src/LingotekProfileListBuilder.php
index 7f48e1e0..2a6486e8 100644
--- a/src/LingotekProfileListBuilder.php
+++ b/src/LingotekProfileListBuilder.php
@@ -26,14 +26,14 @@ class LingotekProfileListBuilder extends DraggableListBuilder {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -52,13 +52,13 @@ class LingotekProfileListBuilder extends DraggableListBuilder {
   /**
    * Constructs a new LingotekProfileListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage controller class.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, LanguageManagerInterface $language_manager, ConfigFactoryInterface $config_factory) {
@@ -103,7 +103,7 @@ class LingotekProfileListBuilder extends DraggableListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\lingotek\LingotekProfileInterface $entity */
+    /** @var LingotekProfileInterface $entity */
     $row['label'] = $entity->label();
     $row['auto_upload'] = [
       '#type' => 'checkbox',
@@ -146,7 +146,7 @@ class LingotekProfileListBuilder extends DraggableListBuilder {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     // Parent submit handler takes care of the weights, but not the checkboxes.
     parent::submitForm($form, $form_state);
-    /** @var \Drupal\lingotek\LingotekProfileInterface $entity */
+    /** @var LingotekProfileInterface $entity */
     foreach ($this->entities as $entity_id => $entity) {
       if (!$entity->isLocked() && (
           $entity->hasAutomaticRequest() != $form_state->getValue(['profile', $entity_id, 'auto_request']) ||
diff --git a/src/LingotekProfileUsage.php b/src/LingotekProfileUsage.php
index 2f135c81..069bca74 100644
--- a/src/LingotekProfileUsage.php
+++ b/src/LingotekProfileUsage.php
@@ -14,41 +14,41 @@ class LingotekProfileUsage implements LingotekProfileUsageInterface {
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The configuration mapper manager.
    *
-   * @var \Drupal\config_translation\ConfigMapperManagerInterface
+   * @var ConfigMapperManagerInterface
    */
   protected $configMapperManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new LingotekProfileUsage object.
    *
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $config_mapper_manager
+   * @param ConfigMapperManagerInterface $config_mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
    */
   public function __construct(LingotekConfigurationServiceInterface $lingotek_configuration, EntityTypeManagerInterface $entity_type_manager, ConfigMapperManagerInterface $config_mapper_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/LingotekProfileUsageInterface.php b/src/LingotekProfileUsageInterface.php
index e90549f9..ac77cec8 100644
--- a/src/LingotekProfileUsageInterface.php
+++ b/src/LingotekProfileUsageInterface.php
@@ -32,7 +32,7 @@ interface LingotekProfileUsageInterface {
   /**
    * Check if a profile is used by content entities.
    *
-   * @param \Drupal\lingotek\LingotekProfileInterface $profile
+   * @param LingotekProfileInterface $profile
    *   The profile being checked.
    *
    * @return int
@@ -44,7 +44,7 @@ interface LingotekProfileUsageInterface {
   /**
    * Check if a profile is configured to be used by config entities.
    *
-   * @param \Drupal\lingotek\LingotekProfileInterface $profile
+   * @param LingotekProfileInterface $profile
    *   The profile being checked.
    *
    * @return int
@@ -56,7 +56,7 @@ interface LingotekProfileUsageInterface {
   /**
    * Check if a profile is configured to be used by content entities.
    *
-   * @param \Drupal\lingotek\LingotekProfileInterface $profile
+   * @param LingotekProfileInterface $profile
    *   The profile being checked.
    *
    * @return int
diff --git a/src/LingotekSetupTrait.php b/src/LingotekSetupTrait.php
index 7d4e7e99..21827c6d 100644
--- a/src/LingotekSetupTrait.php
+++ b/src/LingotekSetupTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 /**
  * Useful methods for checking if Lingotek is already setup.
  */
@@ -10,14 +11,14 @@ trait LingotekSetupTrait {
   /**
    * A lingotek connector object
    *
-   * @var \Drupal\lingotek\LingotekInterface
+   * @var LingotekInterface
    */
   protected $lingotek;
 
   /**
    * Verify the Lingotek Translation module has been properly initialized.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|false
+   * @return RedirectResponse|false
    *   A redirect response object, or FALSE if setup is complete.
    */
   protected function checkSetup() {
diff --git a/src/Moderation/LingotekContentModerationCheckTrait.php b/src/Moderation/LingotekContentModerationCheckTrait.php
index b1d83ba7..8b5f0886 100644
--- a/src/Moderation/LingotekContentModerationCheckTrait.php
+++ b/src/Moderation/LingotekContentModerationCheckTrait.php
@@ -14,7 +14,7 @@ trait LingotekContentModerationCheckTrait {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/Moderation/LingotekContentModerationConfigurationService.php b/src/Moderation/LingotekContentModerationConfigurationService.php
index 237f9b55..142013f9 100644
--- a/src/Moderation/LingotekContentModerationConfigurationService.php
+++ b/src/Moderation/LingotekContentModerationConfigurationService.php
@@ -17,16 +17,16 @@ class LingotekContentModerationConfigurationService implements LingotekModeratio
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new LingotekContentModerationConfigurationService object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
diff --git a/src/Moderation/LingotekContentModerationHandler.php b/src/Moderation/LingotekContentModerationHandler.php
index ec693b26..138d0c0b 100644
--- a/src/Moderation/LingotekContentModerationHandler.php
+++ b/src/Moderation/LingotekContentModerationHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Moderation;
 
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workflows\TransitionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -22,43 +24,43 @@ class LingotekContentModerationHandler implements LingotekModerationHandlerInter
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The moderation configuration.
    *
-   * @var \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface
+   * @var LingotekModerationConfigurationServiceInterface
    */
   protected $moderationConfiguration;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;
 
   /**
    * Constructs a new LingotekContentModerationHandler object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface $moderation_configuration
+   * @param LingotekModerationConfigurationServiceInterface $moderation_configuration
    *   A Lingotek moderation configuration service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container from which optional services can be requested.
    */
   public function __construct(ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, LingotekModerationConfigurationServiceInterface $moderation_configuration, EntityTypeBundleInfoInterface $entity_type_bundle_info, ContainerInterface $container) {
@@ -101,7 +103,7 @@ class LingotekContentModerationHandler implements LingotekModerationHandlerInter
         $bundles = $this->entityTypeBundleInfo->getBundleInfo($entity->getEntityTypeId());
         $workflow = NULL;
         if (isset($bundles[$entity->bundle()]['workflow'])) {
-          /** @var \Drupal\workflows\WorkflowInterface $workflow */
+          /** @var WorkflowInterface $workflow */
           $workflow = $this->entityTypeManager->getStorage('workflow')
             ->load($bundles[$entity->bundle()]['workflow']);
           if ($workflow && $workflow->getTypePlugin()->hasTransition($transition)) {
@@ -132,12 +134,12 @@ class LingotekContentModerationHandler implements LingotekModerationHandlerInter
   /**
    * Get workflow transition helper method.
    *
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
    * @param $transition_id
    *   The transition id.
    *
-   * @return \Drupal\workflows\TransitionInterface
+   * @return TransitionInterface
    *   A transition.
    *
    * @deprecated in lingotek:3.0.0 and is removed from lingotek:4.0.0.
diff --git a/src/Moderation/LingotekContentModerationSettingsForm.php b/src/Moderation/LingotekContentModerationSettingsForm.php
index ab35adb9..b453c9f1 100644
--- a/src/Moderation/LingotekContentModerationSettingsForm.php
+++ b/src/Moderation/LingotekContentModerationSettingsForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\lingotek\Moderation;
 
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workflows\StateInterface;
+use Drupal\workflows\TransitionInterface;
+use Drupal\Core\GeneratedUrl;
 use Drupal\content_moderation\ContentModerationState;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,52 +29,52 @@ class LingotekContentModerationSettingsForm implements LingotekModerationSetting
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The moderation configuration.
    *
-   * @var \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface
+   * @var LingotekModerationConfigurationServiceInterface
    */
   protected $moderationConfiguration;
 
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructs a new LingotekContentModerationSettingsForm object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface $moderation_configuration
+   * @param LingotekModerationConfigurationServiceInterface $moderation_configuration
    *   A Lingotek moderation configuration service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container from which optional services can be requested.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, LingotekModerationConfigurationServiceInterface $moderation_configuration, EntityTypeBundleInfoInterface $entity_type_bundle_info, ContainerInterface $container, UrlGeneratorInterface $url_generator) {
@@ -110,7 +114,7 @@ class LingotekContentModerationSettingsForm implements LingotekModerationSetting
    * @param string $bundle
    *   The bundle id.
    *
-   * @return \Drupal\workflows\WorkflowInterface|null
+   * @return WorkflowInterface|null
    */
   protected function getWorkflow($entity_type_id, $bundle) {
     $bundles = $this->entityTypeBundleInfo->getBundleInfo($entity_type_id);
@@ -139,10 +143,10 @@ class LingotekContentModerationSettingsForm implements LingotekModerationSetting
   /**
    * Get workflow states helper method.
    *
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
    *
-   * @return \Drupal\workflows\StateInterface[]
+   * @return StateInterface[]
    *   The states.
    *
    * @deprecated in lingotek:3.0.0 and is removed from lingotek:4.0.0.
@@ -156,10 +160,10 @@ class LingotekContentModerationSettingsForm implements LingotekModerationSetting
   /**
    * Get workflow transitions helper method.
    *
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
    *
-   * @return \Drupal\workflows\TransitionInterface[]
+   * @return TransitionInterface[]
    *   An array of transition objects.
    *
    * @deprecated in lingotek:3.0.0 and is removed from lingotek:4.0.0.
@@ -173,13 +177,13 @@ class LingotekContentModerationSettingsForm implements LingotekModerationSetting
   /**
    * Get workflow transitions for a given state helper method.
    *
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
    *
    * @param string $state
    *   State id.
    *
-   * @return \Drupal\workflows\TransitionInterface[]
+   * @return TransitionInterface[]
    *   An array of transition objects.
    *
    * @deprecated in lingotek:3.0.0 and is removed from lingotek:4.0.0.
@@ -232,7 +236,7 @@ class LingotekContentModerationSettingsForm implements LingotekModerationSetting
       $transitions = $workflow->getTypePlugin()->getTransitionsForState($this->getDefaultModerationUploadStatus($entity_type_id, $bundle));
 
       if (count($transitions) > 0) {
-        /** @var \Drupal\workflows\TransitionInterface $potential_transition */
+        /** @var TransitionInterface $potential_transition */
         foreach ($transitions as $transition_id => $potential_transition) {
           $toState = $potential_transition->to();
           if ($toState->isPublishedState()) {
@@ -301,7 +305,7 @@ class LingotekContentModerationSettingsForm implements LingotekModerationSetting
    * @param string $bundle_type_id
    *   The bundle type id.
    *
-   * @return \Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    *   An url.
    *
    * @deprecated in lingotek:3.0.0 and is removed from lingotek:4.0.0.
diff --git a/src/Moderation/LingotekModerationFactoryInterface.php b/src/Moderation/LingotekModerationFactoryInterface.php
index 6aba0828..aa21f8a9 100644
--- a/src/Moderation/LingotekModerationFactoryInterface.php
+++ b/src/Moderation/LingotekModerationFactoryInterface.php
@@ -12,7 +12,7 @@ interface LingotekModerationFactoryInterface {
   /**
    * Called when the tag collector finds a moderation configuration service.
    *
-   * @param \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface $service
+   * @param LingotekModerationConfigurationServiceInterface $service
    *   The moderation configuration service.
    * @param string $id
    *   The id of the tagged service.
@@ -24,7 +24,7 @@ interface LingotekModerationFactoryInterface {
   /**
    * Called when the tag collector finds a moderation settings form service.
    *
-   * @param \Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface $service
+   * @param LingotekModerationSettingsFormInterface $service
    *   The moderation configuration service.
    * @param string $id
    *   The id of the tagged service.
@@ -36,7 +36,7 @@ interface LingotekModerationFactoryInterface {
   /**
    * Called when the tag collector finds a moderation handler service.
    *
-   * @param \Drupal\lingotek\Moderation\LingotekModerationHandlerInterface $service
+   * @param LingotekModerationHandlerInterface $service
    *   The moderation configuration service.
    * @param string $id
    *   The id of the tagged service.
@@ -48,7 +48,7 @@ interface LingotekModerationFactoryInterface {
   /**
    * Gets the first moderation configuration service applying to a given entity.
    *
-   * @return \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface
+   * @return LingotekModerationConfigurationServiceInterface
    *   The moderation configuration service.
    */
   public function getModerationConfigurationService();
@@ -56,7 +56,7 @@ interface LingotekModerationFactoryInterface {
   /**
    * Gets the first moderation settings form service applying to a given entity.
    *
-   * @return \Drupal\lingotek\Moderation\LingotekModerationSettingsFormInterface
+   * @return LingotekModerationSettingsFormInterface
    *   The moderation settings form service.
    */
   public function getModerationSettingsForm();
@@ -64,7 +64,7 @@ interface LingotekModerationFactoryInterface {
   /**
    * Gets the first moderation handler service that applies to the given entity.
    *
-   * @return \Drupal\lingotek\Moderation\LingotekModerationHandlerInterface
+   * @return LingotekModerationHandlerInterface
    *   The moderation handler service.
    */
   public function getModerationHandler();
diff --git a/src/Moderation/LingotekModerationHandlerInterface.php b/src/Moderation/LingotekModerationHandlerInterface.php
index 2a04a3d0..5b2fa443 100644
--- a/src/Moderation/LingotekModerationHandlerInterface.php
+++ b/src/Moderation/LingotekModerationHandlerInterface.php
@@ -15,7 +15,7 @@ interface LingotekModerationHandlerInterface extends LingotekModerationServiceIn
   /**
    * Checks if we should prevent upload based on content moderation settings.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The content entity.
    *
    * @return bool
@@ -26,7 +26,7 @@ interface LingotekModerationHandlerInterface extends LingotekModerationServiceIn
   /**
    * Performs a moderation transition if needed.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    */
   public function performModerationTransitionIfNeeded(ContentEntityInterface &$entity);
@@ -34,7 +34,7 @@ interface LingotekModerationHandlerInterface extends LingotekModerationServiceIn
   /**
    * Gets the moderation state ID.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return string
@@ -45,7 +45,7 @@ interface LingotekModerationHandlerInterface extends LingotekModerationServiceIn
   /**
    * Sets the moderation state ID.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    * @param string $state
    *   The moderation state ID.
@@ -55,7 +55,7 @@ interface LingotekModerationHandlerInterface extends LingotekModerationServiceIn
   /**
    * Checks if the moderation is enabled for this entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The content entity.
    *
    * @return bool
diff --git a/src/Moderation/LingotekModerationServiceInterface.php b/src/Moderation/LingotekModerationServiceInterface.php
index f600d115..44c07b6e 100644
--- a/src/Moderation/LingotekModerationServiceInterface.php
+++ b/src/Moderation/LingotekModerationServiceInterface.php
@@ -22,7 +22,7 @@ interface LingotekModerationServiceInterface {
   /**
    * Sets the module handler for this service.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    *
    * @return $this
diff --git a/src/Moderation/LingotekNoModerationCheckTrait.php b/src/Moderation/LingotekNoModerationCheckTrait.php
index 2678f2f5..b4f14e41 100644
--- a/src/Moderation/LingotekNoModerationCheckTrait.php
+++ b/src/Moderation/LingotekNoModerationCheckTrait.php
@@ -14,7 +14,7 @@ trait LingotekNoModerationCheckTrait {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/Moderation/LingotekWorkbenchModerationCheckTrait.php b/src/Moderation/LingotekWorkbenchModerationCheckTrait.php
index 0521e8f5..0fcd84cc 100644
--- a/src/Moderation/LingotekWorkbenchModerationCheckTrait.php
+++ b/src/Moderation/LingotekWorkbenchModerationCheckTrait.php
@@ -14,7 +14,7 @@ trait LingotekWorkbenchModerationCheckTrait {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/Moderation/LingotekWorkbenchModerationConfigurationService.php b/src/Moderation/LingotekWorkbenchModerationConfigurationService.php
index 50b868df..52e346a8 100644
--- a/src/Moderation/LingotekWorkbenchModerationConfigurationService.php
+++ b/src/Moderation/LingotekWorkbenchModerationConfigurationService.php
@@ -17,16 +17,16 @@ class LingotekWorkbenchModerationConfigurationService implements LingotekModerat
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new LingotekWorkbenchModerationConfigurationService object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
diff --git a/src/Moderation/LingotekWorkbenchModerationHandler.php b/src/Moderation/LingotekWorkbenchModerationHandler.php
index 277e73e4..f3fd85c6 100644
--- a/src/Moderation/LingotekWorkbenchModerationHandler.php
+++ b/src/Moderation/LingotekWorkbenchModerationHandler.php
@@ -20,14 +20,14 @@ class LingotekWorkbenchModerationHandler implements LingotekModerationHandlerInt
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The moderation configuration.
    *
-   * @var \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface
+   * @var LingotekModerationConfigurationServiceInterface
    */
   protected $moderationConfiguration;
 
@@ -41,13 +41,13 @@ class LingotekWorkbenchModerationHandler implements LingotekModerationHandlerInt
   /**
    * Constructs a new LingotekWorkbenchModerationHandler object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface $moderation_configuration
+   * @param LingotekModerationConfigurationServiceInterface $moderation_configuration
    *   A Lingotek moderation configuration service.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container from which optional services can be requested.
    */
   public function __construct(ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, LingotekModerationConfigurationServiceInterface $moderation_configuration, ContainerInterface $container) {
diff --git a/src/Moderation/LingotekWorkbenchModerationSettingsForm.php b/src/Moderation/LingotekWorkbenchModerationSettingsForm.php
index f63ea706..47409db3 100644
--- a/src/Moderation/LingotekWorkbenchModerationSettingsForm.php
+++ b/src/Moderation/LingotekWorkbenchModerationSettingsForm.php
@@ -22,14 +22,14 @@ class LingotekWorkbenchModerationSettingsForm implements LingotekModerationSetti
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The moderation configuration.
    *
-   * @var \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface
+   * @var LingotekModerationConfigurationServiceInterface
    */
   protected $moderationConfiguration;
 
@@ -43,22 +43,22 @@ class LingotekWorkbenchModerationSettingsForm implements LingotekModerationSetti
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructs a new LingotekWorkbenchModerationSettingsForm object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\Moderation\LingotekModerationConfigurationServiceInterface $moderation_configuration
+   * @param LingotekModerationConfigurationServiceInterface $moderation_configuration
    *   A Lingotek moderation configuration service.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container from which optional services can be requested.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, LingotekModerationConfigurationServiceInterface $moderation_configuration, ContainerInterface $container, UrlGeneratorInterface $url_generator = NULL) {
diff --git a/src/Plugin/Action/CancelLingotekAction.php b/src/Plugin/Action/CancelLingotekAction.php
index 2e67386f..dce1bf15 100644
--- a/src/Plugin/Action/CancelLingotekAction.php
+++ b/src/Plugin/Action/CancelLingotekAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\node\NodeInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
 
@@ -29,7 +31,7 @@ class CancelLingotekAction extends LingotekContentEntityActionBase {
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot cancel @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -37,7 +39,7 @@ class CancelLingotekAction extends LingotekContentEntityActionBase {
       return FALSE;
     }
     try {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $result = $this->translationService->cancelDocument($entity);
     }
     catch (LingotekDocumentNotFoundException $exc) {
diff --git a/src/Plugin/Action/CancelTranslationLingotekAction.php b/src/Plugin/Action/CancelTranslationLingotekAction.php
index 78c1e35d..e05be413 100644
--- a/src/Plugin/Action/CancelTranslationLingotekAction.php
+++ b/src/Plugin/Action/CancelTranslationLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
@@ -31,7 +32,7 @@ class CancelTranslationLingotekAction extends LingotekContentEntityConfigurableA
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot cancel translation for @type %label. That @bundle_label is not enabled for Lingotek translation.',
diff --git a/src/Plugin/Action/CheckStatusAllTranslationsLingotekAction.php b/src/Plugin/Action/CheckStatusAllTranslationsLingotekAction.php
index ea8032dc..f117c418 100644
--- a/src/Plugin/Action/CheckStatusAllTranslationsLingotekAction.php
+++ b/src/Plugin/Action/CheckStatusAllTranslationsLingotekAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\node\NodeInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
 
@@ -29,7 +31,7 @@ class CheckStatusAllTranslationsLingotekAction extends LingotekContentEntityActi
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot check upload status for @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -37,7 +39,7 @@ class CheckStatusAllTranslationsLingotekAction extends LingotekContentEntityActi
       return FALSE;
     }
     try {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $result = $this->translationService->checkTargetStatuses($entity);
     }
     catch (LingotekDocumentNotFoundException $exc) {
diff --git a/src/Plugin/Action/CheckTranslationStatusLingotekAction.php b/src/Plugin/Action/CheckTranslationStatusLingotekAction.php
index d993161c..274cfc36 100644
--- a/src/Plugin/Action/CheckTranslationStatusLingotekAction.php
+++ b/src/Plugin/Action/CheckTranslationStatusLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
@@ -30,7 +31,7 @@ class CheckTranslationStatusLingotekAction extends LingotekContentEntityConfigur
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot check translation for @type %label. That @bundle_label is not enabled for Lingotek translation.',
diff --git a/src/Plugin/Action/CheckUploadToLingotekAction.php b/src/Plugin/Action/CheckUploadToLingotekAction.php
index c27a08d2..41ab97f7 100644
--- a/src/Plugin/Action/CheckUploadToLingotekAction.php
+++ b/src/Plugin/Action/CheckUploadToLingotekAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\node\NodeInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
 
@@ -28,7 +30,7 @@ class CheckUploadToLingotekAction extends LingotekContentEntityActionBase {
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot check upload for @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -36,7 +38,7 @@ class CheckUploadToLingotekAction extends LingotekContentEntityActionBase {
       return FALSE;
     }
     try {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       if (!$this->translationService->checkSourceStatus($entity)) {
         $this->messenger()->addStatus($this->t('The import for @entity_type %label is still pending.', [
           '@entity_type' => $entity->getEntityTypeId(),
diff --git a/src/Plugin/Action/DeleteAllTranslationsAction.php b/src/Plugin/Action/DeleteAllTranslationsAction.php
index 37c803cb..7dd18eb9 100644
--- a/src/Plugin/Action/DeleteAllTranslationsAction.php
+++ b/src/Plugin/Action/DeleteAllTranslationsAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * Assigns ownership of a node to a user.
  *
@@ -25,7 +26,7 @@ class DeleteAllTranslationsAction extends LingotekContentEntityActionBase {
       $source_language = $entity->getUntranslated()->language();
       foreach ($languages as $langcode => $language) {
         if ($source_language->getId() !== $langcode && $entity->hasTranslation($langcode)) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entityInfo[$entity->id()][$langcode] = $langcode;
         }
       }
diff --git a/src/Plugin/Action/DeleteTranslationLingotekAction.php b/src/Plugin/Action/DeleteTranslationLingotekAction.php
index ac4f0d41..eb5566ad 100644
--- a/src/Plugin/Action/DeleteTranslationLingotekAction.php
+++ b/src/Plugin/Action/DeleteTranslationLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * Delete Lingotek translation of a content entity for one language.
  *
@@ -25,7 +26,7 @@ class DeleteTranslationLingotekAction extends LingotekContentEntityConfigurableA
     foreach ($entities as $entity) {
       $source_language = $entity->getUntranslated()->language();
       if ($source_language->getId() !== $langcode && $entity->hasTranslation($langcode)) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         $entityInfo[$entity->id()][$langcode] = $langcode;
       }
     }
diff --git a/src/Plugin/Action/Derivative/ContentEntityLingotekActionDeriver.php b/src/Plugin/Action/Derivative/ContentEntityLingotekActionDeriver.php
index baed5510..5e9862d6 100644
--- a/src/Plugin/Action/Derivative/ContentEntityLingotekActionDeriver.php
+++ b/src/Plugin/Action/Derivative/ContentEntityLingotekActionDeriver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action\Derivative;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Action\Plugin\Action\Derivative\EntityActionDeriverBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -15,7 +16,7 @@ class ContentEntityLingotekActionDeriver extends EntityActionDeriverBase {
    */
   protected function isApplicable(EntityTypeInterface $entity_type) {
     return TRUE;
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $drupalConfiguration */
+    /** @var LingotekConfigurationServiceInterface $drupalConfiguration */
     $drupalConfiguration = \Drupal::service('lingotek.configuration');
 
     return $drupalConfiguration->isEnabled($entity_type->id());
diff --git a/src/Plugin/Action/DisassociateFromLingotekAction.php b/src/Plugin/Action/DisassociateFromLingotekAction.php
index abfffba5..97173b9a 100644
--- a/src/Plugin/Action/DisassociateFromLingotekAction.php
+++ b/src/Plugin/Action/DisassociateFromLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\node\NodeInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 
 /**
@@ -24,7 +25,7 @@ class DisassociateFromLingotekAction extends LingotekContentEntityActionBase {
   public function execute($entity = NULL) {
     $result = FALSE;
     try {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $result = $this->translationService->cancelDocument($entity);
     }
     catch (LingotekApiException $exception) {
diff --git a/src/Plugin/Action/DownloadAllTranslationsFromLingotekAction.php b/src/Plugin/Action/DownloadAllTranslationsFromLingotekAction.php
index f2b1c08c..f0cd7532 100644
--- a/src/Plugin/Action/DownloadAllTranslationsFromLingotekAction.php
+++ b/src/Plugin/Action/DownloadAllTranslationsFromLingotekAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\node\NodeInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekContentEntityStorageException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
@@ -30,7 +32,7 @@ class DownloadAllTranslationsFromLingotekAction extends LingotekContentEntityAct
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot download @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -38,7 +40,7 @@ class DownloadAllTranslationsFromLingotekAction extends LingotekContentEntityAct
       return FALSE;
     }
     try {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $result = $this->translationService->downloadDocuments($entity);
     }
     catch (LingotekDocumentNotFoundException $exc) {
diff --git a/src/Plugin/Action/DownloadTranslationLingotekAction.php b/src/Plugin/Action/DownloadTranslationLingotekAction.php
index c8e47b05..58647022 100644
--- a/src/Plugin/Action/DownloadTranslationLingotekAction.php
+++ b/src/Plugin/Action/DownloadTranslationLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
@@ -31,7 +32,7 @@ class DownloadTranslationLingotekAction extends LingotekContentEntityConfigurabl
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot download @type %label. That @bundle_label is not enabled for Lingotek translation.',
diff --git a/src/Plugin/Action/LingotekContentEntityActionBase.php b/src/Plugin/Action/LingotekContentEntityActionBase.php
index def96b40..51f1ee81 100644
--- a/src/Plugin/Action/LingotekContentEntityActionBase.php
+++ b/src/Plugin/Action/LingotekContentEntityActionBase.php
@@ -14,7 +14,7 @@ abstract class LingotekContentEntityActionBase extends EntityActionBase {
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
@@ -27,9 +27,9 @@ abstract class LingotekContentEntityActionBase extends EntityActionBase {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LingotekContentTranslationServiceInterface $translation_service) {
diff --git a/src/Plugin/Action/LingotekContentEntityConfigurableActionBase.php b/src/Plugin/Action/LingotekContentEntityConfigurableActionBase.php
index 9fa0b816..0f75052c 100644
--- a/src/Plugin/Action/LingotekContentEntityConfigurableActionBase.php
+++ b/src/Plugin/Action/LingotekContentEntityConfigurableActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ConfigurableActionBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,21 +17,21 @@ abstract class LingotekContentEntityConfigurableActionBase extends ConfigurableA
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;
 
@@ -43,11 +44,11 @@ abstract class LingotekContentEntityConfigurableActionBase extends ConfigurableA
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekContentTranslationServiceInterface $translation_service) {
@@ -73,7 +74,7 @@ abstract class LingotekContentEntityConfigurableActionBase extends ConfigurableA
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
     return TRUE;
-    /** @var \Drupal\node\NodeInterface $object */
+    /** @var NodeInterface $object */
     $result = $object->access('update', $account, TRUE)
       ->andIf($object->getOwner()->access('edit', $account, TRUE));
 
diff --git a/src/Plugin/Action/RequestAllTranslationsLingotekAction.php b/src/Plugin/Action/RequestAllTranslationsLingotekAction.php
index c63aaaea..c12bc697 100644
--- a/src/Plugin/Action/RequestAllTranslationsLingotekAction.php
+++ b/src/Plugin/Action/RequestAllTranslationsLingotekAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\node\NodeInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
 use Drupal\lingotek\Exception\LingotekDocumentLockedException;
@@ -34,7 +36,7 @@ class RequestAllTranslationsLingotekAction extends LingotekContentEntityActionBa
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot request @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -43,7 +45,7 @@ class RequestAllTranslationsLingotekAction extends LingotekContentEntityActionBa
     }
 
     try {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $result = $this->translationService->requestTranslations($entity);
     }
     catch (LingotekPaymentRequiredException $exception) {
diff --git a/src/Plugin/Action/RequestTranslationLingotekAction.php b/src/Plugin/Action/RequestTranslationLingotekAction.php
index 66df19ff..4d83e55f 100644
--- a/src/Plugin/Action/RequestTranslationLingotekAction.php
+++ b/src/Plugin/Action/RequestTranslationLingotekAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
@@ -35,7 +36,7 @@ class RequestTranslationLingotekAction extends LingotekContentEntityConfigurable
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot request @type %label. That @bundle_label is not enabled for Lingotek translation.',
diff --git a/src/Plugin/Action/Subscriber/LingotekActionsManagementSubscriber.php b/src/Plugin/Action/Subscriber/LingotekActionsManagementSubscriber.php
index 6e8c79a5..5017dab9 100644
--- a/src/Plugin/Action/Subscriber/LingotekActionsManagementSubscriber.php
+++ b/src/Plugin/Action/Subscriber/LingotekActionsManagementSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\Action\Subscriber;
 
+use Drupal\Component\Plugin\Definition\PluginDefinitionInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Action\ActionManager;
 use Drupal\Core\Config\ConfigCrudEvent;
@@ -16,32 +17,32 @@ class LingotekActionsManagementSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The action manager.
    *
-   * @var \Drupal\Core\Action\ActionManager
+   * @var ActionManager
    */
   protected $actionManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * Constructs a new LingotekActionsManagementSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Action\ActionManager $action_manager
+   * @param ActionManager $action_manager
    *   The action manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ActionManager $action_manager, LingotekConfigurationServiceInterface $lingotek_configuration) {
@@ -62,7 +63,7 @@ class LingotekActionsManagementSubscriber implements EventSubscriberInterface {
   /**
    * Creates and deletes the actions associated with the enabled entities.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function onConfigSave(ConfigCrudEvent $event) {
@@ -95,7 +96,7 @@ class LingotekActionsManagementSubscriber implements EventSubscriberInterface {
       foreach ($entity_types as $entity_type_id => $entity_type) {
         foreach ($actions as $action) {
           $pluginId = $action . ':' . $entity_type_id;
-          /** @var \Drupal\Component\Plugin\Definition\PluginDefinitionInterface $plugin */
+          /** @var PluginDefinitionInterface $plugin */
           $plugin = $this->actionManager->getDefinition($pluginId);
           $action_id = $entity_type_id . '_' . str_replace('entity:', '', $action);
           $existingAction = $this->entityTypeManager->getStorage('action')
@@ -118,7 +119,7 @@ class LingotekActionsManagementSubscriber implements EventSubscriberInterface {
         foreach ($lang_actions as $action) {
           foreach ($languages as $langcode => $language) {
             $pluginId = $action . ':' . $entity_type_id;
-            /** @var \Drupal\Component\Plugin\Definition\PluginDefinitionInterface $plugin */
+            /** @var PluginDefinitionInterface $plugin */
             $plugin = $this->actionManager->getDefinition($pluginId, FALSE);
             $action_id = $entity_type_id . '_' . $langcode . '_' . str_replace('entity:', '', $action);
             $existingAction = $this->entityTypeManager->getStorage('action')
@@ -152,7 +153,7 @@ class LingotekActionsManagementSubscriber implements EventSubscriberInterface {
       foreach ($entity_types as $entity_type_id => $entity_type) {
         foreach ($lang_actions as $action) {
           $pluginId = $action . ':' . $entity_type_id;
-          /** @var \Drupal\Component\Plugin\Definition\PluginDefinitionInterface $plugin */
+          /** @var PluginDefinitionInterface $plugin */
           $plugin = $this->actionManager->getDefinition($pluginId, FALSE);
           $action_id = $entity_type_id . '_' . $langcode . '_' . str_replace('entity:', '', $action);
           $existingAction = $this->entityTypeManager->getStorage('action')
diff --git a/src/Plugin/Action/UploadToLingotekAction.php b/src/Plugin/Action/UploadToLingotekAction.php
index 96b3e542..95c3a533 100644
--- a/src/Plugin/Action/UploadToLingotekAction.php
+++ b/src/Plugin/Action/UploadToLingotekAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\Action;
 
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
+use Drupal\node\NodeInterface;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentArchivedException;
 use Drupal\lingotek\Exception\LingotekDocumentLockedException;
@@ -34,7 +36,7 @@ class UploadToLingotekAction extends LingotekContentEntityActionBase {
         ['@type' => $bundleInfos[$entity->bundle()]['label'], '%label' => $entity->label(), '@bundle_label' => $entity->getEntityType()->getBundleLabel()]));
       return FALSE;
     }
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration */
+    /** @var LingotekConfigurationServiceInterface $lingotek_configuration */
     $lingotek_configuration = \Drupal::service('lingotek.configuration');
     if (!$lingotek_configuration->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
       $this->messenger()->addWarning(t('Cannot upload @type %label. That @bundle_label is not enabled for Lingotek translation.',
@@ -44,7 +46,7 @@ class UploadToLingotekAction extends LingotekContentEntityActionBase {
 
     $alreadyUploaded = $this->translationService->getDocumentId($entity);
     try {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       $result = $this->translationService->uploadDocument($entity);
     }
     catch (LingotekPaymentRequiredException $exception) {
diff --git a/src/Plugin/Derivative/ContentTranslationLocalTasks.php b/src/Plugin/Derivative/ContentTranslationLocalTasks.php
index 20614973..9b0290fc 100644
--- a/src/Plugin/Derivative/ContentTranslationLocalTasks.php
+++ b/src/Plugin/Derivative/ContentTranslationLocalTasks.php
@@ -25,7 +25,7 @@ class ContentTranslationLocalTasks extends DeriverBase implements ContainerDeriv
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -34,7 +34,7 @@ class ContentTranslationLocalTasks extends DeriverBase implements ContainerDeriv
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct($base_plugin_id, LingotekConfigurationServiceInterface $lingotek_configuration) {
diff --git a/src/Plugin/Derivative/ContentTranslationMenuLinks.php b/src/Plugin/Derivative/ContentTranslationMenuLinks.php
index 0136110d..f9eeec6f 100644
--- a/src/Plugin/Derivative/ContentTranslationMenuLinks.php
+++ b/src/Plugin/Derivative/ContentTranslationMenuLinks.php
@@ -25,7 +25,7 @@ class ContentTranslationMenuLinks extends DeriverBase implements ContainerDerive
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -34,7 +34,7 @@ class ContentTranslationMenuLinks extends DeriverBase implements ContainerDerive
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct($base_plugin_id, LingotekConfigurationServiceInterface $lingotek_configuration) {
diff --git a/src/Plugin/Field/LingotekContentMetadataFieldItemList.php b/src/Plugin/Field/LingotekContentMetadataFieldItemList.php
index 60b38455..8a7897ea 100644
--- a/src/Plugin/Field/LingotekContentMetadataFieldItemList.php
+++ b/src/Plugin/Field/LingotekContentMetadataFieldItemList.php
@@ -88,7 +88,7 @@ class LingotekContentMetadataFieldItemList extends EntityReferenceFieldItemList
    * {@inheritDoc}
    */
   public function preSave() {
-    /** @var \Drupal\lingotek\Entity\LingotekContentMetadata $metadata */
+    /** @var LingotekContentMetadata $metadata */
     $metadata = $this->getContentMetadata();
     if ($metadata && !$metadata->getContentEntityId()) {
       $metadata->setEntity($this->getEntity());
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php
index da476e58..776b9ab6 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekBlockFieldProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -29,49 +30,49 @@ class LingotekBlockFieldProcessor extends PluginBase implements LingotekFieldPro
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -84,19 +85,19 @@ class LingotekBlockFieldProcessor extends PluginBase implements LingotekFieldPro
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $repository
+   * @param EntityRepositoryInterface $repository
    *   The entity repository.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $repository, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, TypedConfigManagerInterface $typed_config, LoggerInterface $logger) {
@@ -172,7 +173,7 @@ class LingotekBlockFieldProcessor extends PluginBase implements LingotekFieldPro
   public function store(ContentEntityInterface &$translation, string $langcode, ContentEntityInterface &$revision, string $field_name, FieldDefinitionInterface $field_definition, array &$field_data) {
     $translation->set($field_name, NULL);
     foreach ($field_data as $delta => $field_item) {
-      /** @var \Drupal\Core\Block\BlockPluginInterface $block */
+      /** @var BlockPluginInterface $block */
       $block = $revision->get($field_name)->get($delta)->getBlock();
       if ($block !== NULL) {
         $entityData = NULL;
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php
index a1882345..3b6a89b5 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekCohesionEntityReferenceRevisionsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -38,7 +39,7 @@ class LingotekCohesionEntityReferenceRevisionsProcessor extends LingotekEntityRe
       $embedded_entity_id = $revision->get($field_name)->get($index)
         ->get('target_id')
         ->getValue();
-      /** @var \Drupal\Core\Entity\RevisionableInterface $embedded_entity */
+      /** @var RevisionableInterface $embedded_entity */
       $embedded_entity = $this->entityTypeManager->getStorage($target_entity_type_id)
         ->load($embedded_entity_id);
       if ($embedded_entity !== NULL) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php
index 3a3104f0..f52bac32 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekCohesionLayoutProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
 use Drupal\cohesion\LayoutCanvas\ElementModel;
 use Drupal\cohesion\LayoutCanvas\LayoutCanvas;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -29,42 +30,42 @@ class LingotekCohesionLayoutProcessor extends PluginBase implements LingotekFiel
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The key value store to use.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @var KeyValueStoreInterface
    */
   protected $keyValueStore;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -77,17 +78,17 @@ class LingotekCohesionLayoutProcessor extends PluginBase implements LingotekFiel
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_factory
    *   The key-value store factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, KeyValueFactoryInterface $key_value_factory, LoggerInterface $logger) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php
index a3689e0c..630cf2ef 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekDefaultProcessor.php
@@ -23,7 +23,7 @@ class LingotekDefaultProcessor extends PluginBase implements LingotekFieldProces
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -36,7 +36,7 @@ class LingotekDefaultProcessor extends PluginBase implements LingotekFieldProces
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LingotekConfigurationServiceInterface $lingotek_configuration) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php
index 47548de7..28fd24fd 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceProcessor.php
@@ -26,28 +26,28 @@ class LingotekEntityReferenceProcessor extends PluginBase implements LingotekFie
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -60,13 +60,13 @@ class LingotekEntityReferenceProcessor extends PluginBase implements LingotekFie
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php
index 32bad6ff..edb45394 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekEntityReferenceRevisionsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -26,35 +27,35 @@ class LingotekEntityReferenceRevisionsProcessor extends PluginBase implements Li
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -67,15 +68,15 @@ class LingotekEntityReferenceRevisionsProcessor extends PluginBase implements Li
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, ModuleHandlerInterface $module_handler) {
@@ -148,7 +149,7 @@ class LingotekEntityReferenceRevisionsProcessor extends PluginBase implements Li
       $embedded_entity_id = $revision->get($field_name)->get($index)
         ->get('target_id')
         ->getValue();
-      /** @var \Drupal\Core\Entity\RevisionableInterface $embedded_entity */
+      /** @var RevisionableInterface $embedded_entity */
       $embedded_entity = $this->entityTypeManager->getStorage($target_entity_type_id)
         ->load($embedded_entity_id);
       if ($embedded_entity !== NULL) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php
index ead10b24..0c04e3c5 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderATProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFieldProcessor;
 
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ -31,63 +33,63 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -100,23 +102,23 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $repository
+   * @param EntityRepositoryInterface $repository
    *   The entity repository.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $repository, BlockManagerInterface $block_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, TypedConfigManagerInterface $typed_config, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
@@ -170,9 +172,9 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
       foreach ($entity->get($field_name) as $field_item) {
         $sectionObject = $field_item->getValue()['section'];
         $components = $sectionObject->getComponents();
-        /** @var \Drupal\layout_builder\SectionComponent $component */
+        /** @var SectionComponent $component */
         foreach ($components as $componentUuid => $component) {
-          /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+          /** @var BlockPluginInterface $block_instance */
           // TODO: Change this to getConfiguration() when is safe to do so.
           // See https://www.drupal.org/project/drupal/issues/3180555.
           $block_instance = $this->blockManager->createInstance($component->getPluginId(), $component->get('configuration'));
@@ -236,10 +238,10 @@ class LingotekLayoutBuilderATProcessor extends PluginBase implements LingotekFie
       }
     }
     foreach ($sourceSections as $delta => &$field_item) {
-      /** @var \Drupal\layout_builder\SectionComponent $sectionObject */
+      /** @var SectionComponent $sectionObject */
       $sectionObject = clone $field_item->section;
       $components = $sectionObject->getComponents();
-      /** @var \Drupal\layout_builder\SectionComponent $component */
+      /** @var SectionComponent $component */
       foreach ($components as $componentUuid => &$component) {
         $config = $component->get('configuration');
         if (isset($field_data['components'][$componentUuid])) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php
index e60e6598..315626b1 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekLayoutBuilderSTProcessor.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFieldProcessor;
 
+use Drupal\layout_builder\Section;
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ -32,63 +35,63 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The Lingotek configuration translation service.
    *
-   * @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface
+   * @var LingotekConfigTranslationServiceInterface
    */
   protected $lingotekConfigTranslation;
 
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $lingotekContentTranslation;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -101,23 +104,23 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $repository
+   * @param EntityRepositoryInterface $repository
    *   The entity repository.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LingotekConfigTranslationServiceInterface $lingotek_config_translation
+   * @param LingotekConfigTranslationServiceInterface $lingotek_config_translation
    *   The Lingotek config translation service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $lingotek_content_translation
+   * @param LingotekContentTranslationServiceInterface $lingotek_content_translation
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $repository, BlockManagerInterface $block_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekConfigTranslationServiceInterface $lingotek_config_translation, LingotekContentTranslationServiceInterface $lingotek_content_translation, TypedConfigManagerInterface $typed_config, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
@@ -171,13 +174,13 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
       $data[$field_name] = ['components' => []];
       $layoutField = $entity->get(OverridesSectionStorage::FIELD_NAME);
       $layout = $layoutField->getValue();
-      /** @var \Drupal\layout_builder\Section $sectionObject */
+      /** @var Section $sectionObject */
       foreach ($layout as $sectionIndex => $section) {
         $sectionObject = $section['section'];
         $components = $sectionObject->getComponents();
-        /** @var \Drupal\layout_builder\SectionComponent $component */
+        /** @var SectionComponent $component */
         foreach ($components as $componentUuid => $component) {
-          /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+          /** @var BlockPluginInterface $block_instance */
           // TODO: Change this to getConfiguration() when is safe to do so.
           // See https://www.drupal.org/project/drupal/issues/3180555.
           $block_instance = $this->blockManager->createInstance($component->getPluginId(), $component->get('configuration'));
@@ -223,9 +226,9 @@ class LingotekLayoutBuilderSTProcessor extends PluginBase implements LingotekFie
     $layout = $layoutField->getValue();
 
     foreach ($field_data['components'] as $componentUuid => $componentData) {
-      /** @var \Drupal\layout_builder\SectionComponent $originalComponent */
+      /** @var SectionComponent $originalComponent */
       $originalComponent = NULL;
-      /** @var \Drupal\layout_builder\Section $section */
+      /** @var Section $section */
       foreach ($layout as $sectionInfo) {
         $sectionComponents = $sectionInfo['section']->getComponents();
         if (isset($sectionComponents[$componentUuid])) {
diff --git a/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php b/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php
index fab58ac2..92546c3c 100644
--- a/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php
+++ b/src/Plugin/LingotekFieldProcessor/LingotekPathProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFieldProcessor;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\path_alias\PathAliasInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -25,21 +27,21 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -52,11 +54,11 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
@@ -93,9 +95,9 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
   public function extract(ContentEntityInterface &$entity, string $field_name, FieldDefinitionInterface $field_definition, array &$data, array &$visited = [], string $revision_mode = LingotekContentTranslationEntityRevisionResolver::RESOLVE_LATEST_TRANSLATION_AFFECTED) {
     if ($entity->id()) {
       $source = '/' . $entity->toUrl()->getInternalPath();
-      /** @var \Drupal\Core\Entity\EntityStorageInterface $aliasStorage */
+      /** @var EntityStorageInterface $aliasStorage */
       $alias_storage = $this->entityTypeManager->getStorage('path_alias');
-      /** @var \Drupal\path_alias\PathAliasInterface[] $paths */
+      /** @var PathAliasInterface[] $paths */
       $paths = $alias_storage->loadByProperties([
         'path' => $source,
         'langcode' => $entity->language()->getId(),
@@ -121,9 +123,9 @@ class LingotekPathProcessor extends PluginBase implements LingotekFieldProcessor
   public function store(ContentEntityInterface &$translation, string $langcode, ContentEntityInterface &$revision, string $field_name, FieldDefinitionInterface $field_definition, array &$field_data) {
     $stored = FALSE;
     $source = '/' . $revision->toUrl()->getInternalPath();
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $aliasStorage */
+    /** @var EntityStorageInterface $aliasStorage */
     $alias_storage = $this->entityTypeManager->getStorage('path_alias');
-    /** @var \Drupal\path_alias\PathAliasInterface[] $original_paths */
+    /** @var PathAliasInterface[] $original_paths */
     $original_paths = $alias_storage->loadByProperties(['path' => $source, 'langcode' => $revision->getUntranslated()->language()->getId()]);
     $original_path = NULL;
     $alias = $field_data[0]['alias'];
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/AssignJobId.php b/src/Plugin/LingotekFormComponent/BulkAction/AssignJobId.php
index 4004f75c..84c20f41 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/AssignJobId.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/AssignJobId.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\BulkAction;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -38,21 +39,21 @@ class AssignJobId extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -65,21 +66,21 @@ class AssignJobId extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ -112,7 +113,7 @@ class AssignJobId extends LingotekFormComponentBulkActionBase {
   public function execute(array $entities, array $options, LingotekFormComponentBulkActionExecutor $executor) {
     $entityInfo = [];
     foreach ($entities as $entity) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $language = $entity->getUntranslated()->language();
       $entityInfo[$entity->getEntityTypeId()][$entity->id()] = [$language->getId() => $language->getId()];
     }
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/AssignProfile.php b/src/Plugin/LingotekFormComponent/BulkAction/AssignProfile.php
index ee6c640d..2583005d 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/AssignProfile.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/AssignProfile.php
@@ -40,14 +40,14 @@ class AssignProfile extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
@@ -60,17 +60,17 @@ class AssignProfile extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/Cancel.php b/src/Plugin/LingotekFormComponent/BulkAction/Cancel.php
index 3d5fdef8..ee85e06b 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/Cancel.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/Cancel.php
@@ -37,7 +37,7 @@ class Cancel extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -50,15 +50,15 @@ class Cancel extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/CancelTranslation.php b/src/Plugin/LingotekFormComponent/BulkAction/CancelTranslation.php
index 74354fac..a54da26a 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/CancelTranslation.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/CancelTranslation.php
@@ -41,14 +41,14 @@ class CancelTranslation extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
@@ -61,17 +61,17 @@ class CancelTranslation extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslation.php b/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslation.php
index bbcf4270..6a9fb2ef 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslation.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslation.php
@@ -39,7 +39,7 @@ class CheckTranslation extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -52,15 +52,15 @@ class CheckTranslation extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslations.php b/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslations.php
index 73bb903a..d03aa324 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslations.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/CheckTranslations.php
@@ -37,7 +37,7 @@ class CheckTranslations extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -50,15 +50,15 @@ class CheckTranslations extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/CheckUpload.php b/src/Plugin/LingotekFormComponent/BulkAction/CheckUpload.php
index 78590081..ee86f00d 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/CheckUpload.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/CheckUpload.php
@@ -36,7 +36,7 @@ class CheckUpload extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -49,15 +49,15 @@ class CheckUpload extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/ClearJobId.php b/src/Plugin/LingotekFormComponent/BulkAction/ClearJobId.php
index db727169..d832c470 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/ClearJobId.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/ClearJobId.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\BulkAction;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -35,21 +36,21 @@ class ClearJobId extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -62,21 +63,21 @@ class ClearJobId extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ -109,7 +110,7 @@ class ClearJobId extends LingotekFormComponentBulkActionBase {
   public function execute(array $entities, array $options, LingotekFormComponentBulkActionExecutor $executor) {
     $entityInfo = [];
     foreach ($entities as $entity) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $language = $entity->getUntranslated()->language();
       $entityInfo[$entity->getEntityTypeId()][$entity->id()] = [$language->getId() => $language->getId()];
     }
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/DebugExport.php b/src/Plugin/LingotekFormComponent/BulkAction/DebugExport.php
index bd88e282..1bde0785 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/DebugExport.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/DebugExport.php
@@ -39,21 +39,21 @@ class DebugExport extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The state key value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -66,19 +66,19 @@ class DebugExport extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info, StateInterface $state, TimeInterface $time) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/DeleteContent.php b/src/Plugin/LingotekFormComponent/BulkAction/DeleteContent.php
index 4b720a46..b5a4f19b 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/DeleteContent.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/DeleteContent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\BulkAction;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -35,21 +36,21 @@ class DeleteContent extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -62,21 +63,21 @@ class DeleteContent extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ -121,7 +122,7 @@ class DeleteContent extends LingotekFormComponentBulkActionBase {
   public function execute(array $entities, array $options, LingotekFormComponentBulkActionExecutor $executor) {
     $entityInfo = [];
     foreach ($entities as $entity) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $language = $entity->getUntranslated()->language();
       $entityInfo[$entity->id()] = [$language->getId() => $language->getId()];
     }
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslation.php b/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslation.php
index b480d73e..8b80a7ff 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslation.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\BulkAction;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -35,14 +36,14 @@ class DeleteTranslation extends LingotekFormComponentBulkActionBase {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -55,17 +56,17 @@ class DeleteTranslation extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ -109,7 +110,7 @@ class DeleteTranslation extends LingotekFormComponentBulkActionBase {
     foreach ($entities as $entity) {
       $source_language = $entity->getUntranslated()->language();
       if ($source_language->getId() !== $langcode && $entity->hasTranslation($langcode)) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+        /** @var ContentEntityInterface $entity */
         $entityInfo[$entity->id()][$langcode] = $langcode;
       }
     }
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslations.php b/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslations.php
index 35a5529c..48c3242b 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslations.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/DeleteTranslations.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\BulkAction;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -36,21 +37,21 @@ class DeleteTranslations extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
   /**
    * The user currently logged in.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -63,19 +64,19 @@ class DeleteTranslations extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info, PrivateTempStoreFactory $temp_store_factory, AccountInterface $current_user) {
@@ -124,7 +125,7 @@ class DeleteTranslations extends LingotekFormComponentBulkActionBase {
       $source_language = $entity->getUntranslated()->language();
       foreach ($languages as $langcode => $language) {
         if ($source_language->getId() !== $langcode && $entity->hasTranslation($langcode)) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entityInfo[$entity->id()][$langcode] = $langcode;
         }
       }
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/Derivative/LanguageLingotekBulkActionDeriver.php b/src/Plugin/LingotekFormComponent/BulkAction/Derivative/LanguageLingotekBulkActionDeriver.php
index 8668297b..30c35989 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/Derivative/LanguageLingotekBulkActionDeriver.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/Derivative/LanguageLingotekBulkActionDeriver.php
@@ -15,14 +15,14 @@ class LanguageLingotekBulkActionDeriver extends DeriverBase implements Container
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -30,16 +30,16 @@ class LanguageLingotekBulkActionDeriver extends DeriverBase implements Container
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/Derivative/ProfileLingotekBulkActionDeriver.php b/src/Plugin/LingotekFormComponent/BulkAction/Derivative/ProfileLingotekBulkActionDeriver.php
index 1a3b7393..eb85ad0a 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/Derivative/ProfileLingotekBulkActionDeriver.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/Derivative/ProfileLingotekBulkActionDeriver.php
@@ -12,12 +12,12 @@ class ProfileLingotekBulkActionDeriver extends DeriverBase implements ContainerD
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
    */
   public function __construct(LingotekConfigurationServiceInterface $lingotek_configuration) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslation.php b/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslation.php
index 50776e19..1d960f2b 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslation.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslation.php
@@ -41,14 +41,14 @@ class DownloadTranslation extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
@@ -61,17 +61,17 @@ class DownloadTranslation extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslations.php b/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslations.php
index 300f19f5..1a1b6f0e 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslations.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/DownloadTranslations.php
@@ -40,14 +40,14 @@ class DownloadTranslations extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
@@ -60,17 +60,17 @@ class DownloadTranslations extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslation.php b/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslation.php
index fb594a5e..9ae43a35 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslation.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslation.php
@@ -44,14 +44,14 @@ class RequestTranslation extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The language-locale mapper.
    *
-   * @var \Drupal\lingotek\LanguageLocaleMapperInterface
+   * @var LanguageLocaleMapperInterface
    */
   protected $languageLocaleMapper;
 
@@ -64,17 +64,17 @@ class RequestTranslation extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LanguageLocaleMapperInterface $language_locale_mapper, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslations.php b/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslations.php
index 2cbc841d..1e9ba912 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslations.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/RequestTranslations.php
@@ -42,7 +42,7 @@ class RequestTranslations extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -55,15 +55,15 @@ class RequestTranslations extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/BulkAction/Upload.php b/src/Plugin/LingotekFormComponent/BulkAction/Upload.php
index 51c5d7ad..ea41b51b 100644
--- a/src/Plugin/LingotekFormComponent/BulkAction/Upload.php
+++ b/src/Plugin/LingotekFormComponent/BulkAction/Upload.php
@@ -43,7 +43,7 @@ class Upload extends LingotekFormComponentBulkActionBase {
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -56,15 +56,15 @@ class Upload extends LingotekFormComponentBulkActionBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/Field/Bundle.php b/src/Plugin/LingotekFormComponent/Field/Bundle.php
index 4b37db84..4a2e4187 100644
--- a/src/Plugin/LingotekFormComponent/Field/Bundle.php
+++ b/src/Plugin/LingotekFormComponent/Field/Bundle.php
@@ -39,13 +39,13 @@ class Bundle extends LingotekFormComponentFieldBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
diff --git a/src/Plugin/LingotekFormComponent/Field/Title.php b/src/Plugin/LingotekFormComponent/Field/Title.php
index 4558e13c..1a622ca8 100644
--- a/src/Plugin/LingotekFormComponent/Field/Title.php
+++ b/src/Plugin/LingotekFormComponent/Field/Title.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\Field;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
 use Drupal\lingotek\FormComponent\LingotekFormComponentBundleTrait;
@@ -33,7 +34,7 @@ class Title extends LingotekFormComponentFieldBase {
       return $this->t('Label');
     }
     $entity_type = $this->getEntityType($entity_type_id);
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+    /** @var EntityFieldManagerInterface $field_manager */
     $field_manager = \Drupal::service('entity_field.manager');
     $properties = $field_manager->getBaseFieldDefinitions($entity_type_id);
     $header = $this->hasBundles($entity_type_id) && $entity_type->hasKey('label') ? $properties[$entity_type->getKey('label')]->getLabel() : $entity_type->getLabel();
diff --git a/src/Plugin/LingotekFormComponent/Field/Translations.php b/src/Plugin/LingotekFormComponent/Field/Translations.php
index df0f61b6..caf418b0 100644
--- a/src/Plugin/LingotekFormComponent/Field/Translations.php
+++ b/src/Plugin/LingotekFormComponent/Field/Translations.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\Field;
 
+use Drupal\lingotek\LingotekProfileInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\lingotek\Lingotek;
@@ -30,7 +31,7 @@ class Translations extends LingotekFormComponentFieldBase {
    */
   public function getData(EntityInterface $entity) {
     $statuses = $this->translationService->getTargetStatuses($entity);
-    /** @var \Drupal\lingotek\LingotekProfileInterface $profile */
+    /** @var LingotekProfileInterface $profile */
     $profile = $this->lingotekConfiguration->getEntityProfile($entity);
     array_walk($statuses, function (&$status, $langcode) use ($entity, $profile) {
       if ($profile !== NULL && $profile->hasDisabledTarget($langcode)) {
diff --git a/src/Plugin/LingotekFormComponent/Filter/DefaultQuery.php b/src/Plugin/LingotekFormComponent/Filter/DefaultQuery.php
index d78c89c1..f766394f 100644
--- a/src/Plugin/LingotekFormComponent/Filter/DefaultQuery.php
+++ b/src/Plugin/LingotekFormComponent/Filter/DefaultQuery.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\Filter;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Language\LanguageInterface;
@@ -24,9 +26,9 @@ class DefaultQuery extends LingotekFormComponentFilterBase {
   use DependencySerializationTrait;
 
   public function filter(string $entity_type_id, array $entities, $value, SelectInterface &$query = NULL) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->getEntityType($entity_type_id);
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $query */
+    /** @var PagerSelectExtender $query */
     $query = $this->connection->select($entity_type->getBaseTable(), 'entity_table')->extend('\Drupal\Core\Database\Query\PagerSelectExtender');
     $query->fields('entity_table', [$entity_type->getKey('id')]);
     // We don't want items with language undefined.
diff --git a/src/Plugin/LingotekFormComponent/Filter/GnodeGroup.php b/src/Plugin/LingotekFormComponent/Filter/GnodeGroup.php
index 357dca9a..80f0fbe4 100644
--- a/src/Plugin/LingotekFormComponent/Filter/GnodeGroup.php
+++ b/src/Plugin/LingotekFormComponent/Filter/GnodeGroup.php
@@ -30,7 +30,7 @@ class GnodeGroup extends LingotekFormComponentFilterBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -43,19 +43,19 @@ class GnodeGroup extends LingotekFormComponentFilterBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, Connection $connection, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/LingotekFormComponent/Filter/ModerationState.php b/src/Plugin/LingotekFormComponent/Filter/ModerationState.php
index faee26cb..968fd58e 100644
--- a/src/Plugin/LingotekFormComponent/Filter/ModerationState.php
+++ b/src/Plugin/LingotekFormComponent/Filter/ModerationState.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\Filter;
 
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workflows\Entity\Workflow;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ -34,14 +36,14 @@ class ModerationState extends LingotekFormComponentFilterBase {
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The content_moderation.moderation_information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface|null
+   * @var ModerationInformationInterface|null
    */
   protected $moderationInformation;
 
@@ -54,21 +56,21 @@ class ModerationState extends LingotekFormComponentFilterBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
-   * @param \Drupal\content_moderation\ModerationInformationInterface|null $moderation_information
+   * @param ModerationInformationInterface|null $moderation_information
    *   The content_moderation.moderation_information service if available.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, Connection $connection, ModuleHandlerInterface $module_handler, $moderation_information) {
@@ -114,7 +116,7 @@ class ModerationState extends LingotekFormComponentFilterBase {
    * {@inheritdoc}
    */
   public function buildElement($default_value = NULL) {
-    /** @var \Drupal\workflows\Entity\Workflow $workflow */
+    /** @var Workflow $workflow */
     if ($workflow = $this->entityTypeManager->getStorage('workflow')->load('editorial')) {
       $states = $workflow->getTypePlugin()->getStates();
       $options = ['' => $this->t('All')];
diff --git a/src/Plugin/LingotekFormComponent/Filter/TargetStatus.php b/src/Plugin/LingotekFormComponent/Filter/TargetStatus.php
index d5a263c0..66db83f3 100644
--- a/src/Plugin/LingotekFormComponent/Filter/TargetStatus.php
+++ b/src/Plugin/LingotekFormComponent/Filter/TargetStatus.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\LingotekFormComponent\Filter;
 
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\lingotek\Lingotek;
 use Drupal\lingotek\FormComponent\LingotekFormComponentFilterBase;
@@ -55,7 +56,7 @@ class TargetStatus extends LingotekFormComponentFilterBase {
     $base_table = $entity_type->getBaseTable();
     $metadata_type = $this->entityTypeManager->getDefinition('lingotek_content_metadata');
     $metadata_type_base_table = $metadata_type->getBaseTable();
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $subquery */
+    /** @var PagerSelectExtender $subquery */
     $subquery = $this->connection->select($base_table, 'entity_table')->extend('\Drupal\Core\Database\Query\PagerSelectExtender');
     $subquery->fields('entity_table', [$id_key]);
     $subquery->innerJoin($metadata_type_base_table, 'metadata_target', 'entity_table.' . $id_key . '= metadata_target.content_entity_id AND metadata_target.content_entity_type_id = \'' . $entity_type_id . '\'');
diff --git a/src/Plugin/LingotekFormComponent/Filter/Title.php b/src/Plugin/LingotekFormComponent/Filter/Title.php
index 407e310d..a818cb1d 100644
--- a/src/Plugin/LingotekFormComponent/Filter/Title.php
+++ b/src/Plugin/LingotekFormComponent/Filter/Title.php
@@ -31,7 +31,7 @@ class Title extends LingotekFormComponentFilterBase {
   use DependencySerializationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -44,19 +44,19 @@ class Title extends LingotekFormComponentFilterBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The lingotek.content_translation service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, LanguageManagerInterface $language_manager, LingotekConfigurationServiceInterface $lingotek_configuration, LingotekContentTranslationServiceInterface $translation_service, Connection $connection, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/Plugin/QueueWorker/LingotekDownloaderQueueWorker.php b/src/Plugin/QueueWorker/LingotekDownloaderQueueWorker.php
index a9a4986f..2ffbd3de 100644
--- a/src/Plugin/QueueWorker/LingotekDownloaderQueueWorker.php
+++ b/src/Plugin/QueueWorker/LingotekDownloaderQueueWorker.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Plugin\QueueWorker;
 
+use Drupal\lingotek\LingotekConfigTranslationServiceInterface;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -32,11 +34,11 @@ class LingotekDownloaderQueueWorker extends QueueWorkerBase {
       ->getStorage($entity_type_id)
       ->load($entity_id);
     if ($entity instanceof ConfigEntityInterface) {
-      /** @var \Drupal\lingotek\LingotekConfigTranslationServiceInterface $translation_service */
+      /** @var LingotekConfigTranslationServiceInterface $translation_service */
       $translation_service = \Drupal::service('lingotek.config_translation');
     }
     elseif ($entity instanceof ContentEntityInterface) {
-      /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+      /** @var LingotekContentTranslationServiceInterface $translation_service */
       $translation_service = \Drupal::service('lingotek.content_translation');
     }
     if (empty($translation_service)) {
diff --git a/src/Plugin/RelatedEntitiesDetector/EditorDetectorBase.php b/src/Plugin/RelatedEntitiesDetector/EditorDetectorBase.php
index f85a4e46..d4d85fcc 100644
--- a/src/Plugin/RelatedEntitiesDetector/EditorDetectorBase.php
+++ b/src/Plugin/RelatedEntitiesDetector/EditorDetectorBase.php
@@ -17,21 +17,21 @@ class EditorDetectorBase extends PluginBase implements RelatedEntitiesDetectorIn
   /**
    * The EntityRepository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -58,11 +58,11 @@ class EditorDetectorBase extends PluginBase implements RelatedEntitiesDetectorIn
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The EntityRepositoryInterface service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotekConfiguration
+   * @param LingotekConfigurationServiceInterface $lingotekConfiguration
    *   The Lingotek configuration service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository, EntityFieldManagerInterface $entityFieldManager, LingotekConfigurationServiceInterface $lingotekConfiguration) {
diff --git a/src/Plugin/RelatedEntitiesDetector/EntityReferenceDetectorBase.php b/src/Plugin/RelatedEntitiesDetector/EntityReferenceDetectorBase.php
index 261b11ec..6ce9809f 100644
--- a/src/Plugin/RelatedEntitiesDetector/EntityReferenceDetectorBase.php
+++ b/src/Plugin/RelatedEntitiesDetector/EntityReferenceDetectorBase.php
@@ -17,21 +17,21 @@ class EntityReferenceDetectorBase extends PluginBase implements RelatedEntitiesD
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -44,11 +44,11 @@ class EntityReferenceDetectorBase extends PluginBase implements RelatedEntitiesD
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotekConfiguration
+   * @param LingotekConfigurationServiceInterface $lingotekConfiguration
    *   The Lingotek configuration service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, LingotekConfigurationServiceInterface $lingotekConfiguration) {
diff --git a/src/Plugin/RelatedEntitiesDetector/FieldLinkDetector.php b/src/Plugin/RelatedEntitiesDetector/FieldLinkDetector.php
index 4fb91e79..cfffeb52 100644
--- a/src/Plugin/RelatedEntitiesDetector/FieldLinkDetector.php
+++ b/src/Plugin/RelatedEntitiesDetector/FieldLinkDetector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Plugin\RelatedEntitiesDetector;
 
+use Drupal\link\LinkItemInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityType;
@@ -31,21 +32,21 @@ class FieldLinkDetector extends PluginBase implements RelatedEntitiesDetectorInt
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
@@ -58,11 +59,11 @@ class FieldLinkDetector extends PluginBase implements RelatedEntitiesDetectorInt
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotekConfiguration
+   * @param LingotekConfigurationServiceInterface $lingotekConfiguration
    *   The Lingotek configuration service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, LingotekConfigurationServiceInterface $lingotekConfiguration) {
@@ -132,14 +133,14 @@ class FieldLinkDetector extends PluginBase implements RelatedEntitiesDetectorInt
   /**
    * Get the target entity of a given link.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $link
+   * @param FieldItemInterface $link
    *   The link field item.
    *
    * @return array
    *   Array of (target type, target id). Empty if no entity was linked.
    */
   public function getTargetEntities(FieldItemInterface $link) {
-    /** @var \Drupal\link\LinkItemInterface $link */
+    /** @var LinkItemInterface $link */
     // Check if the link is referencing an entity.
     $url = $link->getUrl();
     if (!$url->isRouted() || !preg_match('/^entity\./', $url->getRouteName())) {
diff --git a/src/Plugin/RelatedEntitiesDetector/HtmlLinkDetector.php b/src/Plugin/RelatedEntitiesDetector/HtmlLinkDetector.php
index 8e8920b6..b380a459 100644
--- a/src/Plugin/RelatedEntitiesDetector/HtmlLinkDetector.php
+++ b/src/Plugin/RelatedEntitiesDetector/HtmlLinkDetector.php
@@ -25,21 +25,21 @@ class HtmlLinkDetector extends EditorDetectorBase {
   /**
    * A Symfony request instance
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Drupal Path Validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
@@ -64,19 +64,19 @@ class HtmlLinkDetector extends EditorDetectorBase {
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The EntityRepositoryInterface service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The Drupal Path Validator service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperInterface $public_stream
+   * @param StreamWrapperInterface $public_stream
    *   The Public Stream service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityRepositoryInterface $entity_repository, EntityFieldManagerInterface $entity_field_manager, LingotekConfigurationServiceInterface $lingotek_configuration, Request $request, EntityTypeManagerInterface $entity_type_manager, PathValidatorInterface $path_validator, StreamWrapperInterface $public_stream) {
diff --git a/src/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetector.php b/src/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetector.php
index 96b35c64..398870a1 100644
--- a/src/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetector.php
+++ b/src/Plugin/RelatedEntitiesDetector/NestedLayoutBuilderEntitiesDetector.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\lingotek\Plugin\RelatedEntitiesDetector;
 
+use Drupal\layout_builder\Section;
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -27,28 +32,28 @@ class NestedLayoutBuilderEntitiesDetector extends PluginBase implements RelatedE
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -61,13 +66,13 @@ class NestedLayoutBuilderEntitiesDetector extends PluginBase implements RelatedE
    *   The plugin-id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotekConfiguration
+   * @param LingotekConfigurationServiceInterface $lingotekConfiguration
    *   The Lingotek configuration service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, LingotekConfigurationServiceInterface $lingotekConfiguration, ModuleHandlerInterface $moduleHandler) {
@@ -111,11 +116,11 @@ class NestedLayoutBuilderEntitiesDetector extends PluginBase implements RelatedE
           $block_manager = \Drupal::service('plugin.manager.block');
           $layoutField = $entity->get(OverridesSectionStorage::FIELD_NAME);
           $layout = $layoutField->getValue();
-          /** @var \Drupal\layout_builder\Section $sectionObject */
+          /** @var Section $sectionObject */
           foreach ($layout as $section) {
             $sectionObject = $section['section'];
             $components = $sectionObject->getComponents();
-            /** @var \Drupal\layout_builder\SectionComponent $component */
+            /** @var SectionComponent $component */
             foreach ($components as $component) {
               $blockDefinition = $block_manager->getDefinition($component->getPluginId());
               $configuration = $component->toArray()['configuration'];
@@ -161,11 +166,11 @@ class NestedLayoutBuilderEntitiesDetector extends PluginBase implements RelatedE
    * @return array
    *   An array of block IDs.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function prepareBlockContentIds(array $blockContentRevisionIds) {
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $blockContentStorage */
+    /** @var ContentEntityStorageInterface $blockContentStorage */
     $blockContentStorage = $this->entityTypeManager->getStorage('block_content');
     $ids = $blockContentStorage->getQuery()->condition($blockContentStorage->getEntityType()->getKey('revision'), $blockContentRevisionIds, 'IN')->execute();
     return $ids;
diff --git a/src/RelatedEntities/RelatedEntitiesDetectorInterface.php b/src/RelatedEntities/RelatedEntitiesDetectorInterface.php
index 00fb3e26..4f4b3bde 100644
--- a/src/RelatedEntities/RelatedEntitiesDetectorInterface.php
+++ b/src/RelatedEntities/RelatedEntitiesDetectorInterface.php
@@ -9,7 +9,7 @@ interface RelatedEntitiesDetectorInterface {
   /**
    * Extract nested and related content.
    *
-   * @param Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity node to parse for related entities.
    * @param array $entities
    *   Entities found.
diff --git a/src/RelatedEntities/RelatedEntitiesDetectorManager.php b/src/RelatedEntities/RelatedEntitiesDetectorManager.php
index cd262d41..a8ffac88 100644
--- a/src/RelatedEntities/RelatedEntitiesDetectorManager.php
+++ b/src/RelatedEntities/RelatedEntitiesDetectorManager.php
@@ -20,9 +20,9 @@ class RelatedEntitiesDetectorManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Remote/LingotekApi.php b/src/Remote/LingotekApi.php
index 6591bcf3..00358002 100644
--- a/src/Remote/LingotekApi.php
+++ b/src/Remote/LingotekApi.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Remote;
 
+use Psr\Http\Message\ResponseInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Exception\LingotekDocumentNotFoundException;
@@ -19,23 +20,23 @@ class LingotekApi implements LingotekApiInterface {
   /**
    * The HTTP client to interact with the Lingotek service.
    *
-   * @var \Drupal\lingotek\Remote\LingotekHttpInterface
+   * @var LingotekHttpInterface
    */
   protected $lingotekClient;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Constructs a LingotekApi object.
    *
-   * @param \Drupal\lingotek\Remote\LingotekHttpInterface $client
+   * @param LingotekHttpInterface $client
    *   A http client.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(LingotekHttpInterface $client, LoggerInterface $logger) {
@@ -58,7 +59,7 @@ class LingotekApi implements LingotekApiInterface {
    */
   public function getLocales() {
     $this->logger->debug('Starting Locales request: /api/locale with args [limit => 1000]');
-    /** @var \Psr\Http\Message\ResponseInterface $response */
+    /** @var ResponseInterface $response */
     try {
       $response = $this->lingotekClient->get('/api/locale', ['limit' => 1000]);
       if ($response->getStatusCode() == Response::HTTP_OK) {
@@ -543,7 +544,7 @@ class LingotekApi implements LingotekApiInterface {
    * Formats the response data as id => title based on the JSON returned
    * properties.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   A response.
    *
    * @return array
diff --git a/src/Remote/LingotekApiInterface.php b/src/Remote/LingotekApiInterface.php
index 8049ddf0..19d631bb 100644
--- a/src/Remote/LingotekApiInterface.php
+++ b/src/Remote/LingotekApiInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Remote;
 
+use Psr\Http\Message\ResponseInterface;
+use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 
 interface LingotekApiInterface extends ContainerInjectionInterface {
@@ -31,10 +33,10 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    *
    * @see http://devzone.lingotek.com
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function addDocument($args);
 
@@ -47,7 +49,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @return string
    *   The content.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function getDocumentContent($doc_id);
 
@@ -61,10 +63,10 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    *
    * @see http://devzone.lingotek.com
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function patchDocument($id, $args);
 
@@ -74,7 +76,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $document_id
    *   The document id.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function cancelDocument($document_id);
@@ -87,7 +89,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $locale
    *   The locale target we want to cancel the translation.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function cancelDocumentTarget($document_id, $locale);
@@ -98,7 +100,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $id
    *   The document id.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function getDocumentTranslationStatuses($id);
@@ -111,7 +113,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $locale
    *   The target locale.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function getDocumentTranslationStatus($id, $locale);
@@ -122,7 +124,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $id
    *   The document id.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function getDocumentInfo($id);
@@ -133,7 +135,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $id
    *   The document id.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function getDocumentStatus($id);
@@ -148,7 +150,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $workflow_id
    *   (Optional) The workflow ID.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function addTranslation($id, $locale, $workflow_id = NULL);
@@ -164,7 +166,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    *   (Optional) Flag indicating if should return the source if this is not yet
    *   translated. By default is FALSE.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function getTranslation($id, $locale, $useSource);
@@ -177,7 +179,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $locale
    *   The target locale.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function deleteTranslation($id, $locale);
@@ -252,7 +254,7 @@ interface LingotekApiInterface extends ContainerInjectionInterface {
    * @param string $process_id
    *   The process id.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function getProcess($process_id);
diff --git a/src/Remote/LingotekHttp.php b/src/Remote/LingotekHttp.php
index e08119a9..42f6de5d 100644
--- a/src/Remote/LingotekHttp.php
+++ b/src/Remote/LingotekHttp.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Remote;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\RequestOptions;
@@ -15,28 +16,28 @@ class LingotekHttp implements LingotekHttpInterface {
   /**
    * The HTTP client to interact with the Lingotek service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * The Lingotek account settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $accountConfig;
 
   /**
    * The Lingotek settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The Guzzle HTTP client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ClientInterface $http_client, ConfigFactoryInterface $config_factory) {
diff --git a/src/Remote/LingotekHttpInterface.php b/src/Remote/LingotekHttpInterface.php
index 97bd494b..4c73b35d 100644
--- a/src/Remote/LingotekHttpInterface.php
+++ b/src/Remote/LingotekHttpInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Remote;
 
+use Psr\Http\Message\UriInterface;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 
 /**
@@ -12,12 +14,12 @@ interface LingotekHttpInterface extends ContainerInjectionInterface {
   /**
    * Send a GET request.
    *
-   * @param string|\Psr\Http\Message\UriInterface $path
+   * @param string|UriInterface $path
    *   URI object or string.
    * @param array $args
    *   Request argument to add via query string.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function get($path, $args = []);
@@ -25,14 +27,14 @@ interface LingotekHttpInterface extends ContainerInjectionInterface {
   /**
    * Send a POST request.
    *
-   * @param string|\Psr\Http\Message\UriInterface $path
+   * @param string|UriInterface $path
    *   URI object or string.
    * @param array $args
    *   Request arguments to the POST request.
    * @param bool $use_multipart
    *   If TRUE, use multipart post arguments. If FALSE, uses form parameters.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function post($path, $args = [], $use_multipart = FALSE);
@@ -40,12 +42,12 @@ interface LingotekHttpInterface extends ContainerInjectionInterface {
   /**
    * Send a DELETE request.
    *
-   * @param string|\Psr\Http\Message\UriInterface $path
+   * @param string|UriInterface $path
    *   URI object or string.
    * @param array $args
    *   Request argument to add via query string.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function delete($path, $args = []);
@@ -53,14 +55,14 @@ interface LingotekHttpInterface extends ContainerInjectionInterface {
   /**
    * Send a PATCH request.
    *
-   * @param string|\Psr\Http\Message\UriInterface $path
+   * @param string|UriInterface $path
    *   URI object or string.
    * @param array $args
    *   Request arguments to the PATCH request.
    * @param bool $use_multipart
    *   If TRUE, use multipart post arguments. If FALSE, uses form parameters.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response.
    */
   public function patch($path, $args = [], $use_multipart = FALSE);
diff --git a/src/Routing/LingotekRouteSubscriber.php b/src/Routing/LingotekRouteSubscriber.php
index dee8d02b..d51e9745 100644
--- a/src/Routing/LingotekRouteSubscriber.php
+++ b/src/Routing/LingotekRouteSubscriber.php
@@ -17,14 +17,14 @@ class LingotekRouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Tests/Kernel/FieldFormatters/LingotekSourceStatusFormatterTest.php b/src/Tests/Kernel/FieldFormatters/LingotekSourceStatusFormatterTest.php
index 993c4b10..6276d17a 100644
--- a/src/Tests/Kernel/FieldFormatters/LingotekSourceStatusFormatterTest.php
+++ b/src/Tests/Kernel/FieldFormatters/LingotekSourceStatusFormatterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek\Tests\Kernel\FieldFormatters;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\entity_test\Entity\EntityTest;
@@ -38,14 +39,14 @@ class LingotekSourceStatusFormatterTest extends KernelTestBase {
   protected $fieldName;
 
   /**
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $display;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -95,9 +96,9 @@ class LingotekSourceStatusFormatterTest extends KernelTestBase {
   /**
    * Renders fields of a given entity with a given display.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity object with attached fields to render.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display to render the fields in.
    *
    * @return string
diff --git a/src/Tests/Kernel/LingotekConfigImportTest.php b/src/Tests/Kernel/LingotekConfigImportTest.php
index 3a2b2f2f..897bd2c7 100644
--- a/src/Tests/Kernel/LingotekConfigImportTest.php
+++ b/src/Tests/Kernel/LingotekConfigImportTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lingotek\Tests\Kernel;
 
+use Drupal\Core\Config\ConfigImporter;
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 use Drupal\entity_test\Entity\EntityTestMul;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -15,7 +17,7 @@ class LingotekConfigImportTest extends KernelTestBase {
   /**
    * Config Importer object used for testing.
    *
-   * @var \Drupal\Core\Config\ConfigImporter
+   * @var ConfigImporter
    */
   protected $configImporter;
 
@@ -70,7 +72,7 @@ class LingotekConfigImportTest extends KernelTestBase {
     \Drupal::service('content_translation.manager')->setEnabled($entity_type_id, $entity_type_id, TRUE);
 
     // Verify the configuration to create does not exist yet.
-    $this->assertIdentical($storage->exists($config_name), FALSE, $config_name . ' not found.');
+    $this->assertSame($storage->exists($config_name), FALSE, $config_name . ' not found.');
 
     // Create new config entity for content language translation.
     $data = [
@@ -109,18 +111,18 @@ class LingotekConfigImportTest extends KernelTestBase {
       ],
     ];
     $sync->write($config_name, $data);
-    $this->assertIdentical($sync->exists($config_name), TRUE, $config_name . ' found.');
+    $this->assertSame($sync->exists($config_name), TRUE, $config_name . ' found.');
 
     // Import.
     $this->configImporter()->import();
 
     // Verify the values appeared.
     $config = $this->config($config_name);
-    $this->assertIdentical($config->get('translate.entity.entity_test_mul.entity_test_mul.field.field_test_text'), TRUE);
+    $this->assertSame($config->get('translate.entity.entity_test_mul.entity_test_mul.field.field_test_text'), TRUE);
 
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
-    $this->assertIdentical($lingotek_config->isEnabled($entity_type_id), TRUE);
+    $this->assertSame($lingotek_config->isEnabled($entity_type_id), TRUE);
   }
 
 }
diff --git a/src/Views/LingotekContentMetadataViewsData.php b/src/Views/LingotekContentMetadataViewsData.php
index 374a0254..36bd29e9 100644
--- a/src/Views/LingotekContentMetadataViewsData.php
+++ b/src/Views/LingotekContentMetadataViewsData.php
@@ -22,24 +22,24 @@ class LingotekContentMetadataViewsData extends EntityViewsData {
   /**
    * The lingotek configuration service.
    *
-   * @var \Drupal\lingotek\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfigService;
 
   /**
    * Constructs an EntityViewsData object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type to provide views integration for.
-   * @param \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $storage_controller
+   * @param SqlEntityStorageInterface $storage_controller
    *   The storage handler used for this entity type.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation_manager
+   * @param TranslationInterface $translation_manager
    *   The translation manager.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek configuration service.
    */
   public function __construct(EntityTypeInterface $entity_type, SqlEntityStorageInterface $storage_controller, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, TranslationInterface $translation_manager, LingotekConfigurationServiceInterface $lingotek_configuration, EntityFieldManagerInterface $entity_field_manager = NULL) {
diff --git a/tests/modules/lingotek_form_test/src/Controller/LingotekTranslationStatusController.php b/tests/modules/lingotek_form_test/src/Controller/LingotekTranslationStatusController.php
index fd5d4661..a303134e 100644
--- a/tests/modules/lingotek_form_test/src/Controller/LingotekTranslationStatusController.php
+++ b/tests/modules/lingotek_form_test/src/Controller/LingotekTranslationStatusController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lingotek_form_test\Controller;
 
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -20,7 +21,7 @@ class LingotekTranslationStatusController extends ControllerBase {
    * @param string $entity_id
    *   The entity id from the entity which status we want to render.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
    * @return array
@@ -29,7 +30,7 @@ class LingotekTranslationStatusController extends ControllerBase {
   public function renderSource($entity_type, $entity_id, Request $request) {
     $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
 
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $status = $translation_service->getSourceStatus($entity);
 
@@ -49,7 +50,7 @@ class LingotekTranslationStatusController extends ControllerBase {
    * @param string $entity_id
    *   The entity id from the entity which status we want to render.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
    * @return array
@@ -60,7 +61,7 @@ class LingotekTranslationStatusController extends ControllerBase {
     $elements = [
       '#cache' => ['max-age' => 0],
     ];
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $statuses = $translation_service->getTargetStatuses($entity);
     foreach ($statuses as $langcode => $status) {
@@ -82,7 +83,7 @@ class LingotekTranslationStatusController extends ControllerBase {
    * @param string $entity_id
    *   The entity id from the entity which status we want to render.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
    * @return array
@@ -91,7 +92,7 @@ class LingotekTranslationStatusController extends ControllerBase {
   public function renderTargetStatuses($entity_type, $entity_id, Request $request) {
     $entity = \Drupal::entityTypeManager()->getStorage($entity_type)->load($entity_id);
 
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
+    /** @var LingotekContentTranslationServiceInterface $translation_service */
     $translation_service = \Drupal::service('lingotek.content_translation');
     $statuses = $translation_service->getTargetStatuses($entity);
 
diff --git a/tests/modules/lingotek_test/lingotek_test.module b/tests/modules/lingotek_test/lingotek_test.module
index ac99665e..b5329ece 100644
--- a/tests/modules/lingotek_test/lingotek_test.module
+++ b/tests/modules/lingotek_test/lingotek_test.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\node\NodeInterface;
+use Drupal\comment\CommentInterface;
+use Drupal\lingotek\LingotekConfigurationServiceInterface;
 /**
  * @file
  * Provides a fake Lingotek API endpoint and other help for testing purposes.
@@ -20,7 +23,7 @@ use Drupal\lingotek\LingotekProfileInterface;
 function lingotek_test_lingotek_content_entity_translation_presave(ContentEntityInterface &$translation, $langcode, $data) {
   if ($translation->getEntityTypeId() === 'node' && $translation->bundle() === 'press_release') {
     if ($translation->isNewTranslation()) {
-      /** @var \Drupal\node\NodeInterface $translation */
+      /** @var NodeInterface $translation */
       $translation->setUnpublished();
     }
   }
@@ -33,9 +36,9 @@ function lingotek_test_lingotek_content_entity_translation_presave(ContentEntity
  */
 function lingotek_test_lingotek_content_entity_get_profile(ContentEntityInterface $entity, LingotekProfileInterface &$profile = NULL, $provide_default = TRUE) {
   if ($entity->getEntityTypeId() === 'comment') {
-    /** @var \Drupal\comment\CommentInterface $entity */
+    /** @var CommentInterface $entity */
     $commented = $entity->getCommentedEntity();
-    /** @var \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_config */
+    /** @var LingotekConfigurationServiceInterface $lingotek_config */
     $lingotek_config = \Drupal::service('lingotek.configuration');
     $profile = $lingotek_config->getEntityProfile($commented, FALSE);
   }
diff --git a/tests/modules/lingotek_test/src/Controller/FakeWorkbenchController.php b/tests/modules/lingotek_test/src/Controller/FakeWorkbenchController.php
index 840f820d..5f8081ea 100644
--- a/tests/modules/lingotek_test/src/Controller/FakeWorkbenchController.php
+++ b/tests/modules/lingotek_test/src/Controller/FakeWorkbenchController.php
@@ -16,10 +16,10 @@ class FakeWorkbenchController extends ControllerBase {
   /**
    * Controller method for the workbench.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response with the deserialized query string.
    */
   public function workbench(Request $request) {
diff --git a/tests/modules/lingotek_test/src/Controller/HostsSetterController.php b/tests/modules/lingotek_test/src/Controller/HostsSetterController.php
index 0a4d9802..2bbeac1b 100644
--- a/tests/modules/lingotek_test/src/Controller/HostsSetterController.php
+++ b/tests/modules/lingotek_test/src/Controller/HostsSetterController.php
@@ -22,7 +22,7 @@ class HostsSetterController extends ControllerBase {
   /**
    * Constructs the HostsSetterController object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -43,10 +43,10 @@ class HostsSetterController extends ControllerBase {
    *
    * Required for the workbench links.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response with the current basepath and a success message.
    */
   public function setHosts(Request $request) {
diff --git a/tests/modules/lingotek_test/src/LingotekFake.php b/tests/modules/lingotek_test/src/LingotekFake.php
index 2df40ef3..02defd2a 100644
--- a/tests/modules/lingotek_test/src/LingotekFake.php
+++ b/tests/modules/lingotek_test/src/LingotekFake.php
@@ -359,10 +359,10 @@ class LingotekFake implements LingotekInterface {
     \Drupal::state()->set('lingotek.downloaded_locale', $locale);
     $type = \Drupal::state()->get('lingotek.uploaded_content_type', 'node');
     $typeWithLocale = $type . '.' . $locale;
-    $path = drupal_get_path('module', 'lingotek') . '/tests/modules/lingotek_test/document_responses/' . $typeWithLocale . '.json';
+    $path = \Drupal::service('extension.list.module')->getPath('lingotek') . '/tests/modules/lingotek_test/document_responses/' . $typeWithLocale . '.json';
 
     if (!file_exists($path)) {
-      $path = drupal_get_path('module', 'lingotek') . '/tests/modules/lingotek_test/document_responses/' . $type . '.json';
+      $path = \Drupal::service('extension.list.module')->getPath('lingotek') . '/tests/modules/lingotek_test/document_responses/' . $type . '.json';
     }
 
     $input = file_get_contents($path);
diff --git a/tests/modules/lingotek_visitable_metadata/lingotek_visitable_metadata.module b/tests/modules/lingotek_visitable_metadata/lingotek_visitable_metadata.module
index f6cd2aa9..fabc6a39 100644
--- a/tests/modules/lingotek_visitable_metadata/lingotek_visitable_metadata.module
+++ b/tests/modules/lingotek_visitable_metadata/lingotek_visitable_metadata.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Alters the LingotekContentMetadata entity for making it visitable.
@@ -11,7 +12,7 @@ use Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider;
 /**
  * Implements hook_entity_type_alter().
  *
- * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+ * @param EntityTypeInterface[] $entity_types
  */
 function lingotek_visitable_metadata_entity_type_alter(array &$entity_types) {
   $metadata_entity = $entity_types['lingotek_content_metadata'];
@@ -23,9 +24,9 @@ function lingotek_visitable_metadata_entity_type_alter(array &$entity_types) {
 /**
  * Implements hook_entity_base_field_info_alter().
  *
- * @param \Drupal\Core\Field\FieldDefinitionInterface[] $fields
+ * @param FieldDefinitionInterface[] $fields
  *   The array of base field definitions for the entity type.
- * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+ * @param EntityTypeInterface $entity_type
  *   The entity type definition.
  */
 function lingotek_visitable_metadata_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
diff --git a/tests/modules/lingotek_visitable_metadata_statuses/lingotek_visitable_metadata_statuses.module b/tests/modules/lingotek_visitable_metadata_statuses/lingotek_visitable_metadata_statuses.module
index e9e259fb..713e5503 100644
--- a/tests/modules/lingotek_visitable_metadata_statuses/lingotek_visitable_metadata_statuses.module
+++ b/tests/modules/lingotek_visitable_metadata_statuses/lingotek_visitable_metadata_statuses.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Alters the Language key/value field so its default formatter is the statuses
@@ -11,9 +12,9 @@ use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * Implements hook_entity_base_field_info_alter().
  *
- * @param \Drupal\Core\Field\FieldDefinitionInterface[] $fields
+ * @param FieldDefinitionInterface[] $fields
  *   The array of base field definitions for the entity type.
- * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+ * @param EntityTypeInterface $entity_type
  *   The entity type definition.
  */
 function lingotek_visitable_metadata_statuses_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
diff --git a/tests/src/Functional/Actions/LingotekActionsTest.php b/tests/src/Functional/Actions/LingotekActionsTest.php
index 9f6041ae..cf559aa1 100644
--- a/tests/src/Functional/Actions/LingotekActionsTest.php
+++ b/tests/src/Functional/Actions/LingotekActionsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lingotek\Functional\Actions;
 
+use Drupal\taxonomy\VocabularyInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\system\Entity\Action;
@@ -23,7 +24,7 @@ class LingotekActionsTest extends LingotekTestBase {
   public static $modules = ['action', 'taxonomy', 'node'];
 
   /**
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
diff --git a/tests/src/Functional/ChineseBulkTranslationTest.php b/tests/src/Functional/ChineseBulkTranslationTest.php
index d3492c40..0883faf9 100644
--- a/tests/src/Functional/ChineseBulkTranslationTest.php
+++ b/tests/src/Functional/ChineseBulkTranslationTest.php
@@ -87,24 +87,36 @@ class ChineseBulkTranslationTest extends LingotekTestBase {
     // And we can already request a translation.
     $this->assertLingotekRequestTranslationLink('zh_CN');
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');
 
     // Request the German (AT) translation.
     $this->assertLingotekRequestTranslationLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText("Locale 'zh_CN' was added as a translation target for node Llamas are cool.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Locale 'zh_CN' was added as a translation target for node Llamas are cool.");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
 
     // Check status of the Spanish translation.
     $this->assertLingotekCheckTargetStatusLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText('The zh_CN translation for node Llamas are cool is ready for download.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The zh_CN translation for node Llamas are cool is ready for download.');
 
     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('zh_CN');
     $this->clickLink('ZH');
-    $this->assertText('The translation of node Llamas are cool into zh_CN has been downloaded.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The translation of node Llamas are cool into zh_CN has been downloaded.');
 
     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
@@ -133,34 +145,49 @@ class ChineseBulkTranslationTest extends LingotekTestBase {
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
 
     $this->clickLink('EN', 1);
-    $this->assertText(t('System information uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('System information uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
 
     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/system.site_information_settings/system.site_information_settings?destination=' . $basepath . '/admin/lingotek/config/manage');
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN', 1);
-    $this->assertText('System information status checked successfully');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('System information status checked successfully');
 
     // Request the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText("Translation to zh_CN requested successfully");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Translation to zh_CN requested successfully");
     // Check that the requested locale is the right one.
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
 
     // Check status of the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to zh_CN checked successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Translation to zh_CN checked successfully");
 
     // Download the Chinese translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/system.site_information_settings/system.site_information_settings/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText('Translation to zh_CN downloaded successfully');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Translation to zh_CN downloaded successfully');
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
 
     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
@@ -188,33 +215,48 @@ class ChineseBulkTranslationTest extends LingotekTestBase {
     // And we cannot request yet a translation.
     $assert_session->linkByHrefNotExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText(t('Article uploaded successfully'));
-    $this->assertIdentical('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Article uploaded successfully'));
+    $this->assertSame('en_US', \Drupal::state()->get('lingotek.uploaded_locale'));
 
     // There is a link for checking status.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_upload/node_type/article?destination=' . $basepath . '/admin/lingotek/config/manage');
     // And we can already request a translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('EN');
-    $this->assertText('Article status checked successfully');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Article status checked successfully');
 
     // Request the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/request/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText("Translation to zh_CN requested successfully");
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Translation to zh_CN requested successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.added_target_locale'));
 
     // Check status of the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/check_download/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
-    $this->assertText("Translation to zh_CN status checked successfully");
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.checked_target_locale'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Translation to zh_CN status checked successfully");
 
     // Download the Spanish translation.
     $assert_session->linkByHrefExists($basepath . '/admin/lingotek/config/download/node_type/article/zh_CN?destination=' . $basepath . '/admin/lingotek/config/manage');
     $this->clickLink('ZH');
-    $this->assertText('Translation to zh_CN downloaded successfully');
-    $this->assertIdentical('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Translation to zh_CN downloaded successfully');
+    $this->assertSame('zh_CN', \Drupal::state()->get('lingotek.downloaded_locale'));
 
     // Now the link is to the workbench, and it opens in a new tab.
     $this->assertLingotekWorkbenchLink('zh_CN', 'dummy-document-hash-id', 'ZH-HANS');
diff --git a/tests/src/Functional/Controller/LingotekNotificationControllerTest.php b/tests/src/Functional/Controller/LingotekNotificationControllerTest.php
index 5f8e1bf4..6e462db8 100644
--- a/tests/src/Functional/Controller/LingotekNotificationControllerTest.php
+++ b/tests/src/Functional/Controller/LingotekNotificationControllerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\lingotek\Functional\Controller;
 
+use Drupal\node\NodeInterface;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\Core\Url;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
@@ -75,13 +77,13 @@ class LingotekNotificationControllerTest extends LingotekTestBase {
     $edit['lingotek_translation_management[lingotek_translation_profile]'] = 'automatic';
     $this->saveAndPublishNodeForm($edit);
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::load(1);
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $content_translation_service */
+    /** @var LingotekContentTranslationServiceInterface $content_translation_service */
     $content_translation_service = \Drupal::service('lingotek.content_translation');
 
     // Assert the content is importing.
-    $this->assertIdentical(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
+    $this->assertSame(Lingotek::STATUS_IMPORTING, $content_translation_service->getSourceStatus($node));
 
     $this->goToContentBulkManagementForm();
 
@@ -107,7 +109,7 @@ class LingotekNotificationControllerTest extends LingotekTestBase {
 
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
 
     // Simulate again the notification of content successfully uploaded.
     $request = $this->client->get($url, [
@@ -122,7 +124,7 @@ class LingotekNotificationControllerTest extends LingotekTestBase {
 
     $response = json_decode($request->getBody(), TRUE);
     $this->verbose($request);
-    $this->assertIdentical(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
+    $this->assertSame(['es'], $response['result']['request_translations'], 'Spanish language has been requested after notification automatically.');
   }
 
   /**
@@ -147,7 +149,7 @@ class LingotekNotificationControllerTest extends LingotekTestBase {
     $this->assertStringContainsString('max-age=0', $cache_control_header[0]);
 
     $response = (string) $request->getBody();
-    $this->assertIdentical($response, 'It works, but nothing to look here.');
+    $this->assertSame($response, 'It works, but nothing to look here.');
 
     // Simulate again the notification of content successfully uploaded.
     $request = $this->client->get($url, [
@@ -161,7 +163,7 @@ class LingotekNotificationControllerTest extends LingotekTestBase {
     $this->assertStringContainsString('max-age=0', $cache_control_header[0]);
 
     $response = (string) $request->getBody();
-    $this->assertIdentical($response, 'It works, but nothing to look here.');
+    $this->assertSame($response, 'It works, but nothing to look here.');
   }
 
 }
diff --git a/tests/src/Functional/Controller/LingotekSupportedLocalesControllerTest.php b/tests/src/Functional/Controller/LingotekSupportedLocalesControllerTest.php
index 76a4b3e1..8a62c847 100644
--- a/tests/src/Functional/Controller/LingotekSupportedLocalesControllerTest.php
+++ b/tests/src/Functional/Controller/LingotekSupportedLocalesControllerTest.php
@@ -16,9 +16,18 @@ class LingotekSupportedLocalesControllerTest extends LingotekTestBase {
    */
   public function testSupportedLocales() {
     $this->drupalGet('/admin/lingotek/supported-locales');
-    $this->assertText('German (Austria)');
-    $this->assertText('German (Germany)');
-    $this->assertText('Spanish (Spain)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('German (Austria)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('German (Germany)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Spanish (Spain)');
   }
 
 }
diff --git a/tests/src/Functional/Controller/LingotekWorkbenchRedirectControllerTest.php b/tests/src/Functional/Controller/LingotekWorkbenchRedirectControllerTest.php
index 32025597..5ddf83af 100644
--- a/tests/src/Functional/Controller/LingotekWorkbenchRedirectControllerTest.php
+++ b/tests/src/Functional/Controller/LingotekWorkbenchRedirectControllerTest.php
@@ -76,15 +76,24 @@ class LingotekWorkbenchRedirectControllerTest extends LingotekTestBase {
     // The document should have been automatically uploaded, so let's check
     // the upload status.
     $this->clickLink('EN');
-    $this->assertText('The import for node Llamas are cool is complete.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The import for node Llamas are cool is complete.');
 
     // Request translation.
     $this->clickLink('ES');
-    $this->assertText("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("Locale 'es_AR' was added as a translation target for node Llamas are cool.");
 
     // Check translation status.
     $this->clickLink('ES');
-    $this->assertText('The es_AR translation for node Llamas are cool is ready for download.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The es_AR translation for node Llamas are cool is ready for download.');
 
     // Download the Spanish translation.
     $this->assertLingotekDownloadTargetLink('es_AR');
@@ -97,7 +106,7 @@ class LingotekWorkbenchRedirectControllerTest extends LingotekTestBase {
     $this->clickLink('ES');
 
     $basepath = \Drupal::request()->getSchemeAndHttpHost();
-    $this->assertUrl($basepath . '/workbench/document/dummy-document-hash-id/locale/es_AR');
+    $this->assertSession()->addressEquals($basepath . '/workbench/document/dummy-document-hash-id/locale/es_AR');
   }
 
 }
diff --git a/tests/src/Functional/FieldFormatters/LingotekTranslationStatusFormatterTest.php b/tests/src/Functional/FieldFormatters/LingotekTranslationStatusFormatterTest.php
index d2eb7156..01fbf3f7 100644
--- a/tests/src/Functional/FieldFormatters/LingotekTranslationStatusFormatterTest.php
+++ b/tests/src/Functional/FieldFormatters/LingotekTranslationStatusFormatterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lingotek\Functional\FieldFormatters;
 
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\lingotek\Lingotek;
@@ -68,7 +69,7 @@ class LingotekTranslationStatusFormatterTest extends LingotekTestBase {
     $assert_session->responseContains('Lingotek translation status');
 
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }
 
   public function testStatusForMissingLanguage() {
@@ -86,7 +87,7 @@ class LingotekTranslationStatusFormatterTest extends LingotekTestBase {
     $assert_session->addressEquals('/node/1');
 
     $node = Node::load(1);
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $service */
+    /** @var LingotekContentTranslationServiceInterface $service */
     $service = \Drupal::service('lingotek.content_translation');
     $service->setTargetStatus($node, 'nb_NO', Lingotek::STATUS_READY);
 
@@ -94,7 +95,7 @@ class LingotekTranslationStatusFormatterTest extends LingotekTestBase {
     $assert_session->responseContains('Lingotek translation status');
 
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }
 
 }
diff --git a/tests/src/Functional/FieldFormatters/LingotekTranslationStatusesFormatterTest.php b/tests/src/Functional/FieldFormatters/LingotekTranslationStatusesFormatterTest.php
index 102afad5..db36ca07 100644
--- a/tests/src/Functional/FieldFormatters/LingotekTranslationStatusesFormatterTest.php
+++ b/tests/src/Functional/FieldFormatters/LingotekTranslationStatusesFormatterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lingotek\Functional\FieldFormatters;
 
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\lingotek\Lingotek;
@@ -67,10 +68,10 @@ class LingotekTranslationStatusesFormatterTest extends LingotekTestBase {
     $this->assertSession()->responseNotContains('Lingotek translation status');
 
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/de_DE?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='German - Request translation' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
 
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }
 
   public function testStatusForMissingLanguage() {
@@ -86,7 +87,7 @@ class LingotekTranslationStatusesFormatterTest extends LingotekTestBase {
     $this->assertSession()->addressEquals('/node/1');
 
     $node = Node::load(1);
-    /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $service */
+    /** @var LingotekContentTranslationServiceInterface $service */
     $service = \Drupal::service('lingotek.content_translation');
     $service->setTargetStatus($node, 'nb_NO', Lingotek::STATUS_READY);
 
@@ -94,10 +95,10 @@ class LingotekTranslationStatusesFormatterTest extends LingotekTestBase {
     $this->assertSession()->responseNotContains('Lingotek translation status');
 
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/de_DE?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='German - Request translation' and text()='DE']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
 
     $link = $this->xpath("//a[@href='$basepath/admin/lingotek/entity/add_target/dummy-document-hash-id/es_MX?destination=" . $basepath . "/metadata/1' and @class='language-icon target-request' and @title='Spanish - Request translation' and text()='ES']");
-    $this->assertEqual(count($link), 1, 'Link exists.');
+    $this->assertEquals(count($link), 1, 'Link exists.');
   }
 
 }
