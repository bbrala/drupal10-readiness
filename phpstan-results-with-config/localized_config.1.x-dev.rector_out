modules/contrib/localized_config/localized_config.api.php
modules/contrib/localized_config/localized_config.module
modules/contrib/localized_config/modules/localized_config_example/src/Plugin/LocalizedConfig/LocalizedConfigExamplePlugin.php
modules/contrib/localized_config/src/Access/LocalizedConfigAccess.php
modules/contrib/localized_config/src/Command/GenerateLocalizedConfigCommand.php
modules/contrib/localized_config/src/Config/LocalizedConfigFactoryOverrideDecorator.php
modules/contrib/localized_config/src/Form/LocalizedConfigForm.php
modules/contrib/localized_config/src/Form/LocalizedConfigSettings.php
modules/contrib/localized_config/src/Generator/GenerateLocalizedConfigGenerator.php
modules/contrib/localized_config/src/LocalizedConfigHelper.php
modules/contrib/localized_config/src/LocalizedConfigLanguageHelper.php
modules/contrib/localized_config/src/LocalizedConfigPermissions.php
modules/contrib/localized_config/src/LocalizedConfigPluginBase.php
modules/contrib/localized_config/src/LocalizedConfigPluginInterface.php
modules/contrib/localized_config/src/LocalizedConfigPluginManager.php
modules/contrib/localized_config/src/Plugin/Menu/LocalizedConfigDynamicMenuLink.php

12 files with changes
=====================

1) modules/contrib/localized_config/src/Plugin/Menu/LocalizedConfigDynamicMenuLink.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The localized config helper service.
    *
-   * @var \Drupal\localized_config\LocalizedConfigHelper
+   * @var LocalizedConfigHelper
    */
   protected $localizedConfigHelper;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Localized Config language-related methods.
    *
-   * @var \Drupal\localized_config\LocalizedConfigLanguageHelper
+   * @var LocalizedConfigLanguageHelper
    */
   protected $languageHelper;

@@ @@
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\localized_config\LocalizedConfigHelper $localized_config_helper
+   * @param LocalizedConfigHelper $localized_config_helper
    *   Localized config helper.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\localized_config\LocalizedConfigLanguageHelper $language_helper
+   * @param LocalizedConfigLanguageHelper $language_helper
    *   Localized Config language-related methods.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LocalizedConfigHelper $localized_config_helper, AccountInterface $current_user, LanguageManagerInterface $language_manager, LocalizedConfigLanguageHelper $language_helper) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/localized_config/src/LocalizedConfigPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/localized_config/src/LocalizedConfigPluginInterface.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Populates a form with elements to configure the plugin.
    *
-   * @param \Drupal\Core\Config\StorableConfigBase $config
+   * @param StorableConfigBase $config
    *   Config object.
    * @param string|null $language
    *   Langcode of the locale currently being configured.
    * @param array $form
    *   The main form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current form state.
    *
    * @return array
@@ @@
   /**
    * Validate the results.
    *
-   * @param \Drupal\Core\Config\StorableConfigBase $config
+   * @param StorableConfigBase $config
    *   Config object we will be saving our configuration to.
    * @param array $values
    *   An easier-to-read array of submitted values passed on by the main form.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string|null $language
    *   Langcode of the locale currently being configured.
@@ @@
   /**
    * Submit the results.
    *
-   * @param \Drupal\Core\Config\StorableConfigBase $config
+   * @param StorableConfigBase $config
    *   Config object we will be saving our configuration to.
    * @param array $values
    *   An easier-to-read array of submitted values passed on by the main form.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string|null $language
    *   Langcode of the locale currently being configured.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/localized_config/src/LocalizedConfigPluginBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * A helper class with useful methods pertaining to Localized Config.
    *
-   * @var \Drupal\localized_config\LocalizedConfigHelper
+   * @var LocalizedConfigHelper
    */
   protected $localizedConfigHelper;

@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/localized_config/src/LocalizedConfigPermissions.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager service.
    *
-   * @var \Drupal\localized_config\LocalizedConfigPluginManager
+   * @var LocalizedConfigPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The Localized Configuration helper service.
    *
-   * @var \Drupal\localized_config\LocalizedConfigHelper
+   * @var LocalizedConfigHelper
    */
   protected $localizedConfigHelper;

@@ @@
   /**
    * LocalizedConfigPermissions constructor.
    *
-   * @param \Drupal\localized_config\LocalizedConfigPluginManager $plugin_manager
+   * @param LocalizedConfigPluginManager $plugin_manager
    *   The plugin manager service.
-   * @param \Drupal\localized_config\LocalizedConfigHelper $localized_config_helper
+   * @param LocalizedConfigHelper $localized_config_helper
    *   The Localized Configuration helper service.
    */
   public function __construct(LocalizedConfigPluginManager $plugin_manager, LocalizedConfigHelper $localized_config_helper) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/localized_config/src/LocalizedConfigLanguageHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\localized_config;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\language\ConfigurableLanguageInterface;
+use Drupal\user\UserInterface;
+use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The configuration for the Localized Config module.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * LocalizedConfigLanguageHelper constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, AccountProxyInterface $current_user, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Retrieves a list of all languages which have a site code attached.
    *
-   * @param \Drupal\Core\Language\LanguageInterface[]|null $languages
+   * @param LanguageInterface[]|null $languages
    *   An array of languages.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   An array of languages which correspond to a site.
    */
   public function getFilteredLanguages($languages = NULL) {
@@ @@
   /**
    * Returns a list of enabled languages.
    *
-   * @param \Drupal\Core\Language\LanguageInterface[]|null $languages
+   * @param LanguageInterface[]|null $languages
    *   If not provided, all languages will be filtered.
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]|null
+   * @return LanguageInterface[]|null
    *   Returns a filtered list of enabled languages.
    */
   public function getEnabledLanguages($languages = NULL) {
@@ @@
     // Support for the "Disable Language" module.
     if ($this->moduleHandler->moduleExists('disable_language')) {
       /** @var string $langcode */
-      /** @var \Drupal\language\ConfigurableLanguageInterface $language */
+      /** @var ConfigurableLanguageInterface $language */
       foreach ($languages as $langcode => $language) {
         if ($language->getThirdPartySetting('disable_language', 'disable', FALSE)) {
           unset($languages[$langcode]);
@@ @@
    *   via filter_sitecode setting. Any additional language restrictions have to
    *   be processed within hook_localized_config_user_languages_alter().
    *
-   * @param \Drupal\user\UserInterface|\Drupal\Core\Session\AccountProxyInterface|null $user
+   * @param UserInterface|AccountProxyInterface|null $user
    *   The user to query. If not provided, will use current user.
    * @param bool $include_disabled
    *   Decides if disabled languages should be counted.
@@ @@
   /**
    * Languages to readable array.
    *
-   * @param \Drupal\language\Entity\ConfigurableLanguage[] $languages
+   * @param ConfigurableLanguage[] $languages
    *   An array of language objects.
    * @param bool $append_country
    *   Whether the country should be appended after the language name.
@@ @@
   public function languagesToReadableArray(array $languages, $append_country = TRUE): array {
     $list = [];

-    /** @var \Drupal\language\Entity\ConfigurableLanguage $language */
+    /** @var ConfigurableLanguage $language */
     foreach ($languages as $language) {
       if ($append_country) {
         $list[$language->getId()] = $language->getName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/localized_config/src/LocalizedConfigHelper.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * Language Manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Localized Config Plugin Manager service.
    *
-   * @var \Drupal\localized_config\LocalizedConfigPluginManager
+   * @var LocalizedConfigPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * Cache Tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidator
+   * @var CacheTagsInvalidator
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * Localized Config language-related methods.
    *
-   * @var \Drupal\localized_config\LocalizedConfigLanguageHelper
+   * @var LocalizedConfigLanguageHelper
    */
   protected $languageHelper;

@@ @@
   /**
    * LocalizedConfigHelper constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config Factory service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language Manager service.
-   * @param \Drupal\localized_config\LocalizedConfigPluginManager $localized_config_plugin_manager
+   * @param LocalizedConfigPluginManager $localized_config_plugin_manager
    *   Localized Config Plugin Manager service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidator $cache_tags_invalidator
+   * @param CacheTagsInvalidator $cache_tags_invalidator
    *   Cache Tags invalidator service.
-   * @param \Drupal\localized_config\LocalizedConfigLanguageHelper $language_helper
+   * @param LocalizedConfigLanguageHelper $language_helper
    *   Localized Config language-related methods.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager, LocalizedConfigPluginManager $localized_config_plugin_manager, CacheTagsInvalidator $cache_tags_invalidator, LocalizedConfigLanguageHelper $language_helper) {
@@ @@
    * @param string $plugin_name
    *   Which config to fetch the enabled state for?
    *
-   * @return \Drupal\Core\Language\LanguageInterface[]
+   * @return LanguageInterface[]
    *   An array of language objects, keyed by langcode.
    */
   public function getEnabledLanguages($plugin_name) {
@@ @@
   /**
    * Receives langcode or language object and returns an object.
    *
-   * @param string|\Drupal\Core\Language\LanguageInterface|null $language
+   * @param string|LanguageInterface|null $language
    *   The language to be tested.
    *
-   * @return \Drupal\Core\Language\LanguageInterface|false
+   * @return LanguageInterface|false
    *   The language, or FALSE if no such language present.
    */
   protected function getApplicableLanguageObject($language) {
@@ @@
    *
    * @param string $plugin_name
    *   Which config to apply cache information from?
-   * @param array|\Drupal\Core\Cache\CacheableMetadata $target
+   * @param array|CacheableMetadata $target
    *   The target config or render array.
    */
   public function addConfigCache($plugin_name, &$target) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/localized_config/src/Form/LocalizedConfigSettings.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/localized_config/src/Form/LocalizedConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\localized_config\Form;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\localized_config\LocalizedConfigPluginInterface;
+use Drupal\Core\Config\StorableConfigBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The Localized Config plugin manager.
    *
-   * @var \Drupal\localized_config\LocalizedConfigPluginManager
+   * @var LocalizedConfigPluginManager
    */
   protected $localizedConfigPluginManager;

@@ @@
   /**
    * The Drupal default config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManager
+   * @var ConfigManager
    */
   protected $configManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The localized config helper service.
    *
-   * @var \Drupal\localized_config\LocalizedConfigHelper
+   * @var LocalizedConfigHelper
    */
   protected $localizedConfigHelper;

@@ @@
   /**
    * Curretn user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * Localized Config language-related methods.
    *
-   * @var \Drupal\localized_config\LocalizedConfigLanguageHelper
+   * @var LocalizedConfigLanguageHelper
    */
   protected $languageHelper;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Config\ConfigManager $config_manager
+   * @param ConfigManager $config_manager
    *   Config manager service.
-   * @param \Drupal\localized_config\LocalizedConfigPluginManager $localized_config_plugin_manager
+   * @param LocalizedConfigPluginManager $localized_config_plugin_manager
    *   Localized Config plugin manager service.
-   * @param \Drupal\language\ConfigurableLanguageManagerInterface $language_manager
+   * @param ConfigurableLanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\localized_config\LocalizedConfigHelper $localized_config_helper
+   * @param LocalizedConfigHelper $localized_config_helper
    *   Config helper service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   LoggerFactoryInterface.
-   * @param \Drupal\localized_config\LocalizedConfigLanguageHelper $language_helper
+   * @param LocalizedConfigLanguageHelper $language_helper
    *   Localized Config language-related methods.
    */
   public function __construct(ConfigFactory $config_factory, ConfigManager $config_manager, LocalizedConfigPluginManager $localized_config_plugin_manager, ConfigurableLanguageManagerInterface $language_manager, LocalizedConfigHelper $localized_config_helper, AccountInterface $current_user, RequestStack $request_stack, LoggerChannelFactoryInterface $logger, LocalizedConfigLanguageHelper $language_helper) {
@@ @@
           $plugin_config = $this->getSpecificConfig($definition['id'], $language);
           $plugin_values = $values['module_' . $definition['id']];

-          /** @var \Drupal\localized_config\LocalizedConfigPluginInterface $plugin */
+          /** @var LocalizedConfigPluginInterface $plugin */
           $plugin = $this->localizedConfigPluginManager->createInstance($definition['id']);
           $plugin->validate($plugin_config, $plugin_values, $form, $form_state, $language);
         }
@@ @@
    *   A langcode representing the current language.
    * @param array $form
    *   The main form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current form state.
    *
    * @return array|false
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function moduleEnableValidate(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function moduleEnableSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param string $language
    *   Language to fetch.
    *
-   * @return \Drupal\Core\Config\StorableConfigBase
+   * @return StorableConfigBase
    *   Return the config.
    */
   protected function getSpecificConfig($id, $language) {
@@ @@
    * @param string|null $language
    *   The langcode representing the current language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Returns a fitting title.
    */
   public function getFormTitle($language = NULL) {
@@ @@
    * @param string|bool|null $language
    *   The code representing the locale's language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|mixed|null|string
+   * @return TranslatableMarkup|mixed|null|string
    *   A fitting title for the locale.
    */
   public function getLocaleTitle($language = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/localized_config/src/Config/LocalizedConfigFactoryOverrideDecorator.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The original service that is being decorated.
    *
-   * @var \Drupal\language\Config\LanguageConfigFactoryOverrideInterface
+   * @var LanguageConfigFactoryOverrideInterface
    */
   protected $innerService;

@@ @@
   /**
    * Constructs the LanguageConfigFactoryDecorator object.
    *
-   * @param \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $inner_service
+   * @param LanguageConfigFactoryOverrideInterface $inner_service
    *   The original service.
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The configuration storage engine.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   An event dispatcher instance to use for configuration events.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed configuration manager.
-   * @param \Drupal\Core\Language\LanguageDefault $default_language
+   * @param LanguageDefault $default_language
    *   The default language.
    */
   public function __construct(LanguageConfigFactoryOverrideInterface $inner_service, StorageInterface $storage, EventDispatcherInterface $event_dispatcher, TypedConfigManagerInterface $typed_config, LanguageDefault $default_language) {
@@ @@
   /**
    * Prevents Localized Config overrides from being deleted with the original.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The config CRUD event.
    */
   public function onConfigSave(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/localized_config/src/Access/LocalizedConfigAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\localized_config\Access;

+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The localized config helper service.
    *
-   * @var \Drupal\localized_config\LocalizedConfigHelper
+   * @var LocalizedConfigHelper
    */
   protected $localizedConfigHelper;

@@ @@
   /**
    * Localized Config language-related methods.
    *
-   * @var \Drupal\localized_config\LocalizedConfigLanguageHelper
+   * @var LocalizedConfigLanguageHelper
    */
   protected $languageHelper;

@@ @@
   /**
    * Constructs a new bubbling URL generator service.
    *
-   * @param \Drupal\localized_config\LocalizedConfigHelper $localized_config_helper
+   * @param LocalizedConfigHelper $localized_config_helper
    *   The localized config helper service.
-   * @param \Drupal\localized_config\LocalizedConfigLanguageHelper $language_helper
+   * @param LocalizedConfigLanguageHelper $language_helper
    *   Localized Config language-related methods.
    */
   public function __construct(LocalizedConfigHelper $localized_config_helper, LocalizedConfigLanguageHelper $language_helper) {
@@ @@
   /**
    * The main access callback.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    * @param string|null $language
    *   The language that's being accessed.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResult|AccessResultForbidden
    *   The access result.
    */
   public function access(AccountInterface $account, $language = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/localized_config/localized_config.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Language\LanguageInterface;
 /**
  * @file
  * Hooks related to the Localized Configuration system.
@@ @@
 /**
  * Allows changing the list of languages available to Localized Config.
  *
- * @param \Drupal\Core\Language\LanguageInterface[] $languages
+ * @param LanguageInterface[] $languages
  *   Array of languages, keyed by langcode.
  */
 function hook_localized_config_language_list_alter(array &$languages) {
@@ @@
 /**
  * Allows changing which languages a user identifies with.
  *
- * @param \Drupal\Core\Language\LanguageInterface[] $languages
+ * @param LanguageInterface[] $languages
  *   Array of languages, keyed by langcode.
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   The user object.
  */
 function hook_localized_config_user_languages_alter(array &$languages, UserInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/localized_config/src/Generator/GenerateLocalizedConfigGe
         nerator.php" file, due to:                                             
         "Analyze error: "Class Drupal\Console\Core\Generator\Generator not     
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/localized_config/src/Command/GenerateLocalizedConfigComm
         and.php" file, due to:                                                 
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

