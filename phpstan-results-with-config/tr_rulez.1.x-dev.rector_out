modules/contrib/tr_rulez/rules_scheduler/rules_scheduler.install
modules/contrib/tr_rulez/rules_scheduler/rules_scheduler.module
modules/contrib/tr_rulez/rules_scheduler/rules_scheduler.views.inc
modules/contrib/tr_rulez/rules_scheduler/src/Commands/RulesSchedulerCommands.php
modules/contrib/tr_rulez/rules_scheduler/src/Controller/SchedulerPageController.php
modules/contrib/tr_rulez/rules_scheduler/src/DefaultTaskHandler.php
modules/contrib/tr_rulez/rules_scheduler/src/Entity/Task.php
modules/contrib/tr_rulez/rules_scheduler/src/Entity/TaskInterface.php
modules/contrib/tr_rulez/rules_scheduler/src/Form/DeleteTaskConfirmForm.php
modules/contrib/tr_rulez/rules_scheduler/src/Form/ScheduleTaskForm.php
modules/contrib/tr_rulez/rules_scheduler/src/Form/SchedulerForm.php
modules/contrib/tr_rulez/rules_scheduler/src/Form/SchedulerFormBase.php
modules/contrib/tr_rulez/rules_scheduler/src/ParamConverter/TaskConverter.php
modules/contrib/tr_rulez/rules_scheduler/src/Plugin/QueueWorker/TaskWorker.php
modules/contrib/tr_rulez/rules_scheduler/src/Plugin/RulesAction/ScheduleDelete.php
modules/contrib/tr_rulez/rules_scheduler/src/Plugin/RulesAction/ScheduleTask.php
modules/contrib/tr_rulez/rules_scheduler/src/Plugin/views/filter/ComponentInOperator.php
modules/contrib/tr_rulez/rules_scheduler/src/SchedulerManager.php
modules/contrib/tr_rulez/rules_scheduler/src/SchedulerManagerInterface.php
modules/contrib/tr_rulez/rules_scheduler/src/TaskHandlerInterface.php
modules/contrib/tr_rulez/rules_scheduler/src/TypedData/Options/RulesComponentOptions.php
modules/contrib/tr_rulez/rules_scheduler/tests/modules/rules_scheduler_test/src/TestTaskHandler.php
modules/contrib/tr_rulez/rules_scheduler/tests/src/Functional/RulesSchedulerTestCase.php
modules/contrib/tr_rulez/rules_scheduler/tests/src/Kernel/OptionsProvider/OptionsProviderTest.php
modules/contrib/tr_rulez/src/Commands/TrRulezCommands.php
modules/contrib/tr_rulez/src/Controller/RulesComponentController.php
modules/contrib/tr_rulez/src/Controller/RulesComponentListBuilder.php
modules/contrib/tr_rulez/src/Controller/RulesReactionController.php
modules/contrib/tr_rulez/src/Controller/RulesReactionListBuilder.php
modules/contrib/tr_rulez/src/Event/BundleCreatedEvent.php
modules/contrib/tr_rulez/src/Event/BundleDeletedEvent.php
modules/contrib/tr_rulez/src/Event/UserWasBlockedEvent.php
modules/contrib/tr_rulez/src/Event/UserWasUnblockedEvent.php
modules/contrib/tr_rulez/src/Form/Expression/ActionContainerForm.php
modules/contrib/tr_rulez/src/Form/Expression/ConditionContainerForm.php
modules/contrib/tr_rulez/src/Form/Expression/ExpressionContainerFormBase.php
modules/contrib/tr_rulez/src/Form/ReactionRuleEditForm.php
modules/contrib/tr_rulez/src/Form/UnimplementedFeatureForm.php
modules/contrib/tr_rulez/src/Plugin/Condition/FloodIsAllowed.php
modules/contrib/tr_rulez/src/Plugin/Condition/PathContainsText.php
modules/contrib/tr_rulez/src/Plugin/Condition/PathTextComparison.php
modules/contrib/tr_rulez/src/Plugin/Condition/SiteIsInMaintenanceMode.php
modules/contrib/tr_rulez/src/Plugin/RulesAction/CacheTagInvalidator.php
modules/contrib/tr_rulez/src/Plugin/RulesAction/FloodClearEvent.php
modules/contrib/tr_rulez/src/Plugin/RulesAction/FloodRegisterEvent.php
modules/contrib/tr_rulez/src/Plugin/RulesAction/RulesFloodActionBase.php
modules/contrib/tr_rulez/src/Plugin/RulesExpression/RuleExpression.php
modules/contrib/tr_rulez/src/Plugin/RulesExpression/XorExpression.php
modules/contrib/tr_rulez/src/Plugin/TypedDataFilter/LinkFilter.php
modules/contrib/tr_rulez/src/Plugin/TypedDataFilter/RawFilter.php
modules/contrib/tr_rulez/tests/src/Functional/ConfigureAndExecuteTest.php
modules/contrib/tr_rulez/tests/src/Functional/UiPageTest.php
modules/contrib/tr_rulez/tests/src/Kernel/DataFilterTest.php
modules/contrib/tr_rulez/tests/src/Kernel/EventIntegrationTest.php
modules/contrib/tr_rulez/tests/src/Kernel/FloodTest.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/Condition/PathTextComparisonTest.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/Condition/SiteIsInMaintenanceModeTest.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/Event/BundleCreatedTest.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/Event/BundleDeletedTest.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/Event/EventTestBase.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/Event/UserWasBlockedTest.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/Event/UserWasUnblockedTest.php
modules/contrib/tr_rulez/tests/src/Unit/Integration/RulesAction/CacheTagInvalidatorTest.php
modules/contrib/tr_rulez/tests/src/Unit/XorExpressionTest.php
modules/contrib/tr_rulez/tr_rulez.install
modules/contrib/tr_rulez/tr_rulez.module

39 files with changes
=====================

1) modules/contrib/tr_rulez/tr_rulez.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * The tr_rulez module.
@@ @@
 function tr_rulez_entity_type_alter(array &$entity_types) {
   $config = \Drupal::config('tr_rulez.settings');
   if ($config->get('ui_choice') == 1) {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+    /** @var EntityTypeInterface[] $entity_types */
     $entity_types['rules_reaction_rule']->setListBuilderClass('Drupal\tr_rulez\Controller\RulesReactionListBuilder');
     $entity_types['rules_reaction_rule']->setFormClass('edit', 'Drupal\tr_rulez\Form\ReactionRuleEditForm');
     $entity_types['rules_reaction_rule']->setLinkTemplate('clone', '/admin/config/workflow/rules/reactions/clone/{rules_reaction_rule}');
@@ @@
  * Implements hook_ENTITY_TYPE_update() for the User entity.
  */
 function tr_rulez_user_update(UserInterface $account) {
-  /** @var \Drupal\user\UserInterface $original */
+  /** @var UserInterface $original */
   $original = $account->original;

   if (!$original->isBlocked() && $account->isBlocked()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/tr_rulez/tests/src/Unit/XorExpressionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\rules\Engine\ConditionExpressionContainerInterface;
 use Drupal\Tests\rules\Unit\RulesUnitTestBase;
 use Drupal\rules\Context\ExecutionStateInterface;
 use Drupal\rules\Engine\ConditionExpressionInterface;
@@ @@
  */
 class XorExpressionTest extends RulesUnitTestBase {

+  use ProphecyTrait;
   /**
    * The 'xor' condition container being tested.
    *
-   * @var \Drupal\rules\Engine\ConditionExpressionContainerInterface
+   * @var ConditionExpressionContainerInterface
    */
   protected $xor;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/tr_rulez/tests/src/Unit/Integration/RulesAction/CacheTagInvalidatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Unit\Integration\RulesAction;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\rules\Core\RulesActionInterface;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Tests\rules\Unit\Integration\RulesIntegrationTestBase;
@@ @@
  * @requires module rules
  */
 class CacheTagInvalidatorTest extends RulesIntegrationTestBase {
+  use ProphecyTrait;
   /**
    * The action to be tested.
    *
-   * @var \Drupal\rules\Core\RulesActionInterface
+   * @var RulesActionInterface
    */
   protected $action;

@@ @@
   /**
    * The Rules logger channel.
    *
-   * @var \Psr\Log\LoggerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var LoggerInterface|ProphecyInterface
    */
   protected $logger;

@@ @@
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheTagsInvalidatorInterface|ProphecyInterface
    */
   protected $cacheTagsInvalidator;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tr_rulez/tests/src/Unit/Integration/Condition/SiteIsInMaintenanceModeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Unit\Integration\Condition;

+use Drupal\rules\Core\RulesConditionInterface;
+use Drupal\Core\State\StateInterface;
 use Drupal\Core\KeyValueStore\KeyValueMemoryFactory;
 use Drupal\Core\State\State;
 use Drupal\Tests\rules\Unit\Integration\RulesIntegrationTestBase;
@@ @@
   /**
    * The condition to be tested.
    *
-   * @var \Drupal\rules\Core\RulesConditionInterface
+   * @var RulesConditionInterface
    */
   protected $condition;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tr_rulez/tests/src/Unit/Integration/Condition/PathTextComparisonTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Unit\Integration\Condition;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
+use Drupal\rules\Core\RulesConditionInterface;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Tests\rules\Unit\Integration\RulesIntegrationTestBase;

@@ @@
  */
 class PathTextComparisonTest extends RulesIntegrationTestBase {

+  use ProphecyTrait;
   /**
    * The mocked current path stack service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack|\Prophecy\Prophecy\ProphecyInterface
+   * @var CurrentPathStack|ProphecyInterface
    */
   protected $currentPathStack;

@@ @@
   /**
    * The condition to be tested.
    *
-   * @var \Drupal\rules\Core\RulesConditionInterface
+   * @var RulesConditionInterface
    */
   protected $condition;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tr_rulez/tests/src/Kernel/FloodTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Kernel;

+use Drupal\Core\Flood\FloodInterface;
+use Drupal\rules\Core\RulesConditionInterface;
+use Drupal\rules\Core\RulesActionInterface;
 use Drupal\Tests\rules\Kernel\RulesKernelTestBase;

 /**
@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

@@ @@

     $cron = $this->container->get('cron');

-    /** @var \Drupal\rules\Core\RulesConditionInterface $condition */
+    /** @var RulesConditionInterface $condition */
     $is_allowed_condition = $this->container->get('plugin.manager.condition')
       ->createInstance('rules_flood_is_allowed');
     $is_allowed_condition->setContextValue('name', $name)
@@ @@

     $cron = $this->container->get('cron');

-    /** @var \Drupal\rules\Core\RulesActionInterface $register_action */
+    /** @var RulesActionInterface $register_action */
     $register_action = \Drupal::service('plugin.manager.rules_action')
       ->createInstance('rules_flood_register_event');
     $register_action->setContextValue('name', $name)
@@ @@
     $threshold = 1;
     $window_expired = -1;

-    /** @var \Drupal\rules\Core\RulesActionInterface $clear_action */
+    /** @var RulesActionInterface $clear_action */
     $clear_action = \Drupal::service('plugin.manager.rules_action')
       ->createInstance('rules_flood_clear_event');
     $clear_action->setContextValue('name', $name);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tr_rulez/tests/src/Kernel/EventIntegrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Kernel;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\rules\Context\ContextConfig;
 use Drupal\user\Entity\User;
 use Drupal\Tests\rules\Kernel\RulesKernelTestBase;
@@ @@
   /**
    * The entity storage for Rules config entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tr_rulez/tests/src/Kernel/DataFilterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Kernel;

+use Drupal\Core\TypedData\TypedDataManagerInterface;
+use Drupal\typed_data\DataFilterManagerInterface;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The data filter manager.
    *
-   * @var \Drupal\typed_data\DataFilterManagerInterface
+   * @var DataFilterManagerInterface
    */
   protected $dataFilterManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tr_rulez/tests/src/Functional/UiPageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Functional;

+use Drupal\Tests\WebAssert;
 use Drupal\Tests\rules\Functional\RulesBrowserTestBase;

 /**
@@ @@

     $this->drupalGet('admin/config/workflow/rules');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);

@@ @@

     $this->pressButton('Save');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);
     $assert->pageTextContains('Reaction rule Test rule has been created.');
@@ @@
     $this->testCreateReactionRule();
     $this->drupalGet('admin/config/workflow/rules');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // Test disabling.
@@ @@
     $this->fillField('context_definitions[node][setting]', 'node');
     $this->pressButton('Save');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->pageTextContains('You have unsaved changes.');

@@ @@
     // Setup a rule with one condition.
     $this->testCreateReactionRule();

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     $this->clickLink('Delete');
@@ @@
     // Setup a rule with one condition.
     $this->testCreateReactionRule();

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     // Check that the label shows up on the Rule edit page.
     $assert->pageTextContains('Node is promoted');
@@ @@
     $this->fillField('context_definitions[message][setting]', 'message');
     $this->pressButton('Save');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/tr_rulez/tests/src/Functional/ConfigureAndExecuteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tr_rulez\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\Tests\rules\Functional\RulesBrowserTestBase;

 /**
@@ @@
   /**
    * A user account with administration permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
     // One more save to permanently store the rule.
     $this->pressButton('Save');

-    /** @var \Drupal\Tests\WebAssert $assert */
+    /** @var WebAssert $assert */
     $assert = $this->assertSession();

     // Add a node now and check if our rule triggers.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tr_rulez/src/Plugin/RulesExpression/RuleExpression.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\rules\Engine\ExpressionManagerInterface $expression_manager
+   * @param ExpressionManagerInterface $expression_manager
    *   The rules expression plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The Rules debug logger channel.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, ExpressionManagerInterface $expression_manager, EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/tr_rulez/src/Plugin/RulesAction/RulesFloodActionBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

@@ @@
   /**
    * The logger channel the action will write log messages to.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The Rules logger channel.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FloodInterface $flood, LoggerChannelInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/tr_rulez/src/Plugin/RulesAction/CacheTagInvalidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tr_rulez\Plugin\RulesAction;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The logger for the rules channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The cache_tags.invalidator service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LoggerChannelFactoryInterface $logger_factory, CacheTagsInvalidatorInterface $cacheTagsInvalidator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/tr_rulez/src/Plugin/Condition/SiteIsInMaintenanceMode.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $stateService;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\State\StateInterface $state_service
+   * @param StateInterface $state_service
    *   The state service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, StateInterface $state_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/tr_rulez/src/Plugin/Condition/PathTextComparison.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path_stack
+   * @param CurrentPathStack $current_path_stack
    *   The current path stack service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CurrentPathStack $current_path_stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/tr_rulez/src/Plugin/Condition/PathContainsText.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path_stack
+   * @param CurrentPathStack $current_path_stack
    *   The current path stack service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CurrentPathStack $current_path_stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/tr_rulez/src/Plugin/Condition/FloodIsAllowed.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FloodInterface $flood) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/tr_rulez/src/Form/ReactionRuleEditForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Rules event plugin manager.
    *
-   * @var \Drupal\rules\Core\RulesEventManager
+   * @var RulesEventManager
    */
   protected $eventManager;

@@ @@
   /**
    * The RulesUI handler of the currently active UI.
    *
-   * @var \Drupal\rules\Ui\RulesUiConfigHandler
+   * @var RulesUiConfigHandler
    */
   protected $rulesUiHandler;

@@ @@
   /**
    * Constructs a new reaction rule edit form.
    *
-   * @param \Drupal\rules\Engine\ExpressionManagerInterface $expression_manager
+   * @param ExpressionManagerInterface $expression_manager
    *   The expression manager.
-   * @param \Drupal\rules\Core\RulesEventManager $event_manager
+   * @param RulesEventManager $event_manager
    *   The Rules event plugin manager.
    */
   public function __construct(ExpressionManagerInterface $expression_manager, RulesEventManager $event_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/tr_rulez/src/Form/Expression/ConditionContainerForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tr_rulez\Form\Expression;

+use Drupal\rules\Engine\ExpressionInterface;
+use Drupal\rules\Plugin\RulesExpression\RuleExpression;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\rules\Engine\ConditionExpressionContainerInterface;
 use Drupal\rules\Form\Expression\ExpressionContainerFormBase;
@@ @@
   /**
    * The rule expression object this form is for.
    *
-   * @var \Drupal\rules\Engine\ConditionExpressionContainerInterface
+   * @var ConditionExpressionContainerInterface
    */
   protected $conditionContainer;

@@ @@
       '#empty' => $this->t('None'),
     ];

-    /** @var \Drupal\rules\Engine\ExpressionInterface $condition */
+    /** @var ExpressionInterface $condition */
     foreach ($this->conditionContainer as $condition) {
       $uuid = $condition->getUuid();
       $configuration = $condition->getConfiguration();
@@ @@
       return;
     }
     $component = $this->getRulesUiHandler()->getComponent();
-    /** @var \Drupal\rules\Plugin\RulesExpression\RuleExpression $rule_expression */
+    /** @var RuleExpression $rule_expression */
     $rule_expression = $component->getExpression();

     foreach ($values as $uuid => $expression) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/tr_rulez/src/Form/Expression/ActionContainerForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tr_rulez\Form\Expression;

+use Drupal\rules\Engine\ExpressionInterface;
+use Drupal\rules\Plugin\RulesExpression\RuleExpression;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\rules\Engine\ActionExpressionContainerInterface;
@@ @@
   /**
    * The rule expression object this form is for.
    *
-   * @var \Drupal\rules\Engine\ActionExpressionContainerInterface
+   * @var ActionExpressionContainerInterface
    */
   protected $actionSet;

@@ @@
       '#empty' => $this->t('None'),
     ];

-    /** @var \Drupal\rules\Engine\ExpressionInterface $action */
+    /** @var ExpressionInterface $action */
     foreach ($this->actionSet as $action) {
       $uuid = $action->getUuid();
       $configuration = $action->getConfiguration();
@@ @@
       return;
     }
     $component = $this->getRulesUiHandler()->getComponent();
-    /** @var \Drupal\rules\Plugin\RulesExpression\RuleExpression $rule_expression */
+    /** @var RuleExpression $rule_expression */
     $rule_expression = $component->getExpression();

     foreach ($values as $uuid => $expression) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/tr_rulez/src/Event/UserWasUnblockedEvent.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $account;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account of the user after unblocking.
    */
   public function __construct(UserInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/tr_rulez/src/Event/UserWasBlockedEvent.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The user account.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $account;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account of the user after being blocked.
    */
   public function __construct(UserInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/tr_rulez/src/Controller/RulesReactionListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tr_rulez\Controller;

+use Drupal\rules\Entity\ReactionRuleConfig;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * Constructs a new RulesReactionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    * @param \Drupal\Core\RulesEventManager $eventManager
    *   The Rules event plugin manager.
@@ @@
       $event_labels[] = $event_definition['label'];
     }

-    /** @var \Drupal\rules\Entity\ReactionRuleConfig $entity */
+    /** @var ReactionRuleConfig $entity */
     $details = $this->t('Machine name: @name', ['@name' => $entity->id()]);
     if ($entity->hasTags()) {
       $details = $details . '<br />' . $this->t('Tags: @tags', ['@tags' => implode(', ', $entity->getTags())]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/tr_rulez/src/Controller/RulesReactionController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Clones a reaction rule.
    *
-   * @param \Drupal\rules\Entity\ReactionRuleConfig $rules_reaction_rule
+   * @param ReactionRuleConfig $rules_reaction_rule
    *   The reaction rule configuration entity.
    */
   public function saveClone(ReactionRuleConfig $rules_reaction_rule) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/tr_rulez/src/Controller/RulesComponentListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tr_rulez\Controller;

+use Drupal\Core\Form\FormBuilderInterface;
+use Drupal\rules\Entity\RulesComponentConfig;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The expression manager.
    *
-   * @var \Drupal\rules\Engine\ExpressionManagerInterface
+   * @var ExpressionManagerInterface
    */
   protected $expressionManager;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Constructs a new RulesComponentListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\rules\Engine\ExpressionManagerInterface $expression_manager
+   * @param ExpressionManagerInterface $expression_manager
    *   The rules expression plugin manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ExpressionManagerInterface $expression_manager) {
@@ @@
     $definition = $this->expressionManager->getDefinition($expression_config['id']);
     $plugin_type = $definition['label'];

-    /** @var \Drupal\rules\Entity\RulesComponentConfig $entity */
+    /** @var RulesComponentConfig $entity */
     $details = $this->t('Machine name: @name', ['@name' => $entity->id()]);
     if ($entity->hasTags()) {
       $details = $details . '<br />' . $this->t('Tags: @tags', ['@tags' => implode(', ', $entity->getTags())]);
@@ @@
   /**
    * Returns the form builder.
    *
-   * @return \Drupal\Core\Form\FormBuilderInterface
+   * @return FormBuilderInterface
    *   The form builder.
    */
   protected function formBuilder() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/tr_rulez/src/Controller/RulesComponentController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Clones a rules component.
    *
-   * @param \Drupal\rules\Entity\RulesComponentConfig $rules_component
+   * @param RulesComponentConfig $rules_component
    *   The rules component configuration entity.
    */
   public function saveClone(RulesComponentConfig $rules_component) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/tr_rulez/rules_scheduler/tests/src/Kernel/OptionsProvider/OptionsProviderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\rules_scheduler\Kernel\OptionsProvider;

+use Drupal\Core\DependencyInjection\ClassResolver;
 use Drupal\Core\Form\OptGroup;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\rules_scheduler\TypedData\Options\RulesComponentOptions;
@@ @@
   /**
    * The class resolver service used to instantiate options providers.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolver
+   * @var ClassResolver
    */
   protected $classResolver;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/tr_rulez/rules_scheduler/tests/src/Functional/RulesSchedulerTestCase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\rules_scheduler\Functional;

+use Drupal\rules\Logger\RulesDebugLoggerChannel;
 use Drupal\Tests\Traits\Core\CronRunTrait;
 use Drupal\Tests\rules\Functional\RulesBrowserTestBase;
 use Drupal\rules_scheduler\Entity\Task;
@@ @@
   /**
    * Rules debug logger channel.
    *
-   * @var \Drupal\rules\Logger\RulesDebugLoggerChannel
+   * @var RulesDebugLoggerChannel
    */
   protected $logger;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/tr_rulez/rules_scheduler/src/TypedData/Options/RulesComponentOptions.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a RulesComponentOptions object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/tr_rulez/rules_scheduler/src/TaskHandlerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rules_scheduler;

+use Drupal\rules\Exception\EvaluationException;
+use Drupal\rules_scheduler\Entity\TaskInterface;
 /**
  * Interface for scheduled task handlers.
  *
@@ @@
   /**
    * Processes a queue item.
    *
-   * @throws \Drupal\rules\Exception\EvaluationException
+   * @throws EvaluationException
    *   If there are any problems executing the task.
    *
    * @see rules_scheduler_run_task()
@@ @@
   /**
    * Returns the task associated with the task handler.
    *
-   * @return \Drupal\rules_scheduler\Entity\TaskInterface
+   * @return TaskInterface
    *   The task.
    */
   public function getTask();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/tr_rulez/rules_scheduler/src/SchedulerManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rules_scheduler;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\rules_scheduler\Entity\Task;

@@ @@
   /**
    * The execution queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * Constructs a new SchedulerManager.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(QueueFactory $queue_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/tr_rulez/rules_scheduler/src/Plugin/views/filter/ComponentInOperator.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/tr_rulez/rules_scheduler/src/Plugin/RulesAction/ScheduleDelete.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/tr_rulez/rules_scheduler/src/Plugin/QueueWorker/TaskWorker.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Queue worker callback for running a single task.
    *
-   * @param \Drupal\rules_scheduler\Entity\TaskInterface $task
+   * @param TaskInterface $task
    *   The task to process.
    */
   public function processItem($task) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/tr_rulez/rules_scheduler/src/Form/SchedulerFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rules_scheduler\Form;

+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The config entity storage that holds Rules components.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $componentStorage;

@@ @@
   /**
    * The Rules action plugin manager.
    *
-   * @var \Drupal\rules\Core\RulesActionManagerInterface
+   * @var RulesActionManagerInterface
    */
   protected $actionManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $componentStorage
+   * @param EntityStorageInterface $componentStorage
    *   The config entity storage that holds Rules components.
-   * @param \Drupal\rules\Core\RulesActionManagerInterface $actionManager
+   * @param RulesActionManagerInterface $actionManager
    *   The Rules action plugin manager.
    */
   public function __construct(Connection $database, TypedDataManagerInterface $typedDataManager, EntityStorageInterface $componentStorage, RulesActionManagerInterface $actionManager) {
@@ @@
    * @param mixed $value
    *   The value to set.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The created object.
    */
   protected function getTypedData($data_type, $value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/tr_rulez/rules_scheduler/src/Form/DeleteTaskConfirmForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rules_scheduler\Form;

+use Drupal\rules\Entity\RulesComponentConfig;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The task to delete.
    *
-   * @var \Drupal\rules_scheduler\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $task;

@@ @@
   /**
    * The rules configuration.
    *
-   * @var \Drupal\rules\Entity\RulesComponentConfig
+   * @var RulesComponentConfig
    */
   protected $config;

@@ @@
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The rules_config entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * Form constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date.formatter service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The rules_config entity storage class.
    */
   public function __construct(DateFormatterInterface $date_formatter, EntityStorageInterface $storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/tr_rulez/rules_scheduler/src/DefaultTaskHandler.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The task.
    *
-   * @var \Drupal\rules_scheduler\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $task;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/tr_rulez/rules_scheduler/src/Controller/SchedulerPageController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Constructs a SchedulePageController object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, FormBuilderInterface $form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/tr_rulez/rules_scheduler/src/Commands/RulesSchedulerCommands.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The queue worker manager service.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;

@@ @@
   /**
    * The rules scheduler manager.
    *
-   * @var \Drupal\rules_scheduler\SchedulerManagerInterface
+   * @var SchedulerManagerInterface
    */
   protected $rulesSchedulerManager;

@@ @@
   /**
    * RulesSchedulerCommands constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory service.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager service.
-   * @param \Drupal\rules_scheduler\SchedulerManagerInterface $rules_scheduler_manager
+   * @param SchedulerManagerInterface $rules_scheduler_manager
    *   The rules scheduler manager.
    */
   public function __construct(QueueFactory $queue_factory, QueueWorkerManagerInterface $queue_worker_manager, SchedulerManagerInterface $rules_scheduler_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 39 files have been changed by Rector                                      

