modules/contrib/scheduled_transitions/scheduled_transitions.api.php
modules/contrib/scheduled_transitions/scheduled_transitions.install
modules/contrib/scheduled_transitions/scheduled_transitions.module
modules/contrib/scheduled_transitions/src/Access/SupportsContentModerationAccessCheck.php
modules/contrib/scheduled_transitions/src/Commands/ScheduledTransitionsCommands.php
modules/contrib/scheduled_transitions/src/Entity/ScheduledTransition.php
modules/contrib/scheduled_transitions/src/Entity/ScheduledTransitionInterface.php
modules/contrib/scheduled_transitions/src/Event/ScheduledTransitionsEvents.php
modules/contrib/scheduled_transitions/src/Event/ScheduledTransitionsNewRevisionEvent.php
modules/contrib/scheduled_transitions/src/EventSubscriber/ScheduledTransitionsNewRevision.php
modules/contrib/scheduled_transitions/src/Exception/ScheduledTransitionMissingEntity.php
modules/contrib/scheduled_transitions/src/Form/Entity/ScheduledTransitionAddForm.php
modules/contrib/scheduled_transitions/src/Form/Entity/ScheduledTransitionRescheduleForm.php
modules/contrib/scheduled_transitions/src/Form/ScheduledTransitionForm.php
modules/contrib/scheduled_transitions/src/Form/ScheduledTransitionsSettingsForm.php
modules/contrib/scheduled_transitions/src/Plugin/Derivative/ScheduledTransitionsLocalActions.php
modules/contrib/scheduled_transitions/src/Plugin/Derivative/ScheduledTransitionsLocalTasks.php
modules/contrib/scheduled_transitions/src/Plugin/Menu/LocalAction/ScheduledTransitionsLocalAction.php
modules/contrib/scheduled_transitions/src/Plugin/Menu/LocalTask/ScheduledTransitionsLocalTask.php
modules/contrib/scheduled_transitions/src/Plugin/QueueWorker/ScheduledTransitionJob.php
modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionFromStateViewsField.php
modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionRevisionLinkField.php
modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionToStateViewsField.php
modules/contrib/scheduled_transitions/src/Routing/ScheduledTransitionRouteProvider.php
modules/contrib/scheduled_transitions/src/Routing/ScheduledTransitionsRouteProvider.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsAccessControlHandler.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsEntityHooks.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsHooks.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsJobs.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsJobsInterface.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsListBuilder.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsPermissions.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsRunner.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsRunnerInterface.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsTokenReplacements.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsUtility.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsUtilityInterface.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsViewsData.php
modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_target_revisions_test/scheduled_transitions_target_revisions_test.module
modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_test/src/Entity/ScheduledTransitionsNonTranslatableTestEntity.php
modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_test/src/Entity/ScheduledTransitionsTestEntity.php
modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_test/src/Entity/ScheduledTransitionsTestNoRevisionTemplateEntity.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionEntityTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionEntityTransitionsFormTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionListTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionLocalTaskTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionModalFormTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionSettingsFormTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionViewsListTest.php
modules/contrib/scheduled_transitions/tests/src/FunctionalJavascript/ScheduledTransitionModalFormJavascriptTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionEntityTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsTokenTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsUtilityTest.php
modules/contrib/scheduled_transitions/tests/src/Traits/ScheduledTransitionTestTrait.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsCronUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsLocalTaskUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsPermissionsUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsUtilityUnitTest.php

44 files with changes
=====================

1) modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * A test config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $testConfigFactory;

@@ @@
   /**
    * A test entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $testEntityTypeManager;

@@ @@
   /**
    * A test moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $testModerationInformation;

@@ @@
     $this->testEntityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->testModerationInformation = $this->createMock(ModerationInformationInterface::class);

-    $cacheContextsManager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cacheContextsManager = $this->createMock(CacheContextsManager::class);
     $cacheContextsManager->method('assertValidTokens')->willReturn(TRUE);
     $container = new ContainerBuilder();
     $container->set('cache_contexts_manager', $cacheContextsManager);
@@ @@
       ->with('view scheduled transitions foo bar')
       ->willReturn(FALSE);

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $entityHooks->entityAccess($entity, $operation, $account);
     $this->assertInstanceOf(AccessResultForbidden::class, $access);
     $this->assertEquals(['user.permissions'], $access->getCacheContexts());
@@ @@
       ->with('add scheduled transitions foo bar')
       ->willReturn(FALSE);

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $entityHooks->entityAccess($entity, $operation, $account);
     $this->assertInstanceOf(AccessResultForbidden::class, $access);
     $this->assertEquals(['user.permissions'], $access->getCacheContexts());
@@ @@
     $entity->expects($this->never())
       ->method('access');

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $entityHooks->entityAccess($entity, $operation, $account);
     $this->assertInstanceOf(AccessResultNeutral::class, $access);
     $this->assertEquals(['user.permissions'], $access->getCacheContexts());
@@ @@
     $entity->expects($this->never())
       ->method('access');

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $entityHooks->entityAccess($entity, $operation, $account);
     $this->assertInstanceOf(AccessResultNeutral::class, $access);
     $this->assertEquals(['user.permissions'], $access->getCacheContexts());
@@ @@
       ->with('testop', $account, TRUE)
       ->willReturn(AccessResult::forbidden('no can do'));

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $entityHooks->entityAccess($entity, $operation, $account);
     $this->assertInstanceOf(AccessResultForbidden::class, $access);
     $this->assertEquals(['user.permissions'], $access->getCacheContexts());
@@ @@
       ->with('testop', $account, TRUE)
       ->willReturn(AccessResult::forbidden('no can do'));

-    /** @var \Drupal\Core\Access\AccessResultForbidden $access */
+    /** @var AccessResultForbidden $access */
     $access = $entityHooks->entityAccess($entity, $operation, $account);
     $this->assertInstanceOf(AccessResultForbidden::class, $access);
     $this->assertEquals(['user.permissions'], $access->getCacheContexts());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsCronUnitTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * A test config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $testConfigFactory;

@@ @@
   /**
    * Test jobs.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsJobsInterface
+   * @var ScheduledTransitionsJobsInterface
    */
   protected $testJobs;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/scheduled_transitions/tests/src/Traits/ScheduledTransitionTestTrait.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduled_transitions\Traits;

+use Drupal\scheduled_transitions\ScheduledTransitionsRunnerInterface;
 use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;

 /**
@@ @@
   /**
    * Checks and runs any ready transitions.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   A scheduled transition.
    */
   protected function runTransition(ScheduledTransitionInterface $scheduledTransition): void {
-    /** @var \Drupal\scheduled_transitions\ScheduledTransitionsRunnerInterface $runner */
+    /** @var ScheduledTransitionsRunnerInterface $runner */
     $runner = \Drupal::service('scheduled_transitions.runner');
     $runner->runTransition($scheduledTransition);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsUtilityTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduled_transitions\Kernel;

+use Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\scheduled_transitions\Form\ScheduledTransitionsSettingsForm as SettingsForm;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test_revlog');
   }
@@ @@
    * @covers ::getApplicableBundles
    */
   public function testGetApplicableBundles(): void {
-    /** @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility */
+    /** @var ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility */
     $scheduledTransitionsUtility = \Drupal::service('scheduled_transitions.utility');

     $result = $scheduledTransitionsUtility->getApplicableBundles();
@@ @@
    * @covers ::getBundles
    */
   public function testGetBundles(): void {
-    /** @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility */
+    /** @var ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility */
     $scheduledTransitionsUtility = \Drupal::service('scheduled_transitions.utility');

     $result = $scheduledTransitionsUtility->getApplicableBundles();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsTokenTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduled_transitions\Kernel;

+use Drupal\workflows\WorkflowInterface;
+use Drupal\scheduled_transitions\ScheduledTransitionsRunnerInterface;
 use Drupal\entity_test_revlog\Entity\EntityTestWithRevisionLog;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\scheduled_transitions\Entity\ScheduledTransition;
@@ @@
   /**
    * Entity with revision log for testing.
    *
-   * @var \Drupal\entity_test_revlog\Entity\EntityTestWithRevisionLog
+   * @var EntityTestWithRevisionLog
    */
   protected $testEntity;

@@ @@
   /**
    * Workflow for testing.
    *
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $testWorkflow;

@@ @@
   /**
    * Scheduled transition for testing.
    *
-   * @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface
+   * @var ScheduledTransitionInterface
    */
   protected $scheduledTransition;

@@ @@
     $this->testWorkflow->getTypePlugin()->addEntityTypeAndBundle('entity_test_revlog', 'entity_test_revlog');
     $this->testWorkflow->save();

-    /** @var \Drupal\entity_test_revlog\Entity\EntityTestWithRevisionLog $entity */
+    /** @var EntityTestWithRevisionLog $entity */
     $this->testEntity = EntityTestWithRevisionLog::create([
       'type' => 'entity_test_revlog',
       'moderation_state' => 'archived',
@@ @@
   /**
    * Runs transitions.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   A scheduled transition.
    */
   protected function runTransition(ScheduledTransitionInterface $scheduledTransition): void {
-    /** @var \Drupal\scheduled_transitions\ScheduledTransitionsRunnerInterface $runner */
+    /** @var ScheduledTransitionsRunnerInterface $runner */
     $runner = \Drupal::service('scheduled_transitions.runner');
     $runner->runTransition($scheduledTransition);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduled_transitions\Kernel;

+use Drupal\user\PermissionHandlerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
 use Drupal\Tests\scheduled_transitions\Traits\ScheduledTransitionTestTrait;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test_revlog');
   }
@@ @@
     $workflow->getTypePlugin()->addEntityTypeAndBundle('entity_test_revlog', 'entity_test_revlog');
     $workflow->save();

-    /** @var \Drupal\user\PermissionHandlerInterface $permissionHandler */
+    /** @var PermissionHandlerInterface $permissionHandler */
     $permissionHandler = \Drupal::service('user.permissions');

     $permissions = $permissionHandler->getPermissions();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduled_transitions\Kernel;

+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\TranslatableRevisionableStorageInterface;
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\UserSession;
@@ @@
     $transitions = ScheduledTransition::loadMultiple();
     $this->assertCount(1, $transitions);

-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $transition */
+    /** @var ScheduledTransitionInterface $transition */
     $transition = reset($transitions);
     $this->assertEquals('de', $transition->getEntityRevisionLanguage());
   }
@@ @@
       ]);
     $scheduledTransition->save();

-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('entity_test_revlog');
     $new_revision = $storage->createRevision($entity);
     $new_revision->save();
@@ @@
     $this->assertEquals(1, $originalDeRevisionId);
     $this->assertEquals(1, $originalFrRevisionId);

-    /** @var \Drupal\user\UserInterface $author */
+    /** @var UserInterface $author */
     $author = User::create([
       'uid' => 2,
       'name' => $this->randomMachineName(),
@@ @@
     $workflow->getTypePlugin()->addEntityTypeAndBundle('st_entity_test', 'st_entity_test');
     $workflow->save();

-    /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $entityStorage */
+    /** @var TranslatableRevisionableStorageInterface $entityStorage */
     $entityStorage = \Drupal::entityTypeManager()->getStorage('st_entity_test');

     $entity = TestEntity::create(['type' => 'st_entity_test']);
@@ @@
     $entity->moderation_state = 'published';
     $entity->save();

-    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderationInformation */
+    /** @var ModerationInformationInterface $moderationInformation */
     $moderationInformation = \Drupal::service('content_moderation.moderation_information');

     // Do not change any storage fields this time.
@@ @@
     $workflow->getTypePlugin()->addEntityTypeAndBundle('st_entity_test', 'st_entity_test');
     $workflow->save();

-    /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $entityStorage */
+    /** @var TranslatableRevisionableStorageInterface $entityStorage */
     $entityStorage = \Drupal::entityTypeManager()->getStorage('st_entity_test');

     $entity = TestEntity::create(['type' => 'st_entity_test']);
@@ @@
     $scheduledTransition->save();
     $this->runTransition($scheduledTransition);

-    /** @var \Drupal\Component\Datetime\TimeInterface $time */
+    /** @var TimeInterface $time */
     $time = \Drupal::service('datetime.time');
     $this->assertEquals($time->getRequestTime(), $entityStorage->load($entity->id())->changed->value);
   }
@@ @@
   /**
    * Checks and runs any ready transitions.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   A scheduled transition.
    */
   protected function runTransition(ScheduledTransitionInterface $scheduledTransition): void {
@@ @@
   /**
    * Get revision IDs for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionEntityTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('scheduled_transition');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionSettingsFormTest.php:53

    ---------- begin diff ----------
@@ @@
     $edit = [
       'cron_create_queue_items' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->checkboxNotChecked('cron_create_queue_items');
@@ @@
       'mirror_operation_view' => 'update',
       'mirror_operation_add' => 'update',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->fieldValueEquals('mirror_operation_view', 'update');
@@ @@
     $this->drupalGet($url);

     $this->assertSession()->pageTextContains('Enabled types (0)');
-    $this->assertFieldByName('enabled[entity_test_revlog:entity_test_revlog]');
-    $this->assertFieldByName('enabled[st_entity_test:st_entity_test]');
+    $this->assertSession()->fieldExists('enabled[entity_test_revlog:entity_test_revlog]');
+    $this->assertSession()->fieldExists('enabled[st_entity_test:st_entity_test]');

     // Enable just one of the boxes.
     $edit = [
       'enabled[st_entity_test:st_entity_test]' => 'TRUE',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->pageTextContains('Enabled types (1)');
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduled_transitions\Functional;

+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\scheduled_transitions\Entity\ScheduledTransition;
 use Drupal\scheduled_transitions_test\Entity\ScheduledTransitionsTestEntity;
 use Drupal\scheduled_transitions\ScheduledTransitionsPermissions as Permissions;
@@ @@
     $entity->save();

     $date = new \DateTime('2 Feb 2018 11am');
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     $scheduledTransition = ScheduledTransition::create([
       'entity' => $entity,
       'entity_revision_id' => $entity->getRevisionId(),
@@ @@
       'date[date]' => '2018-10-21',
       'date[time]' => '14:00:00',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Reschedule transition');
+    $this->submitForm($edit, 'Reschedule transition');
     $this->assertSession()->pageTextContains('Rescheduled transition for Sun, 10/21/2018 - 14:00');

     // Reload ST.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionModalFormTest.php:176

    ---------- begin diff ----------
@@ @@
     ]);
     $this->drupalLogin($currentUser);

-    /** @var \Drupal\scheduled_transitions_test\Entity\ScheduledTransitionsTestEntity $entity */
+    /** @var ScheduledTransitionsTestEntity $entity */
     $entity = ScheduledTransitionsTestEntity::create(['type' => 'st_entity_test']);

     // Create a revision which will be filtered out by alter hook.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionLocalTaskTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\scheduled_transitions\Functional;

+use Drupal\Core\Entity\TranslatableRevisionableStorageInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Plugin\LanguageNegotiation\LanguageNegotiationUrl;
 use Drupal\scheduled_transitions\Entity\ScheduledTransition;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
@@ @@
    * log controller. https://www.drupal.org/project/drupal/issues/2350939
    */
   public function testLatestRevisionTab() {
-    /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $entityStorage */
+    /** @var TranslatableRevisionableStorageInterface $entityStorage */
     $entityStorage = \Drupal::entityTypeManager()->getStorage('st_entity_test');

     $this->enabledBundles([['st_entity_test', 'st_entity_test']]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionEntityTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_test/src/Entity/ScheduledTransitionsNonTranslatableTestEntity.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions_test\Entity;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Entity\EntityTypeInterface;

 /**
@@ @@
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type): array {
     $fields = parent::baseFieldDefinitions($entity_type);
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fields */
+    /** @var FieldStorageDefinitionInterface[] $fields */
     $fields['name']->setTranslatable(FALSE);
     unset($fields['revision_translation_affected']);
     return $fields;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/scheduled_transitions/src/ScheduledTransitionsUtilityInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\scheduled_transitions\Exception\ScheduledTransitionMissingEntity;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
@@ @@
   /**
    * Get scheduled transitions for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
-   * @return \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface[]
+   * @return ScheduledTransitionInterface[]
    *   An array of scheduled transitions.
    */
   public function getTransitions(EntityInterface $entity): array;
@@ @@
   /**
    * Get potential revisions which can be transitioned to.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity a transition is created for.
    * @param string $language
    *   The language code.
@@ @@
   /**
    * Generates a revision log for a ready to save revision.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   The scheduled transition for the associated revision.
-   * @param \Drupal\Core\Entity\RevisionLogInterface $newRevision
+   * @param RevisionLogInterface $newRevision
    *   The entity a transition is created for.
    *
    * @return string
    *   A revision log with replaced tokens.
    *
-   * @throws \Drupal\scheduled_transitions\Exception\ScheduledTransitionMissingEntity
+   * @throws ScheduledTransitionMissingEntity
    *   Thrown if latest revision of a entity could not be determined.
    */
   public function generateRevisionLog(ScheduledTransitionInterface $scheduledTransition, RevisionLogInterface $newRevision): string;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/scheduled_transitions/src/ScheduledTransitionsUtility.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * General service for moderation-related questions about Entity API.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * The token replacement system.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * String translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsUtility.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The bundle information service.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderationInformation
+   * @param ModerationInformationInterface $moderationInformation
    *   General service for moderation-related questions about Entity API.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token replacement system.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   String translation manager.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CacheBackendInterface $cache, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, ModerationInformationInterface $moderationInformation, Token $token, TranslationInterface $stringTranslation) {
@@ @@
     $entityStorage = $this->entityTypeManager->getStorage($newRevision->getEntityTypeId());
     $latestRevisionId = $entityStorage->getLatestRevisionId($newRevision->id());
     if ($latestRevisionId) {
-      /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $latest */
+      /** @var EntityInterface|RevisionableInterface $latest */
       $latest = $entityStorage->loadRevision($latestRevisionId);
     }
     if (!isset($latest)) {
@@ @@
   /**
    * Creates a cache tag for scheduled transitions related to an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
    * @return string
@@ @@
    *
    * @param string $text
    *   A string containing replaceable tokens.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsTokenReplacements $replacements
+   * @param ScheduledTransitionsTokenReplacements $replacements
    *   A replacements object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/scheduled_transitions/src/ScheduledTransitionsTokenReplacements.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * A scheduled transition entity.
    *
-   * @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface
+   * @var ScheduledTransitionInterface
    */
   protected $scheduledTransition;

@@ @@
   /**
    * A new default revision.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface
+   * @var EntityInterface|RevisionableInterface
    */
   protected $newRevision;

@@ @@
   /**
    * The latest current revision.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface
+   * @var EntityInterface|RevisionableInterface
    */
   protected $latest;

@@ @@
   /**
    * Moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface|null
+   * @var ModerationInformationInterface|null
    */
   protected $moderationInformation;

@@ @@
   /**
    * ScheduledTransitionsTokens constructor.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   A scheduled transition entity.
-   * @param \Drupal\Core\Entity\EntityInterface $newRevision
+   * @param EntityInterface $newRevision
    *   A new default revision.
-   * @param \Drupal\Core\Entity\EntityInterface $latest
+   * @param EntityInterface $latest
    *   The latest current revision.
    */
   public function __construct(ScheduledTransitionInterface $scheduledTransition, EntityInterface $newRevision, EntityInterface $latest) {
@@ @@
   /**
    * Moderation information service.
    *
-   * @return \Drupal\content_moderation\ModerationInformationInterface
+   * @return ModerationInformationInterface
    *   Moderation information service.
    */
   protected function moderationInformation(): ModerationInformationInterface {
@@ @@
   /**
    * Sets moderation information service.
    *
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderationInformation
+   * @param ModerationInformationInterface $moderationInformation
    *   Moderation information service.
    */
   public function setModerationInformation(ModerationInformationInterface $moderationInformation): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/scheduled_transitions/src/ScheduledTransitionsRunnerInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\scheduled_transitions\Exception\ScheduledTransitionMissingEntity;
 use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;

 /**
@@ @@
    * and any intermediate revisions if applicable. The transition may also be
    * deleted depending on settings.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   A scheduled transition.
    *
-   * @throws \Drupal\scheduled_transitions\Exception\ScheduledTransitionMissingEntity
+   * @throws ScheduledTransitionMissingEntity
    *   Thrown if any entity or entity revision is missing for a transition.
    *   Transition is never automatically deleted if exception is thrown.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/scheduled_transitions/src/ScheduledTransitionsRunner.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\RevisionableStorageInterface;
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * System time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * General service for moderation-related questions about Entity API.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * The token replacement system.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Utilities for Scheduled Transitions module.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface
+   * @var ScheduledTransitionsUtilityInterface
    */
   protected $scheduledTransitionsUtility;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsRunner.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   System time.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderationInformation
+   * @param ModerationInformationInterface $moderationInformation
    *   General service for moderation-related questions about Entity API.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token replacement system.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
+   * @param ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
    *   Utilities for Scheduled Transitions module.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $configFactory, TimeInterface $time, LoggerInterface $logger, ModerationInformationInterface $moderationInformation, Token $token, EventDispatcherInterface $eventDispatcher, ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility) {
@@ @@
     }

     $event = new ScheduledTransitionsNewRevisionEvent($scheduledTransition);
-    $this->eventDispatcher->dispatch(ScheduledTransitionsEvents::NEW_REVISION, $event);
+    $this->eventDispatcher->dispatch($event, ScheduledTransitionsEvents::NEW_REVISION);

     $newRevision = $event->getNewRevision();
     if (!$newRevision) {
@@ @@
       throw new ScheduledTransitionMissingEntity(sprintf('No revision could be determined to transition to for scheduled transition #%s', $scheduledTransitionId));
     }

-    /** @var \Drupal\Core\Entity\EntityStorageInterface|\Drupal\Core\Entity\RevisionableStorageInterface $entityStorage */
+    /** @var EntityStorageInterface|RevisionableStorageInterface $entityStorage */
     $entityStorage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());

     $latestRevisionId = $entityStorage->getLatestRevisionId($entity->id());
     if ($latestRevisionId) {
-      /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $latest */
+      /** @var EntityInterface|RevisionableInterface $latest */
       $latest = $entityStorage->loadRevision($latestRevisionId);
     }
     if (!isset($latest)) {
@@ @@
    * This method is responsible for saving new revision, and any intermediate
    * revisions if applicable.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   A scheduled transition entity.
-   * @param \Drupal\Core\Entity\EntityInterface $newRevision
+   * @param EntityInterface $newRevision
    *   A new default revision.
-   * @param \Drupal\Core\Entity\EntityInterface $latest
+   * @param EntityInterface $latest
    *   The latest current revision.
    */
   protected function transitionEntity(ScheduledTransitionInterface $scheduledTransition, EntityInterface $newRevision, EntityInterface $latest): void {
     /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $newRevision */
     /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $latest */
-    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $entityStorage */
+    /** @var RevisionableStorageInterface $entityStorage */
     $entityStorage = $this->entityTypeManager->getStorage($newRevision->getEntityTypeId());

     $settings = $this->configFactory->get('scheduled_transitions.settings');
@@ @@
    *   Log level.
    * @param string $message
    *   A log message.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsTokenReplacements $replacements
+   * @param ScheduledTransitionsTokenReplacements $replacements
    *   A replacements object.
    */
   protected function log($level, string $message, ScheduledTransitionsTokenReplacements $replacements): void {
@@ @@
    *
    * @param string $text
    *   A string containing replaceable tokens.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsTokenReplacements $replacements
+   * @param ScheduledTransitionsTokenReplacements $replacements
    *   A replacements object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/scheduled_transitions/src/ScheduledTransitionsPermissions.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * Utilities for Scheduled Transitions module.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface
+   * @var ScheduledTransitionsUtilityInterface
    */
   protected $scheduledTransitionsUtility;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsPermissions.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The bundle information service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The string translation service.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
+   * @param ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
    *   Utilities for Scheduled Transitions module.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, TranslationInterface $stringTranslation, ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/scheduled_transitions/src/ScheduledTransitionsListBuilder.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Various date related functionality.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsListBuilder..
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Various date related functionality.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $dateFormatter) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $entity */
+    /** @var ScheduledTransitionInterface $entity */
     $row = [];

     $hostEntity = $entity->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/scheduled_transitions/src/ScheduledTransitionsJobs.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\Core\Queue\QueueInterface;
+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Queue\QueueFactory;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * System time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The scheduled transition job queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsRunner.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   System time.
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   The queue factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, TimeInterface $time, QueueFactory $queueFactory, LoggerInterface $logger) {
@@ @@
     $query->condition($or);
     $ids = $query->execute();

-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface[] $transitions */
+    /** @var ScheduledTransitionInterface[] $transitions */
     $transitions = $transitionStorage->loadMultiple($ids);
     foreach ($transitions as $transition) {
       $transition->setLockedOn($now)->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/scheduled_transitions/src/ScheduledTransitionsHooks.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Job runner for Scheduled Transitions.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsJobsInterface
+   * @var ScheduledTransitionsJobsInterface
    */
   protected $scheduledTransitionsJobs;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsHooks.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsJobsInterface $scheduledTransitionsJobs
+   * @param ScheduledTransitionsJobsInterface $scheduledTransitionsJobs
    *   Job runner for Scheduled Transitions.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ScheduledTransitionsJobsInterface $scheduledTransitionsJobs) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/scheduled_transitions/src/ScheduledTransitionsEntityHooks.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * General service for moderation-related questions about Entity API.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsEntityHooks.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderationInformation
+   * @param ModerationInformationInterface $moderationInformation
    *   General service for moderation-related questions about Entity API.
    */
   public function __construct(ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager, ModerationInformationInterface $moderationInformation) {
@@ @@
    * @see \scheduled_transitions_entity_type_build()
    */
   public function entityTypeBuild(array &$entityTypes): void {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entityTypes */
+    /** @var EntityTypeInterface[] $entityTypes */
     foreach ($entityTypes as $entityType) {
       if (!$entityType->hasLinkTemplate('canonical') || !$entityType instanceof ContentEntityType) {
         continue;
@@ @@
   /**
    * Load a list of scheduled transitions by host entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    * @param bool $revision_match
    *   TRUE to match revision too.
    *
-   * @return \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface[]
+   * @return ScheduledTransitionInterface[]
    *   A list of scheduled transitions for the given entity.
    */
   protected function loadByHostEntity(EntityInterface $entity, bool $revision_match = FALSE): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/scheduled_transitions/src/ScheduledTransitionsAccessControlHandler.php:18

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account): AccessResultInterface {
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $entity */
+    /** @var ScheduledTransitionInterface $entity */
     $access = parent::checkAccess($entity, $operation, $account);

     if ($access->isNeutral()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/scheduled_transitions/src/Routing/ScheduledTransitionsRouteProvider.php:84

    ---------- begin diff ----------
@@ @@
   /**
    * Get the route name for scheduled transition form for an entity type..
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   An entity type.
    *
    * @return string
@@ @@
   /**
    * Get the route name for scheduled transition form for an entity type..
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   An entity type.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/scheduled_transitions/src/Routing/ScheduledTransitionRouteProvider.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the reschedule-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRescheduleFormRoute(EntityTypeInterface $entityType) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionToStateViewsField.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Plugin\views\field;

+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;

@@ @@
   public function render(ResultRow $values) {
     $value = $this->getValue($values);

-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     $scheduledTransition = $this->getEntity($values);

     $workflowPlugin = $scheduledTransition->getWorkflow()->getTypePlugin();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionRevisionLinkField.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Plugin\views\field;

+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccessManagerInterface $access_manager, EntityTypeManagerInterface $entityTypeManager, EntityRepositoryInterface $entityRepository, LanguageManagerInterface $languageManager) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkUrlAccess(ResultRow $row) {
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     $scheduledTransition = $this->getEntity($row);
     $entity = $scheduledTransition->getEntity();
     if (!$entity || !$entity->getEntityType()->hasLinkTemplate('revision')) {
@@ @@
    * {@inheritdoc}
    */
   protected function getUrlInfo(ResultRow $row) {
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     $scheduledTransition = $this->getEntity($row);

     $entity = $scheduledTransition->getEntity();
@@ @@
    * {@inheritdoc}
    */
   protected function renderLink(ResultRow $row) {
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     $scheduledTransition = $this->getEntity($row);

     $entity = $scheduledTransition->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionFromStateViewsField.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Plugin\views\field;

+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     $scheduledTransition = $this->getEntity($values);

     $entity = $scheduledTransition->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/scheduled_transitions/src/Plugin/QueueWorker/ScheduledTransitionJob.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Plugin\QueueWorker;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * Executes transitions.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsRunnerInterface
+   * @var ScheduledTransitionsRunnerInterface
    */
   protected $scheduledTransitionsRunner;

@@ @@
   /**
    * Storage for scheduled transitions.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $scheduledTransitionStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsRunnerInterface $scheduledTransitionsRunner
+   * @param ScheduledTransitionsRunnerInterface $scheduledTransitionsRunner
    *   Executes transitions.
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, ScheduledTransitionsRunnerInterface $scheduledTransitionsRunner) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/scheduled_transitions/src/Plugin/Menu/LocalTask/ScheduledTransitionsLocalTask.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Plugin\Menu\LocalTask;

+use Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Utilities for Scheduled Transitions module.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface
+   * @var ScheduledTransitionsUtilityInterface
    */
   protected $scheduledTransitionsUtility;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The string translation service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, RouteMatchInterface $routeMatch, EntityTypeManagerInterface $entityTypeManager, LanguageManagerInterface $languageManager, TranslationInterface $stringTranslation) {
@@ @@
   /**
    * Get entity from route match.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity from route match.
    */
   protected function getEntityFromRouteMatch(): ?ContentEntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/scheduled_transitions/src/Plugin/Derivative/ScheduledTransitionsLocalTasks.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/scheduled_transitions/src/Plugin/Derivative/ScheduledTransitionsLocalActions.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/scheduled_transitions/src/Form/ScheduledTransitionsSettingsForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Form;

+use Drupal\user\RoleInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * Cache tag invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagInvalidator;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * Utilities for Scheduled Transitions module.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface
+   * @var ScheduledTransitionsUtilityInterface
    */
   protected $scheduledTransitionsUtility;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagInvalidator
    *   Cache tag invalidator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The bundle information service.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
+   * @param ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
    *   Utilities for Scheduled Transitions module.
    */
   public function __construct(ConfigFactoryInterface $configFactory, CacheTagsInvalidatorInterface $cacheTagInvalidator, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility) {
@@ @@
       ],
     ];

-    /** @var \Drupal\user\RoleInterface[] $roles */
+    /** @var RoleInterface[] $roles */
     $roles = $this->entityTypeManager->getStorage('user_role')->loadMultiple();

     $enabledBundles = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/scheduled_transitions/src/Form/ScheduledTransitionForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Various date related functionality.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/scheduled_transitions/src/Form/Entity/ScheduledTransitionRescheduleForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Form\Entity;

+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
 /**
  * Scheduled transitions reschedule form.
  *
- * @method \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface getEntity()
+ * @method ScheduledTransitionInterface getEntity()
  */
 class ScheduledTransitionRescheduleForm extends ContentEntityForm {

@@ @@
   /**
    * Various date related functionality.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new ScheduledTransitionRescheduleForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Various date related functionality.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, DateFormatterInterface $dateFormatter) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
+    /** @var DrupalDateTime $date */
     $date = $form_state->getValue(['date']);

     $scheduledTransition = $this->getEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/scheduled_transitions/src/Form/Entity/ScheduledTransitionAddForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Form\Entity;

+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\content_moderation\StateTransitionValidationInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface;
+use Drupal\Core\Datetime\DrupalDateTime;
+use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Various date related functionality.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * General service for moderation-related questions about Entity API.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * Validates whether a certain state transition is allowed.
    *
-   * @var \Drupal\content_moderation\StateTransitionValidationInterface
+   * @var StateTransitionValidationInterface
    */
   protected $stateTransitionValidation;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Utilities for Scheduled Transitions module.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface
+   * @var ScheduledTransitionsUtilityInterface
    */
   protected $scheduledTransitionsUtility;

@@ @@
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param array $complete_form
    *   Complete form.
@@ @@
     $workflowPlugin = $workflow->getTypePlugin();
     $newState = $workflowPlugin->getTransition($transition)->to()->id();

-    /** @var \Drupal\Core\Datetime\DrupalDateTime $onDate */
+    /** @var DrupalDateTime $onDate */
     $onDate = $form_state->getValue(['on']);

     $scheduledTransitionStorage = $this->entityTypeManager->getStorage('scheduled_transition');
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     $scheduledTransition = $scheduledTransitionStorage->create([
       'entity' => [$entity],
       'entity_revision_id' => $entityRevisionId,
@@ @@
   /**
    * Get revisions for an entity as options for a tableselect.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Get revisions for this entity.
    *
    * @return array
@@ @@

     $options = array_map(
       function (EntityInterface $entityRevision) use ($workflowStates): array {
-        /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $entityRevision */
+        /** @var EntityInterface|RevisionableInterface $entityRevision */
         $option = [];
         $revisionTArgs = ['@revision_id' => $entityRevision->getRevisionId()];

@@ @@
   /**
    * Generate revision metadata section of the form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\workflows\WorkflowInterface|null $workflow
+   * @param WorkflowInterface|null $workflow
    *   The workflow.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being transitioned.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entityRevision
+   * @param EntityInterface|null $entityRevision
    *   The revision being transitioned, if available.
    *
    * @return array
@@ @@
     ];

     $scheduledTransitionStorage = $this->entityTypeManager->getStorage('scheduled_transition');
-    /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition */
+    /** @var ScheduledTransitionInterface $scheduledTransition */
     // Create an unused Scheduled Transition.
     $scheduledTransition = $scheduledTransitionStorage->create([]);
     $transitionValue = $form_state->getValue(['transition']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/scheduled_transitions/src/EventSubscriber/ScheduledTransitionsNewRevision.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\RevisionableStorageInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\TypedData\TranslatableInterface;
 use Drupal\scheduled_transitions\Entity\ScheduledTransition;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsNewRevision.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LoggerInterface $logger) {
@@ @@
    * Determines the new revision based on the revision ID on the scheduled
    * transition entity.
    *
-   * @param \Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event
+   * @param ScheduledTransitionsNewRevisionEvent $event
    *   New revision event.
    */
   public function newRevision(ScheduledTransitionsNewRevisionEvent $event): void {
@@ @@
       return;
     }

-    /** @var \Drupal\Core\Entity\EntityStorageInterface|\Drupal\Core\Entity\RevisionableStorageInterface $entityStorage */
+    /** @var EntityStorageInterface|RevisionableStorageInterface $entityStorage */
     $entityStorage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());

-    /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $newRevision */
+    /** @var EntityInterface|RevisionableInterface $newRevision */
     $newRevision = $entityStorage->loadRevision($entityRevisionId);
     if (!isset($newRevision)) {
       $this->logger->info('Target revision does not exist for scheduled transition #@id', $targs);
@@ @@
    * Automatically determines the latest revision, which will be the new saved
    * revision.
    *
-   * @param \Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event
+   * @param ScheduledTransitionsNewRevisionEvent $event
    *   New revision event.
    */
   public function latestRevision(ScheduledTransitionsNewRevisionEvent $event): void {
@@ @@
     // Load the latest revision.
     $entity = $scheduledTransition->getEntity();
     if ($entity) {
-      /** @var \Drupal\Core\Entity\EntityStorageInterface|\Drupal\Core\Entity\RevisionableStorageInterface $entityStorage */
+      /** @var EntityStorageInterface|RevisionableStorageInterface $entityStorage */
       $entityStorage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       $latestRevisionId = $entityStorage->getLatestRevisionId($entity->id());
       if ($latestRevisionId) {
-        /** @var \Drupal\Core\Entity\EntityInterface|\Drupal\Core\Entity\RevisionableInterface $latest */
+        /** @var EntityInterface|RevisionableInterface $latest */
         $newRevision = $entityStorage->loadRevision($latestRevisionId);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


40) modules/contrib/scheduled_transitions/src/Event/ScheduledTransitionsNewRevisionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to determine the new revision for a transition.
@@ @@
   /**
    * Scheduled transition entity.
    *
-   * @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface
+   * @var ScheduledTransitionInterface
    */
   protected $scheduledTransition;

@@ @@
   /**
    * The new revision to transition.
    *
-   * @var \Drupal\Core\Entity\RevisionableInterface|null
+   * @var RevisionableInterface|null
    */
   protected $newRevision;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsNewRevisionEvent.
    *
-   * @param \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduledTransition
+   * @param ScheduledTransitionInterface $scheduledTransition
    *   Scheduled transition entity.
    */
   public function __construct(ScheduledTransitionInterface $scheduledTransition) {
@@ @@
   /**
    * Gets the scheduled transition entity.
    *
-   * @return \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface
+   * @return ScheduledTransitionInterface
    *   A scheduled transition entity.
    */
   public function getScheduledTransition(): ScheduledTransitionInterface {
@@ @@
   /**
    * Get the new revision.
    *
-   * @return \Drupal\Core\Entity\RevisionableInterface|null
+   * @return RevisionableInterface|null
    *   The new revision.
    */
   public function getNewRevision(): ?RevisionableInterface {
@@ @@
   /**
    * Sets the new revision.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $newRevision
+   * @param RevisionableInterface $newRevision
    *   The new revision.
    */
   public function setNewRevision(RevisionableInterface $newRevision): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/scheduled_transitions/src/Entity/ScheduledTransitionInterface.php:30

    ---------- begin diff ----------
@@ @@
    *
    * Language code and revision ID are set with $revision context.
    *
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
    * @param string $state
    *   The state ID.
-   * @param \Drupal\Core\Entity\RevisionableInterface $revision
+   * @param RevisionableInterface $revision
    *   Set the revision this scheduled transition is for.
    * @param \DateTimeInterface $dateTime
    *   The transition date.
-   * @param \Drupal\Core\Session\AccountInterface $author
+   * @param AccountInterface $author
    *   The scheduled transition author.
    *
    * @return static
@@ @@
   /**
    * Get the entity this scheduled transition is for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity.
    */
   public function getEntity(): ?EntityInterface;
@@ @@
   /**
    * Set the revision this scheduled transition is for.
    *
-   * @param \Drupal\Core\Entity\RevisionableInterface $revision
+   * @param RevisionableInterface $revision
    *   The revision to be transitioned.
    *
    * @return static
@@ @@
   /**
    * Get the author for this scheduled transition.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The author.
    */
   public function getAuthor(): ?UserInterface;
@@ @@
   /**
    * Set the author of the scheduled transition.
    *
-   * @param \Drupal\Core\Session\AccountInterface $author
+   * @param AccountInterface $author
    *   The scheduled transition author.
    *
    * @return static
@@ @@
   /**
    * Get the workflow for this scheduled transition.
    *
-   * @return \Drupal\workflows\WorkflowInterface|null
+   * @return WorkflowInterface|null
    *   The workflow.
    */
   public function getWorkflow(): ?WorkflowInterface;
@@ @@
   /**
    * Set the new workflow and state for this scheduled transition.
    *
-   * @param \Drupal\workflows\WorkflowInterface $workflow
+   * @param WorkflowInterface $workflow
    *   The workflow.
    * @param string $state
    *   The state ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/scheduled_transitions/src/Commands/ScheduledTransitionsCommands.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Job runner for Scheduled Transitions.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsJobsInterface
+   * @var ScheduledTransitionsJobsInterface
    */
   protected $jobs;

@@ @@
   /**
    * Constructs a new ScheduledTransitionsCommands.
    *
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsJobsInterface $jobs
+   * @param ScheduledTransitionsJobsInterface $jobs
    *   Job runner for Scheduled Transitions.
    */
   public function __construct(ScheduledTransitionsJobsInterface $jobs) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/scheduled_transitions/src/Access/SupportsContentModerationAccessCheck.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * General service for moderation-related questions about Entity API.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * Utilities for Scheduled Transitions module.
    *
-   * @var \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface
+   * @var ScheduledTransitionsUtilityInterface
    */
   protected $scheduledTransitionsUtility;

@@ @@
   /**
    * Constructs a new SupportsContentModerationAccessCheck.
    *
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderationInformation
+   * @param ModerationInformationInterface $moderationInformation
    *   General service for moderation-related questions about Entity API.
-   * @param \Drupal\scheduled_transitions\ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
+   * @param ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility
    *   Utilities for Scheduled Transitions module.
    */
   public function __construct(ModerationInformationInterface $moderationInformation, ScheduledTransitionsUtilityInterface $scheduledTransitionsUtility) {
@@ @@
   /**
    * Checks the entity supports content moderation.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account): AccessResultInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


44) modules/contrib/scheduled_transitions/scheduled_transitions.api.php:10

    ---------- begin diff ----------
@@ @@

 declare(strict_types = 1);

+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent;
+use Drupal\scheduled_transitions\Event\ScheduledTransitionsEvents;
+
 /**
  * Event subscribers for Scheduled Transitions Field.
  *
@@ @@
  * ```
  * </code>
  */
-class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubscriberInterface {
+class MyEventSubscriber implements EventSubscriberInterface {

   /**
    * Custom logic to determine new revision for a scheduled transition.
    *
-   * @param \Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event
+   * @param ScheduledTransitionsNewRevisionEvent $event
    *   New revision event.
    */
-  public function newRevision(\Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event): void {
+  public function newRevision(ScheduledTransitionsNewRevisionEvent $event): void {
     $scheduledTransition = $event->getScheduledTransition();
     $entity = $scheduledTransition->getEntity();
     $newRevision = $entity;
@@ @@
    */
   public static function getSubscribedEvents(): array {
     return [
-      \Drupal\scheduled_transitions\Event\ScheduledTransitionsEvents::NEW_REVISION => ['newRevision'],
+      ScheduledTransitionsEvents::NEW_REVISION => ['newRevision'],
     ];
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 44 files have been changed by Rector                                      

