diff --git a/modules/typed_entity_example/src/Plugin/TypedRepositories/ArticleRepository.php b/modules/typed_entity_example/src/Plugin/TypedRepositories/ArticleRepository.php
index 54764b1..d37a7c0 100644
--- a/modules/typed_entity_example/src/Plugin/TypedRepositories/ArticleRepository.php
+++ b/modules/typed_entity_example/src/Plugin/TypedRepositories/ArticleRepository.php
@@ -46,10 +46,10 @@ final class ArticleRepository extends TypedRepositoryBase implements AccessibleI
    * @param string[] $tags
    *   The tags to search for.
    *
-   * @return \Drupal\typed_entity_example\WrappedEntities\Article[]
+   * @return Article[]
    *   The wrapped entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function findByTags(array $tags): array {
     $items = $this->findItemsByTags($tags);
@@ -87,7 +87,7 @@ final class ArticleRepository extends TypedRepositoryBase implements AccessibleI
    * @return array
    *   The result of the execution of the query.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function findItemsByTags(array $tags): array {
     $query = $this->getQuery();
diff --git a/modules/typed_entity_example/src/WrappedEntities/Article.php b/modules/typed_entity_example/src/WrappedEntities/Article.php
index c6342e7..eeae8f7 100644
--- a/modules/typed_entity_example/src/WrappedEntities/Article.php
+++ b/modules/typed_entity_example/src/WrappedEntities/Article.php
@@ -19,16 +19,16 @@ class Article extends WrappedEntityBase implements AccessibleInterface {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   private MessengerInterface $messenger;
 
   /**
    * Article constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityInterface $entity, MessengerInterface $messenger) {
diff --git a/modules/typed_entity_example/tests/src/Unit/Render/Article/FullTest.php b/modules/typed_entity_example/tests/src/Unit/Render/Article/FullTest.php
index efa0661..cef1fa7 100644
--- a/modules/typed_entity_example/tests/src/Unit/Render/Article/FullTest.php
+++ b/modules/typed_entity_example/tests/src/Unit/Render/Article/FullTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_entity_example\Unit\Render\Article;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\typed_entity\WrappedEntities\WrappedEntityInterface;
@@ -16,6 +17,7 @@ use Drupal\typed_entity_example\Render\Article\Full;
  */
 class FullTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the preprocessing for articles with the full view mode.
    *
diff --git a/modules/typed_entity_example/tests/src/Unit/WrappedEntities/UserTest.php b/modules/typed_entity_example/tests/src/Unit/WrappedEntities/UserTest.php
index 0438d34..690b0bc 100644
--- a/modules/typed_entity_example/tests/src/Unit/WrappedEntities/UserTest.php
+++ b/modules/typed_entity_example/tests/src/Unit/WrappedEntities/UserTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_entity_example\Unit\WrappedEntities;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\typed_entity_example\WrappedEntities\User;
@@ -15,6 +16,7 @@ use Drupal\typed_entity_example\WrappedEntities\User;
  */
 class UserTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests the nickname.
    *
diff --git a/modules/typed_entity_ui/src/Controller/ExploreDetails.php b/modules/typed_entity_ui/src/Controller/ExploreDetails.php
index 172a1f8..a4a8ef1 100644
--- a/modules/typed_entity_ui/src/Controller/ExploreDetails.php
+++ b/modules/typed_entity_ui/src/Controller/ExploreDetails.php
@@ -26,31 +26,32 @@ class ExploreDetails extends ControllerBase {
   /**
    * The entity type bundle service to discover & retrieve entity type bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $bundleInfo;
 
   /**
    * The repository manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager
+   * @var RepositoryManager
    */
   protected RepositoryManager $repositoryManager;
 
   /**
    * Constructs a new EntityBundlePicker form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity type bundle info service for discovering entity type bundles.
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The repository manager.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_info, RepositoryManager $repository_manager) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_info, RepositoryManager $repository_manager, RepositoryManager $repositoryManager) {
     $this->entityTypeManager = $entity_type_manager;
     $this->bundleInfo = $bundle_info;
     $this->repositoryManager = $repository_manager;
+    $this->repositoryManager = $repositoryManager;
   }
 
   /**
@@ -60,7 +61,7 @@ class ExploreDetails extends ControllerBase {
     return new static(
       $container->get('entity_type.manager'),
       $container->get('entity_type.bundle.info'),
-      $container->get(RepositoryManager::class)
+      $this->repositoryManager
     );
   }
 
@@ -70,7 +71,7 @@ class ExploreDetails extends ControllerBase {
    * @param string $typed_entity_id
    *   The typed entity ID.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The title.
    */
   public function title(string $typed_entity_id): MarkupInterface {
@@ -217,7 +218,7 @@ class ExploreDetails extends ControllerBase {
   /**
    * Hides the video thumbnail for admin interfaces.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response.
    */
   public function hideVideo(): AjaxResponse {
diff --git a/modules/typed_entity_ui/src/Form/ExploreForm.php b/modules/typed_entity_ui/src/Form/ExploreForm.php
index 567d874..c3b4567 100644
--- a/modules/typed_entity_ui/src/Form/ExploreForm.php
+++ b/modules/typed_entity_ui/src/Form/ExploreForm.php
@@ -27,48 +27,49 @@ class ExploreForm extends FormBase {
   /**
    * The entity type manager to manage entity type plugin definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The entity type bundle service to discover & retrieve entity type bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected EntityTypeBundleInfoInterface $bundleInfo;
 
   /**
    * The plugin manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager
+   * @var RepositoryManager
    */
   protected RepositoryManager $repositoryManager;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private StateInterface $state;
 
   /**
    * Constructs a new Explore form.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   The entity type bundle info service for discovering entity type bundles.
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The plugin manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state interface.
    */
-  public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, RepositoryManager $repository_manager, StateInterface $state) {
+  public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, RepositoryManager $repository_manager, StateInterface $state, RepositoryManager $repositoryManager) {
     $this->entityTypeManager = $entityTypeManager;
     $this->bundleInfo = $bundleInfo;
     $this->repositoryManager = $repository_manager;
     $this->state = $state;
+    $this->repositoryManager = $repositoryManager;
   }
 
   /**
@@ -78,7 +79,7 @@ class ExploreForm extends FormBase {
     return new static(
       $container->get('entity_type.manager'),
       $container->get('entity_type.bundle.info'),
-      $container->get(RepositoryManager::class),
+      $this->repositoryManager,
       $container->get('state')
     );
   }
@@ -208,7 +209,7 @@ class ExploreForm extends FormBase {
    *
    * @param array $form
    *   The render array of the currently built form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Object describing the current state of the form.
    *
    * @SuppressWarnings(PHPMD.UnusedFormalParameter)
diff --git a/modules/typed_entity_ui/src/Form/RepositoryTable/BuildRepositoryTableService.php b/modules/typed_entity_ui/src/Form/RepositoryTable/BuildRepositoryTableService.php
index 936be31..eaab586 100644
--- a/modules/typed_entity_ui/src/Form/RepositoryTable/BuildRepositoryTableService.php
+++ b/modules/typed_entity_ui/src/Form/RepositoryTable/BuildRepositoryTableService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_entity_ui\Form\RepositoryTable;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ -17,10 +18,10 @@ class BuildRepositoryTableService {
   /**
    * Application service executor.
    *
-   * @param \Drupal\typed_entity_ui\Form\RepositoryTable\RepositoryTableRequest $request
+   * @param RepositoryTableRequest $request
    *   The request object.
    *
-   * @return \Drupal\typed_entity_ui\Form\RepositoryTable\RepositoryTableResponse
+   * @return RepositoryTableResponse
    *   The response object.
    */
   public function execute(RepositoryTableRequest $request): RepositoryTableResponse {
@@ -43,7 +44,7 @@ class BuildRepositoryTableService {
   /**
    * Builds the table header.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The structured array with the header values.
    */
   protected function buildHeader(): array {
@@ -73,7 +74,7 @@ class BuildRepositoryTableService {
   /**
    * Builds a row of the table.
    *
-   * @param \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface $repository
+   * @param TypedRepositoryInterface $repository
    *   The repository to build the row for.
    *
    * @return array
diff --git a/modules/typed_entity_ui/src/Form/RepositoryTable/RepositoryTableRequest.php b/modules/typed_entity_ui/src/Form/RepositoryTable/RepositoryTableRequest.php
index 5dc06c6..c942662 100644
--- a/modules/typed_entity_ui/src/Form/RepositoryTable/RepositoryTableRequest.php
+++ b/modules/typed_entity_ui/src/Form/RepositoryTable/RepositoryTableRequest.php
@@ -12,14 +12,14 @@ class RepositoryTableRequest {
   /**
    * The plugin manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager
+   * @var RepositoryManager
    */
   protected RepositoryManager $repositoryManager;
 
   /**
    * RepositoryTableRequest constructor.
    *
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The plugin manager.
    */
   public function __construct(RepositoryManager $repository_manager) {
diff --git a/modules/typed_entity_ui/tests/src/Functional/ExploreDetailsTest.php b/modules/typed_entity_ui/tests/src/Functional/ExploreDetailsTest.php
index 4d9d989..b9cef8f 100644
--- a/modules/typed_entity_ui/tests/src/Functional/ExploreDetailsTest.php
+++ b/modules/typed_entity_ui/tests/src/Functional/ExploreDetailsTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\typed_entity_ui\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;
@@ -23,7 +27,7 @@ class ExploreDetailsTest extends BrowserTestBase {
   /**
    * An admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
@@ -52,7 +56,7 @@ class ExploreDetailsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -66,8 +70,8 @@ class ExploreDetailsTest extends BrowserTestBase {
   /**
    * Test the detail page for the Article.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ResponseTextException
+   * @throws ExpectationException
    */
   public function testDetailPageForArticle(): void {
     $page = $this->getSession()->getPage();
diff --git a/src/Annotation/ClassWithVariantsInterface.php b/src/Annotation/ClassWithVariantsInterface.php
index 9160f81..3c6814b 100644
--- a/src/Annotation/ClassWithVariantsInterface.php
+++ b/src/Annotation/ClassWithVariantsInterface.php
@@ -34,7 +34,7 @@ interface ClassWithVariantsInterface {
   /**
    * Given a context, negotiate a variant while falling back if none applies.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext|null $context
+   * @param TypedEntityContext|null $context
    *   The context object.
    * @param string $base_class
    *   A FQN for a base class the variants should extend.
diff --git a/src/Annotation/TypedRepository.php b/src/Annotation/TypedRepository.php
index 035b246..23f39fe 100644
--- a/src/Annotation/TypedRepository.php
+++ b/src/Annotation/TypedRepository.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_entity\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 use Drupal\typed_entity\TypedRepositories\TypedRepositoryBase;
 
@@ -29,16 +30,16 @@ class TypedRepository extends Plugin {
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
-  public \Drupal\Core\Annotation\Translation $description;
+  public Translation $description;
 
   /**
    * The available wrappers.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariants
+   * @var ClassWithVariants
    *   The wrapper with the variants.
    */
   public ClassWithVariants $wrappers;
@@ -46,7 +47,7 @@ class TypedRepository extends Plugin {
   /**
    * The available renderers.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariants
+   * @var ClassWithVariants
    *   The wrapper with the variants.
    */
   public ClassWithVariants $renderers;
diff --git a/src/Annotation/VariantInterface.php b/src/Annotation/VariantInterface.php
index 4a30c9b..5b35473 100644
--- a/src/Annotation/VariantInterface.php
+++ b/src/Annotation/VariantInterface.php
@@ -12,7 +12,7 @@ interface VariantInterface {
   /**
    * Checks if a variant should be used in a given context.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context.
    *
    * @return bool
diff --git a/src/EntityWrapperInterface.php b/src/EntityWrapperInterface.php
index 5fd5430..44087a2 100644
--- a/src/EntityWrapperInterface.php
+++ b/src/EntityWrapperInterface.php
@@ -13,10 +13,10 @@ interface EntityWrapperInterface {
   /**
    * Wraps an entity with business logic.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface|null
+   * @return WrappedEntityInterface|null
    *   The wrapped entity.
    */
   public function wrap(EntityInterface $entity): ?WrappedEntityInterface;
@@ -24,10 +24,10 @@ interface EntityWrapperInterface {
   /**
    * Wraps an entities with business logic.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entity to wrap.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped entities.
    */
   public function wrapMultiple(array $entities): array;
diff --git a/src/Render/TypedEntityRendererBase.php b/src/Render/TypedEntityRendererBase.php
index 23c5556..f529ff4 100644
--- a/src/Render/TypedEntityRendererBase.php
+++ b/src/Render/TypedEntityRendererBase.php
@@ -31,14 +31,14 @@ class TypedEntityRendererBase implements TypedEntityRendererInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * TypedEntityRendererBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Render/TypedEntityRendererInterface.php b/src/Render/TypedEntityRendererInterface.php
index 305e349..c62cd32 100644
--- a/src/Render/TypedEntityRendererInterface.php
+++ b/src/Render/TypedEntityRendererInterface.php
@@ -16,9 +16,9 @@ interface TypedEntityRendererInterface extends VariantInterface, ContainerInject
   /**
    * Returns a render array representation of the wrapped entity.
    *
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The wrapped entity to render.
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context this entity is rendered in. This contains arbitrary
    *   information on how to render the entity. Special keys:
    *     - 'view_mode': The view mode to use to render the entity. Leave it
@@ -38,9 +38,9 @@ interface TypedEntityRendererInterface extends VariantInterface, ContainerInject
    *
    * @param array $build
    *   The render array being preprocessed.
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The wrapped entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display.
    *
    * @see ::preprocess()
@@ -52,7 +52,7 @@ interface TypedEntityRendererInterface extends VariantInterface, ContainerInject
    *
    * @param array $build
    *   The renderable array generated by the EntityDisplay.
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The wrapped entity.
    * @param array $context
    *   An associative array containing:
@@ -67,7 +67,7 @@ interface TypedEntityRendererInterface extends VariantInterface, ContainerInject
    *
    * @param array $variables
    *   The render array passed by reference.
-   * @param \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface $wrapped_entity
+   * @param WrappedEntityInterface $wrapped_entity
    *   The typed entity being processed. It is only here for context. It is not
    *   recommended to extract data from the entity directly without passing it
    *   through the render pipeline.
diff --git a/src/RepositoryManager.php b/src/RepositoryManager.php
index d236c88..51763f4 100644
--- a/src/RepositoryManager.php
+++ b/src/RepositoryManager.php
@@ -18,14 +18,14 @@ class RepositoryManager implements EntityWrapperInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The plugin manager.
    *
-   * @var \Drupal\typed_entity\TypedRepositoryPluginManager
+   * @var TypedRepositoryPluginManager
    */
   private TypedRepositoryPluginManager $pluginManager;
 
@@ -39,9 +39,9 @@ class RepositoryManager implements EntityWrapperInterface {
   /**
    * RepositoryManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\typed_entity\TypedRepositoryPluginManager $plugin_manager
+   * @param TypedRepositoryPluginManager $plugin_manager
    *   The plugin manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TypedRepositoryPluginManager $plugin_manager) {
@@ -52,7 +52,7 @@ class RepositoryManager implements EntityWrapperInterface {
   /**
    * Get all the repositories.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface[]
+   * @return TypedRepositoryInterface[]
    *   The repositories.
    *
    * @see get
@@ -73,7 +73,7 @@ class RepositoryManager implements EntityWrapperInterface {
    * @param string $repository_id
    *   The repository identifier.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The repository.
    */
   public function get(string $repository_id): ?TypedRepositoryInterface {
@@ -111,7 +111,7 @@ class RepositoryManager implements EntityWrapperInterface {
    * @param string $repository_id
    *   The repository ID.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The plugin object.
    */
   private function deriverPluginReducer(
@@ -163,10 +163,10 @@ class RepositoryManager implements EntityWrapperInterface {
   /**
    * Gets the entity repository based on the entity information and the variant.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to extract info for.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The repository for the entity.
    */
   public function repositoryFromEntity(EntityInterface $entity): ?TypedRepositoryInterface {
@@ -181,7 +181,7 @@ class RepositoryManager implements EntityWrapperInterface {
    * @param string $bundle
    *   The bundle machine name.
    *
-   * @return \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @return TypedRepositoryInterface|null
    *   The repository for the entity.
    */
   public function repository(string $entity_type_id, string $bundle = ''): ?TypedRepositoryInterface {
diff --git a/src/TypedRepositories/TypedRepositoryBase.php b/src/TypedRepositories/TypedRepositoryBase.php
index ecce47b..31361a9 100644
--- a/src/TypedRepositories/TypedRepositoryBase.php
+++ b/src/TypedRepositories/TypedRepositoryBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\typed_entity\TypedRepositories;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -24,21 +27,21 @@ class TypedRepositoryBase extends PluginBase implements TypedRepositoryInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected ContainerInterface $container;
 
   /**
    * The entity type for this repository.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
@@ -52,14 +55,14 @@ class TypedRepositoryBase extends PluginBase implements TypedRepositoryInterface
   /**
    * The renderers for this repository.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariantsInterface
+   * @var ClassWithVariantsInterface
    */
   protected $renderers;
 
   /**
    * The wrappers for this repository.
    *
-   * @var \Drupal\typed_entity\Annotation\ClassWithVariantsInterface
+   * @var ClassWithVariantsInterface
    */
   protected $wrappers;
 
@@ -72,11 +75,11 @@ class TypedRepositoryBase extends PluginBase implements TypedRepositoryInterface
    *   Plugin ID.
    * @param array $plugin_definition
    *   Plugin definition.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
    * @throws \UnexpectedValueException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, string $plugin_id, array $plugin_definition, ContainerInterface $container) {
     $this->container = $container;
@@ -93,7 +96,7 @@ class TypedRepositoryBase extends PluginBase implements TypedRepositoryInterface
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static($configuration, $plugin_id, $plugin_definition, $container);
@@ -237,10 +240,10 @@ class TypedRepositoryBase extends PluginBase implements TypedRepositoryInterface
    * @param array $items
    *   The array containing the IDs of the entities to wrap.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function wrapMultipleById(array $items): array {
     // Load all the entities that we found.
@@ -260,11 +263,11 @@ class TypedRepositoryBase extends PluginBase implements TypedRepositoryInterface
    * @param string $operation
    *   The entity operation to use this for. Defaults to 'view'.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function wrapAll(string $operation = 'view'): array {
     $bundle_key = $this->entityType->getKey('bundle');
@@ -293,8 +296,8 @@ class TypedRepositoryBase extends PluginBase implements TypedRepositoryInterface
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function createEntity(array $values = []): WrappedEntityInterface {
     // Autoset the bundle key, if the typed repository has a bundle and the
diff --git a/src/TypedRepositories/TypedRepositoryInterface.php b/src/TypedRepositories/TypedRepositoryInterface.php
index c13ed01..d54628d 100644
--- a/src/TypedRepositories/TypedRepositoryInterface.php
+++ b/src/TypedRepositories/TypedRepositoryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_entity\TypedRepositories;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\typed_entity\EntityWrapperInterface;
@@ -37,10 +38,10 @@ interface TypedRepositoryInterface extends EntityWrapperInterface {
   /**
    * Gets a query to start finding items.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The query to execute.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getQuery(): QueryInterface;
 
@@ -60,10 +61,10 @@ interface TypedRepositoryInterface extends EntityWrapperInterface {
    * Override this method in your repository for more nuanced rules on when to
    * use a wrapper or another.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context used for render.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface|null
+   * @return WrappedEntityInterface|null
    *   The first renderer that applies.
    */
   public function wrapperFactory(TypedEntityContext $context): ?WrappedEntityInterface;
@@ -74,10 +75,10 @@ interface TypedRepositoryInterface extends EntityWrapperInterface {
    * Override this method in your repository for more nuanced rules on when to
    * use a renderer or another.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context used for render.
    *
-   * @return \Drupal\typed_entity\Render\TypedEntityRendererInterface|null
+   * @return TypedEntityRendererInterface|null
    *   The first renderer that applies.
    */
   public function rendererFactory(TypedEntityContext $context): ?TypedEntityRendererInterface;
@@ -93,7 +94,7 @@ interface TypedRepositoryInterface extends EntityWrapperInterface {
   /**
    * Get the entity type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity type.
    */
   public function getEntityType(): EntityTypeInterface;
@@ -106,7 +107,7 @@ interface TypedRepositoryInterface extends EntityWrapperInterface {
    *   The bundle is automatically set, if the entity supports it and the typed
    *   repository has one set.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface
+   * @return WrappedEntityInterface
    *   The wrapped entity.
    */
   public function createEntity(array $values = []): WrappedEntityInterface;
diff --git a/src/TypedRepositoryPluginManager.php b/src/TypedRepositoryPluginManager.php
index e238764..1fafa17 100644
--- a/src/TypedRepositoryPluginManager.php
+++ b/src/TypedRepositoryPluginManager.php
@@ -19,9 +19,9 @@ class TypedRepositoryPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/WrappedEntities/WrappedEntityBase.php b/src/WrappedEntities/WrappedEntityBase.php
index 20b5b2d..fe487c5 100644
--- a/src/WrappedEntities/WrappedEntityBase.php
+++ b/src/WrappedEntities/WrappedEntityBase.php
@@ -23,28 +23,28 @@ abstract class WrappedEntityBase implements WrappedEntityInterface {
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected EntityInterface $entity;
 
   /**
    * The view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface|null
+   * @var EntityViewBuilderInterface|null
    */
   protected ?EntityViewBuilderInterface $viewBuilder;
 
   /**
    * The repository manager.
    *
-   * @var \Drupal\typed_entity\RepositoryManager|null
+   * @var RepositoryManager|null
    */
   protected ?RepositoryManager $repositoryManager;
 
   /**
    * WrappedEntityBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    */
   public function __construct(EntityInterface $entity) {
@@ -89,7 +89,7 @@ abstract class WrappedEntityBase implements WrappedEntityInterface {
    * @param string $field_name
    *   The name of the entity reference field.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface[]
+   * @return WrappedEntityInterface[]
    *   The wrapped referenced entities.
    */
   public function wrapReferences(string $field_name): array {
@@ -111,7 +111,7 @@ abstract class WrappedEntityBase implements WrappedEntityInterface {
    * @param string $field_name
    *   The name of the entity reference field.
    *
-   * @return \Drupal\typed_entity\WrappedEntities\WrappedEntityInterface|null
+   * @return WrappedEntityInterface|null
    *   The wrapped referenced entity.
    */
   public function wrapReference(string $field_name): ?WrappedEntityInterface {
@@ -125,7 +125,7 @@ abstract class WrappedEntityBase implements WrappedEntityInterface {
   /**
    * Lazy initialized of the repository manager.
    *
-   * @return \Drupal\typed_entity\RepositoryManager
+   * @return RepositoryManager
    *   The repository manager.
    */
   protected function repositoryManager(): RepositoryManager {
@@ -138,7 +138,7 @@ abstract class WrappedEntityBase implements WrappedEntityInterface {
   /**
    * Lazy initialized of the view builder.
    *
-   * @return \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @return EntityViewBuilderInterface
    *   The repository manager.
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
@@ -157,7 +157,7 @@ abstract class WrappedEntityBase implements WrappedEntityInterface {
    *
    * This is mostly here for testing ergonomics.
    *
-   * @param \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder
+   * @param EntityViewBuilderInterface $view_builder
    *   The view builder.
    */
   public function setViewBuilder(EntityViewBuilderInterface $view_builder): void {
@@ -169,7 +169,7 @@ abstract class WrappedEntityBase implements WrappedEntityInterface {
    *
    * This is mostly here for testing ergonomics.
    *
-   * @param \Drupal\typed_entity\RepositoryManager $repository_manager
+   * @param RepositoryManager $repository_manager
    *   The manager.
    */
   public function setRepositoryManager(RepositoryManager $repository_manager): void {
diff --git a/src/WrappedEntities/WrappedEntityInterface.php b/src/WrappedEntities/WrappedEntityInterface.php
index e520f4b..8e05097 100644
--- a/src/WrappedEntities/WrappedEntityInterface.php
+++ b/src/WrappedEntities/WrappedEntityInterface.php
@@ -18,7 +18,7 @@ interface WrappedEntityInterface extends VariantInterface {
    * entity. In code you maintain/control you should always pass a wrapper and
    * work with its methods.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The wrapped entity.
    */
   public function getEntity(): EntityInterface;
@@ -31,9 +31,9 @@ interface WrappedEntityInterface extends VariantInterface {
    * class, but not the container itself. Every call to this method must return
    * a new instance of this class; that is, it may not implement a singleton.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container this instance should use.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to wrap.
    */
   public static function create(ContainerInterface $container, EntityInterface $entity);
diff --git a/src/WrappedEntityVariants/EmptyFieldVariantCondition.php b/src/WrappedEntityVariants/EmptyFieldVariantCondition.php
index 20d58a0..421f172 100644
--- a/src/WrappedEntityVariants/EmptyFieldVariantCondition.php
+++ b/src/WrappedEntityVariants/EmptyFieldVariantCondition.php
@@ -16,7 +16,7 @@ class EmptyFieldVariantCondition extends FieldValueVariantCondition {
    *
    * @param string $field_name
    *   Name of the field that contains the data.
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context.
    * @param bool $is_negated
    *   Inverse the result of the evaluation.
diff --git a/src/WrappedEntityVariants/FieldValueVariantCondition.php b/src/WrappedEntityVariants/FieldValueVariantCondition.php
index e58445a..333993c 100644
--- a/src/WrappedEntityVariants/FieldValueVariantCondition.php
+++ b/src/WrappedEntityVariants/FieldValueVariantCondition.php
@@ -35,7 +35,7 @@ class FieldValueVariantCondition extends VariantConditionBase {
    *   Name of the field that contains the data.
    * @param mixed $value
    *   The value to check for.
-   * @param \Drupal\typed_entity\TypedEntityContext $context
+   * @param TypedEntityContext $context
    *   The context.
    * @param bool $is_negated
    *   Inverse the result of the evaluation.
@@ -51,7 +51,7 @@ class FieldValueVariantCondition extends VariantConditionBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
+   * @throws InvalidValueException
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
diff --git a/src/WrappedEntityVariants/VariantConditionBase.php b/src/WrappedEntityVariants/VariantConditionBase.php
index 50585c5..168e78c 100644
--- a/src/WrappedEntityVariants/VariantConditionBase.php
+++ b/src/WrappedEntityVariants/VariantConditionBase.php
@@ -22,14 +22,14 @@ abstract class VariantConditionBase implements VariantConditionInterface {
   /**
    * The context.
    *
-   * @var \Drupal\typed_entity\TypedEntityContext
+   * @var TypedEntityContext
    */
   protected TypedEntityContext $context;
 
   /**
    * VariantConditionBase constructor.
    *
-   * @param \Drupal\typed_entity\TypedEntityContext|null $context
+   * @param TypedEntityContext|null $context
    *   The context.
    * @param bool $is_negated
    *   Inverse the result of the evaluation.
diff --git a/src/WrappedEntityVariants/VariantConditionInterface.php b/src/WrappedEntityVariants/VariantConditionInterface.php
index c84060e..0bf0c32 100644
--- a/src/WrappedEntityVariants/VariantConditionInterface.php
+++ b/src/WrappedEntityVariants/VariantConditionInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\typed_entity\WrappedEntityVariants;
 
+use Drupal\typed_entity\InvalidValueException;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
@@ -23,14 +24,14 @@ interface VariantConditionInterface {
    * @return bool
    *   TRUE if the condition is fulfilled.
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
+   * @throws InvalidValueException
    */
   public function evaluate(): bool;
 
   /**
    * A human readable summary of the condition. Used for interface purposes.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The summary.
    */
   public function summary(): TranslatableMarkup;
@@ -38,7 +39,7 @@ interface VariantConditionInterface {
   /**
    * Validates the context.
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
+   * @throws InvalidValueException
    */
   public function validateContext(): void;
 
diff --git a/tests/modules/typed_entity_test/src/Render/Article/ConditionalRenderer.php b/tests/modules/typed_entity_test/src/Render/Article/ConditionalRenderer.php
index 8d36cec..a26558b 100644
--- a/tests/modules/typed_entity_test/src/Render/Article/ConditionalRenderer.php
+++ b/tests/modules/typed_entity_test/src/Render/Article/ConditionalRenderer.php
@@ -16,7 +16,7 @@ final class ConditionalRenderer extends TypedEntityRendererBase {
   /**
    * The state manager.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private StateInterface $state;
 
diff --git a/tests/src/Kernel/EmptyFieldVariantConditionTest.php b/tests/src/Kernel/EmptyFieldVariantConditionTest.php
index 16b74a6..56fded6 100644
--- a/tests/src/Kernel/EmptyFieldVariantConditionTest.php
+++ b/tests/src/Kernel/EmptyFieldVariantConditionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\typed_entity\Kernel;
 
+use Drupal\typed_entity\InvalidValueException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\typed_entity\TypedEntityContext;
 use Drupal\typed_entity\WrappedEntityVariants\EmptyFieldVariantCondition;
@@ -20,10 +22,10 @@ class EmptyFieldVariantConditionTest extends KernelTestBase {
    *
    * @covers ::evaluate
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\typed_entity\InvalidValueException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidValueException
+   * @throws EntityStorageException
+   * @throws InvalidValueException
+   * @throws EntityStorageException
    */
   public function testEvalutate(): void {
     $article = Node::create([
diff --git a/tests/src/Kernel/FieldValueVariantConditionTest.php b/tests/src/Kernel/FieldValueVariantConditionTest.php
index a11c854..327f975 100644
--- a/tests/src/Kernel/FieldValueVariantConditionTest.php
+++ b/tests/src/Kernel/FieldValueVariantConditionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_entity\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\typed_entity\InvalidValueException;
 use Drupal\typed_entity\TypedEntityContext;
@@ -34,8 +35,8 @@ class FieldValueVariantConditionTest extends KernelTestBase {
    *
    * @covers ::evaluate
    *
-   * @throws \Drupal\typed_entity\InvalidValueException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidValueException
+   * @throws EntityStorageException
    */
   public function testEvalutate(): void {
     $article = Node::create([
@@ -84,7 +85,7 @@ class FieldValueVariantConditionTest extends KernelTestBase {
    *
    * @covers ::validateContext
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testValidateContextNoField(): void {
     $node = Node::create([
diff --git a/tests/src/Kernel/KernelTestBase.php b/tests/src/Kernel/KernelTestBase.php
index b91b6cf..1f79c5a 100644
--- a/tests/src/Kernel/KernelTestBase.php
+++ b/tests/src/Kernel/KernelTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_entity\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase as BaseTestsKernelTestBase;
@@ -31,7 +32,7 @@ abstract class KernelTestBase extends BaseTestsKernelTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -87,7 +88,7 @@ abstract class KernelTestBase extends BaseTestsKernelTestBase {
    * @return array
    *   An array of article nodes.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createArticles(): array {
     $node = Node::create([
diff --git a/tests/src/Kernel/RepositoryManagerTest.php b/tests/src/Kernel/RepositoryManagerTest.php
index 012de2d..3491c5d 100644
--- a/tests/src/Kernel/RepositoryManagerTest.php
+++ b/tests/src/Kernel/RepositoryManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_entity\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\typed_entity\TypedRepositories\TypedRepositoryBase;
 use Drupal\typed_entity_test\Plugin\TypedRepositories\ArticleRepository;
@@ -37,7 +38,7 @@ class RepositoryManagerTest extends KernelTestBase {
    *
    * @covers ::repositoryFromEntity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testRepositoryFromEntity(): void {
     $node = Node::create([
@@ -56,7 +57,7 @@ class RepositoryManagerTest extends KernelTestBase {
    *
    * @covers ::wrap
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrap(): void {
     $node = Node::create([
@@ -75,7 +76,7 @@ class RepositoryManagerTest extends KernelTestBase {
    *
    * @covers ::wrapMultiple
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapMultiple(): void {
     $manager = typed_entity_repository_manager();
diff --git a/tests/src/Kernel/TypedEntityRendererTest.php b/tests/src/Kernel/TypedEntityRendererTest.php
index bc083fc..89aa612 100644
--- a/tests/src/Kernel/TypedEntityRendererTest.php
+++ b/tests/src/Kernel/TypedEntityRendererTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_entity\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface;
 use Drupal\node\Entity\Node;
@@ -26,30 +27,30 @@ class TypedEntityRendererTest extends KernelTestBase {
   /**
    * A test article.
    *
-   * @var \Drupal\Core\Entity\FieldableEntityInterface
+   * @var FieldableEntityInterface
    */
   private FieldableEntityInterface $article;
 
   /**
    * A test entity wrapper.
    *
-   * @var \Drupal\typed_entity_test\Plugin\TypedRepositories\ArticleRepository
+   * @var ArticleRepository
    */
   private ArticleRepository $articleRepository;
 
   /**
    * A test entity wrapper.
    *
-   * @var \Drupal\typed_entity\TypedRepositories\TypedRepositoryInterface|null
+   * @var TypedRepositoryInterface|null
    */
   private ?TypedRepositoryInterface $pageRepository;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
+   * @throws EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
diff --git a/tests/src/Kernel/TypedEntityRepositoryTest.php b/tests/src/Kernel/TypedEntityRepositoryTest.php
index 0ed5db0..8905ef2 100644
--- a/tests/src/Kernel/TypedEntityRepositoryTest.php
+++ b/tests/src/Kernel/TypedEntityRepositoryTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\typed_entity\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\node\Entity\Node as DrupalNode;
 use Drupal\typed_entity_test\WrappedEntities\Article;
 use Drupal\typed_entity_test\WrappedEntities\NewsArticle;
@@ -23,7 +25,7 @@ class TypedEntityRepositoryTest extends KernelTestBase {
    *
    * @covers ::wrap
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrap(): void {
     $article = DrupalNode::create([
@@ -74,7 +76,7 @@ class TypedEntityRepositoryTest extends KernelTestBase {
    *
    * @covers ::wrapMultiple
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapMultiple(): void {
     $repository = typed_entity_repository_manager()->get('node.article');
@@ -100,8 +102,8 @@ class TypedEntityRepositoryTest extends KernelTestBase {
    *
    * @covers ::getQuery
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws EntityStorageException
+   * @throws PluginException
    */
   public function testGetQuery(): void {
     $repository = typed_entity_repository_manager()->get('node.article');
diff --git a/tests/src/Kernel/WrappedEntityBaseTest.php b/tests/src/Kernel/WrappedEntityBaseTest.php
index 06382da..98abf6a 100644
--- a/tests/src/Kernel/WrappedEntityBaseTest.php
+++ b/tests/src/Kernel/WrappedEntityBaseTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\typed_entity\Kernel;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\typed_entity_test\WrappedEntities\Article;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
 use Drupal\typed_entity_test\WrappedEntities\Page;
@@ -20,21 +23,21 @@ class WrappedEntityBaseTest extends KernelTestBase {
   /**
    * A test node.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   private $node;
 
   /**
    * A test entity wrapper.
    *
-   * @var \Drupal\typed_entity_test\WrappedEntities\Article
+   * @var Article
    */
   private $wrapper;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -74,7 +77,7 @@ class WrappedEntityBaseTest extends KernelTestBase {
    *
    * @covers ::wrapReferences
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapReferences(): void {
     $page = Node::create([
@@ -112,7 +115,7 @@ class WrappedEntityBaseTest extends KernelTestBase {
    *
    * @covers ::wrapReference
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testWrapReference(): void {
     static::assertNull($this->wrapper->wrapReference('field_related_pages'));
diff --git a/tests/src/Unit/RepositoryManagerTest.php b/tests/src/Unit/RepositoryManagerTest.php
index f118a32..f62e705 100644
--- a/tests/src/Unit/RepositoryManagerTest.php
+++ b/tests/src/Unit/RepositoryManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\typed_entity\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Tests\UnitTestCase;
@@ -20,10 +21,11 @@ use Prophecy\Argument;
  */
 class RepositoryManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::get
    * @dataProvider getDataProvider
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function testGet($entity_type_id, $bundle, $times): void {
     $plugin_manager = $this->prophesize(TypedRepositoryPluginManager::class);
@@ -57,7 +59,7 @@ class RepositoryManagerTest extends UnitTestCase {
   /**
    * @covers ::get
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function testGetNull(): void {
     $plugin_manager = $this->prophesize(TypedRepositoryPluginManager::class);
diff --git a/typed_entity.module b/typed_entity.module
index 4a737f6..b135ab9 100644
--- a/typed_entity.module
+++ b/typed_entity.module
@@ -56,7 +56,7 @@ function typed_entity_entity_display_build_alter(&$build, $context) {
 /**
  * A type hinted helper for .module files to get the repository manager.
  *
- * @return \Drupal\typed_entity\RepositoryManager
+ * @return RepositoryManager
  *   The repository manager.
  */
 function typed_entity_repository_manager(): RepositoryManager {
@@ -68,7 +68,7 @@ function typed_entity_repository_manager(): RepositoryManager {
 /**
  * Finds the renderer for the entity with the render array.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  * @param array $build
  *   The render array.
@@ -92,10 +92,10 @@ function _typed_entity_find_renderer(EntityInterface $entity, array $build): arr
  *
  * @param array $variables
  *   The variables array.
- * @param \Drupal\Core\Entity\EntityInterface|null $entity
+ * @param EntityInterface|null $entity
  *   The entity.
  *
- * @return \Drupal\typed_entity\TypedEntityContext
+ * @return TypedEntityContext
  *   The render context.
  */
 function _typed_entity_build_render_context(array $variables, EntityInterface $entity = NULL): TypedEntityContext {
