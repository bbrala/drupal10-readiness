diff --git a/src/Annotation/SiteAuditCheck.php b/src/Annotation/SiteAuditCheck.php
index a4ba62e..a2ff919 100644
--- a/src/Annotation/SiteAuditCheck.php
+++ b/src/Annotation/SiteAuditCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_audit\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class SiteAuditCheck extends Plugin {
   /**
    * The label/name of the check.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class SiteAuditCheck extends Plugin {
   /**
    * The description of the check.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -50,7 +51,7 @@ class SiteAuditCheck extends Plugin {
   /**
    * The report for the check.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/SiteAuditReport.php b/src/Annotation/SiteAuditReport.php
index efd06ca..0ccc38e 100644
--- a/src/Annotation/SiteAuditReport.php
+++ b/src/Annotation/SiteAuditReport.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_audit\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class SiteAuditReport extends Plugin {
   /**
    * The label/name of the report.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class SiteAuditReport extends Plugin {
   /**
    * The description of the report.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/SiteAuditCommands.php b/src/Commands/SiteAuditCommands.php
index cf8f7c1..d8e8e15 100644
--- a/src/Commands/SiteAuditCommands.php
+++ b/src/Commands/SiteAuditCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_audit\Commands;
 
+use Drush\Exceptions\UserAbortException;
 use Drupal\site_audit\Plugin\SiteAuditCheckManager;
 use Drupal\site_audit\Plugin\SiteAuditReportManager;
 use Drupal\site_audit\Renderer\Html;
@@ -32,23 +33,23 @@ class SiteAuditCommands extends DrushCommands implements IOAwareInterface, Logge
   /**
    * The Site Audit Check manager.
    *
-   * @var \Drupal\site_audit\Plugin\SiteAuditCheckManager
+   * @var SiteAuditCheckManager
    */
   protected $auditCheckManager;
 
   /**
    * The Site Audit Report manager.
    *
-   * @var \Drupal\site_audit\Plugin\SiteAuditReportManager
+   * @var SiteAuditReportManager
    */
   protected $auditReportManager;
 
   /**
    * Constructs the SiteAuditCommands.
    *
-   * @param \Drupal\site_audit\Plugin\SiteAuditCheckManager $auditCheckManager
+   * @param SiteAuditCheckManager $auditCheckManager
    *   The Site Audit Check manager.
-   * @param \Drupal\site_audit\Plugin\SiteAuditReportManager $auditReportManager
+   * @param SiteAuditReportManager $auditReportManager
    *   The Site Audit Report manager.
    */
   public function __construct(SiteAuditCheckManager $auditCheckManager, SiteAuditReportManager $auditReportManager) {
@@ -185,7 +186,7 @@ class SiteAuditCommands extends DrushCommands implements IOAwareInterface, Logge
    * @hook interact site_audit:audit
    * @param $input
    * @param $output
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   public function interactSiteAudit($input, $output) {
     $boot_manager = Drush::bootstrapManager();
@@ -225,7 +226,7 @@ class SiteAuditCommands extends DrushCommands implements IOAwareInterface, Logge
    * @command site_audit:list
    * @aliases audit-list
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    */
   public function list() {
     $reportDefinitions = $this->auditReportManager->getDefinitions();
diff --git a/src/Controller/SiteAuditController.php b/src/Controller/SiteAuditController.php
index 78d4a4f..5383a24 100644
--- a/src/Controller/SiteAuditController.php
+++ b/src/Controller/SiteAuditController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_audit\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\site_audit\Plugin\SiteAuditReportManager;
@@ -16,25 +17,25 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class SiteAuditController extends ControllerBase {
   /**
-  * The Site Audit Report manager.
-  *
-  * @var \Drupal\site_audit\Plugin\SiteAuditReportManager
-  */
+   * The Site Audit Report manager.
+   *
+   * @var SiteAuditReportManager
+   */
   private $auditReportManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private $requestStack;
 
   /**
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
-   * @param \Drupal\site_audit\Plugin\SiteAuditReportManager $auditReportManager
+   * @param SiteAuditReportManager $auditReportManager
    *   The Site Audit Report manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestStack $requestStack, SiteAuditReportManager $auditReportManager) {
@@ -60,7 +61,7 @@ class SiteAuditController extends ControllerBase {
    * @return string
    *   Rendered report output.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function audit() {
     $reportDefinitions = $this->auditReportManager->getDefinitions();
diff --git a/src/Form/SiteAuditConfigForm.php b/src/Form/SiteAuditConfigForm.php
index 04f7e7c..80d62a1 100644
--- a/src/Form/SiteAuditConfigForm.php
+++ b/src/Form/SiteAuditConfigForm.php
@@ -17,15 +17,15 @@ class SiteAuditConfigForm extends ConfigFormBase {
 
 
   /**
-   * @var \Drupal\site_audit\Plugin\SiteAuditReportManager
+   * @var SiteAuditReportManager
    */
   protected $report_plugin_manager;
 
   /**
    * SiteAuditConfigForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\site_audit\Plugin\SiteAuditReportManager $site_audit_report_manager
+   * @param ConfigFactoryInterface $config_factory
+   * @param SiteAuditReportManager $site_audit_report_manager
    */
   public function __construct(ConfigFactoryInterface $config_factory, SiteAuditReportManager $site_audit_report_manager) {
     parent::__construct($config_factory);
diff --git a/src/Plugin/SiteAuditCheck/ContentFieldInstances.php b/src/Plugin/SiteAuditCheck/ContentFieldInstances.php
index 3d73ede..07c3b9f 100644
--- a/src/Plugin/SiteAuditCheck/ContentFieldInstances.php
+++ b/src/Plugin/SiteAuditCheck/ContentFieldInstances.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\site_audit\Plugin\SiteAuditCheck;
 
+use Drupal\Core\Database\Database;
 use Drupal\site_audit\Plugin\SiteAuditCheckBase;
 
 /**
@@ -87,7 +88,7 @@ class ContentFieldInstances extends SiteAuditCheckBase {
         foreach ($description['bundles'] as $bundle) {
           if ($description['type'] == 'address') {
             // Directly query tables for Address fields.
-            $database = \Drupal\Core\Database\Database::getConnection();
+            $database = Database::getConnection();
             $table = $entity . '__' . $field;
             $query = $database->select($table);
             // Address fields are configured by country code.
@@ -97,7 +98,7 @@ class ContentFieldInstances extends SiteAuditCheckBase {
           }
           elseif ($description['type'] == 'geolocation') {
             // Directly query tables for Geolocation fields.
-            $database = \Drupal\Core\Database\Database::getConnection();
+            $database = Database::getConnection();
             $table = $entity . '__' . $field;
             $query = $database->select($table);
             // Geolocation fields are configured by latitude value.
@@ -107,7 +108,7 @@ class ContentFieldInstances extends SiteAuditCheckBase {
           }
           elseif ($description['type'] == 'name') {
             // Directly query tables for Name fields.
-            $database = \Drupal\Core\Database\Database::getConnection();
+            $database = Database::getConnection();
             $table = $entity . '__' . $field;
             $query = $database->select($table);
             $query->condition('bundle', $bundle);
diff --git a/src/Plugin/SiteAuditCheckManager.php b/src/Plugin/SiteAuditCheckManager.php
index 5c04600..fd0aa1f 100644
--- a/src/Plugin/SiteAuditCheckManager.php
+++ b/src/Plugin/SiteAuditCheckManager.php
@@ -17,9 +17,9 @@ class SiteAuditCheckManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/SiteAuditReportManager.php b/src/Plugin/SiteAuditReportManager.php
index cd5bfb9..37bd6ca 100644
--- a/src/Plugin/SiteAuditReportManager.php
+++ b/src/Plugin/SiteAuditReportManager.php
@@ -17,9 +17,9 @@ class SiteAuditReportManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Renderer/Html.php b/src/Renderer/Html.php
index 1996019..be4a415 100644
--- a/src/Renderer/Html.php
+++ b/src/Renderer/Html.php
@@ -354,7 +354,7 @@ class Html extends Renderer {
    * Render the results as a table.
    */
   public function table($element) {
-    return render($element);
+    return \Drupal::service('renderer')->render($element);
   }
 
   /**
@@ -368,7 +368,7 @@ class Html extends Renderer {
    * Provide the bootstrap derived styles.
    */
   private function getStyles() {
-    $file = drupal_get_path('module', 'site_audit') . '/css/bootstrap-overrides.css';
+    $file = \Drupal::service('extension.list.module')->getPath('site_audit') . '/css/bootstrap-overrides.css';
     $styles = "/* $file */\n" . file_get_contents($file);
     return $styles;
   }
