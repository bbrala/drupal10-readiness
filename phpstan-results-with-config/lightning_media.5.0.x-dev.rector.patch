diff --git a/lightning_media.install b/lightning_media.install
index e995527..64f7145 100644
--- a/lightning_media.install
+++ b/lightning_media.install
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\editor\EditorInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\entity_browser\WidgetInterface;
+use Drupal\views\ViewEntityInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains install and update routines for Lightning Media.
@@ -147,7 +152,7 @@ function lightning_media_update_8008() {
  * Changes the media_library CKEditor button to media_browser.
  */
 function lightning_media_update_8009() {
-  /** @var \Drupal\editor\EditorInterface $editor */
+  /** @var EditorInterface $editor */
   $editor = Editor::load('rich_text');
   if ($editor) {
     $settings = $editor->getSettings();
@@ -183,19 +188,19 @@ function lightning_media_update_8011() {
  * Adds the library filter to the media view's Entity Browser display.
  */
 function lightning_media_update_8012() {
-  /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+  /** @var EntityBrowserInterface $browser */
   $browser = EntityBrowser::load('media_browser');
   if (empty($browser)) {
     return;
   }
 
-  /** @var \Drupal\entity_browser\WidgetInterface $widget */
+  /** @var WidgetInterface $widget */
   foreach ($browser->getWidgets() as $widget) {
     if ($widget->getPluginId() == 'view') {
       $configuration = $widget->getConfiguration();
 
       if ($configuration['settings']['view'] == 'media') {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = View::load('media');
         // Reference the display options directly, for readability.
         $display = &$view->getDisplay($configuration['settings']['view_display'])['display_options'];
@@ -265,7 +270,7 @@ function lightning_media_update_8016() {
 function lightning_media_update_8017() {
   \Drupal::service('plugin.manager.field.widget')->clearCachedDefinitions();
 
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+  /** @var EntityFormDisplayInterface $form_display */
   foreach (EntityFormDisplay::loadMultiple() as $form_display) {
     foreach ($form_display->getComponents() as $key => $component) {
       if ($component['type'] == 'image_immutable') {
diff --git a/lightning_media.module b/lightning_media.module
index 5e17bfc..c8e4173 100644
--- a/lightning_media.module
+++ b/lightning_media.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\embed\EmbedButtonInterface;
 /**
  * @file
  * Core media asset support for Lightning.
@@ -123,7 +125,7 @@ function lightning_media_entity_extra_field_info() {
   $extra_fields = [];
 
   if (\Drupal::moduleHandler()->moduleExists('media')) {
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach (MediaType::loadMultiple() as $id => $media_type) {
       $plugin_definition = $media_type->getSource()->getPluginDefinition();
 
@@ -155,7 +157,7 @@ function lightning_media_inline_entity_form_entity_form_alter(array &$entity_for
 /**
  * Validates a file using media entity source field criteria.
  *
- * @param \Drupal\file\FileInterface $file
+ * @param FileInterface $file
  *   The file to validate.
  * @param string[] $bundles
  *   (optional) A set of media bundle IDs which might match the input. If
@@ -172,7 +174,7 @@ function lightning_media_validate_upload(FileInterface $file, array $bundles = [
     return [];
   }
 
-  /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+  /** @var FileItem $item */
   $item = MediaHelper::getSourceField($entity)->first();
 
   $validators = [
@@ -366,7 +368,7 @@ function lightning_media_media_type_insert(MediaTypeInterface $media_type) {
 function lightning_media_form_entity_embed_dialog_alter(array &$form, FormStateInterface $form_state) {
   list ($editor, $embed_button) = $form_state->getBuildInfo()['args'];
 
-  /** @var \Drupal\embed\EmbedButtonInterface $embed_button */
+  /** @var EmbedButtonInterface $embed_button */
   if ($embed_button->id() == 'media_browser') {
     $element = &$form['attributes']['data-entity-embed-settings']['view_mode'];
     if (isset($element['#options']['embedded'])) {
@@ -438,7 +440,7 @@ function lightning_media_ajax_render_alter(array &$data) {
  *   Template variables.
  */
 function lightning_media_preprocess_views_view_grid(array &$variables) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $variables['view'];
 
   if ($view->display_handler->getPluginId() == 'entity_browser') {
diff --git a/lightning_media.post_update.php b/lightning_media.post_update.php
index 4712b17..ea4b4fa 100644
--- a/lightning_media.post_update.php
+++ b/lightning_media.post_update.php
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\system\ActionConfigEntityInterface;
 /**
  * @file
  * Contains post-update functions for Lightning Media.
  */
-
 /**
  * Change plugin IDs of actions.
  */
@@ -17,7 +17,7 @@ function lightning_media_post_update_change_action_plugins() {
   ];
 
   $actions = Drupal::entityTypeManager()->getStorage('action')->loadMultiple();
-  /** @var \Drupal\system\ActionConfigEntityInterface $action */
+  /** @var ActionConfigEntityInterface $action */
   foreach ($actions as $action) {
     $plugin_id = $action->get('plugin');
 
diff --git a/modules/lightning_media_audio/src/Update/Update350.php b/modules/lightning_media_audio/src/Update/Update350.php
index 7d85bcb..c243a7a 100644
--- a/modules/lightning_media_audio/src/Update/Update350.php
+++ b/modules/lightning_media_audio/src/Update/Update350.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media_audio\Update;
 
+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -21,25 +22,25 @@ final class Update350 implements ContainerInjectionInterface {
   /**
    * The media type entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $mediaTypeStorage;
 
   /**
    * The field config entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorage;
 
   /**
    * Update350 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $media_type_storage
+   * @param EntityStorageInterface $media_type_storage
    *   The media type entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_storage
+   * @param EntityStorageInterface $field_storage
    *   The field config entity storage handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(EntityStorageInterface $media_type_storage, EntityStorageInterface $field_storage, TranslationInterface $translation = NULL) {
@@ -65,13 +66,13 @@ final class Update350 implements ContainerInjectionInterface {
   /**
    * Makes field_media_in_library non-translatable.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
    *
    * @update
    */
   public function removeAudioFileLibraryFieldTranslatability(StyleInterface $io) {
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldStorage->load('media.audio_file.field_media_in_library');
     if (empty($field)) {
       return;
diff --git a/modules/lightning_media_audio/tests/src/Kernel/LibraryInclusionTranslationTest.php b/modules/lightning_media_audio/tests/src/Kernel/LibraryInclusionTranslationTest.php
index e305123..ffa1f86 100644
--- a/modules/lightning_media_audio/tests/src/Kernel/LibraryInclusionTranslationTest.php
+++ b/modules/lightning_media_audio/tests/src/Kernel/LibraryInclusionTranslationTest.php
@@ -23,7 +23,7 @@ class LibraryInclusionTranslationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
 
diff --git a/modules/lightning_media_audio/tests/src/Kernel/Update/Update350Test.php b/modules/lightning_media_audio/tests/src/Kernel/Update/Update350Test.php
index 3581593..86e1146 100644
--- a/modules/lightning_media_audio/tests/src/Kernel/Update/Update350Test.php
+++ b/modules/lightning_media_audio/tests/src/Kernel/Update/Update350Test.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media_audio\Kernel\Update;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -20,6 +21,7 @@ use Symfony\Component\Console\Style\StyleInterface;
  */
 class Update350Test extends KernelTestBase {
 
+  use ProphecyTrait;
   use MediaTypeCreationTrait;
 
   /**
diff --git a/modules/lightning_media_bulk_upload/src/Form/BulkUploadForm.php b/modules/lightning_media_bulk_upload/src/Form/BulkUploadForm.php
index 951a843..1d815dd 100644
--- a/modules/lightning_media_bulk_upload/src/Form/BulkUploadForm.php
+++ b/modules/lightning_media_bulk_upload/src/Form/BulkUploadForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lightning_media_bulk_upload\Form;
 
+use Drupal\file\FileInterface;
+use Drupal\media\MediaInterface;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -20,25 +22,25 @@ class BulkUploadForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The media helper service.
    *
-   * @var \Drupal\lightning_media\MediaHelper
+   * @var MediaHelper
    */
   protected $helper;
 
   /**
    * BulkUploadForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\lightning_media\MediaHelper $helper
+   * @param MediaHelper $helper
    *   The media helper service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translator
+   * @param TranslationInterface $translator
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MediaHelper $helper, TranslationInterface $translator) {
@@ -126,7 +128,7 @@ class BulkUploadForm extends FormBase {
 
     foreach ($uploads as $upload) {
       // Create a file entity for the temporary file.
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->entityTypeManager->getStorage('file')->create([
         'uri' => $upload['path'],
         'uid' => $this->currentUser()->id(),
@@ -150,7 +152,7 @@ class BulkUploadForm extends FormBase {
     }
 
     if ($bulk_create) {
-      /** @var \Drupal\media\MediaInterface $entity */
+      /** @var MediaInterface $entity */
       $redirect = array_shift($bulk_create)->toUrl('edit-form', [
         'query' => [
           'bulk_create' => $bulk_create,
diff --git a/modules/lightning_media_bulk_upload/tests/src/FunctionalJavascript/BulkUploadTest.php b/modules/lightning_media_bulk_upload/tests/src/FunctionalJavascript/BulkUploadTest.php
index d13e16d..2707126 100644
--- a/modules/lightning_media_bulk_upload/tests/src/FunctionalJavascript/BulkUploadTest.php
+++ b/modules/lightning_media_bulk_upload/tests/src/FunctionalJavascript/BulkUploadTest.php
@@ -32,7 +32,7 @@ class BulkUploadTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
   }
diff --git a/modules/lightning_media_document/src/Update/Update400.php b/modules/lightning_media_document/src/Update/Update400.php
index b2c8002..1e12e50 100644
--- a/modules/lightning_media_document/src/Update/Update400.php
+++ b/modules/lightning_media_document/src/Update/Update400.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media_document\Update;
 
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -20,23 +21,23 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * The field config entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorage;
 
   /**
    * The media type entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $mediaTypeStorage;
 
   /**
    * Update400 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_storage
+   * @param EntityStorageInterface $field_storage
    *   The field config entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $media_type_storage
+   * @param EntityStorageInterface $media_type_storage
    *   The media type entity storage handler.
    */
   public function __construct(EntityStorageInterface $field_storage, EntityStorageInterface $media_type_storage) {
@@ -59,13 +60,13 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * Makes the Document media type's source field required.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
    */
   public function requireDocumentMediaSourceField(StyleInterface $io) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = $this->fieldStorage->load('media.document.field_document');
 
     if ($field && $field->isRequired() == FALSE) {
diff --git a/modules/lightning_media_document/tests/src/Kernel/Update400Test.php b/modules/lightning_media_document/tests/src/Kernel/Update400Test.php
index 6efe8a8..6833518 100644
--- a/modules/lightning_media_document/tests/src/Kernel/Update400Test.php
+++ b/modules/lightning_media_document/tests/src/Kernel/Update400Test.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media_document\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -19,6 +20,7 @@ use Symfony\Component\Console\Style\StyleInterface;
  */
 class Update400Test extends KernelTestBase {
 
+  use ProphecyTrait;
   use MediaTypeCreationTrait;
 
   /**
diff --git a/modules/lightning_media_image/lightning_media_image.install b/modules/lightning_media_image/lightning_media_image.install
index eb2cdaf..55616f8 100644
--- a/modules/lightning_media_image/lightning_media_image.install
+++ b/modules/lightning_media_image/lightning_media_image.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Contains install and update routines for Lightning Media Image.
@@ -34,7 +35,7 @@ function lightning_media_image_install() {
         'bundle' => 'image',
       ]);
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     foreach ($form_displays as $form_display) {
       $component = $form_display->getComponent('field_media_image');
 
diff --git a/modules/lightning_media_image/lightning_media_image.module b/modules/lightning_media_image/lightning_media_image.module
index db42e31..e11cd80 100644
--- a/modules/lightning_media_image/lightning_media_image.module
+++ b/modules/lightning_media_image/lightning_media_image.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\crop\CropTypeInterface;
 /**
  * @file
  * Support for image media assets in Lightning.
@@ -34,7 +35,7 @@ function lightning_media_image_crop_type_insert($crop_type) {
   }
   else {
     // Create a dedicated image style to display images using this crop type.
-    /** @var \Drupal\crop\CropTypeInterface $crop_type */
+    /** @var CropTypeInterface $crop_type */
     $image_style = ImageStyle::create([
       'name' => 'crop_' . $crop_type->id(),
       'label' => t('Cropped: @crop_type', [
diff --git a/modules/lightning_media_image/tests/src/Functional/ImageBrowserUploadValidationTest.php b/modules/lightning_media_image/tests/src/Functional/ImageBrowserUploadValidationTest.php
index e0d0c71..f373acf 100644
--- a/modules/lightning_media_image/tests/src/Functional/ImageBrowserUploadValidationTest.php
+++ b/modules/lightning_media_image/tests/src/Functional/ImageBrowserUploadValidationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media_image\Functional;
 
+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ -63,7 +64,7 @@ class ImageBrowserUploadValidationTest extends BrowserTestBase {
 
     $node_type = $this->createContentType();
 
-    /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+    /** @var FieldStorageConfigInterface $field_storage */
     $field_storage = FieldStorageConfig::create([
       'field_name' => 'field_lightweight_image',
       'entity_type' => 'node',
diff --git a/modules/lightning_media_image/tests/src/Functional/InstallTest.php b/modules/lightning_media_image/tests/src/Functional/InstallTest.php
index 7332de6..e5bc5a3 100644
--- a/modules/lightning_media_image/tests/src/Functional/InstallTest.php
+++ b/modules/lightning_media_image/tests/src/Functional/InstallTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media_image\Functional;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -44,7 +45,7 @@ class InstallTest extends BrowserTestBase {
         'mode' => ['default', 'media_browser'],
       ]);
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     foreach ($form_displays as $form_display) {
       $component = $form_display->getComponent('field_media_image');
       $this->assertIsArray($component);
diff --git a/modules/lightning_media_image/tests/src/FunctionalJavascript/ImageBrowserCardinalityTest.php b/modules/lightning_media_image/tests/src/FunctionalJavascript/ImageBrowserCardinalityTest.php
index a611d17..89b0234 100644
--- a/modules/lightning_media_image/tests/src/FunctionalJavascript/ImageBrowserCardinalityTest.php
+++ b/modules/lightning_media_image/tests/src/FunctionalJavascript/ImageBrowserCardinalityTest.php
@@ -40,7 +40,7 @@ class ImageBrowserCardinalityTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->createContentType(['type' => 'page']);
diff --git a/modules/lightning_media_image/tests/src/Kernel/LibraryInclusionTranslationTest.php b/modules/lightning_media_image/tests/src/Kernel/LibraryInclusionTranslationTest.php
index 6dd8022..1ef3125 100644
--- a/modules/lightning_media_image/tests/src/Kernel/LibraryInclusionTranslationTest.php
+++ b/modules/lightning_media_image/tests/src/Kernel/LibraryInclusionTranslationTest.php
@@ -23,7 +23,7 @@ class LibraryInclusionTranslationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
 
diff --git a/modules/lightning_media_image/tests/src/Kernel/Update800180068007Test.php b/modules/lightning_media_image/tests/src/Kernel/Update800180068007Test.php
index 93320d6..3506fef 100644
--- a/modules/lightning_media_image/tests/src/Kernel/Update800180068007Test.php
+++ b/modules/lightning_media_image/tests/src/Kernel/Update800180068007Test.php
@@ -36,6 +36,7 @@ class Update800180068007Test extends KernelTestBase {
 
   /**
    * Tests the update function.
+   * @doesNotPerformAssertions
    */
   public function testUpdate() {
     FieldStorageConfig::create([
diff --git a/modules/lightning_media_slideshow/src/ProxyClass/UninstallValidator.php b/modules/lightning_media_slideshow/src/ProxyClass/UninstallValidator.php
index 3db404e..44357dc 100644
--- a/modules/lightning_media_slideshow/src/ProxyClass/UninstallValidator.php
+++ b/modules/lightning_media_slideshow/src/ProxyClass/UninstallValidator.php
@@ -7,15 +7,19 @@
 
 namespace Drupal\lightning_media_slideshow\ProxyClass {
 
+    use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\StringTranslation\TranslationInterface;
     /**
      * Provides a proxy class for \Drupal\lightning_media_slideshow\UninstallValidator.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class UninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface
+    class UninstallValidator implements ModuleUninstallValidatorInterface
     {
 
-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;
 
         /**
          * The id of the original proxied service.
@@ -34,19 +38,19 @@ namespace Drupal\lightning_media_slideshow\ProxyClass {
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;
 
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ -78,7 +82,7 @@ namespace Drupal\lightning_media_slideshow\ProxyClass {
         /**
          * {@inheritdoc}
          */
-        public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation)
+        public function setStringTranslation(TranslationInterface $translation)
         {
             return $this->lazyLoadItself()->setStringTranslation($translation);
         }
diff --git a/modules/lightning_media_slideshow/src/UninstallValidator.php b/modules/lightning_media_slideshow/src/UninstallValidator.php
index 5272265..3d8d6be 100644
--- a/modules/lightning_media_slideshow/src/UninstallValidator.php
+++ b/modules/lightning_media_slideshow/src/UninstallValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media_slideshow;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,16 +18,16 @@ class UninstallValidator implements ModuleUninstallValidatorInterface {
   /**
    * The block content entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $blockContentStorage;
 
   /**
    * Constructs a new validator.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/modules/lightning_media_slideshow/tests/src/FunctionalJavascript/SlideshowTest.php b/modules/lightning_media_slideshow/tests/src/FunctionalJavascript/SlideshowTest.php
index ce16afe..13f5490 100644
--- a/modules/lightning_media_slideshow/tests/src/FunctionalJavascript/SlideshowTest.php
+++ b/modules/lightning_media_slideshow/tests/src/FunctionalJavascript/SlideshowTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media_slideshow\FunctionalJavascript;
 
+use Drupal\media\MediaInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\lightning_media\FunctionalJavascript\WebDriverWebAssert;
@@ -34,7 +35,7 @@ class SlideshowTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->createMediaType('test', [
@@ -59,7 +60,7 @@ class SlideshowTest extends WebDriverTestBase {
    *   The type of media to create.
    */
   private function createMedia($media_type) {
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = Media::create(['bundle' => $media_type]);
 
     $source_field = $media->getSource()
diff --git a/modules/lightning_media_twitter/lightning_media_twitter.module b/modules/lightning_media_twitter/lightning_media_twitter.module
index 70300af..b783ee3 100644
--- a/modules/lightning_media_twitter/lightning_media_twitter.module
+++ b/modules/lightning_media_twitter/lightning_media_twitter.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Extension\ModuleExtensionList;
 /**
  * @file
  * Support for tweets as media entities in Lightning.
@@ -30,7 +31,7 @@ function lightning_media_twitter_media_source_info_alter(array &$sources) {
  * Implements hook_theme_registry_alter().
  */
 function lightning_media_twitter_theme_registry_alter(array &$theme_registry) {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $module_list */
+  /** @var ModuleExtensionList $module_list */
   $module_list = Drupal::service('extension.list.module');
 
   $hook = &$theme_registry['media_entity_twitter_tweet'];
diff --git a/modules/lightning_media_twitter/tests/src/Kernel/LibraryInclusionTranslationTest.php b/modules/lightning_media_twitter/tests/src/Kernel/LibraryInclusionTranslationTest.php
index 95c277f..a2da5cf 100644
--- a/modules/lightning_media_twitter/tests/src/Kernel/LibraryInclusionTranslationTest.php
+++ b/modules/lightning_media_twitter/tests/src/Kernel/LibraryInclusionTranslationTest.php
@@ -20,7 +20,7 @@ class LibraryInclusionTranslationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
 
diff --git a/modules/lightning_media_video/src/Update/Update350.php b/modules/lightning_media_video/src/Update/Update350.php
index cedb929..54834cb 100644
--- a/modules/lightning_media_video/src/Update/Update350.php
+++ b/modules/lightning_media_video/src/Update/Update350.php
@@ -22,25 +22,25 @@ final class Update350 implements ContainerInjectionInterface {
   /**
    * The media type entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $mediaTypeStorage;
 
   /**
    * The field config entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldStorage;
 
   /**
    * Update350 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $media_type_storage
+   * @param EntityStorageInterface $media_type_storage
    *   The media type entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_storage
+   * @param EntityStorageInterface $field_storage
    *   The field config entity storage handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(EntityStorageInterface $media_type_storage, EntityStorageInterface $field_storage, TranslationInterface $translation = NULL) {
@@ -66,13 +66,13 @@ final class Update350 implements ContainerInjectionInterface {
   /**
    * Makes field_media_in_library non-translatable in the video media type.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
    *
    * @update
    */
   public function removeVideoLibraryFieldTranslatability(StyleInterface $io) {
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldStorage->load('media.video.field_media_in_library');
     if ($field) {
       $this->processField($io, $field);
@@ -82,13 +82,13 @@ final class Update350 implements ContainerInjectionInterface {
   /**
    * Makes field_media_in_library non-translatable in the video_file media type.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
    *
    * @update
    */
   public function removeVideoFileLibraryFieldTranslatability(StyleInterface $io) {
-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldStorage->load('media.video_file.field_media_in_library');
     if ($field) {
       $this->processField($io, $field);
@@ -98,9 +98,9 @@ final class Update350 implements ContainerInjectionInterface {
   /**
    * Removes translatability from a field after confirming the action.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O handler.
-   * @param \Drupal\field\Entity\FieldConfig $field
+   * @param FieldConfig $field
    *   The field from which to remove translatability.
    */
   private function processField(StyleInterface $io, FieldConfig $field) {
diff --git a/modules/lightning_media_video/tests/src/Kernel/LibraryInclusionTranslationTest.php b/modules/lightning_media_video/tests/src/Kernel/LibraryInclusionTranslationTest.php
index a07e33d..ccdb310 100644
--- a/modules/lightning_media_video/tests/src/Kernel/LibraryInclusionTranslationTest.php
+++ b/modules/lightning_media_video/tests/src/Kernel/LibraryInclusionTranslationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media_video\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -18,6 +19,7 @@ use Drupal\media\OEmbed\UrlResolverInterface;
  */
 class LibraryInclusionTranslationTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -26,7 +28,7 @@ class LibraryInclusionTranslationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
 
diff --git a/modules/lightning_media_video/tests/src/Kernel/Update350Test.php b/modules/lightning_media_video/tests/src/Kernel/Update350Test.php
index 16eebba..08e0fa7 100644
--- a/modules/lightning_media_video/tests/src/Kernel/Update350Test.php
+++ b/modules/lightning_media_video/tests/src/Kernel/Update350Test.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media_video\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -20,6 +21,7 @@ use Symfony\Component\Console\Style\StyleInterface;
  */
 class Update350Test extends KernelTestBase {
 
+  use ProphecyTrait;
   use MediaTypeCreationTrait;
 
   /**
diff --git a/src/Element/InteractiveUpload.php b/src/Element/InteractiveUpload.php
index 23fa467..642643a 100644
--- a/src/Element/InteractiveUpload.php
+++ b/src/Element/InteractiveUpload.php
@@ -37,7 +37,7 @@ class InteractiveUpload extends FormElement {
    *
    * @param array $element
    *   The unprocessed element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -97,7 +97,7 @@ class InteractiveUpload extends FormElement {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ -113,7 +113,7 @@ class InteractiveUpload extends FormElement {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function upload(array &$form, FormStateInterface $form_state) {
@@ -130,7 +130,7 @@ class InteractiveUpload extends FormElement {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function remove(array &$form, FormStateInterface $form_state) {
diff --git a/src/Element/Upload.php b/src/Element/Upload.php
index 16d066e..777a100 100644
--- a/src/Element/Upload.php
+++ b/src/Element/Upload.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lightning_media\Element;
 
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\File\Event\FileUploadSanitizeNameEvent;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element\File as FileElement;
@@ -36,7 +38,7 @@ class Upload extends FileElement {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function validate(array &$element, FormStateInterface $form_state) {
@@ -88,7 +90,7 @@ class Upload extends FileElement {
    * {@inheritdoc}
    */
   public static function valueCallback(&$element, $input, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
 
     $id = implode('_', $element['#parents']);
@@ -99,7 +101,7 @@ class Upload extends FileElement {
       $destination = $file_system->realPath($element['#upload_location']);
 
       $event = new FileUploadSanitizeNameEvent($upload->getClientOriginalName(), '');
-      /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher */
+      /** @var ContainerAwareEventDispatcher $event_dispatcher */
       // phpcs:ignore
       $event_dispatcher = \Drupal::service('event_dispatcher');
       $event_dispatcher->dispatch($event);
diff --git a/src/Exception/IndeterminateBundleException.php b/src/Exception/IndeterminateBundleException.php
index bd1a9ad..4bc59b4 100644
--- a/src/Exception/IndeterminateBundleException.php
+++ b/src/Exception/IndeterminateBundleException.php
@@ -13,7 +13,7 @@ class IndeterminateBundleException extends \LogicException implements \IteratorA
   /**
    * The media types which matched the input value.
    *
-   * @var \Drupal\media\MediaTypeInterface[]
+   * @var MediaTypeInterface[]
    */
   private $types = [];
 
@@ -26,7 +26,7 @@ class IndeterminateBundleException extends \LogicException implements \IteratorA
    *   (optional) The error code.
    * @param \Exception $previous
    *   (optional) The previous exception, if any.
-   * @param \Drupal\media\MediaTypeInterface[] $types
+   * @param MediaTypeInterface[] $types
    *   (optional) The media types which matched the input value.
    */
   public function __construct($value, $code = 0, \Exception $previous = NULL, array $types = []) {
@@ -37,7 +37,7 @@ class IndeterminateBundleException extends \LogicException implements \IteratorA
       $value instanceof EntityInterface ? $value->label() : var_export($value, TRUE)
     );
 
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($types as $media_type) {
       $key = $media_type->id();
       $this->types[$key] = $media_type;
diff --git a/src/FileInputExtensionMatchTrait.php b/src/FileInputExtensionMatchTrait.php
index e1f19df..f9218a4 100644
--- a/src/FileInputExtensionMatchTrait.php
+++ b/src/FileInputExtensionMatchTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\file\FileInterface;
 use Drupal\media\MediaTypeInterface;
 
@@ -13,7 +14,7 @@ trait FileInputExtensionMatchTrait {
   /**
    * Returns the entity type manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager.
    */
   private function entityTypeManager() {
diff --git a/src/Form/MediaForm.php b/src/Form/MediaForm.php
index c5f8828..bb83e37 100644
--- a/src/Form/MediaForm.php
+++ b/src/Form/MediaForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media\Form;
 
+use Drupal\media\MediaInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
@@ -22,7 +23,7 @@ class MediaForm extends BaseMediaForm implements TrustedCallbackInterface {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->getEntity();
 
     $field = Helper::getSourceField($entity);
@@ -87,7 +88,7 @@ class MediaForm extends BaseMediaForm implements TrustedCallbackInterface {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 7fb797b..53e3bc2 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +15,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
diff --git a/src/ImageWidgetHelper.php b/src/ImageWidgetHelper.php
index 0bc9ee9..993a7d3 100644
--- a/src/ImageWidgetHelper.php
+++ b/src/ImageWidgetHelper.php
@@ -12,7 +12,7 @@ class ImageWidgetHelper {
   /**
    * Returns normalized Lightning Media-specific settings for the widget.
    *
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    *
    * @return array
@@ -32,7 +32,7 @@ class ImageWidgetHelper {
   /**
    * Returns the form for an image widget's Lightning Media-specific settings.
    *
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    *
    * @return array
@@ -58,7 +58,7 @@ class ImageWidgetHelper {
   /**
    * Summarizes an image widget's Lightning Media-specific settings.
    *
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    * @param array $summary
    *   (optional) An existing summary to augment.
@@ -88,7 +88,7 @@ class ImageWidgetHelper {
    *
    * @param array $element
    *   The widget form element.
-   * @param \Drupal\image\Plugin\Field\FieldWidget\ImageWidget $widget
+   * @param ImageWidget $widget
    *   The widget plugin.
    */
   public static function alter(array &$element, ImageWidget $widget) {
diff --git a/src/InputMatchInterface.php b/src/InputMatchInterface.php
index 74ac14c..f190e40 100644
--- a/src/InputMatchInterface.php
+++ b/src/InputMatchInterface.php
@@ -14,7 +14,7 @@ interface InputMatchInterface {
    *
    * @param mixed $value
    *   The input value.
-   * @param \Drupal\media\MediaTypeInterface $bundle
+   * @param MediaTypeInterface $bundle
    *   The media bundle that is using this plugin.
    *
    * @return bool
diff --git a/src/LibrariesDirectoryFileFinder.php b/src/LibrariesDirectoryFileFinder.php
index 870e8bd..d0d0992 100644
--- a/src/LibrariesDirectoryFileFinder.php
+++ b/src/LibrariesDirectoryFileFinder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media;
 
+use Drupal\Core\Extension\ExtensionList;
 use Drupal\Core\Extension\ProfileExtensionList;
 
 /**
@@ -32,7 +33,7 @@ final class LibrariesDirectoryFileFinder {
   /**
    * The profile extension list.
    *
-   * @var \Drupal\Core\Extension\ExtensionList
+   * @var ExtensionList
    */
   protected $profileExtensionList;
 
@@ -50,7 +51,7 @@ final class LibrariesDirectoryFileFinder {
    *   The app root.
    * @param string $site_path
    *   The site path.
-   * @param \Drupal\Core\Extension\ProfileExtensionList $profile_extension_list
+   * @param ProfileExtensionList $profile_extension_list
    *   The profile extension list.
    * @param string $install_profile
    *   The install profile.
diff --git a/src/MediaHelper.php b/src/MediaHelper.php
index 8631261..b8894d5 100644
--- a/src/MediaHelper.php
+++ b/src/MediaHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media;
 
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file\Entity\File;
@@ -19,14 +20,14 @@ class MediaHelper {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MediaHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -55,7 +56,7 @@ class MediaHelper {
       ->getStorage('media_type');
     $media_types = $storage->loadMultiple($bundles ?: NULL, $check_access);
 
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($media_types as $media_type) {
       $field = $media_type->getSource()->getSourceFieldDefinition($media_type);
 
@@ -82,10 +83,10 @@ class MediaHelper {
    *   (optional) A set of media bundle IDs which might match the input. If
    *   omitted, all available bundles are checked.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   A media bundle that can accept the input value.
    *
-   * @throws \Drupal\lightning_media\Exception\IndeterminateBundleException
+   * @throws IndeterminateBundleException
    *   If the input value cannot be matched to exactly one media type.
    */
   public function getBundleFromInput($value, $check_access = TRUE, array $bundles = []) {
@@ -109,7 +110,7 @@ class MediaHelper {
    *   (optional) A set of media bundle IDs which might match the input. If
    *   omitted, all available bundles are checked.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media bundles that can accept the input value.
    */
   public function getBundlesFromInput($value, $check_access = TRUE, array $bundles = []) {
@@ -136,11 +137,11 @@ class MediaHelper {
    *   (optional) A set of media bundle IDs which might match the input value.
    *   If omitted, all bundles to which the user has create access are checked.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The unsaved media entity.
    */
   public function createFromInput($value, array $bundles = []) {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->entityTypeManager
       ->getStorage('media')
       ->create([
@@ -157,16 +158,16 @@ class MediaHelper {
   /**
    * Attaches a file entity to a media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    * @param int $replace
    *   (optional) What to do if the file already exists. Can be any of the
    *   constants accepted by file_move(). Defaults to
    *   \Drupal\Core\File\FileSystemInterface::EXISTS_RENAME.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The final file entity (unsaved), or FALSE if an error occurred.
    */
   public static function useFile(MediaInterface $entity, FileInterface $file, $replace = FileSystemInterface::EXISTS_RENAME) {
@@ -184,7 +185,7 @@ class MediaHelper {
     // might have been replaced by another one that has the same ID, but a
     // different URI. So reload the file entity to ensure we're using the most
     // up-to-date URI.
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::load($file->id());
 
     if ($destination == $file->getFileUri()) {
@@ -197,7 +198,7 @@ class MediaHelper {
       }
       else {
         // @phpstan-ignore-next-line
-        $file = file_move($file, $destination, $replace);
+        $file = \Drupal::service('file.repository')->move($file, $destination, $replace);
       }
 
       if ($file) {
@@ -213,14 +214,14 @@ class MediaHelper {
   /**
    * Prepares the destination directory for a file attached to a media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
    * @return string
    *   The destination directory URI.
    */
   public static function prepareFileDestination(MediaInterface $entity) {
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+    /** @var FileItem $item */
     $item = static::getSourceField($entity)->first();
 
     $destination = $item->getUploadLocation();
@@ -233,7 +234,7 @@ class MediaHelper {
   /**
    * Indicates if the media entity's type plugin supports dynamic previews.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
    * @return bool
@@ -248,10 +249,10 @@ class MediaHelper {
   /**
    * Returns the media entity's source field item list.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The media entity.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface|null
+   * @return FieldItemListInterface|null
    *   The media entity's source field item list, or NULL if the media type
    *   plugin does not define a source field.
    */
diff --git a/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php b/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php
index a070e56..09fce89 100644
--- a/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php
+++ b/src/Plugin/EntityBrowser/Widget/EntityFormProxy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media\Plugin\EntityBrowser\Widget;
 
+use Drupal\media\MediaInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\PrependCommand;
@@ -85,10 +86,10 @@ abstract class EntityFormProxy extends WidgetBase {
   /**
    * Returns a media entity created from the current input, if possible.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   A media entity created from the current input value, if there is one, or
    *   NULL if no media entity can be created.
    */
@@ -111,10 +112,10 @@ abstract class EntityFormProxy extends WidgetBase {
   /**
    * Returns all media types that can apply to the current input.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media types that can apply to the current input, if any.
    */
   protected function getCurrentTypes(FormStateInterface $form_state) {
@@ -158,7 +159,7 @@ abstract class EntityFormProxy extends WidgetBase {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public static function update(array &$form, FormStateInterface $form_state) {
@@ -180,10 +181,10 @@ abstract class EntityFormProxy extends WidgetBase {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public static function ajax(array &$form, FormStateInterface $form_state) {
@@ -203,7 +204,7 @@ abstract class EntityFormProxy extends WidgetBase {
   /**
    * Returns the current input value, if any.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return mixed
@@ -232,7 +233,7 @@ abstract class EntityFormProxy extends WidgetBase {
   /**
    * Returns the media types which can be used by this widget.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media types which can be used by this widget.
    */
   protected function getAllowedTypes() {
@@ -246,7 +247,7 @@ abstract class EntityFormProxy extends WidgetBase {
   /**
    * Tests if a media type can be used by this widget.
    *
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    *
    * @return bool
@@ -263,10 +264,10 @@ abstract class EntityFormProxy extends WidgetBase {
    *
    * @param mixed $value
    *   The source field value.
-   * @param \Drupal\media\MediaTypeInterface $type
+   * @param MediaTypeInterface $type
    *   The media type.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The unsaved media entity.
    */
   protected function createMedia($value, MediaTypeInterface $type) {
@@ -286,7 +287,7 @@ abstract class EntityFormProxy extends WidgetBase {
    * @param mixed $value
    *   The input value.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   The media types which can use the given value in their source field.
    */
   protected function getTypesByValue($value) {
diff --git a/src/Plugin/EntityBrowser/Widget/FileUpload.php b/src/Plugin/EntityBrowser/Widget/FileUpload.php
index fe6e150..e7b6bb7 100644
--- a/src/Plugin/EntityBrowser/Widget/FileUpload.php
+++ b/src/Plugin/EntityBrowser/Widget/FileUpload.php
@@ -129,7 +129,7 @@ class FileUpload extends EntityFormProxy {
   /**
    * Validates the file entity associated with a media item.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media item.
    *
    * @return array[]
@@ -140,7 +140,7 @@ class FileUpload extends EntityFormProxy {
       ->getSourceFieldDefinition($media->bundle->entity)
       ->getName();
 
-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+    /** @var FileItem $item */
     $item = $media->get($field)->first();
 
     $validators = [
@@ -176,7 +176,7 @@ class FileUpload extends EntityFormProxy {
    * {@inheritdoc}
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $element['entity']['#entity'];
 
     $file = MediaHelper::useFile(
@@ -198,7 +198,7 @@ class FileUpload extends EntityFormProxy {
    *
    * @param array $element
    *   The upload element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
diff --git a/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php b/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php
index 670cabb..e925cd3 100644
--- a/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php
+++ b/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media\Plugin\entity_embed\EntityEmbedDisplay;
 
+use Drupal\media\MediaInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay\ImageFieldFormatter;
@@ -91,11 +92,11 @@ class MediaImage extends ImageFieldFormatter {
   /**
    * Returns the image field item to use for the embedded entity.
    *
-   * @return \Drupal\image\Plugin\Field\FieldType\ImageItem
+   * @return ImageItem
    *   The image field item.
    */
   protected function getItem() {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $this->getEntityFromContext();
 
     $item = MediaHelper::getSourceField($entity)->first();
diff --git a/src/Update/Update200.php b/src/Update/Update200.php
index 5a59e45..2370d8e 100644
--- a/src/Update/Update200.php
+++ b/src/Update/Update200.php
@@ -20,16 +20,16 @@ final class Update200 implements ContainerInjectionInterface {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Update200 constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, TranslationInterface $translation = NULL) {
diff --git a/src/Update/Update240.php b/src/Update/Update240.php
index ac69cf5..2ef2bcc 100644
--- a/src/Update/Update240.php
+++ b/src/Update/Update240.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media\Update;
 
+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Extension\ModuleInstallerInterface;
@@ -17,23 +18,23 @@ final class Update240 implements ContainerInjectionInterface {
   /**
    * The field config storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fieldConfigStorage;
 
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;
 
   /**
    * Update240 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_config_storage
+   * @param EntityStorageInterface $field_config_storage
    *   The field config storage.
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer service.
    */
   public function __construct(EntityStorageInterface $field_config_storage, ModuleInstallerInterface $module_installer) {
@@ -60,7 +61,7 @@ final class Update240 implements ContainerInjectionInterface {
    * media types to "Show in media library"?
    */
   public function renameSaveToMyMediaLibrary() {
-    /** @var \Drupal\field\Entity\FieldConfig[] $field_configs */
+    /** @var FieldConfig[] $field_configs */
     $field_configs = $this->fieldConfigStorage->loadByProperties([
       'field_name' => 'field_media_in_library',
       'entity_type' => 'media',
diff --git a/src/Update/Update310.php b/src/Update/Update310.php
index 6023086..955c946 100644
--- a/src/Update/Update310.php
+++ b/src/Update/Update310.php
@@ -16,14 +16,14 @@ final class Update310 implements ContainerInjectionInterface {
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;
 
   /**
    * Update310 constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer service.
    */
   public function __construct(ModuleInstallerInterface $module_installer) {
diff --git a/src/Update/Update360.php b/src/Update/Update360.php
index be6d33c..7d39082 100644
--- a/src/Update/Update360.php
+++ b/src/Update/Update360.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\lightning_media\Update;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\embed\EmbedButtonInterface;
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -22,34 +25,34 @@ final class Update360 implements ContainerInjectionInterface {
   /**
    * The entity browser entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $entityBrowserStorage;
 
   /**
    * The embed button entity storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $embedButtonStorage;
 
   /**
    * The content role manager service.
    *
-   * @var \Drupal\lightning_roles\ContentRoleManager
+   * @var ContentRoleManager
    */
   private $contentRoleManager;
 
   /**
    * Update360 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_browser_storage
+   * @param EntityStorageInterface $entity_browser_storage
    *   The entity browser entity storage handler.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $embed_button_storage
+   * @param EntityStorageInterface $embed_button_storage
    *   The embed button entity storage handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   (optional) The string translation service.
-   * @param \Drupal\lightning_roles\ContentRoleManager $content_role_manager
+   * @param ContentRoleManager $content_role_manager
    *   (optional) The content role manager service.
    */
   public function __construct(EntityStorageInterface $entity_browser_storage, EntityStorageInterface $embed_button_storage, TranslationInterface $translation = NULL, ContentRoleManager $content_role_manager = NULL) {
@@ -66,7 +69,7 @@ final class Update360 implements ContainerInjectionInterface {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
 
     $arguments = [
@@ -88,9 +91,9 @@ final class Update360 implements ContainerInjectionInterface {
    * @update
    */
   public function cloneMediaBrowser(StyleInterface $io) {
-    /** @var \Drupal\embed\EmbedButtonInterface $button */
+    /** @var EmbedButtonInterface $button */
     $button = $this->embedButtonStorage->load('media_browser');
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = $this->entityBrowserStorage->load('media_browser');
 
     // If either the embed button or the media browser doesn't exist, there's
diff --git a/src/Update/Update400.php b/src/Update/Update400.php
index 558e6af..7c2cd63 100644
--- a/src/Update/Update400.php
+++ b/src/Update/Update400.php
@@ -25,14 +25,14 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Update400 constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -51,7 +51,7 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * Optionally changes entity browser field widgets to media library widgets.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
@@ -59,7 +59,7 @@ final class Update400 implements ContainerInjectionInterface {
   public function convertMediaReferenceFieldsToMediaLibrary(StyleInterface $io) {
     $storage = $this->entityTypeManager->getStorage('entity_form_display');
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+    /** @var EntityFormDisplayInterface $display */
     foreach ($storage->loadMultiple() as $display) {
       $changed = FALSE;
 
@@ -83,7 +83,7 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * Optionally converts WYSIWYG editors to use the media library.
    *
-   * @param \Symfony\Component\Console\Style\StyleInterface $io
+   * @param StyleInterface $io
    *   The I/O style.
    *
    * @update
@@ -91,7 +91,7 @@ final class Update400 implements ContainerInjectionInterface {
   public function convertEditorsToMediaLibrary(StyleInterface $io) {
     $storage = $this->entityTypeManager->getStorage('editor');
 
-    /** @var \Drupal\editor\EditorInterface[] $editors */
+    /** @var EditorInterface[] $editors */
     $editors = $storage->loadByProperties(['editor' => 'ckeditor']);
     foreach ($editors as $editor) {
       // Check if the editor has the media_browser embed button enabled at all.
@@ -123,7 +123,7 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * Determines the array path to an editor's media_browser embed button.
    *
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor. It is assumed that it uses CKEditor.
    *
    * @return array
@@ -147,7 +147,7 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * Enables the media_embed filter on a single input format.
    *
-   * @param \Drupal\filter\FilterFormatInterface $format
+   * @param FilterFormatInterface $format
    *   The input format.
    */
   private function setUpFilterFormat(FilterFormatInterface $format) {
@@ -182,7 +182,7 @@ final class Update400 implements ContainerInjectionInterface {
   /**
    * Generates a question before migrating a field in an entity form display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display
+   * @param EntityFormDisplayInterface $display
    *   The entity form display being processed.
    * @param string $name
    *   The component name.
diff --git a/src/ValidationConstraintMatchTrait.php b/src/ValidationConstraintMatchTrait.php
index 73cdafd..b35a5ec 100644
--- a/src/ValidationConstraintMatchTrait.php
+++ b/src/ValidationConstraintMatchTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lightning_media;
 
+use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\Core\TypedData\Plugin\DataType\StringData;
 use Drupal\media\MediaTypeInterface;
 
@@ -13,7 +14,7 @@ trait ValidationConstraintMatchTrait {
   /**
    * Returns the typed data manager.
    *
-   * @return \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @return TypedDataManagerInterface
    *   The typed data manager.
    */
   private function typedDataManager() {
diff --git a/tests/src/Functional/MediaListTest.php b/tests/src/Functional/MediaListTest.php
index 39e9e91..63dd82b 100644
--- a/tests/src/Functional/MediaListTest.php
+++ b/tests/src/Functional/MediaListTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Functional;
 
+use Drupal\media\MediaInterface;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\BrowserTestBase;
 
@@ -29,7 +30,7 @@ class MediaListTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
@@ -47,7 +48,7 @@ class MediaListTest extends BrowserTestBase {
     ]);
     $this->drupalLogin($account);
 
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     Media::create(['bundle' => 'tweet'])
       ->setName("I'm a tweet")
       ->set('embed_code', 'https://twitter.com/50NerdsofGrey/status/757319527151636480')
diff --git a/tests/src/Functional/PathautoPatternTest.php b/tests/src/Functional/PathautoPatternTest.php
index 6d22c48..bcb3f47 100644
--- a/tests/src/Functional/PathautoPatternTest.php
+++ b/tests/src/Functional/PathautoPatternTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Functional;
 
+use Drupal\media\MediaInterface;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
@@ -36,7 +37,7 @@ class PathautoPatternTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('media.settings')->set('standalone_url', TRUE)->save();
     drupal_flush_all_caches();
@@ -58,7 +59,7 @@ class PathautoPatternTest extends BrowserTestBase {
       'instagram' => 'https://www.instagram.com/p/BmIh_AFDBzX',
     ];
     foreach ($media as $type => $source_value) {
-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media_item = Media::create([
         'bundle' => $type,
         'name' => $this->randomString(),
@@ -84,7 +85,7 @@ class PathautoPatternTest extends BrowserTestBase {
    * Tests a new media type.
    */
   public function testNewMediaTypePattern() {
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = Media::create([
       'bundle' => $this->createMediaType('test')->id(),
       'name' => 'Foo Bar',
diff --git a/tests/src/Functional/RolesTest.php b/tests/src/Functional/RolesTest.php
index ca1ee01..24df561 100644
--- a/tests/src/Functional/RolesTest.php
+++ b/tests/src/Functional/RolesTest.php
@@ -42,7 +42,7 @@ class RolesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->mediaType = $this->createMediaType('test')->id();
 
diff --git a/tests/src/Functional/StandardInstallTest.php b/tests/src/Functional/StandardInstallTest.php
index 6961dde..c1886fa 100644
--- a/tests/src/Functional/StandardInstallTest.php
+++ b/tests/src/Functional/StandardInstallTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Functional;
 
+use Drupal\media\MediaTypeInterface;
 use Drupal\media\Entity\MediaType;
 use Drupal\Tests\BrowserTestBase;
 
@@ -50,7 +51,7 @@ class StandardInstallTest extends BrowserTestBase {
       'lightning_media_video',
     ]);
     foreach ($source_fields as $media_type => $source_field) {
-      /** @var \Drupal\media\MediaTypeInterface $media_type */
+      /** @var MediaTypeInterface $media_type */
       $media_type = MediaType::load($media_type);
       $this->assertInstanceOf(MediaType::class, $media_type);
       $this->assertSame($source_field, $media_type->getSource()->getSourceFieldDefinition($media_type)->getName());
diff --git a/tests/src/Functional/Update360Test.php b/tests/src/Functional/Update360Test.php
index bd8ddd6..dbe4177 100644
--- a/tests/src/Functional/Update360Test.php
+++ b/tests/src/Functional/Update360Test.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\lightning_media\Functional;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\entity_browser\DisplayInterface;
 use Drupal\embed\Entity\EmbedButton;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\FunctionalTests\Update\UpdatePathTestBase;
@@ -19,6 +22,7 @@ use Symfony\Component\Console\Style\StyleInterface;
  */
 class Update360Test extends UpdatePathTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -36,7 +40,7 @@ class Update360Test extends UpdatePathTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a content type so we can test that content roles are correctly
@@ -69,7 +73,7 @@ class Update360Test extends UpdatePathTestBase {
     \Drupal::classResolver(Update360::class)
       ->cloneMediaBrowser($io->reveal());
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = EntityBrowser::load('ckeditor_media_browser');
     $this->assertInstanceOf(EntityBrowser::class, $browser);
     $this->assertSame('Media browser (CKEditor)', $browser->label());
@@ -78,7 +82,7 @@ class Update360Test extends UpdatePathTestBase {
     $settings = EmbedButton::load('media_browser')->getTypeSettings();
     $this->assertSame('ckeditor_media_browser', $settings['entity_browser']);
 
-    /** @var \Drupal\entity_browser\DisplayInterface $browser_display */
+    /** @var DisplayInterface $browser_display */
     $browser_display = EntityBrowser::load('media_browser')->getDisplay();
     $this->assertSame('modal', $browser_display->getPluginId());
     $settings = $browser_display->getConfiguration();
diff --git a/tests/src/Functional/Update400Test.php b/tests/src/Functional/Update400Test.php
index d3de3e3..e09fbcb 100644
--- a/tests/src/Functional/Update400Test.php
+++ b/tests/src/Functional/Update400Test.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\lightning_media\Functional;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\editor\EditorInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
@@ -19,6 +21,7 @@ use Symfony\Component\Console\Style\StyleInterface;
  */
 class Update400Test extends BrowserTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -100,7 +103,7 @@ class Update400Test extends BrowserTestBase {
 
     // Revert the rich_text editor to its pre-update state, using the
     // media_browser embed button instead of the media library.
-    /** @var \Drupal\editor\EditorInterface $editor */
+    /** @var EditorInterface $editor */
     $editor = Editor::load('rich_text');
     $settings = $editor->getSettings();
     $settings['toolbar']['rows'][0][3]['items'][3] = 'media_browser';
diff --git a/tests/src/Functional/UpdatePathTest.php b/tests/src/Functional/UpdatePathTest.php
index c1ed046..5186d38 100644
--- a/tests/src/Functional/UpdatePathTest.php
+++ b/tests/src/Functional/UpdatePathTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Functional;
 
+use Drupal\views\ViewEntityInterface;
 use Drupal\FunctionalTests\Update\UpdatePathTestBase;
 use Drupal\views\Entity\View;
 use Drush\TestTraits\DrushTestTrait;
@@ -29,9 +30,10 @@ class UpdatePathTest extends UpdatePathTestBase {
 
   /**
    * Tests Lightning Media's database update path.
+   * @doesNotPerformAssertions
    */
   public function testUpdatePath() {
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = View::load('media');
     $display = &$view->getDisplay('default');
     $display['display_options']['fields']['media_bulk_form']['plugin_id'] = 'bulk_form';
diff --git a/tests/src/FunctionalJavascript/ImageBrowserTest.php b/tests/src/FunctionalJavascript/ImageBrowserTest.php
index e25e8fb..42d758c 100644
--- a/tests/src/FunctionalJavascript/ImageBrowserTest.php
+++ b/tests/src/FunctionalJavascript/ImageBrowserTest.php
@@ -34,7 +34,7 @@ class ImageBrowserTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page']);
diff --git a/tests/src/FunctionalJavascript/MediaImageFieldTest.php b/tests/src/FunctionalJavascript/MediaImageFieldTest.php
index cc1dac7..04c60ae 100644
--- a/tests/src/FunctionalJavascript/MediaImageFieldTest.php
+++ b/tests/src/FunctionalJavascript/MediaImageFieldTest.php
@@ -30,7 +30,7 @@ class MediaImageFieldTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // The media.settings:standalone_url setting was added in Drupal 8.7. To
diff --git a/tests/src/Kernel/EntityBrowserIntegrationTest.php b/tests/src/Kernel/EntityBrowserIntegrationTest.php
index 0696771..7776853 100644
--- a/tests/src/Kernel/EntityBrowserIntegrationTest.php
+++ b/tests/src/Kernel/EntityBrowserIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Kernel;
 
+use Drupal\entity_browser\EntityBrowserInterface;
 use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -44,7 +45,7 @@ class EntityBrowserIntegrationTest extends KernelTestBase {
    * Tests that our libraries are not attached to custom entity browsers.
    */
   public function testLibraryAttachment(): void {
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $browser */
+    /** @var EntityBrowserInterface $browser */
     $browser = EntityBrowser::load('test_files');
     $this->assertInstanceOf(EntityBrowser::class, $browser);
 
diff --git a/tests/src/Kernel/MediaHelperTest.php b/tests/src/Kernel/MediaHelperTest.php
index 5011daf..4cc679f 100644
--- a/tests/src/Kernel/MediaHelperTest.php
+++ b/tests/src/Kernel/MediaHelperTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Kernel;
 
+use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
@@ -35,7 +36,7 @@ class MediaHelperTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('file');
 
@@ -57,7 +58,7 @@ class MediaHelperTest extends KernelTestBase {
       'bundle' => $media_type->id(),
     ]);
 
-    /** @var \Drupal\field\Entity\FieldConfig $source_field */
+    /** @var FieldConfig $source_field */
     $source_field = $media->getSource()->getSourceFieldDefinition($media_type);
     $source_field->setSetting('file_directory', 'wambooli')->save();
 
diff --git a/tests/src/Kernel/MediaTypeTest.php b/tests/src/Kernel/MediaTypeTest.php
index b836341..29efcb7 100644
--- a/tests/src/Kernel/MediaTypeTest.php
+++ b/tests/src/Kernel/MediaTypeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Kernel;
 
+use Drupal\media\MediaInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\lightning_core\ConfigHelper as Config;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
@@ -31,7 +32,7 @@ class MediaTypeTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     Config::forModule('lightning_media')
@@ -45,7 +46,7 @@ class MediaTypeTest extends KernelTestBase {
   public function testCloneMediaInLibraryField() {
     $type = $this->createMediaType('file')->id();
 
-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->container
       ->get('entity_type.manager')
       ->getStorage('media')
diff --git a/tests/src/Traits/EntityBrowserTrait.php b/tests/src/Traits/EntityBrowserTrait.php
index fbcc50e..6da6973 100644
--- a/tests/src/Traits/EntityBrowserTrait.php
+++ b/tests/src/Traits/EntityBrowserTrait.php
@@ -55,7 +55,7 @@ trait EntityBrowserTrait {
   /**
    * Waits for the current entity browser to have at least one selectable item.
    *
-   * @return \Behat\Mink\Element\NodeElement[]
+   * @return NodeElement[]
    *   The selectable items.
    */
   private function waitForItems() {
@@ -72,7 +72,7 @@ trait EntityBrowserTrait {
   /**
    * Selects an item in the current entity browser.
    *
-   * @param \Behat\Mink\Element\NodeElement $item
+   * @param NodeElement $item
    *   The item element.
    */
   private function selectItem(NodeElement $item) {
diff --git a/tests/src/Traits/EntityEmbedTrait.php b/tests/src/Traits/EntityEmbedTrait.php
index 8a20951..5c18158 100644
--- a/tests/src/Traits/EntityEmbedTrait.php
+++ b/tests/src/Traits/EntityEmbedTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\lightning_media\Traits;
 
+use Behat\Mink\Element\NodeElement;
 use Behat\Mink\Element\DocumentElement;
 
 /**
@@ -12,7 +13,7 @@ trait EntityEmbedTrait {
   /**
    * Waits for the entity embed form to appear.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The entity embed form.
    */
   private function waitForEmbedForm() {
@@ -24,7 +25,7 @@ trait EntityEmbedTrait {
   /**
    * Waits for an image-based entity embed form to appear.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The entity embed form.
    */
   private function waitForImageEmbedForm() {
@@ -41,7 +42,7 @@ trait EntityEmbedTrait {
   /**
    * Waits for a non-image based entity embed form to appear.
    *
-   * @return \Behat\Mink\Element\NodeElement
+   * @return NodeElement
    *   The entity embed form.
    */
   private function waitForStandardEmbedForm() {
