modules/contrib/image_styles_mapping/image_styles_mapping.module
modules/contrib/image_styles_mapping/src/Annotation/ImageStylesMapping.php
modules/contrib/image_styles_mapping/src/Controller/ImageStylesMappingController.php
modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMapping/Image.php
modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMapping/ResponsiveImageStyles.php
modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMappingPluginBase.php
modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMappingPluginInterface.php
modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMappingPluginManager.php
modules/contrib/image_styles_mapping/src/Service/ImageStylesMappingService.php
modules/contrib/image_styles_mapping/src/Service/ImageStylesMappingServiceInterface.php
modules/contrib/image_styles_mapping/tests/src/Kernel/ImageStylesMappingServiceTest.php

8 files with changes
====================

1) modules/contrib/image_styles_mapping/tests/src/Kernel/ImageStylesMappingServiceTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\image_styles_mapping\Kernel;

+use Drupal\image_styles_mapping\Plugin\ImageStylesMappingPluginManager;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The image styles mapping service.
    *
-   * @var \Drupal\image_styles_mapping\Plugin\ImageStylesMappingPluginManager
+   * @var ImageStylesMappingPluginManager
    */
   protected $imageStylesMappingPluginManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/image_styles_mapping/src/Service/ImageStylesMappingService.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_styles_mapping\Service;

+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\views\Entity\View;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\GeneratedLink;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected ModuleHandlerInterface $moduleHandler;

@@ @@
   /**
    * The plugin manager for our text extractor.
    *
-   * @var \Drupal\image_styles_mapping\Plugin\ImageStylesMappingPluginManager
+   * @var ImageStylesMappingPluginManager
    */
   protected ImageStylesMappingPluginManager $imageStylesMappingPluginManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * Constructs an ImageStylesMappingService object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\image_styles_mapping\Plugin\ImageStylesMappingPluginManager $image_styles_mapping_plugin_manager
+   * @param ImageStylesMappingPluginManager $image_styles_mapping_plugin_manager
    *   The image styles mapping plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity bundle info service.
    */
   public function __construct(
@@ @@
       $header[] = $plugin->getHeader();
     }

-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay[] $entity_view_display_entities */
+    /** @var EntityViewDisplay[] $entity_view_display_entities */
     $entity_view_display_entities = $this->entityTypeManager->getStorage('entity_view_display')->loadMultiple();

     $rows = [];
@@ @@
     $active_image_styles_mapping_plugins = $this->imageStylesMappingPluginManager->getActiveImageStylesMappingPlugins();

     // Get the views.
-    /** @var \Drupal\views\Entity\View[] $views */
+    /** @var View[] $views */
     $views = $this->entityTypeManager->getStorage('view')->loadMultiple();

     $header = [
@@ @@
     $image_fields = &\drupal_static(__FUNCTION__);

     if (!isset($image_fields)) {
-      /** @var \Drupal\field\Entity\FieldConfig[] $field_instance_config_entities */
+      /** @var FieldConfig[] $field_instance_config_entities */
       $field_instance_config_entities = $this->entityTypeManager->getStorage('field_config')->loadMultiple();

       $image_fields = [];
@@ @@
    * @param string $view_mode
    *   A view mode.
    *
-   * @return string|\Drupal\Core\GeneratedLink
+   * @return string|GeneratedLink
    *   A link to the view mode of the bundle if user has access.
    *   The view mode otherwise.
    */
@@ @@
    * @param string $display_title
    *   The title of the view display.
    *
-   * @return string|\Drupal\Core\GeneratedLink
+   * @return string|GeneratedLink
    *   A link to the view display if user has access.
    *   The display title otherwise.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMappingPluginManager.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Get the image styles mapping plugin which dependencies are enabled.
    *
-   * @return \Drupal\image_styles_mapping\Plugin\ImageStylesMappingPluginInterface[]
+   * @return ImageStylesMappingPluginInterface[]
    *   The active plugins list.
    */
   public function getActiveImageStylesMappingPlugins(): array {
@@ @@
     foreach (\array_keys($image_styles_mapping_plugins_definitions) as $plugin_id) {
       $dependencies = TRUE;
       // Instantiate the plugin.
-      /** @var \Drupal\image_styles_mapping\Plugin\ImageStylesMappingPluginInterface $plugin */
+      /** @var ImageStylesMappingPluginInterface $plugin */
       $plugin = $this->createInstance($plugin_id, []);
       // Check dependencies.
       foreach ($plugin->getDependencies() as $module_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMappingPluginInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_styles_mapping\Plugin;

+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Component\Render\FormattableMarkup;
 /**
  * Interface for a plugin that add columns on image styles mapping reports.
  *
@@ @@
   /**
    * Get the header for the column added by the plugin.
    *
-   * @return string|\Drupal\Component\Render\MarkupInterface
+   * @return string|MarkupInterface
    *   The header for the column added by the plugin.
    */
   public function getHeader();
@@ @@
    * @param array $field_settings
    *   The field display of the row.
    *
-   * @return \Drupal\Component\Render\FormattableMarkup
+   * @return FormattableMarkup
    *   The row content for the plugin for this field.
    */
   public function getRowData(array $field_settings);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMappingPluginBase.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * Renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected RendererInterface $renderer;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMapping/ResponsiveImageStyles.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_styles_mapping\Plugin\ImageStylesMapping;

+use Drupal\responsive_image\Entity\ResponsiveImageStyle;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Link;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
     $responsive_image_styles = &\drupal_static(__FUNCTION__);

     if (!isset($responsive_image_styles)) {
-      /** @var \Drupal\responsive_image\Entity\ResponsiveImageStyle[] $responsive_image_style_entities */
+      /** @var ResponsiveImageStyle[] $responsive_image_style_entities */
       $responsive_image_style_entities = $this->entityTypeManager->getStorage('responsive_image_style')->loadMultiple();

       $responsive_image_styles = [];
@@ @@
    * @param string $responsive_image_style_id
    *   The ID of the responsive image style.
    *
-   * @return string|\Drupal\Component\Render\MarkupInterface
+   * @return string|MarkupInterface
    *   A link to the responsive image style if user has access.
    *   The responsive image style's label otherwise.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/image_styles_mapping/src/Plugin/ImageStylesMapping/Image.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\image_styles_mapping\Plugin\ImageStylesMapping;

+use Drupal\image\Entity\ImageStyle;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Link;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
     $image_styles = &\drupal_static(__FUNCTION__);

     if (!isset($image_styles)) {
-      /** @var \Drupal\image\Entity\ImageStyle[] $image_styles_entities */
+      /** @var ImageStyle[] $image_styles_entities */
       $image_styles_entities = $this->entityTypeManager->getStorage('image_style')->loadMultiple();

       $image_styles = [];
@@ @@
    * @param string $image_style_name
    *   The name of the image style.
    *
-   * @return string|\Drupal\Component\Render\MarkupInterface
+   * @return string|MarkupInterface
    *   A link to the image style if user has access.
    *   The image style's label otherwise.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/image_styles_mapping/src/Controller/ImageStylesMappingController.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Fields report title.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected TranslatableMarkup $fieldsReportTitle;

@@ @@
   /**
    * Fields report empty value.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected TranslatableMarkup $fieldsReportEmptyValue;

@@ @@
   /**
    * Views fields report title.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected TranslatableMarkup $viewsFieldsReportTitle;

@@ @@
   /**
    * Views fields report empty value.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected TranslatableMarkup $viewsFieldsReportEmptyValue;

@@ @@
   /**
    * Image styles mapping service Interface.
    *
-   * @var \Drupal\image_styles_mapping\Service\ImageStylesMappingServiceInterface
+   * @var ImageStylesMappingServiceInterface
    */
   protected ImageStylesMappingServiceInterface $imageStylesMappingService;

@@ @@
   /**
    * The request stack service.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected Request $currentRequest;

@@ @@
   /**
    * Constructs a new ImageStylesMappingController.
    *
-   * @param \Drupal\image_styles_mapping\Service\ImageStylesMappingServiceInterface $image_styles_mapping_service
+   * @param ImageStylesMappingServiceInterface $image_styles_mapping_service
    *   An instance of imageStylesMappingService.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

