diff --git a/search_api_sorts.api.php b/search_api_sorts.api.php
index 28e552f..b5ba646 100644
--- a/search_api_sorts.api.php
+++ b/search_api_sorts.api.php
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\search_api_sorts\SortsField;
+use Drupal\search_api\Display\DisplayInterface;
 /**
  * @file
  * Hooks provided by the Search API sorts module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the active sort.
  *
@@ -18,14 +18,14 @@
  * your logic also applies to the default sort, remember to implement
  * hook_search_api_sorts_default_sort_alter too.
  *
- * @param \Drupal\search_api_sorts\SortsField $sort
+ * @param SortsField $sort
  *   The Search API sorts object, containing the field name and order.
- * @param \Drupal\search_api\Display\DisplayInterface $display
+ * @param DisplayInterface $display
  *   The search api display for which the active sort is executed.
  *
  * @see \Drupal\search_api_sorts\SearchApiSortsManager
  */
-function hook_search_api_sorts_active_sort_alter(\Drupal\search_api_sorts\SortsField &$sort, \Drupal\search_api\Display\DisplayInterface $display) {
+function hook_search_api_sorts_active_sort_alter(SortsField &$sort, DisplayInterface $display) {
 
   // Example: use different price for anonymous users when sorting on price.
   if ($sort->getFieldName() === "price" && \Drupal::currentUser()->isAnonymous()) {
@@ -41,14 +41,14 @@ function hook_search_api_sorts_active_sort_alter(\Drupal\search_api_sorts\SortsF
  * when no specific sort is chosen. This hook allows altering both the field
  * and the order.
  *
- * @param \Drupal\search_api_sorts\SortsField $sort
+ * @param SortsField $sort
  *   The Search API sorts object, containing the field name and order.
- * @param \Drupal\search_api\Display\DisplayInterface $display
+ * @param DisplayInterface $display
  *   The search api display for which the default sort is executed.
  *
  * @see \Drupal\search_api_sorts\SearchApiSortsManager
  */
-function hook_search_api_sorts_default_sort_alter(\Drupal\search_api_sorts\SortsField &$sort, \Drupal\search_api\Display\DisplayInterface $display) {
+function hook_search_api_sorts_default_sort_alter(SortsField &$sort, DisplayInterface $display) {
   $sort->setFieldName("title");
   $sort->setOrder("desc");
 }
diff --git a/search_api_sorts.install b/search_api_sorts.install
index 3146bfe..b38ad00 100644
--- a/search_api_sorts.install
+++ b/search_api_sorts.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
+use Drupal\search_api_sorts\Entity\SearchApiSortsField;
 /**
  * @file
  * Provides install hooks for the search_api_sorts module.
@@ -9,7 +11,7 @@
  * Adds entries to key_value table for each search_api_sorts_field entity.
  */
 function search_api_sorts_update_8101(&$sandbox) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $field_storage */
+  /** @var ConfigEntityStorage $field_storage */
   $field_storage = \Drupal::service('entity_type.manager')
     ->getStorage('search_api_sorts_field');
 
@@ -31,7 +33,7 @@ function search_api_sorts_update_8101(&$sandbox) {
   $entities = $field_storage->loadMultiple($entity_batch);
 
   foreach ($entities as $e) {
-    /** @var \Drupal\search_api_sorts\Entity\SearchApiSortsField $e */
+    /** @var SearchApiSortsField $e */
     $e->save();
     $sandbox['current']++;
   }
@@ -52,7 +54,7 @@ function search_api_sorts_update_8101(&$sandbox) {
  * minimal.
  */
 function search_api_sorts_update_8102(&$sandbox) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $fieldStorage */
+  /** @var ConfigEntityStorage $fieldStorage */
   $field_storage = \Drupal::service('entity_type.manager')
     ->getStorage('search_api_sorts_field');
 
diff --git a/src/Controller/AdminController.php b/src/Controller/AdminController.php
index cd13619..08f455e 100644
--- a/src/Controller/AdminController.php
+++ b/src/Controller/AdminController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_sorts\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\search_api\Display\DisplayInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Drupal\search_api\Display\DisplayPluginManagerInterface;
@@ -23,23 +25,23 @@ class AdminController extends ControllerBase {
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;
 
   /**
    * The Search API display manager.
    *
-   * @var \Drupal\search_api\Display\DisplayPluginManagerInterface
+   * @var DisplayPluginManagerInterface
    */
   protected $searchApiDisplayManager;
 
   /**
    * AdminController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\search_api\Display\DisplayPluginManagerInterface $search_api_display_manager
+   * @param DisplayPluginManagerInterface $search_api_display_manager
    *   The Search API display manager.
    */
   public function __construct(RequestStack $requestStack, DisplayPluginManagerInterface $search_api_display_manager) {
@@ -112,7 +114,7 @@ class AdminController extends ControllerBase {
     $this->currentRequest->query->remove('destination');
 
     $display_id = $this->getOriginalConfigId($search_api_sorts_field->getDisplayId());
-    /** @var \Drupal\search_api\Display\DisplayInterface $display */
+    /** @var DisplayInterface $display */
     $display = $this->searchApiDisplayManager->createInstance($display_id);
 
     return $this->redirect('search_api_sorts.search_api_display.sorts', [
diff --git a/src/EventSubscriber/SearchApiSortsQueryPreExecute.php b/src/EventSubscriber/SearchApiSortsQueryPreExecute.php
index ee1f419..26e70e5 100644
--- a/src/EventSubscriber/SearchApiSortsQueryPreExecute.php
+++ b/src/EventSubscriber/SearchApiSortsQueryPreExecute.php
@@ -16,14 +16,14 @@ class SearchApiSortsQueryPreExecute implements EventSubscriberInterface {
   /**
    * The search api sorts manager.
    *
-   * @var \Drupal\search_api_sorts\SearchApiSortsManagerInterface
+   * @var SearchApiSortsManagerInterface
    */
   protected $searchApiSortsManager;
 
   /**
    * SearchApiSortsQueryAlter constructor.
    *
-   * @param \Drupal\search_api_sorts\SearchApiSortsManagerInterface $search_api_sorts_manager
+   * @param SearchApiSortsManagerInterface $search_api_sorts_manager
    *   The search api sorts manager.
    */
   public function __construct(SearchApiSortsManagerInterface $search_api_sorts_manager) {
@@ -33,7 +33,7 @@ class SearchApiSortsQueryPreExecute implements EventSubscriberInterface {
   /**
    * Alter the search api query and add our sorting.
    *
-   * @param \Drupal\search_api\Event\QueryPreExecuteEvent $event
+   * @param QueryPreExecuteEvent $event
    *   The search api sorts manager.
    */
   public function onQueryPreExecute(QueryPreExecuteEvent $event) {
diff --git a/src/Form/ManageSortFieldsForm.php b/src/Form/ManageSortFieldsForm.php
index bd4ecc9..657c03b 100644
--- a/src/Form/ManageSortFieldsForm.php
+++ b/src/Form/ManageSortFieldsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_sorts\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -25,28 +26,28 @@ class ManageSortFieldsForm extends FormBase {
   /**
    * The search_api display plugin manager.
    *
-   * @var \Drupal\search_api\Display\DisplayPluginManagerInterface
+   * @var DisplayPluginManagerInterface
    */
   protected $displayPluginManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The search api sorts field storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $searchApiSortsFieldStorage;
 
@@ -67,13 +68,13 @@ class ManageSortFieldsForm extends FormBase {
   /**
    * Constructs the DisplaySortsForm object.
    *
-   * @param \Drupal\search_api\Display\DisplayPluginManagerInterface $display_plugin_manager
+   * @param DisplayPluginManagerInterface $display_plugin_manager
    *   The search_api display plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(DisplayPluginManagerInterface $display_plugin_manager, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $languageManager, ModuleHandlerInterface $moduleHandler) {
diff --git a/src/Plugin/Block/SearchApiSortsBlock.php b/src/Plugin/Block/SearchApiSortsBlock.php
index cffffa2..6e65268 100644
--- a/src/Plugin/Block/SearchApiSortsBlock.php
+++ b/src/Plugin/Block/SearchApiSortsBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_sorts\Plugin\Block;
 
+use Drupal\search_api\Display\DisplayInterface;
+use Drupal\search_api_sorts\SearchApiSortsManagerInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Block\BlockBase;
@@ -24,7 +26,7 @@ class SearchApiSortsBlock extends BlockBase {
    */
   public function build() {
     $build = [];
-    /** @var \Drupal\search_api\Display\DisplayInterface $search_api_display */
+    /** @var DisplayInterface $search_api_display */
     $search_api_display = $this->pluginDefinition['search_api_display'];
 
     if (!$search_api_display->isRenderedInCurrentRequest()) {
@@ -32,7 +34,7 @@ class SearchApiSortsBlock extends BlockBase {
       return [];
     }
 
-    /** @var \Drupal\search_api_sorts\SearchApiSortsManagerInterface $search_api_sorts_manager */
+    /** @var SearchApiSortsManagerInterface $search_api_sorts_manager */
     $search_api_sorts_manager = \Drupal::service('search_api_sorts.manager');
 
     $enabled_sorts = $search_api_sorts_manager->getEnabledSorts($search_api_display);
diff --git a/src/Plugin/Block/SearchApiSortsBlockDeriver.php b/src/Plugin/Block/SearchApiSortsBlockDeriver.php
index 3f2fe1e..413086b 100644
--- a/src/Plugin/Block/SearchApiSortsBlockDeriver.php
+++ b/src/Plugin/Block/SearchApiSortsBlockDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_sorts\Plugin\Block;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\search_api\Display\DisplayPluginManagerInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -24,7 +26,7 @@ class SearchApiSortsBlockDeriver implements ContainerDeriverInterface {
   /**
    * The entity storage used for search api sorts.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface $indexStorage
+   * @var EntityStorageInterface $indexStorage
    */
   protected $indexStorage;
 
@@ -54,7 +56,7 @@ class SearchApiSortsBlockDeriver implements ContainerDeriverInterface {
     if (!isset($this->derivatives[$base_plugin_id])) {
       $plugin_derivatives = [];
 
-      /** @var \Drupal\search_api\Display\DisplayPluginManagerInterface $sapi_display_manager */
+      /** @var DisplayPluginManagerInterface $sapi_display_manager */
       $sapi_display_manager = \Drupal::service('plugin.manager.search_api.display');
       foreach ($sapi_display_manager->getInstances() as $display) {
         $machine_name = $display->getPluginId();
diff --git a/src/SearchApiSortsManager.php b/src/SearchApiSortsManager.php
index 70ec4cd..32916fd 100644
--- a/src/SearchApiSortsManager.php
+++ b/src/SearchApiSortsManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\search_api_sorts;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\search_api\Display\DisplayInterface;
@@ -18,41 +21,41 @@ class SearchApiSortsManager implements SearchApiSortsManagerInterface {
   /**
    * Current Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The search api sorts field storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $searchApiSortsFieldStorage;
 
   /**
    * The search api display manager.
    *
-   * @var \Drupal\search_api\Display\DisplayPluginManagerInterface
+   * @var DisplayPluginManagerInterface
    */
   protected $searchApiDisplayManager;
 
   /**
    * SearchApiSortsManager constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack, containing the current request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\search_api\Display\DisplayPluginManagerInterface $searchApiDisplayManager
+   * @param DisplayPluginManagerInterface $searchApiDisplayManager
    *   The search api display manager.
    */
   public function __construct(RequestStack $request_stack, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, DisplayPluginManagerInterface $searchApiDisplayManager) {
@@ -89,10 +92,10 @@ class SearchApiSortsManager implements SearchApiSortsManagerInterface {
   /**
    * Returns all sort fields for a given search api display.
    *
-   * @param \Drupal\search_api\Display\DisplayInterface $display
+   * @param DisplayInterface $display
    *   The display where the sorts should be returned for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array containing sort fields for the given search display/
    */
   protected function getSorts(DisplayInterface $display) {
diff --git a/src/SearchApiSortsManagerInterface.php b/src/SearchApiSortsManagerInterface.php
index a53a739..12542d0 100644
--- a/src/SearchApiSortsManagerInterface.php
+++ b/src/SearchApiSortsManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_sorts;
 
+use Drupal\search_api_sorts\Entity\SearchApiSortsField;
 use Drupal\search_api\Display\DisplayInterface;
 use Drupal\search_api\IndexInterface;
 
@@ -13,10 +14,10 @@ interface SearchApiSortsManagerInterface {
   /**
    * Returns the active sort field and order for a given search api display.
    *
-   * @param \Drupal\search_api\Display\DisplayInterface $display
+   * @param DisplayInterface $display
    *   The display where the active sort should be returned for.
    *
-   * @return \Drupal\search_api_sorts\SortsField
+   * @return SortsField
    *   An object containing the field and order.
    */
   public function getActiveSort(DisplayInterface $display);
@@ -24,10 +25,10 @@ interface SearchApiSortsManagerInterface {
   /**
    * Returns the default sort field and order.
    *
-   * @param \Drupal\search_api\Display\DisplayInterface $display
+   * @param DisplayInterface $display
    *   The display where the default sort should be returned for.
    *
-   * @return \Drupal\search_api_sorts\SortsField
+   * @return SortsField
    *   An object containing the field and order.
    */
   public function getDefaultSort(DisplayInterface $display);
@@ -35,10 +36,10 @@ interface SearchApiSortsManagerInterface {
   /**
    * Returns all enabled sort fields for a given search api display.
    *
-   * @param \Drupal\search_api\Display\DisplayInterface $display
+   * @param DisplayInterface $display
    *   The display where the enabled sorts should be returned for.
    *
-   * @return \Drupal\search_api_sorts\Entity\SearchApiSortsField[]
+   * @return SearchApiSortsField[]
    *   An array of sort field entities.
    */
   public function getEnabledSorts(DisplayInterface $display);
@@ -46,7 +47,7 @@ interface SearchApiSortsManagerInterface {
   /**
    * Remove all deleted sorts for the given index.
    *
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search api index.
    */
   public function cleanupSortFields(IndexInterface $index);
diff --git a/tests/src/Functional/HooksTest.php b/tests/src/Functional/HooksTest.php
index 8317e93..7147ad1 100644
--- a/tests/src/Functional/HooksTest.php
+++ b/tests/src/Functional/HooksTest.php
@@ -23,7 +23,7 @@ class HooksTest extends SortsFunctionalBase {
     $sorts_config = 'admin/config/search/search-api/index/' . $this->indexId . '/sorts/' . $this->escapedDisplayId;
     $this->drupalGet($sorts_config);
     $edit = ['sorts[id][status]' => TRUE, 'default_sort' => 'id'];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Add and place the sorts block in the footer.
     $block_settings = ['region' => 'footer', 'id' => 'sorts-id'];
diff --git a/tests/src/Functional/IntegrationTest.php b/tests/src/Functional/IntegrationTest.php
index 8827ff6..f1f4c36 100644
--- a/tests/src/Functional/IntegrationTest.php
+++ b/tests/src/Functional/IntegrationTest.php
@@ -23,7 +23,7 @@ class IntegrationTest extends SortsFunctionalBase {
     $edit = [
       'sorts[id][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Check for non-existence of the block first.
     $this->drupalGet('search-api-sorts-test');
@@ -80,7 +80,7 @@ class IntegrationTest extends SortsFunctionalBase {
       'sorts[search_api_relevance][status]' => TRUE,
       'sorts[type][status]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     // Make sure the ID and type link are available.
     $this->drupalGet('search-api-sorts-test');
@@ -91,7 +91,7 @@ class IntegrationTest extends SortsFunctionalBase {
     // Remove the type field from the index.
     $this->drupalGet('admin/config/search/search-api/index/' . $this->indexId . '/fields');
     $this->getSession()->getPage()->find('css', '#edit-fields-type-remove')->click();
-    $this->drupalPostForm(NULL, [], 'Save changes');
+    $this->submitForm([], 'Save changes');
 
     // The type field was removed from the index. Make sure the type field is
     // also removed from the sorts block.
@@ -125,7 +125,7 @@ class IntegrationTest extends SortsFunctionalBase {
       'sorts[type][status]' => TRUE,
       'default_sort' => 'id',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
 
     $configs_to_be_saved = ['id', 'created', 'type'];
     $configs_not_to_be_saved = ['search_api_relevance',
