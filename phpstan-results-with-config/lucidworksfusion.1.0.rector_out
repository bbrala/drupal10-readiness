modules/contrib/lucidworksfusion/fusion_connector.module
modules/contrib/lucidworksfusion/src-impostor-normalizers/EntityAccessDeniedHttpExceptionNormalizerImpostor.php
modules/contrib/lucidworksfusion/src-impostor-normalizers/ResourceObjectNormalizerImpostor.php
modules/contrib/lucidworksfusion/src/Access/EntityAccessChecker.php
modules/contrib/lucidworksfusion/src/Controller/EntityResource.php
modules/contrib/lucidworksfusion/src/Controller/FusionConnectorEntryPoint.php
modules/contrib/lucidworksfusion/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/lucidworksfusion/src/EventSubscriber/ResourceObjectNormalizationCacher.php
modules/contrib/lucidworksfusion/src/EventSubscriber/ResourceResponseSubscriber.php
modules/contrib/lucidworksfusion/src/Form/FusionConnectorEntitiesAccessForm.php
modules/contrib/lucidworksfusion/src/Form/FusionConnectorFieldsAccessForm.php
modules/contrib/lucidworksfusion/src/Form/FusionConnectorLanguageAccessForm.php
modules/contrib/lucidworksfusion/src/Form/FusionConnectorLanguageTypeAccessForm.php
modules/contrib/lucidworksfusion/src/FusionConnectorPermissions.php
modules/contrib/lucidworksfusion/src/FusionConnectorServiceProvider.php
modules/contrib/lucidworksfusion/src/JsonApiResource/LabelOnlyResourceObject.php
modules/contrib/lucidworksfusion/src/JsonApiResource/Relationship.php
modules/contrib/lucidworksfusion/src/JsonApiResource/ResourceObject.php
modules/contrib/lucidworksfusion/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php
modules/contrib/lucidworksfusion/src/Normalizer/ResourceObjectNormalizer.php
modules/contrib/lucidworksfusion/src/Plugin/Derivative/LanguageAccessLocalTask.php
modules/contrib/lucidworksfusion/src/ResourceType/FusionConnectorResourceTypeRepository.php
modules/contrib/lucidworksfusion/src/Routing/FusionRoutes.php
modules/contrib/lucidworksfusion/tests/src/Functional/EntityAccessTest.php
modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorConfigFormsTest.php
modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorPermissionsTest.php
modules/contrib/lucidworksfusion/tests/src/Functional/MultilangualTest.php

24 files with changes
=====================

1) modules/contrib/lucidworksfusion/tests/src/Functional/MultilangualTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fusion_connector\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(
       [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorPermissionsTest.php:56

    ---------- begin diff ----------
@@ @@

     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
   }

   /**
@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 1);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['name'],
-      $this->tags[0]->getName()
-    );
+    $this->assertEquals(count($response['data']), 1);
+    $this->assertEquals($response['data'][0]['attributes']['name'], $this->tags[0]->getName());

     // Get the available articles.
     $response = Json::decode($this->drupalGet('/fusion/node/article'));
@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have response,
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
     $this->drupalLogout();

@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('field_sort1', $response['data'][0]['attributes']);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      $this->nodes[0]->getTitle()
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], $this->nodes[0]->getTitle());

     // Get the available tags.
     $response = Json::decode($this->drupalGet('/fusion/taxonomy_term/tags'));
@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have no response,
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
     $this->drupalLogout();
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorConfigFormsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fusion_connector\Functional;

+use Drupal\user\Entity\User;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * An administrative user to configure the test environment.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $permissions = [
@@ @@
     // Check if the fusion connector settings page is available.
     $this->drupalGet('admin/config/services/fusion_connector');

-    $this->assertField('fusion_connector_types[node--page]', 'Basic page');
-    $this->assertField('fusion_connector_types[node--article]', 'Article');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_types[node--page]', 'Basic page');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_types[node--article]', 'Article');

     // Disable the page entity from indexing.
     $edit = [
       'fusion_connector_types[node--article]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_types[node--page]');
-    $this->assertNoFieldChecked('fusion_connector_types[node--article]');
+    $this->drupalGet('admin/config/services/fusion_connector');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_types[node--page]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_types[node--article]');

     $config = $this->config('fusion_connector.settings');
     $disabledEntities = $config->get('disabled_entities');
@@ @@
     // Check if the visibility setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/access/node/page');

-    $this->assertField('fusion_connector_fieldsaccess[nid][0]', 'nid');
-    $this->assertField('fusion_connector_fieldsaccess[uid][0]', 'uid');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[nid][0]', 'nid');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[uid][0]', 'uid');

     // Disable the page entity fields from indexing.
     $edit = [
       'fusion_connector_fieldsaccess[uid][0]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/access/node/page',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_fieldsaccess[nid][0]');
-    $this->assertNoFieldChecked('fusion_connector_fieldsaccess[uid][0]');
+    $this->drupalGet('admin/config/services/fusion_connector/access/node/page');
+    $this->submitForm($edit, t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_fieldsaccess[nid][0]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_fieldsaccess[uid][0]');

     $config = $this->config('fusion_connector.settings');
     $disabledFields = $config->get('disabled_fields');
@@ @@
       'admin/config/services/fusion_connector/type_language_access/node/page'
     );

-    $this->assertField(
-      'fusion_connector_entity_type_languages[ca][checked]',
-      'Catalan'
-    );
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_entity_type_languages[ca][checked]', 'Catalan');

     // Disable the page entity from indexing on the ca language.
     $edit = [
       'fusion_connector_entity_type_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/type_language_access/node/page',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/type_language_access/node/page');
+    $this->submitForm($edit, t('Save configuration'));

     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_entity_type_languages');
@@ @@
     // Check if the language setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/languages');

-    $this->assertField('fusion_connector_languages[ca][checked]', 'Catalan');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('fusion_connector_languages[ca][checked]', 'Catalan');

     // Disable a language from being indexed.
     $edit = [
       'fusion_connector_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/languages',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/languages');
+    $this->submitForm($edit, t('Save configuration'));

     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_languages');
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertNoFieldCheckedRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lucidworksfusion/tests/src/Functional/EntityAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\fusion_connector\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Tests\jsonapi\Functional\JsonApiFunctionalTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(
       ['view fusion_connector node--article'],
@@ @@
     $this->assertNotNull($response);
     $this->assertNotNull($response['data']);
     $this->assertTrue(count($response['data']) > 0);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      'Hello World'
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], 'Hello World');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lucidworksfusion/src/Routing/FusionRoutes.php:80

    ---------- begin diff ----------
@@ @@
   /**
    * Get all the relatable resource types for the selected entities.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource
+   * @param ResourceType $resource
    *   Resource.
    * @param array $selectedResourcesTypeNames
    *   Selected Resources Type Names.
@@ @@
   /**
    * Get a unique route name for the JSON:API resource type and route type.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type for which the route collection should be created.
    * @param string $route_type
    *   The route type. E.g. 'individual' or 'collection'.
@@ @@
   /**
    * Get a unique route name for the file upload resource type and route type.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type for which the route collection should be created.
    * @param string $route_type
    *   The route type. E.g. 'individual' or 'collection'.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/lucidworksfusion/src/ResourceType/FusionConnectorResourceTypeRepository.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The bundle manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * ResourceTypeConverter constructor.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_bundle_info
    *   The entity type bundle info service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/lucidworksfusion/src/Plugin/Derivative/LanguageAccessLocalTask.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager interface.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;

@@ @@
   /**
    * Constrcuts a LanguageAccessLocalTask object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   Language manager interface.
    */
   public function __construct(LanguageManagerInterface $languageManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lucidworksfusion/src/Normalizer/ResourceObjectNormalizer.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The entity normalization cacher.
    *
-   * @var \Drupal\jsonapi\EventSubscriber\ResourceObjectNormalizationCacher
+   * @var ResourceObjectNormalizationCacher
    */
   protected $cacher;

@@ @@
   /**
    * Constructs a ResourceObjectNormalizer object.
    *
-   * @param \Drupal\jsonapi\EventSubscriber\ResourceObjectNormalizationCacher $cacher
+   * @param ResourceObjectNormalizationCacher $cacher
    *   The entity normalization cacher.
    */
   public function __construct(ResourceObjectNormalizationCacher $cacher) {
@@ @@
    * @param string $format
    *   The serialization format.
    *
-   * @return \Drupal\jsonapi\Normalizer\Value\CacheableNormalization
+   * @return CacheableNormalization
    *   The normalized value.
    */
   protected function serializeField($field, array $context, $format) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/lucidworksfusion/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector\Normalizer;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\jsonapi\Exception\EntityAccessDeniedHttpException;
 use Drupal\jsonapi\Normalizer\EntityAccessDeniedHttpExceptionNormalizer as JsonApiEntityAccessDeniedHttpExceptionNormalizer;
@@ @@

     if ($exception instanceof EntityAccessDeniedHttpException) {
       $error = $exception->getError();
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $error['entity'];
       $pointer = $error['pointer'];
       $reason = $error['reason'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/lucidworksfusion/src/JsonApiResource/ResourceObject.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a LinkCollection for the given entity.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The JSON:API resource type of the given entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build links.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   (optional) Any extra links for the resource object, if a `self` link is
    *   not provided, one will be automatically added if the resource is
    *   locatable and is not an internal entity.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The built links.
    */
   protected static function buildLinksFromEntity(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/lucidworksfusion/src/JsonApiResource/Relationship.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a LinkCollection for the given entity reference field.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $context
+   * @param ResourceObject $context
    *   The context resource object of the relationship object.
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field
+   * @param EntityReferenceFieldItemListInterface $field
    *   The entity reference field from which to create the links.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   Any extra links for the Relationship, if a `self` link is not provided,
    *   one will be automatically added if the context resource is locatable and
    *   is not internal.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The built links.
    */
   protected static function buildLinkCollectionFromEntityReferenceField(ResourceObject $context, EntityReferenceFieldItemListInterface $field, LinkCollection $links) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/lucidworksfusion/src/JsonApiResource/LabelOnlyResourceObject.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity represented by this resource object.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Gets the decorated entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The label for which to only normalize its label.
    */
   public function getEntity() {
@@ @@
   /**
    * Sets the underlying entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    */
   protected function setEntity(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/lucidworksfusion/src/FusionConnectorServiceProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector;

+use Symfony\Component\DependencyInjection\Definition;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceProviderBase;
 use Drupal\fusion_connector\EventSubscriber\ResourceObjectNormalizationCacher;
@@ @@
    */
   public function alter(ContainerBuilder $container) {

-    /** @var \Symfony\Component\DependencyInjection\Definition $definition */
+    /** @var Definition $definition */
     $container_namespaces = $container->getParameter('container.namespaces');
     $container_modules = $container->getParameter('container.modules');
     $jsonapi_impostor_path = dirname(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/lucidworksfusion/src/FusionConnectorPermissions.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceType;

@@ @@
   /**
    * Constructs a TaxonomyPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   Bundle information service.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resourceType
+   * @param ResourceTypeRepositoryInterface $resourceType
    *   Fusion connector resource type repository.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/lucidworksfusion/src/Form/FusionConnectorLanguageTypeAccessForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepository
+   * @var ResourceTypeRepository
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains query params.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepository $resource_type_repository
+   * @param ResourceTypeRepository $resource_type_repository
    *   The service that provides information about all the entity types.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/lucidworksfusion/src/Form/FusionConnectorLanguageAccessForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The form config.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/lucidworksfusion/src/Form/FusionConnectorFieldsAccessForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector\Form;

+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The current route match.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepository
+   * @var ResourceTypeRepository
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepository $resource_type_repository
+   * @param ResourceTypeRepository $resource_type_repository
    *   The jsonapi resource type repository.
    */
   public function __construct(
@@ @@
     ) : [];
     $resource_config_id = sprintf('%s--%s', $bundle, $entity_type_id);

-    /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entity_type */
+    /** @var ConfigEntityTypeInterface $entity_type */
     $entity_type = \Drupal::entityTypeManager()->getDefinition($bundle);
     $bundle = $resource_type->getBundle();

@@ @@
   /**
    * Gets all field names for a given entity type and bundle.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type.
    * @param string $bundle
    *   Bundle.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/lucidworksfusion/src/Form/FusionConnectorEntitiesAccessForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\ProxyClass\Routing\RouteBuilder $router_builder
+   * @param RouteBuilder $router_builder
    *   The router builder to rebuild menus after saving config entity.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/lucidworksfusion/src/EventSubscriber/ResourceResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\jsonapi\Normalizer\Value\CacheableNormalization;
 use Drupal\jsonapi\ResourceResponse;
 use Drupal\jsonapi\EventSubscriber\ResourceResponseSubscriber as JsonApiResourceResponseSubscriber;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\Serializer\SerializerInterface;

 /**
@@ @@
   /**
    * Serializes ResourceResponse responses' data, and removes that data.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof ResourceResponse) {
       return;
@@ @@
    * contexts), so instead, allow those to "leak" and collect them here in
    * a render context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\jsonapi\ResourceResponse $response
+   * @param ResourceResponse $response
    *   The response from the JSON:API resource.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer to use.
    * @param string|null $format
    *   The response format, or NULL in case the response does not need a format,
@@ @@
   /**
    * Generates a top-level JSON:API normalization context.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request from which the context can be derived.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/lucidworksfusion/src/EventSubscriber/ResourceObjectNormalizationCacher.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Adds a normalization to be cached after the response has been sent.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $object
+   * @param ResourceObject $object
    *   The resource object for which to generate a cache item.
    * @param array $normalization_parts
    *   The normalization parts to cache.
@@ @@
   /**
    * Generates a lookup render array for a normalization.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $object
+   * @param ResourceObject $object
    *   The resource object for which to generate a cache item.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/lucidworksfusion/src/EventSubscriber/ConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ @@
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\Core\Routing\RouteBuilderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The Drupal kernel.
    *
-   * @var \Drupal\Core\DrupalKernelInterface
+   * @var DrupalKernelInterface
    */
   protected $drupalKernel;

@@ @@
   /**
    * The route building service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * Constructs a ConfigSubscriber object.
    *
-   * @param \Drupal\Core\DrupalKernelInterface $drupal_kernel
+   * @param DrupalKernelInterface $drupal_kernel
    *   The Drupal kernel.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route building service.
    */
   public function __construct(DrupalKernelInterface $drupal_kernel, RouteBuilderInterface $route_builder) {
@@ @@
   /**
    * Rebuilds container and routes  when 'path_prefix' configuration is changed.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
@@ @@
   /**
    * Associates JSON:API Extras' config cache tag with all JSON:API responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if ($event->getRequest()->getRequestFormat() !== 'api_json') {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/lucidworksfusion/src/Controller/FusionConnectorEntryPoint.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Controller to list all the resources.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response object.
    */
   public function index() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/lucidworksfusion/src/Controller/EntityResource.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the relationship of an entity.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The base JSON:API resource type for the request to be served.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The requested entity.
    * @param string $related
    *   The related field name.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param int $response_code
    *   The response code. Defaults to 200.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   public function getRelationship(
@@ @@
   /**
    * Builds a response with the appropriate wrapped document.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\TopLevelDataInterface $data
+   * @param TopLevelDataInterface $data
    *   The data to wrap.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\jsonapi\JsonApiResource\IncludedData $includes
+   * @param IncludedData $includes
    *   The resources to be included in the document. Use NullData if
    *   there should be no included resources in the document.
    * @param int $response_code
@@ @@
    *   The response code.
    * @param array $headers
    *   An array of response headers.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $links
+   * @param LinkCollection $links
    *   The URLs to which to link. A 'self' link is added automatically.
    * @param array $meta
    *   (optional) The top-level metadata.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    */
   protected function buildWrappedResponse(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/lucidworksfusion/src/Access/EntityAccessChecker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector\Access;

+use Drupal\jsonapi\JsonApiResource\LabelOnlyResourceObject;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultReasonInterface;
 use Drupal\Core\Access\AccessResultForbidden;
@@ @@
   /**
    * Get the object to normalize and the access based on the provided entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to test access for.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account with which access should be checked. Defaults to
    *   the current user.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\ResourceObject|\Drupal\jsonapi\JsonApiResource\LabelOnlyResourceObject|\Drupal\jsonapi\Exception\EntityAccessDeniedHttpException
+   * @return \Drupal\jsonapi\JsonApiResource\ResourceObject|LabelOnlyResourceObject|EntityAccessDeniedHttpException
    *   The ResourceObject, a LabelOnlyResourceObject or an
    *   EntityAccessDeniedHttpException object if neither is accessible. All
    *   three possible return values carry the access result cacheability.
@@ @@
   /**
    * Checks access to the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which access should be evaluated.
    * @param string $operation
    *   The entity operation for which access should be evaluated.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The account with which access should be checked. Defaults to
    *   the current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface|\Drupal\Core\Access\AccessResultReasonInterface
+   * @return AccessResultInterface|AccessResultReasonInterface
    *   The access check result.
    */
   public function checkEntityAccess(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 24 files have been changed by Rector                                      

