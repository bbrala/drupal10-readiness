modules/contrib/interface_string_stats/interface_string_stats.install
modules/contrib/interface_string_stats/src/Controller/StringStatsController.php
modules/contrib/interface_string_stats/src/EventSubscriber/StringStatsExit.php
modules/contrib/interface_string_stats/src/Form/StringStatsSettingsForm.php
modules/contrib/interface_string_stats/src/Form/StringStatsTranslateEditForm.php
modules/contrib/interface_string_stats/src/Plugin/QueueWorker/StringStatsQueue.php
modules/contrib/interface_string_stats/src/Routing/StringStatsRouteSubscriber.php
modules/contrib/interface_string_stats/src/StringRequestProcessor.php
modules/contrib/interface_string_stats/src/StringStatsStringDatabaseStorage.php
modules/contrib/interface_string_stats/src/StringStatsTranslationManager.php
modules/contrib/interface_string_stats/src/StringStatsTranslationString.php

5 files with changes
====================

1) modules/contrib/interface_string_stats/src/StringStatsTranslationManager.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Original TranslationManager object.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $translationManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a TranslationManager object.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation_manager
+   * @param TranslationInterface $translation_manager
    *   The original TranslationManager object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The ConfigFactoryInterface object.
-   * @param \Drupal\Core\Session\AccountProxyInterface $proxyUser
+   * @param AccountProxyInterface $proxyUser
    *   The logged in user.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/interface_string_stats/src/StringStatsStringDatabaseStorage.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Original StringDatabaseStorage object.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $stringDatabase;

@@ @@
   /**
    * Constructs a new StringDatabaseStorage class.
    *
-   * @param \Drupal\locale\StringStorageInterface $string_database
+   * @param StringStorageInterface $string_database
    *   Original StringStorageInterface object.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   A Database connection to use for reading and writing configuration data.
    * @param array $options
    *   (optional) Any additional database connection options to use in queries.
@@ @@
     $result = $query->execute();

     foreach ($result as $item) {
-      /** @var \Drupal\interface_string_stats\StringStatsTranslationString $string */
+      /** @var StringStatsTranslationString $string */
       $string = new StringStatsTranslationString($item);
       $string->setStorage($this);
       $strings[] = $string;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/interface_string_stats/src/StringRequestProcessor.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The locale storage.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $stringDatabase;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs a new StringRequestProcessor class.
    *
-   * @param \Drupal\locale\StringStorageInterface $string_storage
+   * @param StringStorageInterface $string_storage
    *   The string storage.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(StringStorageInterface $string_storage, Connection $database) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/interface_string_stats/src/Plugin/QueueWorker/StringStatsQueue.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * StringRequestProcessor object.
    *
-   * @var \Drupal\interface_string_stats\StringRequestProcessor
+   * @var StringRequestProcessor
    */
   protected $stringProcessor;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/interface_string_stats/src/EventSubscriber/StringStatsExit.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\interface_string_stats\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Queue\QueueFactory;

@@ @@
   /**
    * QueueFactory object.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queue;

@@ @@
   /**
    * Constructs a StringStatsExit object.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   The QueueFactory object.
    */
   public function __construct(QueueFactory $queueFactory) {
@@ @@
   /**
    * Load strings from the static cache and pass to the queue to process fully.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   The PostResponseEvent object.
    */
-  public function terminate(PostResponseEvent $event) {
+  public function terminate(TerminateEvent $event) {
     $requested_string_translations = &drupal_static('interface_string_stats_strings', []);
     foreach ($requested_string_translations as $requested_string_translation) {
       $this->queue->createItem($requested_string_translation);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

