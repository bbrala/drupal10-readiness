modules/contrib/moderation_dashboard/moderation_dashboard.install
modules/contrib/moderation_dashboard/moderation_dashboard.module
modules/contrib/moderation_dashboard/src/Access/ModerationDashboardAccess.php
modules/contrib/moderation_dashboard/src/Form/SettingsForm.php
modules/contrib/moderation_dashboard/src/Plugin/Block/ModerationDashboardActivity.php
modules/contrib/moderation_dashboard/src/Plugin/Block/ModerationDashboardAddLinks.php
modules/contrib/moderation_dashboard/src/Plugin/Condition/HasModeratedContentType.php
modules/contrib/moderation_dashboard/src/Plugin/Condition/ModerationDashboardAccess.php
modules/contrib/moderation_dashboard/src/Plugin/views/access/ModerationDashboard.php
modules/contrib/moderation_dashboard/src/Plugin/views/field/LinkToLatestVersion.php
modules/contrib/moderation_dashboard/src/Routing/ResponseSubscriber.php
modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardComponentsTest.php
modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardPermissionTest.php
modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardPersonalizedComponentsTest.php
modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardRedirectTest.php
modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardTest.php
modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardTestBase.php
modules/contrib/moderation_dashboard/tests/src/Functional/RedirectOnLoginTest.php

15 files with changes
=====================

1) modules/contrib/moderation_dashboard/tests/src/Functional/RedirectOnLoginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_dashboard\Functional;

+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Tests redirect on login configuration.
  *
@@ @@
   /**
    * Tests enabled redirect on login.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testEnabled() {
     // Redirect is enabled by default.
@@ @@
   /**
    * Tests disabled redirect on login.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testDisabled() {
     // Set redirect to disabled.
@@ @@
   /**
    * Tests if settings form is working as expected.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testSettingsForm() {
     $admin = $this->createUser([], NULL, TRUE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_dashboard\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;

@@ @@
   /**
    * Test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create content types for tests.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_dashboard\Functional;

+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Contains tests for the Moderation Dashboard module.
  *
@@ @@
   /**
    * Tests that the Moderation Dashboard loads as expected.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    */
   public function testModerationDashboardLoads() {
     // Deny access for Anonymous users.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardRedirectTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_dashboard\Functional;

+use Behat\Mink\Exception\ExpectationException;
 /**
  * Tests redirection to dashboard on login.
  *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->config('system.site')
       ->set('page.403', '/user/login')
@@ @@
   /**
    * Tests if login is redirected when the user didn't request another page.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testRedirect() {
     $this->drupalGet('user/login');
@@ @@
   /**
    * Tests if login is not redirected when the user requested another page.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testNoRedirect() {
     // Anonymous user is redirected to login screen.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardPersonalizedComponentsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_dashboard\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * Tests personalized moderation dashboard components.
  *
@@ @@
   /**
    * Moderator user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $moderatorUser;

@@ @@
   /**
    * Regular user without moderation dashboard permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $regularUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->moderatorUser = $this->createUser($this->userPermissions, 'moderator user');
@@ @@
   /**
    * Tests that blocks and other elements exist on the user dashboard.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testModerationElement() {
     $users = [$this->user, $this->moderatorUser, $this->regularUser];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardPermissionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moderation_dashboard\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a moderated entity type.
@@ @@
   /**
    * Tests if a user can view their dashboard with permission.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    */
   public function testCanViewOwnDashboard() {
     foreach ($this->canViewOwnDashboardCases as $i => $testCase) {
@@ @@
   /**
    * Tests that a user can't view their dashboard without permission.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testCanNotViewOwnDashboard() {
     foreach ($this->canNotViewOwnDashboardCases as $i => $testCase) {
@@ @@
   /**
    * Tests if a user can view other dashboards with permission.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testCanViewOtherDashboard() {
     foreach ($this->canViewOtherDashboardCases as $i => $testCase) {
@@ @@
   /**
    * Tests that a user can't view other dashboards without permission.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testCanNotViewOtherDashboard() {
     foreach ($this->canNotViewOtherDashboardCases as $i => $testCase) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/moderation_dashboard/tests/src/Functional/ModerationDashboardComponentsTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/moderation_dashboard/src/Routing/ResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moderation_dashboard\Routing;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * ResponseSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(AccountProxyInterface $current_user, ConditionManager $condition_manager, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Redirects user login to the Moderation Dashboard, when appropriate.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     $request = $event->getRequest();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/moderation_dashboard/src/Plugin/views/field/LinkToLatestVersion.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moderation_dashboard\Plugin\views\field;

+use Drupal\content_moderation\ModerationInformation;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ @@
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\content_moderation\ModerationInformation $information */
+    /** @var ModerationInformation $information */
     $moderation_information = \Drupal::service('content_moderation.moderation_information');

-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity($values);
     $entity_type_id = $entity->getEntityTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/moderation_dashboard/src/Plugin/Condition/ModerationDashboardAccess.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * User Storage variable.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
    *   Contains plugin Id.
    * @param mixed $plugin_definition
    *   Contains plugin definition.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   Contains User entity storage interface.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UserStorageInterface $user_storage) {
@@ @@
   /**
    * Create method for DI.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Contains container interface object.
    * @param array $configuration
    *   A config array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/moderation_dashboard/src/Plugin/Condition/HasModeratedContentType.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
   /**
    * The bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The moderation information service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The bundle information service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ModerationInformationInterface $moderation_information, EntityTypeBundleInfoInterface $bundle_info, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/moderation_dashboard/src/Plugin/Block/ModerationDashboardAddLinks.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/moderation_dashboard/src/Plugin/Block/ModerationDashboardActivity.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $user_storage
+   * @param EntityStorageInterface $user_storage
    *   The user storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, TimeInterface $time, EntityStorageInterface $user_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/moderation_dashboard/src/Access/ModerationDashboardAccess.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a ScheduledListAccess object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ @@
    * user
    * profile page or the scheduled content admin overview.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current account.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/moderation_dashboard/moderation_dashboard.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\views\ViewExecutable;
 /**
  * @file
  * Contains hooks for the moderation_dashboard module.
@@ @@
   $data = [];

   $manager = \Drupal::entityTypeManager();
-  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface[] $entity_types */
+  /** @var ContentEntityTypeInterface[] $entity_types */
   $entity_types = array_filter($manager->getDefinitions(), function (EntityTypeInterface $entity_type) {
     return (
       $entity_type instanceof ContentEntityTypeInterface &&
@@ @@
  */
 function moderation_dashboard_preprocess_views_view(&$variables) {
   if (isset($variables['id']) && strpos($variables['id'], 'moderation_dashboard') === 0) {
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $variables['view'];
     if ($view->getCurrentPage() === 0 && $view->total_rows < $view->getItemsPerPage()) {
       $variables['pager'] = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

