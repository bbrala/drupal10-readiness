diff --git a/group_behavior.install b/group_behavior.install
index bbe4b3c..66cfc43 100644
--- a/group_behavior.install
+++ b/group_behavior.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\group\Entity\GroupContentTypeInterface;
 /**
  * Implements hook_update_N().
  *
@@ -12,7 +13,7 @@
  */
 function group_behavior_update_8001(&$sandbox) {
   $storage = \Drupal::entityTypeManager()->getStorage('group_content_type');
-  /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+  /** @var GroupContentTypeInterface $groupContentType */
   foreach ($storage->loadMultiple() as $groupContentType) {
     $enabled = $groupContentType->getThirdPartySetting('group_behavior', 'autocreate');
     $groupContentType->setThirdPartySetting('group_behavior', 'enabled', $enabled);
@@ -31,7 +32,7 @@ function group_behavior_update_8001(&$sandbox) {
  */
 function group_behavior_update_8002(&$sandbox) {
   $storage = \Drupal::entityTypeManager()->getStorage('group_content_type');
-  /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+  /** @var GroupContentTypeInterface $groupContentType */
   foreach ($storage->loadMultiple() as $groupContentType) {
     $enabled = $groupContentType->getThirdPartySetting('group_behavior', 'enabled');
     if ($enabled) {
@@ -55,7 +56,7 @@ function group_behavior_update_8002(&$sandbox) {
  */
 function group_behavior_update_8003(&$sandbox) {
   $storage = \Drupal::entityTypeManager()->getStorage('group_content_type');
-  /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+  /** @var GroupContentTypeInterface $groupContentType */
   foreach ($storage->loadMultiple() as $groupContentType) {
     // This will also remove our sub-array.
     $groupContentType->unsetThirdPartySetting('group_behavior', 'domain_sync');
diff --git a/modules/field_sync/src/FieldSyncEntityHooks.php b/modules/field_sync/src/FieldSyncEntityHooks.php
index 7831f09..0246349 100644
--- a/modules/field_sync/src/FieldSyncEntityHooks.php
+++ b/modules/field_sync/src/FieldSyncEntityHooks.php
@@ -41,7 +41,7 @@ class FieldSyncEntityHooks {
    * rely on the GroupContent relation when this is called. (And ignore the
    * missing relation on the first save.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public static function postSave(EntityInterface $entity) {
     if (static::$doingDomainSync) {
@@ -53,7 +53,7 @@ class FieldSyncEntityHooks {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   protected static function doPostSave(EntityInterface $entity) {
     if (
@@ -62,7 +62,7 @@ class FieldSyncEntityHooks {
       && ($groupContents = GroupContent::loadByEntity($entity))
     ) {
       $syncedToThis = FALSE;
-      /** @var \Drupal\group\Entity\GroupContentInterface[] $groupContents */
+      /** @var GroupContentInterface[] $groupContents */
       foreach ($groupContents as $groupContent) {
         $groupContentType = $groupContent->getGroupContentType();
         $groupEnabler = $groupContentType->getContentPlugin();
@@ -126,8 +126,8 @@ class FieldSyncEntityHooks {
   }
 
   /**
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $thisEntity
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param FieldableEntityInterface $thisEntity
+   * @param GroupTypeInterface $groupType
    * @param array $groupContentIds
    */
   public static function copyFieldsToGroupContent(FieldableEntityInterface $thisEntity, GroupTypeInterface $groupType, array $groupContentIds) {
@@ -183,8 +183,8 @@ class FieldSyncEntityHooks {
   /**
    * Copy fields. But not to users.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $sourceEntity
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $destinationEntity
+   * @param FieldableEntityInterface $sourceEntity
+   * @param FieldableEntityInterface $destinationEntity
    * @param array $fieldNames
    */
   protected static function copyFields(FieldableEntityInterface $sourceEntity, FieldableEntityInterface $destinationEntity, array $fieldNames) {
diff --git a/modules/field_sync/src/FieldSyncFormHooks.php b/modules/field_sync/src/FieldSyncFormHooks.php
index 3d4969c..892fa52 100644
--- a/modules/field_sync/src/FieldSyncFormHooks.php
+++ b/modules/field_sync/src/FieldSyncFormHooks.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\group_behavior_field_sync;
 
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -13,9 +15,9 @@ class FieldSyncFormHooks {
    * @see \Drupal\group_behavior\GroupBehaviorFormHooks::alterGroupTypeEditForm
    */
   public static function alterGroupTypeEditForm(&$form, FormStateInterface $form_state, $form_id) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
+    /** @var EntityFormInterface $formObject */
     $formObject = $form_state->getFormObject();
-    /** @var \Drupal\group\Entity\GroupTypeInterface $groupType */
+    /** @var GroupTypeInterface $groupType */
     $groupType = $formObject->getEntity();
 
     $tpsForm =&$form['third_party_settings']['group_behavior'];
diff --git a/modules/field_sync/src/FieldSyncHelpers.php b/modules/field_sync/src/FieldSyncHelpers.php
index 7d7ece3..e6541b0 100644
--- a/modules/field_sync/src/FieldSyncHelpers.php
+++ b/modules/field_sync/src/FieldSyncHelpers.php
@@ -2,13 +2,15 @@
 
 namespace Drupal\group_behavior_field_sync;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\group_behavior\GroupBehaviorHelpers;
 
 class FieldSyncHelpers {
 
   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
    * @return mixed
    */
@@ -30,16 +32,16 @@ class FieldSyncHelpers {
   }
 
   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
-   * @return array|\Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return array|FieldDefinitionInterface[]
    */
   public static function groupBehaviorBundleFieldDefinitions(GroupTypeInterface $groupType) {
     $contentPlugin = GroupBehaviorHelpers::getGroupBehaviorContentPlugin($groupType);
     if ($contentPlugin) {
       $entityTypeId = $contentPlugin->getEntityTypeId();
       $bundle = $contentPlugin->getEntityBundle();
-      /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+      /** @var EntityFieldManagerInterface $entityFieldManager */
       $entityFieldManager = \Drupal::service('entity_field.manager');
       $fieldDefinitions = $entityFieldManager->getFieldDefinitions($entityTypeId, $bundle);
     }
diff --git a/src/GroupBehaviorEntityHooks.php b/src/GroupBehaviorEntityHooks.php
index d100d57..046be30 100644
--- a/src/GroupBehaviorEntityHooks.php
+++ b/src/GroupBehaviorEntityHooks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\group_behavior;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\group\Entity\Group;
@@ -15,9 +16,9 @@ class GroupBehaviorEntityHooks {
   /**
    * Post insert.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function insert(EntityInterface $entity) {
     self::createGroupsIfNecessary($entity);
@@ -26,9 +27,9 @@ class GroupBehaviorEntityHooks {
   /**
    * Post update.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function update(EntityInterface $entity) {
     self::createGroupsIfNecessary($entity);
@@ -38,9 +39,9 @@ class GroupBehaviorEntityHooks {
   /**
    * Post insert translation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function insertTranslation(EntityInterface $entity) {
     self::createGroupsIfNecessary($entity);
@@ -50,9 +51,9 @@ class GroupBehaviorEntityHooks {
   /**
    * Post delete translation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function deleteTranslation(EntityInterface $entity) {
     self::updateGroupsAndContentConnectorIfNecessary($entity);
@@ -61,7 +62,7 @@ class GroupBehaviorEntityHooks {
   /**
    * Post delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public static function delete(EntityInterface $entity) {
     // Note that deleting content will delete the GroupContent relation via
@@ -80,9 +81,9 @@ class GroupBehaviorEntityHooks {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function createGroupsIfNecessary(EntityInterface $entity) {
     if ($entity instanceof ContentEntityInterface) {
@@ -109,15 +110,15 @@ class GroupBehaviorEntityHooks {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function updateGroupsAndContentConnectorIfNecessary(EntityInterface $entity) {
     if ($entity instanceof ContentEntityInterface) {
       $entityLangcode = $entity->language()->getId();
       if ($groupContents = GroupContent::loadByEntity($entity)) {
-        /** @var \Drupal\group\Entity\GroupContentInterface[] $groupContents */
+        /** @var GroupContentInterface[] $groupContents */
         foreach ($groupContents as $groupContent) {
           $groupContentType = $groupContent->getGroupContentType();
           if (GroupBehaviorHelpers::checkGroupContentTypeHasGroupBehavior($groupContentType)) {
diff --git a/src/GroupBehaviorFormHooks.php b/src/GroupBehaviorFormHooks.php
index bc6faf9..67bbe8b 100644
--- a/src/GroupBehaviorFormHooks.php
+++ b/src/GroupBehaviorFormHooks.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\group_behavior;
 
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ -9,9 +11,9 @@ use Drupal\group\Entity\GroupTypeInterface;
 class GroupBehaviorFormHooks {
 
   public static function alterGroupTypeEditForm(&$form, FormStateInterface $form_state, $form_id) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
+    /** @var EntityFormInterface $formObject */
     $formObject = $form_state->getFormObject();
-    /** @var \Drupal\group\Entity\GroupTypeInterface $groupType */
+    /** @var GroupTypeInterface $groupType */
     $groupType = $formObject->getEntity();
 
     $form['third_party_settings']['#tree'] = TRUE;
@@ -42,7 +44,7 @@ class GroupBehaviorFormHooks {
   }
 
   private static function contentPluginOptions(GroupTypeInterface $groupType) {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $pluginManager */
+    /** @var GroupContentEnablerManagerInterface $pluginManager */
     $pluginManager = \Drupal::service('plugin.manager.group_content_enabler');
     $options = [];
     foreach ($pluginManager->getInstalledIds($groupType) as $id) {
diff --git a/src/GroupBehaviorHelpers.php b/src/GroupBehaviorHelpers.php
index e7f6f0f..6026966 100644
--- a/src/GroupBehaviorHelpers.php
+++ b/src/GroupBehaviorHelpers.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\group_behavior;
 
+use Drupal\group\Plugin\GroupContentEnablerInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -14,7 +16,7 @@ use Drupal\group\Entity\GroupTypeInterface;
 class GroupBehaviorHelpers {
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return array
    */
@@ -22,7 +24,7 @@ class GroupBehaviorHelpers {
     $groups = [];
     if ($entity instanceof ContentEntityInterface) {
       if ($groupContents = GroupContent::loadByEntity($entity)) {
-        /** @var \Drupal\group\Entity\GroupContentInterface[] $groupContents */
+        /** @var GroupContentInterface[] $groupContents */
         foreach ($groupContents as $groupContent) {
           $groupContentType = $groupContent->getGroupContentType();
           if (static::checkGroupContentTypeHasGroupBehavior($groupContentType)) {
@@ -37,10 +39,10 @@ class GroupBehaviorHelpers {
   /**
    * Filter group content by type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\group\Entity\GroupContentTypeInterface $groupContentType
+   * @param EntityInterface $entity
+   * @param GroupContentTypeInterface $groupContentType
    *
-   * @return \Drupal\group\Entity\GroupContentInterface[]
+   * @return GroupContentInterface[]
    */
   public static function fetchEntityGroupContentOfType(EntityInterface $entity, GroupContentTypeInterface $groupContentType) {
     if ($entity instanceof ContentEntityInterface) {
@@ -58,14 +60,14 @@ class GroupBehaviorHelpers {
   /**
    * Get applicable group content types.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
-   * @return \Drupal\group\Entity\GroupContentTypeInterface[]
+   * @return GroupContentTypeInterface[]
    *   Group content types.
    */
   public static function fetchGroupContentTypesWithGroupBehaviorByEntity(EntityInterface $entity) {
-    /** @var \Drupal\group\Entity\GroupContentTypeInterface[] $groupContentTypes */
+    /** @var GroupContentTypeInterface[] $groupContentTypes */
     $groupContentTypes = GroupContentType::loadByEntityTypeId($entity->getEntityTypeId());
     $groupContentTypes = self::filterGroupContentTypesWithGroupBehavior($groupContentTypes);
     $groupContentTypes = self::filterGroupContentTypesByBundle($groupContentTypes, $entity->bundle());
@@ -75,10 +77,10 @@ class GroupBehaviorHelpers {
   /**
    * Filter group content types by setting.
    *
-   * @param \Drupal\group\Entity\GroupContentTypeInterface[] $groupContentTypes
+   * @param GroupContentTypeInterface[] $groupContentTypes
    *   Group content types.
    *
-   * @return \Drupal\group\Entity\GroupContentTypeInterface[]
+   * @return GroupContentTypeInterface[]
    *   Group content types.
    */
   protected static function filterGroupContentTypesWithGroupBehavior($groupContentTypes) {
@@ -92,11 +94,11 @@ class GroupBehaviorHelpers {
   }
 
   /**
-   * @param \Drupal\group\Entity\GroupContentTypeInterface[] $groupContentTypes
+   * @param GroupContentTypeInterface[] $groupContentTypes
    *   Group content types.
    * @param string $bundle
    *   The bundle.
-   * @return \Drupal\group\Entity\GroupContentTypeInterface[]
+   * @return GroupContentTypeInterface[]
    *   Group content types.
    */
   protected static function filterGroupContentTypesByBundle($groupContentTypes, $bundle) {
@@ -110,7 +112,7 @@ class GroupBehaviorHelpers {
   }
 
   /**
-   * @param \Drupal\group\Entity\GroupContentTypeInterface $groupContentType
+   * @param GroupContentTypeInterface $groupContentType
    *
    * @return bool
    */
@@ -120,7 +122,7 @@ class GroupBehaviorHelpers {
   }
 
   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
    * @return mixed
    */
@@ -129,16 +131,16 @@ class GroupBehaviorHelpers {
   }
 
   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
-   * @return \Drupal\group\Plugin\GroupContentEnablerInterface|null
+   * @return GroupContentEnablerInterface|null
    */
   public static function getGroupBehaviorContentPlugin(GroupTypeInterface $groupType) {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $pluginManager */
+    /** @var GroupContentEnablerManagerInterface $pluginManager */
     $pluginManager = \Drupal::service('plugin.manager.group_content_enabler');
     $contentPluginId = GroupBehaviorHelpers::getGroupBehaviorContentPluginId($groupType);
     try {
-      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $contentPlugin */
+      /** @var GroupContentEnablerInterface $contentPlugin */
       $contentPlugin = $pluginManager->createInstance($contentPluginId);
     }
     catch (PluginException $e) {
@@ -148,7 +150,7 @@ class GroupBehaviorHelpers {
   }
 
   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    * @param $id
    *
    * @return mixed
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index 19cb001..f4c25b9 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
