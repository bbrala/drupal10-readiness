modules/contrib/ui_patterns/modules/ui_patterns_ds/src/FieldTemplateProcessor.php
modules/contrib/ui_patterns/modules/ui_patterns_ds/src/FieldTemplateProcessorInterface.php
modules/contrib/ui_patterns/modules/ui_patterns_ds/src/Plugin/DsFieldTemplate/Pattern.php
modules/contrib/ui_patterns/modules/ui_patterns_ds/src/Plugin/UiPatterns/Source/DsFieldSource.php
modules/contrib/ui_patterns/modules/ui_patterns_ds/src/Plugin/UiPatterns/Source/DsFieldTemplateSource.php
modules/contrib/ui_patterns/modules/ui_patterns_ds/tests/modules/ui_patterns_ds_test/ui_patterns_ds_test.install
modules/contrib/ui_patterns/modules/ui_patterns_ds/tests/src/FunctionalJavascript/UiPatternsFieldRenderTest.php
modules/contrib/ui_patterns/modules/ui_patterns_ds/tests/src/FunctionalJavascript/UiPatternsFieldSettingsTest.php
modules/contrib/ui_patterns/modules/ui_patterns_ds/ui_patterns_ds.module
modules/contrib/ui_patterns/modules/ui_patterns_field_group/src/Plugin/field_group/FieldGroupFormatter/PatternFormatter.php
modules/contrib/ui_patterns/modules/ui_patterns_field_group/src/Utility/EntityFinder.php
modules/contrib/ui_patterns/modules/ui_patterns_field_group/tests/src/FunctionalJavascript/UiPatternsFieldGroupRenderTest.php
modules/contrib/ui_patterns/modules/ui_patterns_field_group/tests/src/FunctionalJavascript/UiPatternsFieldGroupSettingsTest.php
modules/contrib/ui_patterns/modules/ui_patterns_field_group/tests/src/Unit/EntityFinderTest.php
modules/contrib/ui_patterns/modules/ui_patterns_field_group/ui_patterns_field_group.module
modules/contrib/ui_patterns/modules/ui_patterns_layouts/src/Plugin/Layout/PatternLayout.php
modules/contrib/ui_patterns/modules/ui_patterns_layouts/tests/src/FunctionalJavascript/UiPatternsLayoutsRenderTest.php
modules/contrib/ui_patterns/modules/ui_patterns_layouts/tests/src/FunctionalJavascript/UiPatternsLayoutsSettingsTest.php
modules/contrib/ui_patterns/modules/ui_patterns_layouts/ui_patterns_layouts.api.php
modules/contrib/ui_patterns/modules/ui_patterns_layouts/ui_patterns_layouts.install
modules/contrib/ui_patterns/modules/ui_patterns_layouts/ui_patterns_layouts.module
modules/contrib/ui_patterns/modules/ui_patterns_library/src/Controller/PatternsLibraryController.php
modules/contrib/ui_patterns/modules/ui_patterns_library/src/Plugin/Deriver/LibraryDeriver.php
modules/contrib/ui_patterns/modules/ui_patterns_library/src/Plugin/UiPatterns/Pattern/LibraryPattern.php
modules/contrib/ui_patterns/modules/ui_patterns_library/tests/src/FunctionalJavascript/UiPatternsLibraryBadDefinitionTest.php
modules/contrib/ui_patterns/modules/ui_patterns_library/tests/src/FunctionalJavascript/UiPatternsLibraryOverviewTest.php
modules/contrib/ui_patterns/modules/ui_patterns_library/ui_patterns_library.module
modules/contrib/ui_patterns/modules/ui_patterns_views/src/Plugin/UiPatterns/Source/ViewsRowSource.php
modules/contrib/ui_patterns/modules/ui_patterns_views/src/Plugin/views/row/Pattern.php
modules/contrib/ui_patterns/modules/ui_patterns_views/tests/src/FunctionalJavascript/UiPatternsViewsRenderTest.php
modules/contrib/ui_patterns/modules/ui_patterns_views/tests/src/FunctionalJavascript/UiPatternsViewsSettingsTest.php
modules/contrib/ui_patterns/modules/ui_patterns_views/ui_patterns_views.module
modules/contrib/ui_patterns/src/Annotation/UiPattern.php
modules/contrib/ui_patterns/src/Annotation/UiPatternsSource.php
modules/contrib/ui_patterns/src/Definition/ArrayAccessDefinitionTrait.php
modules/contrib/ui_patterns/src/Definition/PatternDefinition.php
modules/contrib/ui_patterns/src/Definition/PatternDefinitionField.php
modules/contrib/ui_patterns/src/Definition/PatternDefinitionVariant.php
modules/contrib/ui_patterns/src/Definition/PatternSourceField.php
modules/contrib/ui_patterns/src/Element/Pattern.php
modules/contrib/ui_patterns/src/Element/PatternContext.php
modules/contrib/ui_patterns/src/Element/PatternPreview.php
modules/contrib/ui_patterns/src/Exception/PatternDefinitionException.php
modules/contrib/ui_patterns/src/Exception/PatternRenderException.php
modules/contrib/ui_patterns/src/Form/PatternDisplayFormTrait.php
modules/contrib/ui_patterns/src/Plugin/Deriver/AbstractPatternsDeriver.php
modules/contrib/ui_patterns/src/Plugin/Deriver/AbstractYamlPatternsDeriver.php
modules/contrib/ui_patterns/src/Plugin/Deriver/PatternsDeriverInterface.php
modules/contrib/ui_patterns/src/Plugin/Deriver/YamlPatternsDeriverInterface.php
modules/contrib/ui_patterns/src/Plugin/PatternBase.php
modules/contrib/ui_patterns/src/Plugin/PatternInterface.php
modules/contrib/ui_patterns/src/Plugin/PatternSourceBase.php
modules/contrib/ui_patterns/src/Plugin/PatternSourceInterface.php
modules/contrib/ui_patterns/src/Plugin/UiPatterns/Source/FieldSource.php
modules/contrib/ui_patterns/src/Template/TwigExtension.php
modules/contrib/ui_patterns/src/TypedData/PatternDataDefinition.php
modules/contrib/ui_patterns/src/UiPatterns.php
modules/contrib/ui_patterns/src/UiPatternsManager.php
modules/contrib/ui_patterns/src/UiPatternsSourceManager.php
modules/contrib/ui_patterns/tests/modules/ui_patterns_field_source_test/src/Plugin/UiPatterns/Source/TestSource.php
modules/contrib/ui_patterns/tests/src/Functional/UiPatternsPreviewRenderTest.php
modules/contrib/ui_patterns/tests/src/Kernel/AbstractUiPatternsTest.php
modules/contrib/ui_patterns/tests/src/Kernel/Plugin/Deriver/YamlDeriverTest.php
modules/contrib/ui_patterns/tests/src/Kernel/Plugin/PatternBaseTest.php
modules/contrib/ui_patterns/tests/src/Kernel/TypedData/PatternDataDefinitionTest.php
modules/contrib/ui_patterns/tests/src/Kernel/UiPatternsManagerTest.php
modules/contrib/ui_patterns/tests/src/Kernel/UiPatternsPreviewTest.php
modules/contrib/ui_patterns/tests/src/Kernel/UiPatternsSourceManagerTest.php
modules/contrib/ui_patterns/tests/src/Traits/RenderTrait.php
modules/contrib/ui_patterns/tests/src/Traits/TwigDebugTrait.php
modules/contrib/ui_patterns/tests/src/Unit/AbstractUiPatternsTest.php
modules/contrib/ui_patterns/tests/src/Unit/Definition/PatternDefinitionTest.php
modules/contrib/ui_patterns/tests/src/Unit/Element/PatternPreviewTest.php
modules/contrib/ui_patterns/ui_patterns.api.php
modules/contrib/ui_patterns/ui_patterns.install
modules/contrib/ui_patterns/ui_patterns.module

37 files with changes
=====================

1) modules/contrib/ui_patterns/ui_patterns.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ui_patterns\Plugin\PatternBase;
 /**
  * @file
  * Contains ui_patterns.module.
@@ @@
  * Implements hook_theme().
  */
 function ui_patterns_theme() {
-  /** @var \Drupal\ui_patterns\Plugin\PatternBase $pattern */
+  /** @var PatternBase $pattern */
   $items = [
     'patterns_destination' => [
       'variables' => ['sources' => NULL, 'context' => NULL],
@@ @@
  * Implements hook_library_info_build().
  */
 function ui_patterns_library_info_build() {
-  /** @var \Drupal\ui_patterns\Plugin\PatternBase $pattern */
-
+  /** @var PatternBase $pattern */
   $definitions = [];
   foreach (UiPatterns::getManager()->getPatterns() as $pattern) {
     $definitions += $pattern->getLibraryDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/ui_patterns/ui_patterns.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * @file
  * API file.
@@ @@
 /**
  * Alter UI Patterns definitions.
  *
- * @param \Drupal\ui_patterns\Definition\PatternDefinition[] $definitions
+ * @param PatternDefinition[] $definitions
  *   Pattern definitions.
  *
  * @see \Drupal\ui_patterns\UiPatternsManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/ui_patterns/tests/src/Kernel/UiPatternsSourceManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ui_patterns\Kernel;

+use Drupal\ui_patterns\UiPatternsSourceManager;
+use Drupal\ui_patterns\Plugin\PatternSourceBase;
 /**
  * @coversDefaultClass \Drupal\ui_patterns\UiPatternsSourceManager
  *
@@ @@
    * @covers ::processDefinition
    */
   public function testProcessDefinition() {
-    /** @var \Drupal\ui_patterns\UiPatternsSourceManager $service */
+    /** @var UiPatternsSourceManager $service */
     $plugin_manager = \Drupal::service('plugin.manager.ui_patterns_source');

     $definitions = $plugin_manager->getDefinitions();
@@ @@
       ['name' => 'field_5', 'label' => 'Field 5'],
     ];

-    /** @var \Drupal\ui_patterns\Plugin\PatternSourceBase $plugin */
+    /** @var PatternSourceBase $plugin */
     $plugin = $plugin_manager->createInstance('test_source');
     foreach ($plugin->getSourceFields() as $key => $field) {
       $this->assertEquals($expected[$key]['name'], $field->getFieldName());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ui_patterns/tests/src/Kernel/Plugin/PatternBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ui_patterns\Kernel\Plugin;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\ui_patterns\Kernel\AbstractUiPatternsTest;
 use Drupal\ui_patterns\Plugin\PatternBase;

@@ @@
    */
   public function testHookLibraryInfoBuild($actual, $expected) {
     $pattern = $this->getUiPatternBaseMock($actual);
-    /** @var \Drupal\ui_patterns\Plugin\PatternBase $pattern */
+    /** @var PatternBase $pattern */
     $libraries = $pattern->getLibraryDefinitions();
     $this->assertEquals($expected, $libraries);
   }
@@ @@
    * @param array $methods
    *   List of methods to mock.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject
+   * @return MockObject
    *   Mock object.
    */
   protected function getUiPatternBaseMock(array $plugin_definition = [], array $methods = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ui_patterns/src/UiPatternsSourceManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns;

+use Drupal\ui_patterns\Definition\PatternSourceField;
+use Drupal\ui_patterns\Plugin\PatternSourceInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
    * @param array $context
    *   Plugin context.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternSourceField[]
+   * @return PatternSourceField[]
    *   List of source fields.
    */
   public function getFieldsByTag($tag, array $context) {
-    /** @var \Drupal\ui_patterns\Plugin\PatternSourceInterface $plugin */
+    /** @var PatternSourceInterface $plugin */
     $fields = [];
     foreach ($this->getDefinitionsByTag($tag) as $id => $definition) {
       $plugin = $this->createInstance($id, ['context' => $context]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ui_patterns/src/UiPatternsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns;

+use Drupal\ui_patterns\Definition\PatternDefinition;
+use Drupal\ui_patterns\Plugin\PatternBase;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
 /**
  * Provides the default ui_patterns manager.
  *
- * @method \Drupal\ui_patterns\Definition\PatternDefinition getDefinition($plugin_id, $exception_on_invalid = TRUE)
+ * @method PatternDefinition getDefinition($plugin_id, $exception_on_invalid = true)
  */
 class UiPatternsManager extends DefaultPluginManager implements PluginManagerInterface {

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Get pattern objects.
    *
-   * @return \Drupal\ui_patterns\Plugin\PatternBase[]
+   * @return PatternBase[]
    *   Pattern objects.
    */
   public function getPatterns() {
@@ @@
   /**
    * Return pattern definitions.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition[]
+   * @return PatternDefinition[]
    *   Pattern definitions.
    */
   public function getDefinitions() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ui_patterns/src/UiPatterns.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns;

+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * UI Patterns factory class.
  *
@@ @@
   /**
    * Get pattern manager instance.
    *
-   * @return \Drupal\ui_patterns\UiPatternsManager
+   * @return UiPatternsManager
    *   UI Patterns manager instance.
    */
   public static function getManager() {
@@ @@
   /**
    * Get pattern field sources manager instance.
    *
-   * @return \Drupal\ui_patterns\UiPatternsSourceManager
+   * @return UiPatternsSourceManager
    *   UI Patterns field sources manager instance.
    */
   public static function getSourceManager() {
@@ @@
    * @param string $id
    *   Pattern ID.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition
+   * @return PatternDefinition
    *   Pattern object instance.
    */
   public static function getPatternDefinition($id) {
@@ @@
   /**
    * Get pattern definitions.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition[]
+   * @return PatternDefinition[]
    *   Pattern object instance.
    */
   public static function getPatternDefinitions() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/ui_patterns/src/TypedData/PatternDataDefinition.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Get valid machine name definition.
    *
-   * @return \Drupal\Core\TypedData\DataDefinition
+   * @return DataDefinition
    *   Data definition instance.
    */
   protected function getMachineNameDefinition() {
@@ @@
   /**
    * Get definition for 'field' property.
    *
-   * @return \Drupal\Core\TypedData\ListDataDefinition
+   * @return ListDataDefinition
    *   Data definition instance.
    */
   protected function getFieldsDefinition() {
@@ @@
   /**
    * Get definition for 'variant' property.
    *
-   * @return \Drupal\Core\TypedData\ListDataDefinition
+   * @return ListDataDefinition
    *   Data definition instance.
    */
   protected function getVariantsDefinition() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ui_patterns/src/Plugin/UiPatterns/Source/FieldSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Plugin\UiPatterns\Source;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;
@@ @@
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
     $sources = [];
     $fields = $this->entityFieldManager->getFieldDefinitions($this->getContextProperty('entity_type'), $this->getContextProperty('entity_bundle'));

-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+    /** @var FieldDefinitionInterface $field */
     foreach ($fields as $field) {
       if (!$this->getContextProperty('limit')) {
         $sources[] = $this->getSourceField($field->getName(), $field->getLabel());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ui_patterns/src/Plugin/PatternSourceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Plugin;

+use Drupal\ui_patterns\Definition\PatternSourceField;
 /**
  * Defines an interface for UI Patterns Source plugins.
  */
@@ @@
    * @param string $label
    *   Human readable label.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternSourceField
+   * @return PatternSourceField
    *   Source field instance.
    */
   public function getSourceField($name, $label);
@@ @@
   /**
    * Return list of source fields.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternSourceField[]
+   * @return PatternSourceField[]
    *   List of source fields.
    */
   public function getSourceFields();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/ui_patterns/src/Plugin/PatternBase.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Process 'use' definition property.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
@@ @@
   /**
    * Process theme variables.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/ui_patterns/src/Plugin/Deriver/PatternsDeriverInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Plugin\Deriver;

+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * Interface PatternsDeriverInterface.
  *
@@ @@
   /**
    * Get pattern definition objects.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition[]
+   * @return PatternDefinition[]
    *   List of pattern definitions contained in the file.
    */
   public function getPatterns();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/ui_patterns/src/Plugin/Deriver/AbstractYamlPatternsDeriver.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\TypedData\TypedDataManager $typed_data_manager
+   * @param TypedDataManager $typed_data_manager
    *   Typed data manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
    */
   public function __construct($base_plugin_id, TypedDataManager $typed_data_manager, MessengerInterface $messenger, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/ui_patterns/src/Plugin/Deriver/AbstractPatternsDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Plugin\Deriver;

+use Symfony\Component\Validator\ConstraintViolation;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * Typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManager
+   * @var TypedDataManager
    */
   protected $typedDataManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    * @param array $definition
    *   Pattern definition array.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinition
+   * @return PatternDefinition
    *   Pattern definition object.
    */
   protected function getPatternDefinition(array $definition = []) {
@@ @@
   /**
    * Validate pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition.
    *
    * @return bool
@@ @@
     $data_definition = PatternDataDefinition::create();
     $violations = $this->typedDataManager->create($data_definition, $definition->toArray())->validate();
     if ($violations->count()) {
-      /** @var \Symfony\Component\Validator\ConstraintViolation $violation */
+      /** @var ConstraintViolation $violation */
       $this->messenger->addError($this->t("Pattern ':id' is skipped because of the following validation error(s):", [':id' => $definition->id()]));
       foreach ($violations as $violation) {
         $message = $this->t('Validation error on ":id.:property": :message', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/ui_patterns/src/Form/PatternDisplayFormTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Form;

+use Drupal\ui_patterns\UiPatternsManager;
+use Drupal\ui_patterns\UiPatternsSourceManager;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\Component\Utility\SortArray;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;

@@ @@
 /**
  * Trait PatternDisplayFormTrait.
  *
- * @property \Drupal\ui_patterns\UiPatternsManager $patternsManager
- * @property \Drupal\ui_patterns\UiPatternsSourceManager $sourceManager
- * @property \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
- * @method \Drupal\Core\StringTranslation\TranslatableMarkup t($string, array $args = [], array $options = [])
+ * @property UiPatternsManager $patternsManager
+ * @property UiPatternsSourceManager $sourceManager
+ * @property ModuleHandlerInterface $moduleHandler
+ * @method TranslatableMarkup t($string, array $args = [], array $options = [])
  *
  * @package Drupal\ui_patterns\Form
  */
@@ @@
     ];
     $form['variants'] = ['#type' => 'container'];

-    /** @var \Drupal\ui_patterns\Definition\PatternDefinition $definition */
+    /** @var PatternDefinition $definition */
     foreach ($this->patternsManager->getDefinitions() as $pattern_id => $definition) {
       if ($definition->hasVariants()) {
         $form['variants'][$pattern_id] = [
@@ @@
    *   Mapping form.
    */
   public function getMappingForm($pattern_id, $tag, array $context, array $configuration) {
-    /** @var \Drupal\ui_patterns\Definition\PatternDefinition $pattern */
+    /** @var PatternDefinition $pattern */
     $pattern = $this->patternsManager->getDefinition($pattern_id);

     $elements = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/ui_patterns/src/Element/PatternPreview.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Element;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\ui_patterns\UiPatterns;

@@ @@
    * @param string|string[] $preview
    *   The preview, may be a string or an array.
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface|string
+   * @return array|MarkupInterface|string
    *   Preview safe markup.
    */
   public static function getPreviewMarkup($preview) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/ui_patterns/src/Element/Pattern.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Element;

+use Drupal\ui_patterns\Exception\PatternRenderException;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\Core\Template\Attribute;
 use Drupal\ui_patterns\UiPatterns;
@@ @@
         // This guarantees backward compatibility: single sources be simple.
         $element['#fields'][$name] = reset($field);
         if (count($field) > 1) {
-          /** @var \Drupal\ui_patterns\Element\PatternContext $context */
+          /** @var PatternContext $context */
           $context = $element['#context'];
           $context->setProperty('pattern', $element['#id']);
           $context->setProperty('field', $name);
@@ @@
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\ui_patterns\Exception\PatternRenderException
+   * @throws PatternRenderException
    *    Throws an exception if no context type is specified.
    */
   public static function processContext(array $element) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/ui_patterns/src/Definition/PatternDefinition.php:239

    ---------- begin diff ----------
@@ @@
   /**
    * Getter.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinitionVariant[]
+   * @return PatternDefinitionVariant[]
    *   Property value.
    */
   public function getVariants() {
@@ @@
    * @param string $value
    *   Field value.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinitionField
+   * @return PatternDefinitionField
    *   Definition instance.
    */
   public function getFieldDefinition($name, $value) {
@@ @@
    * @param string $value
    *   Variant value.
    *
-   * @return \Drupal\ui_patterns\Definition\PatternDefinitionVariant
+   * @return PatternDefinitionVariant
    *   Definition instance.
    */
   public function getVariantDefinition($name, $value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/ui_patterns/src/Annotation/UiPatternsSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/ui_patterns/src/Annotation/UiPattern.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


21) modules/contrib/ui_patterns/modules/ui_patterns_views/ui_patterns_views.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ui_patterns_views\Plugin\views\row\Pattern;
 /**
  * @file
  * Contains module file.
@@ @@
 function template_preprocess_pattern_views_row(array &$variables) {
   /** @var \Drupal\views\ResultRow $row */
   /** @var \Drupal\views\ViewExecutable $view */
-  /** @var \Drupal\ui_patterns_views\Plugin\views\row\Pattern $row_plugin */
-
+  /** @var Pattern $row_plugin */
   $fields = [];
   $view = $variables['view'];
   $row_plugin = $view->rowPlugin;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/ui_patterns/modules/ui_patterns_views/src/Plugin/views/row/Pattern.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_views\Plugin\views\row;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ui_patterns\Form\PatternDisplayFormTrait;
@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler = NULL;

@@ @@
   /**
    * UI Patterns manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternsManager;

@@ @@
   /**
    * UI Patterns manager.
    *
-   * @var \Drupal\ui_patterns\UiPatternsSourceManager
+   * @var UiPatternsSourceManager
    */
   protected $sourceManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\ui_patterns\UiPatternsManager $patterns_manager
+   * @param UiPatternsManager $patterns_manager
    *   UI Patterns manager.
-   * @param \Drupal\ui_patterns\UiPatternsSourceManager $source_manager
+   * @param UiPatternsSourceManager $source_manager
    *   UI Patterns source manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UiPatternsManager $patterns_manager, UiPatternsSourceManager $source_manager, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Helper function: check for all conditions that make a field visible.
    *
-   * @param \Drupal\views\Plugin\views\field\FieldPluginBase $field
+   * @param FieldPluginBase $field
    *   Field object.
-   * @param \Drupal\Component\Render\MarkupInterface|null $field_output
+   * @param MarkupInterface|null $field_output
    *   Field output.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/ui_patterns/modules/ui_patterns_views/src/Plugin/UiPatterns/Source/ViewsRowSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_views\Plugin\UiPatterns\Source;

+use Drupal\views\ViewExecutable;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;

 /**
@@ @@
    */
   public function getSourceFields() {
     $sources = [];
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $this->getContextProperty('view');
     foreach ($view->display_handler->getFieldLabels() as $name => $label) {
       $sources[] = $this->getSourceField($name, $label);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/ui_patterns/modules/ui_patterns_library/tests/src/FunctionalJavascript/UiPatternsLibraryOverviewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ui_patterns_library\FunctionalJavascript;

+use Behat\Mink\Exception\ElementHtmlException;
 use Drupal\Core\Serialization\Yaml;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

@@ @@
    * @param array $pattern
    *   Expected pattern.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   protected function assertPatternFields($root, array $pattern) {
     $session = $this->assertSession();
@@ @@
    * @param string $name
    *   Pattern machine name.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   protected function assertListLink($index, $label, $name) {
     $this->assertSession()->elementContains('css', "ul > li:nth-child($index) > a", $label);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/ui_patterns/modules/ui_patterns_library/src/Plugin/UiPatterns/Pattern/LibraryPattern.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_library\Plugin\UiPatterns\Pattern;

+use Drupal\Core\Extension\Extension;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\ui_patterns\Definition\PatternDefinition;
@@ @@
   /**
    * Theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Process 'custom hook theme' definition property.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
@@ @@
    *   Processed hook definition portion.
    */
   protected function processCustomThemeHookProperty(PatternDefinition $definition) {
-    /** @var \Drupal\Core\Extension\Extension $module */
+    /** @var Extension $module */
     $return = [];
     if (!$definition->hasCustomThemeHook() && $this->moduleHandler->moduleExists($definition->getProvider())) {
       $module = $this->moduleHandler->getModule($definition->getProvider());
@@ @@
   /**
    * Process 'template' definition property.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition array.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/ui_patterns/modules/ui_patterns_library/src/Plugin/Deriver/LibraryDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_library\Plugin\Deriver;

+use Drupal\Core\Extension\Extension;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Extension\ExtensionDiscovery;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Extension discovery class.
    *
-   * @var \Drupal\Core\Extension\ExtensionDiscovery
+   * @var ExtensionDiscovery
    */
   protected $extensionDiscovery;

@@ @@
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\TypedData\TypedDataManager $typed_data_manager
+   * @param TypedDataManager $typed_data_manager
    *   Typed data manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
    * @param string $root
    *   Application root directory.
    * @param array $extensions
    *   File extensions.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   Theme handler service.
    */
   public function __construct($base_plugin_id, TypedDataManager $typed_data_manager, MessengerInterface $messenger, FileSystemInterface $file_system, $root, array $extensions, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
@@ @@
    *   Array of extensions keyed by their path location.
    */
   protected function getExtensionLocations() {
-    /** @var \Drupal\Core\Extension\Extension[] $extensions */
+    /** @var Extension[] $extensions */
     if (empty($this->extensionLocations)) {
       $extensions = $this->extensionDiscovery->scan('theme') + $this->extensionDiscovery->scan('module');
       foreach ($extensions as $name => $extension) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/ui_patterns/modules/ui_patterns_library/src/Controller/PatternsLibraryController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Patterns manager service.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternsManager;

@@ @@
   /**
    * Get pattern preview render array, handling variants.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   Pattern definition object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/ui_patterns/modules/ui_patterns_layouts/ui_patterns_layouts.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\ui_patterns\Definition\PatternDefinition;
 /**
  * @file
  * Contains module file.
@@ @@
  * Implements hook_layout_alter().
  */
 function ui_patterns_layouts_layout_alter(&$definitions) {
-  /** @var \Drupal\ui_patterns\Definition\PatternDefinition[] $pattern_definitions */
-
+  /** @var PatternDefinition[] $pattern_definitions */
   // @todo: Use layout deriver instead.
   // @link https://github.com/nuvoleweb/ui_patterns/issues/94
   foreach (UiPatterns::getPatternDefinitions() as $pattern_definition) {
@@ @@
 function ui_patterns_layouts_preprocess_ds_entity_view(&$variables) {
   if (isset($variables['content']['#type']) && $variables['content']['#type'] == 'pattern') {

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $variables['content']['#entity'];

     // Allow default context values to not override those exposed elsewhere.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


29) modules/contrib/ui_patterns/modules/ui_patterns_layouts/ui_patterns_layouts.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstaller;
 /**
  * @file
  * Contains install file.
  */
-
 /**
  * Uninstall layout_plugin and install layout_discovery.
  */
 function ui_patterns_layouts_update_8101() {
-  /** @var \Drupal\Core\Extension\ModuleInstaller $installer */
+  /** @var ModuleInstaller $installer */
   $installer = \Drupal::service('module_installer');

   if (\Drupal::moduleHandler()->moduleExists('layout_plugin')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


30) modules/contrib/ui_patterns/modules/ui_patterns_layouts/ui_patterns_layouts.api.php:11

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   Pattern settings fieldset.
- * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+ * @param PatternDefinition $definition
  *   Pattern definition.
  * @param array $configuration
  *   Pattern configuration.
    ----------- end diff -----------

31) modules/contrib/ui_patterns/modules/ui_patterns_layouts/src/Plugin/Layout/PatternLayout.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler = NULL;

@@ @@
   /**
    * Pattern manager service.
    *
-   * @var \Drupal\ui_patterns\UiPatternsManager
+   * @var UiPatternsManager
    */
   protected $patternManager = NULL;

@@ @@
   /**
    * The element info.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
    *   A configuration array containing information about the plugin instance.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
-   * @param \Drupal\Core\Layout\LayoutDefinition $plugin_definition
+   * @param LayoutDefinition $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   Element info object.
-   * @param \Drupal\ui_patterns\UiPatternsManager $pattern_manager
+   * @param UiPatternsManager $pattern_manager
    *   Pattern manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(array $configuration, $plugin_id, LayoutDefinition $plugin_definition, ElementInfoManagerInterface $element_info, UiPatternsManager $pattern_manager, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/ui_patterns/modules/ui_patterns_field_group/ui_patterns_field_group.module:19

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function ui_patterns_field_group_field_group_field_overview_submit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


33) modules/contrib/ui_patterns/modules/ui_patterns_field_group/tests/src/Unit/EntityFinderTest.php:30

    ---------- begin diff ----------
@@ @@
    *   Test data.
    */
   public function fieldsDataProvider() {
-    $good = $this->getMockBuilder(ContentEntityBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $good = $this->createMock(ContentEntityBase::class);
     $bad = new \stdClass();

     return [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/ui_patterns/modules/ui_patterns_field_group/src/Utility/EntityFinder.php:14

    ---------- begin diff ----------
@@ @@
    * @param array $fields
    *   Fields array.
    *
-   * @return \Drupal\Core\Entity\ContentEntityBase|null
+   * @return ContentEntityBase|null
    *   Entity object or NULL if none found.
    */
   public function findEntityFromFields(array $fields) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/ui_patterns/modules/ui_patterns_ds/ui_patterns_ds.module:31

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function ui_patterns_ds_field_overview_submit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


36) modules/contrib/ui_patterns/modules/ui_patterns_ds/src/Plugin/UiPatterns/Source/DsFieldTemplateSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_ds\Plugin\UiPatterns\Source;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\ui_patterns\Plugin\PatternSourceBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;

@@ @@
     $entity_type = $this->getContextProperty('entity_type');
     $bundle = $this->getContextProperty('bundle');

-    /** @var \Drupal\field\Entity\FieldConfig $field */
+    /** @var FieldConfig $field */
     $field = $this->fieldManager->getFieldDefinitions($entity_type, $bundle)[$field_name];
     $label = $field->getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/ui_patterns/modules/ui_patterns_ds/src/FieldTemplateProcessor.php:67

    ---------- begin diff ----------
@@ @@
   /**
    * Get field parent entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityBase
+   * @return ContentEntityBase
    *   Parent entity.
    */
   protected function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/ui_patterns/modules/ui_patterns_field_group/src/Plugin/f
         ield_group/FieldGroupFormatter/PatternFormatter.php" file, due to:     
         "Analyze error: "Class Drupal\field_group\FieldGroupFormatterBase not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ui_patterns/modules/ui_patterns_ds/src/Plugin/DsFieldTem
         plate/Pattern.php" file, due to:                                       
         "Analyze error: "Class                                                 
         Drupal\ds\Plugin\DsFieldTemplate\DsFieldTemplateBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

