modules/contrib/monolog/monolog.install
modules/contrib/monolog/monolog.module
modules/contrib/monolog/src/Logger/Handler/DrupalHandler.php
modules/contrib/monolog/src/Logger/Handler/DrupalMailHandler.php
modules/contrib/monolog/src/Logger/Logger.php
modules/contrib/monolog/src/Logger/MonologLogLevel.php
modules/contrib/monolog/src/Logger/MonologLoggerChannelFactory.php
modules/contrib/monolog/src/Logger/OptionalLogger.php
modules/contrib/monolog/src/Logger/Processor/AbstractRequestProcessor.php
modules/contrib/monolog/src/Logger/Processor/ContextKeyFilterProcessor.php
modules/contrib/monolog/src/Logger/Processor/CurrentUserProcessor.php
modules/contrib/monolog/src/Logger/Processor/DrupalMessagePlaceholderProcessor.php
modules/contrib/monolog/src/Logger/Processor/IntrospectionProcessor.php
modules/contrib/monolog/src/Logger/Processor/IpProcessor.php
modules/contrib/monolog/src/Logger/Processor/MessagePlaceholderProcessor.php
modules/contrib/monolog/src/Logger/Processor/RefererProcessor.php
modules/contrib/monolog/src/Logger/Processor/RequestUriProcessor.php
modules/contrib/monolog/src/Logger/Processor/ServerHostProcessor.php
modules/contrib/monolog/src/MonologServiceProvider.php
modules/contrib/monolog/tests/src/Unit/Logger/ChannelFactoryTest.php
modules/contrib/monolog/tests/src/Unit/Logger/LoggerTest.php

7 files with changes
====================

1) modules/contrib/monolog/tests/src/Unit/Logger/ChannelFactoryTest.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * Get a mocked service container.
    *
-   * @return \Drupal\Core\DependencyInjection\Container
+   * @return Container
    *   A mocked service container.
    */
   protected function getMockContainer(
@@ @@
     $rotating_file_push_processor,
     $drupal_push_processor
   ): Container {
-    $container = $this->getMockBuilder('Drupal\Core\DependencyInjection\Container')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $container = $this->createMock('Drupal\Core\DependencyInjection\Container');

     $container->expects($this->any())
       ->method('hasParameter')
@@ @@
       ->method('has')
       ->willReturn(TRUE);

-    $rotatingFileHandler = $this->getMockBuilder(RotatingFileHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rotatingFileHandler = $this->createMock(RotatingFileHandler::class);

     $rotatingFileHandler->expects($this->exactly($rotating_file_set_formatter))
       ->method('setFormatter');
@@ @@
     $rotatingFileHandler->expects($this->exactly($rotating_file_push_processor))
       ->method('pushProcessor');

-    $drupalHandler = $this->getMockBuilder(DrupalHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $drupalHandler = $this->createMock(DrupalHandler::class);

     $drupalHandler->expects($this->exactly($drupal_set_formatter))
       ->method('setFormatter');
@@ @@
     $drupalHandler->expects($this->exactly($drupal_push_processor))
       ->method('pushProcessor');

-    $lineFormatter = $this->getMockBuilder(LineFormatter::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lineFormatter = $this->createMock(LineFormatter::class);

-    $jsonFormatter = $this->getMockBuilder(JsonFormatter::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $jsonFormatter = $this->createMock(JsonFormatter::class);

     $container->expects($this->exactly($container_get))
       ->method('get')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/monolog/src/Logger/Processor/MessagePlaceholderProcessor.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $parser;

@@ @@
   /**
    * Construct default object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The parser to use when extracting message variables.
    */
   public function __construct(LogMessageParserInterface $parser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/monolog/src/Logger/Processor/CurrentUserProcessor.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $accountProxy;

@@ @@
   /**
    * Constructs a Default object.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   The current user.
    */
   public function __construct(AccountProxyInterface $account_proxy) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/monolog/src/Logger/Processor/AbstractRequestProcessor.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private RequestStack $requestStack;

@@ @@
   /**
    * RequestProcessor constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The Request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ @@
   /**
    * Return the current request.
    *
-   * @return null|\Symfony\Component\HttpFoundation\Request
+   * @return null|Request
    *   The current request.
    */
   public function getRequest(): ?Request {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/monolog/src/Logger/OptionalLogger.php:72

    ---------- begin diff ----------
@@ @@
   /**
    * Return the wrapped value or a NullLogger if value is NULL.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The wrapped value or a NullLogger if value is NULL.
    */
   public function get(): LoggerInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/monolog/src/Logger/MonologLoggerChannelFactory.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\monolog\Logger;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Psr\Log\NullLogger;
 use Psr\Log\LoggerInterface;
 use Monolog\Formatter\FormatterInterface;
@@ @@
   /**
    * Array of all instantiated logger channels keyed by channel name.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface[]
+   * @var LoggerChannelInterface[]
    */
   protected array $channels = [];

@@ @@
    * @param string $channel_name
    *   The name the logging channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   Describes a logger instance.
    *
    * @throws \RuntimeException
@@ @@
   /**
    * Get the service container or null.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   The service container or null.
    */
   private function getContainer(): OptionalLogger {
@@ @@
   /**
    * Get the `monolog.channel_handlers` parameter or null.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   The `monolog.channel_handlers` parameter or null.
    */
   private function getParameters(ContainerInterface $container): OptionalLogger {
@@ @@
    * @param string $channel_name
    *   The channel's name.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   The configured handlers for the channel or null.
    */
   private function getHandlers(
@@ @@
    * @param string $channel_name
    *   The channel's name.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   A Logger instance or null.
    */
   private function getLogger(array $handlers, string $channel_name): OptionalLogger {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/monolog/src/Logger/Handler/DrupalHandler.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The wrapped Drupal logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;

@@ @@
   /**
    * Constructs a Default object.
    *
-   * @param \Psr\Log\LoggerInterface $wrapped
+   * @param LoggerInterface $wrapped
    *   The wrapped Drupal logger.
    * @param int|string $level
    *   The minimum logging level at which this handler will be triggered.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

