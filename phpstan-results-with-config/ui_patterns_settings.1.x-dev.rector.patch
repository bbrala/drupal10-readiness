diff --git a/src/Annotation/UiPatternsSettingType.php b/src/Annotation/UiPatternsSettingType.php
index 935630a..9253af6 100644
--- a/src/Annotation/UiPatternsSettingType.php
+++ b/src/Annotation/UiPatternsSettingType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class UiPatternsSettingType extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Form/SettingsFormBuilder.php b/src/Form/SettingsFormBuilder.php
index 1b2d22e..0c04228 100644
--- a/src/Form/SettingsFormBuilder.php
+++ b/src/Form/SettingsFormBuilder.php
@@ -16,7 +16,7 @@ class SettingsFormBuilder {
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param array $configuration
    *   The pattern configuration.
@@ -90,7 +90,7 @@ class SettingsFormBuilder {
    *   The id of the variant select field.
    * @param array $fieldset
    *   The fieldset.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    */
   private static function buildVariantsForm($select_selector, array &$fieldset, PatternDefinition $definition) {
diff --git a/src/Plugin/PatternSettingTypeBase.php b/src/Plugin/PatternSettingTypeBase.php
index 7d7eef7..7dc3982 100644
--- a/src/Plugin/PatternSettingTypeBase.php
+++ b/src/Plugin/PatternSettingTypeBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings\Plugin;
 
+use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting;
@@ -15,7 +16,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements Configurable
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @var PatternDefinitionSetting
    */
   private $patternSettingDefinition;
 
@@ -50,7 +51,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements Configurable
   /**
    * Return pattern setting definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @return PatternDefinitionSetting
    *   Pattern setting definition.
    */
   protected function getPatternSettingDefinition() {
@@ -63,7 +64,7 @@ abstract class PatternSettingTypeBase extends PluginBase implements Configurable
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     $plugin = new static($configuration, $plugin_id, $plugin_definition);
 
-    /** @var \Drupal\Core\StringTranslation\TranslationInterface $translation */
+    /** @var TranslationInterface $translation */
     $translation = $container->get('string_translation');
 
     $plugin->setStringTranslation($translation);
diff --git a/src/Plugin/PatternSettingTypeInterface.php b/src/Plugin/PatternSettingTypeInterface.php
index 18d37b8..46bb42c 100644
--- a/src/Plugin/PatternSettingTypeInterface.php
+++ b/src/Plugin/PatternSettingTypeInterface.php
@@ -17,7 +17,7 @@ interface PatternSettingTypeInterface extends ConfigurableInterface {
    *   The form definition array for the settings configuration form.
    * @param string $value
    *   The stored default value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return array
@@ -34,7 +34,7 @@ interface PatternSettingTypeInterface extends ConfigurableInterface {
    *   Context informations.
    *   Keys:
    *    - entity.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return string
diff --git a/src/Plugin/TokenSettingTypeBase.php b/src/Plugin/TokenSettingTypeBase.php
index 43c50df..79024cf 100644
--- a/src/Plugin/TokenSettingTypeBase.php
+++ b/src/Plugin/TokenSettingTypeBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings\Plugin;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Utility\Token;
@@ -14,7 +15,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;
 
@@ -78,7 +79,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
 
     if (is_string($value)) {
       $token_data = [];
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = isset($context['entity']) ? $context['entity'] : NULL;
       if ($entity !== NULL) {
         $token_data[$entity->getEntityTypeId()] = $entity;
@@ -92,7 +93,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
   /**
    * Sets the token service.
    *
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
    *
    * @return self
@@ -106,7 +107,7 @@ abstract class TokenSettingTypeBase extends PatternSettingTypeBase implements Co
   /**
    * Gets the token service.
    *
-   * @return \Drupal\Core\Utility\Token
+   * @return Token
    *   The token service.
    */
   public function getTokenService() {
diff --git a/src/UiPatternsSettings.php b/src/UiPatternsSettings.php
index 6f90335..315e29f 100644
--- a/src/UiPatternsSettings.php
+++ b/src/UiPatternsSettings.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ui_patterns_settings;
 
+use Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\ui_patterns\Definition\PatternDefinition;
 use Drupal\ui_patterns\UiPatterns;
@@ -17,7 +18,7 @@ class UiPatternsSettings {
   /**
    * Get pattern manager setting instance.
    *
-   * @return \Drupal\ui_patterns_settings\UiPatternsSettingsManager
+   * @return UiPatternsSettingsManager
    *   UI Patterns setting manager instance.
    */
   public static function getManager() {
@@ -35,7 +36,7 @@ class UiPatternsSettings {
    *   The variant.
    * @param bool $preview
    *   Is preview.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity of the pattern. Useful for dynamic settings.
    *
    * @return array
@@ -79,10 +80,10 @@ class UiPatternsSettings {
   /**
    * Get setting definitions for a pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting[]
+   * @return PatternDefinitionSetting[]
    *   Setting pattern definitons.
    */
   public static function getPatternDefinitionSettings(PatternDefinition $definition) {
@@ -101,10 +102,10 @@ class UiPatternsSettings {
   /**
    * Create setting type plugin.
    *
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $settingDefintion
+   * @param PatternDefinitionSetting $settingDefintion
    *   The setting defintion.
    *
-   * @return \Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface
+   * @return PatternSettingTypeInterface
    *   UI Patterns setting manager instance.
    */
   public static function createSettingType(PatternDefinitionSetting $settingDefintion) {
diff --git a/tests/src/Functional/UiPatternsSettingsRenderTest.php b/tests/src/Functional/UiPatternsSettingsRenderTest.php
index c3dc3a9..4b00216 100644
--- a/tests/src/Functional/UiPatternsSettingsRenderTest.php
+++ b/tests/src/Functional/UiPatternsSettingsRenderTest.php
@@ -75,14 +75,16 @@ class UiPatternsSettingsRenderTest extends BrowserTestBase {
     $edit = [
       'ds_layout' => 'pattern_foo_settings',
     ];
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');
 
     // Fill settings.
     $edit = [];
     foreach ($mappings as $key => $mapping) {
       $edit['layout_configuration[pattern][settings]' . $key] = $mapping['input'];
     }
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');
 
     // Check values.
     $this->drupalGet('/node/' . $created_node->id());
diff --git a/ui_patterns_settings.module b/ui_patterns_settings.module
index 5bc3c4d..2d5c44d 100644
--- a/ui_patterns_settings.module
+++ b/ui_patterns_settings.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Contains ui_patterns_settings.module.
@@ -99,7 +100,7 @@ function ui_patterns_settings_field_group_pre_render_alter(&$element, $group, $r
  * Implements hook_layout_alter().
  */
 function ui_patterns_settings_layout_alter(&$definitions) {
-  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
+  /** @var LayoutDefinition $definition */
   foreach ($definitions as $definition) {
     if ($definition->getClass() == '\Drupal\ui_patterns_layouts\Plugin\Layout\PatternLayout') {
       $definition->setClass(PatternSettingsLayout::class);
