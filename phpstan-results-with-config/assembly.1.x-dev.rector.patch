diff --git a/assembly.install b/assembly.install
index e728613..2ba943c 100644
--- a/assembly.install
+++ b/assembly.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Utility\UpdateException;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Database\Database;
@@ -44,8 +45,8 @@ function assembly_update_8001() {
  */
 function assembly_update_8002() {
   $name = 'views.view.assembly';
-  $source = new FileStorage(drupal_get_path('module', 'assembly') . '/config/install');
-  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
+  $source = new FileStorage(\Drupal::service('extension.list.module')->getPath('assembly') . '/config/install');
+  /** @var StorageInterface $active_storage */
   $active_storage = \Drupal::service('config.storage');
   $active_storage->write($name, $source->read($name));
 
diff --git a/src/Annotation/AssemblyBuild.php b/src/Annotation/AssemblyBuild.php
index 31699b4..cb8b39e 100644
--- a/src/Annotation/AssemblyBuild.php
+++ b/src/Annotation/AssemblyBuild.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\assembly\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class AssemblyBuild extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/AssemblyAccessControlHandler.php b/src/AssemblyAccessControlHandler.php
index 77e1ae1..c306c2f 100644
--- a/src/AssemblyAccessControlHandler.php
+++ b/src/AssemblyAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\assembly;
 
+use Drupal\assembly\Entity\AssemblyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class AssemblyAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\assembly\Entity\AssemblyInterface $entity */
+    /** @var AssemblyInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/AssemblyHtmlRouteProvider.php b/src/AssemblyHtmlRouteProvider.php
index 0f84d81..27c5d9b 100644
--- a/src/AssemblyHtmlRouteProvider.php
+++ b/src/AssemblyHtmlRouteProvider.php
@@ -56,10 +56,10 @@ class AssemblyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -81,10 +81,10 @@ class AssemblyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -105,10 +105,10 @@ class AssemblyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -129,10 +129,10 @@ class AssemblyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -153,10 +153,10 @@ class AssemblyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -177,10 +177,10 @@ class AssemblyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -201,10 +201,10 @@ class AssemblyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/AssemblyStorageInterface.php b/src/AssemblyStorageInterface.php
index cf52e1a..3f1e47e 100644
--- a/src/AssemblyStorageInterface.php
+++ b/src/AssemblyStorageInterface.php
@@ -20,7 +20,7 @@ interface AssemblyStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Assembly revision IDs for a specific Assembly.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $entity
+   * @param AssemblyInterface $entity
    *   The Assembly entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface AssemblyStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Assembly author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface AssemblyStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $entity
+   * @param AssemblyInterface $entity
    *   The Assembly entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface AssemblyStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Assembly with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/AssemblyTypeAccessControlHandler.php b/src/AssemblyTypeAccessControlHandler.php
index 3b6d791..3001ac5 100644
--- a/src/AssemblyTypeAccessControlHandler.php
+++ b/src/AssemblyTypeAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\assembly;
 
+use Drupal\assembly\Entity\AssemblyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -24,7 +25,7 @@ class AssemblyTypeAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\assembly\Entity\AssemblyInterface $entity */
+    /** @var AssemblyInterface $entity */
     if ($operation == 'view label') {
       return AccessResult::allowed();
     }
diff --git a/src/AssemblyTypeHtmlRouteProvider.php b/src/AssemblyTypeHtmlRouteProvider.php
index e65a67b..08e26d9 100644
--- a/src/AssemblyTypeHtmlRouteProvider.php
+++ b/src/AssemblyTypeHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class AssemblyTypeHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Controller/AssemblyController.php b/src/Controller/AssemblyController.php
index 019ceb8..f3c4192 100644
--- a/src/Controller/AssemblyController.php
+++ b/src/Controller/AssemblyController.php
@@ -53,7 +53,7 @@ class AssemblyController extends ControllerBase implements ContainerInjectionInt
   /**
    * Generates an overview table of older revisions of a Assembly .
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $assembly
+   * @param AssemblyInterface $assembly
    *   A Assembly  object.
    *
    * @return array
@@ -169,7 +169,7 @@ class AssemblyController extends ControllerBase implements ContainerInjectionInt
   /**
    * Returns the list of references for a given assembly as JSON.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $assembly
+   * @param AssemblyInterface $assembly
    *   A Assembly  object.
    *
    * @return array
diff --git a/src/Entity/AssemblyInterface.php b/src/Entity/AssemblyInterface.php
index fb6edf4..41125fc 100644
--- a/src/Entity/AssemblyInterface.php
+++ b/src/Entity/AssemblyInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\assembly\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -97,7 +98,7 @@ interface AssemblyInterface extends RevisionableInterface, RevisionLogInterface,
   /**
    * Gets the Assembly revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/Entity/AssemblyViewBuilder.php b/src/Entity/AssemblyViewBuilder.php
index 9ba332a..592fd6d 100644
--- a/src/Entity/AssemblyViewBuilder.php
+++ b/src/Entity/AssemblyViewBuilder.php
@@ -43,7 +43,7 @@ class AssemblyViewBuilder extends EntityViewBuilder {
   /**
    * Provides entity-specific defaults to the build process.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the defaults should be provided.
    * @param string $view_mode
    *   The view mode that should be used.
diff --git a/src/Form/AssemblyInlineForm.php b/src/Form/AssemblyInlineForm.php
index b4dc41c..1b085ab 100644
--- a/src/Form/AssemblyInlineForm.php
+++ b/src/Form/AssemblyInlineForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\assembly\Form;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\inline_entity_form\Form\EntityInlineForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -90,7 +91,7 @@ class AssemblyInlineForm extends EntityInlineForm {
   /**
    * Returns the bundle entity of the entity, or NULL if there is none.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The bundle entity.
    */
   protected function getBundleEntity($entity) {
diff --git a/src/Form/AssemblyRevisionDeleteForm.php b/src/Form/AssemblyRevisionDeleteForm.php
index 55b6ce8..13e579e 100644
--- a/src/Form/AssemblyRevisionDeleteForm.php
+++ b/src/Form/AssemblyRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\assembly\Form;
 
+use Drupal\assembly\Entity\AssemblyInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class AssemblyRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Assembly revision.
    *
-   * @var \Drupal\assembly\Entity\AssemblyInterface
+   * @var AssemblyInterface
    */
   protected $revision;
 
   /**
    * The Assembly storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $AssemblyStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new AssemblyRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ -108,7 +109,7 @@ class AssemblyRevisionDeleteForm extends ConfirmFormBase {
 
     $this->logger('content')->notice('Assembly: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
     \Drupal::messenger()->addStatus(t('Revision from %revision-date of Assembly %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label()
     ]));
     $form_state->setRedirect(
diff --git a/src/Form/AssemblyRevisionRevertForm.php b/src/Form/AssemblyRevisionRevertForm.php
index 1043ea5..2a37498 100644
--- a/src/Form/AssemblyRevisionRevertForm.php
+++ b/src/Form/AssemblyRevisionRevertForm.php
@@ -21,30 +21,30 @@ class AssemblyRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Assembly revision.
    *
-   * @var \Drupal\assembly\Entity\AssemblyInterface
+   * @var AssemblyInterface
    */
   protected $revision;
 
   /**
    * The Assembly storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $AssemblyStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new AssemblyRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Assembly storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -133,12 +133,12 @@ class AssemblyRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $revision
+   * @param AssemblyInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\assembly\Entity\AssemblyInterface
+   * @return AssemblyInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(AssemblyInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/AssemblyRevisionRevertTranslationForm.php b/src/Form/AssemblyRevisionRevertTranslationForm.php
index 23ebbe3..1de5ccd 100644
--- a/src/Form/AssemblyRevisionRevertTranslationForm.php
+++ b/src/Form/AssemblyRevisionRevertTranslationForm.php
@@ -27,18 +27,18 @@ class AssemblyRevisionRevertTranslationForm extends AssemblyRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new AssemblyRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Assembly storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -93,7 +93,7 @@ class AssemblyRevisionRevertTranslationForm extends AssemblyRevisionRevertForm {
   protected function prepareRevertedRevision(AssemblyInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\assembly\Entity\AssemblyInterface $default_revision */
+    /** @var AssemblyInterface $default_revision */
     $latest_revision = $this->AssemblyStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/AssemblySettingsForm.php b/src/Form/AssemblySettingsForm.php
index 5f11263..6706d11 100644
--- a/src/Form/AssemblySettingsForm.php
+++ b/src/Form/AssemblySettingsForm.php
@@ -29,7 +29,7 @@ class AssemblySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class AssemblySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Plugin/AssemblyBuildManager.php b/src/Plugin/AssemblyBuildManager.php
index a3a7887..33d1121 100644
--- a/src/Plugin/AssemblyBuildManager.php
+++ b/src/Plugin/AssemblyBuildManager.php
@@ -18,9 +18,9 @@ class AssemblyBuildManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index e115c9a..f6c6ae0 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\assembly\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ -40,7 +41,7 @@ class LoadTest extends BrowserTestBase {
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
