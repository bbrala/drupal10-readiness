modules/contrib/migrate_visualize/migrate_visualize.module
modules/contrib/migrate_visualize/migrate_visualize.theme.inc
modules/contrib/migrate_visualize/src/Controller/ListingController.php
modules/contrib/migrate_visualize/src/Controller/VisualizeController.php
modules/contrib/migrate_visualize/src/Form/SettingsForm.php
modules/contrib/migrate_visualize/src/Form/VisualizeMigrationSwitcherForm.php
modules/contrib/migrate_visualize/src/MigrateGraph.php
modules/contrib/migrate_visualize/tests/src/Functional/ListingControllerTest.php
modules/contrib/migrate_visualize/tests/src/Functional/MigrateGraphTest.php
modules/contrib/migrate_visualize/tests/src/Functional/SettingsFormTest.php
modules/contrib/migrate_visualize/tests/src/Functional/VisualizeControllerTest.php

8 files with changes
====================

1) modules/contrib/migrate_visualize/tests/src/Functional/VisualizeControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_visualize\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user with access.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $trustedUser;

@@ @@
   /**
    * An untrusted user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $untrustedUser;

@@ @@
   /**
    * Perform initial setup tasks that run before every test method.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp() : void {
     parent::setUp();
@@ @@
   /**
    * Tests the listing controller.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testVisualizeController() {
     // Login.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migrate_visualize/tests/src/Functional/SettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_visualize\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user with access.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $trustedUser;

@@ @@
   /**
    * An untrusted user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $untrustedUser;

@@ @@
   /**
    * Perform initial setup tasks that run before every test method.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp() : void {
     parent::setUp();
@@ @@
    * support is not detected. In some environments, the only valid form value
    * for display_mode may be "mermaidjs".
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testSettingsForm() {
     // Login.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/migrate_visualize/tests/src/Functional/ListingControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_visualize\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A user with access.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $trustedUser;

@@ @@
   /**
    * An untrusted user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $untrustedUser;

@@ @@
   /**
    * Perform initial setup tasks that run before every test method.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setUp() : void {
     parent::setUp();
@@ @@
   /**
    * Tests the listing controller.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testListingController() {
     // Login.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migrate_visualize/src/MigrateGraph.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The migration to be graphed.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected MigrationInterface $migration;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;

@@ @@
   /**
    * Graph which captures our analysis of the Migration.
    *
-   * @var \Fhaculty\Graph\Graph
+   * @var Graph
    */
   protected Graph $graph;

@@ @@
   /**
    * Construct a new MigrationGraph object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, TranslationInterface $string_translation) {
@@ @@
   /**
    * Set the migration to be graphed.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    *   The migration to graph.
    */
   public function setMigration(MigrationInterface $migration) {
@@ @@
   /**
    * Retrieve the analysis.
    *
-   * @return \Fhaculty\Graph\Graph
+   * @return Graph
    *   The generated graph.
    */
   public function getGraph() {
@@ @@
   /**
    * Graph a migration.
    *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration under inspection.
    *
    * @throws \Exception
@@ @@
    */
   protected function graphPipeline($pipeline) : void {
     $graph = $this->getGraph();
-    /** @var \Drupal\migrate\Plugin\MigrateProcessInterface[] $plugins */
+    /** @var MigrateProcessInterface[] $plugins */
     foreach ($pipeline as $destinationPropertyName => $plugins) {
       $processVertexId = "process:field:{$destinationPropertyName}";
       $processVertex = $graph->createVertex($processVertexId);
@@ @@
    *
    * @param \string $destinationPropertyName
    *   The calculated destination property name for this plugin in the process.
-   * @param \Drupal\migrate\Plugin\MigrateProcessInterface $plugin
+   * @param MigrateProcessInterface $plugin
    *   The configured process plugin.
-   * @param \Fhaculty\Graph\Vertex $destinationVertex
+   * @param Vertex $destinationVertex
    *   The vertex associated with this process's destination.
    * @param \int $pipelineStepId
    *   The array ID of this plugin in its pipeline.
@@ @@
   /**
    * Generate a label for a process pipeline step.
    *
-   * @param \Drupal\migrate\Plugin\MigrateProcessInterface $processPlugin
+   * @param MigrateProcessInterface $processPlugin
    *   The configured process plugin.
    * @param \array $configuration
    *   The extracted configuration of the plugin.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/migrate_visualize/src/Form/VisualizeMigrationSwitcherForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The form constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The migration plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The route matcher.
    */
   public function __construct(MigrationPluginManagerInterface $migration_plugin_manager, ModuleHandler $module_handler, CurrentRouteMatch $current_route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/migrate_visualize/src/Controller/VisualizeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_visualize\Controller;

+use Fhaculty\Graph\Graph;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal\migrate_visualize\MigrateGraph;
@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * The migration graph service.
    *
-   * @var \Drupal\migrate_visualize\MigrateGraph
+   * @var MigrateGraph
    */
   protected $migrationGraph;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The migration plugin manager.
-   * @param Drupal\migrate_visualize\MigrateGraph $migrate_graph
+   * @param MigrateGraph $migrate_graph
    *   The migration graph service.
    */
   public function __construct(MigrationPluginManagerInterface $migration_plugin_manager, MigrateGraph $migrate_graph) {
@@ @@
       '#weight' => 110,
     ];

-    /** @var \Fhaculty\Graph\Graph $build['visualize']['#graph'] */
+    /** @var Graph $build ['visualize']['#graph'] */
     $build['visualize']['#graph'] = $this->migrationGraph->getGraph();

     switch ($this->config('migrate_visualize.settings')->get('display_mode')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migrate_visualize/src/Controller/ListingController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandler definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   The migration plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler service.
    */
   public function __construct(MigrationPluginManagerInterface $migration_plugin_manager, ModuleHandler $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/migrate_visualize/migrate_visualize.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Fhaculty\Graph\Graph;
+use Fhaculty\Graph\Vertex;
+use Fhaculty\Graph\Edge\Directed;
 /**
  * @file
  * Theme functions for Migrate Visualize.
@@ @@
  *   Variables array.
  */
 function template_preprocess_migration_visualize_graphviz(array &$variables) {
-  /** @var \Fhaculty\Graph\Graph $graph */
+  /** @var Graph $graph */
   $graph = $variables['graph'];

   $graph->setAttribute('graphviz.graph.charset', 'iso-8859-1');
@@ @@

   $typeAttributes = _migrate_visualize_graph_type_attributes();

-  /** @var \Fhaculty\Graph\Vertex $vertex */
+  /** @var Vertex $vertex */
   foreach ($graph->getVertices() as $k => $vertex) {
     if ($type = $vertex->getAttribute('migrate_visualize.type')) {
       $groups = ['source' => 0, 'process' => 1, 'destination' => 2];
@@ @@
     'penwidth' => 2,
   ];

-  /** @var \Fhaculty\Graph\Edge\Directed $edge */
+  /** @var Directed $edge */
   foreach ($graph->getEdges() as $k => $edge) {
     $edge->setAttribute('graphviz.color', $k % 6 + 2);
     foreach ($graphvizAttributes as $name => $value) {
@@ @@

   // @todo Find a way to set the group titles!
   // $graph->getGroup(0)->setAttribute('graphviz.title', 'Source')
-  /** @var \Graphp\GraphViz\GraphViz $graphViz */
+  /** @var GraphViz $graphViz */
   try {
     $graphViz = new GraphViz();
     $graphViz->setFormat('svg');
@@ @@
  *   Variables array.
  */
 function template_preprocess_migration_visualize_mermaid(array &$variables) {
-  /** @var \Fhaculty\Graph\Graph $graph */
+  /** @var Graph $graph */
   $graph = $variables['graph'];

-  /** @var \Fhaculty\Graph\Vertex $vertex */
+  /** @var Vertex $vertex */
   foreach ($graph->getVertices() as $k => $vertex) {
     if ($type = $vertex->getAttribute('migrate_visualize.type')) {
       $groups = ['source' => 0, 'process' => 1, 'destination' => 2];
@@ @@
     'destination:field' => ['color' => 'goldenrod3'],
   ];

-  /** @var \Fhaculty\Graph\Edge\Directed $edge */
+  /** @var Directed $edge */
   foreach ($graph->getEdges() as $k => $edge) {
     $edge->setAttribute('graphviz.colorscheme', 'oranges9');
     $edge->setAttribute('graphviz.color', $k % 6 + 2);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

