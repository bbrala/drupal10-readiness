diff --git a/modules/simplenews_demo/simplenews_demo.install b/modules/simplenews_demo/simplenews_demo.install
index eb3bc5e..6501944 100644
--- a/modules/simplenews_demo/simplenews_demo.install
+++ b/modules/simplenews_demo/simplenews_demo.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 /**
  * @file
  * Simplenews_demo base install file.
@@ -62,7 +63,7 @@ function simplenews_demo_install() {
     ])
     ->save();
 
-  /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+  /** @var SubscriptionManagerInterface $subscription_manager */
   $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
   // Create some subscribers.
diff --git a/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php b/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
index 010e5ad..0373345 100644
--- a/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
+++ b/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
@@ -26,7 +26,7 @@ class SimplenewsDemoTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Install bartik theme.
     \Drupal::service('theme_installer')->install(['bartik']);
diff --git a/simplenews.api.php b/simplenews.api.php
index eff2143..f6db52f 100644
--- a/simplenews.api.php
+++ b/simplenews.api.php
@@ -108,7 +108,7 @@ function hook_simplenews_subscription_operations() {
 /**
  * Act after a newsletter category has been saved.
  *
- * @param \Drupal\simplenews\Entity\Newsletter $newsletter
+ * @param Newsletter $newsletter
  *   The newsletter object.
  *
  * @ingroup newsletter
@@ -120,7 +120,7 @@ function hook_simplenews_newsletter_update(Newsletter $newsletter) {
 /**
  * Act after a newsletter category has been deleted.
  *
- * @param \Drupal\simplenews\Entity\Newsletter $newsletter
+ * @param Newsletter $newsletter
  *   The newsletter object.
  *
  * @ingroup newsletter
@@ -132,7 +132,7 @@ function hook_simplenews_newsletter_delete(Newsletter $newsletter) {
 /**
  * Act after a newsletter category has been inserted.
  *
- * @param \Drupal\simplenews\Entity\Newsletter $newsletter
+ * @param Newsletter $newsletter
  *   The newsletter object.
  *
  * @ingroup newsletter
@@ -144,7 +144,7 @@ function hook_simplenews_newsletter_insert(Newsletter $newsletter) {
 /**
  * Act after a subscriber is updated.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  *
  * @ingroup subscriber
@@ -156,7 +156,7 @@ function hook_simplenews_subscriber_update(Subscriber $subscriber) {
 /**
  * Act after a new subscriber has been created.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  *
  * @ingroup subscriber
@@ -168,7 +168,7 @@ function hook_simplenews_subscriber_insert(Subscriber $subscriber) {
 /**
  * Act after a subscriber has been deleted.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  *
  * @ingroup subscriber
@@ -180,7 +180,7 @@ function hook_simplenews_subscriber_delete(Subscriber $subscriber) {
 /**
  * Invoked if a subscriber is subscribed to a newsletter.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  * @param string $newsletter_id
  *   The newsletter ID for this specific subscribe action.
@@ -194,7 +194,7 @@ function hook_simplenews_subscribe(Subscriber $subscriber, $newsletter_id) {
 /**
  * Invoked if a subscriber is unsubscribed from a newsletter.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  * @param string $subscription
  *   The subscription object for this specific unsubscribe action.
diff --git a/simplenews.module b/simplenews.module
index fc36fbb..ddc7c69 100644
--- a/simplenews.module
+++ b/simplenews.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
+use Drupal\simplenews\Mail\MailBuilder;
+use Drupal\Core\Entity\FieldableEntityInterface;
 /**
  * @file
  * Simplenews node handling, sent email, newsletter block and general hooks.
@@ -412,8 +415,7 @@ function simplenews_user_profile_form_submit($form, FormStateInterface $form_sta
   // @todo As part of https://www.drupal.org/project/simplenews/issues/3035367
   // fix this so it doesn't send a confirmation mail and instead confirms the
   // subscription when the user first logs in.
-
-  /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+  /** @var SubscriptionManagerInterface $subscription_manager */
   $subscription_manager = \Drupal::service('simplenews.subscription_manager');
   // Invalid input (non-array) could result in a NULL return value, ensure to
   // only load and subscribe if valid input is provided.
@@ -572,7 +574,7 @@ function simplenews_user_view(array &$build, UserInterface $account, EntityViewD
  * Implements hook_mail().
  */
 function simplenews_mail($key, &$message, $params) {
-  /** @var \Drupal\simplenews\Mail\MailBuilder $builder */
+  /** @var MailBuilder $builder */
   $builder = \Drupal::service('simplenews.mail_builder');
 
   switch ($key) {
@@ -740,7 +742,7 @@ function simplenews_help($route_name, RouteMatchInterface $route_match) {
 /**
  * Generates the hash key used for subscribe/unsubscribe link.
  */
-function simplenews_generate_hash($mail, $action = '', $timestamp = REQUEST_TIME) {
+function simplenews_generate_hash($mail, $action = '', $timestamp = \Drupal::time()->getRequestTime()) {
   $data = $mail . \Drupal::service('private_key')->get() . $action . $timestamp;
   return Crypt::hashBase64($data);
 }
@@ -827,7 +829,7 @@ function template_preprocess_simplenews_newsletter_body(&$variables) {
 
   $entity_type = $elements['#entity_type'];
 
-  /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+  /** @var FieldableEntityInterface $entity */
   $entity = !empty($elements['#' . $entity_type]) ? $elements['#' . $entity_type] : $elements['#entity'];
   if ($elements['#language'] && $entity->hasTranslation($elements['#language'])) {
     $entity = $entity->getTranslation($elements['#language']);
diff --git a/simplenews.tokens.inc b/simplenews.tokens.inc
index 7617d75..ebf6487 100644
--- a/simplenews.tokens.inc
+++ b/simplenews.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simplenews\Entity\Subscriber;
 /**
  * @file
  * Token related hook implementations.
@@ -83,7 +84,7 @@ function simplenews_tokens($type, $tokens, $data, $options, BubbleableMetadata $
       if (!isset($data['simplenews_subscriber'])) {
         return;
       }
-      /** @var \Drupal\simplenews\Entity\Subscriber $subscriber */
+      /** @var Subscriber $subscriber */
       $subscriber = $data['simplenews_subscriber'];
       $newsletter = isset($data['newsletter']) ? $data['newsletter'] : NULL;
       $language = $subscriber->getLangcode();
@@ -91,7 +92,7 @@ function simplenews_tokens($type, $tokens, $data, $options, BubbleableMetadata $
       $url_arguments = ['absolute' => TRUE, 'langcode' => $language];
 
       foreach ($tokens as $name => $original) {
-        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => REQUEST_TIME];
+        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => \Drupal::time()->getRequestTime()];
         switch ($name) {
           case 'subscribe-url':
             $hash = simplenews_generate_hash($subscriber->getMail(), 'add');
diff --git a/src/Commands/SimplenewsCommands.php b/src/Commands/SimplenewsCommands.php
index f1b894e..600f6d8 100644
--- a/src/Commands/SimplenewsCommands.php
+++ b/src/Commands/SimplenewsCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Commands;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\simplenews\Mail\MailerInterface;
 use Drupal\simplenews\Spool\SpoolStorageInterface;
@@ -24,32 +25,32 @@ class SimplenewsCommands extends DrushCommands {
   /**
    * The simplenews config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $simplenewsConfig;
 
   /**
    * The spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
   /**
    * The mailer service.
    *
-   * @var \Drupal\simplenews\Mail\MailerInterface
+   * @var MailerInterface
    */
   protected $mailer;
 
   /**
    * SimplenewsCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
-   * @param \Drupal\simplenews\Mail\MailerInterface $mailer
+   * @param MailerInterface $mailer
    *   The mailer service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SpoolStorageInterface $spool_storage, MailerInterface $mailer) {
diff --git a/src/Controller/ConfirmationController.php b/src/Controller/ConfirmationController.php
index e21ae0a..7829850 100644
--- a/src/Controller/ConfirmationController.php
+++ b/src/Controller/ConfirmationController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -18,14 +19,14 @@ class ConfirmationController extends ControllerBase {
   /**
    * The subscription manager.
    *
-   * @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface
+   * @var SubscriptionManagerInterface
    */
   protected $subscriptionManager;
 
   /**
    * Constructs a \Drupal\simplenews\Controller\ConfirmationController object.
    *
-   * @param \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager
+   * @param SubscriptionManagerInterface $subscription_manager
    *   The subscription manager service.
    */
   public function __construct(SubscriptionManagerInterface $subscription_manager) {
@@ -85,7 +86,7 @@ class ConfirmationController extends ControllerBase {
     if ($subscriber && $hash == simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $timestamp)) {
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
         ];
@@ -184,7 +185,7 @@ class ConfirmationController extends ControllerBase {
 
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
           'newsletter' => $newsletter,
@@ -238,7 +239,7 @@ class ConfirmationController extends ControllerBase {
    * Redirect to the 'Newsletters' tab for authenticated users or the 'Access
    * your subscriptions' page otherwise.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Returns a redirect to the correct page.
    */
   public function subscriptionsPage() {
diff --git a/src/Entity/Newsletter.php b/src/Entity/Newsletter.php
index ab9f932..fc9825b 100644
--- a/src/Entity/Newsletter.php
+++ b/src/Entity/Newsletter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Entity;
 
+use Drupal\simplenews\Subscription\SubscriptionStorageInterface;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -172,7 +173,7 @@ class Newsletter extends ConfigEntityBase implements NewsletterInterface {
   public static function postDelete(EntityStorageInterface $storage, array $entities) {
     parent::postDelete($storage, $entities);
 
-    /** @var \Drupal\simplenews\Subscription\SubscriptionStorageInterface $subscription_storage */
+    /** @var SubscriptionStorageInterface $subscription_storage */
     $subscription_storage = \Drupal::entityTypeManager()
       ->getStorage('simplenews_subscriber');
 
diff --git a/src/Entity/Subscriber.php b/src/Entity/Subscriber.php
index 7eaf8f5..44aa75f 100644
--- a/src/Entity/Subscriber.php
+++ b/src/Entity/Subscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Entity;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -242,7 +243,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = $status;
     }
@@ -263,7 +264,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED;
     }
@@ -322,7 +323,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * Identifies configurable fields shared with a user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to match fields against.
    *
    * @return string[]
@@ -335,7 +336,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
     if (\Drupal::config('simplenews.settings')->get('subscriber.sync_fields')) {
       // Find any fields sharing name and type.
       foreach ($this->getFieldDefinitions() as $field_definition) {
-        /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+        /** @var FieldDefinitionInterface $field_definition */
         $field_name = $field_definition->getName();
         $user_field = $user->getFieldDefinition($field_name);
         if ($field_definition->getTargetBundle() && isset($user_field) && $user_field->getType() == $field_definition->getType()) {
diff --git a/src/EventSubscriber/MigrationSubscriber.php b/src/EventSubscriber/MigrationSubscriber.php
index ecac596..f0f2288 100644
--- a/src/EventSubscriber/MigrationSubscriber.php
+++ b/src/EventSubscriber/MigrationSubscriber.php
@@ -25,23 +25,23 @@ class MigrationSubscriber implements EventSubscriberInterface {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Constructs a new migration subscriber.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ -52,7 +52,7 @@ class MigrationSubscriber implements EventSubscriberInterface {
   /**
    * Create simplenews field if applicable.
    *
-   * @param \Drupal\migrate\Event\MigratePostRowSaveEvent $event
+   * @param MigratePostRowSaveEvent $event
    *   The event object.
    */
   public function onMigrationPostRowSave(MigratePostRowSaveEvent $event) {
diff --git a/src/Form/NewsletterForm.php b/src/Form/NewsletterForm.php
index 68a0ea1..6d126fc 100644
--- a/src/Form/NewsletterForm.php
+++ b/src/Form/NewsletterForm.php
@@ -17,23 +17,23 @@ class NewsletterForm extends EntityForm {
   /**
    * The recipient handler manager.
    *
-   * @var Drupal\simplenews\RecipientHandler\RecipientHandlerManager
+   * @var RecipientHandlerManager
    */
   protected $simpleNewsRecipientHandler;
 
   /**
    * The link generator service.
    *
-   * @var Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;
 
   /**
    * Constructs a \Drupal\simplenews\Form\NewsletterForm object.
    *
-   * @param \Drupal\simplenews\RecipientHandler\RecipientHandlerManager $simpleNewsRecipientHandler
+   * @param RecipientHandlerManager $simpleNewsRecipientHandler
    *   The recipient handler manager.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
    */
   public function __construct(RecipientHandlerManager $simpleNewsRecipientHandler, LinkGeneratorInterface $link_generator) {
diff --git a/src/Form/NodeTabForm.php b/src/Form/NodeTabForm.php
index 752747e..32a594d 100644
--- a/src/Form/NodeTabForm.php
+++ b/src/Form/NodeTabForm.php
@@ -20,41 +20,41 @@ class NodeTabForm extends FormBase {
   /**
    * The spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
   /**
    * The currently authenticated user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The simplenews mailer.
    *
-   * @var \Drupal\simplenews\Mail\MailerInterface
+   * @var MailerInterface
    */
   protected $mailer;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Constructs a new NodeTabForm.
    *
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently authenticated user.
-   * @param \Drupal\simplenews\Mail\MailerInterface $simplenews_mailer
+   * @param MailerInterface $simplenews_mailer
    *   The simplenews mailer service.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(SpoolStorageInterface $spool_storage, AccountInterface $current_user, MailerInterface $simplenews_mailer, EmailValidatorInterface $email_validator) {
@@ -178,7 +178,7 @@ class NodeTabForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function validateTestAddress(array $form, FormStateInterface $form_state) {
@@ -204,7 +204,7 @@ class NodeTabForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitTestMail(array &$form, FormStateInterface $form_state) {
@@ -223,7 +223,7 @@ class NodeTabForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitStop(array &$form, FormStateInterface $form_state) {
@@ -233,10 +233,10 @@ class NodeTabForm extends FormBase {
   /**
    * Checks access for the simplenews node tab.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node where the tab should be added.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An access result object.
    */
   public function checkAccess(NodeInterface $node) {
diff --git a/src/Form/RequestHashForm.php b/src/Form/RequestHashForm.php
index 4abb36a..20e0eb3 100644
--- a/src/Form/RequestHashForm.php
+++ b/src/Form/RequestHashForm.php
@@ -51,7 +51,7 @@ class RequestHashForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $key
    *   The mail key to be sent.
diff --git a/src/Form/SubscriberExportForm.php b/src/Form/SubscriberExportForm.php
index 9b313e5..60087b9 100644
--- a/src/Form/SubscriberExportForm.php
+++ b/src/Form/SubscriberExportForm.php
@@ -17,7 +17,7 @@ class SubscriberExportForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Form/SubscriberForm.php b/src/Form/SubscriberForm.php
index 6459092..2de2b73 100644
--- a/src/Form/SubscriberForm.php
+++ b/src/Form/SubscriberForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Form;
 
+use Drupal\simplenews\SubscriberInterface;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -22,7 +23,7 @@ class SubscriberForm extends SubscriptionsFormBase {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\simplenews\SubscriberInterface $subscriber */
+    /** @var SubscriberInterface $subscriber */
     $subscriber = $this->entity;
 
     if ($mail = $subscriber->getMail()) {
diff --git a/src/Form/SubscriberMassSubscribeForm.php b/src/Form/SubscriberMassSubscribeForm.php
index 2628b94..4621d86 100644
--- a/src/Form/SubscriberMassSubscribeForm.php
+++ b/src/Form/SubscriberMassSubscribeForm.php
@@ -20,32 +20,32 @@ class SubscriberMassSubscribeForm extends FormBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The subscription manager.
    *
-   * @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface
+   * @var SubscriptionManagerInterface
    */
   protected $subscriptionManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Constructs a new SubscriberMassSubscribeForm.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager
+   * @param SubscriptionManagerInterface $subscription_manager
    *   The subscription manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(LanguageManagerInterface $language_manager, SubscriptionManagerInterface $subscription_manager, EmailValidatorInterface $email_validator) {
@@ -152,7 +152,7 @@ class SubscriberMassSubscribeForm extends FormBase {
       if ($this->emailValidator->isValid($email)) {
         $subscriber = Subscriber::loadByMail($email);
 
-        /** @var \Drupal\simplenews\Entity\Newsletter $newsletter */
+        /** @var Newsletter $newsletter */
         foreach (Newsletter::loadMultiple($checked_newsletters) as $newsletter) {
           // If there is a valid subscriber, check if there is a subscription
           // for the current newsletter and if this subscription has the status
diff --git a/src/Form/SubscriberMassUnsubscribeForm.php b/src/Form/SubscriberMassUnsubscribeForm.php
index b7d644c..be38dd5 100644
--- a/src/Form/SubscriberMassUnsubscribeForm.php
+++ b/src/Form/SubscriberMassUnsubscribeForm.php
@@ -17,23 +17,23 @@ class SubscriberMassUnsubscribeForm extends FormBase {
   /**
    * The subscription manager.
    *
-   * @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface
+   * @var SubscriptionManagerInterface
    */
   protected $subscriptionManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Constructs a new SubscriberMassUnsubscribeForm.
    *
-   * @param \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager
+   * @param SubscriptionManagerInterface $subscription_manager
    *   The subscription manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(SubscriptionManagerInterface $subscription_manager, EmailValidatorInterface $email_validator) {
diff --git a/src/Form/SubscriberValidateForm.php b/src/Form/SubscriberValidateForm.php
index 09d5ca0..fcc36e0 100644
--- a/src/Form/SubscriberValidateForm.php
+++ b/src/Form/SubscriberValidateForm.php
@@ -19,23 +19,23 @@ class SubscriberValidateForm extends FormBase {
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The mailer service.
    *
-   * @var \Drupal\simplenews\Mail\MailerInterface
+   * @var MailerInterface
    */
   protected $mailer;
 
   /**
    * Constructs a new SubscriberMassSubscribeForm.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\simplenews\Mail\MailerInterface $mailer
+   * @param MailerInterface $mailer
    *   The mailer service.
    */
   public function __construct(MailManagerInterface $mail_manager, MailerInterface $mailer) {
diff --git a/src/Form/SubscriptionSettingsForm.php b/src/Form/SubscriptionSettingsForm.php
index 35dc864..23b73dd 100644
--- a/src/Form/SubscriptionSettingsForm.php
+++ b/src/Form/SubscriptionSettingsForm.php
@@ -15,14 +15,14 @@ class SubscriptionSettingsForm extends ConfigFormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a \Drupal\simplenews\Form\SubscriptionSettingsForm object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
diff --git a/src/Form/SubscriptionsAccountForm.php b/src/Form/SubscriptionsAccountForm.php
index a7fa97d..611129d 100644
--- a/src/Form/SubscriptionsAccountForm.php
+++ b/src/Form/SubscriptionsAccountForm.php
@@ -47,10 +47,10 @@ class SubscriptionsAccountForm extends SubscriptionsFormBase {
   /**
    * Checks access for the simplenews account form.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The account to use in the form.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An access result object.
    */
   public function checkAccess(UserInterface $user) {
diff --git a/src/Form/SubscriptionsBlockForm.php b/src/Form/SubscriptionsBlockForm.php
index 1dd7e0a..4df0fe3 100644
--- a/src/Form/SubscriptionsBlockForm.php
+++ b/src/Form/SubscriptionsBlockForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Form;
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\simplenews\Entity\Subscriber;
@@ -206,11 +207,11 @@ class SubscriptionsBlockForm extends SubscriptionsFormBase {
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitExtra(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
     // Subscribe the selected newsletters and any defaults that are hidden.
diff --git a/src/Form/SubscriptionsFormBase.php b/src/Form/SubscriptionsFormBase.php
index c328131..afd9238 100644
--- a/src/Form/SubscriptionsFormBase.php
+++ b/src/Form/SubscriptionsFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Form;
 
+use Drupal\simplenews\SubscriptionWidgetInterface;
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,7 +23,7 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * Returns a message to display to the user upon successful form submission.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param bool $confirm
    *   Whether a confirmation mail is sent or not.
@@ -34,10 +36,10 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * Returns the renderer for the 'subscriptions' field.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\simplenews\SubscriptionWidgetInterface
+   * @return SubscriptionWidgetInterface
    *   The widget.
    */
   protected function getSubscriptionWidget(FormStateInterface $form_state) {
@@ -77,13 +79,13 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitExtra(array $form, FormStateInterface $form_state) {
     // We first subscribe, then unsubscribe. This prevents deletion of
     // subscriptions when unsubscribed from the newsletter.
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
     foreach ($this->extractNewsletterIds($form_state, TRUE) as $newsletter_id) {
       $subscription_manager->subscribe($this->entity->getMail(), $newsletter_id, FALSE, 'website');
@@ -100,7 +102,7 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * Extracts selected/deselected newsletters IDs from the subscriptions widget.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param bool $selected
    *   Whether to extract selected (TRUE) or deselected (FALSE) newsletter IDs.
diff --git a/src/Mail/MailBuilder.php b/src/Mail/MailBuilder.php
index 878637b..0ddcc0c 100644
--- a/src/Mail/MailBuilder.php
+++ b/src/Mail/MailBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Mail\MailFormatHelper;
 use Drupal\Core\Utility\Token;
@@ -15,32 +16,32 @@ class MailBuilder implements MailBuilderInterface {
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The subscription manager.
    *
-   * @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface
+   * @var SubscriptionManagerInterface
    */
   protected $subscriptionManager;
 
   /**
    * Constructs a MailBuilder.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager
+   * @param SubscriptionManagerInterface $subscription_manager
    *   The subscription manager.
    */
   public function __construct(Token $token, ConfigFactoryInterface $config_factory, SubscriptionManagerInterface $subscription_manager) {
diff --git a/src/Mail/MailBuilderInterface.php b/src/Mail/MailBuilderInterface.php
index 86b43ae..a905dcf 100644
--- a/src/Mail/MailBuilderInterface.php
+++ b/src/Mail/MailBuilderInterface.php
@@ -12,7 +12,7 @@ interface MailBuilderInterface {
    *
    * @param array $message
    *   Message array as used by hook_mail().
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    */
   public function buildNewsletterMail(array &$message, MailInterface $mail);
diff --git a/src/Mail/MailCacheInterface.php b/src/Mail/MailCacheInterface.php
index 1075421..e52a862 100644
--- a/src/Mail/MailCacheInterface.php
+++ b/src/Mail/MailCacheInterface.php
@@ -16,7 +16,7 @@ interface MailCacheInterface {
    * implementations are responsible to create a unique cache key themself using
    * the $mail. For example based on the node id and the language.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    * @param string $group
    *   Group of the cache key, which allows cache implementations to decide what
@@ -40,7 +40,7 @@ interface MailCacheInterface {
    * implementations are responsible to create a unique cache key themself using
    * the $mail. For example based on the entity id and the language.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    * @param string $group
    *   Group of the cache key, which allows cache implementations to decide what
diff --git a/src/Mail/MailCacheStatic.php b/src/Mail/MailCacheStatic.php
index ea8edaa..05ecc93 100644
--- a/src/Mail/MailCacheStatic.php
+++ b/src/Mail/MailCacheStatic.php
@@ -22,7 +22,7 @@ abstract class MailCacheStatic implements MailCacheInterface {
   /**
    * Returns the cache identifier for the mail.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    *
    * @return string
@@ -60,7 +60,7 @@ abstract class MailCacheStatic implements MailCacheInterface {
   /**
    * Return if the requested element should be cached.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    * @param string $group
    *   Group of the cache key, which allows cache implementations to decide what
diff --git a/src/Mail/MailEntity.php b/src/Mail/MailEntity.php
index 17b187c..848bc67 100644
--- a/src/Mail/MailEntity.php
+++ b/src/Mail/MailEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\simplenews\NewsletterInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -19,7 +20,7 @@ class MailEntity implements MailInterface {
   /**
    * The newsletter issue.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $issue;
 
@@ -33,14 +34,14 @@ class MailEntity implements MailInterface {
   /**
    * The newsletter.
    *
-   * @var \Drupal\simplenews\NewsletterInterface
+   * @var NewsletterInterface
    */
   protected $newsletter;
 
   /**
    * The subscriber and therefore recipient of this mail.
    *
-   * @var \Drupal\simplenews\SubscriberInterface
+   * @var SubscriberInterface
    */
   protected $subscriber;
 
@@ -74,7 +75,7 @@ class MailEntity implements MailInterface {
   /**
    * Returns the corresponding newsletter.
    *
-   * @return \Drupal\simplenews\NewsletterInterface
+   * @return NewsletterInterface
    *   The newsletter.
    */
   public function getNewsletter() {
diff --git a/src/Mail/MailInterface.php b/src/Mail/MailInterface.php
index 3917610..6293aa0 100644
--- a/src/Mail/MailInterface.php
+++ b/src/Mail/MailInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\simplenews\SubscriberInterface;
 /**
  * A newsletter mail.
  *
@@ -12,7 +14,7 @@ interface MailInterface {
   /**
    * Returns the newsletter issue entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Newsletter issue entity.
    */
   public function getIssue();
@@ -20,7 +22,7 @@ interface MailInterface {
   /**
    * Returns the subscriber object.
    *
-   * @return \Drupal\simplenews\SubscriberInterface
+   * @return SubscriberInterface
    *   Subscriber object.
    */
   public function getSubscriber();
diff --git a/src/Mail/Mailer.php b/src/Mail/Mailer.php
index 4d00c89..02bedfe 100644
--- a/src/Mail/Mailer.php
+++ b/src/Mail/Mailer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -54,49 +55,49 @@ class Mailer implements MailerInterface {
   /**
    * The simplenews spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * Lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -110,55 +111,55 @@ class Mailer implements MailerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The simplenews mail cache.
    *
-   * @var \Drupal\simplenews\Mail\MailCacheInterface
+   * @var MailCacheInterface
    */
   protected $mailCache;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a Mailer.
    *
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The simplenews spool storage.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   Account switcher.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   Lock service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\simplenews\Mail\MailCacheInterface $mail_cache
+   * @param MailCacheInterface $mail_cache
    *   The simplenews mail cache.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(SpoolStorageInterface $spool_storage, MailManagerInterface $mail_manager, StateInterface $state, LoggerInterface $logger, AccountSwitcherInterface $account_switcher, LockBackendInterface $lock, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, MailCacheInterface $mail_cache, ModuleHandlerInterface $module_handler) {
@@ -306,7 +307,7 @@ class Mailer implements MailerInterface {
         $this->logger->notice('%success emails sent, %skipped skipped, %fail failed permanently, %retry failed retrying.', $log_array);
       }
 
-      $this->state->set('simplenews.last_cron', REQUEST_TIME);
+      $this->state->set('simplenews.last_cron', \Drupal::time()->getRequestTime());
       $this->state->set('simplenews.last_sent', $freq[SpoolStorageInterface::STATUS_DONE]);
 
       $this->accountSwitcher->switchBack();
diff --git a/src/Mail/MailerInterface.php b/src/Mail/MailerInterface.php
index 750daed..c09251a 100644
--- a/src/Mail/MailerInterface.php
+++ b/src/Mail/MailerInterface.php
@@ -48,7 +48,7 @@ interface MailerInterface {
   /**
    * Send a node to an email address.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    *
    * @return int
@@ -59,7 +59,7 @@ interface MailerInterface {
   /**
    * Send test version of newsletter.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be sent.
    * @param array $test_addresses
    *   List of addresses to send the newsletter to.
diff --git a/src/Plugin/Block/SimplenewsSubscriptionBlock.php b/src/Plugin/Block/SimplenewsSubscriptionBlock.php
index e7c25eb..f591fce 100644
--- a/src/Plugin/Block/SimplenewsSubscriptionBlock.php
+++ b/src/Plugin/Block/SimplenewsSubscriptionBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Plugin\Block;
 
+use Drupal\simplenews\Form\SubscriptionsBlockForm;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -27,28 +28,28 @@ class SimplenewsSubscriptionBlock extends BlockBase implements ContainerFactoryP
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The UUID service.
    *
-   * @var Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;
 
   /**
    * The current user service.
    *
-   * @var Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -61,13 +62,13 @@ class SimplenewsSubscriptionBlock extends BlockBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder object.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The uuid service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, FormBuilderInterface $formBuilder, UuidInterface $uuid, AccountInterface $current_user) {
@@ -200,7 +201,7 @@ class SimplenewsSubscriptionBlock extends BlockBase implements ContainerFactoryP
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\simplenews\Form\SubscriptionsBlockForm $form_object */
+    /** @var SubscriptionsBlockForm $form_object */
     $form_object = $this->entityTypeManager->getFormObject('simplenews_subscriber', 'block')
       ->setUniqueId($this->configuration['unique_id'])
       ->setEntity(Subscriber::loadByUid($this->currentUser->id(), 'create'))
diff --git a/src/Plugin/Field/FieldWidget/IssueWidget.php b/src/Plugin/Field/FieldWidget/IssueWidget.php
index 288c3e4..1cfff06 100644
--- a/src/Plugin/Field/FieldWidget/IssueWidget.php
+++ b/src/Plugin/Field/FieldWidget/IssueWidget.php
@@ -29,7 +29,7 @@ class IssueWidget extends OptionsSelectWidget implements ContainerFactoryPluginI
   /**
    * The spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
@@ -47,15 +47,15 @@ class IssueWidget extends OptionsSelectWidget implements ContainerFactoryPluginI
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
-   * @param \Drupal\simplenews\recipientHandler\RecipientHandlerManager $recipient_handler_manager
+   * @param RecipientHandlerManager $recipient_handler_manager
    *   The recipient handler manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, SpoolStorageInterface $spool_storage, RecipientHandlerManager $recipient_handler_manager) {
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
index ac7c012..2e4060d 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Plugin\simplenews\RecipientHandler;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\simplenews\RecipientHandler\RecipientHandlerInterface;
 use Drupal\simplenews\Spool\SpoolStorageInterface;
@@ -14,14 +16,14 @@ abstract class RecipientHandlerBase extends PluginBase implements RecipientHandl
   /**
    * The newsletter issue.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $issue;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -135,7 +137,7 @@ abstract class RecipientHandlerBase extends PluginBase implements RecipientHandl
       'entity_type' => $this->issue->getEntityTypeId(),
       'entity_id' => $this->issue->id(),
       'status' => SpoolStorageInterface::STATUS_PENDING,
-      'timestamp' => REQUEST_TIME,
+      'timestamp' => \Drupal::time()->getRequestTime(),
       'newsletter_id' => $this->getNewsletterId(),
     ];
 
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
index 6f3a565..6bcbbc9 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Plugin\simplenews\RecipientHandler;
 
+use Drupal\Core\Entity\Query\QueryInterface;
 /**
  * Base for Recipient Handler classes based on EntityQuery.
  */
@@ -28,7 +29,7 @@ abstract class RecipientHandlerEntityBase extends RecipientHandlerBase {
   /**
    * Build the query that gets the list of subscribers.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   Entity query on 'simplenews_subscriber' or 'user'.
    */
   abstract protected function buildEntityQuery();
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
index 7f34c4a..b6ed804 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Plugin\simplenews\RecipientHandler;
 
+use Drupal\Core\Database\Query\SelectInterface;
 /**
  * Base for Recipient Handlers that access the database directly using Select.
  *
@@ -20,7 +21,7 @@ abstract class RecipientHandlerSelectBase extends RecipientHandlerBase {
     $query->addExpression("'$entity_type'", 'entity_type');
     $query->addExpression($this->issue->id(), 'entity_id');
     $query->addExpression(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, 'status');
-    $query->addExpression(REQUEST_TIME, 'timestamp');
+    $query->addExpression(\Drupal::time()->getRequestTime(), 'timestamp');
     $this->connection->insert('simplenews_mail_spool')->from($query)->execute();
 
     return $query->countQuery()->execute()->fetchField();
@@ -36,7 +37,7 @@ abstract class RecipientHandlerSelectBase extends RecipientHandlerBase {
   /**
    * Build the query that gets the list of recipients.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   Query with the columns 'snid' and 'newsletter_id' for each recipient.
    */
   abstract protected function buildRecipientQuery();
diff --git a/src/Plugin/views/field/SendStatus.php b/src/Plugin/views/field/SendStatus.php
index 9c2d383..2ba5cf3 100644
--- a/src/Plugin/views/field/SendStatus.php
+++ b/src/Plugin/views/field/SendStatus.php
@@ -46,7 +46,7 @@ class SendStatus extends FieldPluginBase {
   /**
    * Return a compiled message to display.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node object.
    *
    * @return array
@@ -61,7 +61,7 @@ class SendStatus extends FieldPluginBase {
       SIMPLENEWS_STATUS_SEND_READY => 'images/sn-sent.png',
     ];
     if (isset($images[$status])) {
-      $message['uri'] = drupal_get_path('module', 'simplenews') . '/' . $images[$status];
+      $message['uri'] = \Drupal::service('extension.list.module')->getPath('simplenews') . '/' . $images[$status];
     }
     else {
       $message['uri'] = NULL;
diff --git a/src/RecipientHandler/Annotation/RecipientHandler.php b/src/RecipientHandler/Annotation/RecipientHandler.php
index 367d9b1..d4d94e1 100644
--- a/src/RecipientHandler/Annotation/RecipientHandler.php
+++ b/src/RecipientHandler/Annotation/RecipientHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\RecipientHandler\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -30,7 +31,7 @@ class RecipientHandler extends Plugin {
   /**
    * The human-readable name of the recipient handler plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -39,7 +40,7 @@ class RecipientHandler extends Plugin {
   /**
    * The description of the recipient handler plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/RecipientHandler/RecipientHandlerManager.php b/src/RecipientHandler/RecipientHandlerManager.php
index c929ec9..c3608e0 100644
--- a/src/RecipientHandler/RecipientHandlerManager.php
+++ b/src/RecipientHandler/RecipientHandlerManager.php
@@ -23,9 +23,9 @@ class RecipientHandlerManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Spool/SpoolList.php b/src/Spool/SpoolList.php
index d68afd4..605cce2 100644
--- a/src/Spool/SpoolList.php
+++ b/src/Spool/SpoolList.php
@@ -19,7 +19,7 @@ class SpoolList implements SpoolListInterface {
   /**
    * The simplenews spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
@@ -60,7 +60,7 @@ class SpoolList implements SpoolListInterface {
    *
    * @param array $spool_rows
    *   List of mail spool rows.
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
    */
   public function __construct(array $spool_rows, SpoolStorageInterface $spool_storage) {
diff --git a/src/Spool/SpoolListInterface.php b/src/Spool/SpoolListInterface.php
index 51fc2a4..61fe2be 100644
--- a/src/Spool/SpoolListInterface.php
+++ b/src/Spool/SpoolListInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Spool;
 
+use Drupal\simplenews\Mail\MailInterface;
 /**
  * A list of spooled mails.
  */
@@ -10,7 +11,7 @@ interface SpoolListInterface extends \Countable {
   /**
    * Returns a Simplenews mail to be sent.
    *
-   * @return \Drupal\simplenews\Mail\MailInterface
+   * @return MailInterface
    *   Next mail to be sent.
    */
   public function nextMail();
diff --git a/src/Spool/SpoolStorage.php b/src/Spool/SpoolStorage.php
index af5d15e..8dc5095 100644
--- a/src/Spool/SpoolStorage.php
+++ b/src/Spool/SpoolStorage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Spool;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\simplenews\recipientHandler\recipientHandlerManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\Condition;
@@ -22,50 +24,50 @@ class SpoolStorage implements SpoolStorageInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The lock.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The recipient handler manager.
    *
-   * @var \Drupal\simplenews\recipientHandler\recipientHandlerManager
+   * @var recipientHandlerManager
    */
   protected $recipientHandlerManager;
 
   /**
    * Creates a SpoolStorage object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\simplenews\recipientHandler\RecipientHandlerManager $recipient_handler_manager
+   * @param RecipientHandlerManager $recipient_handler_manager
    *   The recipient handler manager.
    */
   public function __construct(Connection $connection, LockBackendInterface $lock, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, RecipientHandlerManager $recipient_handler_manager) {
@@ -154,7 +156,7 @@ class SpoolStorage implements SpoolStorageInterface {
       ->condition('msid', (array) $msids, 'IN')
       ->fields([
         'status' => $status,
-        'timestamp' => REQUEST_TIME,
+        'timestamp' => \Drupal::time()->getRequestTime(),
       ])
       ->execute();
   }
@@ -206,7 +208,7 @@ class SpoolStorage implements SpoolStorageInterface {
    */
   public function clear() {
 
-    $expiration_time = REQUEST_TIME - $this->config->get('mail.spool_expire') * 86400;
+    $expiration_time = \Drupal::time()->getRequestTime() - $this->config->get('mail.spool_expire') * 86400;
     return $this->connection->delete('simplenews_mail_spool')
       ->condition('status', [SpoolStorageInterface::STATUS_DONE, SpoolStorageInterface::STATUS_SKIPPED], 'IN')
       ->condition('timestamp', $expiration_time, '<=')
@@ -289,7 +291,7 @@ class SpoolStorage implements SpoolStorageInterface {
       $spool['status'] = SpoolStorageInterface::STATUS_PENDING;
     }
     if (!isset($spool['timestamp'])) {
-      $spool['timestamp'] = REQUEST_TIME;
+      $spool['timestamp'] = \Drupal::time()->getRequestTime();
     }
     if (isset($spool['data'])) {
       $spool['data'] = serialize($spool['data']);
@@ -370,7 +372,7 @@ class SpoolStorage implements SpoolStorageInterface {
    */
   protected function getExpirationTime() {
     $timeout = $this->config->get('mail.spool_progress_expiration');
-    $expiration_time = REQUEST_TIME - $timeout;
+    $expiration_time = \Drupal::time()->getRequestTime() - $timeout;
     return $expiration_time;
   }
 
diff --git a/src/Spool/SpoolStorageInterface.php b/src/Spool/SpoolStorageInterface.php
index 6e48947..5c71b93 100644
--- a/src/Spool/SpoolStorageInterface.php
+++ b/src/Spool/SpoolStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Spool;
 
+use Drupal\simplenews\RecipientHandler\RecipientHandlerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -59,7 +60,7 @@ interface SpoolStorageInterface {
    *   set, status defaults to SpoolStorageInterface::STATUS_PENDING,
    *   SpoolStorageInterface::STATUS_IN_PROGRESS.
    *
-   * @return \Drupal\simplenews\Spool\SpoolListInterface
+   * @return SpoolListInterface
    *   A mail spool list.
    */
   public function getMails($limit = self::UNLIMITED, array $conditions = []);
@@ -111,7 +112,7 @@ interface SpoolStorageInterface {
   /**
    * Adds a newsletter issue to the mail spool.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be sent.
    */
   public function addIssue(ContentEntityInterface $issue);
@@ -119,7 +120,7 @@ interface SpoolStorageInterface {
   /**
    * Deletes a newsletter issue from the mail spool.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be deleted.
    */
   public function deleteIssue(ContentEntityInterface $issue);
@@ -142,7 +143,7 @@ interface SpoolStorageInterface {
   /**
    * Builds a recipient handler class for a given newsletter issue.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be sent.
    * @param array $edited_values
    *   (optional) Modified values, if called from an edit form.
@@ -150,7 +151,7 @@ interface SpoolStorageInterface {
    *   (optional, defaults to FALSE) If set, also return the set of valid
    *   options for choice of recipient handler.
    *
-   * @return \Drupal\simplenews\RecipientHandler\RecipientHandlerInterface|array
+   * @return RecipientHandlerInterface|array
    *   A constructed recipient handler plugin.  If $return_options is set then
    *   the return is an array of two items: the recipient handler plugin and
    *   the result of RecipientHandlerManager::getOptions().
@@ -163,7 +164,7 @@ interface SpoolStorageInterface {
   /**
    * Returns a summary of key newsletter issue parameters.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue entity.
    *
    * @return array
@@ -178,7 +179,7 @@ interface SpoolStorageInterface {
   /**
    * Returns a count of the recipients for a newsletter issue.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue entity.
    *
    * @return int
diff --git a/src/SubscriberInterface.php b/src/SubscriberInterface.php
index c2b7fbd..f07449a 100644
--- a/src/SubscriberInterface.php
+++ b/src/SubscriberInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews;
 
+use Drupal\user\UserInterface;
+use Drupal\simplenews\Plugin\Field\FieldType\SubscriptionItem;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 
@@ -63,7 +65,7 @@ interface SubscriberInterface extends ContentEntityInterface {
   /**
    * Returns corresponding User object, if any.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The corresponding User object, or NULL if the subscriber is not synced
    *   with a user.
    */
@@ -88,7 +90,7 @@ interface SubscriberInterface extends ContentEntityInterface {
   /**
    * Fill values from a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to fill from.
    *
    * @return $this
@@ -98,7 +100,7 @@ interface SubscriberInterface extends ContentEntityInterface {
   /**
    * Copy values to a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to copy to.
    */
   public function copyToAccount(AccountInterface $account);
@@ -147,7 +149,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param string $newsletter_id
    *   The ID of a newsletter.
    *
-   * @return \Drupal\simplenews\Plugin\Field\FieldType\SubscriptionItem
+   * @return SubscriptionItem
    *   The subscription item if the subscriber is subscribed, otherwise FALSE.
    */
   public function getSubscription($newsletter_id);
@@ -172,7 +174,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());
 
   /**
    * Delete a subscription to a certain newsletter of the subscriber.
@@ -184,7 +186,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());
 
   /**
    * Load a simplenews newsletter subscriber object by mail.
diff --git a/src/Subscription/SubscriptionManager.php b/src/Subscription/SubscriptionManager.php
index 09595b3..dcc9ee4 100644
--- a/src/Subscription/SubscriptionManager.php
+++ b/src/Subscription/SubscriptionManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Subscription;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DestructableInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -43,66 +45,66 @@ class SubscriptionManager implements SubscriptionManagerInterface, DestructableI
   /**
    * The mailer.
    *
-   * @var \Drupal\simplenews\Mail\MailerInterface
+   * @var MailerInterface
    */
   protected $mailer;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The token.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The logger interface.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The subscriber storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $subscriberStorage;
 
   /**
    * Constructs a SubscriptionManager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\simplenews\Mail\MailerInterface $mailer
+   * @param MailerInterface $mailer
    *   The simplenews manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The simplenews logger channel.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(LanguageManagerInterface $language_manager, ConfigFactoryInterface $config_factory, MailerInterface $mailer, Token $token, LoggerInterface $logger, AccountInterface $current_user) {
@@ -258,9 +260,9 @@ class SubscriptionManager implements SubscriptionManagerInterface, DestructableI
    *
    * @param string $action
    *   The confirmation type, either subscribe or unsubscribe.
-   * @param \Drupal\simplenews\SubscriberInterface $subscriber
+   * @param SubscriberInterface $subscriber
    *   The subscriber object.
-   * @param \Drupal\simplenews\NewsletterInterface $newsletter
+   * @param NewsletterInterface $newsletter
    *   The newsletter object.
    */
   protected function addConfirmation($action, SubscriberInterface $subscriber, NewsletterInterface $newsletter) {
diff --git a/tests/modules/simplenews_test/simplenews_test.module b/tests/modules/simplenews_test/simplenews_test.module
index 241995f..4d7639c 100644
--- a/tests/modules/simplenews_test/simplenews_test.module
+++ b/tests/modules/simplenews_test/simplenews_test.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simplenews\Mail\MailInterface;
 /**
  * @file
  * Hook implementations for the Simplenews Test module.
@@ -13,7 +14,7 @@ use Drupal\simplenews\SkipMailException;
  */
 function simplenews_test_mail_alter(&$message) {
   if ($message['id'] == 'simplenews_node') {
-    /** @var \Drupal\simplenews\Mail\MailInterface $mail */
+    /** @var MailInterface $mail */
     $mail = $message['params']['simplenews_mail'];
     $issue = $mail->getIssue();
     if (!empty($issue->body->value)) {
diff --git a/tests/src/Functional/SimplenewsAdministrationTest.php b/tests/src/Functional/SimplenewsAdministrationTest.php
index 6ce9dd0..2cb418b 100644
--- a/tests/src/Functional/SimplenewsAdministrationTest.php
+++ b/tests/src/Functional/SimplenewsAdministrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simplenews\Functional;
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\block\Entity\Block;
 use Drupal\Component\Utility\Html;
 use Drupal\node\Entity\Node;
@@ -26,7 +27,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('help_block');
   }
@@ -91,7 +92,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     $this->drupalGet('admin/config/services/simplenews/manage/default');
     $this->submitForm(['subject' => 'Edited subject'], 'Save');
     $this->drupalGet('admin/config/services/simplenews/manage/default');
-    $this->assertFieldByName('subject', 'Edited subject');
+    $this->assertSession()->fieldValueEquals('subject', 'Edited subject');
 
     $newsletters = simplenews_newsletter_get_all();
 
@@ -110,13 +111,15 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
 
       list($new_account_setting, $access_setting) = explode('-', $newsletter->name);
       if ($newsletter->new_account == 'on' && $newsletter->access != 'hidden') {
-        $this->assertFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       elseif ($newsletter->new_account == 'off' && $newsletter->access != 'hidden') {
-        $this->assertNoFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       else {
-        $this->assertNoField('subscriptions[' . $newsletter->id() . ']', t('Hidden or silent newsletter is not shown.'));
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // Change assertion to buttonExists() if checking for a button.
+        $this->assertSession()->fieldNotExists('subscriptions[' . $newsletter->id() . ']', t('Hidden or silent newsletter is not shown.'));
       }
     }
 
@@ -163,15 +166,17 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
       }
       list($new_account_setting, $access_setting) = explode('-', $newsletter->name);
       if ($newsletter->access == 'hidden') {
-        $this->assertNoField('subscriptions[' . $newsletter->id() . ']', t('Hidden newsletter is not shown.'));
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // Change assertion to buttonExists() if checking for a button.
+        $this->assertSession()->fieldNotExists('subscriptions[' . $newsletter->id() . ']', t('Hidden newsletter is not shown.'));
       }
       elseif ($newsletter->new_account == 'on' || $newsletter->name == 'off-default' || $newsletter->new_account == 'silent') {
         // All on, silent and the explicitly selected newsletter should be
         // checked.
-        $this->assertFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxChecked($this->getNewsletterFieldId($newsletter->id()));
       }
       else {
-        $this->assertNoFieldChecked($this->getNewsletterFieldId($newsletter->id()));
+        $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($newsletter->id()));
       }
     }
 
@@ -181,7 +186,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     ];
     $this->submitForm($edit, 'Save');
     $this->drupalGet('user/' . $user->id() . '/simplenews');
-    $this->assertNoFieldChecked($this->getNewsletterFieldId($off_default_newsletter_id));
+    $this->assertSession()->checkboxNotChecked($this->getNewsletterFieldId($off_default_newsletter_id));
 
     // Get a newsletter which has the block enabled.
     // @codingStandardsIgnoreStart
@@ -199,8 +204,12 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     $this->drupalLogin($admin_user);
     $subscriber = Subscriber::loadByMail($user->getEmail());
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertNoField($this->getNewsletterFieldId('on_hidden'));
-    $this->assertNoField('mail');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists($this->getNewsletterFieldId('on_hidden'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists('mail');
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
     $this->submitForm([], 'Save');
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
@@ -353,11 +362,11 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
       $mail_addresses[] = $email;
       if ($email == $user_mail) {
         // The user to which the mail was assigned should show the user name.
-        $this->assertEqual(trim($rows[$i]->find('xpath', '/td[2]/a')->getText()), $user->getAccountName());
+        $this->assertEquals(trim($rows[$i]->find('xpath', '/td[2]/a')->getText()), $user->getAccountName());
       }
       else {
         // Blank value for user name.
-        $this->assertEqual($rows[$i]->find('xpath', '/td[2]/a'), NULL);
+        $this->assertEquals($rows[$i]->find('xpath', '/td[2]/a'), NULL);
       }
     }
     $this->assertCount(15, $mail_addresses);
@@ -404,10 +413,10 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
 
     $rows = $this->xpath('//tbody/tr');
     $this->assertCount(1, $rows);
-    $this->assertEqual(current($subscribers['all']), trim($rows[0]->find('xpath', '/td[1]')->getText()));
+    $this->assertEquals(current($subscribers['all']), trim($rows[0]->find('xpath', '/td[1]')->getText()));
     // Mysteriously, the username is sometimes a span and sometimes a link.
     // Accept both.
-    $this->assertEqual($user->label(), trim($rows[0]->find('xpath', '/td[2]/span|/td[2]/a')->getText()));
+    $this->assertEquals($user->label(), trim($rows[0]->find('xpath', '/td[2]/span|/td[2]/a')->getText()));
 
     // Reset the filter.
     $this->drupalGet('admin/people/simplenews');
@@ -437,7 +446,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Check exporting.
     $this->clickLink(t('Export'));
     $this->submitForm(['newsletters[' . $first . ']' => TRUE], 'Export');
-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     foreach ($subscribers[$first] as $mail) {
       $this->assertStringContainsString($mail, $exported_mails, t('Mail address exported correctly.'));
@@ -459,14 +468,14 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     ];
     $this->submitForm($edit, 'Export');
 
-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
     $this->assertCount(2, $exported_mails);
     $this->assertContains($all_mail, $exported_mails);
     $this->assertContains($first_mail, $exported_mails);
 
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
     // Make sure there are unconfirmed subscriptions.
@@ -488,7 +497,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     ];
     $this->submitForm($edit, 'Export');
 
-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
     $this->assertContains($unconfirmed[0], $exported_mails);
@@ -503,7 +512,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     ];
     $this->submitForm($edit, 'Export');
 
-    $export_field = $this->xpath($this->constructFieldXpath('name', 'emails'));
+    $export_field = $this->xpath($this->getSession()->getPage()->findField('emails'));
     $exported_mails = $export_field[0]->getText();
     $exported_mails = explode(', ', $exported_mails);
     $this->assertCount(2, $exported_mails);
@@ -530,7 +539,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Verify updated subscriptions count.
     drupal_static_reset('Drupal\simplenews\Plugin\simplenews\RecipientHandler\RecipientHandlerBase::count');
     $after_count = $spool_storage->issueCountRecipients($issue);
-    $this->assertEqual($before_count - 1, $after_count, t('Blocked users are not counted in subscription count.'));
+    $this->assertEquals($before_count - 1, $after_count, t('Blocked users are not counted in subscription count.'));
 
     // Test mass subscribe with previously unsubscribed users.
     for ($i = 0; $i < 3; $i++) {
@@ -627,11 +636,11 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     $this->clickLink(t('Edit'), 1);
 
     // Get the subscriber id from the path.
-    $this->assertEqual(1, preg_match('|admin/people/simplenews/edit/(\d+)\?destination|', $this->getUrl(), $matches), 'Subscriber found');
+    $this->assertEquals(1, preg_match('|admin/people/simplenews/edit/(\d+)\?destination|', $this->getUrl(), $matches), 'Subscriber found');
     $subscriber = Subscriber::load($matches[1]);
 
     $this->assertSession()->titleEquals('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
-    $this->assertFieldChecked('edit-status');
+    $this->assertSession()->checkboxChecked('edit-status');
 
     // Disable account.
     $edit = [
@@ -645,7 +654,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Re-enable account.
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
     $this->assertSession()->titleEquals('Edit subscriber ' . $subscriber->getMail() . ' | Drupal');
-    $this->assertNoFieldChecked('edit-status');
+    $this->assertSession()->checkboxNotChecked('edit-status');
     $edit = [
       'status' => TRUE,
     ];
@@ -728,13 +737,13 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
         $counter++;
       }
     }
-    $this->assertEqual(1, $counter);
+    $this->assertEquals(1, $counter);
     $this->assertSession()->pageTextContains('The following addresses were added or updated: drupaltest@example.com.');
     $this->assertSession()->pageTextContains("The addresses were subscribed to the following newsletters: $newsletter_name.");
 
     // Check exact subscription statuses.
     $subscriber = Subscriber::loadByMail('drupaltest@example.com');
-    $this->assertEqual($subscriber->getSubscription($newsletter_name)->get('status')->getValue(), SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
+    $this->assertEquals($subscriber->getSubscription($newsletter_name)->get('status')->getValue(), SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
     // The second newsletter was not subscribed, so there should be no
     // subscription record at all.
     $this->assertFalse($subscriber->getSubscription($second_newsletter_name));
@@ -822,7 +831,9 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     $this->assertSession()->pageTextContains('Send newsletter issue to 3 subscribers.');
 
     // Send mails.
-    $this->assertField('test_address', $admin_user->getEmail());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('test_address', $admin_user->getEmail());
     // Test newsletter to empty address and check the error message.
     $this->submitForm(['test_address' => ''], 'Send test newsletter issue');
     $this->assertSession()->pageTextContains('Missing test email address.');
@@ -833,9 +844,9 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     $this->assertSession()->pageTextContains('Test newsletter sent to user ' . $admin_user->getAccountName() . ' <' . $admin_user->getEmail() . '>');
 
     $mails = $this->getMails();
-    $this->assertEqual('simplenews_test', $mails[0]['id']);
-    $this->assertEqual($admin_user->getEmail(), $mails[0]['to']);
-    $this->assertEqual(t('[Default newsletter] @title', ['@title' => $node->getTitle()]), $mails[0]['subject']);
+    $this->assertEquals('simplenews_test', $mails[0]['id']);
+    $this->assertEquals($admin_user->getEmail(), $mails[0]['to']);
+    $this->assertEquals(t('[Default newsletter] @title', ['@title' => $node->getTitle()]), $mails[0]['subject']);
     $this->assertStringContainsString('User ID: ' . $admin_user->id(), $mails[0]['body']);
 
     // Update the content type, remove the simpletest checkbox.
@@ -869,7 +880,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Check the Add Newsletter Issue button.
     $this->drupalGet('admin/content/simplenews');
     $this->clickLink(t('Add Newsletter Issue'));
-    $this->assertUrl('node/add/simplenews_issue');
+    $this->assertSession()->addressEquals('node/add/simplenews_issue');
     // Check if the help text is displayed.
     $this->assertSession()->pageTextContains('Add this newsletter issue to a newsletter by selecting a newsletter from the select list.');
   }
@@ -880,7 +891,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
   public function testSubscriberStatusFilter() {
     // Make sure subscription overview can't be accessed without permission.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $admin_user = $this->drupalCreateUser([
       'administer newsletters',
@@ -915,16 +926,16 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED]]);
     $row = $this->xpath('//tbody/tr');
     $this->assertCount(1, $row);
-    $this->assertEqual($subscribers[0]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertEquals($subscribers[0]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED]]);
     $row = $this->xpath('//tbody/tr');
     $this->assertCount(1, $row);
-    $this->assertEqual($subscribers[1]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertEquals($subscribers[1]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
     $this->assertSession()->pageTextContains($newsletters['default']->name . ' (' . 'Unconfirmed' . ')');
     $this->drupalGet('admin/people/simplenews', ['query' => ['subscriptions_status' => SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED]]);
     $row = $this->xpath('//tbody/tr');
     $this->assertCount(1, $row);
-    $this->assertEqual($subscribers[2]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
+    $this->assertEquals($subscribers[2]->getMail(), trim($row[0]->find('xpath', '/td')->getText()));
     $this->assertSession()->pageTextContains($newsletters['default']->name . ' (' . 'Unsubscribed' . ')');
   }
 
@@ -934,7 +945,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
   public function testNewsletterIssuesOverview() {
     // Verify newsletter overview isn't available without permission.
     $this->drupalGet('admin/content/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $admin_user = $this->drupalCreateUser([
       'administer newsletters',
@@ -990,13 +1001,13 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
 
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual($name, trim($row->find('xpath', '/td[3]/a')->getText()));
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
-        $this->assertEqual('✖', trim($row->find('xpath', '/td[4]')->getText()));
-        $this->assertEqual('0/3', trim($row->find('xpath', '/td[6]/span')->getText()));
+        $this->assertEquals($name, trim($row->find('xpath', '/td[3]/a')->getText()));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('✖', trim($row->find('xpath', '/td[4]')->getText()));
+        $this->assertEquals('0/3', trim($row->find('xpath', '/td[6]/span')->getText()));
       }
       else {
-        $this->assertEqual('✔', trim($row->find('xpath', '/td[4]')->getText()));
+        $this->assertEquals('✔', trim($row->find('xpath', '/td[4]')->getText()));
       }
     }
     // Send newsletter issues using bulk operations.
@@ -1013,11 +1024,11 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Assert the status message of each newsletter.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
-        $this->assertEqual(file_url_transform_relative(file_create_url(drupal_get_path('module', 'simplenews') . '/images/sn-cron.png')), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
+        $this->assertEquals('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
+        $this->assertEquals(\Drupal::service('file_url_generator')->generateString(\Drupal::service('extension.list.module')->getPath('simplenews') . '/images/sn-cron.png'), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
       }
     }
     // Stop sending the pending newsletters.
@@ -1033,10 +1044,10 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Check the send status of each issue.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
     }
 
@@ -1054,11 +1065,11 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Check the send status of each issue.
     foreach ($rows as $row) {
       if ($row->find('xpath', '/td[2]/a')->getText() == 'Test_issue_2') {
-        $this->assertEqual('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
+        $this->assertEquals('Newsletter issue will be sent to 3 subscribers on publish.', trim($row->find('xpath', '/td[6]/span')->getAttribute('title')));
       }
       else {
-        $this->assertEqual('Newsletter issue sent to 3 subscribers, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
-        $this->assertEqual(file_url_transform_relative(file_create_url(drupal_get_path('module', 'simplenews') . '/images/sn-sent.png')), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
+        $this->assertEquals('Newsletter issue sent to 3 subscribers, 0 errors.', trim($row->find('xpath', '/td[6]/img')->getAttribute('title')));
+        $this->assertEquals(\Drupal::service('file_url_generator')->generateString(\Drupal::service('extension.list.module')->getPath('simplenews') . '/images/sn-sent.png'), trim($row->find('xpath', '/td[6]/img')->getAttribute('src')));
       }
     }
   }
@@ -1092,7 +1103,7 @@ class SimplenewsAdministrationTest extends SimplenewsTestBase {
     // Check anonymous user can't access admin page.
     $this->drupalLogout();
     $this->drupalGet('admin/people/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     // Turn off the access permission on the view.
     $view = View::load('simplenews_subscribers');
diff --git a/tests/src/Functional/SimplenewsFieldUiTest.php b/tests/src/Functional/SimplenewsFieldUiTest.php
index 4f18da5..38ace74 100644
--- a/tests/src/Functional/SimplenewsFieldUiTest.php
+++ b/tests/src/Functional/SimplenewsFieldUiTest.php
@@ -19,7 +19,7 @@ class SimplenewsFieldUiTest extends SimplenewsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('help_block');
   }
diff --git a/tests/src/Functional/SimplenewsI18nTest.php b/tests/src/Functional/SimplenewsI18nTest.php
index 53f5867..29f2c34 100644
--- a/tests/src/Functional/SimplenewsI18nTest.php
+++ b/tests/src/Functional/SimplenewsI18nTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simplenews\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\language\Entity\ContentLanguageSettings;
@@ -27,7 +29,7 @@ class SimplenewsI18nTest extends SimplenewsTestBase {
   /**
    * Administrative user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -48,7 +50,7 @@ class SimplenewsI18nTest extends SimplenewsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'bypass node access', 'administer nodes', 'administer languages', 'administer content types', 'access administration pages', 'administer filters', 'translate interface', 'subscribe to newsletters', 'administer site configuration', 'translate any entity', 'administer content translation', 'administer simplenews subscriptions', 'send newsletter', 'create content translations',
@@ -110,7 +112,7 @@ class SimplenewsI18nTest extends SimplenewsTestBase {
     $spanish_mail2 = $this->randomEmail();
     $newsletter_id = $this->getRandomNewsletter();
 
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
     $subscription_manager->subscribe($english_mail, $newsletter_id, FALSE, 'english', 'en');
@@ -133,7 +135,7 @@ class SimplenewsI18nTest extends SimplenewsTestBase {
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($english, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     $this->clickLink(t('Translate'));
@@ -159,15 +161,15 @@ class SimplenewsI18nTest extends SimplenewsTestBase {
     foreach ($this->getMails() as $mail) {
 
       if ($mail['to'] == $english_mail) {
-        $this->assertEqual('en', $mail['langcode']);
-        $this->assertEqual('[' . $newsletter->label() . '] ' . $node->getTitle(), $mail['subject']);
+        $this->assertEquals('en', $mail['langcode']);
+        $this->assertEquals('[' . $newsletter->label() . '] ' . $node->getTitle(), $mail['subject']);
         $node_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
         $title = $node->getTitle();
       }
       elseif ($mail['to'] == $spanish_mail || $mail['to'] == $spanish_mail2) {
-        $this->assertEqual('es', $mail['langcode']);
+        $this->assertEquals('es', $mail['langcode']);
         // @todo: Verify newsletter translation once supported again.
-        $this->assertEqual('[' . $newsletter->name . '] ' . $translation->label(), $mail['subject']);
+        $this->assertEquals('[' . $newsletter->name . '] ' . $translation->label(), $mail['subject']);
         $node_url = $translation->toUrl('canonical', ['absolute' => TRUE, 'language' => $translation->language()])->toString();
         $title = $translation->getTitle();
       }
@@ -186,7 +188,7 @@ class SimplenewsI18nTest extends SimplenewsTestBase {
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
     $translation = $node->getTranslation($this->secondaryLanguage);
-    $this->assertEqual(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
+    $this->assertEquals(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
     $this->drupalGet('/admin/content/simplenews');
     $this->assertSession()->responseContains('<span title="Newsletter issue sent to 3 subscribers, 0 errors.">3/3</span>');
 
diff --git a/tests/src/Functional/SimplenewsPersonalizationFormsTest.php b/tests/src/Functional/SimplenewsPersonalizationFormsTest.php
index 0b7661b..3c566fd 100644
--- a/tests/src/Functional/SimplenewsPersonalizationFormsTest.php
+++ b/tests/src/Functional/SimplenewsPersonalizationFormsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simplenews\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\user\Entity\Role;
 use Drupal\user\Entity\User;
@@ -15,14 +16,14 @@ class SimplenewsPersonalizationFormsTest extends SimplenewsTestBase {
   /**
    * A user with administrative permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->addField('string', 'field_shared', 'user');
     $this->addField('string', 'field_shared', 'simplenews_subscriber');
@@ -59,7 +60,7 @@ class SimplenewsPersonalizationFormsTest extends SimplenewsTestBase {
 
     // Assert subscription remains unconfirmed.
     $subscriber = $this->getLatestSubscriber();
-    $this->assertEqual($subscriber->subscriptions->get(0)->status, SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED);
+    $this->assertEquals($subscriber->subscriptions->get(0)->status, SIMPLENEWS_SUBSCRIPTION_STATUS_UNCONFIRMED);
   }
 
   /**
diff --git a/tests/src/Functional/SimplenewsRecipientHandlerTest.php b/tests/src/Functional/SimplenewsRecipientHandlerTest.php
index a3d8d4d..d521bb9 100644
--- a/tests/src/Functional/SimplenewsRecipientHandlerTest.php
+++ b/tests/src/Functional/SimplenewsRecipientHandlerTest.php
@@ -17,7 +17,7 @@ class SimplenewsRecipientHandlerTest extends SimplenewsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // We install the demo module to get the recipient handlers. It creates
@@ -140,7 +140,7 @@ class SimplenewsRecipientHandlerTest extends SimplenewsTestBase {
   protected function checkRecipients(array $expected) {
     simplenews_cron();
     $mails = $this->getMails();
-    $this->assertEqual(count($expected), count($mails), t('All mails were sent.'));
+    $this->assertEquals(count($expected), count($mails), t('All mails were sent.'));
     foreach ($mails as $mail) {
       $this->assertArrayHasKey($mail['to'], $expected, t('Found valid recipient @recip', ['@recip' => $mail['to']]));
       unset($expected[$mail['to']]);
diff --git a/tests/src/Functional/SimplenewsSendTest.php b/tests/src/Functional/SimplenewsSendTest.php
index ced7169..82c1766 100644
--- a/tests/src/Functional/SimplenewsSendTest.php
+++ b/tests/src/Functional/SimplenewsSendTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simplenews\Functional;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\node\Entity\Node;
 use Drupal\user\Entity\User;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -18,7 +20,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin_user = $this->drupalCreateUser([
@@ -65,7 +67,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $node->getTitle(), t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $node->getTitle(), t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ -86,7 +88,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     \Drupal::service('simplenews.spool_storage')->addIssue($node);
 
     // Make sure that they have been added.
-    $this->assertEqual(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
+    $this->assertEquals(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
 
     // Mark them as 'in progress', fake a currently running send process.
     $this->assertCount(2, \Drupal::service('simplenews.spool_storage')->getMails(2));
@@ -97,7 +99,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // The count should still include all the mails because they are still
     // in the spool.  This is needed for correct operation of code such as
     // Mailer::updateSendStatus().
-    $this->assertEqual(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
+    $this->assertEquals(\Drupal::service('simplenews.spool_storage')->countMails(), 5);
   }
 
   /**
@@ -141,7 +143,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ -172,12 +174,12 @@ class SimplenewsSendTest extends SimplenewsTestBase {
         'status[value]' => $i != 2,
       ];
       $this->submitForm($edit, 'Save');
-      $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+      $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
       $nodes[] = Node::load($matches[1]);
 
       // Verify state.
       $node = current($nodes);
-      $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+      $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
     }
   }
 
@@ -198,7 +200,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
       'simplenews_issue[target_id]' => 'default',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     $this->clickLink(t('Newsletter'));
@@ -208,7 +210,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
 
     // Send now.
     $this->submitForm([], 'Send now');
@@ -216,14 +218,14 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
 
     // Verify that no mails have been sent yet.
     $mails = $this->getMails();
     $this->assertCount(0, $mails, 'No mails were sent yet.');
 
     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('5 mails have been added to the mail spool'));
+    $this->assertEquals(5, $spooled, t('5 mails have been added to the mail spool'));
 
     // Run cron for the first time.
     simplenews_cron();
@@ -231,11 +233,11 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
-    $this->assertEqual(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(3, $node->simplenews_issue->sent_count, 'subscriber count is correct');
 
     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(2, $spooled, t('2 mails remaining in spool.'));
+    $this->assertEquals(2, $spooled, t('2 mails remaining in spool.'));
 
     // Run cron for the second time.
     simplenews_cron();
@@ -243,21 +245,21 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
 
     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(0, $spooled, t('No mails remaining in spool.'));
+    $this->assertEquals(0, $spooled, t('No mails remaining in spool.'));
 
     // Verify mails.
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
     $this->assertCount(0, $this->subscribers, 'all subscribers have been received a mail');
-    $this->assertEqual(5, $node->simplenews_issue->sent_count);
+    $this->assertEquals(5, $node->simplenews_issue->sent_count);
   }
 
   /**
@@ -281,7 +283,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Then save.
     $this->submitForm([], 'Save');
 
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     $this->clickLink(t('Newsletter'));
@@ -291,7 +293,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
 
     // Send now.
     $this->submitForm([], 'Send now');
@@ -299,14 +301,14 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PENDING, $node->simplenews_issue->status, t('Newsletter sending pending.'));
 
     // Verify that no mails have been sent yet.
     $mails = $this->getMails();
     $this->assertCount(0, $mails, t('No mails were sent yet.'));
 
     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(5, $spooled, t('5 mails have been added to the mail spool'));
+    $this->assertEquals(5, $spooled, t('5 mails have been added to the mail spool'));
 
     // Check warning message on node edit form.
     $this->clickLink(t('Edit'));
@@ -318,16 +320,16 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished.'));
 
     $spooled = \Drupal::database()->query('SELECT COUNT(*) FROM {simplenews_mail_spool} WHERE entity_id = :nid AND entity_type = :type', [':nid' => $node->id(), ':type' => 'node'])->fetchField();
-    $this->assertEqual(0, $spooled, t('No mails remaining in spool.'));
+    $this->assertEquals(0, $spooled, t('No mails remaining in spool.'));
 
     // Verify mails.
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ -353,7 +355,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
       'status[value]' => FALSE,
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     $this->clickLink(t('Newsletter'));
@@ -363,7 +365,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache();
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_NOT, $node->simplenews_issue->status, t('Newsletter not sent yet.'));
 
     // Send now.
     $this->submitForm([], 'Send on publish');
@@ -371,7 +373,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_PUBLISH, $node->simplenews_issue->status, t('Newsletter set up for sending on publish.'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_PUBLISH, $node->simplenews_issue->status, t('Newsletter set up for sending on publish.'));
 
     $this->clickLink(t('Edit'));
     $this->submitForm(['status[value]' => TRUE], 'Save');
@@ -383,13 +385,13 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Verify state.
     \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
     $node = Node::load($node->id());
-    $this->assertEqual(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
+    $this->assertEquals(SIMPLENEWS_STATUS_SEND_READY, $node->simplenews_issue->status, t('Newsletter sending finished'));
     // @todo test sent subscriber count.
     // Verify mails.
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ -399,8 +401,8 @@ class SimplenewsSendTest extends SimplenewsTestBase {
   /**
    * Test newsletter update.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function testUpdateNewsletter() {
     // Create a second newsletter.
@@ -554,7 +556,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     $mails = $this->getMails();
     $this->assertCount(5, $mails, 'All mails were sent.');
     foreach ($mails as $mail) {
-      $this->assertEqual($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
+      $this->assertEquals($mail['subject'], '[Default newsletter] ' . $edit['title[0][value]'], t('Mail has correct subject'));
       $this->assertArrayHasKey($mail['to'], $this->subscribers, t('Found valid recipient'));
       unset($this->subscribers[$mail['to']]);
     }
@@ -563,7 +565,7 @@ class SimplenewsSendTest extends SimplenewsTestBase {
     // Update timestamp to simulate pending lock expiration.
     \Drupal::database()->update('simplenews_mail_spool')
       ->fields([
-        'timestamp' => REQUEST_TIME - $this->config('simplenews.settings')->get('mail.spool_progress_expiration') - 1,
+        'timestamp' => \Drupal::time()->getRequestTime() - $this->config('simplenews.settings')->get('mail.spool_progress_expiration') - 1,
       ])
       ->execute();
 
diff --git a/tests/src/Functional/SimplenewsSourceTest.php b/tests/src/Functional/SimplenewsSourceTest.php
index 668314d..6f32183 100644
--- a/tests/src/Functional/SimplenewsSourceTest.php
+++ b/tests/src/Functional/SimplenewsSourceTest.php
@@ -20,7 +20,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create the filtered_html text format.
@@ -81,19 +81,19 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     $mail = $mails[0];
 
     // Assert resulting mail.
-    $this->assertEqual('simplenews_node', $mail['id']);
-    $this->assertEqual('simplenews', $mail['module']);
-    $this->assertEqual('node', $mail['key']);
-    $this->assertEqual($plain_mail->getRecipient(), $mail['to']);
-    $this->assertEqual($plain_mail->getFromAddress(), $mail['from']);
-    $this->assertEqual($plain_mail->getFromFormatted(), $mail['reply-to']);
-    $this->assertEqual($plain_mail->getLanguage(), $mail['langcode']);
+    $this->assertEquals('simplenews_node', $mail['id']);
+    $this->assertEquals('simplenews', $mail['module']);
+    $this->assertEquals('node', $mail['key']);
+    $this->assertEquals($plain_mail->getRecipient(), $mail['to']);
+    $this->assertEquals($plain_mail->getFromAddress(), $mail['from']);
+    $this->assertEquals($plain_mail->getFromFormatted(), $mail['reply-to']);
+    $this->assertEquals($plain_mail->getLanguage(), $mail['langcode']);
     $this->assertTrue($mail['params']['plain']);
 
     $this->assertArrayNotHasKey('plaintext', $mail['params']);
     $this->assertArrayNotHasKey('attachments', $mail['params']);
 
-    $this->assertEqual($plain_mail->getSubject(), $mail['subject']);
+    $this->assertEquals($plain_mail->getSubject(), $mail['subject']);
     $this->assertStringContainsString('the plain body', $mail['body']);
 
     // Now send an HTML message.
@@ -106,21 +106,21 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     $mail = $mails[1];
 
     // Assert resulting mail.
-    $this->assertEqual('simplenews_node', $mail['id']);
-    $this->assertEqual('simplenews', $mail['module']);
-    $this->assertEqual('node', $mail['key']);
-    $this->assertEqual($plain_mail->getRecipient(), $mail['to']);
-    $this->assertEqual($plain_mail->getFromAddress(), $mail['from']);
-    $this->assertEqual($plain_mail->getFromFormatted(), $mail['reply-to']);
-    $this->assertEqual($plain_mail->getLanguage(), $mail['langcode']);
-    $this->assertEqual(NULL, $mail['params']['plain']);
+    $this->assertEquals('simplenews_node', $mail['id']);
+    $this->assertEquals('simplenews', $mail['module']);
+    $this->assertEquals('node', $mail['key']);
+    $this->assertEquals($plain_mail->getRecipient(), $mail['to']);
+    $this->assertEquals($plain_mail->getFromAddress(), $mail['from']);
+    $this->assertEquals($plain_mail->getFromFormatted(), $mail['reply-to']);
+    $this->assertEquals($plain_mail->getLanguage(), $mail['langcode']);
+    $this->assertEquals(NULL, $mail['params']['plain']);
 
     $this->assertArrayHasKey('plaintext', $mail['params']);
     $this->assertStringContainsString('the plain body', $mail['params']['plaintext']);
     $this->assertArrayHasKey('attachments', $mail['params']);
-    $this->assertEqual('example://test.png', $mail['params']['attachments'][0]['uri']);
+    $this->assertEquals('example://test.png', $mail['params']['attachments'][0]['uri']);
 
-    $this->assertEqual($plain_mail->getSubject(), $mail['subject']);
+    $this->assertEquals($plain_mail->getSubject(), $mail['subject']);
     $this->assertStringContainsString('the body', $mail['body']);
   }
 
@@ -138,7 +138,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     // Add node to spool.
@@ -161,7 +161,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
       $this->assertStringContainsString('*' . $mail['to'] . '*', $mail['body']);
       $this->assertStringNotContainsString('<strong>', $mail['body']);
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));
 
       $this->assertStringContainsString((string) t('Unsubscribe from this newsletter'), $mail['body']);
       // Make sure the mail has the correct unsubscribe hash.
@@ -169,9 +169,6 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
       $this->assertStringContainsString($hash, $mail['body'], 'Correct hash is used');
       $this->assertStringContainsString($hash, $mail['headers']['List-Unsubscribe'], 'Correct hash is used in header');
     }
-
-    // Report time. @todo: Find a way to actually do some assertions here.
-    $this->pass(t('Mails have been sent in @sec seconds with build caching enabled.', ['@sec' => round($after - $before, 3)]));
   }
 
   /**
@@ -214,7 +211,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     // Add node to spool.
@@ -229,45 +226,45 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     foreach (array_slice($this->getMails(), 0, 3) as $mail) {
       // Verify title.
       preg_match('|<h2>(.*)</h2>|', $mail['body'], $matches);
-      $this->assertEqual(Html::decodeEntities($matches[1]), $node->getTitle());
+      $this->assertEquals(Html::decodeEntities($matches[1]), $node->getTitle());
 
       // Verify the format/content type.
-      $this->assertEqual($mail['params']['format'], 'text/html');
-      $this->assertEqual($mail['params']['plain'], NULL);
-      $this->assertEqual($mail['headers']['Content-Type'], 'text/html; charset=UTF-8');
+      $this->assertEquals($mail['params']['format'], 'text/html');
+      $this->assertEquals($mail['params']['plain'], NULL);
+      $this->assertEquals($mail['headers']['Content-Type'], 'text/html; charset=UTF-8');
 
       // Make sure that the same mail was used in the body token as it has been
       // sent to.
       $this->assertStringContainsString('<strong>' . $mail['to'] . '</strong>', $mail['body']);
 
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));
 
       // Check the plaintext version, both params][plaintext (Mime Mail) and
       // plain (Swiftmailer).
       $this->assertStringContainsString($mail['to'], $mail['params']['plaintext']);
       $this->assertStringNotContainsString('<strong>', $mail['params']['plaintext']);
-      $this->assertEqual($mail['params']['plaintext'], $mail['plain']);
+      $this->assertEquals($mail['params']['plaintext'], $mail['plain']);
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['params']['plaintext'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['params']['plaintext'], $matches));
 
       // Check the attachments and files arrays.
       $this->assertTrue(is_array($mail['params']['attachments']));
-      $this->assertEqual($mail['params']['attachments'], $mail['params']['files']);
+      $this->assertEquals($mail['params']['attachments'], $mail['params']['files']);
 
       // Make sure formatted address is properly encoded.
       $from = '"' . addslashes(Unicode::mimeHeaderEncode($edit_newsletter['from_name'])) . '" <' . $edit_newsletter['from_address'] . '>';
-      $this->assertEqual($from, $mail['reply-to']);
+      $this->assertEquals($from, $mail['reply-to']);
       // And make sure it won't get encoded twice.
-      $this->assertEqual($from, Unicode::mimeHeaderEncode($mail['reply-to']));
+      $this->assertEquals($from, Unicode::mimeHeaderEncode($mail['reply-to']));
 
       // @todo: Improve this check, there are currently two spaces, not sure
       // where they are coming from.
       $this->assertStringContainsString('class="newsletter-footer"', $mail['body']);
 
       // Verify receipt headers.
-      $this->assertEqual($mail['headers']['Disposition-Notification-To'], $edit_newsletter['from_address']);
-      $this->assertEqual($mail['headers']['X-Confirm-Reading-To'], $edit_newsletter['from_address']);
+      $this->assertEquals($mail['headers']['Disposition-Notification-To'], $edit_newsletter['from_address']);
+      $this->assertEquals($mail['headers']['X-Confirm-Reading-To'], $edit_newsletter['from_address']);
     }
   }
 
@@ -294,7 +291,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     // Add node to spool.
@@ -337,7 +334,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     // Add node to spool.
@@ -358,11 +355,8 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
       $this->assertStringContainsString('*' . $mail['to'] . '*', $mail['body']);
       $this->assertStringNotContainsString('<strong>', $mail['body']);
       // Make sure the body is only attached once.
-      $this->assertEqual(1, preg_match_all('/Mail token/', $mail['body'], $matches));
+      $this->assertEquals(1, preg_match_all('/Mail token/', $mail['body'], $matches));
     }
-
-    // Report time. @todo: Find a way to actually do some assertions here.
-    $this->pass(t('Mails have been sent in @sec seconds with caching disabled.', ['@sec' => round($after - $before, 3)]));
   }
 
   /**
@@ -378,7 +372,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     // Add node to spool.
@@ -399,7 +393,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     $this->assertCount(0, $this->getMails());
 
     $spool_row = \Drupal::database()->query('SELECT * FROM {simplenews_mail_spool}')->fetchObject();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
   }
 
   /**
@@ -415,7 +409,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     ];
     $this->drupalGet('node/add/simplenews_issue');
     $this->submitForm($edit, 'Save');
-    $this->assertEqual(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
+    $this->assertEquals(1, preg_match('|node/(\d+)$|', $this->getUrl(), $matches), 'Node created');
     $node = Node::load($matches[1]);
 
     // Add node to spool.
@@ -431,7 +425,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
     $this->assertCount(0, $this->getMails());
 
     $spool_row = \Drupal::database()->query('SELECT * FROM {simplenews_mail_spool}')->fetchObject();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row->status);
   }
 
   /**
@@ -453,7 +447,7 @@ class SimplenewsSourceTest extends SimplenewsTestBase {
       ->fields('ms', ['status'])
       ->execute()
       ->fetchAssoc();
-    $this->assertEqual(SpoolStorageInterface::STATUS_SKIPPED, $spool_row['status']);
+    $this->assertEquals(SpoolStorageInterface::STATUS_SKIPPED, $spool_row['status']);
   }
 
 }
diff --git a/tests/src/Functional/SimplenewsSubscribeTest.php b/tests/src/Functional/SimplenewsSubscribeTest.php
index e48a03c..867d262 100644
--- a/tests/src/Functional/SimplenewsSubscribeTest.php
+++ b/tests/src/Functional/SimplenewsSubscribeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simplenews\Functional;
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\user\UserInterface;
@@ -56,8 +57,8 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $this->assertMailText(t('We have received a request to subscribe @user', ['@user' => $mail]));
 
     $mails = $this->getMails();
-    $this->assertEqual($mails[0]['from'], 'simpletest@example.com');
-    $this->assertEqual($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');
+    $this->assertEquals($mails[0]['from'], 'simpletest@example.com');
+    $this->assertEquals($mails[0]['headers']['From'], '"Drupal" <simpletest@example.com>');
 
     $confirm_url = $this->extractConfirmationLink($this->getMail(0));
 
@@ -66,7 +67,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $this->submitForm([], 'Confirm');
     $this->assertSession()->responseContains('Subscription changes confirmed for <em class="placeholder">' . $mail . '</em>.');
 
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
     $subscription_manager->reset();
     $subscriber_storage = \Drupal::entityTypeManager()->getStorage('simplenews_subscriber');
@@ -90,7 +91,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     // Go to the manage page and submit without changes.
     $subscriber = Subscriber::loadByMail($mail);
     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->submitForm([], 'Update');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
     $this->assertCount(1, $this->getMails(), 'No confirmation mails have been sent.');
@@ -104,7 +105,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     foreach ($disable as $newsletter_id) {
       $edit['subscriptions[' . $newsletter_id . ']'] = FALSE;
     }
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->submitForm($edit, t('Update'));
 
     // Verify subscription changes.
@@ -128,7 +129,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
       $this->fail('Exception not thrown.');
     }
     catch (\Exception $e) {
-      $this->assertEqual($e->getMessage(), 'The subscriber does not exist.');
+      $this->assertEquals($e->getMessage(), 'The subscriber does not exist.');
     }
 
     // Test expired confirmation links.
@@ -141,7 +142,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $this->subscribe($enable, $mail);
 
     $subscriber = Subscriber::loadByMail($mail);
-    $expired_timestamp = REQUEST_TIME - 86401;
+    $expired_timestamp = \Drupal::time()->getRequestTime() - 86401;
     $hash = simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $expired_timestamp);
     $url = 'newsletter/confirm/combined/' . $subscriber->id() . '/' . $expired_timestamp . '/' . $hash;
     $this->drupalGet($url);
@@ -170,7 +171,6 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
       return FALSE;
     }
     $confirm_url = $match[0];
-    $this->pass(t('Confirmation URL found: @url', ['@url' => $confirm_url]));
     return $confirm_url;
   }
 
@@ -185,7 +185,6 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
       return FALSE;
     }
     $validate_url = $match[0];
-    $this->pass(t('Validation URL found: @url', ['@url' => $validate_url]));
     return $validate_url;
   }
 
@@ -277,7 +276,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
 
     $this->submitForm([], 'Confirm');
     $this->assertSession()->responseContains('Subscription changes confirmed for <em class="placeholder">' . $mail . '</em>.');
-    $this->assertUrl(new Url('<front>'));
+    $this->assertSession()->addressEquals(new Url('<front>'));
 
     // Test that it is possible to register with a mail address that is already
     // a subscriber.
@@ -304,8 +303,8 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     \Drupal::entityTypeManager()->getStorage('simplenews_subscriber')->resetCache();
     $subscriber = Subscriber::loadByMail($mail);
     $account = user_load_by_mail($mail);
-    $this->assertEqual($subscriber->getUserId(), $account->id());
-    $this->assertEqual($account->getDisplayName(), $edit['name']);
+    $this->assertEquals($subscriber->getUserId(), $account->id());
+    $this->assertEquals($account->getDisplayName(), $edit['name']);
 
     $this->drupalLogout();
 
@@ -336,7 +335,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $this->assertSession()->pageTextContains('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.');
 
     $subscriber = Subscriber::loadByMail($mail);
-    $this->assertNotEqual($subscriber, FALSE, 'New subscriber entity successfully loaded.');
+    $this->assertNotEquals($subscriber, FALSE, 'New subscriber entity successfully loaded.');
     $subscription = $subscriber->getSubscription($newsletter_id);
     $this->assertEquals(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $subscription->status);
 
@@ -344,7 +343,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $subscriber = Subscriber::loadByMail($mail);
 
     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->assertSession()->pageTextContains('Subscriptions for ' . $mail);
 
     $edit = [
@@ -364,15 +363,15 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
 
     // Attempt to fetch the page using a wrong hash but correct format.
     $hash = simplenews_generate_hash($subscriber->getMail() . 'a', 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
-    $this->assertResponse(404);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test expired confirmation links.
     $mail = $this->randomEmail();
     $this->subscribe($newsletter_id, $mail);
 
     $subscriber = Subscriber::loadByMail($mail);
-    $expired_timestamp = REQUEST_TIME - 86401;
+    $expired_timestamp = \Drupal::time()->getRequestTime() - 86401;
     $hash = simplenews_generate_hash($subscriber->getMail(), 'add', $expired_timestamp);
     $url = 'newsletter/confirm/add/' . $subscriber->id() . '/' . $newsletter_id . '/' . $expired_timestamp . '/' . $hash;
     $this->drupalGet($url);
@@ -522,14 +521,14 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $single_block = $this->setupSubscriptionBlock($block_settings);
     $subscriber_user = $this->drupalCreateUser(['subscribe to newsletters']);
     $this->drupalLogin($subscriber_user);
-    $this->assertEqual($this->countSubscribers(), 0);
+    $this->assertEquals($this->countSubscribers(), 0);
 
     // 1. Subscribe authenticated via block
     // Subscribe + submit
     // Assert confirmation message.
     $this->submitForm([], 'Subscribe');
     $this->assertSession()->pageTextContains('You have been subscribed.');
-    $this->assertEqual($this->countSubscribers(), 1);
+    $this->assertEquals($this->countSubscribers(), 1);
 
     // Disable the newsletter block.
     $single_block->delete();
@@ -546,7 +545,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $this->assertSession()->addressEquals($url);
     $this->submitForm($edit, 'Save');
     $this->assertSession()->responseContains('Your newsletter subscriptions have been updated.');
-    $this->assertEqual($this->countSubscribers(), 1);
+    $this->assertEquals($this->countSubscribers(), 1);
 
     // 4. Unsubscribe authenticated via account page
     // Unsubscribe + submit
@@ -574,7 +573,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $this->submitForm($edit, 'Save');
     $this->assertSession()->responseContains('Your newsletter subscriptions have been updated.');
     $count = 1;
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);
 
     // Try to submit multi-signup form without selecting a newsletter.
     $subscriber_user2 = $this->drupalCreateUser(['subscribe to newsletters']);
@@ -582,21 +581,23 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
 
     // Check that the user has only access to their own subscriptions page.
     $this->drupalGet('user/' . $subscriber_user->id() . '/simplenews');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
-    $this->assertNoField('mail[0][value]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldNotExists('mail[0][value]');
     $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
 
     // Nothing should have happened to subscriptions but this does create a
     // subscriber.
     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);
     $count++;
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);
 
     // Now fill out the form and try again.
     $edit = [
@@ -604,10 +605,10 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     ];
     $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
-    $this->assertEqual($this->countSubscribers(), $count);
+    $this->assertEquals($this->countSubscribers(), $count);
 
     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxChecked('edit-subscriptions-' . $newsletter_id);
 
     // Unsubscribe.
     $edit = [
@@ -617,7 +618,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
 
     $this->drupalGet('user/' . $subscriber_user2->id() . '/simplenews');
-    $this->assertNoFieldChecked('edit-subscriptions-' . $newsletter_id);
+    $this->assertSession()->checkboxNotChecked('edit-subscriptions-' . $newsletter_id);
   }
 
   /**
@@ -700,7 +701,7 @@ class SimplenewsSubscribeTest extends SimplenewsTestBase {
 
     // User subscriber can use a hash token.
     $hash = simplenews_generate_hash($subscriber->getMail(), 'manage');
-    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . REQUEST_TIME . '/' . $hash);
+    $this->drupalGet('newsletter/subscriptions/' . $subscriber->id() . '/' . \Drupal::time()->getRequestTime() . '/' . $hash);
     $this->assertSession()->pageTextContains("Subscriptions for $mail");
     $this->submitForm([], 'Update');
     $this->assertSession()->pageTextContains('Your newsletter subscriptions have been updated.');
diff --git a/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php b/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php
index 04c915c..04625d0 100644
--- a/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php
+++ b/tests/src/Functional/SimplenewsSynchronizeFieldsFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simplenews\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\simplenews\Entity\Subscriber;
 use Drupal\user\Entity\User;
 
@@ -22,14 +23,14 @@ class SimplenewsSynchronizeFieldsFormTest extends SimplenewsTestBase {
   /**
    * User.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Add a field to both entities.
@@ -60,7 +61,9 @@ class SimplenewsSynchronizeFieldsFormTest extends SimplenewsTestBase {
     // Edit subscriber field and assert user field is changed accordingly.
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/people/simplenews/edit/' . $subscriber->id());
-    $this->assertField('field_shared[0][value]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('field_shared[0][value]');
     $this->assertSession()->responseContains($this->user->field_shared->value);
 
     $new_value = $this->randomMachineName();
@@ -69,7 +72,7 @@ class SimplenewsSynchronizeFieldsFormTest extends SimplenewsTestBase {
     $this->assertSession()->responseContains($new_value);
 
     $this->user = User::load($this->user->id());
-    $this->assertEqual($this->user->field_shared->value, $new_value);
+    $this->assertEquals($this->user->field_shared->value, $new_value);
 
     // Unset the sync setting and assert field is not synced.
     $this->drupalGet('admin/config/people/simplenews/settings/subscriber');
@@ -82,8 +85,8 @@ class SimplenewsSynchronizeFieldsFormTest extends SimplenewsTestBase {
     $this->assertSession()->responseContains($unsynced_value);
 
     $this->user = User::load($this->user->id());
-    $this->assertEqual($this->user->field_shared->value, $new_value);
-    $this->assertNotEqual($this->user->field_shared->value, $unsynced_value);
+    $this->assertEquals($this->user->field_shared->value, $new_value);
+    $this->assertNotEquals($this->user->field_shared->value, $unsynced_value);
   }
 
 }
diff --git a/tests/src/Functional/SimplenewsTestBase.php b/tests/src/Functional/SimplenewsTestBase.php
index 9d67d64..b6094ae 100644
--- a/tests/src/Functional/SimplenewsTestBase.php
+++ b/tests/src/Functional/SimplenewsTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simplenews\Functional;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -34,14 +35,14 @@ abstract class SimplenewsTestBase extends BrowserTestBase {
   /**
    * The Simplenews settings config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ -211,7 +212,7 @@ abstract class SimplenewsTestBase extends BrowserTestBase {
     $path = $uid ? "/user/$uid/simplenews" : '';
     $this->drupalGet($path);
     $this->submitForm($edit, $uid ? t('Save') : t('Subscribe'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     if (!$uid) {
       $block->delete();
@@ -249,12 +250,12 @@ abstract class SimplenewsTestBase extends BrowserTestBase {
    *
    * Can be used if user is unverified and does not yet have a password.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to login.
    */
   protected function resetPassLogin(UserInterface $user) {
     $uid = $user->id();
-    $timestamp = REQUEST_TIME;
+    $timestamp = \Drupal::time()->getRequestTime();
     $hash = user_pass_rehash($user, $timestamp);
     $this->drupalGet("/user/reset/$uid/$timestamp/$hash");
     $this->submitForm([], 'Log in');
@@ -263,7 +264,7 @@ abstract class SimplenewsTestBase extends BrowserTestBase {
   /**
    * Returns the last created Subscriber.
    *
-   * @return \Drupal\simplenews\Entity\Subscriber|null
+   * @return Subscriber|null
    *   The Subscriber entity, or NULL if there is none.
    */
   protected function getLatestSubscriber() {
diff --git a/tests/src/Functional/SimplenewsTestSubscriptionOutput.php b/tests/src/Functional/SimplenewsTestSubscriptionOutput.php
index c1cf2d0..58fd53e 100644
--- a/tests/src/Functional/SimplenewsTestSubscriptionOutput.php
+++ b/tests/src/Functional/SimplenewsTestSubscriptionOutput.php
@@ -35,20 +35,20 @@ class SimplenewsTestSubscriptionOutput extends SimplenewsTestBase {
     $this->drupalLogin($admin_user);
     // Tests extra fields for admin user.
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertLink('Manage subscriptions');
+    $this->assertSession()->linkExists('Manage subscriptions');
     $this->drupalLogout();
     // Tests extra fields for user.
     $this->drupalLogin($user);
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
     $this->drupalGet('user/' . $user->id());
-    $this->assertLink('Manage subscriptions');
+    $this->assertSession()->linkExists('Manage subscriptions');
     $this->drupalLogout();
     // Tests extra fields for anonymous users.
     $this->drupalGet('user/' . $admin_user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
     $this->drupalGet('user/' . $user->id());
-    $this->assertNoLink('Manage subscriptions');
+    $this->assertSession()->linkNotExists('Manage subscriptions');
   }
 
 }
diff --git a/tests/src/Functional/SimplenewsUninstallTest.php b/tests/src/Functional/SimplenewsUninstallTest.php
index 8f6ddb1..8507a3f 100644
--- a/tests/src/Functional/SimplenewsUninstallTest.php
+++ b/tests/src/Functional/SimplenewsUninstallTest.php
@@ -12,7 +12,7 @@ class SimplenewsUninstallTest extends SimplenewsTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     \Drupal::service('module_installer')->uninstall(['simplenews_test']);
diff --git a/tests/src/Kernel/SimplenewsKernelTest.php b/tests/src/Kernel/SimplenewsKernelTest.php
index bf55b3d..c84bb8a 100644
--- a/tests/src/Kernel/SimplenewsKernelTest.php
+++ b/tests/src/Kernel/SimplenewsKernelTest.php
@@ -22,10 +22,10 @@ class SimplenewsKernelTest extends KernelTestBase {
    * Test mail masking function.
    */
   public function testMasking() {
-    $this->assertEqual('t*****@e*****.org', simplenews_mask_mail('test@example.org'));
-    $this->assertEqual('t*****@e*****.org', simplenews_mask_mail('t@example.org'));
-    $this->assertEqual('t*****@t*****.org', simplenews_mask_mail('t@test.example.org'));
-    $this->assertEqual('t*****@e*****', simplenews_mask_mail('t@example'));
+    $this->assertEquals('t*****@e*****.org', simplenews_mask_mail('test@example.org'));
+    $this->assertEquals('t*****@e*****.org', simplenews_mask_mail('t@example.org'));
+    $this->assertEquals('t*****@t*****.org', simplenews_mask_mail('t@test.example.org'));
+    $this->assertEquals('t*****@e*****', simplenews_mask_mail('t@example'));
 
   }
 
diff --git a/tests/src/Kernel/SimplenewsMonitoringTest.php b/tests/src/Kernel/SimplenewsMonitoringTest.php
index 07327c2..e7aa01c 100644
--- a/tests/src/Kernel/SimplenewsMonitoringTest.php
+++ b/tests/src/Kernel/SimplenewsMonitoringTest.php
@@ -34,7 +34,7 @@ class SimplenewsMonitoringTest extends KernelTestBase {
 
     // No spool items - status OK.
     $result = $this->runSensor('simplenews_pending');
-    $this->assertEqual($result->getValue(), 0);
+    $this->assertEquals($result->getValue(), 0);
 
     // Crate a spool item in state pending.
     \Drupal::service('simplenews.spool_storage')->addMail([
@@ -45,7 +45,7 @@ class SimplenewsMonitoringTest extends KernelTestBase {
     ]);
 
     $result = $this->runSensor('simplenews_pending');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
   }
 
   /**
diff --git a/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php b/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php
index 94cb4f3..073721e 100644
--- a/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php
+++ b/tests/src/Kernel/SimplenewsSynchronizeFieldsTest.php
@@ -25,7 +25,7 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('simplenews_subscriber');
@@ -42,14 +42,14 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
    */
   public function testSynchronizeBaseFields() {
     // Create subscriber.
-    /** @var \Drupal\simplenews\Entity\Subscriber $subscriber */
+    /** @var Subscriber $subscriber */
     $subscriber = Subscriber::create([
       'mail' => 'user@example.com',
     ]);
     $subscriber->save();
 
     // Create user with same email.
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::create([
       'name' => 'user',
       'mail' => 'user@example.com',
@@ -59,8 +59,8 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
 
     // Assert that subscriber's fields are updated.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->getUserId(), $user->id());
-    $this->assertEqual($subscriber->getLangcode(), 'fr');
+    $this->assertEquals($subscriber->getUserId(), $user->id());
+    $this->assertEquals($subscriber->getLangcode(), 'fr');
     $this->assertFalse($subscriber->getStatus());
 
     // Update user fields.
@@ -71,8 +71,8 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
 
     // Assert that subscriber's fields are updated again.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->getMail(), 'user2@example.com');
-    $this->assertEqual($subscriber->getLangcode(), 'en');
+    $this->assertEquals($subscriber->getMail(), 'user2@example.com');
+    $this->assertEquals($subscriber->getLangcode(), 'en');
     $this->assertTrue($subscriber->getStatus());
 
     // Status is still synced even if sync_fields is not set.
@@ -92,14 +92,14 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
     $this->addField('string', 'field_on_both', 'user');
 
     // Create a user and a subscriber.
-    /** @var \Drupal\simplenews\Entity\Subscriber $subscriber */
+    /** @var Subscriber $subscriber */
     $subscriber = Subscriber::create([
       'field_on_both' => 'foo',
       'mail' => 'user@example.com',
       'created' => 2000,
     ]);
     $subscriber->save();
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::create([
       'name' => 'user',
       'field_on_both' => 'foo',
@@ -116,8 +116,8 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
 
     // Assert that (only) the shared field is also updated on the user.
     $user = User::load($user->id());
-    $this->assertEqual($user->get('field_on_both')->value, 'bar');
-    $this->assertEqual($user->get('created')->value, 1000);
+    $this->assertEquals($user->get('field_on_both')->value, 'bar');
+    $this->assertEquals($user->get('created')->value, 1000);
 
     // Update the fields on the user.
     $user->set('field_on_both', 'baz');
@@ -126,8 +126,8 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
 
     // Assert that (only) the shared field is also updated on the subscriber.
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->get('field_on_both')->value, 'baz');
-    $this->assertEqual($subscriber->get('created')->value, 3000);
+    $this->assertEquals($subscriber->get('field_on_both')->value, 'baz');
+    $this->assertEquals($subscriber->get('created')->value, 3000);
   }
 
   /**
@@ -139,7 +139,7 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
     $this->addField('string', 'field_on_both', 'user');
 
     // Create a user with values for the fields.
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::create([
       'name' => 'user',
       'field_on_both' => 'foo',
@@ -148,13 +148,13 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
     $user->save();
 
     // Create a subscriber.
-    /** @var \Drupal\simplenews\Entity\Subscriber $subscriber */
+    /** @var Subscriber $subscriber */
     $subscriber = Subscriber::create([
       'mail' => 'user@example.com',
     ]);
 
     // Assert that the shared field already has a value.
-    $this->assertEqual($subscriber->get('field_on_both')->value, $user->get('field_on_both')->value);
+    $this->assertEquals($subscriber->get('field_on_both')->value, $user->get('field_on_both')->value);
 
     // Create a subscriber with values for the fields.
     $subscriber = Subscriber::create([
@@ -170,7 +170,7 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
     ]);
 
     // Assert that the shared field already has a value.
-    $this->assertEqual($user->get('field_on_both')->value, $subscriber->get('field_on_both')->value);
+    $this->assertEquals($user->get('field_on_both')->value, $subscriber->get('field_on_both')->value);
   }
 
   /**
@@ -204,7 +204,7 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
     $subscriber->set('field_on_both', 'bar');
     $subscriber->save();
     $user = User::load($user->id());
-    $this->assertEqual($user->get('field_on_both')->value, 'foo');
+    $this->assertEquals($user->get('field_on_both')->value, 'foo');
 
     // Create a subscriber with a value for the field.
     $subscriber = Subscriber::create([
@@ -226,7 +226,7 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
     $user->set('field_on_both', 'bar');
     $user->save();
     $subscriber = Subscriber::load($subscriber->id());
-    $this->assertEqual($subscriber->get('field_on_both')->value, 'foo');
+    $this->assertEquals($subscriber->get('field_on_both')->value, 'foo');
   }
 
   /**
@@ -246,14 +246,14 @@ class SimplenewsSynchronizeFieldsTest extends KernelTestBase {
    */
   public function testUserRecursionPrevention() {
     // Create a subscriber.
-    /** @var \Drupal\simplenews\Entity\Subscriber $subscriber */
+    /** @var Subscriber $subscriber */
     $subscriber = Subscriber::create([
       'mail' => 'user@example.com',
     ]);
     $subscriber->save();
 
     // Create a user with same email.
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = User::create([
       'name' => 'user',
       'mail' => 'user@example.com',
